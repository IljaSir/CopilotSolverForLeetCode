Synthesizing 10/10 solutions

=======

        int MOD = 1000000007;
        long lcm = (long) a * b / gcd(a, b);
        long lo = 0;
        long hi = (long) Math.min(a, b) * n;
        while (lo < hi) {
            long mi = lo + (hi - lo) / 2;
            if (mi / a + mi / b - mi / lcm < n) {
                lo = mi + 1;
            } else {
                hi = mi;
            }
        }
        return (int) (lo % MOD);
    }

    private int gcd(int a, int b) {
        while (b > 0) {
            int tmp = a;
            a = b;
            b = tmp % b;
        }
        return a;

=======

        int lcm = a * b / gcd(a, b);
        long left = 0, right = (long) 1e15;
        while (left < right) {
            long mid = left + (right - left) / 2;
            long count = mid / a + mid / b - mid / lcm;
            if (count < n) {
                left = mid + 1;
            } else {
                right = mid;
            }
        }
        return (int) (left % 1000000007);

=======

        int mod = 1000000007;
        long lcm = a / gcd(a, b) * b;
        long low = Math.min(a, b);
        long high = (long) n * low;
        while (low < high) {
            long mid = (low + high) / 2;
            long count = mid / a + mid / b - mid / lcm;
            if (count < n) {
                low = mid + 1;
            } else {
                high = mid;
            }
        }
        return (int) (low % mod);

=======

        int mod = 1000000007;
        int lcm = a / gcd(a, b) * b;
        int lo = 0;
        int hi = Integer.MAX_VALUE;
        while (lo < hi) {
            int mid = lo + (hi - lo) / 2;
            if (mid / a + mid / b - mid / lcm < n) {
                lo = mid + 1;
            } else {
                hi = mid;
            }
        }
        return lo % mod;

=======

        int mod = 1_000_000_007;
        int lcm = a / gcd(a, b) * b;
        int low = Math.min(a, b);
        int high = (int)1e15;
        while (low < high) {
            int mid = low + high >> 1;
            if (mid / a + mid / b - mid / lcm < n) {
                low = mid + 1;
            } else {
                high = mid;
            }
        }
        return (int)(low % mod);

=======

        long lcm = lcm(a, b);
        long lo = 0;
        long hi = 1L * n * Math.max(a, b);
        while (lo < hi) {
            long mid = (lo + hi) / 2;
            long cnt = mid / a + mid / b - mid / lcm;
            if (cnt < n) {
                lo = mid + 1;
            } else {
                hi = mid;
            }
        }
        return (int) (lo % 1000000007);
    }

    long lcm(int a, int b) {
        return a / gcd(a, b) * b;

=======

        int mod = 1000000007;
        int lcm = a * b / gcd(a, b);
        int left = 1;
        int right = 1000000000;
        while (left < right) {
            int mid = left + (right - left) / 2;
            int count = mid / a + mid / b - mid / lcm;
            if (count < n) {
                left = mid + 1;
            } else {
                right = mid;
            }
        }
        return (int) (left % mod);
    }
    private int gcd(int a, int b) {
        if (a < b) {
            return gcd(b, a);
        }
        if (b == 0) {
            return a;
        }
        return gcd(b, a % b);

=======

        int mod = 1000000007;
        int gcd = gcd(a, b);
        int lcm = a * b / gcd;
        int l = 2;
        int r = Math.min(a, b) * n;
        int res = 0;
        while (l <= r) {
            int m = l + (r - l) / 2;
            int count = m / a + m / b - m / lcm;
            if (count >= n) {
                res = m;
                r = m - 1;
            } else {
                l = m + 1;
            }
        }
        return res % mod;
    }
    private int gcd(int a, int b) {
        if (b == 0) {
            return a;
        }
        return gcd(b, a % b);

=======

        int c = gcd(a, b);
        long lcm = (long) a * b / c;
        long left = 0;
        long right = (long) Math.min(a, b) * n;
        long ans = 0;
        while (left <= right) {
            long mid = left + (right - left) / 2;
            long count = mid / a + mid / b - mid / lcm;
            if (count < n) {
                left = mid + 1;
            } else {
                ans = mid;
                right = mid - 1;
            }
        }
        return (int) (ans % (1000000007));
    }
    private int gcd(int a, int b) {
        if (b == 0) {
            return a;
        }
        return gcd(b, a % b);

=======

        int mod = 1000000007;
        long res = 0;
        long l = 1, r = (long)n * Math.max(a, b);
        while (l <= r) {
            long mid = (l + r) / 2;
            long cnt = mid / a + mid / b - mid / (a * b);
            if (cnt < n) {
                l = mid + 1;
            } else {
                res = mid;
                r = mid - 1;
            }
        }
        return (int)(res % mod);
