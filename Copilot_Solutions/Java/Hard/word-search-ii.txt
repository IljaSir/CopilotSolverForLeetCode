Synthesizing 10/10 solutions

=======

        List<String> res = new ArrayList<>();
        Trie trie = new Trie();
        for (String word : words) {
            trie.insert(word);
        }
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[0].length; j++) {
                dfs(board, i, j, trie.root, res);
            }
        }
        return res;
    }
    
    private void dfs(char[][] board, int i, int j, TrieNode node, List<String> res) {
        char c = board[i][j];
        if (c == '#' || node.children[c - 'a'] == null) {
            return;
        }
        node = node.children[c - 'a'];
        if (node.word != null) {
            res.add(node.word);
            node.word = null;
        }
        board[i][j] = '#';
        if (i > 0) {
            dfs(board, i - 1, j, node, res);
        }
        if (j > 0) {
            dfs(board, i, j - 1, node, res);
        }
        if (i < board.length - 1) {
            dfs(board, i + 1, j, node, res);
        }
        if (j < board[0].length - 1) {
            dfs(board, i, j + 1, node, res);
        }
        board[i][j] = c;
    }
    
    class Trie {
        TrieNode root;
        Trie() {
            root = new TrieNode();
        }
        
        void insert(String word) {
            TrieNode node = root;
            for (char c : word.toCharArray()) {
                if (node.children[c - 'a'] == null) {
                    node.children[c - 'a'] = new TrieNode();
                }
                node = node.children[c - 'a'];
            }
            node.word = word;
        }
    }
    
    class TrieNode {
        TrieNode[] children;
        String word;
        TrieNode() {
            children = new TrieNode[26];
            word = null;
        }

=======

        Set<String> result = new HashSet<>();
        Trie trie = new Trie();
        for (String word : words) {
            trie.insert(word);
        }
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[0].length; j++) {
                dfs(board, i, j, trie.root, result);
            }
        }
        return new ArrayList<>(result);
    }

    private void dfs(char[][] board, int i, int j, TrieNode p, Set<String> result) {
        char c = board[i][j];
        if (c == '#' || p.next[c - 'a'] == null) {
            return;
        }
        p = p.next[c - 'a'];
        if (p.word != null) {
            result.add(p.word);
        }
        board[i][j] = '#';
        if (i > 0) {
            dfs(board, i - 1, j, p, result);
        }
        if (j > 0) {
            dfs(board, i, j - 1, p, result);
        }
        if (i < board.length - 1) {
            dfs(board, i + 1, j, p, result);
        }
        if (j < board[0].length - 1) {
            dfs(board, i, j + 1, p, result);
        }
        board[i][j] = c;
    }
}

=======

        Trie trie = new Trie();
        for (String word : words) {
            trie.insert(word);
        }
        Set<String> res = new HashSet<>();
        int m = board.length;
        int n = board[0].length;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                dfs(board, i, j, trie.root, res);
            }
        }
        return new ArrayList<String>(res);
    }

    public void dfs(char[][] board, int i, int j, TrieNode p, Set<String> res) {
        char c = board[i][j];
        if (c == '#' || p.next[c - 'a'] == null) return;
        p = p.next[c - 'a'];
        if (p.word != null) {
            res.add(p.word);
        }

        board[i][j] = '#';
        if (i > 0) dfs(board, i - 1, j ,p, res);
        if (j > 0) dfs(board, i, j - 1, p, res);
        if (i < board.length - 1) dfs(board, i + 1, j, p, res);
        if (j < board[0].length - 1) dfs(board, i, j + 1, p, res);
        board[i][j] = c;
    }
}

=======

        List<String> result = new ArrayList<>();
        Trie trie = new Trie();
        for (String word : words) {
            trie.insert(word);
        }

        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[0].length; j++) {
                dfs(board, i, j, trie.root, result);
            }
        }

        return result;
    }

    private void dfs(char[][] board, int i, int j, TrieNode node, List<String> result) {
        char c = board[i][j];
        if (c == '#' || node.children[c - 'a'] == null) {
            return;
        }

        node = node.children[c - 'a'];
        if (node.word != null) {
            result.add(node.word);
            node.word = null;
        }

        board[i][j] = '#';
        if (i > 0) {
            dfs(board, i - 1, j, node, result);
        }
        if (j > 0) {
            dfs(board, i, j - 1, node, result);
        }
        if (i < board.length - 1) {
            dfs(board, i + 1, j, node, result);
        }
        if (j < board[0].length - 1) {
            dfs(board, i, j + 1, node, result);
        }
        board[i][j] = c;
    }
}

=======

        List<String> ans = new ArrayList<>();
        Trie trie = new Trie();
        for (String word : words) {
            trie.insert(word);
        }
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[i].length; j++) {
                dfs(board, i, j, trie.root, ans);
            }
        }
        return ans;
    }

    private void dfs(char[][] board, int i, int j, TrieNode node, List<String> ans) {
        char c = board[i][j];
        if (c == '#' || node.next[c - 'a'] == null) {
            return;
        }
        node = node.next[c - 'a'];
        if (node.word != null) {
            ans.add(node.word);
            node.word = null;
        }
        board[i][j] = '#';
        if (i > 0) {
            dfs(board, i - 1, j, node, ans);
        }
        if (j > 0) {
            dfs(board, i, j - 1, node, ans);
        }
        if (i < board.length - 1) {
            dfs(board, i + 1, j, node, ans);
        }
        if (j < board[i].length - 1) {
            dfs(board, i, j + 1, node, ans);
        }
        board[i][j] = c;
    }

    class TrieNode {
        TrieNode[] next = new TrieNode[26];
        String word;
    }

    class Trie {
        TrieNode root = new TrieNode();

        public void insert(String word) {
            TrieNode node = root;
            for (char c : word.toCharArray()) {
                if (node.next[c - 'a'] == null) {
                    node.next[c - 'a'] = new TrieNode();
                }
                node = node.next[c - 'a'];
            }
            node.word = word;
        }

=======

        List<String> result = new ArrayList<>();
        if (board == null || board.length == 0 || board[0].length == 0) {
            return result;
        }
        Trie trie = new Trie();
        for (String word: words) {
            trie.insert(word);
        }
        int m = board.length;
        int n = board[0].length;
        boolean[][] visited = new boolean[m][n];
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                dfs(board, visited, i, j, trie.root, result);
            }
        }
        return result;
    }
    
    private void dfs(char[][] board, boolean[][] visited, int i, int j, TrieNode root, List<String> result) {
        if (i < 0 || i >= board.length || j < 0 || j >= board[0].length || visited[i][j]) {
            return;
        }
        char c = board[i][j];
        if (root.children[c - 'a'] == null) {
            return;
        }
        root = root.children[c - 'a'];
        if (root.word != null) {
            result.add(root.word);
            root.word = null;
        }
        visited[i][j] = true;
        dfs(board, visited, i + 1, j, root, result);
        dfs(board, visited, i - 1, j, root, result);
        dfs(board, visited, i, j + 1, root, result);
        dfs(board, visited, i, j - 1, root, result);
        visited[i][j] = false;
    }
    
    class Trie {
        TrieNode root;
        public Trie() {
            root = new TrieNode();
        }
        
        public void insert(String word) {
            TrieNode node = root;
            for (int i = 0; i < word.length(); i++) {
                char c = word.charAt(i);
                if (node.children[c - 'a'] == null) {
                    node.children[c - 'a'] = new TrieNode();
                }
                node = node.children[c - 'a'];
            }
            node.word = word;
        }

=======

        List<String> result = new ArrayList<>();
        Trie trie = new Trie();
        for(String word: words) {
            trie.insert(word);
        }
        int m = board.length;
        int n = board[0].length;
        boolean[][] visited = new boolean[m][n];
        for(int i = 0; i < m; i++) {
            for(int j = 0; j < n; j++) {
                dfs(board, visited, i, j, trie.root, result);
            }
        }
        return result;
    }

    public void dfs(char[][] board, boolean[][] visited, int i, int j, TrieNode root, List<String> result) {
        if(i < 0 || j < 0 || i >= board.length || j >= board[0].length || visited[i][j]) {
            return;
        }

        char c = board[i][j];
        TrieNode node = root.children[c - 'a'];
        if(node == null) {
            return;
        }

        if(node.word != null) {
            result.add(node.word);
            node.word = null;
        }
        visited[i][j] = true;
        dfs(board, visited, i + 1, j, node, result);
        dfs(board, visited, i - 1, j, node, result);
        dfs(board, visited, i, j + 1, node, result);
        dfs(board, visited, i, j - 1, node, result);
        visited[i][j] = false;
    }
}

=======

        List<String> result = new ArrayList<String>();
        Trie trie = new Trie();
        for (String word : words) {
            trie.insert(word);
        }
        int row = board.length;
        int col = board[0].length;
        boolean[][] visited = new boolean[row][col];
        for (int i = 0; i < row; i++) {
            for (int j = 0; j < col; j++) {
                dfs(board, visited, i, j, trie.root, result);
            }
        }
        return result;
    }
    public void dfs(char[][] board, boolean[][] visited, int i, int j, TrieNode node, List<String> result) {
        if (i < 0 || i >= board.length || j < 0 || j >= board[0].length || visited[i][j]) {
            return;
        }
        char c = board[i][j];
        if (node.children[c - 'a'] == null) {
            return;
        }
        node = node.children[c - 'a'];
        if (node.word != null) {
            result.add(node.word);
            node.word = null;
        }
        visited[i][j] = true;
        dfs(board, visited, i + 1, j, node, result);
        dfs(board, visited, i - 1, j, node, result);
        dfs(board, visited, i, j + 1, node, result);
        dfs(board, visited, i, j - 1, node, result);
        visited[i][j] = false;
    }
}

=======

        List<String> result = new ArrayList<>();
        Trie trie = new Trie();
        for(String word: words) {
            trie.insert(word);
        }
        boolean[][] visited = new boolean[board.length][board[0].length];
        for(int i = 0; i < board.length; i++) {
            for(int j = 0; j < board[0].length; j++) {
                dfs(board, visited, i, j, trie.root, result);
            }
        }
        return result;
    }
    
    private void dfs(char[][] board, boolean[][] visited, int i, int j, TrieNode node, List<String> result) {
        if(i < 0 || i >= board.length || j < 0 || j >= board[0].length || visited[i][j]) {
            return;
        }
        node = node.children[board[i][j] - 'a'];
        if(node == null) {
            return;
        }
        if(node.word != null) {
            result.add(node.word);
            node.word = null;
        }
        visited[i][j] = true;
        dfs(board, visited, i + 1, j, node, result);
        dfs(board, visited, i - 1, j, node, result);
        dfs(board, visited, i, j + 1, node, result);
        dfs(board, visited, i, j - 1, node, result);
        visited[i][j] = false;
    }
    
    class Trie {
        TrieNode root;
        
        public Trie() {
            root = new TrieNode();
        }
        
        public void insert(String word) {
            TrieNode node = root;
            for(char c: word.toCharArray()) {
                int index = c - 'a';
                if(node.children[index] == null) {
                    node.children[index] = new TrieNode();
                }
                node = node.children[index];
            }
            node.word = word;
        }
    }
    
    class TrieNode {
        TrieNode[] children;
        String word;
        
        public TrieNode() {
            children = new TrieNode[26];
        }

=======

        int m = board.length;
        int n = board[0].length;
        TrieNode root = buildTrie(words);
        List<String> ans = new ArrayList<>();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                dfs(board, i, j, root, ans);
            }
        }
        return ans;
    }
    void dfs(char[][] board, int i, int j, TrieNode p, List<String> ans) {
        char c = board[i][j];
        if (c == '#' || p.next[c - 'a'] == null) return;
        p = p.next[c - 'a'];
        if (p.word != null) {   // found one
            ans.add(p.word);
            p.word = null;     // de-duplicate
        }

        board[i][j] = '#';
        if (i > 0) dfs(board, i - 1, j ,p, ans); 
        if (j > 0) dfs(board, i, j - 1, p, ans);
        if (i < board.length - 1) dfs(board, i + 1, j, p, ans); 
        if (j < board[0].length - 1) dfs(board, i, j + 1, p, ans); 
        board[i][j] = c;
    }
    class TrieNode {
        TrieNode[] next = new TrieNode[26];
        String word;
    }
    private TrieNode buildTrie(String[] words) {
        TrieNode root = new TrieNode();
        for (String w : words) {
            TrieNode p = root;
            for (char c : w.toCharArray()) {
                int i = c - 'a';
                if (p.next[i] == null) p.next[i] = new TrieNode();
                p = p.next[i];
            }
            p.word = w;
        }
        return root;
