Synthesizing 4/10 solutions

=======

        int n = edges.length + 1;
        List<Integer>[] graph = new List[n];
        for (int i = 0; i < n; i++) {
            graph[i] = new ArrayList<>();
        }
        for (int[] e : edges) {
            graph[e[0]].add(e[1]);
            graph[e[1]].add(e[0]);
        }
        
        int[] indegree = new int[n];
        for (int[] e : edges) {
            indegree[e[0]]++;
            indegree[e[1]]++;
        }
        
        int root = -1;
        for (int i = 0; i < n; i++) {
            if (indegree[i] == 1) {
                root = i;
                break;
            }
        }
        
        boolean[] visited = new boolean[n];
        dfs(graph, visited, root);
        
        int[] parents = new int[n];
        for (int i = 0; i < n; i++) {
            parents[i] = -1;
        }
        for (int[] e : edges) {
            if (visited[e[0]]) {
                parents[e[1]] = e[0];
            } else {
                parents[e[0]] = e[1];
            }
        }
        
        int res = 0;
        for (int i = 0; i < n; i++) {
            if (parents[i] == -1) {
                continue;
            }
            int count = 0;
            for (int[] g : guesses) {
                if (g[0] == i && parents[g[1]] == i) {
                    count++;
                }
            }
            if (count == k) {
                res++;
            }
        }
        
        return res;
    }
    
    private void dfs(List<Integer>[] graph, boolean[] visited, int root) {
        if (visited[root]) {
            return;
        }
        visited[root] = true;
        for (int next : graph[root]) {
            dfs(graph, visited, next);
        }

=======

        List<Integer>[] g = new List[edges.length + 1];
        for (int i = 0; i < g.length; i++) {
            g[i] = new ArrayList<>();
        }
        for (int[] e : edges) {
            g[e[0]].add(e[1]);
            g[e[1]].add(e[0]);
        }
        int[] parent = new int[edges.length + 1];
        int[] count = new int[edges.length + 1];
        Arrays.fill(parent, -1);
        Deque<Integer> q = new ArrayDeque<>();
        q.addLast(0);
        while (!q.isEmpty()) {
            int u = q.removeFirst();
            for (int v : g[u]) {
                if (parent[v] == -1) {
                    parent[v] = u;
                    q.addLast(v);
                }
            }
        }
        for (int[] gues : guesses) {
            int u = gues[0], v = gues[1];
            if (parent[v] == u) {
                count[u]++;
            } else if (parent[u] == v) {
                count[v]++;
            }
        }
        int res = 0;
        for (int i = 0; i < count.length; i++) {
            if (count[i] >= k) {
                res++;
            }
        }
        return res;

=======

        int n = edges.length + 1;
        int[] degree = new int[n];
        for (int[] edge : edges) {
            degree[edge[0]]++;
            degree[edge[1]]++;
        }
        int[] root = new int[n];
        for (int i = 0; i < n; i++) {
            root[i] = degree[i] == 1 ? 1 : 0;
        }
        for (int[] guess : guesses) {
            if (root[guess[0]] == 0) {
                root[guess[0]] = 2;
            }
            if (root[guess[1]] == 0) {
                root[guess[1]] = 2;
            }
        }
        int[] count = new int[n];
        for (int[] guess : guesses) {
            if (root[guess[0]] == 1) {
                count[guess[1]]++;
            }
            if (root[guess[1]] == 1) {
                count[guess[0]]++;
            }
        }
        int result = 0;
        for (int i = 0; i < n; i++) {
            if (count[i] == k) {
                result++;
            }
        }
        return result;

=======

        int n = edges.length + 1;
        int[] degree = new int[n];
        for (int[] edge : edges) {
            degree[edge[0]]++;
            degree[edge[1]]++;
        }
        int[] roots = new int[n];
        for (int[] guess : guesses) {
            if (degree[guess[0]] == 1) {
                roots[guess[0]]++;
            }
            if (degree[guess[1]] == 1) {
                roots[guess[1]]++;
            }
        }
        int count = 0;
        for (int i = 0; i < n; i++) {
            if (roots[i] >= k) {
                count++;
            }
        }
        return count;
