Synthesizing 9/10 solutions

=======

        int[] left = new int[26];
        int[] right = new int[26];
        Arrays.fill(left, s.length());
        Arrays.fill(right, -1);
        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            left[c - 'a'] = Math.min(left[c - 'a'], i);
            right[c - 'a'] = Math.max(right[c - 'a'], i);
        }
        int[] stack = new int[s.length()];
        int top = -1;
        for (int i = 0; i < s.length(); i++) {
            if (i == left[s.charAt(i) - 'a']) {
                stack[++top] = i;
            }
            if (top >= 0) {
                int l = stack[top];
                int r = right[s.charAt(l) - 'a'];
                if (i == r) {
                    while (top >= 0 && stack[top] >= l) {
                        l = Math.min(l, stack[top--]);
                    }
                    stack[++top] = l;
                }
            }
        }
        List<String> ans = new ArrayList<>();
        for (int i = 0; i <= top; i++) {
            ans.add(s.substring(stack[i], right[s.charAt(stack[i]) - 'a'] + 1));
        }
        return ans;

=======

        int[] left = new int[26];
        int[] right = new int[26];
        Arrays.fill(left, s.length());
        Arrays.fill(right, -1);
        for (int i = 0; i < s.length(); i++) {
            int c = s.charAt(i) - 'a';
            left[c] = Math.min(left[c], i);
            right[c] = Math.max(right[c], i);
        }
        List<int[]> intervals = new ArrayList<>();
        for (int i = 0; i < 26; i++) {
            if (left[i] <= right[i]) {
                intervals.add(new int[] {left[i], right[i]});
            }
        }
        Collections.sort(intervals, (a, b) -> a[0] - b[0]);
        List<int[]> merged = new ArrayList<>();
        for (int[] interval : intervals) {
            if (merged.isEmpty() || merged.get(merged.size() - 1)[1] < interval[0]) {
                merged.add(interval);
            } else {
                merged.get(merged.size() - 1)[1] = Math.max(merged.get(merged.size() - 1)[1], interval[1]);
            }
        }
        List<String> ans = new ArrayList<>();
        for (int[] interval : merged) {
            int l = interval[0], r = interval[1];
            boolean[] vis = new boolean[26];
            boolean flag = true;
            for (int i = l; i <= r; i++) {
                int c = s.charAt(i) - 'a';
                if (vis[c]) {
                    continue;
                }
                vis[c] = true;
                if (left[c] < l || right[c] > r) {
                    flag = false;
                    break;
                }
            }
            if (flag) {
                ans.add(s.substring(l, r + 1));
            }
        }
        return ans;

=======

        int[] left = new int[26];
        int[] right = new int[26];
        Arrays.fill(left, s.length());
        Arrays.fill(right, -1);
        for (int i = 0; i < s.length(); i++) {
            int c = s.charAt(i) - 'a';
            left[c] = Math.min(left[c], i);
            right[c] = Math.max(right[c], i);
        }
        List<int[]> intervals = new ArrayList<>();
        for (int i = 0; i < 26; i++) {
            if (left[i] <= right[i]) {
                intervals.add(new int[]{left[i], right[i]});
            }
        }
        intervals.sort((a, b) -> a[0] - b[0]);
        List<String> res = new ArrayList<>();
        int rightBound = -1;
        for (int i = 0; i < intervals.size(); i++) {
            int[] interval = intervals.get(i);
            if (interval[0] > rightBound) {
                res.add(s.substring(interval[0], interval[1] + 1));
                rightBound = interval[1];
            } else {
                int start = interval[0];
                int end = Math.min(interval[1], rightBound);
                for (int j = start; j <= end; j++) {
                    int c = s.charAt(j) - 'a';
                    if (left[c] < start || right[c] > end) {
                        break;
                    }
                    if (j == end) {
                        res.add(s.substring(start, end + 1));
                        rightBound = end;
                    }
                }
            }
        }
        return res;

=======

        int[] first = new int[26];
        int[] last = new int[26];
        Arrays.fill(first, s.length());
        Arrays.fill(last, -1);
        for (int i = 0; i < s.length(); i++) {
            int c = s.charAt(i) - 'a';
            first[c] = Math.min(first[c], i);
            last[c] = Math.max(last[c], i);
        }
        List<int[]> intervals = new ArrayList<>();
        for (int i = 0; i < 26; i++) {
            if (first[i] <= last[i]) {
                intervals.add(new int[]{first[i], last[i]});
            }
        }
        intervals.sort((a, b) -> a[0] - b[0]);
        List<int[]> merged = new ArrayList<>();
        for (int[] interval : intervals) {
            if (merged.isEmpty() || merged.get(merged.size() - 1)[1] < interval[0]) {
                merged.add(interval);
            } else {
                merged.get(merged.size() - 1)[1] = Math.max(merged.get(merged.size() - 1)[1], interval[1]);
            }
        }
        int[] rightmost = new int[s.length()];
        int r = -1;
        for (int i = s.length() - 1; i >= 0; i--) {
            if (i > r) {
                r = merged.get(i)[1];
            }
            rightmost[i] = r;
        }
        List<String> ans = new ArrayList<>();
        int l = 0;
        r = -1;
        for (int i = 0; i < s.length(); i++) {
            if (i > r) {
                l = i;
                r = rightmost[i];
                ans.add(s.substring(l, r + 1));
            } else if (rightmost[i] > r) {
                r = rightmost[i];
                ans.set(ans.size() - 1, s.substring(l, r + 1));
            }
        }
        return ans;

=======

        int[] start = new int[26];
        int[] end = new int[26];
        Arrays.fill(start, Integer.MAX_VALUE);
        Arrays.fill(end, Integer.MIN_VALUE);
        for (int i = 0; i < s.length(); i++) {
            start[s.charAt(i) - 'a'] = Math.min(start[s.charAt(i) - 'a'], i);
            end[s.charAt(i) - 'a'] = Math.max(end[s.charAt(i) - 'a'], i);
        }
        int[] last = new int[s.length()];
        for (int i = 0; i < s.length(); i++) {
            int c = s.charAt(i) - 'a';
            last[i] = end[c];
            for (int j = start[c]; j < i; j++) {
                last[j] = Math.max(last[j], last[i]);
            }
        }
        List<String> res = new ArrayList<>();
        int i = 0;
        while (i < s.length()) {
            int j = last[i];
            String tmp = s.substring(i, j + 1);
            for (char c : tmp.toCharArray()) {
                if (start[c - 'a'] < i || end[c - 'a'] > j) {
                    i = j + 1;
                    j = -1;
                    break;
                }
            }
            if (j >= 0) {
                res.add(tmp);
                i = j + 1;
            }
        }
        return res;

=======

        int[] start = new int[26];
        int[] end = new int[26];
        for (int i = 0; i < 26; i++) {
            start[i] = s.length();
            end[i] = -1;
        }
        for (int i = 0; i < s.length(); i++) {
            int c = s.charAt(i) - 'a';
            start[c] = Math.min(start[c], i);
            end[c] = Math.max(end[c], i);
        }
        int[] dp = new int[s.length()];
        for (int i = 0; i < s.length(); i++) {
            int c = s.charAt(i) - 'a';
            dp[i] = end[c];
        }
        for (int i = 1; i < s.length(); i++) {
            dp[i] = Math.min(dp[i], dp[i - 1]);
        }
        List<String> res = new ArrayList<>();
        int lastStart = 0;
        for (int i = 0; i < s.length(); i++) {
            int c = s.charAt(i) - 'a';
            if (start[c] == i) {
                if (dp[end[c]] >= i) {
                    res.add(s.substring(i, end[c] + 1));
                    lastStart = end[c] + 1;
                }
            }
        }
        return res;

=======

        int[] firstIndex = new int[26];
        int[] lastIndex = new int[26];
        Arrays.fill(firstIndex, s.length());
        Arrays.fill(lastIndex, -1);
        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            firstIndex[c - 'a'] = Math.min(firstIndex[c - 'a'], i);
            lastIndex[c - 'a'] = Math.max(lastIndex[c - 'a'], i);
        }
        List<int[]> intervals = new ArrayList<>();
        for (int i = 0; i < 26; i++) {
            if (firstIndex[i] < lastIndex[i]) {
                intervals.add(new int[]{firstIndex[i], lastIndex[i]});
            }
        }
        Collections.sort(intervals, (a, b) -> a[0] - b[0]);
        List<int[]> merged = new ArrayList<>();
        for (int[] interval : intervals) {
            if (merged.isEmpty() || merged.get(merged.size() - 1)[1] < interval[0]) {
                merged.add(interval);
            } else {
                merged.get(merged.size() - 1)[1] = Math.max(merged.get(merged.size() - 1)[1], interval[1]);
            }
        }
        List<String> ans = new ArrayList<>();
        for (int[] interval : merged) {
            int left = interval[0], right = interval[1];
            int[] count = new int[26];
            for (int i = left; i <= right; i++) {
                count[s.charAt(i) - 'a']++;
            }
            boolean valid = true;
            for (int i = 0; i < 26; i++) {
                if (count[i] > 0 && (firstIndex[i] < left || lastIndex[i] > right)) {
                    valid = false;
                    break;
                }
            }
            if (valid) {
                ans.add(s.substring(left, right + 1));
            }
        }
        return ans;

=======

        List<String> result = new ArrayList<>();
        int[] start = new int[26];
        int[] end = new int[26];
        Arrays.fill(start, Integer.MAX_VALUE);
        Arrays.fill(end, Integer.MIN_VALUE);
        for (int i = 0; i < s.length(); i++) {
            int idx = s.charAt(i) - 'a';
            start[idx] = Math.min(start[idx], i);
            end[idx] = Math.max(end[idx], i);
        }
        int curStart = 0;
        int curEnd = 0;
        int curIdx = 0;
        while (curIdx < s.length()) {
            char c = s.charAt(curIdx);
            int cIdx = c - 'a';
            curStart = start[cIdx];
            curEnd = end[cIdx];
            for (int i = curStart; i < curEnd; i++) {
                char curC = s.charAt(i);
                int curCIdx = curC - 'a';
                if (start[curCIdx] < curStart) {
                    curStart = start[curCIdx];
                }
                if (end[curCIdx] > curEnd) {
                    curEnd = end[curCIdx];
                }
            }
            result.add(s.substring(curStart, curEnd + 1));
            curIdx = curEnd + 1;
        }
        return result;

=======

        List<String> res = new ArrayList<>();
        int[] first = new int[26];
        int[] last = new int[26];
        Arrays.fill(first, s.length());
        Arrays.fill(last, -1);
        for (int i = 0; i < s.length(); i++) {
            int c = s.charAt(i) - 'a';
            first[c] = Math.min(first[c], i);
            last[c] = Math.max(last[c], i);
        }
        int lo = -1;
        int hi = -1;
        for (int i = 0; i < s.length(); i++) {
            if (i == first[s.charAt(i) - 'a']) {
                int end = last[s.charAt(i) - 'a'];
                for (int j = i; j <= end; j++) {
                    end = Math.max(end, last[s.charAt(j) - 'a']);
                }
                if (i > hi) {
                    if (lo != -1) {
                        res.add(s.substring(lo, hi + 1));
                    }
                    lo = i;
                }
                hi = end;
            }
        }
        if (lo != -1) {
            res.add(s.substring(lo, hi + 1));
        }
        return res;
