Synthesizing 10/10 solutions

=======

        int n = stoneValue.length;
        int[] dp = new int[n];
        dp[n - 1] = stoneValue[n - 1];
        for (int i = n - 2; i >= 0; i--) {
            int sum = 0;
            dp[i] = Integer.MIN_VALUE;
            for (int j = i; j < i + 3 && j < n; j++) {
                sum += stoneValue[j];
                dp[i] = Math.max(dp[i], sum - dp[j + 1]);
            }
        }
        if (dp[0] > 0) return "Alice";
        if (dp[0] < 0) return "Bob";
        return "Tie";

=======

        int n = stoneValue.length;
        int[] dp = new int[n + 1];
        dp[n] = 0;
        for (int i = n - 1; i >= 0; i--) {
            int sum = 0;
            dp[i] = Integer.MIN_VALUE;
            for (int j = i; j < n && j < i + 3; j++) {
                sum += stoneValue[j];
                dp[i] = Math.max(dp[i], sum - dp[j + 1]);
            }
        }
        if (dp[0] > 0) return "Alice";
        if (dp[0] < 0) return "Bob";
        return "Tie";

=======

        int n = stoneValue.length;
        int[] dp = new int[n + 1];
        dp[n] = 0;
        for (int i = n - 1; i >= 0; i--) {
            int sum = 0;
            dp[i] = Integer.MIN_VALUE;
            for (int j = i; j < i + 3 && j < n; j++) {
                sum += stoneValue[j];
                dp[i] = Math.max(dp[i], sum - dp[j + 1]);
            }
        }
        if (dp[0] > 0) {
            return "Alice";
        } else if (dp[0] == 0) {
            return "Tie";
        } else {
            return "Bob";
        }

=======

        int n = stoneValue.length;
        int[] dp = new int[n + 1];
        dp[n] = 0;
        for (int i = n - 1; i >= 0; i--) {
            int sum = 0;
            dp[i] = Integer.MIN_VALUE;
            for (int j = i; j < i + 3 && j < n; j++) {
                sum += stoneValue[j];
                dp[i] = Math.max(dp[i], sum - dp[j + 1]);
            }
        }
        if (dp[0] == 0) {
            return "Tie";
        }
        return dp[0] > 0 ? "Alice" : "Bob";

=======

        int n = stoneValue.length;
        int[] dp = new int[n + 1];
        dp[n] = 0;
        for (int i = n - 1; i >= 0; i--) {
            dp[i] = Integer.MIN_VALUE;
            int sum = 0;
            for (int j = i; j < i + 3 && j < n; j++) {
                sum += stoneValue[j];
                dp[i] = Math.max(dp[i], sum - dp[j + 1]);
            }
        }
        if (dp[0] > 0) {
            return "Alice";
        } else if (dp[0] < 0) {
            return "Bob";
        } else {
            return "Tie";
        }

=======

        int n = stoneValue.length;
        int[] dp = new int[n];
        int sum = 0;
        for (int i = n - 1; i >= 0; i--) {
            sum += stoneValue[i];
            dp[i] = sum - dp[i];
            if (i + 1 < n) dp[i] = Math.max(dp[i], sum - stoneValue[i] - dp[i + 1]);
            if (i + 2 < n) dp[i] = Math.max(dp[i], sum - stoneValue[i] - stoneValue[i + 1] - dp[i + 2]);
        }
        return dp[0] == sum - dp[0] ? "Tie" : dp[0] > sum - dp[0] ? "Alice" : "Bob";

=======

        int n = stoneValue.length;
        int[] dp = new int[n];
        dp[n - 1] = stoneValue[n - 1];
        for (int i = n - 2; i >= 0; --i) {
            dp[i] = Integer.MIN_VALUE;
            for (int j = 0; j < 3; ++j) {
                if (i + j < n) {
                    dp[i] = Math.max(dp[i], stoneValue[i] - dp[i + j + 1]);
                }
            }
        }
        if (dp[0] > 0) {
            return "Alice";
        } else if (dp[0] < 0) {
            return "Bob";
        } else {
            return "Tie";
        }

=======

        int n = stoneValue.length;
        int[] dp = new int[n+1];
        for (int i = n-1; i >= 0; i--) {
            dp[i] = Integer.MIN_VALUE;
            int sum = 0;
            for (int j = i; j < n && j < i+3; j++) {
                sum += stoneValue[j];
                dp[i] = Math.max(dp[i], sum - dp[j+1]);
            }
        }
        if (dp[0] == 0) return "Tie";
        return dp[0] > 0 ? "Alice" : "Bob";

=======

        int[] dp = new int[3];
        int n = stoneValue.length;
        for (int i = n - 1; i >= 0; i--) {
            dp[i % 3] = Integer.MIN_VALUE;
            int sum = 0;
            for (int k = 0; k < 3 && i + k < n; k++) {
                sum += stoneValue[i + k];
                dp[i % 3] = Math.max(dp[i % 3], sum - dp[(i + k + 1) % 3]);
            }
        }
        if (dp[0] > 0) return "Alice";
        if (dp[0] < 0) return "Bob";
        return "Tie";

=======

        int n = stoneValue.length;
        int[] dp = new int[n+1];
        dp[n] = 0;
        for(int i = n-1; i>=0; i--){
            int max = Integer.MIN_VALUE;
            int sum = 0;
            for(int j = i; j<i+3 && j<n; j++){
                sum += stoneValue[j];
                max = Math.max(max, sum-dp[j+1]);
            }
            dp[i] = max;
        }
        if(dp[0]>0){
            return "Alice";
        }else if(dp[0]<0){
            return "Bob";
        }else{
            return "Tie";
        }
