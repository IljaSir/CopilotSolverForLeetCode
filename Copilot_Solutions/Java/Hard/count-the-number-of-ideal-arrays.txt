Synthesizing 10/10 solutions

=======

        int mod = 1000000007;
        long[] dp = new long[maxValue + 1];
        for (int i = 1; i <= maxValue; i++) {
            dp[i] = 1;
        }
        for (int i = 1; i < n; i++) {
            long[] next = new long[maxValue + 1];
            long sum = 0;
            for (int j = 1; j <= maxValue; j++) {
                sum += dp[j];
                next[j] = sum;
                if (j > 1) {
                    next[j] -= dp[j - 1];
                }
            }
            for (int j = 1; j <= maxValue; j++) {
                dp[j] = next[j] % mod;
            }
        }
        long ans = 0;
        for (int i = 1; i <= maxValue; i++) {
            ans += dp[i];
        }
        return (int) (ans % mod);

=======

        int MOD = 1000000007;
        long[] dp = new long[maxValue + 1];
        Arrays.fill(dp, 1);
        for (int i = 2; i <= n; i++) {
            long[] ndp = new long[maxValue + 1];
            long sum = 0;
            for (int j = 1; j <= maxValue; j++) {
                sum = (sum + dp[j]) % MOD;
                ndp[j] = sum;
            }
            dp = ndp;
        }
        long ans = 0;
        for (int i = 1; i <= maxValue; i++) {
            ans = (ans + dp[i]) % MOD;
        }
        return (int) ans;

=======

        int MOD = 1000000007;
        long[] dp = new long[maxValue + 1];
        Arrays.fill(dp, 1);
        for (int i = 1; i < n; i++) {
            long[] ndp = new long[maxValue + 1];
            long sum = 0;
            for (int j = 1; j <= maxValue; j++) {
                sum += dp[j];
                ndp[j] = sum;
            }
            dp = ndp;
        }
        long res = 0;
        for (long v: dp) {
            res += v;
        }
        return (int) (res % MOD);

=======

        int MOD = 1000000007;
        long[] dp = new long[maxValue + 1];
        long[] sum = new long[maxValue + 1];
        for (int i = 1; i <= maxValue; i++) {
            dp[i] = 1;
            sum[i] = sum[i - 1] + dp[i];
        }
        for (int i = 1; i < n; i++) {
            long[] dp2 = new long[maxValue + 1];
            long[] sum2 = new long[maxValue + 1];
            for (int j = 1; j <= maxValue; j++) {
                dp2[j] = sum[j];
                sum2[j] = sum2[j - 1] + dp2[j];
            }
            dp = dp2;
            sum = sum2;
        }
        long ans = 0;
        for (int i = 1; i <= maxValue; i++) {
            ans += dp[i];
        }
        return (int) (ans % MOD);

=======

        long MOD = 1000000007;
        long[] dp = new long[n + 1];
        dp[0] = 1;
        for (int i = 1; i <= n; i++) {
            long sum = 0;
            for (int j = 1; j <= maxValue; j++) {
                if (i == 1) {
                    sum += 1;
                } else {
                    sum += dp[i - 2] * (j - 1);
                }
                sum %= MOD;
            }
            dp[i] = sum;
        }
        return (int)dp[n];

=======

        int mod = (int)1e9 + 7;
        long[] dp = new long[maxValue+1];
        for(int i=1; i<=maxValue; i++){
            dp[i] = 1;
        }
        for(int i=2; i<=n; i++){
            long[] newDp = new long[maxValue+1];
            for(int j=1; j<=maxValue; j++){
                newDp[j] = (newDp[j-1] + dp[j]) % mod;
            }
            dp = newDp;
        }
        long res = 0;
        for(int i=1; i<=maxValue; i++){
            res = (res + dp[i]) % mod;
        }
        return (int)res;

=======

        long mod = 1000000007;
        int[] dp = new int[maxValue + 1];
        int[] sum = new int[maxValue + 1];
        for (int i = 1; i <= maxValue; i++) {
            dp[i] = 1;
            sum[i] = (sum[i - 1] + dp[i]) % mod;
        }
        for (int i = 2; i <= n; i++) {
            int[] newDp = new int[maxValue + 1];
            int[] newSum = new int[maxValue + 1];
            for (int j = 1; j <= maxValue; j++) {
                newDp[j] = (int) (sum[j] - sum[j / 2]);
                newSum[j] = (newSum[j - 1] + newDp[j]) % mod;
            }
            dp = newDp;
            sum = newSum;
        }
        return (int) ((sum[maxValue] - sum[0] + mod) % mod);

=======

        int mod = 1000000007;
        long[][] dp = new long[maxValue+1][n+1];
        dp[1][1] = 1;
        for (int i=2; i<=maxValue; i++) {
            dp[i][1] = i;
            for (int j=2; j<=n; j++) {
                dp[i][j] = (dp[i-1][j] + dp[i][j-1]) % mod;
            }
        }
        long sum = 0;
        for (int i=1; i<=maxValue; i++) {
            sum = (sum + dp[i][n]) % mod;
        }
        return (int)sum;

=======

        int MOD = 1000000007;
        int[] dp = new int[n];
        Arrays.fill(dp, 1);
        for (int i = 2; i <= maxValue; i++) {
            int[] ndp = new int[n];
            for (int j = 0; j < n; j++) {
                ndp[j] = dp[j];
                if (j > 0) {
                    ndp[j] += ndp[j - 1];
                    if (ndp[j] >= MOD) {
                        ndp[j] -= MOD;
                    }
                }
            }
            dp = ndp;
        }
        int ans = 0;
        for (int i = 0; i < n; i++) {
            ans += dp[i];
            if (ans >= MOD) {
                ans -= MOD;
            }
        }
        return ans;

=======

        return 0;
