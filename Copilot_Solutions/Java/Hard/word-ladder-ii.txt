Synthesizing 10/10 solutions

=======

        Set<String> dict = new HashSet<>(wordList);
        List<List<String>> res = new ArrayList<>();
        Map<String, List<String>> nodeNeighbors = new HashMap<>();// Neighbors for every node
        Map<String, Integer> distance = new HashMap<>();// Distance of every node from the start node
        List<String> solution = new ArrayList<>();

        dict.add(beginWord);
        bfs(beginWord, endWord, dict, nodeNeighbors, distance);
        dfs(beginWord, endWord, dict, nodeNeighbors, distance, solution, res);
        return res;
    }

    // BFS: Trace every node's distance from the start node (level by level).
    private void bfs(String beginWord, String endWord, Set<String> dict, Map<String, List<String>> nodeNeighbors, Map<String, Integer> distance) {
        for (String str : dict)
            nodeNeighbors.put(str, new ArrayList<String>());

        Queue<String> queue = new LinkedList<>();
        queue.offer(beginWord);
        distance.put(beginWord, 0);

        while (!queue.isEmpty()) {
            int count = queue.size();
            boolean foundEnd = false;
            for (int i = 0; i < count; i++) {
                String cur = queue.poll();
                int curDistance = distance.get(cur);
                List<String> neighbors = getNeighbors(cur, dict);

                for (String neighbor : neighbors) {
                    nodeNeighbors.get(cur).add(neighbor);
                    if (!distance.containsKey(neighbor)) {// Check if visited
                        distance.put(neighbor, curDistance + 1);
                        if (endWord.equals(neighbor))// Found the shortest path
                            foundEnd = true;
                        else
                            queue.offer(neighbor);
                    }
                }
            }

            if (foundEnd)
                break;
        }
    }

    // Find all next level nodes.
    private List<String> getNeighbors(String node, Set<String> dict) {
        List<String> res = new ArrayList<>();
        char chs[] = node.toCharArray();

        for (char ch ='a'; ch <= 'z'; ch++) {
            for (int i = 0; i < chs.length; i++) {
                if (chs[i] == ch) continue;
                char old_ch = chs[i];
                chs[i] = ch;
                if (dict.contains(String.valueOf(chs))) {
                    res.add(String.valueOf(chs));
                }
                chs[i

=======

        Set<String> wordSet = new HashSet<>(wordList);
        List<List<String>> res = new ArrayList<>();
        if (!wordSet.contains(endWord)) {
            return res;
        }
        Map<String, List<String>> map = new HashMap<>();
        Set<String> beginSet = new HashSet<>();
        Set<String> endSet = new HashSet<>();
        beginSet.add(beginWord);
        endSet.add(endWord);
        boolean found = false;
        boolean backward = false;
        while (!beginSet.isEmpty() && !endSet.isEmpty() && !found) {
            if (beginSet.size() > endSet.size()) {
                Set<String> temp = beginSet;
                beginSet = endSet;
                endSet = temp;
                backward = !backward;
            }
            Set<String> next = new HashSet<>();
            for (String word : beginSet) {
                char[] chars = word.toCharArray();
                for (int i = 0; i < chars.length; i++) {
                    char old = chars[i];
                    for (char c = 'a'; c <= 'z'; c++) {
                        chars[i] = c;
                        String newWord = new String(chars);
                        if (endSet.contains(newWord)) {
                            found = true;
                            String key = backward ? newWord : word;
                            String val = backward ? word : newWord;
                            map.putIfAbsent(key, new ArrayList<>());
                            map.get(key).add(val);
                        }
                        if (!found && wordSet.contains(newWord)) {
                            next.add(newWord);
                            String key = backward ? newWord : word;
                            String val = backward ? word : newWord;
                            map.putIfAbsent(key, new ArrayList<>());
                            map.get(key).add(val);
                        }
                    }
                    chars[i] = old;
                }
            }
            beginSet = next;
            wordSet.removeAll(next);
        }
        if (found) {
            List<String> path = new ArrayList<>();
            path.add(beginWord);
            dfs(beginWord, endWord, map, path, res);
        }
        return res;
    }
    private void dfs(String beginWord, String endWord, Map<String, List<String>> map, List<String> path, List<List<String>> res) {
        if (beginWord.equals(endWord)) {
            res.add(new ArrayList<>(path));
            return;
        }
        if (!map.containsKey(beginWord)) {
            return;

=======

        int len = beginWord.length();
        HashMap<String, List<String>> allComboDict = new HashMap<String, List<String>>();
        wordList.forEach(
            word -> {
                for (int i = 0; i < len; i++) {
                    String newWord = word.substring(0, i) + '*' + word.substring(i + 1, len);
                    List<String> transformations = allComboDict.getOrDefault(newWord, new ArrayList<String>());
                    transformations.add(word);
                    allComboDict.put(newWord, transformations);
                }
            }
        );
        Queue<Pair<String, Integer>> Q = new LinkedList<Pair<String, Integer>>();
        Q.add(new Pair(beginWord, 0));
        HashMap<String, Integer> visited = new HashMap<String, Integer>();
        visited.put(beginWord, 0);
        boolean found = false;
        HashMap<Integer, List<List<String>>> res = new HashMap<Integer, List<List<String>>>();
        while (!Q.isEmpty()) {
            Pair<String, Integer> node = Q.remove();
            String word = node.getKey();
            int level = node.getValue();
            for (int i = 0; i < len; i++) {
                String newWord = word.substring(0, i) + '*' + word.substring(i + 1, len);
                for (String adjacentWord : allComboDict.getOrDefault(newWord, new ArrayList<String>())) {
                    if (adjacentWord.equals(endWord)) {
                        found = true;
                        if (!res.containsKey(level + 1)) {
                            res.put(level + 1, new ArrayList<List<String>>());
                        }
                        List<String> newRes = new ArrayList<String>(node.getKey());
                        newRes.add(endWord);
                        res.get(level + 1).add(newRes);
                    }
                    if (!visited.containsKey(adjacentWord)) {
                        visited.put(adjacentWord, level + 1);
                        Q.add(new Pair(adjacentWord, level + 1));
                    } else if (visited.get(adjacentWord) == level + 1) {
                        if (!res.containsKey(level + 1)) {
                            res.put(level + 1, new ArrayList<List<String>>());
                        }
                        List<String> newRes = new ArrayList<String>(node.getKey());
                        newRes.add(adjacentWord);
                        res.get(level + 1).add(newRes);
                    }
                }
            }
        }
        return res.getOrDefault(res.size(), new ArrayList<List<String>>());

=======

        List<List<String>> res = new ArrayList<>();
        if (wordList.size() == 0) {
            return res;
        }
        Set<String> dict = new HashSet<>(wordList);
        if (!dict.contains(endWord)) {
            return res;
        }
        Map<String, List<String>> nodeNeighbors = new HashMap<>();
        Map<String, Integer> distance = new HashMap<>();
        List<String> solution = new ArrayList<>();
        dict.add(beginWord);
        bfs(beginWord, endWord, dict, nodeNeighbors, distance);
        dfs(beginWord, endWord, dict, nodeNeighbors, distance, solution, res);
        return res;
    }

    private void bfs(String beginWord, String endWord, Set<String> dict, Map<String, List<String>> nodeNeighbors, Map<String, Integer> distance) {
        for (String str : dict) {
            nodeNeighbors.put(str, new ArrayList<>());
        }
        Queue<String> queue = new LinkedList<>();
        queue.offer(beginWord);
        distance.put(beginWord, 0);
        while (!queue.isEmpty()) {
            int size = queue.size();
            boolean foundEnd = false;
            for (int i = 0; i < size; i++) {
                String cur = queue.poll();
                int curDistance = distance.get(cur);
                List<String> neighbors = getNeighbors(cur, dict);
                for (String neighbor : neighbors) {
                    nodeNeighbors.get(cur).add(neighbor);
                    if (!distance.containsKey(neighbor)) {
                        distance.put(neighbor, curDistance + 1);
                        if (endWord.equals(neighbor)) {
                            foundEnd = true;
                        } else {
                            queue.offer(neighbor);
                        }
                    }
                }
            }
            if (foundEnd) {
                break;
            }
        }
    }

    private List<String> getNeighbors(String node, Set<String> dict) {
        List<String> res = new ArrayList<>();
        char[] chs = node.toCharArray();
        for (char ch = 'a'; ch <= 'z'; ch++) {
            for (int i = 0; i < chs.length; i++) {
                if (chs[i] == ch) {
                    continue;
                }
                char oldCh = chs[i];
                chs[i] = ch;
                if (dict.contains(String.valueOf(chs))) {
                    res.add(String.valueOf(chs));
                }
                chs[i] = oldCh;

=======

        List<List<String>> res = new ArrayList<>();
        Set<String> dict = new HashSet<>(wordList);
        if (!dict.contains(endWord)) return res;
        Map<String, List<String>> nodeNeighbors = new HashMap<>();// Neighbors for every node
        Map<String, Integer> distance = new HashMap<>();// Distance of every node from the start node
        List<String> solution = new ArrayList<>();

        dict.add(beginWord);
        bfs(beginWord, endWord, dict, nodeNeighbors, distance);
        dfs(beginWord, endWord, dict, nodeNeighbors, distance, solution, res);
        return res;
    }

    // BFS: Trace every node's distance from the start node (level by level).
    private void bfs(String beginWord, String endWord, Set<String> dict, Map<String, List<String>> nodeNeighbors, Map<String, Integer> distance) {
        for (String str : dict)
            nodeNeighbors.put(str, new ArrayList<>());

        Queue<String> queue = new LinkedList<>();
        queue.offer(beginWord);
        distance.put(beginWord, 0);

        while (!queue.isEmpty()) {
            int count = queue.size();
            boolean foundEnd = false;
            for (int i = 0; i < count; i++) {
                String cur = queue.poll();
                int curDistance = distance.get(cur);
                List<String> neighbors = getNeighbors(cur, dict);

                for (String neighbor : neighbors) {
                    nodeNeighbors.get(cur).add(neighbor);
                    if (!distance.containsKey(neighbor)) {// Check if visited
                        distance.put(neighbor, curDistance + 1);
                        if (endWord.equals(neighbor))// Found the shortest path
                            foundEnd = true;
                        else
                            queue.offer(neighbor);
                    }
                }
            }

            if (foundEnd) break;
        }

=======

        Set<String> dict = new HashSet<>(wordList);
        List<List<String>> res = new ArrayList<>();
        if (!dict.contains(endWord)) return res;
        Map<String, List<String>> map = new HashMap<>();
        Queue<String> queue = new LinkedList<>();
        Set<String> visited = new HashSet<>();
        queue.offer(beginWord);
        visited.add(beginWord);
        boolean found = false;
        while (!queue.isEmpty()) {
            int size = queue.size();
            Set<String> nextVisited = new HashSet<>();
            for (int i = 0; i < size; i++) {
                String word = queue.poll();
                char[] wordArr = word.toCharArray();
                for (int j = 0; j < wordArr.length; j++) {
                    char oldChar = wordArr[j];
                    for (char c = 'a'; c <= 'z'; c++) {
                        wordArr[j] = c;
                        String newWord = String.valueOf(wordArr);
                        if (dict.contains(newWord)) {
                            if (newWord.equals(endWord)) found = true;
                            if (!visited.contains(newWord)) {
                                queue.offer(newWord);
                                nextVisited.add(newWord);
                            }
                            if (map.containsKey(newWord)) {
                                map.get(newWord).add(word);
                            } else {
                                List<String> list = new ArrayList<>();
                                list.add(word);
                                map.put(newWord, list);
                            }
                        }
                    }
                    wordArr[j] = oldChar;
                }
            }
            visited.addAll(nextVisited);
            if (found) break;
        }
        if (!found) return res;
        List<String> path = new ArrayList<>();
        path.add(endWord);
        dfs(res, path, map, beginWord, endWord);
        return res;
    }
    private void dfs(List<List<String>> res, List<String> path, Map<String, List<String>> map, String beginWord, String curWord) {
        if (curWord.equals(beginWord)) {
            res.add(new ArrayList<>(path));
            return;
        }
        List<String> prevWords = map.get(curWord);
        for (String prevWord : prevWords) {
            path.add(0, prevWord);
            dfs(res, path, map, beginWord, prevWord);
            path.remove(0);
        }

=======

        List<List<String>> result = new ArrayList<>();
        if (wordList.size() == 0) {
            return result;
        }
        Set<String> wordSet = new HashSet<>(wordList);
        if (!wordSet.contains(endWord)) {
            return result;
        }
        Map<String, List<String>> neighbors = new HashMap<>();
        Map<String, Integer> distance = new HashMap<>();
        bfs(beginWord, endWord, wordSet, neighbors, distance);
        dfs(beginWord, endWord, neighbors, distance, result, new ArrayList<>());
        return result;
    }

    private void bfs(String beginWord, String endWord, Set<String> wordSet,
                     Map<String, List<String>> neighbors, Map<String, Integer> distance) {
        for (String word : wordSet) {
            neighbors.put(word, new ArrayList<>());
        }
        Queue<String> queue = new LinkedList<>();
        queue.offer(beginWord);
        distance.put(beginWord, 0);
        while (!queue.isEmpty()) {
            boolean foundEnd = false;
            int size = queue.size();
            for (int i = 0; i < size; i++) {
                String word = queue.poll();
                int curDistance = distance.get(word);
                List<String> nextWords = getNextWords(word, wordSet);
                for (String nextWord : nextWords) {
                    neighbors.get(word).add(nextWord);
                    if (!distance.containsKey(nextWord)) {
                        distance.put(nextWord, curDistance + 1);
                        if (nextWord.equals(endWord)) {
                            foundEnd = true;
                        } else {
                            queue.offer(nextWord);
                        }
                    }
                }
            }
            if (foundEnd) {
                break;
            }
        }
    }

    private List<String> getNextWords(String word, Set<String> wordSet) {
        List<String> nextWords = new ArrayList<>();
        char[] charArray = word.toCharArray();
        for (char ch = 'a'; ch <= 'z'; ch++) {
            for (int i = 0; i < word.length(); i++) {
                if (charArray[i] == ch) {
                    continue;
                }
                char oldCh = charArray[i];
                charArray[i] = ch;
                if (wordSet.contains(String.valueOf(charArray))) {
                    nextWords.add(String.valueOf(charArray));
                }
                charArray[i] = oldCh;
            }
        }
        return next

=======

        Set<String> wordSet = new HashSet<>(wordList);
        if (!wordSet.contains(endWord)) {
            return new ArrayList<>();
        }
        Map<String, List<String>> graph = new HashMap<>();
        Map<String, Integer> distance = new HashMap<>();
        bfs(beginWord, endWord, wordSet, graph, distance);
        List<List<String>> res = new ArrayList<>();
        List<String> path = new ArrayList<>();
        path.add(beginWord);
        dfs(beginWord, endWord, graph, distance, path, res);
        return res;
    }
    
    private void bfs(String beginWord, String endWord, Set<String> wordSet, Map<String, List<String>> graph, Map<String, Integer> distance) {
        for (String word : wordSet) {
            graph.put(word, new ArrayList<>());
        }
        Queue<String> queue = new LinkedList<>();
        queue.offer(beginWord);
        distance.put(beginWord, 0);
        boolean foundEnd = false;
        while (!queue.isEmpty()) {
            int size = queue.size();
            for (int i = 0; i < size; i++) {
                String word = queue.poll();
                int curDistance = distance.get(word);
                List<String> nextWords = getNextWords(word, wordSet);
                for (String nextWord : nextWords) {
                    graph.get(word).add(nextWord);
                    if (!distance.containsKey(nextWord)) {
                        distance.put(nextWord, curDistance + 1);
                        if (nextWord.equals(endWord)) {
                            foundEnd = true;
                        } else {
                            queue.offer(nextWord);
                        }
                    }
                }
            }
            if (foundEnd) {
                break;
            }
        }
    }
    
    private List<String> getNextWords(String word, Set<String> wordSet) {
        List<String> res = new ArrayList<>();
        char[] charArray = word.toCharArray();
        for (char ch = 'a'; ch <= 'z'; ch++) {
            for (int i = 0; i < charArray.length; i++) {
                if (charArray[i] == ch) {
                    continue;
                }
                char oldChar = charArray[i];
                charArray[i] = ch;
                if (wordSet.contains(String.valueOf(charArray))) {
                    res.add(String.valueOf(charArray));
                }
                charArray[i] = oldChar;
            }
        }
        return res;

=======

        List<List<String>> ans = new ArrayList<>();
        if (!wordList.contains(endWord)) {
            return ans;
        }
        Map<String, List<String>> graph = new HashMap<>();
        Map<String, Integer> distance = new HashMap<>();
        bfs(beginWord, endWord, wordList, graph, distance);
        dfs(beginWord, endWord, graph, distance, ans, new ArrayList<>());
        return ans;
    }

    private void bfs(String beginWord, String endWord, List<String> wordList, Map<String, List<String>> graph, Map<String, Integer> distance) {
        Queue<String> queue = new LinkedList<>();
        queue.offer(beginWord);
        distance.put(beginWord, 0);
        for (String word : wordList) {
            graph.put(word, new ArrayList<>());
        }
        while (!queue.isEmpty()) {
            int size = queue.size();
            boolean foundEnd = false;
            for (int i = 0; i < size; i++) {
                String word = queue.poll();
                int curDistance = distance.get(word);
                List<String> nextWords = getNextWords(word, wordList);
                for (String nextWord : nextWords) {
                    graph.get(word).add(nextWord);
                    if (!distance.containsKey(nextWord)) {
                        distance.put(nextWord, curDistance + 1);
                        if (endWord.equals(nextWord)) {
                            foundEnd = true;
                        } else {
                            queue.offer(nextWord);
                        }
                    }
                }
            }
            if (foundEnd) {
                break;
            }
        }
    }

    private List<String> getNextWords(String word, List<String> wordList) {
        List<String> nextWords = new ArrayList<>();
        char[] charArray = word.toCharArray();
        for (char ch = 'a'; ch <= 'z'; ch++) {
            for (int i = 0; i < charArray.length; i++) {
                if (charArray[i] == ch) {
                    continue;
                }
                char originChar = charArray[i];
                charArray[i] = ch;
                if (wordList.contains(String.valueOf(charArray))) {
                    nextWords.add(String.valueOf(charArray));
                }
                charArray[i] = originChar;
            }
        }
        return nextWords;

=======

        HashMap<String, List<String>> graph = new HashMap<>();
        HashMap<String, Integer> distance = new HashMap<>();
        HashSet<String> dict = new HashSet<>(wordList);
        List<List<String>> res = new ArrayList<>();
        if (!dict.contains(endWord)) {
            return res;
        }
        bfs(beginWord, endWord, dict, graph, distance);
        dfs(beginWord, endWord, graph, distance, res, new ArrayList<>());
        return res;
    }
    private void bfs(String beginWord, String endWord, HashSet<String> dict, HashMap<String, List<String>> graph, HashMap<String, Integer> distance) {
        Queue<String> q = new LinkedList<>();
        q.offer(beginWord);
        distance.put(beginWord, 0);
        for (String word : dict) {
            graph.put(word, new ArrayList<>());
        }
        while (!q.isEmpty()) {
            String word = q.poll();
            List<String> neighbors = getNeighbors(word, dict);
            for (String neighbor : neighbors) {
                graph.get(word).add(neighbor);
                if (!distance.containsKey(neighbor)) {
                    distance.put(neighbor, distance.get(word) + 1);
                    q.offer(neighbor);
                }
            }
        }
    }
    private List<String> getNeighbors(String word, HashSet<String> dict) {
        List<String> res = new ArrayList<>();
        char[] chs = word.toCharArray();
        for (char ch = 'a'; ch <= 'z'; ch++) {
            for (int i = 0; i < chs.length; i++) {
                if (chs[i] == ch) {
                    continue;
                }
                char old = chs[i];
                chs[i] = ch;
                if (dict.contains(String.valueOf(chs))) {
                    res.add(String.valueOf(chs));
                }
                chs[i] = old;
            }
        }
        return res;
