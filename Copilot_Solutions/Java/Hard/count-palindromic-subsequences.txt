Synthesizing 10/10 solutions

=======

        int n = s.length();
        int mod = 1000000007;
        int[][] dp = new int[n][n];
        for (int i = 0; i < n; i++) {
            dp[i][i] = 1;
        }
        for (int len = 2; len <= n; len++) {
            for (int i = 0; i <= n - len; i++) {
                int j = i + len - 1;
                if (s.charAt(i) == s.charAt(j)) {
                    dp[i][j] = dp[i + 1][j] + dp[i][j - 1] + 1;
                } else {
                    dp[i][j] = dp[i + 1][j] + dp[i][j - 1] - dp[i + 1][j - 1];
                }
                dp[i][j] = (dp[i][j] + mod) % mod;
            }
        }
        return dp[0][n - 1];

=======

        int MOD = 1_000_000_007;
        int n = s.length();
        int[][] dp = new int[n][n];
        for (int i = 0; i < n; i++) {
            dp[i][i] = 1;
        }
        for (int len = 2; len <= 5; len++) {
            for (int i = 0; i + len - 1 < n; i++) {
                int j = i + len - 1;
                if (s.charAt(i) == s.charAt(j)) {
                    dp[i][j] = (dp[i + 1][j] + dp[i][j - 1] + 1) % MOD;
                } else {
                    dp[i][j] = (dp[i + 1][j] + dp[i][j - 1] - dp[i + 1][j - 1]) % MOD;
                }
            }
        }
        return dp[0][n - 1];

=======

        int[] count = new int[10];
        for (char c : s.toCharArray()) {
            count[c - '0']++;
        }
        long ans = 0;
        for (int i = 0; i < 10; i++) {
            ans += count[i] * (count[i] - 1) / 2;
        }
        for (int i = 0; i < 10; i++) {
            for (int j = i + 1; j < 10; j++) {
                ans += count[i] * count[j];
            }
        }
        return (int) (ans % 1000000007);

=======

        int n = s.length();
        int mod = 1000000007;
        int[][] dp = new int[n][n];
        for (int i = 0; i < n; i++) dp[i][i] = 1;
        for (int i = 0; i < n - 1; i++) {
            if (s.charAt(i) == s.charAt(i + 1)) dp[i][i + 1] = 3;
            else dp[i][i + 1] = 2;
        }
        for (int len = 3; len <= n; len++) {
            for (int i = 0; i < n - len + 1; i++) {
                int j = i + len - 1;
                if (s.charAt(i) == s.charAt(j)) dp[i][j] = (dp[i + 1][j] + dp[i][j - 1] + 1) % mod;
                else dp[i][j] = (dp[i + 1][j] + dp[i][j - 1] - dp[i + 1][j - 1] + mod) % mod;
            }
        }
        return dp[0][n - 1];

=======

        int n = s.length();
        int[][] dp = new int[n][n];
        int MOD = 1000000007;
        for (int i = 0; i < n; i++) {
            dp[i][i] = 1;
        }
        for (int i = n - 1; i >= 0; i--) {
            for (int j = i + 1; j < n; j++) {
                if (s.charAt(i) == s.charAt(j)) {
                    dp[i][j] = dp[i + 1][j] + dp[i][j - 1] + 1;
                } else {
                    dp[i][j] = dp[i + 1][j] + dp[i][j - 1] - dp[i + 1][j - 1];
                }
                dp[i][j] = (dp[i][j] + MOD) % MOD;
            }
        }
        return dp[0][n - 1];

=======

        int n = s.length();
        int mod = 1000000007;
        int[][][] dp = new int[n][n][10];
        for (int i = 0; i < n; i++) {
            dp[i][i][s.charAt(i) - '0'] = 1;
        }
        for (int len = 1; len < n; len++) {
            for (int i = 0; i < n - len; i++) {
                int j = i + len;
                for (int k = 0; k < 10; k++) {
                    dp[i][j][k] = dp[i][j - 1][k] + dp[i + 1][j][k] - dp[i + 1][j - 1][k];
                    if (s.charAt(i) - '0' == k) {
                        dp[i][j][k]++;
                    }
                    if (s.charAt(j) - '0' == k) {
                        dp[i][j][k]++;
                    }
                    dp[i][j][k] = Math.max(0, dp[i][j][k]);
                }
            }
        }
        int ans = 0;
        for (int k = 0; k < 10; k++) {
            ans = (ans + dp[0][n - 1][k]) % mod;
        }
        return ans;

=======

        int n = s.length();
        int mod = 1000000007;
        int[][][] dp = new int[n][n][2];
        for (int i = 0; i < n; i++) {
            dp[i][i][0] = 1;
            dp[i][i][1] = 1;
        }
        for (int i = 0; i < n - 1; i++) {
            dp[i][i + 1][0] = 2;
            dp[i][i + 1][1] = s.charAt(i) == s.charAt(i + 1) ? 3 : 2;
        }
        for (int i = n - 3; i >= 0; i--) {
            for (int j = i + 2; j < n; j++) {
                dp[i][j][0] = (dp[i + 1][j][0] + dp[i][j - 1][0] - dp[i + 1][j - 1][0]) % mod;
                if (s.charAt(i) == s.charAt(j)) {
                    dp[i][j][1] = (dp[i + 1][j - 1][1] + dp[i][j][0] + 1) % mod;
                } else {
                    dp[i][j][1] = (dp[i + 1][j - 1][1] + dp[i][j][0]) % mod;
                }
            }
        }
        return (dp[0][n - 1][1] + mod) % mod;

=======

        int n = s.length();
        int[][] dp = new int[n][n];
        int mod = (int)1e9 + 7;
        for (int len = 1; len <= 5; len++) {
            for (int i = 0; i + len - 1 < n; i++) {
                int j = i + len - 1;
                if (len == 1) {
                    dp[i][j] = 1;
                } else if (len == 2) {
                    dp[i][j] = s.charAt(i) == s.charAt(j) ? 3 : 2;
                } else {
                    if (s.charAt(i) == s.charAt(j)) {
                        dp[i][j] = (dp[i + 1][j] + dp[i][j - 1] + 1) % mod;
                    } else {
                        dp[i][j] = (dp[i + 1][j] + dp[i][j - 1] - dp[i + 1][j - 1] + mod) % mod;
                    }
                }
            }
        }
        return dp[0][n - 1];

=======

        int n = s.length();
        int[][] dp = new int[n][n];
        int[][] count = new int[n][10];
        for (int i = 0; i < n; i++) {
            count[i][s.charAt(i) - '0']++;
            dp[i][i] = 1;
        }
        for (int i = 1; i < n; i++) {
            for (int j = 0; j < n - i; j++) {
                for (int k = 0; k < 10; k++) {
                    count[j][k] += count[j + i][k];
                }
                if (s.charAt(j) == s.charAt(j + i)) {
                    dp[j][j + i] = dp[j + 1][j + i - 1] * 2 + 2;
                    for (int k = 0; k < 10; k++) {
                        dp[j][j + i] -= count[j + 1][k] * count[j + i - 1][k];
                    }
                } else {
                    dp[j][j + i] = dp[j + 1][j + i] + dp[j][j + i - 1] - dp[j + 1][j + i - 1];
                }
                dp[j][j + i] = (dp[j][j + i] + 1000000007) % 1000000007;
            }
        }
        return dp[0][n - 1];

=======

        int MOD = 1000000007;
        int n = s.length();
        int[][] dp = new int[n][10];
        for (int i = 0; i < n; i++) {
            int x = s.charAt(i) - '0';
            for (int j = 0; j < 10; j++) {
                if (i > 0) {
                    dp[i][j] = dp[i - 1][j];
                }
            }
            dp[i][x]++;
        }
        int ans = 0;
        for (int i = 0; i < n; i++) {
            for (int j = i + 4; j < n; j++) {
                int x = s.charAt(i) - '0';
                int y = s.charAt(j) - '0';
                if (x == y) {
                    int count = 0;
                    for (int k = 0; k < 10; k++) {
                        count += dp[j - 1][k] - (i > 0 ? dp[i - 1][k] : 0);
                    }
                    ans = (ans + count) % MOD;
                }
            }
        }
        return ans;
