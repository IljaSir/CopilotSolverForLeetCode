Synthesizing 10/10 solutions

=======

        int[] count = new int[10];
        while (num > 0) {
            count[num % 10]++;
            num /= 10;
        }
        int sum = 0;
        for (int i = 1; i <= 9; i++) {
            if (count[i] > 0) {
                sum += i;
                count[i]--;
                break;
            }
        }
        for (int i = 0; i <= 9; i++) {
            sum += i * count[i];
        }
        return sum;
    }
    public int minSumOfDigits(int[] nums) {
        int min = Integer.MAX_VALUE;
        for (int num : nums) {
            min = Math.min(min, splitNum(num));
        }
        return min % 2 == 0 ? 1 : 0;

=======

        int[] digits = new int[10];
        while (num > 0) {
            digits[num % 10]++;
            num /= 10;
        }
        int sum = 0;
        for (int i = 1; i < 10; i++) {
            if (digits[i] == 0) {
                continue;
            }
            int j = 0;
            int carry = 0;
            while (j < 10) {
                if (j == i) {
                    j++;
                }
                int temp = digits[j] + carry;
                carry = temp / 2;
                temp %= 2;
                digits[j] = temp;
                j++;
            }
            sum += i;
        }
        return sum;
    }
    public int splitNum2(int num) {
        int[] digits = new int[10];
        while (num > 0) {
            digits[num % 10]++;
            num /= 10;
        }
        int sum = 0;
        for (int i = 1; i < 10; i++) {
            if (digits[i] == 0) {
                continue;
            }
            int j = 0;
            int carry = 0;
            while (j < 10) {
                if (j == i) {
                    j++;
                }
                int temp = digits[j] + carry;
                carry = temp / 2;
                temp %= 2;
                digits[j] = temp;
                j++;
            }
            sum += i;
        }
        return sum;
    }
    public int splitNum3(int num) {
        int[] digits = new int[10];
        while (num > 0) {
            digits[num % 10]++;
            num /= 10;
        }
        int sum = 0;
        for (int i = 1; i < 10; i++) {
            if (digits[i] == 0) {
                continue;
            }
            int j = 0;
            int carry = 0;
            while (j < 10) {
                if (j == i) {
                    j++;
                }
                int temp = digits[j] + carry;
                carry = temp / 2;
                temp %= 2;
                digits[j] = temp;
                j++;
            }
            sum += i;
        }
        return sum;

=======

        int[] digits = new int[10];
        while (num > 0) {
            digits[num % 10]++;
            num /= 10;
        }
        int sum = 0;
        for (int i = 1; i <= 9; i++) {
            if (digits[i] > 0) {
                sum += i * (digits[i] + 1);
            }
        }
        if (digits[0] > 0) {
            sum += digits[0] - 1;
        }
        return sum;

=======

        int[] digits = new int[10];
        while (num > 0) {
            digits[num % 10]++;
            num /= 10;
        }
        int sum = 0;
        for (int i = 1; i < 10; i++) {
            sum += i * digits[i];
        }
        int min = sum;
        for (int i = 1; i < 10; i++) {
            if (digits[i] == 0) {
                continue;
            }
            int s = sum;
            for (int j = 1; j < 10; j++) {
                int diff = Math.abs(digits[i] - digits[j]);
                if (digits[i] < digits[j]) {
                    s += j * diff;
                } else {
                    s -= j * diff;
                }
            }
            min = Math.min(min, s);
        }
        return min;

=======

        if (num < 10) {
            return num;
        }
        int[] digits = new int[10];
        while (num > 0) {
            digits[num % 10]++;
            num /= 10;
        }
        int[] result = new int[2];
        for (int i = 9; i >= 0; i--) {
            int index = (result[1] + digits[i]) % 2;
            result[index] = result[index] * 10 + i;
            result[1 - index] *= 10;
            digits[i]--;
        }
        return result[0] + result[1];

=======

        int[] count = new int[10];
        while (num > 0) {
            count[num % 10]++;
            num /= 10;
        }
        int sum = 0;
        int carry = 0;
        for (int i = 1; i < 10; i++) {
            sum += i * (count[i] + carry);
            carry = (count[i] + carry) % 2;
        }
        return sum;

=======

        int[] digits = new int[10];
        while (num > 0) {
            digits[num % 10]++;
            num /= 10;
        }
        int num1 = 0, num2 = 0, carry = 0;
        for (int i = 1; i <= 9; i++) {
            int n = digits[i];
            if (n % 2 == 0) {
                num1 = num1 * 10 + n / 2;
                num2 = num2 * 10 + n / 2;
            } else {
                if (carry == 1) {
                    num1 = num1 * 10 + n / 2 + 1;
                    num2 = num2 * 10 + n / 2;
                } else {
                    num1 = num1 * 10 + n / 2;
                    num2 = num2 * 10 + n / 2 + 1;
                }
                carry = 1 - carry;
            }
        }
        return num1 + num2;

=======

        int[] digitFreq = new int[10];
        int sum = 0;
        while (num > 0) {
            int digit = num % 10;
            digitFreq[digit]++;
            sum += digit;
            num /= 10;
        }
        int res = 0;
        int carry = 0;
        for (int i = 0; i < 10; i++) {
            int freq = digitFreq[i];
            if (freq > 0) {
                int oddFreq = freq % 2;
                int evenFreq = freq / 2;
                res += (i * (oddFreq + 2 * evenFreq));
                carry += (digitFreq[i] % 2);
            }
        }
        return res + carry;
    }
    public int minSumOfDigits(int[] nums) {
        int min = Integer.MAX_VALUE;
        for (int num : nums) {
            min = Math.min(min, splitNum(num));
        }
        return min;

=======

        int[] freq = new int[10];
        while (num > 0) {
            freq[num % 10]++;
            num /= 10;
        }
        int[] dp = new int[1 << 10];
        for (int mask = 1; mask < 1 << 10; mask++) {
            dp[mask] = Integer.MAX_VALUE;
            int sum = 0;
            for (int i = 0; i < 10; i++) {
                if ((mask & (1 << i)) > 0) {
                    sum += i * freq[i];
                }
            }
            for (int submask = mask; submask > 0; submask = (submask - 1) & mask) {
                dp[mask] = Math.min(dp[mask], dp[submask] + sum);
            }
        }
        return dp[(1 << 10) - 1];

=======

        int[] counts = new int[10];
        while (num > 0) {
            counts[num % 10]++;
            num /= 10;
        }
        int[] dp = new int[1 << 10];
        for (int i = 1; i < dp.length; i++) {
            int sum = 0;
            for (int j = 0; j < 10; j++) {
                if ((i & (1 << j)) != 0) {
                    sum += counts[j];
                }
            }
            dp[i] = sum;
        }
        int[] min = new int[1 << 10];
        Arrays.fill(min, Integer.MAX_VALUE);
        min[0] = 0;
        for (int i = 1; i < dp.length; i++) {
            for (int j = 0; j < 10; j++) {
                if ((i & (1 << j)) != 0) {
                    int prev = i - (1 << j);
                    min[i] = Math.min(min[i], min[prev] + dp[prev] * j);
                }
            }
        }
        return min[dp.length - 1];
    }
    public int splitNum1(int num) {
        int[] counts = new int[10];
        while (num > 0) {
            counts[num % 10]++;
            num /= 10;
        }
        int[] dp = new int[1 << 10];
        for (int i = 1; i < dp.length; i++) {
            int sum = 0;
            for (int j = 0; j < 10; j++) {
                if ((i & (1 << j)) != 0) {
                    sum += counts[j];
                }
            }
            dp[i] = sum;
        }
        int[] min = new int[1 << 10];
        Arrays.fill(min, Integer.MAX_VALUE);
        min[0] = 0;
        for (int i = 1; i < dp.length; i++) {
            for (int j = 0; j < 10; j++) {
                if ((i & (1 << j)) != 0) {
                    int prev = i - (1 << j);
                    min[i] = Math.min(min[i], min[prev] + dp[prev] * j);
