Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int n = arr.length;
        int i = 0;
        while (i + 1 < n && arr[i] < arr[i + 1]) {
            i++;
        }
        if (i == 0 || i == n - 1) {
            return false;
        }
        while (i + 1 < n && arr[i] > arr[i + 1]) {
            i++;
        }
        return i == n - 1;

=======

        if (arr.length < 3) {
            return false;
        }
        int i = 0;
        while (i < arr.length - 1 && arr[i] < arr[i + 1]) {
            i++;
        }
        if (i == 0 || i == arr.length - 1) {
            return false;
        }
        while (i < arr.length - 1 && arr[i] > arr[i + 1]) {
            i++;
        }
        return i == arr.length - 1;

=======

        int n = arr.length;
        int i = 0;
        
        // walk up
        while (i + 1 < n && arr[i] < arr[i + 1]) {
            i++;
        }
        
        // peak can't be first or last
        if (i == 0 || i == n - 1) {
            return false;
        }
        
        // walk down
        while (i + 1 < n && arr[i] > arr[i + 1]) {
            i++;
        }
        
        return i == n - 1;

=======

        int N = arr.length;
        int i = 0;
        while (i + 1 < N && arr[i] < arr[i + 1]) {
            i++;
        }
        if (i == 0 || i == N - 1) {
            return false;
        }
        while (i + 1 < N && arr[i] > arr[i + 1]) {
            i++;
        }
        return i == N - 1;

=======

        if (arr.length < 3) return false;
        int i = 0;
        while (i < arr.length - 1 && arr[i] < arr[i + 1]) i++;
        if (i == 0 || i == arr.length - 1) return false;
        while (i < arr.length - 1 && arr[i] > arr[i + 1]) i++;
        return i == arr.length - 1;

=======

        int n = arr.length;
        int i = 0;
        while (i+1 < n && arr[i] < arr[i+1]) i++;
        if (i == 0 || i == n-1) return false;
        while (i+1 < n && arr[i] > arr[i+1]) i++;
        return i == n-1;

=======

        if (arr.length < 3) return false;
        int i = 0;
        while (i < arr.length - 1 && arr[i] < arr[i + 1]) {
            i++;
        }
        if (i == 0 || i == arr.length - 1) return false;
        while (i < arr.length - 1 && arr[i] > arr[i + 1]) {
            i++;
        }
        return i == arr.length - 1;

=======

        int n = arr.length;
        int i = 0;
        // walk up
        while (i+1 < n && arr[i] < arr[i+1]) i++;
        // peak can't be first or last
        if (i == 0 || i == n-1) return false;
        // walk down
        while (i+1 < n && arr[i] > arr[i+1]) i++;
        return i == n-1;

=======

        int i = 0;
        int n = arr.length;
        while (i+1 < n && arr[i] < arr[i+1]) {
            i++;
        }
        if (i == 0 || i == n-1) {
            return false;
        }
        while (i+1 < n && arr[i] > arr[i+1]) {
            i++;
        }
        return i == n-1;
