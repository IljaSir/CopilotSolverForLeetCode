Synthesizing 9/10 solutions

=======

        int n = grid.length;
        int[][] maxLocal = new int[n - 2][n - 2];
        for (int i = 0; i < n - 2; i++) {
            for (int j = 0; j < n - 2; j++) {
                int max = grid[i][j];
                for (int k = 0; k < 3; k++) {
                    for (int l = 0; l < 3; l++) {
                        max = Math.max(max, grid[i + k][j + l]);
                    }
                }
                maxLocal[i][j] = max;
            }
        }
        return maxLocal;

=======

        int n = grid.length;
        int[][] maxLocal = new int[n - 2][n - 2];
        for (int i = 1; i < n - 1; i++) {
            for (int j = 1; j < n - 1; j++) {
                int max = grid[i][j];
                for (int k = -1; k < 2; k++) {
                    for (int l = -1; l < 2; l++) {
                        max = Math.max(max, grid[i + k][j + l]);
                    }
                }
                maxLocal[i - 1][j - 1] = max;
            }
        }
        return maxLocal;

=======

        int n = grid.length;
        int[][] maxLocal = new int[n - 2][n - 2];
        for (int i = 1; i < n - 1; i++) {
            for (int j = 1; j < n - 1; j++) {
                int max = 0;
                for (int k = -1; k <= 1; k++) {
                    for (int l = -1; l <= 1; l++) {
                        max = Math.max(max, grid[i + k][j + l]);
                    }
                }
                maxLocal[i - 1][j - 1] = max;
            }
        }
        return maxLocal;

=======

        int n = grid.length;
        int[][] res = new int[n - 2][n - 2];
        for (int i = 1; i < n - 1; i++) {
            for (int j = 1; j < n - 1; j++) {
                int max = grid[i - 1][j - 1];
                max = Math.max(max, grid[i - 1][j]);
                max = Math.max(max, grid[i - 1][j + 1]);
                max = Math.max(max, grid[i][j - 1]);
                max = Math.max(max, grid[i][j]);
                max = Math.max(max, grid[i][j + 1]);
                max = Math.max(max, grid[i + 1][j - 1]);
                max = Math.max(max, grid[i + 1][j]);
                max = Math.max(max, grid[i + 1][j + 1]);
                res[i - 1][j - 1] = max;
            }
        }
        return res;

=======

        int n = grid.length;
        int[][] result = new int[n - 2][n - 2];
        for (int i = 1; i < n - 1; i++) {
            for (int j = 1; j < n - 1; j++) {
                int max = 0;
                for (int k = -1; k <= 1; k++) {
                    for (int l = -1; l <= 1; l++) {
                        max = Math.max(max, grid[i + k][j + l]);
                    }
                }
                result[i - 1][j - 1] = max;
            }
        }
        return result;

=======

        int[][] maxLocal = new int[grid.length - 2][grid.length - 2];
        for (int i = 0; i < grid.length - 2; i++) {
            for (int j = 0; j < grid.length - 2; j++) {
                int max = Integer.MIN_VALUE;
                for (int k = i; k <= i + 2; k++) {
                    for (int l = j; l <= j + 2; l++) {
                        max = Math.max(max, grid[k][l]);
                    }
                }
                maxLocal[i][j] = max;
            }
        }
        return maxLocal;

=======

        int[][] result = new int[grid.length - 2][grid[0].length - 2];
        for (int i = 0; i < grid.length - 2; i++) {
            for (int j = 0; j < grid[0].length - 2; j++) {
                int max = 0;
                for (int k = i; k < i + 3; k++) {
                    for (int l = j; l < j + 3; l++) {
                        max = Math.max(grid[k][l], max);
                    }
                }
                result[i][j] = max;
            }
        }
        return result;

=======

        int[][] maxLocal = new int[grid.length - 2][grid[0].length - 2];
        for (int i = 0; i < grid.length - 2; i++) {
            for (int j = 0; j < grid[0].length - 2; j++) {
                int max = 0;
                for (int ii = i; ii < i + 3; ii++) {
                    for (int jj = j; jj < j + 3; jj++) {
                        max = Math.max(max, grid[ii][jj]);
                    }
                }
                maxLocal[i][j] = max;
            }
        }
        return maxLocal;

=======

        int[][] maxLocal = new int[grid.length - 2][grid.length - 2];
        for(int i = 0; i < maxLocal.length; i++) {
            for(int j = 0; j < maxLocal[i].length; j++) {
                maxLocal[i][j] = getMax(grid, i, j);
            }
        }
        return maxLocal;
    }
    
    public int getMax(int[][] grid, int x, int y) {
        int max = Integer.MIN_VALUE;
        for(int i = x; i < x + 3; i++) {
            for(int j = y; j < y + 3; j++) {
                max = Math.max(max, grid[i][j]);
            }
        }
        return max;
