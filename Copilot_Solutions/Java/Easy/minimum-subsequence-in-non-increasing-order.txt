Synthesizing 10/10 solutions

=======

        Arrays.sort(nums);
        int sum = 0;
        for (int num : nums) {
            sum += num;
        }
        List<Integer> res = new ArrayList<>();
        int cur = 0;
        for (int i = nums.length - 1; i >= 0; i--) {
            cur += nums[i];
            res.add(nums[i]);
            if (cur > sum - cur) {
                break;
            }
        }
        return res;

=======

        Arrays.sort(nums);
        int sum = 0;
        for (int num : nums) {
            sum += num;
        }
        int curSum = 0;
        List<Integer> res = new ArrayList<>();
        for (int i = nums.length - 1; i >= 0; i--) {
            curSum += nums[i];
            res.add(nums[i]);
            if (curSum > sum - curSum) {
                break;
            }
        }
        return res;

=======

        List<Integer> result = new ArrayList<>();
        Arrays.sort(nums);
        int sum = 0;
        for (int i = 0; i < nums.length; i++) {
            sum += nums[i];
        }
        int currentSum = 0;
        for (int i = nums.length - 1; i >= 0; i--) {
            currentSum += nums[i];
            result.add(nums[i]);
            if (currentSum > sum - currentSum) {
                return result;
            }
        }
        return result;

=======

        Arrays.sort(nums);
        int sum = Arrays.stream(nums).sum();
        int cur = 0;
        List<Integer> res = new ArrayList<>();
        for (int i = nums.length - 1; i >= 0; i--) {
            cur += nums[i];
            res.add(nums[i]);
            if (cur > sum - cur) {
                break;
            }
        }
        return res;

=======

        List<Integer> result = new ArrayList<>();
        if (nums.length == 0) {
            return result;
        }
        Arrays.sort(nums);
        int sum = 0;
        for (int i = 0; i < nums.length; i++) {
            sum += nums[i];
        }
        int half = sum / 2;
        int temp = 0;
        for (int i = nums.length - 1; i >= 0; i--) {
            temp += nums[i];
            result.add(nums[i]);
            if (temp > half) {
                break;
            }
        }
        return result;

=======

        int sum = 0;
        for (int num : nums) {
            sum += num;
        }
        Arrays.sort(nums);
        int temp = 0;
        List<Integer> list = new ArrayList<>();
        for (int i = nums.length - 1; i >= 0; i--) {
            temp += nums[i];
            list.add(nums[i]);
            if (temp > sum - temp) {
                break;
            }
        }
        return list;

=======

        List<Integer> result = new ArrayList<>();
        int sum = 0;
        for (int n : nums) {
            sum += n;
        }
        Arrays.sort(nums);
        int currentSum = 0;
        for (int i = nums.length - 1; i >= 0; i--) {
            currentSum += nums[i];
            result.add(nums[i]);
            if (currentSum > sum - currentSum) {
                break;
            }
        }
        return result;

=======

        Arrays.sort(nums);
        int sum = 0;
        for (int num : nums) {
            sum += num;
        }
        int half = sum / 2;
        sum = 0;
        List<Integer> result = new ArrayList<>();
        for (int i = nums.length - 1; i >= 0; i--) {
            result.add(nums[i]);
            sum += nums[i];
            if (sum > half) {
                break;
            }
        }
        return result;

=======

        int total = 0;
        for (int num: nums) {
            total += num;
        }
        Arrays.sort(nums);
        List<Integer> ans = new ArrayList<>();
        int sum = 0;
        for (int i = nums.length - 1; i >= 0; i--) {
            ans.add(nums[i]);
            sum += nums[i];
            if (sum > total - sum) {
                break;
            }
        }
        return ans;

=======

        Arrays.sort(nums);
        int sum = 0;
        for(int i = 0; i < nums.length; i++) {
            sum += nums[i];
        }
        int half = sum / 2;
        int cur = 0;
        List<Integer> res = new ArrayList<>();
        for(int i = nums.length - 1; i >= 0; i--) {
            cur += nums[i];
            res.add(nums[i]);
            if(cur > half) {
                break;
            }
        }
        return res;
