Synthesizing 10/10 solutions

=======

        int n = energy.length;
        int[][] dp = new int[n + 1][initialEnergy + 1];
        for (int i = 0; i <= n; i++) {
            Arrays.fill(dp[i], Integer.MAX_VALUE);
        }
        dp[0][initialEnergy] = initialExperience;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j <= initialEnergy; j++) {
                if (dp[i][j] == Integer.MAX_VALUE) {
                    continue;
                }
                int exp = dp[i][j];
                if (j - energy[i] > 0 && exp - experience[i] > 0) {
                    dp[i + 1][j - energy[i]] = Math.max(dp[i + 1][j - energy[i]], exp - experience[i]);
                }
                dp[i + 1][j] = Math.max(dp[i + 1][j], exp);
            }
        }
        int ans = 0;
        for (int i = 0; i <= n; i++) {
            for (int j = 0; j <= initialEnergy; j++) {
                if (dp[i][j] == Integer.MAX_VALUE) {
                    continue;
                }
                ans = Math.max(ans, j + i);
            }
        }
        return ans;

=======

        int n = energy.length;
        int[][] dp = new int[n + 1][initialEnergy + 1];
        for (int i = 0; i <= n; i++) {
            Arrays.fill(dp[i], Integer.MAX_VALUE);
        }
        dp[0][initialEnergy] = initialExperience;
        for (int i = 0; i < n; i++) {
            for (int j = 1; j <= initialEnergy; j++) {
                if (dp[i][j] == Integer.MAX_VALUE) {
                    continue;
                }
                dp[i + 1][Math.min(initialEnergy, j + energy[i])] = Math.max(dp[i + 1][Math.min(initialEnergy, j + energy[i])], dp[i][j] + experience[i]);
                dp[i + 1][j] = Math.max(dp[i + 1][j], dp[i][j]);
            }
        }
        int ans = Integer.MAX_VALUE;
        for (int i = 1; i <= initialEnergy; i++) {
            if (dp[n][i] != Integer.MAX_VALUE) {
                ans = Math.min(ans, i);
            }
        }
        return ans;

=======

        int n = energy.length;
        int[][] dp = new int[n][initialEnergy + 1];
        for (int i = 0; i < n; i++) {
            Arrays.fill(dp[i], Integer.MAX_VALUE);
        }
        dp[0][initialEnergy] = 0;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j <= initialEnergy; j++) {
                if (dp[i][j] != Integer.MAX_VALUE) {
                    if (j > experience[i]) {
                        dp[i][j - experience[i]] = Math.min(dp[i][j - experience[i]], dp[i][j]);
                    }
                    if (j > energy[i]) {
                        dp[i][j - energy[i]] = Math.min(dp[i][j - energy[i]], dp[i][j] + 1);
                    }
                    if (i + 1 < n) {
                        dp[i + 1][j] = Math.min(dp[i + 1][j], dp[i][j] + 1);
                    }
                }
            }
        }
        int ans = Integer.MAX_VALUE;
        for (int j = 0; j <= initialEnergy; j++) {
            if (dp[n - 1][j] != Integer.MAX_VALUE) {
                ans = Math.min(ans, dp[n - 1][j]);
            }
        }
        return ans;

=======

        int n = energy.length;
        int[][] dp = new int[n + 1][initialEnergy + 1];
        for (int i = 0; i <= initialEnergy; i++) {
            dp[n][i] = Integer.MAX_VALUE / 2;
        }
        for (int i = n - 1; i >= 0; i--) {
            for (int j = 0; j <= initialEnergy; j++) {
                if (j < energy[i]) {
                    dp[i][j] = Integer.MAX_VALUE / 2;
                } else {
                    dp[i][j] = Math.min(dp[i + 1][j - energy[i]] + experience[i], dp[i + 1][j]);
                }
            }
        }
        int res = 0;
        for (int i = initialExperience; i <= initialEnergy; i++) {
            res = Math.max(res, i - dp[0][i]);
        }
        return res;

=======

        int n = energy.length;
        int[][] dp = new int[n + 1][initialEnergy + 1];
        for (int[] row : dp) {
            Arrays.fill(row, Integer.MAX_VALUE);
        }
        dp[0][initialEnergy] = initialExperience;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j <= initialEnergy; j++) {
                if (dp[i][j] != Integer.MAX_VALUE) {
                    dp[i + 1][j] = Math.min(dp[i + 1][j], dp[i][j]);
                    if (j > energy[i]) {
                        dp[i + 1][j - energy[i]] = Math.min(dp[i + 1][j - energy[i]], dp[i][j] + experience[i]);
                    }
                }
            }
        }
        int ans = 0;
        for (int j = 0; j <= initialEnergy; j++) {
            if (dp[n][j] != Integer.MAX_VALUE) {
                ans = j;
                break;
            }
        }
        return initialEnergy - ans;

=======

        int n = energy.length;
        int[][] dp = new int[n + 1][initialEnergy + 1];
        for (int i = 0; i < n; i++) {
            for (int j = 1; j <= initialEnergy; j++) {
                if (j > energy[i]) {
                    dp[i + 1][j] = Math.max(dp[i + 1][j], dp[i][j - energy[i]] + experience[i]);
                }
            }
            for (int j = 0; j <= initialEnergy; j++) {
                dp[i + 1][j] = Math.max(dp[i + 1][j], dp[i][j]);
            }
        }
        int ans = 0;
        for (int i = 0; i <= initialEnergy; i++) {
            if (dp[n][i] >= initialExperience) {
                ans = i;
                break;
            }
        }
        return ans;

=======

        int n = energy.length;
        int[][] dp = new int[n+1][initialEnergy+1];
        for (int i = 0; i <= n; i++) {
            Arrays.fill(dp[i], Integer.MAX_VALUE);
        }
        dp[n][initialEnergy] = 0;
        for (int i = n-1; i >= 0; i--) {
            for (int j = 1; j <= initialEnergy; j++) {
                if (dp[i+1][j] != Integer.MAX_VALUE) {
                    dp[i][j] = Math.min(dp[i][j], dp[i+1][j]);
                }
                if (j > energy[i] && dp[i+1][j-energy[i]] != Integer.MAX_VALUE) {
                    dp[i][j] = Math.min(dp[i][j], dp[i+1][j-energy[i]] + experience[i]);
                }
            }
        }
        int ans = Integer.MAX_VALUE;
        for (int i = 1; i <= initialEnergy; i++) {
            ans = Math.min(ans, dp[0][i]);
        }
        return ans - initialExperience;

=======

        int n = energy.length;
        int[][] dp = new int[n+1][initialEnergy+1];
        for (int i = 0; i <= n; i++) {
            Arrays.fill(dp[i], Integer.MAX_VALUE);
        }
        dp[0][initialEnergy] = initialExperience;
        for (int i = 0; i < n; i++) {
            for (int j = 1; j <= initialEnergy; j++) {
                if (dp[i][j] == Integer.MAX_VALUE) {
                    continue;
                }
                int e = j - energy[i];
                int exp = dp[i][j] + experience[i];
                if (e > 0 && exp > 0) {
                    dp[i+1][e] = Math.min(dp[i+1][e], exp);
                }
            }
            for (int j = 1; j <= initialEnergy; j++) {
                dp[i+1][j] = Math.min(dp[i+1][j], dp[i+1][j-1]);
            }
        }
        int ans = 0;
        for (int i = 1; i <= initialEnergy; i++) {
            if (dp[n][i] != Integer.MAX_VALUE) {
                ans = i;
                break;
            }
        }
        return initialEnergy - ans;

=======

        int n = energy.length;
        List<int[]> list = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            list.add(new int[]{experience[i], energy[i]});
        }
        Collections.sort(list, (a, b) -> a[0] - b[0]);
        int ans = 0;
        for (int i = 0; i < n; i++) {
            int[] cur = list.get(i);
            int exp = cur[0];
            int ene = cur[1];
            int need = exp + 1 - initialExperience;
            if (need > 0) {
                ans += need;
                initialExperience += need;
            }
            need = ene + 1 - initialEnergy;
            if (need > 0) {
                ans += need;
                initialEnergy += need;
            }
            initialExperience += exp;
            initialEnergy -= ene;
        }
        return ans;

=======

        int n = energy.length;
        int[][] dp = new int[n+1][initialEnergy+1];
        for (int[] row: dp) {
            Arrays.fill(row, -1);
        }
        return minNumberOfHours(initialEnergy, initialExperience, energy, experience, 0, dp);
    }
    private int minNumberOfHours(int initialEnergy, int initialExperience, int[] energy, int[] experience, int i, int[][] dp) {
        if (i == energy.length) {
            return 0;
        }
        if (dp[i][initialEnergy] != -1) {
            return dp[i][initialEnergy];
        }
        int ans = Integer.MAX_VALUE;
        if (initialEnergy > energy[i] && initialExperience > experience[i]) {
            ans = minNumberOfHours(initialEnergy - energy[i], initialExperience + experience[i], energy, experience, i+1, dp);
        }
        ans = Math.min(ans, 1 + minNumberOfHours(initialEnergy+1, initialExperience, energy, experience, i, dp));
        ans = Math.min(ans, 1 + minNumberOfHours(initialEnergy, initialExperience+1, energy, experience, i, dp));
        return dp[i][initialEnergy] = ans;
