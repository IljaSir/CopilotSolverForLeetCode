Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int n = nums.length;
        if (n == 1) return nums[0];
        int[] newNums = new int[n / 2];
        for (int i = 0; i < n / 2; i++) {
            newNums[i] = Math.min(nums[2 * i], nums[2 * i + 1]);
        }
        for (int i = 0; i < n / 2; i++) {
            newNums[i] = Math.max(newNums[i], Math.max(nums[2 * i], nums[2 * i + 1]));
        }
        return minMaxGame(newNums);

=======

        while (nums.length > 1) {
            int[] newNums = new int[nums.length / 2];
            for (int i = 0; i < nums.length / 2; i++) {
                if (i % 2 == 0) {
                    newNums[i] = Math.min(nums[2 * i], nums[2 * i + 1]);
                } else {
                    newNums[i] = Math.max(nums[2 * i], nums[2 * i + 1]);
                }
            }
            nums = newNums;
        }
        return nums[0];

=======

        int n = nums.length;
        while (n > 1) {
            int[] newNums = new int[n / 2];
            for (int i = 0; i < n / 2; i++) {
                newNums[i] = Math.max(nums[2 * i], nums[2 * i + 1]);
            }
            nums = newNums;
            n /= 2;
        }
        return nums[0];
    }
}

=======

        int n = nums.length;
        while (n > 1) {
            for (int i = 0; i < n / 2; i++) {
                if (i % 2 == 0) {
                    nums[i] = Math.min(nums[2 * i], nums[2 * i + 1]);
                } else {
                    nums[i] = Math.max(nums[2 * i], nums[2 * i + 1]);
                }
            }
            n /= 2;
        }
        return nums[0];

=======

        int n = nums.length;
        while (n > 1) {
            for (int i = 0; i < n / 2; i++) {
                if (n % 2 == 0) {
                    nums[i] = Math.min(nums[2 * i], nums[2 * i + 1]);
                } else {
                    nums[i] = Math.max(nums[2 * i], nums[2 * i + 1]);
                }
            }
            n /= 2;
        }
        return nums[0];

=======

        int n = nums.length;
        int[] newNums = new int[n / 2];
        for (int i = 0; i < n / 2; i++) {
            newNums[i] = Math.min(nums[2 * i], nums[2 * i + 1]);
        }
        if (n == 2) {
            return newNums[0];
        } else {
            return minMaxGame(newNums);
        }

=======

        int n = nums.length;
        int[] newNums = new int[n / 2];
        for (int i = 0; i < n / 2; i++) {
            newNums[i] = Math.min(nums[2 * i], nums[2 * i + 1]);
        }
        for (int i = 0; i < n / 2; i++) {
            newNums[i] = Math.max(newNums[i], Math.max(nums[2 * i], nums[2 * i + 1]));
        }
        if (newNums.length == 1) {
            return newNums[0];
        }
        return minMaxGame(newNums);

=======

        int n = nums.length;
        if(n == 1) return nums[0];
        int[] newNums = new int[n/2];
        for(int i=0; i<n/2; i++) {
            newNums[i] = Math.min(nums[2*i], nums[2*i+1]);
        }
        for(int i=0; i<n/2; i++) {
            newNums[i] = Math.max(nums[2*i], nums[2*i+1]);
        }
        return minMaxGame(newNums);

=======

        int n = nums.length;
        int[] newNums = new int[n/2];
        while (n > 1) {
            for (int i = 0; i < n/2; i++) {
                if (i%2 == 0) {
                    newNums[i] = Math.min(nums[2*i], nums[2*i+1]);
                } else {
                    newNums[i] = Math.max(nums[2*i], nums[2*i+1]);
                }
            }
            nums = newNums;
            n = n/2;
            newNums = new int[n];
        }
        return nums[0];
