Synthesizing 10/10 solutions

=======

        if (n == 0) {
            return 1;
        }
        int mask = 1;
        while (mask < n) {
            mask = (mask << 1) | 1;
        }
        return mask ^ n;

=======

        if (n == 0) return 1;
        int mask = 1;
        while (mask < n) {
            mask = (mask << 1) | 1;
        }
        return mask ^ n;

=======

        if (n == 0) return 1;
        int mask = 1;
        while (mask < n) {
            mask = (mask << 1) + 1;
        }
        return mask ^ n;

=======

        if (n == 0) return 1;
        int m = 1;
        while (m < n) {
            m = (m << 1) + 1;
        }
        return m - n;

=======

        int mask = 1;
        while (mask < n) {
            mask = (mask << 1) + 1;
        }
        return n ^ mask;

=======

        if (n == 0) return 1;
        int result = 0;
        int power = 1;
        while (n > 0) {
            result += (n % 2 == 0 ? 1 : 0) * power;
            power *= 2;
            n /= 2;
        }
        return result;

=======

        int i = 1;
        while (i < n) {
            i = (i << 1) + 1;
        }
        return i ^ n;

=======

        if (n == 0) {
            return 1;
        }
        int i = 0;
        int ans = 0;
        while (n > 0) {
            int rem = n % 2;
            n = n / 2;
            if (rem == 0) {
                ans += Math.pow(2, i);
            }
            i++;
        }
        return ans;

=======

        if (n == 0) return 1;
        int mask = 1;
        int temp = n;
        while (temp > 0) {
            temp = temp >> 1;
            mask = mask << 1;
        }
        return n ^ (mask - 1);

=======

        if(n == 0) return 1;
        int res = 0;
        int i = 0;
        while(n > 0) {
            int t = n % 2;
            if(t == 0) res += Math.pow(2, i);
            n /= 2;
            i++;
        }
        return res;
