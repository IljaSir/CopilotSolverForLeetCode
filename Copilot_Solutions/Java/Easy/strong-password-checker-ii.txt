Synthesizing 10/10 solutions

=======

        if (password.length() < 8) {
            return false;
        }
        boolean hasLower = false;
        boolean hasUpper = false;
        boolean hasDigit = false;
        boolean hasSpecial = false;
        for (int i = 0; i < password.length(); i++) {
            char ch = password.charAt(i);
            if (Character.isLowerCase(ch)) {
                hasLower = true;
            } else if (Character.isUpperCase(ch)) {
                hasUpper = true;
            } else if (Character.isDigit(ch)) {
                hasDigit = true;
            } else {
                hasSpecial = true;
            }
        }
        return hasLower && hasUpper && hasDigit && hasSpecial;

=======

        return password.length() >= 8 && password.matches(".*[a-z].*") && password.matches(".*[A-Z].*") && password.matches(".*[0-9].*") && password.matches(".*[!@#$%^&*()-+].*") && !password.matches("(.)\\1{2,}");

=======

        if (password.length() < 8) {
            return false;
        }
        boolean hasLower = false;
        boolean hasUpper = false;
        boolean hasDigit = false;
        boolean hasSpecial = false;
        for (char c : password.toCharArray()) {
            if (c >= 'a' && c <= 'z') {
                hasLower = true;
            } else if (c >= 'A' && c <= 'Z') {
                hasUpper = true;
            } else if (c >= '0' && c <= '9') {
                hasDigit = true;
            } else if (c == '!' || c == '@' || c == '#' || c == '$' || c == '%' || c == '^' || c == '&' || c == '*' || c == '(' || c == ')' || c == '-' || c == '+') {
                hasSpecial = true;
            }
        }
        if (!hasLower || !hasUpper || !hasDigit || !hasSpecial) {
            return false;
        }
        for (int i = 0; i < password.length() - 2; i++) {
            if (password.charAt(i) == password.charAt(i + 1) && password.charAt(i + 1) == password.charAt(i + 2)) {
                return false;
            }
        }
        return true;

=======

        boolean hasLower = false;
        boolean hasUpper = false;
        boolean hasDigit = false;
        boolean hasSpecial = false;
        for (int i = 0; i < password.length(); i++) {
            char c = password.charAt(i);
            if (c >= 'a' && c <= 'z') {
                hasLower = true;
            } else if (c >= 'A' && c <= 'Z') {
                hasUpper = true;
            } else if (c >= '0' && c <= '9') {
                hasDigit = true;
            } else if (c == '!' || c == '@' || c == '#' || c == '$' || c == '%' || c == '^' || c == '&' || c == '*' || c == '(' || c == ')' || c == '-' || c == '+') {
                hasSpecial = true;
            }
        }
        if (password.length() < 8) {
            return false;
        }
        if (!hasLower || !hasUpper || !hasDigit || !hasSpecial) {
            return false;
        }
        return true;

=======

        int n = password.length();
        if (n < 8) {
            return false;
        }
        boolean hasLower = false;
        boolean hasUpper = false;
        boolean hasDigit = false;
        boolean hasSpecial = false;
        for (int i = 0; i < n; i++) {
            char c = password.charAt(i);
            if (c >= 'a' && c <= 'z') {
                hasLower = true;
            } else if (c >= 'A' && c <= 'Z') {
                hasUpper = true;
            } else if (c >= '0' && c <= '9') {
                hasDigit = true;
            } else if (c == '!' || c == '@' || c == '#' || c == '$' || c == '%' || c == '^' || c == '&' || c == '*' || c == '(' || c == ')' || c == '-' || c == '+') {
                hasSpecial = true;
            }
        }
        int count = 0;
        if (hasLower) {
            count++;
        }
        if (hasUpper) {
            count++;
        }
        if (hasDigit) {
            count++;
        }
        if (hasSpecial) {
            count++;
        }
        if (count >= 3) {
            return true;
        }
        if (count == 2) {
            if (n >= 10) {
                return true;
            }
            int i = 0;
            while (i < n) {
                char c = password.charAt(i);
                int j = i;
                while (j < n && password.charAt(j) == c) {
                    j++;
                }
                if (j - i >= 3) {
                    return true;
                }
                i = j;
            }
            return false;
        }
        return n >= 6;

=======

        if (password.length() < 8) return false;
        boolean hasUpper = false;
        boolean hasLower = false;
        boolean hasDigit = false;
        boolean hasSpecial = false;
        for (int i = 0; i < password.length(); i++) {
            if (Character.isUpperCase(password.charAt(i))) hasUpper = true;
            if (Character.isLowerCase(password.charAt(i))) hasLower = true;
            if (Character.isDigit(password.charAt(i))) hasDigit = true;
            if (password.charAt(i) == '!' || password.charAt(i) == '@' || password.charAt(i) == '#' || password.charAt(i) == '$' || password.charAt(i) == '%' || password.charAt(i) == '^' || password.charAt(i) == '&' || password.charAt(i) == '*' || password.charAt(i) == '(' || password.charAt(i) == ')' || password.charAt(i) == '-' || password.charAt(i) == '+') hasSpecial = true;
        }
        return hasUpper && hasLower && hasDigit && hasSpecial;

=======

        int len = password.length();
        if (len < 8) {
            return false;
        }
        boolean hasUpper = false;
        boolean hasLower = false;
        boolean hasDigit = false;
        boolean hasSpecial = false;
        for (char c : password.toCharArray()) {
            if (Character.isUpperCase(c)) {
                hasUpper = true;
            } else if (Character.isLowerCase(c)) {
                hasLower = true;
            } else if (Character.isDigit(c)) {
                hasDigit = true;
            } else {
                hasSpecial = true;
            }
        }
        int count = 0;
        if (hasUpper) count++;
        if (hasLower) count++;
        if (hasDigit) count++;
        if (hasSpecial) count++;
        if (count == 4) return true;
        if (count == 3) {
            if (len >= 8) {
                return true;
            } else {
                return false;
            }
        }
        if (count == 2) {
            if (len >= 10) {
                return true;
            } else {
                return false;
            }
        }
        if (count == 1) {
            if (len >= 12) {
                return true;
            } else {
                return false;
            }
        }
        return false;

=======

        int n = password.length();
        if (n < 8) return false;
        boolean hasLower = false, hasUpper = false, hasDigit = false;
        for (int i = 0; i < n; i++) {
            if (Character.isLowerCase(password.charAt(i))) hasLower = true;
            if (Character.isUpperCase(password.charAt(i))) hasUpper = true;
            if (Character.isDigit(password.charAt(i))) hasDigit = true;
        }
        if (!hasLower || !hasUpper || !hasDigit) return false;
        int count = 0;
        for (int i = 0; i < n - 2; i++) {
            if (password.charAt(i) == password.charAt(i + 1) && password.charAt(i) == password.charAt(i + 2)) {
                count++;
                i += 2;
            }
        }
        return count < 2;

=======

        boolean hasDigit = false;
        boolean hasUpper = false;
        boolean hasLower = false;
        boolean hasSpecial = false;
        for (char c : password.toCharArray()) {
            if (Character.isDigit(c)) hasDigit = true;
            if (Character.isUpperCase(c)) hasUpper = true;
            if (Character.isLowerCase(c)) hasLower = true;
            if (c == '!' || c == '@' || c == '#' || c == '$' || c == '%' || c == '^' || c == '&' || c == '*' || c == '(' || c == ')' || c == '-' || c == '+') hasSpecial = true;
        }
        if (password.length() < 8) return false;
        if (password.length() > 20) return false;
        if (hasDigit && hasUpper && hasLower && hasSpecial) return true;
        return false;

=======

        int len = password.length();
        if(len < 8) return false;
        boolean hasUpper = false, hasLower = false, hasDigit = false;
        for(char c : password.toCharArray()) {
            if(Character.isUpperCase(c)) hasUpper = true;
            else if(Character.isLowerCase(c)) hasLower = true;
            else if(Character.isDigit(c)) hasDigit = true;
        }
        if(!hasUpper || !hasLower || !hasDigit) return false;
        return true;
