Synthesizing 10/10 solutions

=======

        int[] arr = new int[26];
        for (int i = 0; i < s.length(); i++) {
            arr[s.charAt(i) - 'a']++;
        }
        int count = 0;
        for (int i = 0; i < 26; i++) {
            if (arr[i] != 0) {
                if (count == 0) {
                    count = arr[i];
                } else if (count != arr[i]) {
                    return false;
                }
            }
        }
        return true;

=======

        int[] count = new int[26];
        for (int i = 0; i < s.length(); i++) {
            count[s.charAt(i) - 'a']++;
        }
        int freq = 0;
        for (int i = 0; i < count.length; i++) {
            if (count[i] != 0) {
                if (freq == 0) {
                    freq = count[i];
                } else if (freq != count[i]) {
                    return false;
                }
            }
        }
        return true;

=======

        int[] count = new int[26];
        int max = 0;
        for (char c : s.toCharArray()) {
            count[c - 'a']++;
            max = Math.max(max, count[c - 'a']);
        }
        for (int i = 0; i < 26; i++) {
            if (count[i] > 0 && count[i] != max) {
                return false;
            }
        }
        return true;

=======

        int[] count = new int[26];
        for (int i = 0; i < s.length(); i++) {
            count[s.charAt(i) - 'a']++;
        }
        int first = 0;
        for (int i = 0; i < count.length; i++) {
            if (count[i] != 0) {
                first = count[i];
                break;
            }
        }
        for (int i = 0; i < count.length; i++) {
            if (count[i] != 0 && count[i] != first) {
                return false;
            }
        }
        return true;

=======

        int[] freq = new int[26];
        for (char c : s.toCharArray()) {
            freq[c - 'a']++;
        }
        int count = 0;
        for (int i = 0; i < 26; i++) {
            if (freq[i] != 0) {
                if (count == 0) {
                    count = freq[i];
                } else {
                    if (count != freq[i]) {
                        return false;
                    }
                }
            }
        }
        return true;

=======

        int[] count = new int[26];
        for (char c : s.toCharArray()) {
            count[c - 'a']++;
        }
        int first = 0;
        for (int i = 0; i < 26; i++) {
            if (count[i] == 0) continue;
            if (first == 0) {
                first = count[i];
            } else {
                if (first != count[i]) return false;
            }
        }
        return true;

=======

        int[] count = new int[26];
        for (char c : s.toCharArray()) {
            count[c - 'a']++;
        }
        int num = -1;
        for (int i : count) {
            if (i == 0) {
                continue;
            }
            if (num == -1) {
                num = i;
                continue;
            }
            if (i != num) {
                return false;
            }
        }
        return true;

=======

        int[] map = new int[26];
        for (char c : s.toCharArray()) {
            map[c - 'a']++;
        }
        int count = -1;
        for (int i = 0; i < 26; i++) {
            if (map[i] > 0) {
                if (count == -1) {
                    count = map[i];
                } else if (map[i] != count) {
                    return false;
                }
            }
        }
        return true;

=======

        int[] count = new int[26];
        for (char c : s.toCharArray()) {
            count[c - 'a']++;
        }
        int num = 0;
        for (int c : count) {
            if (c != 0) {
                if (num == 0) {
                    num = c;
                } else if (num != c) {
                    return false;
                }
            }
        }
        return true;

=======

        int[] count = new int[26];
        for (char c : s.toCharArray()) {
            count[c - 'a']++;
        }
        int prev = 0;
        for (int n : count) {
            if (n != 0) {
                if (prev == 0) {
                    prev = n;
                } else if (prev != n) {
                    return false;
                }
            }
        }
        return true;
