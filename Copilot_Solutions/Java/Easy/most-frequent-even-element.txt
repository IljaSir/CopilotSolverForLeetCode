Synthesizing 10/10 solutions

=======

        Map<Integer, Integer> map = new HashMap<>();
        for (int num : nums) {
            if (num % 2 == 0) {
                map.put(num, map.getOrDefault(num, 0) + 1);
            }
        }
        int maxCount = 0;
        int res = -1;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() > maxCount) {
                maxCount = entry.getValue();
                res = entry.getKey();
            } else if (entry.getValue() == maxCount) {
                res = Math.min(res, entry.getKey());
            }
        }
        return res;

=======

        Map<Integer, Integer> map = new HashMap<>();
        for (int n : nums) {
            if (n % 2 == 0) {
                map.put(n, map.getOrDefault(n, 0) + 1);
            }
        }
        int max = 0;
        int res = -1;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() > max) {
                max = entry.getValue();
                res = entry.getKey();
            }
        }
        return res;

=======

        int[] count = new int[100001];
        for (int num : nums) {
            if (num % 2 == 0) {
                count[num]++;
            }
        }
        int max = 0;
        int res = -1;
        for (int i = 0; i < 100001; i++) {
            if (count[i] > max) {
                max = count[i];
                res = i;
            }
        }
        return res;

=======

        Map<Integer, Integer> map = new HashMap<>();
        int max = 0;
        int res = -1;
        for (int num : nums) {
            if (num % 2 == 0) {
                map.put(num, map.getOrDefault(num, 0) + 1);
                if (map.get(num) > max) {
                    max = map.get(num);
                    res = num;
                } else if (map.get(num) == max) {
                    res = Math.min(res, num);
                }
            }
        }
        return res;

=======

        int[] count = new int[100001];
        int max = 0;
        int res = -1;
        for (int n : nums) {
            if (n % 2 == 0) {
                count[n]++;
                if (count[n] > max || (count[n] == max && n < res)) {
                    max = count[n];
                    res = n;
                }
            }
        }
        return res;

=======

        int[] count = new int[100001];
        for (int num : nums) {
            count[num]++;
        }
        int max = 0;
        int res = -1;
        for (int i = 0; i < 100001; i += 2) {
            if (count[i] > max) {
                max = count[i];
                res = i;
            }
        }
        return res;

=======

        int[] counts = new int[100001];
        for (int num : nums) {
            counts[num]++;
        }
        int max = 0;
        int res = -1;
        for (int i = 0; i < counts.length; i++) {
            if (i % 2 == 0 && counts[i] > max) {
                max = counts[i];
                res = i;
            }
        }
        return res;

=======

        int[] count = new int[100001];
        int max = 0;
        int maxIndex = -1;
        for (int num : nums) {
            if (num % 2 == 0) {
                count[num]++;
                if (count[num] > max) {
                    max = count[num];
                    maxIndex = num;
                } else if (count[num] == max && num < maxIndex) {
                    maxIndex = num;
                }
            }
        }
        return maxIndex;

=======

        int[] count = new int[100001];
        for (int num : nums) {
            count[num]++;
        }
        int max = -1;
        int ans = -1;
        for (int i = 0; i < 100001; i += 2) {
            if (count[i] > max) {
                max = count[i];
                ans = i;
            }
        }
        return ans;

=======

        int[] counts = new int[100001];
        int maxCount = 0;
        int minNum = Integer.MAX_VALUE;
        for (int num : nums) {
            if (num % 2 == 0) {
                counts[num]++;
                if (maxCount < counts[num]) {
                    maxCount = counts[num];
                    minNum = num;
                } else if (maxCount == counts[num]) {
                    minNum = Math.min(minNum, num);
                }
            }
        }
        return minNum == Integer.MAX_VALUE ? -1 : minNum;
