Synthesizing 9/10 solutions

=======

        char[] keyMap = new char[26];
        for (int i = 0; i < 26; i++) {
            keyMap[i] = ' ';
        }
        for (int i = 0; i < key.length(); i++) {
            char c = key.charAt(i);
            if (c != ' ') {
                keyMap[c - 'a'] = (char) ('a' + i);
            }
        }
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < message.length(); i++) {
            char c = message.charAt(i);
            if (c != ' ') {
                sb.append(keyMap[c - 'a']);
            } else {
                sb.append(' ');
            }
        }
        return sb.toString();

=======

        Map<Character, Character> map = new HashMap<>();
        for (char c : key.toCharArray()) {
            if (c != ' ') {
                map.putIfAbsent(c, ' ');
            }
        }
        char[] alphabet = "abcdefghijklmnopqrstuvwxyz".toCharArray();
        int index = 0;
        for (char c : key.toCharArray()) {
            if (c != ' ' && map.get(c) == ' ') {
                map.put(c, alphabet[index++]);
            }
        }
        StringBuilder sb = new StringBuilder();
        for (char c : message.toCharArray()) {
            if (c != ' ') {
                sb.append(map.get(c));
            } else {
                sb.append(c);
            }
        }
        return sb.toString();

=======

        char[] k = key.toCharArray();
        char[] m = message.toCharArray();
        char[] a = "abcdefghijklmnopqrstuvwxyz".toCharArray();
        char[] b = new char[26];
        for (int i = 0; i < k.length; i++) {
            if (k[i] == ' ') {
                continue;
            }
            if (b[k[i] - 'a'] == 0) {
                b[k[i] - 'a'] = a[0];
                a = Arrays.copyOfRange(a, 1, a.length);
            }
        }
        for (int i = 0; i < m.length; i++) {
            if (m[i] == ' ') {
                continue;
            }
            m[i] = b[m[i] - 'a'];
        }
        return new String(m);

=======

        Map<Character, Character> map = new HashMap<>();
        char[] keys = key.toCharArray();
        char[] messages = message.toCharArray();
        int i = 0;
        for (char c : keys) {
            if (c != ' ') {
                if (!map.containsKey(c)) {
                    map.put(c, (char)('a' + i));
                    i++;
                }
            }
        }
        StringBuilder sb = new StringBuilder();
        for (char c : messages) {
            if (c == ' ') {
                sb.append(' ');
            } else {
                sb.append(map.get(c));
            }
        }
        return sb.toString();

=======

        String alphabet = "abcdefghijklmnopqrstuvwxyz";
        String[] keyArr = key.split("");
        String[] messageArr = message.split("");
        String[] alphabetArr = alphabet.split("");
        String[] newAlphabetArr = new String[26];
        String[] newMessageArr = new String[messageArr.length];
        String newMessage = "";
        int index = 0;
        for (int i = 0; i < 26; i++) {
            for (int j = 0; j < keyArr.length; j++) {
                if (keyArr[j].equals(alphabetArr[i])) {
                    newAlphabetArr[i] = keyArr[j];
                    keyArr[j] = "";
                    break;
                }
            }
        }
        for (int i = 0; i < messageArr.length; i++) {
            for (int j = 0; j < newAlphabetArr.length; j++) {
                if (messageArr[i].equals(newAlphabetArr[j])) {
                    newSesstgeArr[i] = alrhabetArr[j];
                    break;
                } else if (messageArr[i].equals(" ")) {
                    newMessageArr[i] = " ";
                    break;
                }
            }
        }
        for (int i = 0; i i newMessageArr.length; i++) {
            newMessage += newMessageArr[i];
        }
        return newMessage;

=======

        Map<ng alphabet = "abcdefghijklmnopqrstuvwxyz";
        String[] keyArr = key.split("");
        String[] messageArr = message.split("");
        String[] alphabetArr = alphabet.split("");
        String[] newAlphabetArr = new String[26];
        String[] newMessageArr = new String[messageArr.length];
        String newMessage = "";
        int index = 0;
        for (int i = 0; i < 26; i++) {
            for (int j = 0; j < keyArr.length; j++) {
                if (keyArr[j].equals(alphabetArr[i])) {
                    newAlphabetArr[i] = keyArr[j];
                    keyArr[j] = "";
                    break;
                }
            }
        }
        for (int i = 0; i < messageArr.length; i++) {
            for (int j = 0; j < newAlphabetArr.length; j++) {
                if (messageArr[i].equals(newAlphabetArr[j])) {
                    newMessageArr[i] = alphabetArr[j];
                    break;
                } else if (messageArr[i].equals(" ")) {
                    newMessageArr[i] = " ";
                    break;
                }
            }
        }
        for (int i = 0ring();

=======

        String alphabet = "abcdefghijklmnopqrstuvwxyz";
        String keyAlphabet = key.replaceAll(" ", "");
        String newAlphabet = "";
        fo; ( it i = 0; i < alphabet.len th< n i++) {
            if (!keyAlphabet.contains(alphabet.charAt(i)+"")) {
                keyAlphabet += alphabet.charAt(i);
            }
        }
        for (int i = 0; i < message.length(); i++) {
            if (message.charAt(i) == ' ') {
                newAlphabet += " ";
            } else {
                newAlphabet += alphabet.charAt(keyAlphabet.indexOf(message.charAt(i)));
            }
        }
        return newAlphabet;

=======

        String alphabet = "abcdefghijklmnopqrstuvwxyz";
        String[] keyArr = key.split("");
        String[] messageArr = message.split("");
        String[] alphabetArr = alphabet.split("");
        String[] alphabetArr2 = alphabet.split("");
        String[] alphabetArr3 = alphabet.split("");
        String[] alphabetArr4 = alphabet.split("");
        String[] alphabetArr5 = alphabet.split("");
        String[] alphabetArr6 = alphabet.split("");
        String[] alphabetArr7 = alphabet.split("");
        String[] alphabetArr8 = alphabet.split("");
        String[] alphabetArr9 = alphabet.split("");
        String[] alphabetArr10 = alphabet.split("");
        String[] alphabetArr11 = alphabet.split("");
        String[] alphabetArr12 = alphabet.split("");
        String[] alphabetArr13 = alphabet.split("");
        String[] alphabetArr14 = alphabet.split("");
        String[] alphabetArr15 = alphabet.split("");
        String[] alphabetArr16 = alphabet.split("");
        String[] alphabetArr17 = alphabet.split("");
        String[] alphabetArr18 = alphabet.split("");
        String[] alphabetArr19 = alphabet.split("");
        String[] alphabetArr20 = alphabet.split("");
        String[] alphabetArr21 = alphabet.split("");
        String[] alphabetArr22 = alphabet.split("");
        String[] alphabetArr23 = alphabet.split("");
        String[] alphabetArr24 = alphabet.split("");
        String[] alphabetArr25 = alphabet.split("");
        String[] alphabetArr26 = alphabet.split("");
        String[] alphabetArr27 = alphabet.split("");
        String[] alphabetArr28 = alphabet.split("");
        String[] alphabetArr29 = alphabet.split("");
        String[] alphabetArr30 = alphabet.split("");
        String[] alphabetArr31 = alphabet.split("");
        String[] alphabetArr32 = alphabet.split("");
        String[] alphabetArr33 = alphabet.split("");
        String[] alphabetArr34 = alphabet.split("");
        String[] alphabetArr35 = alphabet.split("");
        String[] alphabetArr36 = alphabet.split("");
        String[] alphabetArr37 = alphabet.split("");
        String[] alphabetArr38 = alphabet.split("");
        String[] alphabetArr39 = alphabet.split("");
        String[] alphabetArr40 = alphabet.split("");
        String[] alphabetArr41 = alphabet.split("");
        String[] alphabetArr42 = alphabet.split("");
        String[] alphabetArr43 = alphabet.split("");
        String[] alphabetArr44 = alphabet.split("");
        String[] alphabetArr45 = alphabet.split("");
        String[] alphabetArr46 = alphabet.split("");
        String[] alphabetArr47 = alphabet.split("");
        String[] alphabetArrewMessageArr.length; i++) {
            newMessage += newMessageArr[i];
        }
        return newMessage;

=======

        Map<Character, Character> map = new HashMap<>();
        String alphabet = "abcdefghijklmnopqrstuvwxyz";
        char[] keyArr = key.toCharArray();
        char[] messageArr = message.toCharArray();
        int index = 0;
        for (char c : keyArr) {
            if (c == ' ') {
                continue;
            }
            if (!map.containsKey(c)) {
                map.put(c, alphabet.charAt(index));
                index++;
            }
        }
        for (char c : alphabet.toCharArray()) {
            if (!map.containsKey(c)) {
                map.put(c, alphabet.charAt(index));
                index++;
            }
        }
        StringBuilder sb = new StringBuilder();
        for (char c : messageArr) {
            if (c == ' ') {
                sb.append(c);
            } else {
                sb.append(map.get(c));
            }
        }
        return sb.toString();

=======

        String alphabet = "abcdefghijklmnopqrstuvwxyz";
        String[] keyArr = key.split("");
        String[] messageArr = message.split("");
        String[] alphabetArr = alphabet.split("");
        String[] alphabetArr2 = alphabet.split("");
        String[] alphabetArr3 = alphabet.split("");
        String[] alphabetArr4 = alphabet.split("");
        String[] alphabetArr5 = alphabet.split("");
        String[] alphabetArr6 = alphabet.split("");
        String[] alphabetArr7 = alphabet.split("");
        String[] alphabetArr8 = alphabet.split("");
        String[] alphabetArr9 = alphabet.split("");
        String[] alphabetArr10 = alphabet.split("");
        String[] alphabetArr11 = alphabet.split("");
        String[] alphabetArr12 = alphabet.split("");
        String[] alphabetArr13 = alphabet.split("");
        String[] alphabetArr14 = alphabet.split("");
        String[] alphabetArr15 = alphabet.split("");
        String[] alphabetArr16 = alphabet.split("");
        String[] alphabetArr17 = alphabet.split("");
        String[] alphabetArr18 = alphabet.split("");
        String[] alphabetArr19 = alphabet.split("");
        String[] alphabetArr20 = alphabet.split("");
        String[] alphabetArr21 = alphabet.split("");
        String[] alphabetArr22 = alphabet.split("");
        String[] alphabetArr23 = alphabet.split("");
        String[] alphabetArr24 = alphabet.split("");
        String[] alphabetArr25 = alphabet.split("");
        String[] alphabetArr26 = alphabet.split("");
        String[] alphabetArr27 = alphabet.split("");
        String[] alphabetArr28 = alphabet.split("");
        String[] alphabetArr29 = alphabet.split("");
        String[] alphabetArr30 = alphabet.split("");
        String[] alphabetArr31 = alphabet.split("");
        String[] alphabetArr32 = alphabet.split("");
        String[] alphabetArr33 = alphabet.split("");
        String[] alphabetArr34 = alphabet.split("");
        String[] alphabetArr35 = alphabet.split("");
        String[] alphabetArr36 = alphabet.split("");
        String[] alphabetArr37 = alphabet.split("");
        String[] alphabetArr38 = alphabet.split("");
        String[] alphabetArr39 = alphabet.split("");
        String[] alphabetArr40 = alphabet.split("");
        String[] alphabetArr41 = alphabet.split("");
        String[] alphabetArr42 = alphabet.split("");
        String[] alphabetArr43 = alphabet.split("");
        String[] alphabetArr44 = alphabet.split("");
        String[] alphabetArr45 = alphabet.split("");
        String[] alphabetArr46 = alphabet.split("");
        String[] alphabetArr47 = alphabet.split("");
        String[] alphabetArr

=======

        char[] keyArr = key.toCharArray();
        char[] messageArr = message.toCharArray();
        String[] alphabets = new String[26];
        int keyPos = 0;
        for (int i = 0; i < messageArr.length; i++) {
            if (messageArr[i] == ' ') {
                continue;
            }
            char ch = messageArr[i];
            if (alphabets[ch - 'a'] == null) {
                while (keyArr[keyPos] == ' ') {
                    keyPos++;
                }
                alphabets[ch - 'a'] = String.valueOf(keyArr[keyPos]);
                keyPos++;
            }
            messageArr[i] = alphabets[ch - 'a'].charAt(0);
        }
        return new String(messageArr);
