Synthesizing 10/10 solutions

=======

        int start1 = Integer.parseInt(event1[0].replace(":", ""));
        int end1 = Integer.parseInt(event1[1].replace(":", ""));
        int start2 = Integer.parseInt(event2[0].replace(":", ""));
        int end2 = Integer.parseInt(event2[1].replace(":", ""));
        return (start1 >= start2 && start1 < end2) || (end1 > start2 && end1 <= end2);

=======

        int start1 = Integer.parseInt(event1[0].split(":")[0]) * 60 + Integer.parseInt(event1[0].split(":")[1]);
        int end1 = Integer.parseInt(event1[1].split(":")[0]) * 60 + Integer.parseInt(event1[1].split(":")[1]);
        int start2 = Integer.parseInt(event2[0].split(":")[0]) * 60 + Integer.parseInt(event2[0].split(":")[1]);
        int end2 = Integer.parseInt(event2[1].split(":")[0]) * 60 + Integer.parseInt(event2[1].split(":")[1]);
        return (start1 < start2 && start2 < end1) || (start1 < end2 && end2 < end1) || (start2 < start1 && start1 < end2) || (start2 < end1 && end1 < end2);

=======

        int s1 = Integer.parseInt(event1[0].replace(":", ""));
        int e1 = Integer.parseInt(event1[1].replace(":", ""));
        int s2 = Integer.parseInt(event2[0].replace(":", ""));
        int e2 = Integer.parseInt(event2[1].replace(":", ""));
        return !(e1 <= s2 || e2 <= s1);

=======

        int s1 = Integer.parseInt(event1[0].replace(":", ""));
        int e1 = Integer.parseInt(event1[1].replace(":", ""));
        int s2 = Integer.parseInt(event2[0].replace(":", ""));
        int e2 = Integer.parseInt(event2[1].replace(":", ""));
        if (s1 > s2) {
            return haveConflict(event2, event1);
        }
        return s2 < e1 && e2 > s1;

=======

        int start1 = Integer.parseInt(event1[0].substring(0, 2)) * 60 + Integer.parseInt(event1[0].substring(3));
        int end1 = Integer.parseInt(event1[1].substring(0, 2)) * 60 + Integer.parseInt(event1[1].substring(3));
        int start2 = Integer.parseInt(event2[0].substring(0, 2)) * 60 + Integer.parseInt(event2[0].substring(3));
        int end2 = Integer.parseInt(event2[1].substring(0, 2)) * 60 + Integer.parseInt(event2[1].substring(3));
        return start1 < end2 && start2 < end1;

=======

        int start1 = Integer.parseInt(event1[0].substring(0, 2)) * 60 + Integer.parseInt(event1[0].substring(3, 5));
        int end1 = Integer.parseInt(event1[1].substring(0, 2)) * 60 + Integer.parseInt(event1[1].substring(3, 5));
        int start2 = Integer.parseInt(event2[0].substring(0, 2)) * 60 + Integer.parseInt(event2[0].substring(3, 5));
        int end2 = Integer.parseInt(event2[1].substring(0, 2)) * 60 + Integer.parseInt(event2[1].substring(3, 5));
        return start1 < end2 && start2 < end1;

=======

        int start1 = Integer.parseInt(event1[0].substring(0,2)) * 60 + Integer.parseInt(event1[0].substring(3));
        int end1 = Integer.parseInt(event1[1].substring(0,2)) * 60 + Integer.parseInt(event1[1].substring(3));
        int start2 = Integer.parseInt(event2[0].substring(0,2)) * 60 + Integer.parseInt(event2[0].substring(3));
        int end2 = Integer.parseInt(event2[1].substring(0,2)) * 60 + Integer.parseInt(event2[1].substring(3));
        return (start1 < end2 && start1 > start2) || (end1 < end2 && end1 > start2) || (start2 < end1 && start2 > start1) || (end2 < end1 && end2 > start1);

=======

        int s1 = Integer.parseInt(event1[0].split(":")[0])*60 + Integer.parseInt(event1[0].split(":")[1]);
        int e1 = Integer.parseInt(event1[1].split(":")[0])*60 + Integer.parseInt(event1[1].split(":")[1]);
        int s2 = Integer.parseInt(event2[0].split(":")[0])*60 + Integer.parseInt(event2[0].split(":")[1]);
        int e2 = Integer.parseInt(event2[1].split(":")[0])*60 + Integer.parseInt(event2[1].split(":")[1]);
        return s1 < e2 && s2 < e1;

=======

        int start1 = Integer.parseInt(event1[0].substring(0,2)) * 60 + Integer.parseInt(event1[0].substring(3,5));
        int start2 = Integer.parseInt(event2[0].substring(0,2)) * 60 + Integer.parseInt(event2[0].substring(3,5));
        int end1 = Integer.parseInt(event1[1].substring(0,2)) * 60 + Integer.parseInt(event1[1].substring(3,5));
        int end2 = Integer.parseInt(event2[1].substring(0,2)) * 60 + Integer.parseInt(event2[1].substring(3,5));
        return (start1 >= start2 && start1 < end2) || (start2 >= start1 && start2 < end1);

=======

        int[] start1 = convert(event1[0]);
        int[] end1 = convert(event1[1]);
        int[] start2 = convert(event2[0]);
        int[] end2 = convert(event2[1]);
        if (start1[0] > start2[0]) {
            return haveConflict(event2, event1);
        }
        if (start1[0] == start2[0] && start1[1] > start2[1]) {
            return haveConflict(event2, event1);
        }
        if (end1[0] < start2[0]) {
            return false;
        }
        if (end1[0] == start2[0] && end1[1] < start2[1]) {
            return false;
        }
        return true;
