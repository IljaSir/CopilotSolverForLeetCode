Synthesizing 10/10 solutions (Duplicates hidden)

=======

        String[] words = s.split(" ");
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < k; i++) {
            sb.append(words[i]);
            if (i < k - 1) {
                sb.append(" ");
            }
        }
        return sb.toString();

=======

        String[] words = s.split(" ");
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < k; i++) {
            sb.append(words[i]);
            if (i != k - 1) {
                sb.append(" ");
            }
        }
        return sb.toString();

=======

        String[] words = s.split(" ");
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < k; i++) {
            sb.append(words[i]);
            sb.append(" ");
        }
        return sb.toString().trim();

=======

        int count = 0;
        String result = "";
        for (int i = 0; i < s.length(); i++) {
            if (s.charAt(i) == ' ') {
                count++;
                if (count == k) {
                    break;
                }
            }
            result += s.charAt(i);
        }
        return result;

=======

        String[] words = s.split(" ");
        if (words.length == k) {
            return s;
        }
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < k; i++) {
            sb.append(words[i]);
            sb.append(" ");
        }
        return sb.toString().trim();

=======

        String[] str = s.split(" ");
        String res = "";
        for (int i = 0; i < k; i++) {
            res += str[i] + " ";
        }
        return res.trim();

=======

        String[] words = s.split(" ");
        String newString = "";
        for (int i = 0; i < k; i++) {
            newString += words[i] + " ";
        }
        return newString.trim();

=======

        int i = 0;
        int j = 0;
        while (i < k) {
            if (s.charAt(j) == ' ') {
                i++;
            }
            j++;
        }
        return s.substring(0, j - 1);
