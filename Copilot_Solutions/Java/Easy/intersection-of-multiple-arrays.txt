Synthesizing 10/10 solutions

=======

        List<Integer> result = new ArrayList<>();
        HashMap<Integer, Integer> map = new HashMap<>();
        for (int i = 0; i < nums.length; i++) {
            for (int j = 0; j < nums[i].length; j++) {
                map.put(nums[i][j], map.getOrDefault(nums[i][j], 0) + 1);
            }
        }
        for (int key : map.keySet()) {
            if (map.get(key) == nums.length) {
                result.add(key);
            }
        }
        return result;

=======

        List<Integer> result = new ArrayList<>();
        for (int i = 0; i < nums.length; i++) {
            Arrays.sort(nums[i]);
        }
        for (int i = 0; i < nums[0].length; i++) {
            int j = 1;
            for (; j < nums.length; j++) {
                if (Arrays.binarySearch(nums[j], nums[0][i]) < 0) {
                    break;
                }
            }
            if (j == nums.length) {
                result.add(nums[0][i]);
            }
        }
        return result;

=======

        List<Integer> result = new ArrayList<Integer>();
        for (int i = 0; i < nums.length; i++) {
            Arrays.sort(nums[i]);
        }
        for (int i = 0; i < nums[0].length; i++) {
            boolean flag = true;
            for (int j = 1; j < nums.length; j++) {
                if (Arrays.binarySearch(nums[j], nums[0][i]) < 0) {
                    flag = false;
                    break;
                }
            }
            if (flag) {
                result.add(nums[0][i]);
            }
        }
        return result;

=======

        List<Integer> result = new ArrayList<>();
        if (nums.length == 0) {
            return result;
        }
        Map<Integer, Integer> map = new HashMap<>();
        for (int i = 0; i < nums[0].length; i++) {
            map.put(nums[0][i], 1);
        }
        for (int i = 1; i < nums.length; i++) {
            for (int j = 0; j < nums[i].length; j++) {
                if (map.containsKey(nums[i][j])) {
                    map.put(nums[i][j], map.get(nums[i][j]) + 1);
                }
            }
        }
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() == nums.length) {
                result.add(entry.getKey());
            }
        }
        return result;

=======

        HashMap<Integer, Integer> map = new HashMap<>();
        List<Integer> result = new ArrayList<>();
        for (int[] num : nums) {
            for (int i : num) {
                map.put(i, map.getOrDefault(i, 0) + 1);
            }
        }
        for (int key : map.keySet()) {
            if (map.get(key) == nums.length) {
                result.add(key);
            }
        }
        return result;

=======

        int[] count = new int[1001];
        for (int[] num : nums) {
            for (int i : num) {
                count[i]++;
            }
        }
        List<Integer> res = new ArrayList<>();
        for (int i = 1; i < 1001; i++) {
            if (count[i] == nums.length) {
                res.add(i);
            }
        }
        return res;

=======

        List<Integer> result = new ArrayList<>();
        if(nums == null || nums.length == 0 || nums[0].length == 0) {
            return result;
        }
        Map<Integer, Integer> map = new HashMap<>();
        for(int i = 0; i < nums.length; i++) {
            for(int j = 0; j < nums[i].length; j++) {
                map.put(nums[i][j], map.getOrDefault(nums[i][j], 0) + 1);
            }
        }
        for(Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if(entry.getValue() == nums.length) {
                result.add(entry.getKey());
            }
        }
        return result;

=======

        List<Integer> l = new ArrayList<Integer>();
        for(int i=0;i<nums[0].length;i++){
            int flag = 0;
            for(int j=1;j<nums.length;j++){
                for(int k=0;k<nums[j].length;k++){
                    if(nums[0][i]==nums[j][k]){
                        flag++;
                        break;
                    }
                }
            }
            if(flag==nums.length-1){
                l.add(nums[0][i]);
            }
        }
        return l;

=======

        List<Integer> result = new ArrayList<Integer>();
        if(nums.length == 0) return result;
        int[] counts = new int[1001];
        for(int i = 0; i < nums.length; i++){
            for(int j = 0; j < nums[i].length; j++){
                counts[nums[i][j]]++;
            }
        }
        for(int i = 0; i < counts.length; i++){
            if(counts[i] == nums.length){
                result.add(i);
            }
        }
        return result;

=======

        List<Integer> result = new ArrayList<>();
        if (nums == null || nums.length == 0) return result;
        int[] minArr = nums[0];
        for (int i = 1; i < nums.length; i++) {
            if (nums[i].length < minArr.length) {
                minArr = nums[i];
            }
        }
        for (int i = 0; i < minArr.length; i++) {
            int num = minArr[i];
            boolean isPresent = true;
            for (int j = 0; j < nums.length; j++) {
                if (!isPresent(num, nums[j])) {
                    isPresent = false;
                    break;
                }
            }
            if (isPresent) {
                result.add(num);
            }
        }
        return result;
    }
    
    private boolean isPresent(int num, int[] arr) {
        for (int i = 0; i < arr.length; i++) {
            if (arr[i] == num) return true;
        }
        return false;
