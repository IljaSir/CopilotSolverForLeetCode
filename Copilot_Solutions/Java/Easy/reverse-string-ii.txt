Synthesizing 10/10 solutions

=======

        char[] chars = s.toCharArray();
        for (int i = 0; i < chars.length; i += 2 * k) {
            reverse(chars, i, Math.min(i + k - 1, chars.length - 1));
        }
        return new String(chars);
    }
    
    private void reverse(char[] chars, int i, int j) {
        while (i < j) {
            char tmp = chars[i];
            chars[i++] = chars[j];
            chars[j--] = tmp;
        }

=======

        char[] chars = s.toCharArray();
        int n = chars.length;
        for (int i = 0; i < n; i += 2 * k) {
            int j = Math.min(i + k - 1, n - 1);
            swap(chars, i, j);
        }
        return new String(chars);
    }

    private void swap(char[] chars, int i, int j) {
        while (i < j) {
            char tmp = chars[i];
            chars[i] = chars[j];
            chars[j] = tmp;
            i++;
            j--;
        }

=======

        char[] chars = s.toCharArray();
        int i = 0;
        while (i < chars.length) {
            int j = Math.min(i + k - 1, chars.length - 1);
            swap(chars, i, j);
            i += 2 * k;
        }
        return new String(chars);
    }
    
    private void swap(char[] chars, int i, int j) {
        while (i < j) {
            char tmp = chars[i];
            chars[i] = chars[j];
            chars[j] = tmp;
            i++;
            j--;
        }

=======

        char[] chars = s.toCharArray();
        for (int i = 0; i < chars.length; i += 2 * k) {
            int l = i;
            int r = Math.min(i + k - 1, chars.length - 1);
            while (l < r) {
                char tmp = chars[l];
                chars[l++] = chars[r];
                chars[r--] = tmp;
            }
        }
        return new String(chars);

=======

        int n = s.length();
        char[] c = s.toCharArray();
        for (int i = 0; i < n; i += 2 * k) {
            int j = Math.min(i + k - 1, n - 1);
            swap(c, i, j);
        }
        return new String(c);
    }

    private void swap(char[] c, int i, int j) {
        while (i < j) {
            char t = c[i];
            c[i++] = c[j];
            c[j--] = t;
        }

=======

        char[] arr = s.toCharArray();
        int n = arr.length;
        for (int i = 0; i < n; i += 2 * k) {
            int l = i;
            int r = Math.min(i + k - 1, n - 1);
            while (l < r) {
                char tmp = arr[l];
                arr[l++] = arr[r];
                arr[r--] = tmp;
            }
        }
        return new String(arr);

=======

        char[] charArray = s.toCharArray();
        int n = charArray.length;
        for (int i = 0; i < n; i += 2 * k) {
            reverse(charArray, i, Math.min(i + k - 1, n - 1));
        }
        return new String(charArray);
    }

    public void reverse(char[] charArray, int start, int end) {
        while (start < end) {
            char temp = charArray[start];
            charArray[start] = charArray[end];
            charArray[end] = temp;
            start++;
            end--;
        }

=======

        char[] chars = s.toCharArray();
        int n = s.length();
        for (int i = 0; i < n; i += 2 * k) {
            int left = i, right = Math.min(i + k, n) - 1;
            while (left < right) {
                char tmp = chars[left];
                chars[left] = chars[right];
                chars[right] = tmp;
                left++;
                right--;
            }
        }
        return new String(chars);

=======

        if (s.length() < 2) {
            return s;
        }
        char[] chars = s.toCharArray();
        int i = 0;
        while (i < chars.length) {
            int j = Math.min(i + k - 1, chars.length - 1);
            reverse(chars, i, j);
            i += 2 * k;
        }
        return new String(chars);
    }
    
    private void reverse(char[] chars, int i, int j) {
        while (i < j) {
            char tmp = chars[i];
            chars[i] = chars[j];
            chars[j] = tmp;
            i++;
            j--;
        }

=======

        int i = 0;
        int j = k-1;
        int n = s.length();
        char[] arr = s.toCharArray();
        while (i < n) {
            if (j < n) {
                reverse(arr, i, j);
                i += 2*k;
                j += 2*k;
            } else {
                reverse(arr, i, n-1);
                break;
            }
        }
        return new String(arr);
    }
    
    private void reverse(char[] arr, int i, int j) {
        while (i < j) {
            char tmp = arr[i];
            arr[i] = arr[j];
            arr[j] = tmp;
            i++;
            j--;
        }
