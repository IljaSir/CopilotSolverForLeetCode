Synthesizing 10/10 solutions (Duplicates hidden)

=======

        Stack<Integer> stack = new Stack();
        Map<Integer, Integer> map = new HashMap();
        for (int num : nums2) {
            while (!stack.isEmpty() && stack.peek() < num)
                map.put(stack.pop(), num);
            stack.push(num);
        }
        for (int i = 0; i < nums1.length; i++)
            nums1[i] = map.getOrDefault(nums1[i], -1);
        return nums1;

=======

        int[] ans = new int[nums1.length];
        for (int i = 0; i < nums1.length; i++) {
            int index = -1;
            for (int j = 0; j < nums2.length; j++) {
                if (nums2[j] == nums1[i]) {
                    index = j;
                    break;
                }
            }
            if (index == -1) {
                ans[i] = -1;
                continue;
            }
            boolean flag = false;
            for (int j = index + 1; j < nums2.length; j++) {
                if (nums2[j] > nums1[i]) {
                    ans[i] = nums2[j];
                    flag = true;
                    break;
                }
            }
            if (!flag) {
                ans[i] = -1;
            }
        }
        return ans;

=======

        int[] ans = new int[nums1.length];
        for (int i = 0; i < nums1.length; i++) {
            int j = 0;
            while (nums2[j] != nums1[i]) {
                j++;
            }
            j++;
            while (j < nums2.length && nums2[j] < nums1[i]) {
                j++;
            }
            ans[i] = j == nums2.length ? -1 : nums2[j];
        }
        return ans;

=======

        int[] ans = new int[nums1.length];
        for (int i = 0; i < nums1.length; i++) {
            int j = 0;
            while (nums2[j] != nums1[i]) {
                j++;
            }
            while (j < nums2.length && nums2[j] <= nums1[i]) {
                j++;
            }
            ans[i] = j == nums2.length ? -1 : nums2[j];
        }
        return ans;

=======

        int[] result = new int[nums1.length];
        for (int i = 0; i < nums1.length; i++) {
            int j = 0;
            for (; j < nums2.length; j++) {
                if (nums2[j] == nums1[i]) {
                    break;
                }
            }
            for (; j < nums2.length; j++) {
                if (nums2[j] > nums1[i]) {
                    result[i] = nums2[j];
                    break;
                }
            }
            if (j == nums2.length) {
                result[i] = -1;
            }
        }
        return result;

=======

        int[] res = new int[nums1.length];
        HashMap<Integer, Integer> map = new HashMap<>();
        for(int i = 0; i < nums2.length; i++){
            map.put(nums2[i], i);
        }
        for(int i = 0; i < nums1.length; i++){
            int index = map.get(nums1[i]);
            int j = index + 1;
            while(j < nums2.length){
                if(nums2[j] > nums1[i]){
                    res[i] = nums2[j];
                    break;
                }
                j++;
            }
            if(j == nums2.length){
                res[i] = -1;
            }
        }
        return res;

=======

        int[] ans = new int[nums1.length];
        for (int i = 0; i < nums1.length; i++) {
            ans[i] = -1;
            int j;
            for (j = 0; j < nums2.length; j++) {
                if (nums2[j] == nums1[i]) break;
            }
            for (int k = j + 1; k < nums2.length; k++) {
                if (nums2[k] > nums1[i]) {
                    ans[i] = nums2[k];
                    break;
                }
            }
        }
        return ans;

=======

        int[] ans = new int[nums1.length];
        for(int i = 0; i < nums1.length; i++){
            ans[i] = -1;
            int j = 0;
            while(nums2[j] != nums1[i]){
                j++;
            }
            for(int k = j + 1; k < nums2.length; k++){
                if(nums2[k] > nums1[i]){
                    ans[i] = nums2[k];
                    break;
                }
            }
        }
        return ans;

=======

        int n = nums1.length;
        int[] ans = new int[n];
        for (int i = 0; i < n; i++) {
            int num = nums1[i];
            int j = 0;
            for (; j < nums2.length; j++) {
                if (nums2[j] == num) {
                    break;
                }
            }
            for (; j < nums2.length; j++) {
                if (nums2[j] > num) {
                    ans[i] = nums2[j];
                    break;
                }
            }
            if (j == nums2.length) {
                ans[i] = -1;
            }
        }
        return ans;
