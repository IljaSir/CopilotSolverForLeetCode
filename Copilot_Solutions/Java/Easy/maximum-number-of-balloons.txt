Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int[] count = new int[5];
        for (char c : text.toCharArray()) {
            if (c == 'b') count[0]++;
            if (c == 'a') count[1]++;
            if (c == 'l') count[2]++;
            if (c == 'o') count[3]++;
            if (c == 'n') count[4]++;
        }
        count[2] /= 2;
        count[3] /= 2;
        int min = Integer.MAX_VALUE;
        for (int c : count) {
            min = Math.min(min, c);
        }
        return min;

=======

        int[] count = new int[26];
        for (int i = 0; i < text.length(); i++) {
            count[text.charAt(i) - 'a']++;
        }
        int res = Integer.MAX_VALUE;
        res = Math.min(res, count[1]);
        res = Math.min(res, count[0]);
        res = Math.min(res, count[11]);
        res = Math.min(res, count[14] / 2);
        res = Math.min(res, count[13] / 2);
        return res;

=======

        int[] count = new int[26];
        for (char c : text.toCharArray()) {
            count[c - 'a']++;
        }
        int min = Integer.MAX_VALUE;
        min = Math.min(min, count['b' - 'a']);
        min = Math.min(min, count['a' - 'a']);
        min = Math.min(min, count['l' - 'a'] / 2);
        min = Math.min(min, count['o' - 'a'] / 2);
        min = Math.min(min, count['n' - 'a']);
        return min;

=======

        int[] count = new int[26];
        for (char c : text.toCharArray()) {
            count[c - 'a']++;
        }
        int ans = Integer.MAX_VALUE;
        ans = Math.min(ans, count['b' - 'a']);
        ans = Math.min(ans, count['a' - 'a']);
        ans = Math.min(ans, count['l' - 'a'] / 2);
        ans = Math.min(ans, count['o' - 'a'] / 2);
        ans = Math.min(ans, count['n' - 'a']);
        return ans;

=======

        int[] count = new int[26];
        for (char c : text.toCharArray()) {
            count[c - 'a']++;
        }
        int result = Integer.MAX_VALUE;
        result = Math.min(result, count['b' - 'a']);
        result = Math.min(result, count['a' - 'a']);
        result = Math.min(result, count['l' - 'a'] / 2);
        result = Math.min(result, count['o' - 'a'] / 2);
        result = Math.min(result, count['n' - 'a']);
        return result;

=======

        int[] map = new int[26];
        for (char c : text.toCharArray()) {
            map[c - 'a']++;
        }
        int min = Integer.MAX_VALUE;
        min = Math.min(min, map['b' - 'a']);
        min = Math.min(min, map['a' - 'a']);
        min = Math.min(min, map['l' - 'a'] / 2);
        min = Math.min(min, map['o' - 'a'] / 2);
        min = Math.min(min, map['n' - 'a']);
        return min;

=======

        int[] count = new int[26];
        for (char c : text.toCharArray()) {
            count[c - 'a']++;
        }
        int min = count[0];
        min = Math.min(min, count[1]);
        min = Math.min(min, count[11] / 2);
        min = Math.min(min, count[14] / 2);
        min = Math.min(min, count[13]);
        return min;

=======

        int[] count = new int[26];
        for (char c : text.toCharArray()) {
            count[c - 'a']++;
        }
        int result = Integer.MAX_VALUE;
        for (char c : "balloon".toCharArray()) {
            if (c == 'l' || c == 'o') {
                result = Math.min(result, count[c - 'a'] / 2);
            } else {
                result = Math.min(result, count[c - 'a']);
            }
        }
        return result;

=======

        int count = 0;
        int[] ch = new int[26];
        for (char c : text.toCharArray()) {
            ch[c - 'a']++;
        }
        while (ch['b' - 'a'] > 0 && ch['a' - 'a'] > 0 && ch['l' - 'a'] > 1 && ch['o' - 'a'] > 1 && ch['n' - 'a'] > 0) {
            ch['b' - 'a']--;
            ch['a' - 'a']--;
            ch['l' - 'a'] -= 2;
            ch['o' - 'a'] -= 2;
            ch['n' - 'a']--;
            count++;
        }
        return count;
