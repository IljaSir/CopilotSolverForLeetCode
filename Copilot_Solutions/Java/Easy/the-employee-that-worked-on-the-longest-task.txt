Synthesizing 10/10 solutions

=======

        int[] time = new int[n];
        for (int[] log : logs) {
            time[log[0]] += log[1] - (log[0] == 0 ? 0 : logs[log[0] - 1][1]);
        }
        int max = 0;
        int id = 0;
        for (int i = 0; i < n; i++) {
            if (time[i] > max) {
                max = time[i];
                id = i;
            }
        }
        return id;

=======

        int[] time = new int[n];
        for (int[] log : logs) {
            time[log[0]] += log[1] - (log[0] == 0 ? 0 : logs[log[0] - 1][1]);
        }
        int max = 0;
        int res = 0;
        for (int i = 0; i < n; i++) {
            if (time[i] > max) {
                max = time[i];
                res = i;
            }
        }
        return res;

=======

        int[] work = new int[n];
        for (int i = 0; i < logs.length; i++) {
            if (i == 0) {
                work[logs[i][0]] += logs[i][1];
            } else {
                work[logs[i][0]] += logs[i][1] - logs[i - 1][1];
            }
        }
        int max = -1;
        int maxIndex = -1;
        for (int i = 0; i < work.length; i++) {
            if (work[i] > max) {
                max = work[i];
                maxIndex = i;
            }
        }
        return maxIndex;

=======

        int[] workTime = new int[n];
        for(int[] log : logs) {
            workTime[log[0]] += log[1] - (log[0] == 0 ? 0 : logs[log[0] - 1][1]);
        }
        int max = 0;
        int id = 0;
        for(int i = 0; i < n; i++) {
            if(workTime[i] > max) {
                max = workTime[i];
                id = i;
            }
        }
        return id;

=======

        int[] times = new int[n];
        for (int[] log : logs) {
            times[log[0]] += log[1];
        }
        int max = 0;
        int ans = 0;
        for (int i = 1; i < n; i++) {
            if (times[i] > max) {
                max = times[i];
                ans = i;
            }
        }
        return ans;

=======

        int[] times = new int[n];
        int maxTime = 0;
        int maxId = 0;
        for (int i = 0; i < logs.length; i++) {
            int id = logs[i][0];
            int leaveTime = logs[i][1];
            int startTime = i == 0 ? 0 : logs[i - 1][1];
            times[id] += leaveTime - startTime;
            if (times[id] > maxTime) {
                maxTime = times[id];
                maxId = id;
            }
        }
        return maxId;

=======

        int[] times = new int[n];
        int max = 0;
        int maxId = 0;
        for (int[] log : logs) {
            times[log[0]] += log[1] - (log[0] == 0 ? 0 : logs[log[0] - 1][1]);
            if (times[log[0]] > max) {
                max = times[log[0]];
                maxId = log[0];
            }
        }
        return maxId;

=======

        int[] times = new int[n];
        for (int[] log : logs) {
            times[log[0]] += log[1];
        }
        int max = 0;
        int maxIndex = 0;
        for (int i = 0; i < n; i++) {
            if (times[i] > max) {
                max = times[i];
                maxIndex = i;
            }
        }
        return maxIndex;

=======

        int[] tasks = new int[n];
        int max = 0;
        int res = 0;
        for (int i = 0; i < logs.length; i++) {
            tasks[logs[i][0]] += (i == 0 ? logs[i][1] : logs[i][1] - logs[i - 1][1]);
            if (tasks[logs[i][0]] > max) {
                max = tasks[logs[i][0]];
                res = logs[i][0];
            }
        }
        return res;

=======

        int[] duration = new int[n];
        int max = 0;
        int maxId = 0;
        for(int i = 0; i < logs.length; i++) {
            int id = logs[i][0];
            int time = logs[i][1];
            if(i == 0) {
                duration[id] = logs[i][1];
            } else {
                duration[id] = logs[i][1] - logs[i - 1][1];
            }
            if(duration[id] > max) {
                max = duration[id];
                maxId = id;
            }
        }
        return maxId;
