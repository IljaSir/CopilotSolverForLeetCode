Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int a = 0;
        int b = 0;
        int c = 0;
        for (int i = 0; i < firstWord.length(); i++) {
            a = a * 10 + firstWord.charAt(i) - 'a';
        }
        for (int i = 0; i < secondWord.length(); i++) {
            b = b * 10 + secondWord.charAt(i) - 'a';
        }
        for (int i = 0; i < targetWord.length(); i++) {
            c = c * 10 + targetWord.charAt(i) - 'a';
        }
        return a + b == c;

=======

        int first = 0;
        int second = 0;
        int target = 0;
        for (int i = 0; i < firstWord.length(); i++) {
            first = first * 10 + firstWord.charAt(i) - 'a';
        }
        for (int i = 0; i < secondWord.length(); i++) {
            second = second * 10 + secondWord.charAt(i) - 'a';
        }
        for (int i = 0; i < targetWord.length(); i++) {
            target = target * 10 + targetWord.charAt(i) - 'a';
        }
        return first + second == target;

=======

        int first = 0;
        int second = 0;
        int target = 0;
        for (int i = 0; i < firstWord.length(); i++) {
            first = first * 10 + (firstWord.charAt(i) - 'a');
        }
        for (int i = 0; i < secondWord.length(); i++) {
            second = second * 10 + (secondWord.charAt(i) - 'a');
        }
        for (int i = 0; i < targetWord.length(); i++) {
            target = target * 10 + (targetWord.charAt(i) - 'a');
        }
        return first + second == target;

=======

        return getValue(firstWord) + getValue(secondWord) == getValue(targetWord);
    }
    
    private int getValue(String word) {
        int value = 0;
        for (int i = 0; i < word.length(); i++) {
            value = value * 10 + (word.charAt(i) - 'a');
        }
        return value;

=======

        int first = 0, second = 0, target = 0;
        for (char c : firstWord.toCharArray()) {
            first = first * 10 + (c - 'a');
        }
        for (char c : secondWord.toCharArray()) {
            second = second * 10 + (c - 'a');
        }
        for (char c : targetWord.toCharArray()) {
            target = target * 10 + (c - 'a');
        }
        return first + second == target;

=======

        return getNumber(firstWord) + getNumber(secondWord) == getNumber(targetWord);
    }
    
    private int getNumber(String word) {
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < word.length(); i++) {
            sb.append((int)(word.charAt(i) - 'a'));
        }
        return Integer.valueOf(sb.toString());

=======

        return getVal(firstWord) + getVal(secondWord) == getVal(targetWord);
    }
    private int getVal(String s) {
        int res = 0;
        for (char c : s.toCharArray()) {
            res = res * 10 + (c - 'a');
        }
        return res;

=======

        int a = 0;
        int b = 0;
        int c = 0;
        for(int i = 0; i < firstWord.length(); i++){
            a += firstWord.charAt(i)-'a';
            a *= 10;
        }
        a /= 10;
        for(int i = 0; i < secondWord.length(); i++){
            b += secondWord.charAt(i)-'a';
            b *= 10;
        }
        b /= 10;
        for(int i = 0; i < targetWord.length(); i++){
            c += targetWord.charAt(i)-'a';
            c *= 10;
        }
        c /= 10;
        return a+b == c;
