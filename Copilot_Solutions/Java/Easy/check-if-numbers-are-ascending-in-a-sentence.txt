Synthesizing 10/10 solutions

=======

        String[] arr = s.split(" ");
        int last = -1;
        for (int i = 0; i < arr.length; i++) {
            if (arr[i].matches("[0-9]+")) {
                int cur = Integer.parseInt(arr[i]);
                if (cur <= last) {
                    return false;
                }
                last = cur;
            }
        }
        return true;

=======

        String[] arr = s.split(" ");
        int prev = 0;
        for (int i = 0; i < arr.length; i++) {
            try {
                int curr = Integer.parseInt(arr[i]);
                if (curr <= prev) {
                    return false;
                }
                prev = curr;
            } catch (Exception e) {
                
            }
        }
        return true;

=======

        String[] words = s.split(" ");
        int prev = -1;
        for (String word : words) {
            if (isNumber(word)) {
                int num = Integer.parseInt(word);
                if (num <= prev) {
                    return false;
                }
                prev = num;
            }
        }
        return true;
    }
    
    private boolean isNumber(String word) {
        for (char ch : word.toCharArray()) {
            if (ch < '0' || ch > '9') {
                return false;
            }
        }
        return true;

=======

        int prev = -1;
        for (String word : s.split("\\s+")) {
            if (Character.isDigit(word.charAt(0))) {
                int num = Integer.parseInt(word);
                if (num <= prev) {
                    return false;
                }
                prev = num;
            }
        }
        return true;

=======

        String[] arr = s.split(" ");
        int prev = 0;
        for (String str : arr) {
            if (Character.isDigit(str.charAt(0))) {
                int curr = Integer.parseInt(str);
                if (curr <= prev) {
                    return false;
                }
                prev = curr;
            }
        }
        return true;

=======

        String[] words = s.split(" ");
        int last = 0;
        for (String word : words) {
            if (word.matches("[0-9]+")) {
                int num = Integer.parseInt(word);
                if (num <= last) {
                    return false;
                }
                last = num;
            }
        }
        return true;

=======

        String[] tokens = s.split(" ");
        int last = -1;
        for (String token : tokens) {
            if (token.matches("[0-9]+")) {
                int curr = Integer.parseInt(token);
                if (curr <= last) {
                    return false;
                }
                last = curr;
            }
        }
        return true;

=======

        String[] arr = s.split(" ");
        int prev = -1;
        for (String str : arr) {
            if (str.matches("^[0-9]+$")) {
                int num = Integer.parseInt(str);
                if (num <= prev) {
                    return false;
                }
                prev = num;
            }
        }
        return true;

=======

        String[] ss = s.split(" ");
        int pre = 0;
        for (String sss : ss) {
            if (sss.matches("[0-9]+")) {
                int cur = Integer.parseInt(sss);
                if (cur <= pre) {
                    return false;
                }
                pre = cur;
            }
        }
        return true;

=======

        int pre = 0;
        int cur = 0;
        boolean isNum = false;
        for (char c: s.toCharArray()) {
            if (c >= '0' && c <= '9') {
                isNum = true;
                cur = cur * 10 + (c - '0');
            } else {
                if (isNum) {
                    if (cur <= pre) {
                        return false;
                    }
                    pre = cur;
                    cur = 0;
                    isNum = false;
                }
            }
        }
        if (isNum) {
            if (cur <= pre) {
                return false;
            }
            pre = cur;
            cur = 0;
            isNum = false;
        }
        return true;
