Synthesizing 10/10 solutions

=======

        int top = 0;
        int front = 0;
        int side = 0;
        for (int i = 0; i < grid.length; i++) {
            for (int j = 0; j < grid.length; j++) {
                if (grid[i][j] > 0) {
                    top++;
                }
            }
        }
        for (int i = 0; i < grid.length; i++) {
            int max = 0;
            for (int j = 0; j < grid.length; j++) {
                if (grid[i][j] > max) {
                    max = grid[i][j];
                }
            }
            front += max;
        }
        for (int j = 0; j < grid.length; j++) {
            int max = 0;
            for (int i = 0; i < grid.length; i++) {
                if (grid[i][j] > max) {
                    max = grid[i][j];
                }
            }
            side += max;
        }
        return top + front + side;

=======

        int n = grid.length;
        int ans = 0;
        for (int i = 0; i < n; ++i) {
            int bestRow = 0;  // max of grid[i][j]
            int bestCol = 0;  // max of grid[j][i]
            for (int j = 0; j < n; ++j) {
                if (grid[i][j] > 0) ans++;  // top shadow
                bestRow = Math.max(bestRow, grid[i][j]);
                bestCol = Math.max(bestCol, grid[j][i]);
            }
            ans += bestRow + bestCol;
        }
        return ans;

=======

        int n = grid.length;
        int area = 0;
        for (int i = 0; i < n; i++) {
            int maxRow = 0;
            int maxCol = 0;
            for (int j = 0; j < n; j++) {
                if (grid[i][j] > 0) {
                    area++;
                }
                maxRow = Math.max(maxRow, grid[i][j]);
                maxCol = Math.max(maxCol, grid[j][i]);
            }
            area += maxRow + maxCol;
        }
        return area;

=======

        int xz = 0;
        int yz = 0;
        int xy = 0;
        for (int i = 0; i < grid.length; i++) {
            int max = 0;
            for (int j = 0; j < grid[i].length; j++) {
                if (grid[i][j] > 0) {
                    xy++;
                }
                if (grid[i][j] > max) {
                    max = grid[i][j];
                }
            }
            xz += max;
        }
        for (int i = 0; i < grid[0].length; i++) {
            int max = 0;
            for (int j = 0; j < grid.length; j++) {
                if (grid[j][i] > max) {
                    max = grid[j][i];
                }
            }
            yz += max;
        }
        return xz + yz + xy;

=======

        int area = 0;
        int n = grid.length;
        for (int i = 0; i < n; i++) {
            int max1 = 0;
            int max2 = 0;
            for (int j = 0; j < n; j++) {
                if (grid[i][j] > 0) {
                    area++;
                }
                max1 = Math.max(max1, grid[i][j]);
                max2 = Math.max(max2, grid[j][i]);
            }
            area += max1 + max2;
        }
        return area;

=======

        int result = 0;
        int n = grid.length;
        for (int i = 0; i < n; i++) {
            int max1 = 0;
            int max2 = 0;
            for (int j = 0; j < n; j++) {
                if (grid[i][j] > 0) {
                    result += 1;
                }
                max1 = Math.max(max1, grid[i][j]);
                max2 = Math.max(max2, grid[j][i]);
            }
            result += max1 + max2;
        }
        return result;

=======

        int n = grid.length;
        int top = 0;
        int front = 0;
        int side = 0;
        for(int i = 0; i < n; i++) {
            int max = 0;
            for(int j = 0; j < n; j++) {
                if(grid[i][j] > 0) top++;
                max = Math.max(max, grid[i][j]);
            }
            front += max;
        }
        for(int j = 0; j < n; j++) {
            int max = 0;
            for(int i = 0; i < n; i++) {
                max = Math.max(max, grid[i][j]);
            }
            side += max;
        }
        return top + front + side;

=======

        int n = grid.length;
        int top = 0;
        int front = 0;
        int side = 0;
        for(int i = 0; i < n; i++) {
            int rowMax = 0;
            int colMax = 0;
            for(int j = 0; j < n; j++) {
                if(grid[i][j] > 0) {
                    top++;
                }
                rowMax = Math.max(rowMax, grid[i][j]);
                colMax = Math.max(colMax, grid[j][i]);
            }
            front += rowMax;
            side += colMax;
        }
        return top + front + side;

=======

        int n = grid.length;
        int m = grid[0].length;
        int ans = 0;
        int[] row = new int[n];
        int[] col = new int[m];
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(grid[i][j]!=0){
                    ans++;
                }
                row[i] = Math.max(row[i], grid[i][j]);
                col[j] = Math.max(col[j], grid[i][j]);
            }
        }
        for(int i=0;i<n;i++){
            ans+=row[i];
        }
        for(int i=0;i<m;i++){
            ans+=col[i];
        }
        return ans;

=======

        int xz = 0;
        int yz = 0;
        int xy = 0;
        for (int i = 0; i < grid.length; i++) {
            int max = 0;
            for (int j = 0; j < grid[i].length; j++) {
                if (grid[i][j] > 0) {
                    xy++;
                }
                if (grid[i][j] > max) {
                    max = grid[i][j];
                }
            }
            xz += max;
        }
        for (int i = 0; i < grid[0].length; i++) {
            int max = 0;
            for (int j = 0; j < grid.length; j++) {
                if (grid[j][i] > max) {
                    max = grid[j][i];
                }
            }
            yz += max;
        }
        return xz + yz + xy;

=======

        int area = 0;
        int n = grid.length;
        for (int i = 0; i < n; i++) {
            int max1 = 0;
            int max2 = 0;
            for (int j = 0; j < n; j++) {
                if (grid[i][j] > 0) {
                    area++;
                }
                max1 = Math.max(max1, grid[i][j]);
                max2 = Math.max(max2, grid[j][i]);
            }
            area += max1 + max2;
        }
        return area;

=======

        int n = grid.length;
        int top = 0;
        int front = 0;
        int side = 0;
        for(int i = 0; i < n; i++) {
            int max = 0;
            for(int j = 0; j < n; j++) {
                if(grid[i][j] > 0) top++;
                max = Math.max(max, grid[i][j]);
            }
            front += max;
        }
        for(int j = 0; j < n; j++) {
            int max = 0;
            for(int i = 0; i < n; i++) {
                max = Math.max(max, grid[i][j]);
            }
            side += max;
        }
        return top + front + side;

=======

        int n = grid.length;
        int top = 0;
        int front = 0;
        int side = 0;
        for(int i = 0; i < n; i++) {
            int rowMax = 0;
            int colMax = 0;
            for(int j = 0; j < n; j++) {
                if(grid[i][j] > 0) {
                    top++;
                }
                rowMax = Math.max(rowMax, grid[i][j]);
                colMax = Math.max(colMax, grid[j][i]);
            }
            front += rowMax;
            side += colMax;
        }
        return top + front + side;

=======

        int n = grid.length;
        int m = grid[0].length;
        int ans = 0;
        int[] row = new int[n];
        int[] col = new int[m];
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(grid[i][j]!=0){
                    ans++;
                }
                row[i] = Math.max(row[i], grid[i][j]);
                col[j] = Math.max(col[j], grid[i][j]);
            }
        }
        for(int i=0;i<n;i++){
            ans+=row[i];
        }
        for(int i=0;i<m;i++){
            ans+=col[i];
        }
        return ans;

=======

        int n = grid.length;
        int xz = 0;
        int yz = 0;
        int xy = 0;
        int[] xzArray = new int[n];
        int[] yzArray = new int[n];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                int v = grid[i][j];
                if (v > 0) {
                    xy++;
                }
                if (v > xzArray[i]) {
                    xzArray[i] = v;
                }
                if (v > yzArray[j]) {
                    yzArray[j] = v;
                }
            }
        }
        for (int i = 0; i < n; i++) {
            xz += xzArray[i];
            yz += yzArray[i];
        }
        return xz + yz + xy;
