Synthesizing 10/10 solutions

=======

        int[] target = new int[nums.length];
        for (int i = 0; i < nums.length; i++) {
            target[i] = -1;
        }
        for (int i = 0; i < nums.length; i++) {
            if (target[index[i]] == -1) {
                target[index[i]] = nums[i];
            } else {
                int j = nums.length - 1;
                while (j > index[i]) {
                    target[j] = target[j - 1];
                    j--;
                }
                target[index[i]] = nums[i];
            }
        }
        return target;

=======

        int[] target = new int[nums.length];
        for (int i = 0; i < nums.length; i++) {
            if (i == index[i]) {
                target[i] = nums[i];
            } else {
                int temp = target[index[i]];
                target[index[i]] = nums[i];
                for (int j = index[i] + 1; j <= i; j++) {
                    int temp2 = target[j];
                    target[j] = temp;
                    temp = temp2;
                }
            }
        }
        return target;

=======

        int[] target = new int[nums.length];
        for (int i = 0; i < nums.length; i++) {
            if (i == index[i]) {
                target[i] = nums[i];
            } else {
                for (int j = i; j > index[i]; j--) {
                    target[j] = target[j - 1];
                }
                target[index[i]] = nums[i];
            }
        }
        return target;

=======

        int[] target = new int[nums.length];
        for (int i = 0; i < nums.length; i++) {
            if (index[i] == i) {
                target[i] = nums[i];
            } else {
                for (int j = i; j > index[i]; j--) {
                    target[j] = target[j - 1];
                }
                target[index[i]] = nums[i];
            }
        }
        return target;

=======

        List<Integer> target = new ArrayList<>();
        for (int i = 0; i < nums.length; i++) {
            target.add(index[i], nums[i]);
        }
        int[] result = new int[nums.length];
        for (int i = 0; i < nums.length; i++) {
            result[i] = target.get(i);
        }
        return result;

=======

        int[] target = new int[nums.length];
        for(int i = 0; i < nums.length; i++){
            target[i] = -1;
        }
        for(int i = 0; i < nums.length; i++){
            if(target[index[i]] == -1){
                target[index[i]] = nums[i];
            }else{
                for(int j = nums.length - 1; j > index[i]; j--){
                    target[j] = target[j - 1];
                }
                target[index[i]] = nums[i];
            }
        }
        return target;

=======

        int[] target = new int[nums.length];
        for(int i = 0; i < nums.length; i++) {
            if(i == index[i]) {
                target[i] = nums[i];
            } else {
                for(int j = nums.length - 1; j > index[i]; j--) {
                    target[j] = target[j - 1];
                }
                target[index[i]] = nums[i];
            }
        }
        return target;

=======

        int[] target = new int[nums.length];
        for (int i = 0; i < nums.length; i++) {
            int idx = index[i];
            int num = nums[i];
            if (idx == i) {
                target[idx] = num;
            } else {
                for (int j = i; j > idx; j--) {
                    target[j] = target[j-1];
                }
                target[idx] = num;
            }
        }
        return target;

=======

        int[] target = new int[nums.length];
        for(int i = 0; i < nums.length; i++){
            int j = i;
            while(j > index[i]){
                target[j] = target[j - 1];
                j--;
            }
            target[index[i]] = nums[i];
        }
        return target;

=======

        int[] target = new int[nums.length];
        for (int i = 0; i < nums.length; i++) {
            int j = i;
            int temp = nums[i];
            while (j > index[i]) {
                target[j] = target[j-1];
                j--;
            }
            target[index[i]] = temp;
        }
        return target;
