Synthesizing 10/10 solutions

=======

        for (int i = 0; i < arr.length; i++) {
            if (arr[i] == 0) {
                for (int j = arr.length - 1; j > i; j--) {
                    arr[j] = arr[j - 1];
                }
                i++;
            }
        }

=======

        int n = arr.length;
        int i = 0;
        while (i < n) {
            if (arr[i] == 0) {
                for (int j = n - 1; j > i; j--) {
                    arr[j] = arr[j - 1];
                }
                i++;
            }
            i++;
        }

=======

        int len = arr.length;
        int i = 0;
        while (i < len) {
            if (arr[i] == 0) {
                for (int j = len - 2; j >= i; j--) {
                    arr[j + 1] = arr[j];
                }
                i++;
            }
            i++;
        }

=======

        for (int i = 0; i < arr.length; i++) {
            if (arr[i] == 0) {
                int[] temp = new int[arr.length];
                for (int j = 0; j < i; j++) {
                    temp[j] = arr[j];
                }
                temp[i] = 0;
                temp[i + 1] = 0;
                for (int j = i + 2; j < arr.length; j++) {
                    temp[j] = arr[j - 1];
                }
                for (int j = 0; j < arr.length; j++) {
                    arr[j] = temp[j];
                }
            }
        }

=======

        int n = arr.length;
        int[] newArr = new int[n];
        int i = 0;
        int j = 0;
        while (i < n) {
            if (arr[j] == 0) {
                newArr[i++] = 0;
                if (i < n) {
                    newArr[i++] = 0;
                }
            } else {
                newArr[i++] = arr[j];
            }
            j++;
        }
        for (i = 0; i < n; i++) {
            arr[i] = newArr[i];
        }

=======

        int i = 0;
        int j = 0;
        while (i < arr.length) {
            if (arr[i] == 0) {
                j++;
            }
            i++;
            j++;
        }
        for (i = arr.length - 1; i >= 0; i--) {
            j--;
            if (j < arr.length) {
                arr[j] = arr[i];
            }
            if (arr[i] == 0) {
                j--;
                if (j < arr.length) {
                    arr[j] = 0;
                }
            }
        }

=======

        int n = arr.length;
        int[] arr2 = new int[n];
        int i = 0;
        int j = 0;
        while (i < n && j < n) {
            if (arr[i] == 0) {
                arr2[j] = 0;
                j++;
                if (j < n) {
                    arr2[j] = 0;
                    j++;
                }
            } else {
                arr2[j] = arr[i];
                j++;
            }
            i++;
        }
        for (i = 0; i < n; i++) {
            arr[i] = arr2[i];
        }

=======

        int[] copy = Arrays.copyOf(arr, arr.length);
        int i = 0;
        for (int j = 0; j < arr.length; j++) {
            if (copy[i] == 0) {
                arr[j++] = 0;
                if (j < arr.length) {
                    arr[j] = 0;
                }
            } else {
                arr[j] = copy[i];
            }
            i++;
        }

=======

        int i = 0;
        int j = 0;
        int[] copy = new int[arr.length];
        while (i < arr.length) {
            if (arr[i] == 0) {
                copy[j++] = 0;
                copy[j++] = 0;
            } else {
                copy[j++] = arr[i];
            }
            i++;
        }
        for (i = 0; i < arr.length; i++) {
            arr[i] = copy[i];
        }

=======

        int n = arr.length;
        int last = n - 1;
        for(int i = 0; i <= last; i++){
            if(arr[i] == 0){
                if(i == last){
                    arr[last] = 0;
                    last--;
                    break;
                }
                for(int j = last; j > i; j--){
                    arr[j] = arr[j-1];
                }
                arr[i+1] = 0;
                i++;
            }
        }
