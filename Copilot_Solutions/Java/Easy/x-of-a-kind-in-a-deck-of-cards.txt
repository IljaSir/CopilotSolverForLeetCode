Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int[] count = new int[10000];
        for (int c: deck)
            count[c]++;
        int g = -1;
        for (int i = 0; i < 10000; ++i)
            if (count[i] > 0)
                if (g == -1)
                    g = count[i];
                else
                    g = gcd(g, count[i]);
        return g >= 2;

=======

        int[] count = new int[10000];
        for (int c: deck) {
            count[c]++;
        }
        int g = -1;
        for (int i = 0; i < 10000; ++i) {
            if (count[i] > 0) {
                if (g == -1) {
                    g = count[i];
                } else {
                    g = gcd(g, count[i]);
                }
            }
        }
        return g >= 2;

=======

        int[] count = new int[10000];
        for (int c: deck)
            count[c]++;
        int g = -1;
        for (int i: count) {
            if (i > 0) {
                if (g == -1)
                    g = i;
                else
                    g = gcd(g, i);
            }
        }
        return g >= 2;

=======

        int[] count = new int[10000];
        for (int c: deck) {
            count[c]++;
        }
        int g = -1;
        for (int i = 0; i < 10000; i++) {
            if (count[i] > 0) {
                if (g == -1) {
                    g = count[i];
                } else {
                    g = gcd(g, count[i]);
                }
            }
        }
        return g >= 2;

=======

        Map<Integer, Integer> map = new HashMap<>();
        for (int i = 0; i < deck.length; i++) {
            if (map.containsKey(deck[i])) {
                map.put(deck[i], map.get(deck[i]) + 1);
            } else {
                map.put(deck[i], 1);
            }
        }
        int min = 10000;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() < min) {
                min = entry.getValue();
            }
        }
        for (int i = 2; i <= min; i++) {
            boolean flag = false;
            for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
                if (entry.getValue() % i != 0) {
                    flag = true;
                    break;
                }
            }
            if (!flag) {
                return true;
            }
        }
        return false;

=======

        int[] count = new int[10000];
        for (int i: deck) {
            count[i]++;
        }
        int g = -1;
        for (int i = 0; i < 10000; ++i) {
            if (count[i] > 0) {
                if (g == -1) {
                    g = count[i];
                } else {
                    g = gcd(g, count[i]);
                }
            }
        }
        return g >= 2;

=======

        if (deck.length < 2) {
            return false;
        }
        int[] counts = new int[10000];
        for (int i : deck) {
            counts[i]++;
        }
        int g = -1;
        for (int i : counts) {
            if (i > 0) {
                if (g == -1) {
                    g = i;
                } else {
                    g = gcd(g, i);
                }
            }
        }
        return g >= 2;

=======

        int[] arr = new int[10000];
        for (int i : deck) {
            arr[i]++;
        }
        int min = 0;
        for (int i : arr) {
            if (i != 0) {
                min = gcd(min, i);
            }
        }
        return min > 1;
