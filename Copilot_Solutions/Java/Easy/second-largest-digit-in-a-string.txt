Synthesizing 10/10 solutions

=======

        int[] count = new int[10];
        for (int i = 0; i < s.length(); i++) {
            if (Character.isDigit(s.charAt(i))) {
                count[s.charAt(i) - '0']++;
            }
        }
        
        int max = -1;
        int secondMax = -1;
        for (int i = 9; i >= 0; i--) {
            if (count[i] > 0) {
                if (max == -1) {
                    max = i;
                } else if (secondMax == -1) {
                    secondMax = i;
                    break;
                }
            }
        }
        return secondMax;

=======

        int[] digits = new int[10];
        for (int i = 0; i < s.length(); i++) {
            if (s.charAt(i) >= '0' && s.charAt(i) <= '9') {
                digits[s.charAt(i) - '0']++;
            }
        }
        boolean found = false;
        for (int i = 9; i >= 0; i--) {
            if (digits[i] > 0) {
                if (found) {
                    return i;
                }
                found = true;
            }
        }
        return -1;

=======

        int[] digits = new int[10];
        for (char c : s.toCharArray()) {
            if (Character.isDigit(c)) {
                digits[c - '0']++;
            }
        }
        int count = 0;
        for (int i = 9; i >= 0; i--) {
            if (digits[i] > 0) {
                count++;
                if (count == 2) {
                    return i;
                }
            }
        }
        return -1;

=======

        int[] digits = new int[10];
        for (int i = 0; i < s.length(); i++) {
            char ch = s.charAt(i);
            if (Character.isDigit(ch)) {
                digits[ch - '0']++;
            }
        }
        int count = 0;
        for (int i = digits.length - 1; i >= 0; i--) {
            if (digits[i] > 0) {
                count++;
                if (count == 2) {
                    return i;
                }
            }
        }
        return -1;

=======

        int[] freq = new int[10];
        for (char c : s.toCharArray()) {
            if (Character.isDigit(c)) {
                freq[c - '0']++;
            }
        }
        int count = 0;
        for (int i = 9; i >= 0; i--) {
            if (freq[i] > 0) {
                count++;
                if (count == 2) {
                    return i;
                }
            }
        }
        return -1;

=======

        int max = -1;
        int secondMax = -1;
        for (char c : s.toCharArray()) {
            if (Character.isDigit(c)) {
                int n = c - '0';
                if (n > max) {
                    secondMax = max;
                    max = n;
                } else if (n > secondMax && n != max) {
                    secondMax = n;
                }
            }
        }
        return secondMax;

=======

        int max = -1;
        int secondMax = -1;
        for (int i = 0; i < s.length(); i++) {
            if (Character.isDigit(s.charAt(i))) {
                int digit = Character.getNumericValue(s.charAt(i));
                if (digit > max) {
                    secondMax = max;
                    max = digit;
                } else if (digit > secondMax && digit != max) {
                    secondMax = digit;
                }
            }
        }
        return secondMax;

=======

        int[] count = new int[10];
        for (char c : s.toCharArray()) {
            if (Character.isDigit(c)) {
                count[c - '0']++;
            }
        }
        int max = -1;
        int secondMax = -1;
        for (int i = 0; i < 10; i++) {
            if (count[i] > 0) {
                if (i > max) {
                    secondMax = max;
                    max = i;
                } else if (i > secondMax) {
                    secondMax = i;
                }
            }
        }
        return secondMax;

=======

        int[] arr = new int[10];
        for (char ch : s.toCharArray()) {
            if (Character.isDigit(ch)) {
                arr[ch - '0']++;
            }
        }
        int count = 0;
        for (int i = arr.length - 1; i >= 0; i--) {
            if (arr[i] > 0) {
                count++;
            }
            if (count == 2) {
                return i;
            }
        }
        return -1;

=======

        int f = -1, s = -1;
        for (char c : s.toCharArray()) {
            if (Character.isDigit(c)) {
                int digit = c - '0';
                if (digit > f) {
                    s = f;
                    f = digit;
                } else if (digit > s && digit != f) {
                    s = digit;
                }
            }
        }
        return s;
