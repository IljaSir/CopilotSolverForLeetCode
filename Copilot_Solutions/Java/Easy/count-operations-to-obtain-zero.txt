Synthesizing 10/10 solutions

=======

        if (num1 == num2) {
            return num1 == 0 ? 0 : 1;
        }
        if (num1 < num2) {
            int temp = num1;
            num1 = num2;
            num2 = temp;
        }
        int count = 0;
        while (num1 != 0) {
            count += num1 / num2;
            int rem = num1 % num2;
            num1 = num2;
            num2 = rem;
        }
        return count;

=======

        if (num1 == num2) {
            return num1 == 0 ? 0 : 1;
        }
        if (num1 < num2) {
            int temp = num1;
            num1 = num2;
            num2 = temp;
        }
        int count = 0;
        while (num1 != 0) {
            count += num1 / num2;
            num1 %= num2;
            if (num1 < num2) {
                int temp = num1;
                num1 = num2;
                num2 = temp;
            }
        }
        return count;

=======

        if (num1 == num2) {
            return num1 == 0 ? 0 : 1;
        }
        if (num1 > num2) {
            return countOperations(num2, num1);
        }
        int res = 0;
        while (num2 > 0) {
            res += num2 / num1;
            int tmp = num2 % num1;
            num2 = num1;
            num1 = tmp;
        }
        return res;

=======

        if (num1 == num2) {
            return num1 == 0 ? 0 : 1;
        }
        if (num1 > num2) {
            int t = num1;
            num1 = num2;
            num2 = t;
        }
        int c = 0;
        while (num1 > 0) {
            int t = num2 / num1;
            c += t;
            num2 -= t * num1;
            t = num1;
            num1 = num2;
            num2 = t;
        }
        return c;

=======

        if (num1 > num2) {
            int tmp = num1;
            num1 = num2;
            num2 = tmp;
        }
        if (num1 == 0) {
            return 0;
        }
        int count = 0;
        while (num1 > 0) {
            count += num2 / num1;
            num2 %= num1;
            int tmp = num1;
            num1 = num2;
            num2 = tmp;
        }
        return count - 1;

=======

        if (num1 == 0 || num2 == 0) {
            return 0;
        }
        int max = Math.max(num1, num2);
        int min = Math.min(num1, num2);
        int count = 0;
        while (max > 0) {
            count += max / min;
            int mod = max % min;
            max = min;
            min = mod;
        }
        return count - 1;

=======

        if (num1 == num2) {
            if (num1 == 0) {
                return 0;
            }
            return 1;
        }
        if (num1 == 0 || num2 == 0) {
            return 1;
        }
        if (num1 > num2) {
            return countOperations(num1 - num2, num2) + 1;
        } else {
            return countOperations(num1, num2 - num1) + 1;
        }

=======

        if (num1 < num2) {
            int tmp = num1;
            num1 = num2;
            num2 = tmp;
        }
        int count = 0;
        while (num1 > 0 && num2 > 0) {
            if (num1 % 2 == 0) {
                num1 /= 2;
            } else {
                num1--;
            }
            count++;
            if (num1 < num2) {
                int tmp = num1;
                num1 = num2;
                num2 = tmp;
            }
        }
        return count;

=======

        int count = 0;
        while(num1 != 0 && num2 != 0){
            if(num1 > num2){
                num1 = num1 - num2;
            } else {
                num2 = num2 - num1;
            }
            count++;
        }
        return count;

=======

        if(num1 == num2) return 0;
        if(num1 < num2) return countOperations(num2, num1);
        int res = 0;
        while(num1 != 0 && num2 != 0){
            if(num1 >= num2 * 2){
                res += num1 / (num2 * 2);
                num1 %= num2 * 2;
            }else{
                res += 1;
                num1 -= num2;
            }
        }
        return res;
