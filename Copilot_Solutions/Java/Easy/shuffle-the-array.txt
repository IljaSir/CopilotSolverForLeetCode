Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int[] result = new int[nums.length];
        for (int i = 0; i < n; i++) {
            result[2 * i] = nums[i];
            result[2 * i + 1] = nums[i + n];
        }
        return result;

=======

        int[] res = new int[nums.length];
        for (int i = 0; i < n; i++) {
            res[2 * i] = nums[i];
            res[2 * i + 1] = nums[i + n];
        }
        return res;

=======

        int[] result = new int[nums.length];
        int index = 0;
        for (int i = 0; i < n; i++) {
            result[index++] = nums[i];
            result[index++] = nums[i + n];
        }
        return result;

=======

        int[] result = new int[nums.length];
        for (int i = 0, j = 0; i < nums.length; i += 2, j++) {
            result[i] = nums[j];
            result[i + 1] = nums[j + n];
        }
        return result;

=======

        int[] ans = new int[nums.length];
        for (int i = 0; i < n; i++) {
            ans[i*2] = nums[i];
            ans[i*2+1] = nums[i+n];
        }
        return ans;

=======

        int[] r = new int[2*n];
        for (int i = 0; i < n; i++) {
            r[2*i] = nums[i];
            r[2*i + 1] = nums[n + i];
        }
        return r;

=======

        int[] result = new int[2*n];
        int i = 0;
        for (int j = 0; j < n; j++) {
            result[i++] = nums[j];
            result[i++] = nums[j+n];
        }
        return result;

=======

        int[] ans = new int[2 * n];
        int a = 0;
        int b = n;
        for (int i = 0; i < 2 * n; i++) {
            if (i % 2 == 0) {
                ans[i] = nums[a];
                a++;
            } else {
                ans[i] = nums[b];
                b++;
            }
        }
        return ans;

=======

        int[] shuffled = new int[nums.length];
        int i = 0;
        int j = 0;
        int k = 0;
        while (i < n) {
            shuffled[j] = nums[i];
            j += 2;
            i++;
        }
        while (k < n) {
            shuffled[j] = nums[i];
            j += 2;
            i++;
            k++;
        }
        return shuffled;
