Synthesizing 10/10 solutions

=======

        Integer max1 = null;
        Integer max2 = null;
        Integer max3 = null;
        for (Integer n : nums) {
            if (n.equals(max1) || n.equals(max2) || n.equals(max3)) continue;
            if (max1 == null || n > max1) {
                max3 = max2;
                max2 = max1;
                max1 = n;
            } else if (max2 == null || n > max2) {
                max3 = max2;
                max2 = n;
            } else if (max3 == null || n > max3) {
                max3 = n;
            }
        }
        return max3 == null ? max1 : max3;

=======

        long max1 = Long.MIN_VALUE;
        long max2 = Long.MIN_VALUE;
        long max3 = Long.MIN_VALUE;
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] > max1) {
                max3 = max2;
                max2 = max1;
                max1 = nums[i];
            } else if (nums[i] > max2 && nums[i] < max1) {
                max3 = max2;
                max2 = nums[i];
            } else if (nums[i] > max3 && nums[i] < max2) {
                max3 = nums[i];
            }
        }
        if (max3 == Long.MIN_VALUE) {
            return (int) max1;
        }
        return (int) max3;

=======

        long max1 = Long.MIN_VALUE;
        long max2 = Long.MIN_VALUE;
        long max3 = Long.MIN_VALUE;
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] > max1) {
                max3 = max2;
                max2 = max1;
                max1 = nums[i];
            } else if (nums[i] > max2 && nums[i] < max1) {
                max3 = max2;
                max2 = nums[i];
            } else if (nums[i] > max3 && nums[i] < max2) {
                max3 = nums[i];
            }
        }
        if (max3 == Long.MIN_VALUE) {
            return (int)max1;
        } else {
            return (int)max3;
        }

=======

        long first = Long.MIN_VALUE;
        long second = Long.MIN_VALUE;
        long third = Long.MIN_VALUE;
        for (int n : nums) {
            if (n > first) {
                third = second;
                second = first;
                first = n;
            } else if (n < first && n > second) {
                third = second;
                second = n;
            } else if (n < second && n > third) {
                third = n;
            }
        }
        return third == Long.MIN_VALUE ? (int) first : (int) third;

=======

        int max1 = Integer.MIN_VALUE;
        int max2 = Integer.MIN_VALUE;
        int max3 = Integer.MIN_VALUE;
        int count = 0;
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] == Integer.MIN_VALUE) {
                count++;
            }
            if (nums[i] > max1) {
                max3 = max2;
                max2 = max1;
                max1 = nums[i];
            } else if (nums[i] > max2 && nums[i] < max1) {
                max3 = max2;
                max2 = nums[i];
            } else if (nums[i] > max3 && nums[i] < max2) {
                max3 = nums[i];
            }
        }
        if (count >= 3) {
            return Integer.MIN_VALUE;
        }
        if (max3 == Integer.MIN_VALUE) {
            return max1;
        }
        return max3;

=======

        int max1 = Integer.MIN_VALUE;
        int max2 = Integer.MIN_VALUE;
        int max3 = Integer.MIN_VALUE;
        boolean flag = false;
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] > max1) {
                max3 = max2;
                max2 = max1;
                max1 = nums[i];
            } else if (nums[i] > max2 && nums[i] < max1) {
                max3 = max2;
                max2 = nums[i];
            } else if (nums[i] > max3 && nums[i] < max2) {
                max3 = nums[i];
            }
            if (nums[i] == Integer.MIN_VALUE) {
                flag = true;
            }
        }
        if (max3 == Integer.MIN_VALUE && flag == true) {
            return max1;
        } else if (max3 == Integer.MIN_VALUE) {
            return max2;
        } else {
            return max3;
        }

=======

        int max1 = Integer.MIN_VALUE;
        int max2 = Integer.MIN_VALUE;
        int max3 = Integer.MIN_VALUE;
        boolean flag = false;
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] == Integer.MIN_VALUE) {
                flag = true;
            }
            if (nums[i] > max1) {
                max3 = max2;
                max2 = max1;
                max1 = nums[i];
            } else if (nums[i] > max2 && nums[i] < max1) {
                max3 = max2;
                max2 = nums[i];
            } else if (nums[i] > max3 && nums[i] < max2) {
                max3 = nums[i];
            }
        }
        return max3 == Integer.MIN_VALUE && flag ? Integer.MIN_VALUE : max3;

=======

        long[] max = {Long.MIN_VALUE, Long.MIN_VALUE, Long.MIN_VALUE};
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] > max[0]) {
                max[2] = max[1];
                max[1] = max[0];
                max[0] = nums[i];
            } else if (nums[i] > max[1] && nums[i] < max[0]) {
                max[2] = max[1];
                max[1] = nums[i];
            } else if (nums[i] > max[2] && nums[i] < max[1]) {
                max[2] = nums[i];
            }
        }
        if (max[2] == Long.MIN_VALUE) {
            return (int) max[0];
        }
        return (int) max[2];

=======

        Arrays.sort(nums);
        int count = 1;
        int max = nums[nums.length-1];
        for(int i = nums.length-2; i >= 0; i--){
            if(nums[i] != nums[i+1]){
                count++;
                if(count == 3){
                    return nums[i];
                }
            }
        }
        return max;

=======

        // 1. sort the array
        // 2. find the third max
        // 3. if the third max does not exist, return the max
        int n = nums.length;
        Arrays.sort(nums);
        int i = n - 1;
        int max = nums[i];
        int count = 1;
        while (i > 0 && count < 3) {
            if (nums[i] != nums[i - 1]) {
                count++;
                max = nums[i - 1];
            }
            i--;
        }
        return count == 3 ? max : nums[n - 1];
