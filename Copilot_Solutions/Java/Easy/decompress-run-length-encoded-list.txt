Synthesizing 10/10 solutions

=======

        int length = 0;
        for (int i = 0; i < nums.length; i += 2) {
            length += nums[i];
        }
        int[] result = new int[length];
        int index = 0;
        for (int i = 0; i < nums.length; i += 2) {
            int freq = nums[i];
            int val = nums[i + 1];
            for (int j = 0; j < freq; j++) {
                result[index] = val;
                index++;
            }
        }
        return result;

=======

        int length = 0;
        for (int i = 0; i < nums.length; i += 2) {
            length += nums[i];
        }
        int[] result = new int[length];
        int index = 0;
        for (int i = 0; i < nums.length; i += 2) {
            int freq = nums[i];
            int val = nums[i + 1];
            for (int j = 0; j < freq; j++) {
                result[index++] = val;
            }
        }
        return result;

=======

        List<Integer> list = new ArrayList<>();
        for (int i = 0; i < nums.length; i += 2) {
            int freq = nums[i];
            int val = nums[i + 1];
            for (int j = 0; j < freq; j++) {
                list.add(val);
            }
        }
        return list.stream().mapToInt(i -> i).toArray();

=======

        int len = 0;
        for (int i = 0; i < nums.length; i += 2) {
            len += nums[i];
        }
        int[] res = new int[len];
        int idx = 0;
        for (int i = 0; i < nums.length; i += 2) {
            int freq = nums[i];
            int val = nums[i+1];
            while (freq-- > 0) {
                res[idx++] = val;
            }
        }
        return res;

=======

        int len = 0;
        for (int i = 0; i < nums.length; i += 2) {
            len += nums[i];
        }
        int[] res = new int[len];
        for (int i = 0, j = 0; i < nums.length; i += 2) {
            int freq = nums[i];
            int val = nums[i + 1];
            for (int k = 0; k < freq; k++) {
                res[j++] = val;
            }
        }
        return res;

=======

        int len = 0;
        for (int i = 0; i < nums.length; i += 2) {
            len += nums[i];
        }
        int[] res = new int[len];
        int j = 0;
        for (int i = 0; i < nums.length; i += 2) {
            Arrays.fill(res, j, j + nums[i], nums[i + 1]);
            j += nums[i];
        }
        return res;

=======

        int count = 0;
        for (int i = 0; i < nums.length; i += 2) {
            count += nums[i];
        }
        int[] result = new int[count];
        for (int i = 0, j = 0; i < nums.length; i += 2) {
            while (nums[i]-- > 0) {
                result[j++] = nums[i + 1];
            }
        }
        return result;

=======

        int n = nums.length;
        int len = 0;
        for (int i = 0; i < n; i += 2) {
            len += nums[i];
        }
        int[] res = new int[len];
        int idx = 0;
        for (int i = 0; i < n; i += 2) {
            int freq = nums[i];
            int val = nums[i + 1];
            while (freq-- > 0) {
                res[idx++] = val;
            }
        }
        return res;

=======

        int n = nums.length / 2;
        int[] result = new int[n];
        int k = 0;
        for (int i = 0; i < n; i++) {
            int freq = nums[2 * i];
            int val = nums[2 * i + 1];
            for (int j = 0; j < freq; j++) {
                result[k++] = val;
            }
        }
        return result;

=======

        int l = nums.length;
        int freq = 0, val = 0;
        int total = 0;
        for (int i = 0; i < l; i += 2) {
            freq = nums[i];
            val = nums[i + 1];
            total += freq;
        }
        int[] result = new int[total];
        int index = 0;
        for (int i = 0; i < l; i += 2) {
            freq = nums[i];
            val = nums[i + 1];
            while (freq > 0) {
                result[index++] = val;
                freq--;
            }
        }
        return result;
