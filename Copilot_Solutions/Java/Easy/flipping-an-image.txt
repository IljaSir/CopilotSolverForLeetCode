Synthesizing 10/10 solutions

=======

        int n = image.length;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < (n + 1) / 2; j++) {
                int temp = image[i][j] ^ 1;
                image[i][j] = image[i][n - 1 - j] ^ 1;
                image[i][n - 1 - j] = temp;
            }
        }
        return image;

=======

        int n = image.length;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n / 2; j++) {
                int temp = image[i][j];
                image[i][j] = image[i][n - 1 - j];
                image[i][n - 1 - j] = temp;
            }
        }
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                image[i][j] ^= 1;
            }
        }
        return image;

=======

        int m = image.length;
        int n = image[0].length;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n / 2; j++) {
                int temp = image[i][j];
                image[i][j] = image[i][n - j - 1];
                image[i][n - j - 1] = temp;
            }
        }
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                image[i][j] = image[i][j] == 1 ? 0 : 1;
            }
        }
        return image;

=======

        int n = image.length;
        int[][] result = new int[n][n];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                result[i][j] = image[i][n - j - 1];
            }
        }
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                result[i][j] = result[i][j] == 0 ? 1 : 0;
            }
        }
        return result;

=======

        int n = image.length;
        for (int i = 0; i < n; i++) {
            int l = 0;
            int r = n - 1;
            while (l < r) {
                int temp = image[i][l];
                image[i][l] = image[i][r];
                image[i][r] = temp;
                l++;
                r--;
            }
        }
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                image[i][j] = image[i][j] == 0 ? 1 : 0;
            }
        }
        return image;

=======

        int n = image.length;
        for (int i = 0; i < n; i++) {
            int left = 0, right = n - 1;
            while (left < right) {
                int temp = image[i][left];
                image[i][left] = image[i][right];
                image[i][right] = temp;
                left++;
                right--;
            }
        }
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                image[i][j] = (image[i][j] == 0) ? 1 : 0;
            }
        }
        return image;

=======

        int n = image.length;
        for(int i = 0; i < n; i++) {
            for(int j = 0; j < n/2; j++) {
                int temp = image[i][j];
                image[i][j] = image[i][n-1-j];
                image[i][n-1-j] = temp;
            }
        }
        for(int i = 0; i < n; i++) {
            for(int j = 0; j < n; j++) {
                if(image[i][j] == 1) {
                    image[i][j] = 0;
                } else {
                    image[i][j] = 1;
                }
            }
        }
        return image;

=======

        int n = image.length;
        for(int i = 0; i < n; i++){
            int left = 0;
            int right = n - 1;
            while(left < right){
                int temp = image[i][left];
                image[i][left] = image[i][right];
                image[i][right] = temp;
                left++;
                right--;
            }
        }
        for(int i = 0; i < n; i++){
            for(int j = 0; j < n; j++){
                image[i][j] = image[i][j] == 0 ? 1 : 0;
            }
        }
        return image;

=======

        int n = image.length;
        int m = image[0].length;
        for(int i=0;i<n;i++){
            for(int j=0;j<m/2;j++){
                int t = image[i][j];
                image[i][j] = image[i][m-j-1];
                image[i][m-j-1] = t;
            }
            for(int j=0;j<m;j++){
                image[i][j] = image[i][j]^1;
            }
        }
        return image;

=======

        int n = image.length;
        for(int i=0; i<n; i++){
            int l = 0;
            int r = n-1;
            while(l<=r){
                int temp = image[i][l];
                image[i][l] = image[i][r];
                image[i][r] = temp;
                l++;
                r--;
            }
        }
        for(int i=0; i<n; i++){
            for(int j=0; j<n; j++){
                if(image[i][j]==0){
                    image[i][j] = 1;
                }
                else{
                    image[i][j] = 0;
                }
            }
        }
        return image;
