Synthesizing 10/10 solutions

=======

        int max = 0;
        int ans = 0;
        int count = 0;
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] == key) {
                count = 0;
                for (int j = i + 1; j < nums.length; j++) {
                    if (nums[j] == nums[i]) {
                        count++;
                    } else {
                        break;
                    }
                }
                if (count > max) {
                    max = count;
                    ans = nums[i];
                }
            }
        }
        return ans;

=======

        int max = 0;
        int maxNum = 0;
        int count = 0;
        for (int i = 0; i < nums.length - 1; i++) {
            if (nums[i] == key) {
                if (nums[i + 1] == nums[i]) {
                    count++;
                } else {
                    if (count > max) {
                        maxNum = nums[i + 1];
                        max = count;
                    }
                    count = 0;
                }
            }
        }
        if (count > max) {
            maxNum = nums[nums.length - 1];
        }
        return maxNum;

=======

        int max = 0;
        int maxNum = 0;
        int count = 0;
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] == key) {
                count = 0;
                for (int j = i + 1; j < nums.length; j++) {
                    if (nums[j] == nums[i]) {
                        count++;
                    } else {
                        break;
                    }
                }
                if (count > max) {
                    max = count;
                    maxNum = nums[i];
                }
            }
        }
        return maxNum;

=======

        int count = 0;
        int maxCount = 0;
        int maxNum = 0;
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] == key) {
                count = 0;
                for (int j = i + 1; j < nums.length; j++) {
                    if (nums[j] == nums[i]) {
                        count++;
                        if (count > maxCount) {
                            maxCount = count;
                            maxNum = nums[j];
                        }
                    }
                }
            }
        }
        return maxNum;

=======

        int max = 0;
        int maxCount = 0;
        Map<Integer, Integer> map = new HashMap<>();
        for (int i = 1; i < nums.length; i++) {
            if (nums[i - 1] == key) {
                map.put(nums[i], map.getOrDefault(nums[i], 0) + 1);
                if (map.get(nums[i]) > maxCount) {
                    maxCount = map.get(nums[i]);
                    max = nums[i];
                }
            }
        }
        return max;

=======

        int max = 0;
        int maxIndex = 0;
        int count = 0;
        for (int i = 0; i < nums.length - 1; i++) {
            if (nums[i] == key) {
                count = 0;
                for (int j = i + 1; j < nums.length; j++) {
                    if (nums[j] == nums[i + 1]) {
                        count++;
                    }
                }
                if (count > max) {
                    max = count;
                    maxIndex = i + 1;
                }
            }
        }
        return nums[maxIndex];

=======

        int max = 0;
        int maxKey = 0;
        int count = 0;
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] == key) {
                count++;
            } else if (count > max) {
                max = count;
                maxKey = nums[i];
                count = 0;
            }
        }
        return maxKey;

=======

        int maxCount = -1;
        int maxTarget = -1;
        int count = 0;
        int target = -1;
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] == key) {
                count = 0;
                target = -1;
                for (int j = i + 1; j < nums.length; j++) {
                    if (nums[j] != key) {
                        if (target == -1) {
                            target = nums[j];
                        }
                        if (nums[j] == target) {
                            count++;
                        }
                    } else {
                        break;
                    }
                }
                if (count > maxCount) {
                    maxCount = count;
                    maxTarget = target;
                }
            }
        }
        return maxTarget;

=======

        int max = 0;
        int maxVal = 0;
        Map<Integer, Integer> map = new HashMap<Integer, Integer>();
        for(int i = 0; i < nums.length; i++) {
            if(nums[i] == key && i + 1 < nums.length) {
                int val = nums[i + 1];
                map.put(val, map.getOrDefault(val, 0) + 1);
                if(map.get(val) > max) {
                    max = map.get(val);
                    maxVal = val;
                }
            }
        }
        return maxVal;

=======

        int max = 0;
        int maxEle = -1;
        for (int i = 0; i < nums.length - 1; i++) {
            if (nums[i] == key) {
                int count = 0;
                int j = i + 1;
                while (j < nums.length && nums[j] == nums[i + 1]) {
                    count++;
                    j++;
                }
                if (count > max) {
                    max = count;
                    maxEle = nums[i + 1];
                }
            }
        }
        return maxEle;
