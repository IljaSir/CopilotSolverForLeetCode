Synthesizing 10/10 solutions

=======

        List<Integer> result = new ArrayList<>();
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] == target) {
                result.add(i);
            }
        }
        Collections.sort(result);
        return result;

=======

        List<Integer> list = new ArrayList<>();
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] == target) {
                list.add(i);
            }
        }
        Collections.sort(list);
        return list;

=======

        int[] sorted = Arrays.copyOf(nums, nums.length);
        Arrays.sort(sorted);
        List<Integer> result = new ArrayList<>();
        for (int i = 0; i < sorted.length; i++) {
            if (sorted[i] == target) {
                for (int j = 0; j < nums.length; j++) {
                    if (nums[j] == target) {
                        result.add(j);
                        nums[j] = 0;
                        break;
                    }
                }
            }
        }
        return result;

=======

        List<Integer> result = new ArrayList<>();
        int[] sorted = Arrays.copyOf(nums, nums.length);
        Arrays.sort(sorted);
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] == target) {
                result.add(Arrays.binarySearch(sorted, target));
            }
        }
        return result;

=======

        List<Integer> res = new ArrayList<>();
        int[] copy = Arrays.copyOf(nums, nums.length);
        Arrays.sort(copy);
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] == target) {
                res.add(Arrays.binarySearch(copy, target));
            }
        }
        return res;

=======

        List<Integer> list = new ArrayList<>();
        int[] copy = nums.clone();
        Arrays.sort(copy);
        for (int i = 0; i < copy.length; i++) {
            if (copy[i] == target) {
                list.add(Arrays.binarySearch(nums, target));
            }
        }
        return list;

=======

        int[] arr = Arrays.copyOf(nums, nums.length);
        Arrays.sort(arr);
        List<Integer> list = new ArrayList<Integer>();
        for (int i = 0; i < arr.length; i++) {
            if (arr[i] == target) {
                list.add(i);
            }
        }
        return list;

=======

        List<Integer> list = new ArrayList<Integer>();
        int[] sorted = nums.clone();
        Arrays.sort(sorted);
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] == target) {
                list.add(Arrays.binarySearch(sorted, target));
            }
        }
        return list;

=======

        List<Integer> indices = new ArrayList<>();
        int[] temp = Arrays.copyOf(nums, nums.length);
        Arrays.sort(temp);
        for(int i = 0; i < temp.length; i++){
            if(temp[i] == target){
                indices.add(i);
            }
        }
        return indices;

=======

        List<Integer> result = new ArrayList<>();
        int len = nums.length;
        int[] sorted = new int[len];
        System.arraycopy(nums, 0, sorted, 0, len);
        Arrays.sort(sorted);
        int left = 0, right = len - 1;
        while (left <= right) {
            int mid = (left + right) / 2;
            if (sorted[mid] == target) {
                int i = mid, j = mid;
                while (i >= 0 && sorted[i] == target) {
                    i--;
                }
                while (j < len && sorted[j] == target) {
                    j++;
                }
                for (int k = i + 1; k < j; k++) {
                    for (int l = 0; l < len; l++) {
                        if (nums[l] == sorted[k]) {
                            result.add(l);
                            break;
                        }
                    }
                }
                break;
            } else if (sorted[mid] < target) {
                left = mid + 1;
            } else {
                right = mid - 1;
            }
        }
        return result;
