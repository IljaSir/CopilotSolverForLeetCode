Synthesizing 10/10 solutions

=======

        int count = 0;
        for (int i = left; i <= right; i++) {
            if (isPrime(Integer.bitCount(i))) {
                count++;
            }
        }
        return count;
    }

    private boolean isPrime(int num) {
        if (num == 1) {
            return false;
        }
        if (num == 2) {
            return true;
        }
        for (int i = 2; i <= Math.sqrt(num); i++) {
            if (num % i == 0) {
                return false;
            }
        }
        return true;

=======

        int count = 0;
        for (int i = left; i <= right; i++) {
            if (isPrime(Integer.bitCount(i))) {
                count++;
            }
        }
        return count;
    }
    
    private boolean isPrime(int n) {
        if (n == 1) {
            return false;
        }
        for (int i = 2; i * i <= n; i++) {
            if (n % i == 0) {
                return false;
            }
        }
        return true;

=======

        int[] primes = new int[]{2, 3, 5, 7, 11, 13, 17, 19};
        int count = 0;
        for (int i = left; i <= right; i++) {
            int bits = Integer.bitCount(i);
            for (int p : primes) {
                if (p == bits) {
                    count++;
                    break;
                }
            }
        }
        return count;

=======

        int count = 0;
        for (int i = left; i <= right; i++) {
            if (isPrime(Integer.bitCount(i))) {
                count++;
            }
        }
        return count;
    }
    private boolean isPrime(int n) {
        if (n == 1) {
            return false;
        }
        if (n == 2) {
            return true;
        }
        if (n % 2 == 0) {
            return false;
        }
        for (int i = 3; i <= Math.sqrt(n); i += 2) {
            if (n % i == 0) {
                return false;
            }
        }
        return true;

=======

        int count = 0;
        for (int i = left; i <= right; i++) {
            int bitCount = Integer.bitCount(i);
            if (isPrime(bitCount)) {
                count++;
            }
        }
        return count;
    }

    private boolean isPrime(int num) {
        if (num == 1) {
            return false;
        }
        if (num == 2) {
            return true;
        }
        for (int i = 2; i <= Math.sqrt(num); i++) {
            if (num % i == 0) {
                return false;
            }
        }
        return true;

=======

        int[] primes = new int[] {2, 3, 5, 7, 11, 13, 17, 19};
        int count = 0;
        for (int i = left; i <= right; i++) {
            int num = i;
            int setBits = 0;
            while (num > 0) {
                if ((num & 1) == 1) {
                    setBits++;
                }
                num >>= 1;
            }
            for (int prime: primes) {
                if (setBits == prime) {
                    count++;
                    break;
                }
            }
        }
        return count;

=======

        int[] prime = {2, 3, 5, 7, 11, 13, 17, 19};
        int count = 0;
        for (int i = left; i <= right; i++) {
            int setBit = 0;
            for (int j = i; j > 0; j >>= 1) {
                setBit += j & 1;
            }
            for (int p : prime) {
                if (setBit == p) {
                    count++;
                }
            }
        }
        return count;

=======

        int count = 0;
        for (int i = left; i <= right; i++) {
            count += isPrime(Integer.bitCount(i)) ? 1 : 0;
        }
        return count;
    }

    private boolean isPrime(int n) {
        if (n == 2 || n == 3 || n == 5 || n == 7 || n == 11 || n == 13 || n == 17 || n == 19) {
            return true;
        }
        return false;

=======

        int[] primes = {2,3,5,7,11,13,17,19};
        int count = 0;
        for (int i = left; i <= right; i++) {
            int bits = 0;
            int n = i;
            while (n > 0) {
                bits += n & 1;
                n >>= 1;
            }
            for (int p : primes) {
                if (bits == p) {
                    count++;
                    break;
                }
            }
        }
        return count;

=======

        int count = 0;
        for(int i = left; i <= right; i++) {
            if(isPrime(countBits(i)))
                count++;
        }
        return count;
    }
    private int countBits(int n) {
        int count = 0;
        while(n > 0) {
            if((n & 1) == 1)
                count++;
            n >>= 1;
        }
        return count;
    }
    private boolean isPrime(int n) {
        if(n == 1)
            return false;
        if(n == 2)
            return true;
        for(int i = 2; i <= Math.sqrt(n); i++) {
            if(n % i == 0)
                return false;
        }
        return true;
