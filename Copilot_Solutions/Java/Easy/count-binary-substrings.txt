Synthesizing 10/10 solutions

=======

        int n = s.length();
        int[] groups = new int[n];
        int t = 0;
        groups[0] = 1;
        for (int i = 1; i < n; ++i) {
            if (s.charAt(i) != s.charAt(i - 1)) {
                groups[++t] = 1;
            } else {
                groups[t]++;
            }
        }
        int ans = 0;
        for (int i = 1; i <= t; ++i) {
            ans += Math.min(groups[i], groups[i - 1]);
        }
        return ans;

=======

        int n = s.length();
        int[] groups = new int[n];
        int t = 0;
        groups[0] = 1;
        for (int i = 1; i < n; ++i) {
            if (s.charAt(i - 1) != s.charAt(i)) {
                groups[++t] = 1;
            } else {
                groups[t]++;
            }
        }
        int ans = 0;
        for (int i = 1; i <= t; ++i) {
            ans += Math.min(groups[i - 1], groups[i]);
        }
        return ans;

=======

        int res = 0;
        int prev = 0;
        int cur = 1;
        for (int i = 1; i < s.length(); i++) {
            if (s.charAt(i) == s.charAt(i - 1)) {
                cur++;
            } else {
                prev = cur;
                cur = 1;
            }
            if (prev >= cur) {
                res++;
            }
        }
        return res;

=======

        int result = 0;
        int pre = 0;
        int cur = 1;
        for (int i = 1; i < s.length(); i++) {
            if (s.charAt(i) == s.charAt(i - 1)) {
                cur++;
            } else {
                pre = cur;
                cur = 1;
            }
            if (pre >= cur) {
                result++;
            }
        }
        return result;

=======

        int prev = 0, cur = 1, res = 0;
        for (int i = 1; i < s.length(); i++) {
            if (s.charAt(i - 1) != s.charAt(i)) {
                res += Math.min(prev, cur);
                prev = cur;
                cur = 1;
            } else {
                cur++;
            }
        }
        return res + Math.min(prev, cur);

=======

        int n = s.length();
        int[] count = new int[n];
        int t = 0;
        for (int i = 0; i < n; ++i) {
            if (i == 0 || s.charAt(i) != s.charAt(i - 1)) {
                t = 0;
            }
            count[t]++;
            t++;
        }
        int ans = 0;
        for (int i = 1; i < n; ++i) {
            ans += Math.min(count[i], count[i - 1]);
        }
        return ans;

=======

        int count = 0;
        int cur = 0;
        int pre = 0;
        for (int i = 0; i < s.length(); i++) {
            cur++;
            if (i == s.length() - 1 || s.charAt(i) != s.charAt(i + 1)) {
                count += Math.min(cur, pre);
                pre = cur;
                cur = 0;
            }
        }
        return count;

=======

        int[] count = new int[2];
        int prev = 0;
        int res = 0;
        for (int i = 0; i < s.length(); i++) {
            int c = s.charAt(i) - '0';
            count[c]++;
            if (prev != c) {
                prev = c;
                count[prev ^ 1] = 0;
            }
            if (count[0] == count[1]) {
                res++;
            }
        }
        return res;

=======

        int n = s.length();
        int[] count = new int[n];
        int cur = 0;
        int res = 0;
        for (int i = 0; i < n; i++) {
            if (i > 0 && s.charAt(i) != s.charAt(i - 1)) {
                res += Math.min(cur, count[i - 1]);
                cur = 0;
            }
            cur++;
            count[i] = cur;
        }
        return res + Math.min(cur, count[n - 1]);

=======

        int[] count = new int[2];
        int result = 0;
        int prev = -1;
        for (char c : s.toCharArray()) {
            int idx = c - '0';
            if (idx != prev) {
                count[idx] = 0;
                prev = idx;
            }
            count[idx]++;
            if (count[0] == count[1]) {
                result++;
            }
        }
        return result;
