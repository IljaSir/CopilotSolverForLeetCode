Synthesizing 7/10 solutions

=======

        int[] rankCount = new int[14];
        int[] suitCount = new int[4];
        for (int i = 0; i < 5; i++) {
            rankCount[ranks[i]]++;
            suitCount[suits[i] - 'a']++;
        }
        boolean flush = false;
        for (int i = 0; i < 4; i++) {
            if (suitCount[i] == 5) {
                flush = true;
                break;
            }
        }
        boolean threeOfAKind = false;
        boolean pair = false;
        for (int i = 1; i <= 13; i++) {
            if (rankCount[i] == 3) {
                threeOfAKind = true;
            }
            if (rankCount[i] == 2) {
                pair = true;
            }
        }
        if (flush) {
            return "Flush";
        }
        if (threeOfAKind) {
            return "Three of a Kind";
        }
        if (pair) {
            return "Pair";
        }
        return "High Card";

=======

        Map<Character, Integer> suitCount = new HashMap<>();
        for (char suit : suits) {
            suitCount.put(suit, suitCount.getOrDefault(suit, 0) + 1);
        }
        if (suitCount.values().stream().anyMatch(count -> count >= 5)) {
            return "Flush";
        }
        
        Map<Integer, Integer> rankCount = new HashMap<>();
        for (int rank : ranks) {
            rankCount.put(rank, rankCount.getOrDefault(rank, 0) + 1);
        }
        if (rankCount.values().stream().anyMatch(count -> count >= 3)) {
            return "Three of a Kind";
        }
        if (rankCount.values().stream().anyMatch(count -> count >= 2)) {
            return "Pair";
        }
        return "High Card";

=======

        int[] num = new int[14];
        int[] suit = new int[4];
        for (int i = 0; i < ranks.length; i++) {
            num[ranks[i]]++;
            suit[suits[i] - 'a']++;
        }
        int maxNum = 0;
        for (int i = 0; i < num.length; i++) {
            maxNum = Math.max(maxNum, num[i]);
        }
        int maxSuit = 0;
        for (int i = 0; i < suit.length; i++) {
            maxSuit = Math.max(maxSuit, suit[i]);
        }
        if (maxSuit == 5) {
            return "Flush";
        } else if (maxNum == 3) {
            return "Three of a Kind";
        } else if (maxNum == 2) {
            return "Pair";
        } else {
            return "High Card";
        }

=======

        int[] count = new int[14];
        for (int i : ranks) {
            count[i]++;
        }
        int max = 0;
        for (int i : count) {
            max = Math.max(max, i);
        }
        if (max == 4) {
            return "Four of a Kind";
        } else if (max == 3) {
            for (int i : count) {
                if (i == 2) {
                    return "Full House";
                }
            }
            return "Three of a Kind";
        } else if (max == 2) {
            int count2 = 0;
            for (int i : count) {
                if (i == 2) {
                    count2++;
                }
            }
            if (count2 == 2) {
                return "Two Pairs";
            }
            return "Pair";
        }
        Arrays.sort(ranks);
        if (ranks[0] == 1) {
            ranks[0] = 14;
        }
        for (int i = 0; i < 4; i++) {
            if (ranks[i] + 1 != ranks[i + 1]) {
                break;
            }
            if (i == 3) {
                return "Straight";
            }
        }
        for (int i = 0; i < 4; i++) {
            if (suits[i] != suits[i + 1]) {
                break;
            }
            if (i == 3) {
                return "Flush";
            }
        }
        return "High Card";

=======

        Map<Integer, Integer> rankCount = new HashMap<>();
        for (int rank : ranks) {
            rankCount.put(rank, rankCount.getOrDefault(rank, 0) + 1);
        }
        List<Integer> rankList = new ArrayList<>(rankCount.keySet());
        Collections.sort(rankList, Collections.reverseOrder());
        int maxCount = 0;
        for (int rank : rankList) {
            maxCount = Math.max(maxCount, rankCount.get(rank));
        }
        if (maxCount == 5) {
            return "Flush";
        } else if (maxCount == 3) {
            return "Three of a Kind";
        } else if (maxCount == 2) {
            return "Pair";
        } else {
            return "High Card";
        }

=======

        int[] count = new int[13];
        for (int r : ranks) {
            count[r - 1]++;
        }
        int[] suit = new int[4];
        for (char s : suits) {
            suit[s - 'a']++;
        }
        // flush
        int maxSuit = 0;
        for (int s : suit) {
            maxSuit = Math.max(maxSuit, s);
        }
        if (maxSuit >= 5) {
            return "Flush";
        }
        // three of a kind
        for (int c : count) {
            if (c >= 3) {
                return "Three of a Kind";
            }
        }
        // pair
        int pair = 0;
        for (int c : count) {
            if (c >= 2) {
                pair++;
            }
        }
        if (pair >= 2) {
            return "Two Pairs";
        }
        if (pair == 1) {
            return "Pair";
        }
        return "High Card";

=======

        int[] count = new int[13];
        for (int i : ranks) {
            count[i-1]++;
        }
        int[] suit = new int[4];
        for (char c : suits) {
            if (c == 'a') {
                suit[0]++;
            } else if (c == 'b') {
                suit[1]++;
            } else if (c == 'c') {
                suit[2]++;
            } else if (c == 'd') {
                suit[3]++;
            }
        }
        boolean flush = false;
        for (int i : suit) {
            if (i == 5) {
                flush = true;
                break;
            }
        }
        boolean three = false;
        boolean pair = false;
        for (int i : count) {
            if (i == 3) {
                three = true;
            }
            if (i == 2) {
                pair = true;
            }
        }
        if (flush) {
            return "Flush";
        } else if (three) {
            return "Three of a Kind";
        } else if (pair) {
            return "Pair";
        } else {
            return "High Card";
        }
