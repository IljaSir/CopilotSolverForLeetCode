Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int n = cost.length;
        int[] dp = new int[n];
        dp[0] = cost[0];
        dp[1] = cost[1];
        for (int i = 2; i < n; i++) {
            dp[i] = cost[i] + Math.min(dp[i - 1], dp[i - 2]);
        }
        return Math.min(dp[n - 1], dp[n - 2]);

=======

        Arrays.sort(cost);
        int sum = 0;
        for (int i = 0; i < cost.length; i++) {
            if (i % 3 != 2) {
                sum += cost[i];
            }
        }
        return sum;

=======

        Arrays.sort(cost);
        int sum = 0;
        for (int i = cost.length - 1; i >= 0; i--) {
            if (i % 3 != 2) {
                sum += cost[i];
            }
        }
        return sum;

=======

        Arrays.sort(cost);
        int sum = 0;
        for (int i = 0; i < cost.length; i++) {
            sum += cost[i];
            i += 2;
        }
        return sum;

=======

        Arrays.sort(cost);
        int n = cost.length;
        int ans = 0;
        for (int i = n - 1; i >= 0; i -= 3) {
            ans += cost[i];
            if (i > 0) {
                ans += cost[i - 1];
            }
        }
        return ans;

=======

        int n = cost.length;
        if (n == 1) {
            return cost[0];
        }
        if (n == 2) {
            return cost[0] + cost[1];
        }
        int sum = 0;
        int[] dp = new int[n];
        dp[0] = cost[0];
        dp[1] = cost[1];
        for (int i = 2; i < n; i++) {
            dp[i] = cost[i] + Math.min(dp[i - 1], dp[i - 2]);
        }
        return Math.min(dp[n - 1], dp[n - 2]);

=======

        Arrays.sort(cost);
        int sum = 0;
        int n = cost.length;
        for (int i = n - 1; i >= 0; i -= 3) {
            sum += cost[i];
        }
        return sum;

=======

        Arrays.sort(cost);
        int n = cost.length;
        int sum = 0;
        for(int i = n - 1; i >= 0; i = i - 3){
            sum += cost[i];
        }
        return sum;

=======

        if (cost.length < 2) {
            return 0;
        }
        Arrays.sort(cost);
        int i = cost.length - 1;
        int sum = 0;
        while (i >= 0) {
            sum += cost[i];
            i -= 2;
        }
        return sum;
