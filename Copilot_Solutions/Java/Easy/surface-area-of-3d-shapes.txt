Synthesizing 10/10 solutions

=======

        int n = grid.length;
        int ans = 0;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] > 0) {
                    ans += 2;
                    ans += Math.max(0, grid[i][j] - (i > 0 ? grid[i - 1][j] : 0));
                    ans += Math.max(0, grid[i][j] - (i < n - 1 ? grid[i + 1][j] : 0));
                    ans += Math.max(0, grid[i][j] - (j > 0 ? grid[i][j - 1] : 0));
                    ans += Math.max(0, grid[i][j] - (j < n - 1 ? grid[i][j + 1] : 0));
                }
            }
        }
        return ans;

=======

        int n = grid.length;
        int ans = 0;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] > 0) {
                    ans += 2;
                }
                ans += Math.max(0, grid[i][j] - (i > 0 ? grid[i - 1][j] : 0));
                ans += Math.max(0, grid[i][j] - (i < n - 1 ? grid[i + 1][j] : 0));
                ans += Math.max(0, grid[i][j] - (j > 0 ? grid[i][j - 1] : 0));
                ans += Math.max(0, grid[i][j] - (j < n - 1 ? grid[i][j + 1] : 0));
            }
        }
        return ans;

=======

        int n = grid.length;
        int area = 0;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] > 0) {
                    area += 2 + 4 * grid[i][j];
                    if (i > 0) {
                        area -= 2 * Math.min(grid[i][j], grid[i - 1][j]);
                    }
                    if (j > 0) {
                        area -= 2 * Math.min(grid[i][j], grid[i][j - 1]);
                    }
                }
            }
        }
        return area;

=======

        int n = grid.length;
        int res = 0;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] > 0) {
                    res += 2;
                    res += grid[i][j] * 4;
                    if (i > 0) {
                        res -= Math.min(grid[i][j], grid[i - 1][j]) * 2;
                    }
                    if (j > 0) {
                        res -= Math.min(grid[i][j], grid[i][j - 1]) * 2;
                    }
                }
            }
        }
        return res;

=======

        int area = 0;
        int n = grid.length;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] > 0) {
                    area += 2;
                }
                if (i == 0) {
                    area += grid[i][j];
                } else {
                    area += Math.max(grid[i][j] - grid[i - 1][j], 0);
                }
                if (i == n - 1) {
                    area += grid[i][j];
                } else {
                    area += Math.max(grid[i][j] - grid[i + 1][j], 0);
                }
                if (j == 0) {
                    area += grid[i][j];
                } else {
                    area += Math.max(grid[i][j] - grid[i][j - 1], 0);
                }
                if (j == n - 1) {
                    area += grid[i][j];
                } else {
                    area += Math.max(grid[i][j] - grid[i][j + 1], 0);
                }
            }
        }
        return area;

=======

        int n = grid.length;
        int surfaceArea = 0;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                int v = grid[i][j];
                if (v > 0) {
                    surfaceArea += v * 4 + 2;
                    if (i > 0) surfaceArea -= Math.min(grid[i - 1][j], v) * 2;
                    if (j > 0) surfaceArea -= Math.min(grid[i][j - 1], v) * 2;
                }
            }
        }
        return surfaceArea;

=======

        int n = grid.length;
        int result = 0;
        for(int i = 0; i < n; i++){
            for(int j = 0; j < n; j++){
                if(grid[i][j] > 0){
                    result += 2 + 4 * grid[i][j];
                    if(i > 0){
                        result -= 2 * Math.min(grid[i][j], grid[i - 1][j]);
                    }
                    if(j > 0){
                        result -= 2 * Math.min(grid[i][j], grid[i][j - 1]);
                    }
                }
            }
        }
        return result;

=======

        int n = grid.length;
        int totalArea = 0;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                int height = grid[i][j];
                int left = j == 0 ? 0 : grid[i][j - 1];
                int right = j == n - 1 ? 0 : grid[i][j + 1];
                int top = i == 0 ? 0 : grid[i - 1][j];
                int bottom = i == n - 1 ? 0 : grid[i + 1][j];
                int area = height * 4 + 2;
                area = area - Math.min(height, left) * 2;
                area = area - Math.min(height, right) * 2;
                area = area - Math.min(height, top) * 2;
                area = area - Math.min(height, bottom) * 2;
                totalArea += area;
            }
        }
        return totalArea;

=======

        int n = grid.length;
        int surface = 0;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                int v = grid[i][j];
                if (v > 0) {
                    surface += 2 + 4 * v;
                    if (i > 0) {
                        surface -= Math.min(v, grid[i - 1][j]) * 2;
                    }
                    if (j > 0) {
                        surface -= Math.min(v, grid[i][j - 1]) * 2;
                    }
                }
            }
        }
        return surface;

=======

        int n = grid.length;
        int total = 0;
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                int v = grid[i][j];
                if(v==0) continue;
                total+=4*v+2;
                if(j-1>=0) total-=2*Math.min(grid[i][j-1],v);
                if(i-1>=0) total-=2*Math.min(grid[i-1][j],v);
            }
        }
        return total;
