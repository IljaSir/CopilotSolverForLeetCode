Synthesizing 10/10 solutions

=======

        Stack<Integer> stack = new Stack<>();
        for (String op : operations) {
            if ("+".equals(op)) {
                int top = stack.pop();
                int newTop = top + stack.peek();
                stack.push(top);
                stack.push(newTop);
            } else if ("D".equals(op)) {
                stack.push(stack.peek() * 2);
            } else if ("C".equals(op)) {
                stack.pop();
            } else {
                stack.push(Integer.valueOf(op));
            }
        }
        int ans = 0;
        for (int score : stack) {
            ans += score;
        }
        return ans;

=======

        Stack<Integer> stack = new Stack<>();
        for(String op : operations) {
            if(op.equals("C")) {
                stack.pop();
            } else if(op.equals("D")) {
                stack.push(stack.peek() * 2);
            } else if(op.equals("+")) {
                int a = stack.pop();
                int b = stack.peek();
                stack.push(a);
                stack.push(a + b);
            } else {
                stack.push(Integer.parseInt(op));
            }
        }
        int sum = 0;
        for(int i : stack) {
            sum += i;
        }
        return sum;

=======

        Stack<Integer> stack = new Stack<>();
        for(String op : operations){
            if(op.equals("+")){
                int top = stack.pop();
                int newTop = top + stack.peek();
                stack.push(top);
                stack.push(newTop);
            } else if(op.equals("C")){
                stack.pop();
            } else if(op.equals("D")){
                stack.push(stack.peek() * 2);
            } else {
                stack.push(Integer.valueOf(op));
            }
        }
        int ans = 0;
        for(int score : stack){
            ans += score;
        }
        return ans;

=======

        Stack<Integer> stack = new Stack<Integer>();
        int sum = 0;
        for(int i = 0; i < operations.length; i++){
            if(operations[i].equals("C")){
                sum -= stack.pop();
            }else if(operations[i].equals("D")){
                int temp = stack.peek() * 2;
                sum += temp;
                stack.push(temp);
            }else if(operations[i].equals("+")){
                int temp = stack.pop();
                int temp2 = stack.peek() + temp;
                sum += temp2;
                stack.push(temp);
                stack.push(temp2);
            }else{
                int temp = Integer.parseInt(operations[i]);
                sum += temp;
                stack.push(temp);
            }
        }
        return sum;

=======

        int[] points = new int[operations.length];
        int index = 0;
        for (String op : operations) {
            switch (op) {
                case "C":
                    index--;
                    break;
                case "D":
                    points[index] = points[index-1] * 2;
                    index++;
                    break;
                case "+":
                    points[index] = points[index-1] + points[index-2];
                    index++;
                    break;
                default:
                    points[index] = Integer.parseInt(op);
                    index++;
                    break;
            }
        }

        int sum = 0;
        for (int i = 0; i < index; i++) {
            sum += points[i];
        }
        return sum;

=======

        int sum = 0;
        int[] scores = new int[operations.length];
        int index = 0;
        for (int i = 0; i < operations.length; i++) {
            String op = operations[i];
            if (op.equals("C")) {
                sum -= scores[index - 1];
                index--;
            } else if (op.equals("D")) {
                sum += scores[index - 1] * 2;
                scores[index] = scores[index - 1] * 2;
                index++;
            } else if (op.equals("+")) {
                sum += scores[index - 1] + scores[index - 2];
                scores[index] = scores[index - 1] + scores[index - 2];
                index++;
            } else {
                int score = Integer.parseInt(op);
                sum += score;
                scores[index] = score;
                index++;
            }
        }
        return sum;

=======

        int[] scores = new int[operations.length];
        int index = 0;
        int sum = 0;
        for (String operation : operations) {
            if (operation.equals("+")) {
                scores[index] = scores[index - 1] + scores[index - 2];
                sum += scores[index];
                index++;
            } else if (operation.equals("D")) {
                scores[index] = scores[index - 1] * 2;
                sum += scores[index];
                index++;
            } else if (operation.equals("C")) {
                sum -= scores[index - 1];
                index--;
            } else {
                scores[index] = Integer.parseInt(operation);
                sum += scores[index];
                index++;
            }
        }
        return sum;

=======

        int sum = 0;
        int[] arr = new int[operations.length];
        int j = 0;
        for(int i = 0; i < operations.length; i++){
            if(operations[i].equals("+")){
                arr[j] = arr[j-1] + arr[j-2];
                sum += arr[j];
                j++;
            }
            else if(operations[i].equals("D")){
                arr[j] = 2*arr[j-1];
                sum += arr[j];
                j++;
            }
            else if(operations[i].equals("C")){
                sum -= arr[j-1];
                j--;
            }
            else{
                arr[j] = Integer.parseInt(operations[i]);
                sum += arr[j];
                j++;
            }
        }
        return sum;

=======

        int sum = 0;
        Stack<Integer> st = new Stack<>();
        for(String s : operations){
            if(s.equals("+")){
                int a = st.pop();
                int b = st.pop();
                int c = a + b;
                st.push(b);
                st.push(a);
                st.push(c);
                sum += c;
            }
            else if(s.equals("D")){
                int a = st.peek();
                st.push(2 * a);
                sum += 2 * a;
            }
            else if(s.equals("C")){
                int a = st.pop();
                sum -= a;
            }
            else{
                int a = Integer.parseInt(s);
                st.push(a);
                sum += a;
            }
        }
        return sum;

=======

        int[] score = new int[operations.length];
        int index = 0;
        for(int i=0; i<operations.length; i++){
            if(operations[i].equals("C")){
                index--;
                score[index] = 0;
            }else if(operations[i].equals("D")){
                score[index] = score[index-1]*2;
                index++;
            }else if(operations[i].equals("+")){
                score[index] = score[index-1]+score[index-2];
                index++;
            }else{
                score[index] = Integer.parseInt(operations[i]);
                index++;
            }
        }
        int result = 0;
        for(int i=0; i<score.length; i++){
            result += score[i];
        }
        return result;
