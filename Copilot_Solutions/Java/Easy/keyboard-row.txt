Synthesizing 10/10 solutions

=======

        char[] row1 = {'q','w','e','r','t','y','u','i','o','p'};
        char[] row2 = {'a','s','d','f','g','h','j','k','l'};
        char[] row3 = {'z','x','c','v','b','n','m'};
        List<String> list = new ArrayList<>();
        for (String word : words) {
            int count1 = 0;
            int count2 = 0;
            int count3 = 0;
            for (int i = 0; i < word.length(); i++) {
                if (isInRow(word.charAt(i), row1)) {
                    count1++;
                } else if (isInRow(word.charAt(i), row2)) {
                    count2++;
                } else if (isInRow(word.charAt(i), row3)) {
                    count3++;
                }
            }
            if (count1 == word.length() || count2 == word.length() || count3 == word.length()) {
                list.add(word);
            }
        }
        String[] result = new String[list.size()];
        for (int i = 0; i < list.size(); i++) {
            result[i] = list.get(i);
        }
        return result;
    }

    private boolean isInRow(char c, char[] row) {
        for (int i = 0; i < row.length; i++) {
            if (c == row[i] || c == Character.toUpperCase(row[i])) {
                return true;
            }
        }
        return false;

=======

        String[] rows = new String[]{"qwertyuiop", "asdfghjkl", "zxcvbnm"};
        Map<Character, Integer> map = new HashMap<>();
        for (int i = 0; i < rows.length; i++) {
            for (char c : rows[i].toCharArray()) {
                map.put(c, i);
            }
        }
        List<String> list = new ArrayList<>();
        for (String word : words) {
            if (word.equals("")) continue;
            int index = map.get(word.toLowerCase().charAt(0));
            for (char c : word.toLowerCase().toCharArray()) {
                if (map.get(c) != index) {
                    index = -1;
                    break;
                }
            }
            if (index != -1) list.add(word);
        }
        return list.toArray(new String[0]);

=======

        String[] keyboard = new String[]{"qwertyuiopQWERTYUIOP","asdfghjklASDFGHJKL","zxcvbnmZXCVBNM"};
        List<String> result = new ArrayList<>();
        for (String word: words) {
            for (String row: keyboard) {
                if (row.indexOf(word.charAt(0)) >= 0) {
                    if (word.chars().allMatch(c -> row.indexOf(c) >= 0)) {
                        result.add(word);
                    }
                    break;
                }
            }
        }
        return result.toArray(new String[0]);

=======

        String[] rows = new String[]{"qwertyuiop", "asdfghjkl", "zxcvbnm"};
        List<String> res = new ArrayList<>();
        for (String word : words) {
            int row = 0;
            for (int i = 0; i < rows.length; i++) {
                if (rows[i].indexOf(Character.toLowerCase(word.charAt(0))) != -1) {
                    row = i;
                    break;
                }
            }
            boolean flag = true;
            for (int i = 1; i < word.length(); i++) {
                if (rows[row].indexOf(Character.toLowerCase(word.charAt(i))) == -1) {
                    flag = false;
                    break;
                }
            }
            if (flag) {
                res.add(word);
            }
        }
        return res.toArray(new String[0]);

=======

        String[] rows = new String[]{"qwertyuiop", "asdfghjkl", "zxcvbnm"};
        List<String> result = new ArrayList<>();
        for (String word : words) {
            char[] chars = word.toLowerCase().toCharArray();
            int row = -1;
            for (int i = 0; i < rows.length; i++) {
                if (rows[i].indexOf(chars[0]) != -1) {
                    row = i;
                    break;
                }
            }
            boolean isSameRow = true;
            for (int i = 1; i < chars.length; i++) {
                if (rows[row].indexOf(chars[i]) == -1) {
                    isSameRow = false;
                    break;
                }
            }
            if (isSameRow) {
                result.add(word);
            }
        }
        return result.toArray(new String[result.size()]);

=======

        String[] keyboard = new String[]{"qwertyuiop", "asdfghjkl", "zxcvbnm"};
        List<String> result = new ArrayList<>();
        for (String word : words) {
            if (word.length() == 0) {
                continue;
            }
            String wordLower = word.toLowerCase();
            char firstChar = wordLower.charAt(0);
            int index = -1;
            for (int i = 0; i < keyboard.length; i++) {
                if (keyboard[i].indexOf(firstChar) >= 0) {
                    index = i;
                    break;
                }
            }
            boolean valid = true;
            for (int i = 1; i < wordLower.length(); i++) {
                if (keyboard[index].indexOf(wordLower.charAt(i)) < 0) {
                    valid = false;
                    break;
                }
            }
            if (valid) {
                result.add(word);
            }
        }
        return result.toArray(new String[result.size()]);

=======

        String[] rows = new String[]{"qwertyuiop", "asdfghjkl", "zxcvbnm"};
        List<String> res = new ArrayList<>();
        for (String word : words) {
            String row = null;
            for (String r : rows) {
                if (r.indexOf(Character.toLowerCase(word.charAt(0))) >= 0) {
                    row = r;
                    break;
                }
            }
            boolean match = true;
            for (int i = 1; i < word.length(); i++) {
                if (row.indexOf(Character.toLowerCase(word.charAt(i))) < 0) {
                    match = false;
                    break;
                }
            }
            if (match) {
                res.add(word);
            }
        }
        String[] result = new String[res.size()];
        return res.toArray(result);

=======

        List<String> list = new ArrayList<>();
        String[] rows = {"qwertyuiop", "asdfghjkl", "zxcvbnm"};
        for (String word : words) {
            int row = 0;
            for (int i = 0; i < rows.length; i++) {
                if (rows[i].contains(word.substring(0, 1).toLowerCase())) {
                    row = i;
                    break;
                }
            }
            boolean flag = true;
            for (int i = 1; i < word.length(); i++) {
                if (!rows[row].contains(word.substring(i, i + 1).toLowerCase())) {
                    flag = false;
                    break;
                }
            }
            if (flag) {
                list.add(word);
            }
        }
        return list.toArray(new String[list.size()]);

=======

        List<String> list = new ArrayList<>();
        for (String s: words) {
            if (check(s)) {
                list.add(s);
            }
        }
        String[] res = new String[list.size()];
        for (int i = 0; i < res.length; i++) {
            res[i] = list.get(i);
        }
        return res;
    }
    public boolean check(String s) {
        s = s.toLowerCase();
        String[] row = {"qwertyuiop", "asdfghjkl", "zxcvbnm"};
        int index = -1;
        for (int i = 0; i < 3; i++) {
            if (row[i].indexOf(s.charAt(0)) != -1) {
                index = i;
                break;
            }
        }
        for (int i = 1; i < s.length(); i++) {
            if (row[index].indexOf(s.charAt(i)) == -1) {
                return false;
            }
        }
        return true;

=======

        String[] row = {"qwertyuiop", "asdfghjkl", "zxcvbnm"};
        List<String> ans = new ArrayList<>();
        for (String word : words) {
            char[] chars = word.toLowerCase().toCharArray();
            int index = -1;
            for (int i = 0; i < row.length; i++) {
                if (row[i].indexOf(chars[0]) != -1) {
                    index = i;
                    break;
                }
            }
            boolean flag = true;
            for (int i = 1; i < chars.length; i++) {
                if (row[index].indexOf(chars[i]) == -1) {
                    flag = false;
                    break;
                }
            }
            if (flag) {
                ans.add(word);
            }
        }
        return ans.toArray(new String[ans.size()]);
