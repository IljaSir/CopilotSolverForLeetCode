Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int[] count = new int[10];
        for (int i = 0; i < num.length(); i++) {
            count[num.charAt(i) - '0']++;
        }
        for (int i = 9; i >= 0; i--) {
            if (count[i] >= 3) {
                return "" + i + i + i;
            }
        }
        return "";

=======

        int[] count = new int[10];
        for (char c : num.toCharArray()) {
            count[c - '0']++;
        }
        for (int i = 9; i >= 0; i--) {
            if (count[i] >= 3) {
                return String.valueOf(i) + String.valueOf(i) + String.valueOf(i);
            }
        }
        return "";

=======

        int[] count = new int[10];
        for (char c : num.toCharArray()) {
            count[c - '0']++;
        }
        for (int i = 9; i >= 0; i--) {
            if (count[i] >= 3) {
                return "" + i + i + i;
            }
        }
        return "";

=======

        int[] count = new int[10];
        for (char c : num.toCharArray()) {
            count[c - '0']++;
        }
        for (int i = 9; i >= 1; i--) {
            if (count[i] >= 3) {
                return String.valueOf(i) + String.valueOf(i) + String.valueOf(i);
            }
        }
        return "";

=======

        int[] counts = new int[10];
        for (char c : num.toCharArray()) {
            counts[c - '0']++;
        }
        for (int i = 9; i >= 0; i--) {
            if (counts[i] >= 3) {
                return String.valueOf(i) + String.valueOf(i) + String.valueOf(i);
            }
        }
        return "";

=======

        int[] cnt = new int[10];
        for (char c : num.toCharArray()) {
            cnt[c - '0']++;
        }
        for (int i = 9; i >= 0; i--) {
            if (cnt[i] >= 3) {
                return "" + i + i + i;
            }
        }
        return "";

=======

        int[] count = new int[10];
        for (int i = 0; i < num.length(); i++) {
            count[num.charAt(i) - '0']++;
        }
        int max = 0;
        for (int i = 0; i < 10; i++) {
            if (count[i] >= 3) {
                max = i;
            }
        }
        if (max == 0) {
            return "";
        }
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < count[max]; i++) {
            sb.append(max);
        }
        return sb.toString();

=======

        int max = 0;
        for (int i = 0; i < num.length() - 2; i++) {
            if (num.charAt(i) == num.charAt(i + 1) && num.charAt(i) == num.charAt(i + 2)) {
                max = Math.max(max, num.charAt(i) - '0');
            }
        }
        return max > 0 ? String.valueOf(max).repeat(3) : "";

=======

        int[] count = new int[10];
        for (char c : num.toCharArray()) {
            count[c - '0']++;
        }
        int max = 0;
        for (int i = 0; i < 10; i++) {
            if (count[i] >= 3) {
                max = Math.max(max, i);
            }
        }
        if (max == 0) {
            return "";
        }
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < count[max]; i++) {
            sb.append(max);
        }
        return sb.toString();
