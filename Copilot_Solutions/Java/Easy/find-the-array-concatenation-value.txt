Synthesizing 10/10 solutions

=======

        long ans = 0;
        while (nums.length > 1) {
            ans += nums[0] * Math.pow(10, (int)Math.log10(nums[nums.length - 1]) + 1) + nums[nums.length - 1];
            nums = Arrays.copyOfRange(nums, 1, nums.length - 1);
        }
        if (nums.length == 1) ans += nums[0];
        return ans;

=======

        long result = 0;
        int l = 0;
        int r = nums.length - 1;
        while (l <= r) {
            if (l == r) {
                result = result * 10 + nums[l];
            } else {
                result = result * 100 + nums[l] * 10 + nums[r];
            }
            l++;
            r--;
        }
        return result;

=======

        int n = nums.length;
        long ans = 0;
        for (int i = 0; i < n / 2; i++) {
            ans += (nums[i] + nums[n - i - 1]) * Math.pow(10, len(nums[n - i - 1])) + nums[n - i - 1];
        }
        if (n % 2 == 1) {
            ans += nums[n / 2];
        }
        return ans;
    }

    private int len(int x) {
        int ans = 0;
        while (x > 0) {
            ans++;
            x /= 10;
        }
        return ans;

=======

        long result = 0;
        int l = 0;
        int r = nums.length - 1;
        while (l <= r) {
            if (l == r) {
                result += nums[l];
                break;
            }
            result += (long) nums[l] * (long) Math.pow(10, (int) Math.log10(nums[r]) + 1) + nums[r];
            l++;
            r--;
        }
        return result;

=======

        long ans = 0;
        while (nums.length > 1) {
            ans += (nums[0] * Math.pow(10, (int) Math.log10(nums[nums.length - 1])) + nums[nums.length - 1]);
            nums = Arrays.copyOfRange(nums, 1, nums.length - 1);
        }
        if (nums.length == 1) ans += nums[0];
        return ans;

=======

        long ans = 0;
        while(nums.length > 0) {
            if(nums.length == 1) {
                ans += nums[0];
                break;
            }
            ans += nums[0] * Math.pow(10, (int)Math.log10(nums[nums.length - 1]) + 1) + nums[nums.length - 1];
            nums = Arrays.copyOfRange(nums, 1, nums.length - 1);
        }
        return ans;

=======

        long ans = 0;
        int n = nums.length;
        int l = 0, r = n - 1;
        while (l <= r) {
            if (l == r) {
                ans += nums[l];
                break;
            }
            int len = (r - l + 1);
            int pow10 = 1;
            while (len > 1) {
                len /= 10;
                pow10 *= 10;
            }
            ans += (nums[l] * pow10 + nums[r]);
            l++;
            r--;
        }
        return ans;

=======

        long ans = 0;
        int i = 0, j = nums.length - 1;
        while (i < j) {
            ans += Long.parseLong("" + nums[i++] + nums[j--]);
        }
        if (i == j) {
            ans += nums[i];
        }
        return ans;

=======

        long res = 0;
        int len = nums.length;
        int i = 0;
        int j = len - 1;
        while (i <= j) {
            if (i == j) {
                res = res * 10 + nums[i];
                break;
            }
            int first = nums[i];
            int last = nums[j];
            int firstLen = 1;
            int lastLen = 1;
            while (first >= 10) {
                firstLen++;
                first /= 10;
            }
            while (last >= 10) {
                lastLen++;
                last /= 10;
            }
            res = res * (long) Math.pow(10, firstLen + lastLen) + nums[i] * (long) Math.pow(10, lastLen) + nums[j];
            i++;
            j--;
        }
        return res;

=======

        int i = 0, j = nums.length - 1;
        long res = 0;
        while (i <= j) {
            int n1 = nums[i], n2 = nums[j];
            if (i == j) {
                res = res * 10 + n1;
                break;
            }
            res = res * 100 + n1 * 10 + n2;
            i++;
            j--;
        }
        return res;
