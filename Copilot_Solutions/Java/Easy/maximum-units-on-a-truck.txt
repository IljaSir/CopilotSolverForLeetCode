Synthesizing 10/10 solutions (Duplicates hidden)

=======

        Arrays.sort(boxTypes, new Comparator<int[]>() {
            public int compare(int[] a, int[] b) {
                return b[1] - a[1];
            }
        });
        int ans = 0;
        for (int i = 0; i < boxTypes.length; i++) {
            if (boxTypes[i][0] <= truckSize) {
                ans += boxTypes[i][0] * boxTypes[i][1];
                truckSize -= boxTypes[i][0];
            } else {
                ans += truckSize * boxTypes[i][1];
                break;
            }
        }
        return ans;

=======

        Arrays.sort(boxTypes, (a, b) -> b[1] - a[1]);
        int res = 0;
        for (int[] box : boxTypes) {
            int count = Math.min(box[0], truckSize);
            res += count * box[1];
            truckSize -= count;
            if (truckSize == 0) break;
        }
        return res;

=======

        int max = 0;
        Arrays.sort(boxTypes, new Comparator<int[]>() {
            public int compare(int[] a, int[] b) {
                return b[1] - a[1];
            }
        });
        for (int[] box : boxTypes) {
            int n = Math.min(truckSize, box[0]);
            max += n * box[1];
            truckSize -= n;
            if (truckSize == 0) {
                break;
            }
        }
        return max;

=======

        Arrays.sort(boxTypes, (a, b) -> b[1] - a[1]);
        int total = 0;
        for (int[] boxType : boxTypes) {
            int count = Math.min(truckSize, boxType[0]);
            truckSize -= count;
            total += count * boxType[1];
            if (truckSize == 0) {
                break;
            }
        }
        return total;

=======

        int res = 0;
        Arrays.sort(boxTypes, (a, b) -> b[1] - a[1]);
        for (int[] box : boxTypes) {
            int cnt = Math.min(truckSize, box[0]);
            res += cnt * box[1];
            truckSize -= cnt;
            if (truckSize == 0) {
                break;
            }
        }
        return res;

=======

        Arrays.sort(boxTypes, (a,b) -> b[1] - a[1]);
        int count = 0;
        int i = 0;
        while(truckSize > 0 && i < boxTypes.length){
            int[] box = boxTypes[i];
            int numberOfBoxes = box[0];
            int numberOfUnitsPerBox = box[1];
            if(numberOfBoxes <= truckSize){
                count += numberOfBoxes * numberOfUnitsPerBox;
                truckSize -= numberOfBoxes;
            } else {
                count += truckSize * numberOfUnitsPerBox;
                truckSize = 0;
            }
            i++;
        }
        return count;

=======

        Arrays.sort(boxTypes, (a, b) -> b[1] - a[1]);
        int maxUnits = 0;
        for (int[] box : boxTypes) {
            int n = Math.min(truckSize, box[0]);
            maxUnits += n * box[1];
            truckSize -= n;
            if (truckSize == 0) {
                break;
            }
        }
        return maxUnits;

=======

        int total = 0;
        PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> b[1] - a[1]);
        for (int[] box : boxTypes) {
            pq.add(box);
        }
        while (truckSize > 0 && !pq.isEmpty()) {
            int[] box = pq.poll();
            int n = Math.min(box[0], truckSize);
            total += n * box[1];
            truckSize -= n;
        }
        return total;

=======

        // sort by number of units
        Arrays.sort(boxTypes, (a, b) -> b[1] - a[1]);
        int totalUnits = 0;
        for (int[] boxType : boxTypes) {
            int boxes = Math.min(truckSize, boxType[0]);
            totalUnits += boxes * boxType[1];
            truckSize -= boxes;
            if (truckSize == 0) {
                break;
            }
        }
        return totalUnits;
