Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int n = nums.length;
        int sum = (n * (n + 1)) / 2;
        for (int i = 0; i < n; i++) {
            sum -= nums[i];
        }
        return sum;

=======

        int n = nums.length;
        int sum = 0;
        for (int i = 0; i < n; i++) {
            sum += nums[i];
        }
        return n * (n + 1) / 2 - sum;

=======

        int n = nums.length;
        int sum = 0;
        for (int num : nums) {
            sum += num;
        }
        return n * (n + 1) / 2 - sum;

=======

        int n = nums.length;
        int sum = (n * (n + 1)) / 2;
        for (int i = 0; i < nums.length; i++) {
            sum -= nums[i];
        }
        return sum;

=======

        int n = nums.length;
        int total = (n * (n + 1)) / 2;
        int sum = 0;
        for (int i = 0; i < n; i++) {
            sum += nums[i];
        }
        return total - sum;

=======

        int len = nums.length;
        int sum = len * (len + 1) / 2;
        for (int num : nums) {
            sum -= num;
        }
        return sum;

=======

        int n = nums.length;
        int sum = (n * (n + 1)) / 2;
        int actualSum = 0;
        for (int i = 0; i < nums.length; i++) {
            actualSum += nums[i];
        }
        return sum - actualSum;
