Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int sum = 0;
        for (int i = 0; i < k; i++) {
            sum += nums[i];
        }
        int max = sum;
        for (int i = k; i < nums.length; i++) {
            sum += nums[i] - nums[i - k];
            max = Math.max(max, sum);
        }
        return (double) max / k;

=======

        int sum = 0;
        for (int i = 0; i < k; i++) {
            sum += nums[i];
        }
        int max = sum;
        for (int i = k; i < nums.length; i++) {
            sum = sum - nums[i - k] + nums[i];
            max = Math.max(max, sum);
        }
        return (double) max / k;

=======

        int max = 0;
        for (int i = 0; i < k; i++) {
            max += nums[i];
        }
        int sum = max;
        for (int i = k; i < nums.length; i++) {
            sum += nums[i] - nums[i - k];
            max = Math.max(max, sum);
        }
        return (double) max / k;

=======

        int sum = 0;
        for (int i = 0; i < k; ++i) sum += nums[i];
        int maxSum = sum;
        for (int i = k; i < nums.length; ++i) {
            sum += nums[i] - nums[i - k];
            maxSum = Math.max(maxSum, sum);
        }
        return maxSum / 1.0 / k;

=======

        int n = nums.length;
        double[] sum = new double[n + 1];
        for (int i = 0; i < n; i++) {
            sum[i + 1] = sum[i] + nums[i];
        }
        double max = sum[k] - sum[0];
        for (int i = k; i < n; i++) {
            max = Math.max(max, sum[i + 1] - sum[i - k + 1]);
        }
        return max / k;

=======

        int maxSum = Integer.MIN_VALUE;
        int sum = 0;
        for (int i = 0; i < nums.length; i++) {
            sum += nums[i];
            if (i >= k - 1) {
                maxSum = Math.max(sum, maxSum);
                sum -= nums[i - k + 1];
            }
        }
        return maxSum / (double)k;

=======

        double max = 0;
        double sum = 0;
        for(int i = 0; i < k; i++) {
            sum += nums[i];
        }
        max = sum;
        for(int i = k; i < nums.length; i++) {
            sum += nums[i] - nums[i-k];
            max = Math.max(max, sum);
        }
        return max/k;

=======

        int n = nums.length;
        int[] temp = new int[n];
        temp[0] = nums[0];
        for (int i = 1; i < n; i++) {
            temp[i] = temp[i - 1] + nums[i];
        }
        double max = temp[k - 1] * 1.0 / k;
        for (int i = k; i < n; i++) {
            max = Math.max(max, (temp[i] - temp[i - k]) * 1.0 / k);
        }
        return max;

=======

        double max = -10000;
        double sum = 0;
        for (int i = 0; i < nums.length; i++) {
            sum += nums[i];
            if (i >= k - 1) {
                max = Math.max(max, sum / k);
                sum -= nums[i - k + 1];
            }
        }
        return max;
