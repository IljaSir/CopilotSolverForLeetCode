Synthesizing 10/10 solutions (Duplicates hidden)

=======

        for (int i = 0; i < 4; i++) {
            if (Arrays.deepEquals(mat, target)) {
                return true;
            }
            rotate(mat);
        }
        return false;
    }

    private void rotate(int[][] mat) {
        int n = mat.length;
        for (int i = 0; i < n / 2; i++) {
            for (int j = i; j < n - i - 1; j++) {
                int temp = mat[i][j];
                mat[i][j] = mat[n - j - 1][i];
                mat[n - j - 1][i] = mat[n - i - 1][n - j - 1];
                mat[n - i - 1][n - j - 1] = mat[j][n - i - 1];
                mat[j][n - i - 1] = temp;
            }
        }

=======

        int n = mat.length;
        for (int i = 0; i < 4; i++) {
            if (Arrays.deepEquals(mat, target)) {
                return true;
            }
            rotate(mat, n);
        }
        return false;
    }
    
    public void rotate(int[][] mat, int n) {
        for (int i = 0; i < n / 2; i++) {
            for (int j = i; j < n - i - 1; j++) {
                int temp = mat[i][j];
                mat[i][j] = mat[n - 1 - j][i];
                mat[n - 1 - j][i] = mat[n - 1 - i][n - 1 - j];
                mat[n - 1 - i][n - 1 - j] = mat[j][n - 1 - i];
                mat[j][n - 1 - i] = temp;
            }
        }

=======

        if (Arrays.deepEquals(mat, target)) {
            return true;
        }
        for (int i = 0; i < 3; i++) {
            rotate(mat);
            if (Arrays.deepEquals(mat, target)) {
                return true;
            }
        }
        return false;
    }

    private void rotate(int[][] mat) {
        int n = mat.length;
        for (int i = 0; i < n; i++) {
            for (int j = i; j < n; j++) {
                int temp = mat[i][j];
                mat[i][j] = mat[j][i];
                mat[j][i] = temp;
            }
        }
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n / 2; j++) {
                int temp = mat[i][j];
                mat[i][j] = mat[i][n - j - 1];
                mat[i][n - j - 1] = temp;
            }
        }

=======

        int n = mat.length;
        int[][] temp = new int[n][n];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                temp[i][j] = mat[i][j];
            }
        }
        for (int i = 0; i < 4; i++) {
            for (int j = 0; j < n; j++) {
                for (int k = 0; k < n; k++) {
                    mat[j][k] = temp[n - 1 - k][j];
                }
            }
            if (Arrays.deepEquals(mat, target)) {
                return true;
            }
            for (int j = 0; j < n; j++) {
                for (int k = 0; k < n; k++) {
                    temp[j][k] = mat[j][k];
                }
            }
        }
        return false;

=======

        int n = mat.length;
        int[][] rotated = new int[n][n];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                rotated[j][n - i - 1] = mat[i][j];
            }
        }
        if (Arrays.deepEquals(rotated, target)) {
            return true;
        }
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                rotated[j][n - i - 1] = mat[i][j];
            }
        }
        if (Arrays.deepEquals(rotated, target)) {
            return true;
        }
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                rotated[j][n - i - 1] = mat[i][j];
            }
        }
        if (Arrays.deepEquals(rotated, target)) {
            return true;
        }
        return false;

=======

        int n = mat.length;
        for (int i = 0; i < 4; i++) {
            if (Arrays.deepEquals(mat, target)) return true;
            int[][] tmp = new int[n][n];
            for (int j = 0; j < n; j++) {
                for (int k = 0; k < n; k++) {
                    tmp[j][k] = mat[n - k - 1][j];
                }
            }
            mat = tmp;
        }
        return false;

=======

        int n = mat.length;
        boolean isSame = true;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (mat[i][j] != target[i][j]) {
                    isSame = false;
                    break;
                }
            }
        }
        if (isSame) {
            return true;
        }
        for (int i = 0; i < 3; i++) {
            mat = rotate(mat);
            isSame = true;
            for (int j = 0; j < n; j++) {
                for (int k = 0; k < n; k++) {
                    if (mat[j][k] != target[j][k]) {
                        isSame = false;
                        break;
                    }
                }
            }
            if (isSame) {
                return true;
            }
        }
        return false;
    }

    private int[][] rotate(int[][] mat) {
        int n = mat.length;
        int[][] newMat = new int[n][n];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                newMat[j][n - 1 - i] = mat[i][j];
            }
        }
        return newMat;

=======

        int n = mat.length;
        if (n != target.length || n != target[0].length) return false;
        if (n == 1) return mat[0][0] == target[0][0];
        
        for (int i = 0; i < 4; i++) {
            rotate(mat, n);
            if (Arrays.deepEquals(mat, target)) return true;
        }
        return false;
    }
    
    private void rotate(int[][] mat, int n) {
        for (int i = 0; i < n / 2; i++) {
            for (int j = i; j < n - i - 1; j++) {
                int temp = mat[i][j];
                mat[i][j] = mat[n - j - 1][i];
                mat[n - j - 1][i] = mat[n - i - 1][n - j - 1];
                mat[n - i - 1][n - j - 1] = mat[j][n - i - 1];
                mat[j][n - i - 1] = temp;
            }
        }

=======

        int n = mat.length;
        int m = mat[0].length;
        int[][] rotated = new int[n][m];
        for (int i = 0; i < 4; i++) {
            for (int j = 0; j < n; j++) {
                for (int k = 0; k < m; k++) {
                    rotated[j][k] = mat[n - 1 - k][j];
                }
            }
            if (Arrays.deepEquals(rotated, target)) {
                return true;
            }
            mat = rotated;
            rotated = new int[n][m];
        }
        return false;
