Synthesizing 10/10 solutions

=======

        List<List<Integer>> result = new ArrayList<>();
        int i = 0;
        while (i < s.length()) {
            int j = i + 1;
            while (j < s.length() && s.charAt(j) == s.charAt(j - 1)) {
                j++;
            }
            if (j - i >= 3) {
                List<Integer> list = new ArrayList<>();
                list.add(i);
                list.add(j - 1);
                result.add(list);
            }
            i = j;
        }
        return result;

=======

        List<List<Integer>> result = new ArrayList<>();
        int start = 0;
        int end = 0;
        for (int i = 1; i < s.length(); i++) {
            if (s.charAt(i) == s.charAt(i - 1)) {
                end = i;
            } else {
                if (end - start >= 2) {
                    List<Integer> list = new ArrayList<>();
                    list.add(start);
                    list.add(end);
                    result.add(list);
                }
                start = i;
                end = i;
            }
        }
        if (end - start >= 2) {
            List<Integer> list = new ArrayList<>();
            list.add(start);
            list.add(end);
            result.add(list);
        }
        return result;

=======

        List<List<Integer>> res = new ArrayList<>();
        int i = 0;
        int n = s.length();
        while (i < n) {
            int j = i;
            while (j < n && s.charAt(j) == s.charAt(i)) {
                j++;
            }
            if (j - i >= 3) {
                List<Integer> temp = new ArrayList<>();
                temp.add(i);
                temp.add(j - 1);
                res.add(temp);
            }
            i = j;
        }
        return res;

=======

        List<List<Integer>> result = new ArrayList<>();
        int start = 0;
        while (start < s.length()) {
            int end = start;
            while (end < s.length() && s.charAt(end) == s.charAt(start)) {
                end++;
            }
            if (end - start >= 3) {
                result.add(Arrays.asList(start, end - 1));
            }
            start = end;
        }
        return result;

=======

        List<List<Integer>> res = new ArrayList<>();
        int i = 0;
        int n = s.length();
        while (i < n) {
            int j = i;
            while (j < n && s.charAt(j) == s.charAt(i)) {
                j++;
            }
            if (j - i >= 3) {
                List<Integer> temp = new ArrayList<>();
                temp.add(i);
                temp.add(j - 1);
                res.add(temp);
            }));
        }
        return result;

=======

        List<List<Integer>> result = new ArrayList<List<Integer>>(;
        int i = 0;
        int j = 0;
        while (j < s.length()) {
            if (s.charAt(i) != s.charAt(j)) {
                if (j - i >= 3) {
                    List<Integer> interval = new ArrayList<Integer>();
                    interval.add(i);
                    interval.add(j - 1);
                    result.add(interval);
                }
                i = j;
            }
            j++;
        }
        if (j - i >= 3) {
            List<Integer> interval = new ArrayList<Integer>();
            interval.add(i);
            interval.add(j - 1);
            result.add(interval
            i = j;
        }
        return res;

=======

        int count = 1;
        List<List<Integer>> result = new ArrayList<>();
        for (int i = 1; i < s.length(); i++) {
            if (s.charAt(i) == s.charAt(i - 1)) {
                count++;
            } else {
                if (count >= 3) {
                    result.add(Arrays.asList(i - count, i - 1));
                }
                count = 1;
            }
        }
        if (count >= 3) {
            result.add(Arrays.asList(s.length() - count, s.length() - 1));
        }
        return result;

=======

        List<List<Integer>> result = new ArrayList<List<Integer>>();
        int i = 0;
        int j = 0;
        while (j < s.length()) {
            if (s.charAt(i) != s.charAt(j)) {
                if (j - i >= 3) {
                    List<Integer> interval = new ArrayList<Integer>();
                    interval.add(i);
                    interval.add(j - 1);
                    result.add(interval);
                }
                i = j;
            }
            j++;
        }
        if (j - i >= 3) {
            List<Integer> interval = new ArrayList<Integer>();
            interval.add(i);
            interval.add(j - 1);
            result.add(interval);
        }
        return result;

=======

        List<List<Integer>> list = new ArrayList<>();
        int start = 0;
        int end = 0;
        int count = 1;
        for (int i = 1; i < s.length(); i++) {
            if (s.charAt(i) == s.charAt(i-1)) {
                count++;
                end++;
            } else {
                if (count >= 3) {
                    List<Integer> l = new ArrayList<>();
                    l.add(start);
                    l.add(end);
                    list.add(l);
                }
                start = i;
                end = i;
                count = 1;
            }
        }
        if (count >= 3) {
            List<Integer> l = new ArrayList<>();
            l.add(start);
            l.add(end);
            list.add(l);
        }
        return list;

=======

        List<List<Integer>> result = new ArrayList<>();
        if (s.length() < 3) {
            return result;
        }
        char[] chars = s.toCharArray();
        int start = 0;
        int end = 0;
        for (int i = 1; i < chars.length; i++) {
            if (chars[i] == chars[i - 1]) {
                end++;
            } else {
                if (end - start + 1 >= 3) {
                    List<Integer> list = new ArrayList<>();
                    list.add(start);
                    list.add(end);
                    result.add(list);
                }
                start = i;
                end = i;
            }
        }
        if (end - start + 1 >= 3) {
            List<Integer> list = new ArrayList<>();
            list.add(start);
            list.add(end);
            result.add(list);
        }
        return result;

=======

        List<List<Integer>> result = new ArrayList<>();
        if (s == null || s.length() < 3) {
            return result;
        }
        char[] chars = s.toCharArray();
        int start = 0;
        for (int i = 1; i < chars.length; i++) {
            if (chars[i] != chars[start]) {
                if (i - start >= 3) {
                    List<Integer> list = new ArrayList<>();
                    list.add(start);
                    list.add(i - 1);
                    result.add(list);
                }
                start = i;
            }
        }
        if (chars.length - start >= 3) {
            List<Integer> list = new ArrayList<>();
            list.add(start);
            list.add(chars.length - 1);
            result.add(list);
        }
        return result;

=======

        List<List<Integer>> result = new ArrayList<>();
        if (s.length() < 3) {
            return result;
        }
        char[] chars = s.toCharArray();
        int start = 0;
        int end = 0;
        for (int i = 1; i < chars.length; i++) {
            if (chars[i] == chars[i - 1]) {
                end++;
            } else {
                if (end - start + 1 >= 3) {
                    List<Integer> list = new ArrayList<>();
                    list.add(start);
                    list.add(end);
                    result.add(list);
                }
                start = i;
                end = i;
            }
        }
        if (end - start + 1 >= 3) {
            List<Integer> list = new ArrayList<>();
            list.add(start);
            list.add(end);
            result.add(list);
        }
        return result;

=======

        List<List<Integer>> result = new ArrayList<>();
        if (s == null || s.length() < 3) {
            return result;
        }
        char[] chars = s.toCharArray();
        int start = 0;
        for (int i = 1; i < chars.length; i++) {
            if (chars[i] != chars[start]) {
                if (i - start >= 3) {
                    List<Integer> list = new ArrayList<>();
                    list.add(start);
                    list.add(i - 1);
                    result.add(list);
                }
                start = i;
            }
        }
        if (chars.length - start >= 3) {
            List<Integer> list = new ArrayList<>();
            list.add(start);
            list.add(chars.length - 1);
            result.add(list);
        }
        return result;

=======

        List<List<Integer>> result = new ArrayList<List<Integer>>();
        if (s.length() == 0) {
            return result;
        }
        int start = 0;
        int end = 0;
        for (int i = 1; i < s.length(); i++) {
            if (s.charAt(i) == s.charAt(i - 1)) {
                end = i;
            } else {
                if (end - start >= 2) {
                    List<Integer> temp = new ArrayList<Integer>();
                    temp.add(start);
                    temp.add(end);
                    result.add(temp);
                }
                start = i;
                end = i;
            }
        }
        if (end - start >= 2) {
            List<Integer> temp = new ArrayList<Integer>();
            temp.add(start);
            temp.add(end);
            result.add(temp);
        }
        return result;
