Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int max1 = 0;
        int max2 = 0;
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] > max1) {
                max2 = max1;
                max1 = nums[i];
            } else if (nums[i] > max2) {
                max2 = nums[i];
            }
        }
        return (max1 - 1) * (max2 - 1);

=======

        int max1 = 0;
        int max2 = 0;
        for (int num : nums) {
            if (num > max1) {
                max2 = max1;
                max1 = num;
            } else if (num > max2) {
                max2 = num;
            }
        }
        return (max1 - 1) * (max2 - 1);

=======

        int max = 0;
        for (int i = 0; i < nums.length; i++) {
            for (int j = i + 1; j < nums.length; j++) {
                max = Math.max(max, (nums[i] - 1) * (nums[j] - 1));
            }
        }
        return max;

=======

        int max = 0;
        int max2 = 0;
        for(int i = 0; i < nums.length; i++) {
            if(nums[i] > max) {
                max2 = max;
                max = nums[i];
            } else if(nums[i] > max2) {
                max2 = nums[i];
            }
        }
        return (max - 1) * (max2 - 1);

=======

        int max = 0;
        for(int i = 0; i < nums.length; i++) {
            for(int j = i+1; j < nums.length; j++) {
                int tmp = (nums[i]-1)*(nums[j]-1);
                max = Math.max(max, tmp);
            }
        }
        return max;

=======

        int max = 0;
        int max2 = 0;
        int product = 0;
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] > max) {
                max2 = max;
                max = nums[i];
            } else if (nums[i] > max2) {
                max2 = nums[i];
            }
        }
        product = (max - 1) * (max2 - 1);
        return product;
