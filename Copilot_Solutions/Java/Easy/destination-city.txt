Synthesizing 10/10 solutions (Duplicates hidden)

=======

        Set<String> set = new HashSet<>();
        for (List<String> path : paths) {
            set.add(path.get(0));
        }
        for (List<String> path : paths) {
            if (!set.contains(path.get(1))) {
                return path.get(1);
            }
        }
        return null;

=======

        Map<String, String> map = new HashMap<>();
        for (List<String> path : paths) {
            map.put(path.get(0), path.get(1));
        }
        String start = paths.get(0).get(0);
        while (map.containsKey(start)) {
            start = map.get(start);
        }
        return start;

=======

        Map<String, String> map = new HashMap<>();
        for (List<String> path : paths) {
            map.put(path.get(0), path.get(1));
        }
        String city = paths.get(0).get(0);
        while (map.containsKey(city)) {
            city = map.get(city);
        }
        return city;

=======

        Map<String, String> map = new HashMap<>();
        for (List<String> path : paths) {
            map.put(path.get(0), path.get(1));
        }
        for (List<String> path : paths) {
            if (!map.containsKey(path.get(1))) {
                return path.get(1);
            }
        }
        return "";

=======

        Map<String, String> map = new HashMap<>();
        for(List<String> path : paths) {
            map.put(path.get(0), path.get(1));
        }
        String dest = paths.get(0).get(0);
        while(map.containsKey(dest)) {
            dest = map.get(dest);
        }
        return dest;

=======

        Map<String, String> map = new HashMap<String, String>();
        for(List<String> list: paths){
            map.put(list.get(0), list.get(1));
        }
        String dest = paths.get(0).get(0);
        while(map.get(dest) != null){
            dest = map.get(dest);
        }
        return dest;

=======

        // Create a set of all the cities that are the start of a path.
        Set<String> startCities = new HashSet<>();
        for (List<String> path : paths) {
            startCities.add(path.get(0));
        }
        
        // Find the city that is not a start city.
        for (List<String> path : paths) {
            if (!startCities.contains(path.get(1))) {
                return path.get(1);
            }
        }
        
        return "";
