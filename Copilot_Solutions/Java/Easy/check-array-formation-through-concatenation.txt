Synthesizing 10/10 solutions

=======

        Map<Integer, Integer> map = new HashMap<>();
        for (int i = 0; i < arr.length; i++) {
            map.put(arr[i], i);
        }
        for (int[] piece : pieces) {
            if (!map.containsKey(piece[0])) {
                return false;
            }
            int start = map.get(piece[0]);
            for (int i = 0; i < piece.length; i++) {
                if (start + i >= arr.length || arr[start + i] != piece[i]) {
                    return false;
                }
            }
        }
        return true;

=======

        Map<Integer, Integer> map = new HashMap<>();
        for (int i = 0; i < arr.length; i++) {
            map.put(arr[i], i);
        }
        for (int[] piece : pieces) {
            int index = map.getOrDefault(piece[0], -1);
            if (index == -1) {
                return false;
            }
            for (int i = 1; i < piece.length; i++) {
                if (index + i >= arr.length || piece[i] != arr[index + i]) {
                    return false;
                }
            }
        }
        return true;

=======

        Map<Integer, Integer> map = new HashMap<>();
        for (int i = 0; i < arr.length; i++) {
            map.put(arr[i], i);
        }
        for (int[] piece : pieces) {
            if (!map.containsKey(piece[0])) {
                return false;
            }
            int index = map.get(piece[0]);
            for (int i = 0; i < piece.length; i++) {
                if (piece[i] != arr[index]) {
                    return false;
                }
                index++;
            }
        }
        return true;

=======

        Map<Integer, Integer> map = new HashMap<>();
        for (int i = 0; i < arr.length; i++) {
            map.put(arr[i], i);
        }
        for (int[] piece : pieces) {
            if (!map.containsKey(piece[0])) {
                return false;
            }
            int index = map.get(piece[0]);
            for (int i = 0; i < piece.length; i++) {
                if (index >= arr.length || arr[index] != piece[i]) {
                    return false;
                }
                index++;
            }
        }
        return true;

=======

        Map<Integer, int[]> map = new HashMap<>();
        for (int[] piece : pieces) {
            map.put(piece[0], piece);
        }
        int i = 0;
        while (i < arr.length) {
            if (!map.containsKey(arr[i])) {
                return false;
            }
            int[] piece = map.get(arr[i]);
            for (int j = 0; j < piece.length; j++) {
                if (piece[j] != arr[i]) {
                    return false;
                }
                i++;
            }
        }
        return true;

=======

        Map<Integer, int[]> map = new HashMap<>();
        for (int[] piece : pieces) {
            map.put(piece[0], piece);
        }
        int i = 0;
        while (i < arr.length) {
            if (!map.containsKey(arr[i])) {
                return false;
            }
            int[] piece = map.get(arr[i]);
            for (int p : piece) {
                if (p != arr[i]) {
                    return false;
                }
                i++;
            }
        }
        return true;

=======

        Map<Integer, int[]> map = new HashMap<>();
        for (int[] p : pieces) {
            map.put(p[0], p);
        }
        int i = 0;
        while (i < arr.length) {
            if (!map.containsKey(arr[i])) {
                return false;
            }
            int[] p = map.get(arr[i]);
            for (int j = 0; j < p.length; j++) {
                if (p[j] != arr[i]) {
                    return false;
                }
                i++;
            }
        }
        return true;

=======

        for (int[] piece : pieces) {
            int i = 0;
            for (; i < arr.length; i++) {
                if (arr[i] == piece[0]) {
                    break;
                }
            }
            if (i == arr.length) {
                return false;
            }
            for (int j = 1; j < piece.length; j++) {
                if (i + j >= arr.length) {
                    return false;
                }
                if (arr[i + j] != piece[j]) {
                    return false;
                }
            }
        }
        return true;

=======

        int[] arr2 = new int[arr.length];
        for (int i = 0; i < arr.length; i++) {
            arr2[i] = -1;
        }
        for (int i = 0; i < pieces.length; i++) {
            int[] piece = pieces[i];
            for (int j = 0; j < arr.length; j++) {
                if (arr[j] == piece[0]) {
                    for (int k = 0; k < piece.length; k++) {
                        if (j + k >= arr.length || arr[j + k] != piece[k]) {
                            return false;
                        }
                    }
                    for (int k = 0; k < piece.length; k++) {
                        arr2[j + k] = 1;
                    }
                }
            }
        }
        for (int i = 0; i < arr.length; i++) {
            if (arr2[i] == -1) {
                return false;
            }
        }
        return true;

=======

        int n = arr.length;
        int m = pieces.length;
        int i = 0;
        int j = 0;
        while (i < n) {
            int k = 0;
            for (k = 0; k < m; k++) {
                if (pieces[k][0] == arr[i]) {
                    break;
                }
            }
            if (k == m) {
                return false;
            }
            for (j = 0; j < pieces[k].length; j++) {
                if (pieces[k][j] != arr[i]) {
                    return false;
                }
                i++;
            }
        }
        return true;
