Synthesizing 10/10 solutions

=======

        if (start > destination) {
            int temp = start;
            start = destination;
            destination = temp;
        }
        int clockwise = 0;
        int counterclockwise = 0;
        for (int i = start; i < destination; i++) {
            clockwise += distance[i];
        }
        for (int i = 0; i < start; i++) {
            counterclockwise += distance[i];
        }
        for (int i = destination; i < distance.length; i++) {
            counterclockwise += distance[i];
        }
        return Math.min(clockwise, counterclockwise);

=======

        if (start == destination) {
            return 0;
        }
        if (start > destination) {
            int tmp = start;
            start = destination;
            destination = tmp;
        }
        int total = 0;
        int direct = 0;
        for (int i = 0; i < distance.length; i++) {
            if (i >= start && i < destination) {
                direct += distance[i];
            }
            total += distance[i];
        }
        return Math.min(direct, total - direct);

=======

        int sum = 0;
        for (int i = 0; i < distance.length; i++) {
            sum += distance[i];
        }
        int min = Math.min(start, destination);
        int max = Math.max(start, destination);
        int sum1 = 0;
        for (int i = min; i < max; i++) {
            sum1 += distance[i];
        }
        return Math.min(sum1, sum - sum1);

=======

        int total = 0;
        for (int i = 0; i < distance.length; i++) {
            total += distance[i];
        }
        int clockwise = 0;
        for (int i = start; i != destination; i = (i + 1) % distance.length) {
            clockwise += distance[i];
        }
        return Math.min(clockwise, total - clockwise);

=======

        int sum = 0, min = 0;
        if (start > destination) {
            int temp = start;
            start = destination;
            destination = temp;
        }
        for (int i = 0; i < distance.length; i++) {
            sum += distance[i];
            if (i >= start && i < destination) {
                min += distance[i];
            }
        }
        return Math.min(min, sum - min);

=======

        int total = 0;
        for (int i = 0; i < distance.length; i++) {
            total += distance[i];
        }
        int clockwise = 0;
        int i = start;
        while (i != destination) {
            clockwise += distance[i];
            i = (i + 1) % distance.length;
        }
        int counterClockwise = total - clockwise;
        return Math.min(clockwise, counterClockwise);

=======

        int clockwise = 0;
        int counterclockwise = 0;
        int n = distance.length;
        int i = start;
        while (i != destination) {
            clockwise += distance[i];
            i = (i + 1) % n;
        }
        i = destination;
        while (i != start) {
            counterclockwise += distance[i];
            i = (i + 1) % n;
        }
        return Math.min(clockwise, counterclockwise);

=======

        int n = distance.length;
        int sum = 0;
        for (int i = 0; i < n; i++) {
            sum += distance[i];
        }
        int d = 0;
        if (start > destination) {
            int tmp = start;
            start = destination;
            destination = tmp;
        }
        for (int i = start; i < destination; i++) {
            d += distance[i];
        }
        return Math.min(d, sum - d);

=======

        int sum = 0;
        for (int i = 0; i < distance.length; i++) {
            sum += distance[i];
        }
        int min = 0;
        int max = 0;
        if (start < destination) {
            min = start;
            max = destination;
        } else {
            min = destination;
            max = start;
        }
        int sum2 = 0;
        for (int i = min; i < max; i++) {
            sum2 += distance[i];
        }
        return Math.min(sum2, sum - sum2);

=======

        int total = 0;
        for(int i = 0; i < distance.length; i++) {
            total += distance[i];
        }
        int sum = 0;
        int i = start;
        while(i != destination) {
            sum += distance[i];
            i = (i + 1) % distance.length;
        }
        return Math.min(sum, total - sum);
