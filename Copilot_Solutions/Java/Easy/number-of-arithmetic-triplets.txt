Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int n = nums.length;
        int count = 0;
        for (int i = 0; i < n - 2; i++) {
            for (int j = i + 1; j < n - 1; j++) {
                for (int k = j + 1; k < n; k++) {
                    if (nums[j] - nums[i] == diff && nums[k] - nums[j] == diff) {
                        count++;
                    }
                }
            }
        }
        return count;
    }
}

=======

        int count = 0;
        int n = nums.length;
        for (int i = 0; i < n - 2; i++) {
            for (int j = i + 1; j < n - 1; j++) {
                if (nums[j] - nums[i] == diff) {
                    for (int k = j + 1; k < n; k++) {
                        if (nums[k] - nums[j] == diff) {
                            count++;
                        }
                    }
                }
            }
        }
        return count;

=======

        int n = nums.length;
        int[] dp = new int[n];
        int res = 0;
        for (int i = 1; i < n; i++) {
            for (int j = 0; j < i; j++) {
                if (nums[i] - nums[j] == diff) {
                    dp[i] += dp[j] + 1;
                    res += dp[j];
                }
            }
        }
        return res;

=======

        int count = 0;
        Map<Integer, Integer> map = new HashMap<>();
        for (int i = 0; i < nums.length; i++) {
            if (map.containsKey(nums[i] - diff) && map.containsKey(nums[i] - 2 * diff)) {
                count += map.get(nums[i] - diff) * map.get(nums[i] - 2 * diff);
            }
            map.put(nums[i], map.getOrDefault(nums[i], 0) + 1);
        }
        return count;

=======

        int result = 0;
        Map<Integer, Integer> map = new HashMap<>();
        for (int i = 0; i < nums.length; i++) {
            result += map.getOrDefault(nums[i] - diff, 0) * map.getOrDefault(nums[i] - 2 * diff, 0);
            map.put(nums[i], map.getOrDefault(nums[i], 0) + 1);
        }
        return result;

=======

        int count = 0;
        Map<Integer, Integer> map = new HashMap<>();
        for (int i = 0; i < nums.length; i++) {
            int num = nums[i];
            if (map.containsKey(num - diff)) {
                count += map.get(num - diff);
            }
            map.put(num, map.getOrDefault(num, 0) + 1);
        }
        return count;

=======

        int[] dp = new int[nums.length];
        int res = 0;
        for (int i = 0; i < nums.length; i++) {
            for (int j = i + 1; j < nums.length; j++) {
                if (nums[j] - nums[i] == diff) {
                    dp[j] += 1 + dp[i];
                    res += dp[i];
                }
            }
        }
        return res;

=======

        int count = 0;
        Map<Integer, Integer> map = new HashMap<>();
        for (int i = 0; i < nums.length; i++) {
            int a = nums[i];
            int b = a - diff;
            int c = b - diff;
            if (map.containsKey(c) && map.containsKey(b)) {
                count += map.get(c) * map.get(b);
            }
            map.put(a, map.getOrDefault(a, 0) + 1);
        }
        return count;

=======

        int n = nums.length;
        int[] dp = new int[n];
        int ans = 0;
        for (int i = 0; i < n; i++) {
            int val = nums[i] - diff;
            int idx = Arrays.binarySearch(nums, 0, i, val);
            if (idx >= 0) {
                dp[i] = dp[idx] + 1;
            }
            ans += dp[i];
        }
        return ans;
