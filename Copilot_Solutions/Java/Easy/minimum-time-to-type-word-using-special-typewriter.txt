Synthesizing 10/10 solutions

=======

        int seconds = word.length();
        char prev = 'a';
        for (char c : word.toCharArray()) {
            int diff = Math.abs(c - prev);
            seconds += Math.min(diff, 26 - diff);
            prev = c;
        }
        return seconds;

=======

        int time = 0;
        int pointer = 0;
        for (int i = 0; i < word.length(); i++) {
            char c = word.charAt(i);
            int target = c - 'a';
            int dist = Math.abs(target - pointer);
            time += Math.min(dist, 26 - dist) + 1;
            pointer = target;
        }
        return time;

=======

        int count = 0;
        int last = 0;
        for (int i = 0; i < word.length(); i++) {
            int curr = word.charAt(i) - 'a';
            count += Math.min(Math.abs(curr - last), 26 - Math.abs(curr - last)) + 1;
            last = curr;
        }
        return count;

=======

        int pos = 0;
        int result = 0;
        for (int i = 0; i < word.length(); i++) {
            int c = word.charAt(i) - 'a';
            result += Math.min(Math.abs(c - pos), 26 - Math.abs(c - pos)) + 1;
            pos = c;
        }
        return result;

=======

        int count = word.length();
        int pointer = 'a';
        for (int i = 0; i < word.length(); i++) {
            char c = word.charAt(i);
            count += Math.min(Math.abs(c - pointer), 26 - Math.abs(c - pointer));
            pointer = c;
        }
        return count;

=======

        int n = word.length();
        int ans = 0;
        char c = 'a';
        for (int i = 0; i < n; i++) {
            char ch = word.charAt(i);
            int d = Math.abs(ch - c);
            ans += Math.min(d, 26 - d);
            ans++;
            c = ch;
        }
        return ans;

=======

        int count = 0;
        int currentPos = 0;
        for (int i = 0; i < word.length(); i++) {
            int targetPos = word.charAt(i) - 'a';
            int diff = Math.abs(targetPos - currentPos);
            count += Math.min(diff, 26 - diff) + 1;
            currentPos = targetPos;
        }
        return count;

=======

        int count = 0;
        int current = 0;
        for (char c : word.toCharArray()) {
            int target = c - 'a';
            int clockwise = Math.abs(target - current);
            int counterclockwise = 26 - clockwise;
            count += Math.min(clockwise, counterclockwise) + 1;
            current = target;
        }
        return count;

=======

        int count = 0;
        int curr = 0;
        for(int i = 0; i < word.length(); i++){
            int val = word.charAt(i) - 'a';
            int diff = Math.abs(val - curr);
            count += Math.min(diff, 26 - diff);
            count++;
            curr = val;
        }
        return count;

=======

        int time = 0;
        int currentPosition = 0;
        for (char c : word.toCharArray()) {
            int targetPosition = c - 'a';
            int clockwise = Math.abs(targetPosition - currentPosition);
            int counterclockwise = 26 - clockwise;
            time += Math.min(clockwise, counterclockwise) + 1;
            currentPosition = targetPosition;
        }
        return time;
