Synthesizing 10/10 solutions

=======

        char[] s = Integer.toString(num).toCharArray();
        for (int i = 0; i < s.length; i++) {
            if (s[i] == '6') {
                s[i] = '9';
                break;
            }
        }
        return Integer.parseInt(new String(s));

=======

        String s = String.valueOf(num);
        char[] arr = s.toCharArray();
        for (int i = 0; i < arr.length; i++) {
            if (arr[i] == '6') {
                arr[i] = '9';
                break;
            }
        }
        return Integer.parseInt(new String(arr));

=======

        int[] digits = new int[4];
        for (int i = 0; i < 4; i++) {
            digits[i] = num % 10;
            num /= 10;
        }
        for (int i = 3; i >= 0; i--) {
            if (digits[i] == 6) {
                digits[i] = 9;
                break;
            }
        }
        int result = 0;
        for (int i = 0; i < 4; i++) {
            result = result * 10 + digits[i];
        }
        return result;

=======

        int[] digits = new int[4];
        int size = 0;
        while (num > 0) {
            digits[size++] = num % 10;
            num /= 10;
        }
        for (int i = size - 1; i >= 0; i--) {
            if (digits[i] == 6) {
                digits[i] = 9;
                break;
            }
        }
        int ret = 0;
        for (int i = size - 1; i >= 0; i--) {
            ret = ret * 10 + digits[i];
        }
        return ret;

=======

        String s = Integer.toString(num);
        char[] c = s.toCharArray();
        int i = 0;
        while (i < c.length) {
            if (c[i] == '6') {
                c[i] = '9';
                break;
            }
            i++;
        }
        return Integer.parseInt(new String(c));

=======

        int max = num;
        for (int i = 1; i <= num; i *= 10) {
            int n = num / i % 10;
            if (n == 6) {
                max = Math.max(max, num + 3 * i);
            }
        }
        return max;

=======

        int result = 0;
        int factor = 1;
        boolean found = false;
        while (num > 0) {
            int digit = num % 10;
            if (digit == 6 && !found) {
                digit = 9;
                found = true;
            }
            result += digit * factor;
            factor *= 10;
            num /= 10;
        }
        return result;

=======

        int ans = 0;
        int count = 0;
        while (num > 0) {
            int n = num % 10;
            if (n == 6 && count == 0) {
                n = 9;
                count += 1;
            }
            ans = ans * 10 + n;
            num /= 10;
        }
        int res = 0;
        while (ans > 0) {
            int n = ans % 10;
            res = res * 10 + n;
            ans /= 10;
        }
        return res;

=======

        int max = num;
        for (int i = 0; i < 4; i++) {
            int n = num;
            int temp = n / (int) Math.pow(10, i) % 10;
            if (temp == 6) {
                n += 3 * (int) Math.pow(10, i);
                max = Math.max(n, max);
            }
        }
        return max;

=======

        int max = num;
        int temp = num;
        int count = 0;
        int base = 1;
        while (temp > 0) {
            int digit = temp % 10;
            if (digit == 6) {
                max = Math.max(max, num + 3 * base);
            }
            base *= 10;
            temp /= 10;
            count++;
        }
        return max;
