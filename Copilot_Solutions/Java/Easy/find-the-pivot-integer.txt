Synthesizing 10/10 solutions

=======

        int sum = 0;
        for (int i = 1; i <= n; i++) {
            sum += i;
        }
        if (sum % 2 != 0) {
            return -1;
        }
        int left = 0;
        for (int i = 1; i <= n; i++) {
            if (left == sum - left - i) {
                return i;
            }
            left += i;
        }
        return -1;

=======

        int sum = 0;
        for (int i = 1; i <= n; i++) {
            sum += i;
        }
        if (sum % 2 == 1) {
            return -1;
        }
        int half = sum / 2;
        int left = 0;
        for (int i = 1; i <= n; i++) {
            left += i;
            if (left == half) {
                return i;
            }
        }
        return -1;

=======

        int sum = 0;
        for (int i = 1; i <= n; i++) {
            sum += i;
        }
        if (sum % 2 == 1) {
            return -1;
        }
        int pivot = 0;
        int leftSum = 0;
        for (int i = 1; i <= n; i++) {
            pivot = i;
            leftSum += i;
            if (leftSum == sum / 2) {
                return pivot;
            }
        }
        return -1;

=======

        int sum = 0;
        for (int i = 1; i <= n; i++) {
            sum += i;
        }
        int left = 0;
        for (int i = 1; i <= n; i++) {
            if (left == sum - left - i) {
                return i;
            }
            left += i;
        }
        return -1;

=======

        int sum = 0;
        for(int i = 1; i <= n; i++) {
            sum += i;
        }
        int leftSum = 0;
        for(int i = 1; i <= n; i++) {
            if(2 * leftSum == sum - i) {
                return i;
            }
            leftSum += i;
        }
        return -1;

=======

        int sum = 0;
        for(int i = 1; i <= n; i++){
            sum += i;
        }
        int left = 0;
        for(int i = 1; i <= n; i++){
            if(left == sum - i){
                return i;
            }
            left += i;
        }
        return -1;

=======

        if (n == 1) {
            return 1;
        }
        int sum = 0;
        for (int i = 1; i <= n; i++) {
            sum = sum + i;
        }
        int left = 0;
        int right = sum;
        for (int i = 1; i <= n; i++) {
            left = left + i;
            right = right - i;
            if (left == right) {
                return i;
            }
        }
        return -1;

=======

        int sum = 0;
        int sum1 = 0;
        for(int i = 1; i <= n; i++){
            sum += i;
        }
        for(int i = 1; i <= n; i++){
            sum1 += i;
            if(sum1 == sum - sum1){
                return i;
            }
        }
        return -1;

=======

        if (n == 1) {
            return 1;
        }
        int total = n * (n + 1) / 2;
        int left = 0;
        for (int i = 1; i < n; i++) {
            left += i;
            if (left * 2 == total - i) {
                return i;
            }
        }
        return -1;

=======

        int left = 0;
        int right = n;
        while (left < right) {
            int mid = (left + right) / 2;
            int sumLeft = sum(1, mid);
            int sumRight = sum(mid + 1, n);
            if (sumLeft == sumRight) {
                return mid;
            } else if (sumLeft < sumRight) {
                left = mid + 1;
            } else {
                right = mid - 1;
            }
        }
        return -1;
    }
    
    private int sum(int start, int end) {
        int sum = 0;
        for (int i = start; i <= end; i++) {
            sum += i;
        }
        return sum;
