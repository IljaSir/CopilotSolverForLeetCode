Synthesizing 10/10 solutions

=======

        int n = grid.length;
        int m = grid[0].length;
        int ans = 0;
        while (m > 0) {
            int max = 0;
            for (int i = 0; i < n; i++) {
                int maxIndex = 0;
                for (int j = 0; j < m; j++) {
                    if (grid[i][j] > grid[i][maxIndex]) {
                        maxIndex = j;
                    }
                }
                max += grid[i][maxIndex];
                grid[i][maxIndex] = grid[i][m - 1];
            }
            ans += max;
            m--;
        }
        return ans;

=======

        int sum = 0;
        while (grid.length > 0) {
            int max = 0;
            int index = 0;
            for (int i = 0; i < grid.length; i++) {
                for (int j = 0; j < grid[i].length; j++) {
                    if (grid[i][j] > max) {
                        max = grid[i][j];
                        index = i;
                    }
                }
            }
            sum += max;
            int[][] newGrid = new int[grid.length - 1][grid[0].length - 1];
            int k = 0;
            for (int i = 0; i < grid.length; i++) {
                if (i != index) {
                    int l = 0;
                    for (int j = 0; j < grid[i].length; j++) {
                        if (grid[i][j] != max) {
                            newGrid[k][l] = grid[i][j];
                            l++;
                        }
                    }
                    k++;
                }
            }
            grid = newGrid;
        }
        return sum;
    }
}

=======

        int m = grid.length;
        int n = grid[0].length;
        int sum = 0;
        for (int i = 0; i < n; i++) {
            int max = 0;
            for (int j = 0; j < m; j++) {
                max = Math.max(max, grid[j][i]);
            }
            sum += max;
        }
        return sum;

=======

        int ans = 0;
        while (grid.length > 0) {
            int max = 0;
            for (int i = 0; i < grid.length; i++) {
                int[] row = grid[i];
                for (int j = 0; j < row.length; j++) {
                    max = Math.max(max, row[j]);
                }
            }
            ans += max;
            int[][] newGrid = new int[grid.length][];
            int newGridIndex = 0;
            for (int i = 0; i < grid.length; i++) {
                int[] row = grid[i];
                int[] newRow = new int[row.length - 1];
                int newRowIndex = 0;
                boolean deleted = false;
                for (int j = 0; j < row.length; j++) {
                    if (!deleted && row[j] == max) {
                        deleted = true;
                        continue;
                    }
                    newRow[newRowIndex++] = row[j];
                }
                if (newRow.length > 0) {
                    newGrid[newGridIndex++] = newRow;
                }
            }
            grid = new int[newGridIndex][];
            for (int i = 0; i < newGridIndex; i++) {
                grid[i] = newGrid[i];
            }
        }
        return ans;

=======

        int result = 0;
        while (grid.length > 0) {
            int max = 0;
            int maxIndex = 0;
            for (int i = 0; i < grid.length; i++) {
                int[] row = grid[i];
                for (int j = 0; j < row.length; j++) {
                    if (row[j] > max) {
                        max = row[j];
                        maxIndex = i;
                    }
                }
            }
            result += max;
            int[] newRow = new int[grid[0].length - 1];
            int index = 0;
            for (int i = 0; i < grid[maxIndex].length; i++) {
                if (i != maxIndex) {
                    newRow[index++] = grid[maxIndex][i];
                }
            }
            int[][] newGrid = new int[grid.length - 1][];
            index = 0;
            for (int i = 0; i < grid.length; i++) {
                if (i != maxIndex) {
                    newGrid[index++] = grid[i];
                }
            }
            grid = newGrid;
        }
        return result;

=======

        int sum = 0;
        while (true) {
            int max = 0;
            int maxRow = -1;
            int maxCol = -1;
            for (int i = 0; i < grid.length; i++) {
                for (int j = 0; j < grid[i].length; j++) {
                    if (grid[i][j] > max) {
                        max = grid[i][j];
                        maxRow = i;
                        maxCol = j;
                    }
                }
            }
            if (maxRow == -1) {
                break;
            }
            sum += max;
            grid[maxRow][maxCol] = 0;
            for (int i = 0; i < grid.length; i++) {
                int[] row = grid[i];
                int[] newRow = new int[row.length - 1];
                int k = 0;
                for (int j = 0; j < row.length; j++) {
                    if (j != maxCol) {
                        newRow[k++] = row[j];
                    }
                }
                grid[i] = newRow;
            }
        }
        return sum;

=======

        int n = grid.length;
        int m = grid[0].length;
        int[] max = new int[m];
        for (int i = 0; i < m; i++) {
            max[i] = grid[0][i];
        }
        int res = 0;
        for (int i = 0; i < n; i++) {
            int maxVal = 0;
            for (int j = 0; j < m; j++) {
                maxVal = Math.max(maxVal, grid[i][j]);
                if (maxVal > max[j]) {
                    max[j] = maxVal;
                }
            }
            res += maxVal;
        }
        return res;

=======

        int answer = 0;
        while (grid.length > 0) {
            int maxValue = 0;
            int maxRow = 0;
            int maxCol = 0;
            for (int row = 0; row < grid.length; row++) {
                for (int col = 0; col < grid[row].length; col++) {
                    if (grid[row][col] > maxValue) {
                        maxValue = grid[row][col];
                        maxRow = row;
                        maxCol = col;
                    }
                }
            }
            answer += maxValue;
            grid = removeColumn(grid, maxCol);
        }
        return answer;
    }
    
    private int[][] removeColumn(int[][] grid, int col) {
        int[][] newGrid = new int[grid.length][grid[0].length - 1];
        for (int row = 0; row < grid.length; row++) {
            int newCol = 0;
            for (int oldCol = 0; oldCol < grid[row].length; oldCol++) {
                if (oldCol == col) {
                    continue;
                }
                newGrid[row][newCol] = grid[row][oldCol];
                newCol++;
            }
        }
        return newGrid;

=======

        int row = grid.length;
        int col = grid[0].length;
        int ans = 0;
        while(col > 0) {
            int max = 0;
            int maxIndex = 0;
            for(int i = 0; i < row; i++) {
                int maxRow = 0;
                for(int j = 0; j < col; j++) {
                    maxRow = Math.max(maxRow, grid[i][j]);
                }
                if(maxRow > max) {
                    max = maxRow;
                    maxIndex = i;
                }
            }
            ans += max;
            for(int i = maxIndex; i < row - 1; i++) {
                grid[i] = grid[i + 1];
            }
            row--;
            col--;
        }
        return ans;

=======

        int result = 0;
        while(grid.length > 0) {
            int maxInRow = Integer.MIN_VALUE;
            int maxInRowIdx = -1;
            for(int i = 0; i < grid.length; i++) {
                for(int j = 0; j < grid[0].length; j++) {
                    if(grid[i][j] > maxInRow) {
                        maxInRow = grid[i][j];
                        maxInRowIdx = i;
                    }
                }
            }
            result += maxInRow;
            int[][] newGrid = new int[grid.length - 1][grid[0].length - 1];
            for(int i = 0, k = 0; i < grid.length; i++) {
                if(i == maxInRowIdx) continue;
                for(int j = 0, l = 0; j < grid[0].length; j++) {
                    if(grid[i][j] == maxInRow) continue;
                    newGrid[k][l++] = grid[i][j];
                }
                k++;
            }
            grid = newGrid;
        }
        return result;
    }
}
