Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int mask = (Integer.highestOneBit(num) << 1) - 1;
        return num ^ mask;

=======

        int mask = (Integer.highestOneBit(num) << 1) - 1;
        return ~num & mask;

=======

        int mask = 1;
        while (mask < num) {
            mask = (mask << 1) | 1;
        }
        return num ^ mask;

=======

        int mask = (Integer.highestOneBit(num) << 1) - 1;
        return mask ^ num;

=======

        int result = 0;
        int power = 1;
        while (num > 0) {
            if ((num & 1) == 0) {
                result += power;
            }
            num >>= 1;
            power <<= 1;
        }
        return result;

=======

        int x = 1;
        while (x < num) {
            x = (x << 1) + 1;
        }
        return x ^ num;

=======

        int n = num;
        int i = 0;
        while (n != 0) {
            n = n >> 1;
            num = num ^ (1 << i);
            i++;
        }
        return num;

=======

        int result = 0;
        int power = 0;
        while (num > 0) {
            if ((num & 1) == 0) {
                result += (1 << power);
            }
            num = num >> 1;
            power += 1;
        }
        return result;

=======

        int bit = 1;
        int res = 0;
        while (num != 0) {
            if ((num & 1) == 0) {
                res += bit;
            }
            bit <<= 1;
            num >>= 1;
        }
        return res;
