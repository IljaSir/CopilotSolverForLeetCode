Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int i = num1.length() - 1;
        int j = num2.length() - 1;
        int carry = 0;
        StringBuilder sb = new StringBuilder();
        while (i >= 0 || j >= 0) {
            int sum = carry;
            if (j >= 0) sum += num2.charAt(j--) - '0';
            if (i >= 0) sum += num1.charAt(i--) - '0';
            sb.append(sum % 10);
            carry = sum / 10;
        }
        if (carry != 0) sb.append(carry);
        return sb.reverse().toString();

=======

        int i = num1.length() - 1;
        int j = num2.length() - 1;
        int carry = 0;
        StringBuilder sb = new StringBuilder();
        while (i >= 0 || j >= 0) {
            int sum = carry;
            if (i >= 0) {
                sum += num1.charAt(i) - '0';
                i--;
            }
            if (j >= 0) {
                sum += num2.charAt(j) - '0';
                j--;
            }
            sb.append(sum % 10);
            carry = sum / 10;
        }
        if (carry != 0) {
            sb.append(carry);
        }
        return sb.reverse().toString();

=======

        int i = num1.length() - 1;
        int j = num2.length() - 1;
        int carry = 0;
        StringBuilder sb = new StringBuilder();
        while (i >= 0 || j >= 0) {
            int sum = carry;
            if (j >= 0) {
                sum += num2.charAt(j--) - '0';
            }
            if (i >= 0) {
                sum += num1.charAt(i--) - '0';
            }
            sb.append(sum % 10);
            carry = sum / 10;
        }
        if (carry != 0) {
            sb.append(carry);
        }
        return sb.reverse().toString();

=======

        StringBuilder result = new StringBuilder();
        int i = num1.length() - 1;
        int j = num2.length() - 1;
        int carry = 0;
        while (i >= 0 || j >= 0) {
            int sum = carry;
            if (i >= 0) {
                sum += num1.charAt(i) - '0';
                i--;
            }
            if (j >= 0) {
                sum += num2.charAt(j) - '0';
                j--;
            }
            carry = sum / 10;
            result.append(sum % 10);
        }
        if (carry > 0) {
            result.append(carry);
        }
        return result.reverse().toString();

=======

        int i = num1.length() - 1;
        int j = num2.length() - 1;
        int carry = 0;
        StringBuilder sb = new StringBuilder();
        while(i >= 0 || j >= 0 || carry > 0){
            int a = i >= 0 ? num1.charAt(i) - '0' : 0;
            int b = j >= 0 ? num2.charAt(j) - '0' : 0;
            int sum = a + b + carry;
            sb.append(sum % 10);
            carry = sum / 10;
            i--;
            j--;
        }
        return sb.reverse().toString();

=======

        int i = num1.length() - 1;
        int j = num2.length() - 1;
        int carry = 0;
        String ans = "";
        while(i >= 0 || j >= 0 || carry == 1){
            int sum = carry;
            if(i >= 0){
                sum += num1.charAt(i) - '0';
                i--;
            }
            if(j >= 0){
                sum += num2.charAt(j) - '0';
                j--;
            }
            ans = (sum % 10) + ans;
            carry = sum / 10;
        }
        return ans;

=======

        int i = num1.length() - 1;
        int j = num2.length() - 1;
        int carry = 0;
        String ans = "";
        while(i >= 0 || j >= 0){
            int sum = carry;
            if(i >= 0){
                sum += num1.charAt(i) - '0';
                i--;
            }
            if(j >= 0){
                sum += num2.charAt(j) - '0';
                j--;
            }
            ans = sum%10 + ans;
            carry = sum/10;
        }
        if(carry > 0){
            ans = carry + ans;
        }
        return ans;

=======

        int n1 = num1.length();
        int n2 = num2.length();
        int n = Math.max(n1, n2);
        int carry = 0;
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < n; i++) {
            int d1 = i < n1 ? num1.charAt(n1 - i - 1) - '0' : 0;
            int d2 = i < n2 ? num2.charAt(n2 - i - 1) - '0' : 0;
            int d = d1 + d2 + carry;
            carry = d / 10;
            sb.append(d % 10);
        }
        if (carry > 0) {
            sb.append(carry);
        }
        return sb.reverse().toString();
