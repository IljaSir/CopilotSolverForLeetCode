Synthesizing 10/10 solutions (Duplicates hidden)

=======

        if (n < 1) {
            return false;
        }
        while (n % 3 == 0) {
            n /= 3;
        }
        return n == 1;

=======

        if (n < 1) {
            return false;
        }
        while (n % 3 == 0) {
            n = n / 3;
        }
        return n == 1;

=======

        if (n == 0) return false;
        while (n % 3 == 0) {
            n /= 3;
        }
        return n == 1;

=======

        if (n == 1) {
            return true;
        }
        if (n == 0 || n % 3 != 0) {
            return false;
        }
        return isPowerOfThree(n / 3);

=======

        if(n==0) return false;
        if(n==1) return true;
        if(n%3!=0) return false;
        return isPowerOfThree(n/3);

=======

        if (n == 1) {
            return true;
        }
        if (n == 0 || n == -1) {
            return false;
        }
        if (n % 3 == 0) {
            return isPowerOfThree(n / 3);
        }
        return false;

=======

        if(n<1)
            return false;
        while(n%3==0)
            n/=3;
        return n==1;

=======

        if(n==0)
            return false;
        while(n%3==0){
            n=n/3;
        }
        return n==1;

=======

        if(n == 1){
            return true;
        }
        if(n == 0){
            return false;
        }
        int rem = n%3;
        if(rem != 0){
            return false;
        }
        return isPowerOfThree(n/3);
