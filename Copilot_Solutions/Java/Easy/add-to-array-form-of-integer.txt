Synthesizing 10/10 solutions

=======

        List<Integer> result = new ArrayList<>();
        int carry = 0;
        for (int i = num.length - 1; i >= 0; i--) {
            int sum = num[i] + k % 10 + carry;
            result.add(sum % 10);
            carry = sum / 10;
            k /= 10;
        }
        for (; k > 0 || carry > 0; k /= 10) {
            int sum = k % 10 + carry;
            result.add(sum % 10);
            carry = sum / 10;
        }
        Collections.reverse(result);
        return result;

=======

        List<Integer> result = new ArrayList<Integer>();
        int i = num.length - 1;
        while (i >= 0 || k > 0) {
            if (i >= 0) {
                k += num[i];
                i--;
            }
            result.add(k % 10);
            k /= 10;
        }
        Collections.reverse(result);
        return result;

=======

        int carry = 0;
        List<Integer> result = new ArrayList<>();
        for (int i = num.length - 1; i >= 0; i--) {
            int sum = num[i] + k % 10 + carry;
            result.add(sum % 10);
            carry = sum / 10;
            k /= 10;
        }
        for (; k > 0 || carry > 0; k /= 10) {
            int sum = k % 10 + carry;
            result.add(sum % 10);
            carry = sum / 10;
        }
        Collections.reverse(result);
        return result;

=======

        int i = num.length - 1;
        List<Integer> res = new ArrayList<>();
        while (i >= 0 || k > 0) {
            if (i >= 0) {
                k += num[i--];
            }
            res.add(0, k % 10);
            k /= 10;
        }
        return res;

=======

        int i = num.length - 1;
        List<Integer> res = new ArrayList<Integer>();
        while (i >= 0 || k > 0) {
            if (i >= 0) {
                k += num[i];
            }
            res.add(k % 10);
            k /= 10;
            i--;
        }
        Collections.reverse(res);
        return res;

=======

        List<Integer> result = new ArrayList<>();
        int carry = 0;
        int i = num.length - 1;
        while (i >= 0 || k > 0) {
            int sum = carry;
            if (i >= 0) {
                sum += num[i--];
            }
            if (k > 0) {
                sum += k % 10;
                k /= 10;
            }
            result.add(sum % 10);
            carry = sum / 10;
        }
        if (carry > 0) {
            result.add(carry);
        }
        Collections.reverse(result);
        return result;

=======

        int n = num.length;
        int i = n - 1;
        int carry = 0;
        List<Integer> ans = new ArrayList<>();
        while (i >= 0 || k > 0 || carry > 0) {
            int sum = carry;
            if (i >= 0) {
                sum += num[i];
                i--;
            }
            if (k > 0) {
                sum += k % 10;
                k /= 10;
            }
            carry = sum / 10;
            sum = sum % 10;
            ans.add(sum);
        }
        Collections.reverse(ans);
        return ans;

=======

        List<Integer> result = new ArrayList<>();
        int carry = 0;
        int i = num.length - 1;
        while (i >= 0 || k != 0) {
            int sum = carry;
            if (i >= 0) {
                sum += num[i];
            }
            if (k != 0) {
                sum += k % 10;
                k /= 10;
            }
            result.add(0, sum % 10);
            carry = sum / 10;
            i--;
        }
        if (carry != 0) {
            result.add(0, carry);
        }
        return result;

=======

        List<Integer> result = new ArrayList<>();
        int i = num.length-1;
        while(i>=0 || k>0){
            if(i>=0){
                k = k+num[i];
            }
            result.add(0,k%10);
            k = k/10;
            i--;
        }
        return result;

=======

        int carry = 0;
        int i = num.length - 1;
        List<Integer> result = new ArrayList<Integer>();
        while (k > 0 || i >= 0 || carry > 0) {
            int n = k % 10;
            int m = i >= 0 ? num[i] : 0;
            int sum = n + m + carry;
            result.add(0, sum % 10);
            carry = sum / 10;
            k = k / 10;
            i--;
        }
        return result;
