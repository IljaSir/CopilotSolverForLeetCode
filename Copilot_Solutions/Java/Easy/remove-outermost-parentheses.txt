Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int count = 0;
        StringBuilder sb = new StringBuilder();
        for (char c : s.toCharArray()) {
            if (c == '(' && count++ > 0) sb.append(c);
            if (c == ')' && count-- > 1) sb.append(c);
        }
        return sb.toString();

=======

        int open = 0;
        StringBuilder sb = new StringBuilder();
        for (char c : s.toCharArray()) {
            if (c == '(' && open++ > 0) sb.append(c);
            if (c == ')' && open-- > 1) sb.append(c);
        }
        return sb.toString();

=======

        StringBuilder sb = new StringBuilder();
        int count = 0;
        for (char c : s.toCharArray()) {
            if (c == '(') {
                count++;
                if (count > 1) {
                    sb.append(c);
                }
            } else {
                count--;
                if (count > 0) {
                    sb.append(c);
                }
            }
        }
        return sb.toString();

=======

        int count = 0;
        StringBuilder sb = new StringBuilder();
        for (char c : s.toCharArray()) {
            if (c == '(') {
                count++;
                if (count > 1) {
                    sb.append(c);
                }
            } else {
                count--;
                if (count > 0) {
                    sb.append(c);
                }
            }
        }
        return sb.toString();

=======

        StringBuilder sb = new StringBuilder();
        int openCount = 0;
        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            if (c == '(') {
                openCount++;
                if (openCount > 1) {
                    sb.append(c);
                }
            } else {
                openCount--;
                if (openCount > 0) {
                    sb.append(c);
                }
            }
        }
        return sb.toString();

=======

        int n = s.length();
        int count = 0;
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < n; i++) {
            if (s.charAt(i) == '(') {
                if (count > 0) {
                    sb.append(s.charAt(i));
                }
                count++;
            } else {
                if (count > 1) {
                    sb.append(s.charAt(i));
                }
                count--;
            }
        }
        return sb.toString();

=======

        int count = 0;
        StringBuilder sb = new StringBuilder();
        for(char c : s.toCharArray()){
            if(c == '('){
                if(count > 0){
                    sb.append(c);
                }
                count++;
            }else{
                count--;
                if(count > 0){
                    sb.append(c);
                }
            }
        }
        return sb.toString();

=======

        StringBuilder sb = new StringBuilder();
        int i = 0;
        int j = 0;
        while (j < s.length()) {
            if (s.charAt(j) == '(') {
                i++;
            } else {
                i--;
            }
            if (i == 0) {
                sb.append(s.substring(j - 1, j));
                j++;
                while (j < s.length()) {
                    if (s.charAt(j) == '(') {
                        i++;
                    } else {
                        i--;
                    }
                    if (i == 0) {
                        j++;
                        break;
                    }
                    sb.append(s.substring(j, j + 1));
                    j++;
                }
            } else {
                sb.append(s.substring(j, j + 1));
                j++;
            }
        }
        return sb.toString();
