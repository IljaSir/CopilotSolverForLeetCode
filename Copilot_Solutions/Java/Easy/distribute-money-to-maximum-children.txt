Synthesizing 10/10 solutions

=======

        if (money < children) return -1;
        if (money == children) return 0;
        if (money == children + 1) return 1;
        if (money == children + 2) return 2;
        if (money == children + 3) return 2;
        if (money == children + 4) return 2;
        if (money == children + 5) return 3;
        if (money == children + 6) return 3;
        if (money == children + 7) return 3;
        if (money == children + 8) return 3;
        if (money == children + 9) return 3;
        if (money == children + 10) return 4;
        if (money == children + 11) return 4;
        if (money == children + 12) return 4;
        if (money == children + 13) return 4;
        if (money == children + 14) return 4;
        if (money == children + 15) return 4;
        if (money == children + 16) return 4;
        if (money == children + 17) return 4;
        if (money == children + 18) return 4;
        if (money == children + 19) return 4;
        if (money == children + 20) return 4;
        if (money == children + 21) return 4;
        if (money == children + 22) return 4;
        if (money == children + 23) return 4;
        if (money == children + 24) return 4;
        if (money == children + 25) return 4;
        if (money == children + 26) return 4;
        if (money == children + 27) return 4;
        if (money == children + 28) return 4;
        if (money == children + 29) return 4;
        if (money == children + 30) return 4;
        if (money == children + 31) return 5;
        if (money == children + 32) return 5;
        if (money == children + 33) return 5;
        if (money == children + 34) return 5;

=======

        if (money < children) {
            return -1;
        }
        int x = money / children;
        if (x < 4) {
            return -1;
        }
        return Math.min(x - 3, children);

=======

        if (children * 8 > money) {
            return -1;
        }
        if (money - children * 8 == 0) {
            return children;
        }
        return 1 + (money - children * 8) / (children * 2);

=======

        if (money < 2 * children + 1) return -1;
        return Math.min(children, (money - 1) / 2 - children);

=======

        int ans = 0;
        while (money > 0) {
            ans = Math.min(children, money / 8);
            money -= ans * 8;
            children -= ans;
            if (money >= 4) {
                money -= 4;
                children--;
            } else {
                break;
            }
        }
        return money == 0 && children == 0 ? ans : -1;

=======

        int max = 0, min = 0;
        while (money > 0) {
            if (money >= 8) {
                money -= 8;
                max++;
            } else {
                min++;
                money--;
            }
        }
        if (min == children) {
            return max;
        }
        return -1;

=======

        if (money < children) return -1;
        if (money >= children * 8) return children;
        int result = money / 8;
        int left = money % 8;
        if (left == 0) return result;
        if (left == 1) return result - 1;
        if (left == 2) return result;
        if (left == 3) return result - 1;
        if (left == 4) return result;
        if (left == 5) return result - 1;
        if (left == 6) return result;
        if (left == 7) return result - 1;
        return result;

=======

        int n = children;
        int m = money;
        int res = 0;
        for (int i = 1; i <= n; i++) {
            if (m >= 8 && (m - 8) / (n - i) != 3) {
                res++;
                m -= 8;
            } else {
                m -= 1;
            }
        }
        if (m > 0) {
            return -1;
        } else {
            return res;
        }

=======

        if(money < children * 2 || money > children * 30)
            return -1;
        int num = money / children;
        if(num == 4)
            return -1;
        if(num > 8)
            return children;
        return money - 8 * children;

=======

        if (money < children + 4) {
            return -1;
        }
        int res = 0;
        int max = money - children;
        if (max % 8 == 0) {
            res = max / 8;
        } else {
            res = max / 8 + 1;
        }
        return res;
