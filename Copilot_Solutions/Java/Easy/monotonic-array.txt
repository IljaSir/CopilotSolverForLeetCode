Synthesizing 10/10 solutions

=======

        boolean increasing = true;
        boolean decreasing = true;
        for (int i = 0; i < nums.length - 1; i++) {
            if (nums[i] > nums[i + 1]) {
                increasing = false;
            }
            if (nums[i] < nums[i + 1]) {
                decreasing = false;
            }
        }
        return increasing || decreasing;

=======

        boolean isIncreasing = true;
        boolean isDecreasing = true;
        for (int i = 0; i < nums.length - 1; i++) {
            if (nums[i] < nums[i + 1]) {
                isDecreasing = false;
            }
            if (nums[i] > nums[i + 1]) {
                isIncreasing = false;
            }
        }
        return isIncreasing || isDecreasing;

=======

        int n = nums.length;
        if (n <= 2) {
            return true;
        }
        int i = 0;
        while (i < n - 1 && nums[i] == nums[i + 1]) {
            i++;
        }
        if (i == n - 1) {
            return true;
        }
        boolean isIncreasing = nums[i] < nums[i + 1];
        for (i = i + 1; i < n - 1; i++) {
            if (isIncreasing) {
                if (nums[i] > nums[i + 1]) {
                    return false;
                }
            } else {
                if (nums[i] < nums[i + 1]) {
                    return false;
                }
            }
        }
        return true;

=======

        boolean isIncreasing = true;
        boolean isDecreasing = true;
        for(int i=0; i<nums.length-1; i++){
            if(nums[i] > nums[i+1]){
                isIncreasing = false;
            }
            if(nums[i] < nums[i+1]){
                isDecreasing = false;
            }
        }
        return isIncreasing || isDecreasing;

=======

        int n = nums.length;
        if (n == 1) return true;
        int i = 0;
        while (i < n - 1 && nums[i] == nums[i + 1]) i++;
        if (i == n - 1) return true;
        boolean inc = nums[i] < nums[i + 1];
        for (int j = i + 1; j < n - 1; j++) {
            if (inc && nums[j] > nums[j + 1]) return false;
            if (!inc && nums[j] < nums[j + 1]) return false;
        }
        return true;

=======

        if (nums.length == 1) {
            return true;
        }
        boolean isIncreasing = nums[0] <= nums[nums.length - 1];
        for (int i = 1; i < nums.length; i++) {
            if (isIncreasing) {
                if (nums[i] < nums[i - 1]) {
                    return false;
                }
            } else {
                if (nums[i] > nums[i - 1]) {
                    return false;
                }
            }
        }
        return true;

=======

        if (nums.length == 1) {
            return true;
        }
        int i = 0;
        while (i < nums.length-1 && nums[i] == nums[i+1]) {
            i++;
        }
        if (i == nums.length-1) {
            return true;
        }
        boolean increasing = nums[i] < nums[i+1];
        for (int j = i; j < nums.length-1; j++) {
            if (increasing && nums[j] > nums[j+1]) {
                return false;
            } else if (!increasing && nums[j] < nums[j+1]) {
                return false;
            }
        }
        return true;

=======

        int n = nums.length;
        if (n == 1) return true;
        int i = 1;
        while (i < n && nums[i] == nums[i - 1]) i++;
        if (i == n) return true;
        if (nums[i] < nums[i - 1]) {
            while (i < n && nums[i] <= nums[i - 1]) i++;
        } else {
            while (i < n && nums[i] >= nums[i - 1]) i++;
        }
        return i == n;

=======

        if (nums.length < 3) return true;
        boolean inc = nums[0] <= nums[1];
        for (int i = 1; i < nums.length - 1; i++) {
            if (inc) {
                if (nums[i] > nums[i + 1]) return false;
            } else {
                if (nums[i] < nums[i + 1]) return false;
            }
        }
        return true;

=======

        int i, n = nums.length;
        boolean isIncreasing = true, isDecreasing = true;
        for (i = 0; i < n - 1; i++) {
            if (nums[i] > nums[i + 1]) {
                isIncreasing = false;
            }
            if (nums[i] < nums[i + 1]) {
                isDecreasing = false;
            }
        }
        return isIncreasing || isDecreasing;
