Synthesizing 8/10 solutions

=======

        int[] a = new int[]{Integer.parseInt(arriveAlice.substring(0, 2)), Integer.parseInt(arriveAlice.substring(3))};
        int[] b = new int[]{Integer.parseInt(leaveAlice.substring(0, 2)), Integer.parseInt(leaveAlice.substring(3))};
        int[] c = new int[]{Integer.parseInt(arriveBob.substring(0, 2)), Integer.parseInt(arriveBob.substring(3))};
        int[] d = new int[]{Integer.parseInt(leaveBob.substring(0, 2)), Integer.parseInt(leaveBob.substring(3))};
        int[] e = new int[]{Math.max(a[0], c[0]), Math.max(a[1], c[1])};
        int[] f = new int[]{Math.min(b[0], d[0]), Math.min(b[1], d[1])};
        if (e[0] > f[0] || (e[0] == f[0] && e[1] > f[1])) {
            return 0;
        }
        int[] g = new int[]{e[0], e[1]};
        int[] h = new int[]{f[0], f[1]};
        int[] i = new int[]{e[0], e[1]};
        int[] j = new int[]{f[0], f[1]};
        int[] k = new int[]{e[0], e[1]};
        int[] l = new int[]{f[0], f[1]};
        if (e[0] == f[0]) {
            return f[1] - e[1] + 1;
        }
        int[] m = new int[]{e[0], e[1]};
        int[] n = new int[]{f[0], f[1]};
        int[] o = new int[]{e[0], e[1]};
        int[] p = new int[]{f[0], f[1]};
        int[] q = new int[]{e[0], e[1]};
        int[] r = new int[]{f[0], f[1]};
        int[] s = new int[]{e[0], e[1]};
        int[] t = new int[]{f[0], f[1]};
        int[] u = new int[]{e[0], e[1]};
        int[] v = new int[]{f[

=======

        int[] start = {Integer.parseInt(arriveAlice.substring(0, 2)), Integer.parseInt(arriveAlice.substring(3, 5))};
        int[] end = {Integer.parseInt(leaveAlice.substring(0, 2)), Integer.parseInt(leaveAlice.substring(3, 5))};
        int[] start2 = {Integer.parseInt(arriveBob.substring(0, 2)), Integer.parseInt(arriveBob.substring(3, 5))};
        int[] end2 = {Integer.parseInt(leaveBob.substring(0, 2)), Integer.parseInt(leaveBob.substring(3, 5))};
        int[] start3 = {Math.max(start[0], start2[0]), Math.max(start[1], start2[1])};
        int[] end3 = {Math.min(end[0], end2[0]), Math.min(end[1], end2[1])};
        if (start3[0] > end3[0] || (start3[0] == end3[0] && start3[1] > end3[1])) {
            return 0;
        }
        int result = 0;
        int[] days = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
        for (int i = start3[0]; i <= end3[0]; i++) {
            if (i == start3[0] && i == end3[0]) {
                result += end3[1] - start3[1] + 1;
            } else if (i == start3[0]) {
                result += days[i - 1] - start3[1] + 1;
            } else if (i == end3[0]) {
                result += end3[1];
            } else {
                result += days[i - 1];
            }
        }
        return result;

=======

        int aliceStart = Integer.parseInt(arriveAlice.substring(0, 2)) * 30 + Integer.parseInt(arriveAlice.substring(3));
        int aliceEnd = Integer.parseInt(leaveAlice.substring(0, 2)) * 30 + Integer.parseInt(leaveAlice.substring(3));
        int bobStart = Integer.parseInt(arriveBob.substring(0, 2)) * 30 + Integer.parseInt(arriveBob.substring(3));
        int bobEnd = Integer.parseInt(leaveBob.substring(0, 2)) * 30 + Integer.parseInt(leaveBob.substring(3));
        int start = Math.max(aliceStart, bobStart);
        int end = Math.min(aliceEnd, bobEnd);
        if (end < start) {
            return 0;
        }
        return end - start + 1;

=======

        int[] alice = new int[2];
        int[] bob = new int[2];
        alice[0] = Integer.parseInt(arriveAlice.substring(0, 2));
        alice[1] = Integer.parseInt(arriveAlice.substring(3, 5));
        bob[0] = Integer.parseInt(arriveBob.substring(0, 2));
        bob[1] = Integer.parseInt(arriveBob.substring(3, 5));
        int[] leaveA = new int[2];
        int[] leaveB = new int[2];
        leaveA[0] = Integer.parseInt(leaveAlice.substring(0, 2));
        leaveA[1] = Integer.parseInt(leaveAlice.substring(3, 5));
        leaveB[0] = Integer.parseInt(leaveBob.substring(0, 2));
        leaveB[1] = Integer.parseInt(leaveBob.substring(3, 5));
        int[] days = new int[] {0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
        int res = 0;
        while (alice[0] < leaveA[0] || alice[1] < leaveA[1]) {
            if (alice[0] == bob[0] && alice[1] == bob[1]) {
                res++;
            }
            alice[1]++;
            if (alice[1] > days[alice[0]]) {
                alice[0]++;
                alice[1] = 1;
            }
        }
        while (bob[0] < leaveB[0] || bob[1] < leaveB[1]) {
            if (alice[0] == bob[0] && alice[1] == bob[1]) {
                res++;
            }
            bob[1]++;
            if (bob[1] > days[bob[0]]) {
                bob[0]++;
                bob[1] = 1;
            }
        }
        return res;

=======

        int days = 0;
        int start = Math.max(getDays(arriveAlice), getDays(arriveBob));
        int end = Math.min(getDays(leaveAlice), getDays(leaveBob));
        for (int i = start; i <= end; i++) {
            days++;
        }
        return days;
    }
    private int getDays(String date) {
        String[] arr = date.split("-");
        int month = Integer.parseInt(arr[0]);
        int day = Integer.parseInt(arr[1]);
        int days = 0;
        for (int i = 1; i < month; i++) {
            days += getDaysOfMonth(i);
        }
        days += day;
        return days;
    }
    private int getDaysOfMonth(int month) {
        if (month == 2) {
            return 28;
        }
        if (month == 4 || month == 6 || month == 9 || month == 11) {
            return 30;
        }
        return 31;

=======

        int[] days = new int[32];
        int[] months = new int[13];
        months[1] = 31;
        months[2] = 28;
        months[3] = 31;
        months[4] = 30;
        months[5] = 31;
        months[6] = 30;
        months[7] = 31;
        months[8] = 31;
        months[9] = 30;
        months[10] = 31;
        months[11] = 30;
        months[12] = 31;
        int m1 = Integer.parseInt(arriveAlice.substring(0, 2));
        int m2 = Integer.parseInt(leaveAlice.substring(0, 2));
        int d1 = Integer.parseInt(arriveAlice.substring(3));
        int d2 = Integer.parseInt(leaveAlice.substring(3));
        for (int i = m1; i <= m2; i++) {
            if (i == m1) {
                for (int j = d1; j <= days[i]; j++) {
                    days[j] = 1;
                }
            } else if (i == m2) {
                for (int j = 1; j <= d2; j++) {
                    days[j] = 1;
                }
            } else {
                for (int j = 1; j <= days[i]; j++) {
                    days[j] = 1;
                }
            }
        }
        m1 = Integer.parseInt(arriveBob.substring(0, 2));
        m2 = Integer.parseInt(leaveBob.substring(0, 2));
        d1 = Integer.parseInt(arriveBob.substring(3));
        d2 = Integer.parseInt(leaveBob.substring(3));
        for (int i = m1; i <= m2; i++) {
            if (i == m1) {
                for (int j = d1; j <= days[i]; j++) {
                    days[j] += 1;
                }
            } else if (i == m2) {
                for (int j = 1; j <= d2; j++) {
                    days[j] += 1;
                }
            } else {
                for (int j = 1; j <= days[i]; j++) {
                    days[j] += 1;
                }
            }

=======

        String[] date1 = arriveAlice.split("-");
        String[] date2 = leaveAlice.split("-");
        String[] date3 = arriveBob.split("-");
        String[] date4 = leaveBob.split("-");
        int[] day1 = new int[2];
        int[] day2 = new int[2];
        int[] day3 = new int[2];
        int[] day4 = new int[2];
        for (int i = 0; i < 2; i++) {
            day1[i] = Integer.parseInt(date1[i]);
            day2[i] = Integer.parseInt(date2[i]);
            day3[i] = Integer.parseInt(date3[i]);
            day4[i] = Integer.parseInt(date4[i]);
        }
        int[] daysInMonth = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
        int count = 0;
        for (int i = day1[0]; i <= day2[0]; i++) {
            if (i == day1[0] && i == day2[0]) {
                count += Math.min(day2[1], day4[1]) - Math.max(day1[1], day3[1]) + 1;
            } else if (i == day1[0]) {
                count += Math.min(daysInMonth[i - 1] - day1[1] + 1, day4[1]);
            } else if (i == day2[0]) {
                count += Math.min(day2[1], day4[1]);
            } else {
                count += Math.min(daysInMonth[i - 1], day4[1]);
            }
        }
        return count;

=======

        String[] a = arriveAlice.split("-");
        String[] b = leaveAlice.split("-");
        String[] c = arriveBob.split("-");
        String[] d = leaveBob.split("-");
        int[] x = new int[2];
        int[] y = new int[2];
        int[] z = new int[2];
        int[] w = new int[2];
        for (int i = 0; i < 2; i++) {
            x[i] = Integer.parseInt(a[i]);
            y[i] = Integer.parseInt(b[i]);
            z[i] = Integer.parseInt(c[i]);
            w[i] = Integer.parseInt(d[i]);
        }
        int days = 0;
        if (x[0] == z[0]) {
            if (x[1] > z[1]) {
                int temp = x[1];
                x[1] = z[1];
                z[1] = temp;
            }
            for (int i = x[1]; i <= y[1]; i++) {
                if (z[1] <= i && i <= w[1]) {
                    days++;
                }
            }
        } else {
            int[] month = new int[]{31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
            for (int i = x[0]; i <= y[0]; i++) {
                if (i == x[0]) {
                    for (int j = x[1]; j <= month[i - 1]; j++) {
                        if (z[0] <= i && i <= w[0]) {
                            if (z[1] <= j && j <= w[1]) {
                                days++;
                            }
                        }
                    }
                } else if (i == y[0]) {
                    for (int j = 1; j <= y[1]; j++) {
                        if (z[0] <= i && i <= w[0]) {
                            if (z[1] <= j && j <= w[1]) {
                                days++;
                            }
                        }
                    }
                } else {
                    for (int j = 1; j <= month[i - 1]; j++) {
                        if (z[0] <= i && i <= w[0]) {
                            if (z[1
