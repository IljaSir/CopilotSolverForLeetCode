Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int count = 0;
        for (int i = 1; i < nums.length; i++) {
            if (nums[i] <= nums[i - 1]) {
                count++;
                if (count > 1) {
                    return false;
                }
                if (i > 1 && nums[i] <= nums[i - 2]) {
                    nums[i] = nums[i - 1];
                }
            }
        }
        return true;

=======

        int n = nums.length;
        int count = 0;
        for (int i = 1; i < n; i++) {
            if (nums[i] <= nums[i - 1]) {
                count++;
                if (i - 2 < 0 || nums[i] > nums[i - 2]) {
                    nums[i - 1] = nums[i];
                } else {
                    nums[i] = nums[i - 1];
                }
            }
        }
        return count <= 1;

=======

        int index = -1;
        for (int i = 1; i < nums.length; i++) {
            if (nums[i] <= nums[i-1]) {
                if (index != -1) {
                    return false;
                }
                index = i;
            }
        }
        if (index == -1 || index == 1 || index == nums.length - 1) {
            return true;
        }
        if (nums[index - 1] < nums[index + 1] || nums[index - 2] < nums[index]) {
            return true;
        }
        return false;

=======

        int count = 0;
        for(int i = 1; i < nums.length; i++) {
            if(nums[i] <= nums[i-1]) {
                count++;
                if(i == 1 || i == nums.length-1) {
                    continue;
                }
                if(nums[i] > nums[i-2]) {
                    nums[i-1] = nums[i-2];
                } else {
                    nums[i] = nums[i-1];
                }
            }
        }
        return count <= 1;

=======

        int n = nums.length;
        int count = 0;
        for(int i = 1; i < n; i++){
            if(nums[i] <= nums[i - 1]){
                count++;
                if(count > 1) return false;
                if(i - 2 >= 0 && nums[i] <= nums[i - 2]) nums[i] = nums[i - 1];
            }
        }
        return true;

=======

        if (nums.length <= 2) {
            return true;
        }
        int cnt = 0;
        for (int i = 1; i < nums.length; i++) {
            if (nums[i-1] >= nums[i]) {
                cnt++;
                if (cnt > 1) {
                    return false;
                }
                if (i >= 2 && nums[i-2] >= nums[i]) {
                    nums[i] = nums[i-1];
                }
            }
        }
        return true;

=======

        if (nums.length == 2) return true;
        int i = 0;
        while (i < nums.length - 1 && nums[i] < nums[i + 1]) i++;
        if (i == nums.length - 1) return true;
        if (i == 0 || nums[i - 1] < nums[i + 1]) {
            int j = i + 1;
            while (j < nums.length - 1 && nums[j] < nums[j + 1]) j++;
            if (j == nums.length - 1) return true;
            else return false;
        } else if (i == nums.length - 2 || nums[i] < nums[i + 2]) {
            int j = i + 2;
            while (j < nums.length - 1 && nums[j] < nums[j + 1]) j++;
            if (j == nums.length - 1) return true;
            else return false;
        } else return false;

=======

        int len = nums.length;
        int[] left = new int[len];
        int[] right = new int[len];
        left[0] = nums[0];
        for (int i = 1; i < len; i++) {
            left[i] = Math.max(left[i - 1], nums[i]);
        }
        right[len - 1] = nums[len - 1];
        for (int i = len - 2; i >= 0; i--) {
            right[i] = Math.min(right[i + 1], nums[i]);
        }
        for (int i = 0; i < len; i++) {
            if (i == 0 && nums[i] < right[i + 1]) {
                return true;
            }
            if (i == len - 1 && nums[i] > left[i - 1]) {
                return true;
            }
            if (i > 0 && i < len - 1 && nums[i] > left[i - 1] && nums[i] < right[i + 1]) {
                return true;
            }
        }
        return false;

=======

        int len = nums.length;
        if(len == 2){
            return true;
        }
        int index = -1;
        for(int i = 1; i < len; i++){
            if(nums[i] <= nums[i - 1]){
                if(index != -1){
                    return false;
                }
                index = i;
            }
        }
        if(index == -1){
            return true;
        }
        if(index == 1 || index == len - 1){
            return true;
        }
        if(nums[index - 1] < nums[index + 1]){
            return true;
        }
        if(nums[index - 2] < nums[index]){
            return true;
        }
        return false;
