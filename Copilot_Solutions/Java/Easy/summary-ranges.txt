Synthesizing 10/10 solutions

=======

        List<String> result = new ArrayList<>();
        if (nums.length == 0) {
            return result;
        }
        int start = nums[0];
        int end = nums[0];
        for (int i = 1; i < nums.length; i++) {
            if (nums[i] == end + 1) {
                end = nums[i];
            } else {
                result.add(getRange(start, end));
                start = nums[i];
                end = nums[i];
            }
        }
        result.add(getRange(start, end));
        return result;
    }
    private String getRange(int start, int end) {
        if (start == end) {
            return Integer.toString(start);
        } else {
            return start + "->" + end;
        }

=======

        List<String> result = new ArrayList<>();
        if (nums == null || nums.length == 0) {
            return result;
        }
        int start = nums[0];
        int end = nums[0];
        for (int i = 1; i < nums.length; i++) {
            if (nums[i] == end + 1) {
                end = nums[i];
            } else {
                result.add(getRange(start, end));
                start = nums[i];
                end = nums[i];
            }
        }
        result.add(getRange(start, end));
        return result;
    }
    private String getRange(int start, int end) {
        if (start == end) {
            return String.valueOf(start);
        } else {
            return start + "->" + end;
        }

=======

        List<String> result = new ArrayList<>();
        for (int i = 0; i < nums.length; i++) {
            int start = nums[i];
            while (i + 1 < nums.length && nums[i + 1] == nums[i] + 1) {
                i++;
            }
            if (start != nums[i]) {
                result.add(start + "->" + nums[i]);
            } else {
                result.add(start + "");
            }
        }
        return result;

=======

        List<String> res = new ArrayList<>();
        if (nums.length == 0) return res;
        int start = nums[0], end = nums[0];
        for (int i = 1; i < nums.length; i++) {
            if (nums[i] == end + 1) {
                end = nums[i];
            } else {
                res.add(start == end ? String.valueOf(start) : start + "->" + end);
                start = end = nums[i];
            }
        }
        res.add(start == end ? String.valueOf(start) : start + "->" + end);
        return res;

=======

        List<String> res = new ArrayList<>();
        if (nums.length == 0) return res;
        int start = nums[0];
        int end = nums[0];
        for (int i = 1; i < nums.length; i++) {
            if (nums[i] == nums[i - 1] + 1) {
                end = nums[i];
            } else {
                String s = start == end ? String.valueOf(start) : (start + "->" + end);
                res.add(s);
                start = nums[i];
                end = nums[i];
            }
        }
        String s = start == end ? String.valueOf(start) : (start + "->" + end);
        res.add(s);
        return res;

=======

        List<String> res = new ArrayList<>();
        int n = nums.length;
        for (int i = 0; i < n; i++) {
            int a = nums[i];
            while (i + 1 < n && nums[i + 1] == nums[i] + 1) {
                i++;
            }
            if (a == nums[i]) {
                res.add("" + a);
            } else {
                res.add(a + "->" + nums[i]);
            }
        }
        return res;

=======

        List<String> result = new ArrayList<>();
        if (nums == null || nums.length == 0) return result;
        int start = nums[0];
        int end = nums[0];
        for (int i = 1; i < nums.length; i++) {
            if (nums[i] == end + 1) {
                end = nums[i];
            } else {
                if (start == end) {
                    result.add(String.valueOf(start));
                } else {
                    result.add(start + "->" + end);
                }
                start = nums[i];
                end = nums[i];
            }
        }
        if (start == end) {
            result.add(String.valueOf(start));
        } else {
            result.add(start + "->" + end);
        }
        return result;

=======

        List<String> result = new ArrayList<>();
        if (nums.length == 0) {
            return result;
        }
        int start = 0;
        for (int i = 1; i <= nums.length; i++) {
            if (i == nums.length || nums[i] != nums[i-1] + 1) {
                if (i - 1 == start) {
                    result.add(String.valueOf(nums[start]));
                } else {
                    result.add(nums[start] + "->" + nums[i-1]);
                }
                start = i;
            }
        }
        return result;

=======

        List<String> res = new ArrayList<>();
        if (nums == null || nums.length == 0) return res;
        int n = nums.length;
        int start = nums[0];
        int end = nums[0];
        for (int i = 1; i < n; i++) {
            if (nums[i] == nums[i - 1] + 1) {
                end = nums[i];
            } else {
                if (start == end) {
                    res.add("" + start);
                } else {
                    res.add(start + "->" + end);
                }
                start = nums[i];
                end = nums[i];
            }
        }
        if (start == end) {
            res.add("" + start);
        } else {
            res.add(start + "->" + end);
        }
        return res;

=======

        List<String> result = new ArrayList<String>();
        if (nums.length == 0) {
            return result;
        }
        int start = nums[0];
        for (int i = 0; i < nums.length - 1; i++) {
            if (nums[i] + 1 != nums[i + 1]) {
                result.add(nums[i] == start ? Integer.toString(start) : start + "->" + nums[i]);
                start = nums[i + 1];
            }
        }
        result.add(nums[nums.length - 1] == start ? Integer.toString(start) : start + "->" + nums[nums.length - 1]);
        return result;
