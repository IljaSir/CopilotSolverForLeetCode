Synthesizing 10/10 solutions

=======

        int min = Integer.MAX_VALUE;
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] != 0 && nums[i] < min) {
                min = nums[i];
            }
        }
        if (min == Integer.MAX_VALUE) {
            return 0;
        }
        int count = 0;
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] != 0) {
                nums[i] -= min;
                count++;
            }
        }
        return count + minimumOperations(nums);

=======

        int count = 0;
        Arrays.sort(nums);
        for (int i = 1; i < nums.length; i++) {
            if (nums[i] <= nums[i - 1]) {
                count += nums[i - 1] - nums[i] + 1;
                nums[i] = nums[i - 1] + 1;
            }
        }
        return count;

=======

        Arrays.sort(nums);
        int ans = 0;
        for (int i = 1; i < nums.length; i++) {
            if (nums[i] > nums[i - 1]) {
                ans += i;
            }
        }
        return ans;

=======

        int count = 0;
        int min = Integer.MAX_VALUE;
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] != 0) {
                min = Math.min(min, nums[i]);
            }
        }
        if (min == Integer.MAX_VALUE) {
            return 0;
        }
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] != 0) {
                nums[i] -= min;
                count++;
            }
        }
        return count + minimumOperations(nums);

=======

        int count = 0;
        Arrays.sort(nums);
        for(int i = nums.length - 1; i > 0; i--) {
            if(nums[i] > nums[i - 1]) {
                count += nums[i] - nums[i - 1];
            }
        }
        return count;

=======

        int count = 0;
        Arrays.sort(nums);
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] == nums[i + 1]) {
                count++;
            }
        }
        return count;

=======

        int res = 0;
        int min = Integer.MAX_VALUE;
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] == 0) {
                continue;
            } else {
                min = Math.min(min, nums[i]);
            }
        }
        if (min == Integer.MAX_VALUE) {
            return 0;
        } else {
            for (int i = 0; i < nums.length; i++) {
                if (nums[i] == 0) {
                    continue;
                } else {
                    nums[i] -= min;
                    res++;
                }
            }
        }
        return res + minimumOperations(nums);

=======

        int count = 0;
        int min = 100;
        for(int i = 0; i < nums.length; i++){
            if(nums[i] != 0 && nums[i] < min){
                min = nums[i];
            }
        }
        if(min == 100){
            return 0;
        }
        for(int i = 0; i < nums.length; i++){
            if(nums[i] != 0){
                nums[i] = nums[i] - min;
                count++;
            }
        }
        return count + minimumOperations(nums);
    }
}

=======

        int min = 100;
        int count = 0;
        for(int i=0;i<nums.length;i++){
            if(nums[i]<min && nums[i]!=0){
                min = nums[i];
            }
        }
        for(int i=0;i<nums.length;i++){
            if(nums[i]!=0){
                nums[i] = nums[i] - min;
                count++;
            }
        }
        boolean flag = false;
        for(int i=0;i<nums.length;i++){
            if(nums[i]!=0){
                flag = true;
                break;
            }
        }
        if(flag){
            count = count + minimumOperations(nums);
        }
        return count;

=======

        int count = 0;
        int min = 101;
        boolean flag = true;
        while(flag){
            flag = false;
            min = 101;
            for(int i=0;i<nums.length;i++){
                if(nums[i] != 0){
                    flag = true;
                    if(nums[i] < min){
                        min = nums[i];
                    }
                }
            }
            if(flag){
                count++;
                for(int i=0;i<nums.length;i++){
                    nums[i] = nums[i] - min;
                }
            }
        }
        return count;
