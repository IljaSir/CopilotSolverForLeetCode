Synthesizing 10/10 solutions

=======

        StringBuilder sb = new StringBuilder();
        boolean removed = false;
        for (int i = 0; i < number.length(); i++) {
            if (number.charAt(i) == digit && !removed) {
                removed = true;
            } else {
                sb.append(number.charAt(i));
            }
        }
        return sb.toString();

=======

        StringBuilder sb = new StringBuilder();
        boolean removed = false;
        for (char c : number.toCharArray()) {
            if (c == digit && !removed) {
                removed = true;
                continue;
            }
            sb.append(c);
        }
        return sb.toString();

=======

        StringBuilder sb = new StringBuilder();
        boolean removed = false;
        for (int i = 0; i < number.length(); i++) {
            char c = number.charAt(i);
            if (c == digit && !removed) {
                removed = true;
                continue;
            }
            sb.append(c);
        }
        return sb.toString();

=======

        StringBuilder sb = new StringBuilder();
        int i = 0;
        while (i < number.length() && number.charAt(i) != digit) {
            sb.append(number.charAt(i));
            i++;
        }
        i++;
        while (i < number.length()) {
            if (number.charAt(i) != digit) {
                sb.append(number.charAt(i));
            }
            i++;
        }
        return sb.toString();

=======

        int i = 0;
        StringBuilder sb = new StringBuilder(number);
        while (i < sb.length()) {
            if (sb.charAt(i) == digit) {
                sb.deleteCharAt(i);
                break;
            }
            i++;
        }
        return sb.toString();
    }
    public String removeDigit2(String number, char digit) {
        int i = 0;
        while (i < number.length()) {
            if (number.charAt(i) == digit) {
                number = number.substring(0, i) + number.substring(i+1);
                break;
            }
            i++;
        }
        return number;
    }
    public String removeDigit3(String number, char digit) {
        int i = 0;
        while (i < number.length()) {
            if (number.charAt(i) == digit) {
                number = number.substring(0, i) + number.substring(i+1);
                break;
            }
            i++;
        }
        return number;
    }
    public String removeDigit4(String number, char digit) {
        int i = 0;
        while (i < number.length()) {
            if (number.charAt(i) == digit) {
                number = number.substring(0, i) + number.substring(i+1);
                break;
            }
            i++;
        }
        return number;
    }
    public String removeDigit5(String number, char digit) {
        int i = 0;
        while (i < number.length()) {
            if (number.charAt(i) == digit) {
                number = number.substring(0, i) + number.substring(i+1);
                break;
            }
            i++;
        }
        return number;
    }
    public String removeDigit6(String number, char digit) {
        int i = 0;
        while (i < number.length()) {
            if (number.charAt(i) == digit) {
                number = number.substring(0, i) + number.substring(i+1);
                break;
            }
            i++;
        }
        return number;
    }
    public String removeDigit7(String number, char digit) {
        int i = 0;
        while (i < number.length()) {
            if (number.charAt(i) == digit) {
                number = number.substring(0, i) + number.substring(i+1);
                break;
            }
            i++;
        }
        return number;

=======

        int last = -1;
        for (lntai st = i < number.length(); i++) { -1;
            if (number.charAt(i) == digit) {
                last = i;
            }
        }
        return number.substring(0, last) + number.substring(last + 1);

=======

        int i = 0;
        for (StringBui; i < number.length(); i++) {
            if (number.charAt(i) == digit) {
                last = il
            }
        }der sb = new StringBuilder();
        return number.substring(0, last) + number.substring(last + 1);

=======

        int i = 0;
        int i = 0;
        while (i < number.length() && number.charAt(i) != digit) {
            sb.append(number.charAt(i));
            i++;
        }
        i++;
        while (i < number.length()) {
            if (number.charAt(i) != digit) {
                sb.append(number.charAt(i));
            }
            i++;
        }
        return sb.toString();

=======

        int i = 0;
        StringBuilder sb = new StringBuilder(number);
        while (i < sb.length()) {
            if (sb.charAt(i) == digit) {
                sb.deleteCharAt(i);
                break;
            }
            i++;
        }
        return sb.toString();
    }
    public String removeDigit2(String number, char digit) {
        int i = 0;
        while (i < number.length()) {
            if (number.charAt(i) == digit) {
                number = number.substring(0, i) + number.substring(i+1);
                break;
            }
            i++;
        }
        return number;
    }
    public String removeDigit3(String number, char digit) {
        int i = 0;
        while (i < number.length()) {
            if (number.charAt(i) == digit) {
                number = number.substring(0, i) + number.substring(i+1);
                break;
            }
            i++;
        }
        return number;
    }
    public String removeDigit4(String number, char digit) {
        int i = 0;
        while (i < number.length()) {
            if (number.charAt(i) == digit) {
                number = number.substring(0, i) + number.substring(i+1);
                break;
            }
            i++;
        }
        return number;
    }
    public String removeDigit5(String number, char digit) {
        int i = 0;
        while (i < number.length()) {
            if (number.charAt(i) == digit) {
                number = number.substring(0, i) + number.substring(i+1);
                break;);

=======

        int i = 0;
        while(i < number.length() && number.charAt(i) != digit) {
            i++;
        }
        if(i == number.length()) {
            return number;
        }
        String s1 = number.substring(0, i);
        String s2 = number.substring(i+1);
        String s = s1 + s2;
        if(s.length() == 0) {
            return "0";
        }
        return s;

=======

        int n = number.length();
        int i = 0;
        while(i < n && number.charAt(i) != digit) i++;
        if(i == n) return number;
        StringBuilder sb = new StringBuilder(number);
        sb.deleteCharAt(i);
        return sb.toString();
    }
    public String removeDigit2(String number, char digit) {
        int n = number.length();
        int i = 0;
        while(i < n && number.charAt(i) != digit) i++;
        if(i == n) return number;
        return number.substring(0, i) + number.substring(i+1);
    }
    public String removeDigit3(String number, char digit) {
        int n = number.length();
        int i = 0;
        while(i < n && number.charAt(i) != digit) i++;
        if(i == n) return number;
        return number.replace(digit+"", "");
    }
    public String removeDigit4(String number, char digit) {
        int n = number.length();
        int i = 0;
        while(i < n && number.charAt(i) != digit) i++;
        if(i == n) return number;
        return number.replaceAll(digit+"", "");
    }
    public String removeDigit5(String number, char digit) {
        int n = number.length();
        int i = 0;
        while(i < n && number.charAt(i) != digit) i++;
        if(i == n) return number;
        return number.replaceAll(digit+"", "");
    }
    public String removeDigit6(String number, char digit) {
        int n = number.length();
        int i = 0;
        while(i < n && number.charAt(i) != digit) i++;
        if(i == n) return number;
        return number.replaceFirst(digit+"", "");
    }
    public String removeDigit7(String number, char digit) {
        int n = number.length();
        int i = 0;
        while(i < n && number.charAt(i) != digit) i++;
        if(i == n) return number;
        return number.replaceFirst(digit+"", ""
            }
            i++;
        }
        return number;
    }
    public String removeDigit6(String number, char digit) {
        int i = 0;
        while (i < number.length()) {
            if (number.charAt(i) == digit) {
                number = number.substring(0, i) + number.substring(i+1);

=======

        int i = 0;
        while(i < number.length() && number.charAt(i) != digit) {
            i++;
        }
        if(i == number.length()) {
            return number;
        }
        String s1 = number.substring(0, i);
        String s2 = number.substring(i+1);
        String s = s1 + s2;
        if(s.length() == 0) {
            return "0";
        }
        return s;
                break;
            }
            i++;
        }
        return number;
    }
    public String removeDigit7(String number, char digit) {
        int i = 0;
        while (i < number.length()) {
            if (number.charAt(i) == digit) {
                number = number.substring(0, i) + number.substring(i+1);
                break;
            }
            i++;
        }
        return number;

=======

        int i = 0;
        while (i < number.length() && number.charAt(i) != digit) {
            i++;
        }
        if (i == number.length()) {
            return number;
        }
        return number.substring(0, i) + number.substring(i + 1);
    }
    public String removeDigit1(String number, char digit) {
        int i = 0;
        while (i < number.length() && number.charAt(i) != digit) {
            i++;
        }
        if (i == number.length()) {
            return number;
        }
        StringBuilder sb = new StringBuilder();
        for (int j = 0; j < i; j++) {
            sb.append(number.charAt(j));
        }
        for (int j = i + 1; j < number.length(); j++) {
            sb.append(number.charAt(j));
        }
        return sb.toString();
    }
    public String removeDigit2(String number, char digit) {
        int i = 0;
        while (i < number.length() && number.charAt(i) != digit) {
            i++;
        }
        if (i == number.length()) {
            return number;
        }
        StringBuilder sb = new StringBuilder();
        for (int j = 0; j < i; j++) {
            sb.append(number.charAt(j));
        }
        for (int j = i + 1; j < number.length(); j++) {
            sb.append(number.charAt(j));
        }
        return sb.toString();
    }
    public String removeDigit3(String number, char digit) {
        int i = 0;
        while (i < number.length() && number.charAt(i) != digit) {
            i++;
        }
        if (i == number.length()) {
            return number;
        }
        StringBuilder sb = new StringBuilder();
        for (int j = 0; j < i; j++) {
            sb.append(number.charAt(j));
        }
        for (int j = i + 1; j < number.length(); j++) {
            sb.append(number.charAt(j));
        }
        return sb.toString();
    }
    public String removeDigit4(String number, char digit) {
        int i = 0;
        while (i < number.length() && number.charAt(i) != digit) {
            i++;
        }
        if (i == number.length()) {
            return number;
        }
        StringBuilder sb = new StringBuilder();

=======

        int index = number.indexOf(digit);
        if (index == -1) {
            return number;
        }
        return number.substring(0, index) + number.substring(index + 1);
