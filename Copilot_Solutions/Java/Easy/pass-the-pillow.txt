Synthesizing 9/10 solutions

=======

        int t = time % (2 * n - 2);
        return t < n ? t + 1 : 2 * n - t - 1;

=======

        int dir = 1;
        int pos = 1;
        int i = 0;
        while (i < time) {
            pos += dir;
            if (pos == n || pos == 1) {
                dir *= -1;
            }
            i++;
        }
        return pos;

=======

        int direction = 1;
        int index = 0;
        while (time > 1) {
            index += direction;
            time--;
            if (index == n - 1) {
                direction = -1;
            }
            if (index == 0) {
                direction = 1;
            }
        }
        return index + 1;

=======

        int count = 0;
        int i = 1;
        int dir = 1;
        while (count < time) {
            if (i == n) {
                dir = -1;
            }
            if (i == 1) {
                dir = 1;
            }
            i += dir;
            count++;
        }
        return i;

=======

        int[] people = new int[n];
        for (int i = 0; i < n; i++) {
            people[i] = i + 1;
        }
        int[] timeArr = new int[time];
        int count = 0;
        int index = 0;
        int direction = 1;
        while (count < time) {
            if (index == n - 1) {
                direction = -1;
            }
            if (index == 0) {
                direction = 1;
            }
            index += direction;
            timeArr[count] = people[index];
            count++;
        }
        return timeArr[time - 1];

=======

        int left = 1;
        int right = n;
        int direction = 1;
        int t = 0;
        while (t < time) {
            if (direction == 1) {
                if (left < right) {
                    left++;
                } else {
                    direction = 0;
                    left--;
                }
            } else {
                if (left > right) {
                    left--;
                } else {
                    direction = 1;
                    left++;
                }
            }
            t++;
        }
        return left;

=======

        int ans = 1;
        int m = time / (n - 1);
        int r = time % (n - 1);
        if (m % 2 == 0) {
            ans = 1 + r;
        } else {
            ans = n - r;
        }
        return ans;

=======

        int[] arr = new int[n];
        int index = 0;
        int i = 0;
        while (i < time) {
            arr[index]++;
            if (index == 0) {
                index++;
            } else if (index == n - 1) {
                index--;
            } else {
                if (arr[index] % 2 == 0) {
                    index--;
                } else {
                    index++;
                }
            }
            i++;
        }
        return index + 1;

=======

        int[] a = new int[n];
        int i = 0, j = n - 1, c = 0;
        while (c < time) {
            a[i] = 1;
            a[j] = 1;
            c++;
            i++;
            j--;
            if (i == j) {
                i = 0;
                j = n - 1;
            }
        }
        for (int k = 0; k < n; k++) {
            if (a[k] == 1) {
                return k + 1;
            }
        }
        return 0;
