Synthesizing 10/10 solutions

=======

        int n = arr.length;
        int count = 1;
        for (int i = 1; i < n; i++) {
            if (arr[i] == arr[i - 1]) {
                count++;
                if (count > n / 4) {
                    return arr[i];
                }
            } else {
                count = 1;
            }
        }
        return arr[0];

=======

        int n = arr.length;
        int count = 1;
        for (int i = 1; i < n; i++) {
            if (arr[i] == arr[i - 1]) {
                count++;
                if (count > n / 4) return arr[i];
            } else {
                count = 1;
            }
        }
        return arr[0];

=======

        int len = arr.length;
        int count = 1;
        for (int i = 1; i < len; i++) {
            if (arr[i] == arr[i - 1]) {
                count++;
                if (count > len / 4) {
                    return arr[i];
                }
            } else {
                count = 1;
            }
        }
        return arr[0];

=======

        int n = arr.length;
        int count = 1;
        for (int i = 1; i < n; i++) {
            if (arr[i] == arr[i-1]) {
                count++;
            } else {
                count = 1;
            }
            if (count > n / 4) {
                return arr[i];
            }
        }
        return arr[0];

=======

        int n = arr.length;
        int limit = n / 4;
        for (int i = 0; i < n; i++) {
            if (arr[i] == arr[i + limit]) {
                return arr[i];
            }
        }
        return -1;

=======

        int n = arr.length;
        int count = 0;
        int index = 0;
        for (int i = 0; i < n; i++) {
            if (arr[i] == arr[index]) {
                count++;
            } else {
                count = 1;
                index = i;
            }
            if (count > n / 4) {
                return arr[index];
            }
        }
        return -1;

=======

        int n = arr.length;
        int target = n / 4;
        for (int i = 0; i < n; i++) {
            int j = i + target;
            if (j >= n) {
                j = n - 1;
            }
            if (arr[j] == arr[i]) {
                return arr[i];
            }
        }
        return 0;

=======

        int n = arr.length;
        int count = 0;
        int max = 0;
        int ans = arr[0];
        for (int i = 0; i < n; i++) {
            if (arr[i] == arr[i+1]) {
                count++;
            } else {
                count = 0;
            }
            if (count > max) {
                max = count;
                ans = arr[i];
            }
        }
        return ans;

=======

        int len = arr.length;
        int count = 0;
        for(int i=0; i<len; i++){
            if(arr[i] == arr[i+1]){
                count++;
            }else{
                if(count > len/4){
                    return arr[i];
                }
                count = 0;
            }
        }
        return 0;

=======

        int len = arr.length;
        int count = 0;
        int cur = 0;
        for(int i = 0; i < len; i++) {
            if (arr[i] == cur) {
                count++;
            } else {
                cur = arr[i];
                count = 1;
            }
            if (count > len / 4) {
                return cur;
            }
        }
        return -1;
