Synthesizing 10/10 solutions

=======

        int[] count = new int[26];
        for (int i = 0; i < s.length(); i++) {
            count[s.charAt(i) - 'a']++;
        }
        for (int i = 0; i < s.length(); i++) {
            if (count[s.charAt(i) - 'a'] > 1) {
                return s.charAt(i);
            }
        }
        return ' ';

=======

        int[] count = new int[26];
        for (char c : s.toCharArray()) {
            count[c - 'a']++;
        }
        for (char c : s.toCharArray()) {
            if (count[c - 'a'] > 1) {
                return c;
            }
        }
        return ' ';

=======

        Map<Character, Integer> map = new HashMap<>();
        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            if (map.containsKey(c)) {
                return c;
            } else {
                map.put(c, i);
            }
        }
        return ' ';

=======

        int[] count = new int[26];
        for (char c : s.toCharArray()) {
            count[c - 'a']++;
            if (count[c - 'a'] == 2) {
                return c;
            }
        }
        return ' ';

=======

        int[] freq = new int[26];
        for (char c : s.toCharArray()) {
            freq[c - 'a']++;
        }
        for (char c : s.toCharArray()) {
            if (freq[c - 'a'] > 1) {
                return c;
            }
        }
        return ' ';

=======

        Map<Character, Integer> map = new HashMap<Character, Integer>();
        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            if (map.containsKey(c)) {
                return c;
            } else {
                map.put(c, 1);
            }
        }
        return ' ';

=======

        Set<Character> set = new HashSet<>();
        for(int i = 0; i < s.length(); i++){
            if(set.contains(s.charAt(i)))
                return s.charAt(i);
            set.add(s.charAt(i));
        }
        return ' ';
    }
}

=======

        char[] array = s.toCharArray();
        Set<Character> set = new HashSet<>();
        for (char c : array) {
            if (set.contains(c)) {
                return c;
            }
            set.add(c);
        }
        return ' ';

=======

        int[] freq = new int[26];
        for (int i = 0; i < s.length(); i++) {
            int index = s.charAt(i) - 'a';
            freq[index]++;
        }
        for (int i = 0; i < s.length(); i++) {
            int index = s.charAt(i) - 'a';
            if (freq[index] > 1) {
                return s.charAt(i);
            }
        }
        return ' ';

=======

        int[] arr = new int[26];
        for (int i = 0; i < s.length(); i++) {
            int index = s.charAt(i) - 'a';
            arr[index] = arr[index] + 1;
        }
        for (int i = 0; i < s.length(); i++) {
            int index = s.charAt(i) - 'a';
            if (arr[index] > 1) {
                return s.charAt(i);
            }
        }
        return ' ';
