Synthesizing 10/10 solutions

=======

        int[] years = new int[101];
        for (int[] log : logs) {
            years[log[0] - 1950]++;
            years[log[1] - 1950]--;
        }
        int max = 0;
        int maxYear = 0;
        int count = 0;
        for (int i = 0; i < years.length; i++) {
            count += years[i];
            if (count > max) {
                max = count;
                maxYear = i + 1950;
            }
        }
        return maxYear;

=======

        int[] years = new int[101];
        for (int[] log : logs) {
            years[log[0] - 1950]++;
            years[log[1] - 1950]--;
        }
        int max = 0, index = 0;
        for (int i = 1; i < 101; i++) {
            years[i] += years[i - 1];
            if (years[i] > max) {
                max = years[i];
                index = i;
            }
        }
        return index + 1950;

=======

        int[] years = new int[101];
        for (int[] log : logs) {
            for (int i = log[0] - 1950; i < log[1] - 1950; i++) {
                years[i]++;
            }
        }
        int max = 0;
        int maxYear = 0;
        for (int i = 0; i < 101; i++) {
            if (years[i] > max) {
                max = years[i];
                maxYear = i;
            }
        }
        return 1950 + maxYear;

=======

        int[] population = new int[101];
        for (int[] log : logs) {
            for (int i = log[0] - 1950; i < log[1] - 1950; i++) {
                population[i]++;
            }
        }
        int max = 0;
        int year = 0;
        for (int i = 0; i < population.length; i++) {
            if (population[i] > max) {
                max = population[i];
                year = i;
            }
        }
        return year + 1950;

=======

        int[] count = new int[2051];
        for (int[] log : logs) {
            count[log[0]]++;
            count[log[1]]--;
        }
        int max = count[1950];
        int year = 1950;
        for (int i = 1951; i < 2051; i++) {
            count[i] += count[i - 1];
            if (count[i] > max) {
                max = count[i];
                year = i;
            }
        }
        return year;

=======

        int[] years = new int[2051];
        for (int[] log : logs) {
            years[log[0]]++;
            years[log[1]]--;
        }
        int max = 0;
        int year = 0;
        int current = 0;
        for (int i = 1950; i <= 2050; i++) {
            current += years[i];
            if (current > max) {
                max = current;
                year = i;
            }
        }
        return year;

=======

        int[] pop = new int[2051];
        for (int[] log : logs) {
            pop[log[0]]++;
            pop[log[1]]--;
        }
        int maxPop = 0;
        int maxYear = 0;
        int curPop = 0;
        for (int i = 1950; i <= 2050; i++) {
            curPop += pop[i];
            if (curPop > maxPop) {
                maxPop = curPop;
                maxYear = i;
            }
        }
        return maxYear;

=======

        int[] diff = new int[2051];
        for (int[] log : logs) {
            diff[log[0]]++;
            diff[log[1]]--;
        }
        int max = 0, year = 0, cur = 0;
        for (int i = 1950; i < 2051; i++) {
            cur += diff[i];
            if (cur > max) {
                max = cur;
                year = i;
            }
        }
        return year;

=======

        int[] years = new int[2051];
        for (int[] log : logs) {
            years[log[0]]++;
            years[log[1]]--;
        }
        int max = 0, index = 0;
        for (int i = 1950; i < 2051; i++) {
            years[i] += years[i - 1];
            if (years[i] > max) {
                max = years[i];
                index = i;
            }
        }
        return index;

=======

        int[] year = new int[2051];
        for (int[] log : logs) {
            year[log[0]]++;
            year[log[1]]--;
        }
        int max = 0, result = 0;
        for (int i = 1950; i < 2051; i++) {
            year[i] += year[i - 1];
            if (year[i] > max) {
                max = year[i];
                result = i;
            }
        }
        return result;
