Synthesizing 10/10 solutions

=======

        Map<String, Integer> map = new HashMap<>();
        for (String s : arr) {
            map.put(s, map.getOrDefault(s, 0) + 1);
        }
        List<String> list = new ArrayList<>();
        for (String s : map.keySet()) {
            if (map.get(s) == 1) {
                list.add(s);
            }
        }
        return list.size() >= k ? list.get(k - 1) : "";

=======

        Map<String, Integer> map = new HashMap<>();
        for (String s : arr) {
            map.put(s, map.getOrDefault(s, 0) + 1);
        }
        List<String> list = new ArrayList<>();
        for (String s : map.keySet()) {
            if (map.get(s) == 1) {
                list.add(s);
            }
        }
        if (list.size() < k) {
            return "";
        }
        return list.get(k - 1);

=======

        HashMap<String, Integer> map = new HashMap<>();
        for (int i = 0; i < arr.length; i++) {
            if (map.containsKey(arr[i])) {
                map.put(arr[i], map.get(arr[i]) + 1);
            } else {
                map.put(arr[i], 1);
            }
        }
        int count = 0;
        for (int i = 0; i < arr.length; i++) {
            if (map.get(arr[i]) == 1) {
                count++;
            }
            if (count == k) {
                return arr[i];
            }
        }
        return "";

=======

        Set<String> set = new HashSet<>();
        for (String s: arr) {
            set.add(s);
            if (set.size() == k) {
                return s;
            }
        }
        return "";

=======

        Set<String> set = new HashSet<>();
        for (String s : arr) {
            if (!set.contains(s)) {
                set.add(s);
                k--;
                if (k == 0) {
                    return s;
                }
            }
        }
        return "";

=======

        Set<String> set = new HashSet<>();
        for (String s : arr) {
            if (set.add(s)) {
                k--;
                if (k == 0) {
                    return s;
                }
            }
        }
        return "";

=======

        int count = 0;
        Set<String> set = new HashSet<>();
        for (String s : arr) {
            if (set.add(s)) {
                count++;
                if (count == k) {
                    return s;
                }
            }
        }
        return "";

=======

        Set<String> set = new HashSet<>();
        for (String s : arr) {
            set.add(s);
        }
        List<String> list = new ArrayList<>(set);
        Collections.sort(list);
        return k <= list.size() ? list.get(k - 1) : "";

=======

        if (arr == null || arr.length == 0 || k > arr.length) {
            return "";
        }
        Set<String> set = new HashSet<>();
        for (String s : arr) {
            set.add(s);
        }
        if (set.size() < k) {
            return "";
        }
        List<String> list = new ArrayList<>(set);
        return list.get(k - 1);

=======

    	Map<String, Integer> map = new HashMap<>();
    	for (String str : arr) {
    		map.put(str, map.getOrDefault(str, 0) + 1);
    	}
    	for (String str : arr) {
    		if (map.get(str) == 1) {
    			if (k == 1) {
    				return str;
    			}
    			k--;
    		}
    	}
    	return "";
