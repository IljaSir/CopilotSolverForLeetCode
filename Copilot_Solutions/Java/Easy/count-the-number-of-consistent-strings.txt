Synthesizing 10/10 solutions

=======

        int count = 0;
        for (String word : words) {
            boolean isConsistent = true;
            for (int i = 0; i < word.length(); i++) {
                if (allowed.indexOf(word.charAt(i)) == -1) {
                    isConsistent = false;
                    break;
                }
            }
            if (isConsistent) count++;
        }
        return count;

=======

        int count = 0;
        for (String word : words) {
            boolean consistent = true;
            for (char c : word.toCharArray()) {
                if (!allowed.contains(String.valueOf(c))) {
                    consistent = false;
                    break;
                }
            }
            if (consistent) {
                count++;
            }
        }
        return count;

=======

        int count = 0;
        for (String word : words) {
            boolean isConsistent = true;
            for (int i = 0; i < word.length(); i++) {
                if (!allowed.contains(String.valueOf(word.charAt(i)))) {
                    isConsistent = false;
                    break;
                }
            }
            if (isConsistent) {
                count++;
            }
        }
        return count;

=======

        int count = 0;
        for (String word : words) {
            int i = 0;
            for (; i < word.length(); i++) {
                if (allowed.indexOf(word.charAt(i)) == -1) {
                    break;
                }
            }
            if (i == word.length()) {
                count++;
            }
        }
        return count;

=======

        int[] a = new int[26];
        for (int i = 0; i < allowed.length(); i++) {
            a[allowed.charAt(i) - 'a']++;
        }
        int count = 0;
        for (int i = 0; i < words.length; i++) {
            int j = 0;
            for (; j < words[i].length(); j++) {
                if (a[words[i].charAt(j) - 'a'] == 0) {
                    break;
                }
            }
            if (j == words[i].length()) {
                count++;
            }
        }
        return count;

=======

        int[] allowedArr = new int[26];
        for (int i = 0; i < allowed.length(); i++) {
            allowedArr[allowed.charAt(i) - 'a'] = 1;
        }
        int count = 0;
        for (String word : words) {
            int i = 0;
            for (; i < word.length(); i++) {
                if (allowedArr[word.charAt(i) - 'a'] == 0) {
                    break;
                }
            }
            if (i == word.length()) {
                count++;
            }
        }
        return count;

=======

        int count = 0;
        for (String word : words) {
            boolean valid = true;
            for (int i = 0; i < word.length(); i++) {
                if (allowed.indexOf(word.charAt(i)) == -1) {
                    valid = false;
                    break;
                }
            }
            if (valid) {
                count++;
            }
        }
        return count;

=======

        int count = 0;
        for (String word : words) {
            boolean flag = true;
            for (int i = 0; i < word.length(); i++) {
                if (!allowed.contains(word.charAt(i) + "")) {
                    flag = false;
                    break;
                }
            }
            if (flag) {
                count++;
            }
        }
        return count;

=======

        int count = 0;
        Set<Character> set = new HashSet<>();
        for (char c: allowed.toCharArray()) {
            set.add(c);
        }
        
        for (String word: words) {
            boolean isConsistent = true;
            for (char c: word.toCharArray()) {
                if (!set.contains(c)) {
                    isConsistent = false;
                    break;
                }
            }
            if (isConsistent) {
                count++;
            }
        }
        return count;

=======

        int[] count = new int[26];
        for (char c: allowed.toCharArray()) {
            count[c - 'a']++;
        }
        int ans = 0;
        for (String w: words) {
            boolean flag = true;
            for (char c: w.toCharArray()) {
                if (count[c - 'a'] == 0) {
                    flag = false;
                    break;
                }
            }
            if (flag) {
                ans++;
            }
        }
        return ans;
