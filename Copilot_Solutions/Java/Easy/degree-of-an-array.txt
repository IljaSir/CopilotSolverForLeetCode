Synthesizing 10/10 solutions

=======

        Map<Integer, Integer> left = new HashMap();
        Map<Integer, Integer> right = new HashMap();
        Map<Integer, Integer> count = new HashMap();

        for (int i = 0; i < nums.length; i++) {
            int x = nums[i];
            if (left.get(x) == null) left.put(x, i);
            right.put(x, i);
            count.put(x, count.getOrDefault(x, 0) + 1);
        }

        int ans = nums.length;
        int degree = Collections.max(count.values());
        for (int x: count.keySet()) {
            if (count.get(x) == degree) {
                ans = Math.min(ans, right.get(x) - left.get(x) + 1);
            }
        }
        return ans;

=======

        Map<Integer, Integer> count = new HashMap();
        Map<Integer, Integer> left = new HashMap();
        Map<Integer, Integer> right = new HashMap();

        for (int i = 0; i < nums.length; i++) {
            int x = nums[i];
            if (left.get(x) == null) left.put(x, i);
            right.put(x, i);
            count.put(x, count.getOrDefault(x, 0) + 1);
        }

        int ans = nums.length;
        int degree = Collections.max(count.values());
        for (int x: count.keySet()) {
            if (count.get(x) == degree) {
                ans = Math.min(ans, right.get(x) - left.get(x) + 1);
            }
        }
        return ans;

=======

        int[] left = new int[50000], right = new int[50000], count = new int[50000];
        for (int i = 0; i < nums.length; i++) {
            int x = nums[i];
            if (count[x]++ == 0) left[x] = i;
            right[x] = i;
        }
        int ans = nums.length, degree = 0;
        for (int i = 0; i < 50000; i++) {
            if (count[i] > degree) {
                degree = count[i];
                ans = right[i] - left[i] + 1;
            } else if (count[i] == degree) {
                ans = Math.min(ans, right[i] - left[i] + 1);
            }
        }
        return ans;

=======

        HashMap<Integer, Integer> left = new HashMap(), right = new HashMap(), count = new HashMap();
        for (int i = 0; i < nums.length; i++) {
            int x = nums[i];
            if (left.get(x) == null) left.put(x, i);
            right.put(x, i);
            count.put(x, count.getOrDefault(x, 0) + 1);
        }

        int ans = nums.length;
        int degree = Collections.max(count.values());
        for (int x: count.keySet()) {
            if (count.get(x) == degree) {
                ans = Math.min(ans, right.get(x) - left.get(x) + 1);
            }
        }
        return ans;

=======

        Map<Integer, Integer> count = new HashMap<Integer, Integer>();
        Map<Integer, Integer> left = new HashMap<Integer, Integer>();
        Map<Integer, Integer> right = new HashMap<Integer, Integer>();
        for (int i = 0; i < nums.length; i++) {
            int x = nums[i];
            if (left.get(x) == null) left.put(x, i);
            right.put(x, i);
            count.put(x, count.getOrDefault(x, 0) + 1);
        }
        int ans = nums.length;
        int degree = Collections.max(count.values());
        for (int x: count.keySet()) {
            if (count.get(x) == degree) {
                ans = Math.min(ans, right.get(x) - left.get(x) + 1);
            }
        }
        return ans;

=======

        Map<Integer, Integer> count = new HashMap<>();
        Map<Integer, Integer> first = new HashMap<>();
        int res = nums.length;
        int degree = 0;
        for (int i = 0; i < nums.length; i++) {
            first.putIfAbsent(nums[i], i);
            count.put(nums[i], count.getOrDefault(nums[i], 0) + 1);
            if (count.get(nums[i]) > degree) {
                degree = count.get(nums[i]);
                res = i - first.get(nums[i]) + 1;
            } else if (count.get(nums[i]) == degree) {
                res = Math.min(res, i - first.get(nums[i]) + 1);
            }
        }
        return res;

=======

        int max = 0;
        Map<Integer, Integer> left = new HashMap(), right = new HashMap(), count = new HashMap();
        for (int i = 0; i < nums.length; i++) {
            int x = nums[i];
            if (left.get(x) == null) left.put(x, i);
            right.put(x, i);
            count.put(x, count.getOrDefault(x, 0) + 1);
            max = Math.max(max, count.get(x));
        }
        int ans = nums.length;
        for (int x: count.keySet()) {
            if (count.get(x) == max) {
                ans = Math.min(ans, right.get(x) - left.get(x) + 1);
            }
        }
        return ans;

=======

        int max = 0;
        Map<Integer, Integer> count = new HashMap<>();
        Map<Integer, Integer> first = new HashMap<>();
        for (int i = 0; i < nums.length; i++) {
            if (first.get(nums[i]) == null) first.put(nums[i], i);
            count.put(nums[i], count.getOrDefault(nums[i], 0) + 1);
            max = Math.max(max, count.get(nums[i]));
        }
        int min = nums.length;
        for (int key : count.keySet()) {
            if (count.get(key) == max)
                min = Math.min(min, i - first.get(key) + 1);
        }
        return min;

=======

        int degree = 0;
        int min = Integer.MAX_VALUE;
        Map<Integer, Integer> count = new HashMap<>();
        Map<Integer, Integer> first = new HashMap<>();
        for (int i = 0; i < nums.length; i++) {
            int n = nums[i];
            count.put(n, count.getOrDefault(n, 0) + 1);
            degree = Math.max(degree, count.get(n));
            first.putIfAbsent(n, i);
            if (count.get(n) == degree) {
                min = Math.min(min, i - first.get(n) + 1);
            }
        }
        return min;

=======

        if (nums.length == 1) return 1;
        Map<Integer, Integer> count = new HashMap<>();
        Map<Integer, Integer> first = new HashMap<>();
        int res = 0, degree = 0;
        for (int i = 0; i < nums.length; i++) {
            first.putIfAbsent(nums[i], i);
            count.put(nums[i], count.getOrDefault(nums[i], 0) + 1);
            if (count.get(nums[i]) > degree) {
                degree = count.get(nums[i]);
                res = i - first.get(nums[i]) + 1;
            } else if (count.get(nums[i]) == degree) {
                res = Math.min(res, i - first.get(nums[i]) + 1);
            }
        }
        return res;
