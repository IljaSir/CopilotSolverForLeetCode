Synthesizing 10/10 solutions

=======

        int m = grid.length;
        int n = grid[0].length;
        int[] arr = new int[m * n];
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                arr[i * n + j] = grid[i][j];
            }
        }
        k %= m * n;
        int[] arr2 = new int[m * n];
        for (int i = 0; i < m * n; i++) {
            arr2[(i + k) % (m * n)] = arr[i];
        }
        List<List<Integer>> res = new ArrayList<>();
        for (int i = 0; i < m; i++) {
            List<Integer> list = new ArrayList<>();
            for (int j = 0; j < n; j++) {
                list.add(arr2[i * n + j]);
            }
            res.add(list);
        }
        return res;

=======

        int m = grid.length;
        int n = grid[0].length;
        int[][] newGrid = new int[m][n];
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                int newJ = (j + k) % n;
                int newI = i + (j + k) / n;
                newGrid[newI % m][newJ] = grid[i][j];
            }
        }
        List<List<Integer>> result = new ArrayList<>();
        for (int i = 0; i < m; i++) {
            List<Integer> row = new ArrayList<>();
            for (int j = 0; j < n; j++) {
                row.add(newGrid[i][j]);
            }
            result.add(row);
        }
        return result;

=======

        int m = grid.length;
        int n = grid[0].length;
        int[][] newGrid = new int[m][n];
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                int a = (i * n + j + k) % (m * n);
                int newI = a / n;
                int newJ = a % n;
                newGrid[newI][newJ] = grid[i][j];
            }
        }
        List<List<Integer>> ans = new ArrayList<>();
        for (int i = 0; i < m; i++) {
            List<Integer> row = new ArrayList<>();
            for (int j = 0; j < n; j++) {
                row.add(newGrid[i][j]);
            }
            ans.add(row);
        }
        return ans;

=======

        int m = grid.length;
        int n = grid[0].length;
        int[][] res = new int[m][n];
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                res[(i + (j + k) / n) % m][(j + k) % n] = grid[i][j];
            }
        }
        List<List<Integer>> ans = new ArrayList<List<Integer>>(m);
        for (int i = 0; i < m; i++) {
            ans.add(new ArrayList<Integer>(n));
            for (int j = 0; j < n; j++) {
                ans.get(i).add(res[i][j]);
            }
        }
        return ans;

=======

        int m = grid.length;
        int n = grid[0].length;
        int[][] res = new int[m][n];
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                res[(i + (j + k) / n) % m][(j + k) % n] = grid[i][j];
            }
        }
        List<List<Integer>> result = new ArrayList<>();
        for (int i = 0; i < m; i++) {
            List<Integer> row = new ArrayList<>();
            for (int j = 0; j < n; j++) {
                row.add(res[i][j]);
            }
            result.add(row);
        }
        return result;

=======

        int m = grid.length, n = grid[0].length;
        int[] arr = new int[m * n];
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                arr[(i * n + j + k) % (m * n)] = grid[i][j];
            }
        }
        List<List<Integer>> res = new ArrayList<>();
        for (int i = 0; i < m; i++) {
            List<Integer> list = new ArrayList<>();
            for (int j = 0; j < n; j++) {
                list.add(arr[i * n + j]);
            }
            res.add(list);
        }
        return res;

=======

        int m = grid.length;
        int n = grid[0].length;
        int[] tmp = new int[m * n];
        int index = 0;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                tmp[index++] = grid[i][j];
            }
        }
        k %= (m * n);
        if (k != 0) {
            reverse(tmp, 0, m * n - 1);
            reverse(tmp, 0, k - 1);
            reverse(tmp, k, m * n - 1);
        }
        index = 0;
        List<List<Integer>> ans = new ArrayList<>();
        for (int i = 0; i < m; i++) {
            List<Integer> row = new ArrayList<>();
            for (int j = 0; j < n; j++) {
                row.add(tmp[index++]);
            }
            ans.add(row);
        }
        return ans;
    }
    private void reverse(int[] nums, int start, int end) {
        while (start < end) {
            int tmp = nums[start];
            nums[start] = nums[end];
            nums[end] = tmp;
            start++;
            end--;
        }

=======

        int m = grid.length;
        int n = grid[0].length;
        int[] temp = new int[m*n];
        int index = 0;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                temp[index++] = grid[i][j];
            }
        }
        k = k % (m*n);
        for (int i = 0; i < k; i++) {
            int last = temp[m*n-1];
            for (int j = m*n-1; j > 0; j--) {
                temp[j] = temp[j-1];
            }
            temp[0] = last;
        }
        List<List<Integer>> result = new ArrayList<>();
        index = 0;
        for (int i = 0; i < m; i++) {
            List<Integer> row = new ArrayList<>();
            for (int j = 0; j < n; j++) {
                row.add(temp[index++]);
            }
            result.add(row);
        }
        return result;

=======

        List<List<Integer>> res = new ArrayList<>();
        int m = grid.length;
        int n = grid[0].length;
        int[] arr = new int[m * n];
        int idx = 0;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                arr[idx++] = grid[i][j];
            }
        }
        k = k % (m * n);
        int[] resArr = new int[m * n];
        for (int i = 0; i < m * n; i++) {
            resArr[(i + k) % (m * n)] = arr[i];
        }
        idx = 0;
        for (int i = 0; i < m; i++) {
            List<Integer> list = new ArrayList<>();
            for (int j = 0; j < n; j++) {
                list.add(resArr[idx++]);
            }
            res.add(list);
        }
        return res;

=======

        int m = grid.length;
        int n = grid[0].length;
        int[][] tmp = new int[m][n];
        int[][] res = new int[m][n];
        for (int i=0; i<m; i++) {
            for (int j=0; j<n; j++) {
                tmp[i][j] = grid[i][j];
            }
        }
        for (int i=0; i<m; i++) {
            for (int j=0; j<n; j++) {
                int newI = (i + (j + k) / n) % m;
                int newJ = (j + k) % n;
                res[newI][newJ] = tmp[i][j];
            }
        }
        List<List<Integer>> result = new ArrayList<List<Integer>>();
        for (int i=0; i<m; i++) {
            List<Integer> row = new ArrayList<Integer>();
            for (int j=0; j<n; j++) {
                row.add(res[i][j]);
            }
            result.add(row);
        }
        return result;
