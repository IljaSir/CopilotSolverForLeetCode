Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int count = 0;
        for (int i = 0; i < s.length() - 2; i++) {
            if (s.charAt(i) != s.charAt(i + 1) && s.charAt(i + 1) != s.charAt(i + 2) && s.charAt(i) != s.charAt(i + 2)) {
                count++;
            }
        }
        return count;

=======

        int result = 0;
        for (int i = 0; i < s.length() - 2; i++) {
            if (s.charAt(i) != s.charAt(i + 1) && s.charAt(i + 1) != s.charAt(i + 2) && s.charAt(i) != s.charAt(i + 2)) {
                result++;
            }
        }
        return result;

=======

        int ans = 0;
        for (int i = 0; i < s.length() - 2; i++) {
            if (s.charAt(i) != s.charAt(i + 1) && s.charAt(i) != s.charAt(i + 2) && s.charAt(i + 1) != s.charAt(i + 2)) {
                ans++;
            }
        }
        return ans;

=======

        if (s.length() < 3) {
            return 0;
        }
        int count = 0;
        for (int i = 0; i <= s.length() - 3; i++) {
            if (s.charAt(i) != s.charAt(i + 1) && s.charAt(i) != s.charAt(i + 2) && s.charAt(i + 1) != s.charAt(i + 2)) {
                count++;
            }
        }
        return count;

=======

        int count = 0;
        int n = s.length();
        for (int i = 0; i < n - 2; i++) {
            String sub = s.substring(i, i + 3);
            if (sub.charAt(0) != sub.charAt(1) && sub.charAt(1) != sub.charAt(2) && sub.charAt(0) != sub.charAt(2))
                count++;
        }
        return count;

=======

        int n = s.length();
        if(n < 3) return 0;
        int count = 0;
        for(int i=0; i<n-2; i++){
            if(s.charAt(i) != s.charAt(i+1) && s.charAt(i) != s.charAt(i+2) && s.charAt(i+1) != s.charAt(i+2))
                count++;
        }
        return count;
