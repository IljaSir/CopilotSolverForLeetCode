Synthesizing 10/10 solutions

=======

        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < number.length(); i++) {
            if (number.charAt(i) != '-' && number.charAt(i) != ' ') {
                sb.append(number.charAt(i));
            }
        }
        number = sb.toString();
        sb = new StringBuilder();
        int i = 0;
        while (i < number.length() - 4) {
            sb.append(number.substring(i, i + 3));
            sb.append('-');
            i += 3;
        }
        if (number.length() - i == 2) {
            sb.append(number.substring(i, i + 2));
        } else {
            sb.append(number.substring(i, i + 3));
        }
        return sb.toString();

=======

        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < number.length(); i++) {
            if (number.charAt(i) >= '0' && number.charAt(i) <= '9') {
                sb.append(number.charAt(i));
            }
        }
        StringBuilder result = new StringBuilder();
        int i = 0;
        while (i < sb.length()) {
            if (sb.length() - i <= 4) {
                if (sb.length() - i == 2) {
                    result.append(sb.charAt(i));
                    result.append(sb.charAt(i + 1));
                } else if (sb.length() - i == 3) {
                    result.append(sb.charAt(i));
                    result.append(sb.charAt(i + 1));
                    result.append(sb.charAt(i + 2));
                } else if (sb.length() - i == 4) {
                    result.append(sb.charAt(i));
                    result.append(sb.charAt(i + 1));
                    result.append('-');
                    result.append(sb.charAt(i + 2));
                    result.append(sb.charAt(i + 3));
                }
                break;
            } else {
                result.append(sb.charAt(i));
                result.append(sb.charAt(i + 1));
                result.append(sb.charAt(i + 2));
                result.append('-');
                i += 3;
            }
        }
        return result.toString();

=======

        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < number.length(); i++) {
            if (Character.isDigit(number.charAt(i))) {
                sb.append(number.charAt(i));
            }
        }
        number = sb.toString();
        sb = new StringBuilder();
        int i = 0;
        while (i < number.length() - 4) {
            sb.append(number.substring(i, i + 3));
            sb.append('-');
            i += 3;
        }
        if (number.length() - i == 3) {
            sb.append(number.substring(i, i + 3));
        } else {
            sb.append(number.substring(i, i + 2));
            sb.append('-');
            sb.append(number.substring(i + 2, i + 4));
        }
        return sb.toString();

=======

        StringBuilder sb = new StringBuilder();
        for (char c : number.toCharArray()) {
            if (Character.isDigit(c)) {
                sb.append(c);
            }
        }
        int n = sb.length();
        int i = 0;
        StringBuilder ans = new StringBuilder();
        while (i < n) {
            if (n - i == 4) {
                ans.append(sb.substring(i, i + 2));
                ans.append('-');
                ans.append(sb.substring(i + 2, i + 4));
                break;
            } else if (n - i == 2) {
                ans.append(sb.substring(i, i + 2));
                break;
            } else if (n - i == 3) {
                ans.append(sb.substring(i, i + 3));
                break;
            } else {
                ans.append(sb.substring(i, i + 3));
                ans.append('-');
                i += 3;
            }
        }
        return ans.toString();

=======

        StringBuilder sb = new StringBuilder();
        for (char c : number.toCharArray()) {
            if (Character.isDigit(c)) {
                sb.append(c);
            }
        }
        int n = sb.length();
        StringBuilder res = new StringBuilder();
        for (int i = 0; i < n; i++) {
            if (i > 0 && (i % 3 == 0)) {
                if (n - i == 4) {
                    res.append('-');
                } else {
                    res.append('-');
                }
            }
            res.append(sb.charAt(i));
        }
        return res.toString();

=======

        StringBuilder sb = new StringBuilder();
        for (char c : number.toCharArray()) {
            if (Character.isDigit(c)) {
                sb.append(c);
            }
        }
        int n = sb.length();
        int i = 0;
        StringBuilder res = new StringBuilder();
        while (i < n) {
            if (i + 4 == n) {
                res.append(sb.substring(i, i + 2));
                res.append('-');
                res.append(sb.substring(i + 2, i + 4));
                break;
            } else if (i + 2 == n) {
                res.append(sb.substring(i, i + 2));
                break;
            } else {
                res.append(sb.substring(i, i + 3));
                res.append('-');
                i += 3;
            }
        }
        return res.toString();

=======

        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < number.length(); i++) {
            if (Character.isDigit(number.charAt(i))) {
                sb.append(number.charAt(i));
            }
        }
        String digits = sb.toString();
        int n = digits.length();
        sb = new StringBuilder();
        for (int i = 0; i < n; i += 3) {
            if (i + 4 <= n) {
                sb.append(digits.substring(i, i + 3)).append('-');
            } else if (i + 2 == n) {
                sb.append(digits.substring(i, i + 2));
            } else {
                sb.append(digits.substring(i, i + 3));
            }
        }
        return sb.toString();

=======

        StringBuilder sb = new StringBuilder();
        for (char c : number.toCharArray()) {
            if (Character.isDigit(c)) {
                sb.append(c);
            }
        }
        int len = sb.length();
        int i = 0;
        while (i < len - 4) {
            sb.insert(i + 3, '-');
            len++;
            i += 4;
        }
        if (len - i == 4) {
            sb.insert(i + 2, '-');
        }
        return sb.toString();

=======

        number = number.replaceAll("[^0-9]", "");
        int n = number.length();
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < n; i++) {
            if (i > 0 && (i % 3 == 0 || (i + 4 == n || i + 2 == n))) {
                sb.append('-');
            }
            sb.append(number.charAt(i));
        }
        return sb.toString();

=======

        number = number.replace(" ", "").replace("-", "");
        int length = number.length();
        int index = 0;
        StringBuilder sb = new StringBuilder();
        while (index < length) {
            if (length - index >= 4) {
                sb.append(number.substring(index, index + 3)).append("-");
                index += 3;
            } else if (length - index == 3) {
                sb.append(number.substring(index, index + 3));
                index += 3;
            } else {
                sb.append(number.substring(index, index + 2));
                index += 2;
            }
        }
        return sb.toString();
