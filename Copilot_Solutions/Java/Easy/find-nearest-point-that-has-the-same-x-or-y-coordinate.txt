Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int min = Integer.MAX_VALUE;
        int index = -1;
        for (int i = 0; i < points.length; i++) {
            if (points[i][0] == x || points[i][1] == y) {
                int dist = Math.abs(x - points[i][0]) + Math.abs(y - points[i][1]);
                if (dist < min) {
                    min = dist;
                    index = i;
                }
            }
        }
        return index;

=======

        int minDistance = Integer.MAX_VALUE;
        int minIndex = -1;
        for (int i = 0; i < points.length; i++) {
            if (points[i][0] == x || points[i][1] == y) {
                int distance = Math.abs(points[i][0] - x) + Math.abs(points[i][1] - y);
                if (distance < minDistance) {
                    minDistance = distance;
                    minIndex = i;
                }
            }
        }
        return minIndex;

=======

        int minDistance = Integer.MAX_VALUE;
        int minIndex = -1;
        for (int i = 0; i < points.length; i++) {
            int[] point = points[i];
            if (point[0] == x || point[1] == y) {
                int distance = Math.abs(point[0] - x) + Math.abs(point[1] - y);
                if (distance < minDistance) {
                    minDistance = distance;
                    minIndex = i;
                }
            }
        }
        return minIndex;

=======

        int min = Integer.MAX_VALUE;
        int index = -1;
        for (int i = 0; i < points.length; i++) {
            int[] point = points[i];
            if (point[0] == x || point[1] == y) {
                int distance = Math.abs(x - point[0]) + Math.abs(y - point[1]);
                if (distance < min) {
                    min = distance;
                    index = i;
                }
            }
        }
        return index;

=======

        int min = Integer.MAX_VALUE;
        int index = -1;
        for (int i = 0; i < points.length; i++) {
            int[] point = points[i];
            if (point[0] == x || point[1] == y) {
                int dist = Math.abs(x - point[0]) + Math.abs(y - point[1]);
                if (dist < min) {
                    min = dist;
                    index = i;
                }
            }
        }
        return index;

=======

        int min = Integer.MAX_VALUE;
        int index = -1;
        for (int i = 0; i < points.length; i++) {
            int[] point = points[i];
            if (point[0] == x || point[1] == y) {
                int distance = Math.abs(point[0] - x) + Math.abs(point[1] - y);
                if (distance < min) {
                    min = distance;
                    index = i;
                }
            }
        }
        return index;

=======

        int min = Integer.MAX_VALUE;
        int minIndex = -1;
        for (int i = 0; i < points.length; i++) {
            int[] point = points[i];
            int x1 = point[0];
            int y1 = point[1];
            if (x == x1 || y == y1) {
                int distance = Math.abs(x - x1) + Math.abs(y - y1);
                if (distance < min) {
                    min = distance;
                    minIndex = i;
                }
            }
        }
        return minIndex;

=======

        int minDis = Integer.MAX_VALUE;
        int minDisIndex = -1;
        for(int i = 0; i < points.length; i++) {
            if(points[i][0] == x || points[i][1] == y) {
                int dis = Math.abs(x - points[i][0]) + Math.abs(y - points[i][1]);
                if(dis < minDis) {
                    minDis = dis;
                    minDisIndex = i;
                }
            }
        }
        return minDisIndex;
