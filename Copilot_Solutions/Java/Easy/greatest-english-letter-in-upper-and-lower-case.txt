Synthesizing 10/10 solutions

=======

        boolean[] upper = new boolean[26];
        boolean[] lower = new boolean[26];
        for (int i = 0; i < s.length(); i++) {
            if (Character.isUpperCase(s.charAt(i))) {
                upper[s.charAt(i) - 'A'] = true;
            } else {
                lower[s.charAt(i) - 'a'] = true;
            }
        }
        for (int i = 25; i >= 0; i--) {
            if (upper[i] && lower[i]) {
                return String.valueOf((char)(i + 'A'));
            }
        }
        return "";

=======

        int[] upper = new int[26];
        int[] lower = new int[26];
        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            if (c >= 'A' && c <= 'Z') {
                upper[c - 'A']++;
            } else if (c >= 'a' && c <= 'z') {
                lower[c - 'a']++;
            }
        }
        for (int i = 25; i >= 0; i--) {
            if (upper[i] > 0 && lower[i] > 0) {
                return Character.toString((char) (i + 'A'));
            }
        }
        return "";

=======

        int[] upper = new int[26];
        int[] lower = new int[26];
        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            if (c >= 'A' && c <= 'Z') {
                upper[c - 'A'] = 1;
            } else {
                lower[c - 'a'] = 1;
            }
        }
        for (int i = 25; i >= 0; i--) {
            if (upper[i] == 1 && lower[i] == 1) {
                return String.valueOf((char) ('A' + i));
            }
        }
        return "";

=======

        Set<Character> lower = new HashSet<>();
        Set<Character> upper = new HashSet<>();
        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            if (Character.isLowerCase(c)) {
                lower.add(c);
            } else {
                upper.add(c);
            }
        }
        for (char c = 'Z'; c >= 'A'; c--) {
            if (lower.contains(Character.toLowerCase(c)) && upper.contains(c)) {
                return String.valueOf(c);
            }
        }
        return "";

=======

        int[] count = new int[26];
        for (int i = 0; i < s.length(); i++) {
            count[s.charAt(i) - 'a']++;
        }
        for (int i = 25; i >= 0; i--) {
            if (count[i] > 0 && count[i + 26] > 0) {
                return String.valueOf((char)('A' + i));
            }
        }
        return "";

=======

        int[] counts = new int[26];
        for (char c : s.toCharArray()) {
            counts[c - 'a']++;
        }
        for (int i = 25; i >= 0; i--) {
            if (counts[i] > 0 && counts[i + 26] > 0) {
                return String.valueOf((char) ('A' + i));
            }
        }
        return "";

=======

        String result = "";
        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            if (s.indexOf(c) != -1 && s.indexOf(Character.toUpperCase(c)) != -1) {
                result += c;
            }
        }
        return result;

=======

        String result = "";
        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            if (s.contains(Character.toLowerCase(c) + "") && s.contains(Character.toUpperCase(c) + "")) {
                result = Character.toUpperCase(c) + "";
            }
        }
        return result;

=======

        char[] arr = s.toCharArray();
        Arrays.sort(arr);
        String res = "";
        for (int i = 0; i < s.length() - 1; i++) {
            if (arr[i] == arr[i + 1]) continue;
            if (arr[i] + 32 == arr[i + 1]) {
                res = Character.toString(arr[i + 1]).toUpperCase();
            }
        }
        return res;

=======

        char[] arr = s.toCharArray();
        Arrays.sort(arr);
        for(int i = 0; i < arr.length; i++){
            if(i == arr.length - 1){
                return "";
            }
            if(Character.toLowerCase(arr[i]) == Character.toLowerCase(arr[i+1])){
                return Character.toString(arr[i]).toUpperCase();
            }
        }
        return "";
