Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int pos = 0;
        int neg = 0;
        int max = 0;
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] < 0) {
                neg++;
                pos = 0;
            } else if (nums[i] > 0) {
                pos++;
                neg = 0;
            } else {
                pos = 0;
                neg = 0;
            }
            max = Math.max(max, Math.max(pos, neg));
        }
        return max;

=======

        int pos = 0;
        int neg = 0;
        int max = 0;
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] > 0) {
                pos++;
            } else if (nums[i] < 0) {
                neg++;
            }
            if (i > 0 && nums[i] != nums[i - 1]) {
                max = Math.max(max, Math.max(pos, neg));
                pos = 0;
                neg = 0;
            }
        }
        max = Math.max(max, Math.max(pos, neg));
        return max;

=======

        int positive = 0;
        int negative = 0;
        int max = 0;
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] < 0) {
                negative++;
                positive = 0;
            } else if (nums[i] > 0) {
                positive++;
                negative = 0;
            } else {
                positive = 0;
                negative = 0;
            }
            max = Math.max(max, Math.max(positive, negative));
        }
        return max;

=======

        int positive = 0;
        int negative = 0;
        int max = 0;
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] > 0) {
                positive++;
                negative = 0;
            } else if (nums[i] < 0) {
                negative++;
                positive = 0;
            } else {
                positive = 0;
                negative = 0;
            }
            max = Math.max(max, Math.max(positive, negative));
        }
        return max;

=======

        int negativeCount = 0;
        int positiveCount = 0;
        int maxCount = 0;
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] < 0) {
                negativeCount++;
            } else if (nums[i] > 0) {
                positiveCount++;
            }
            maxCount = Math.max(maxCount, Math.max(positiveCount, negativeCount));
        }
        return maxCount;

=======

        int pos = 0, neg = 0;
        for (int n : nums) {
            if (n > 0) {
                pos++;
            } else if (n < 0) {
                neg++;
            }
        }
        return Math.max(pos, neg);

=======

        int count = 0;
        int max = 0;
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] < 0) {
                count++;
            } else {
                max = Math.max(max, count);
                count = 0;
            }
        }
        return Math.max(max, count);

=======

        int i = 0;
        int j = nums.length - 1;
        int count = 0;
        while (i <= j) {
            if (nums[i] < 0 && nums[j] < 0) {
                count++;
                i++;
                j--;
            } else if (nums[i] < 0 && nums[j] > 0) {
                count++;
                i++;
            } else if (nums[i] > 0 && nums[j] > 0) {
                count++;
                j--;
            } else {
                break;
            }
        }
        return count;

=======

        int n = nums.length;
        int pos = 0, neg = 0;
        for (int i = 0; i < n; i++) {
            if (nums[i] > 0) pos++;
            else neg++;
        }
        return Math.max(pos, neg);
