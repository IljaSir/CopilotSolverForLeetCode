Synthesizing 10/10 solutions

=======

        int[] orderMap = new int[26];
        for (int i = 0; i < order.length(); i++) {
            orderMap[order.charAt(i) - 'a'] = i;
        }
        for (int i = 0; i < words.length - 1; i++) {
            if (compare(words[i], words[i + 1], orderMap) > 0) {
                return false;
            }
        }
        return true;
    }
    private int compare(String word1, String word2, int[] orderMap) {
        int length = Math.min(word1.length(), word2.length());
        for (int i = 0; i < length; i++) {
            int order1 = orderMap[word1.charAt(i) - 'a'];
            int order2 = orderMap[word2.charAt(i) - 'a'];
            if (order1 != order2) {
                return order1 - order2;
            }
        }
        return word1.length() - word2.length();

=======

        int[] orderMap = new int[26];
        for (int i = 0; i < order.length(); i++) {
            orderMap[order.charAt(i) - 'a'] = i;
        }
        for (int i = 0; i < words.length - 1; i++) {
            if (!isSorted(words[i], words[i + 1], orderMap)) {
                return false;
            }
        }
        return true;
    }

    private boolean isSorted(String a, String b, int[] orderMap) {
        int i = 0;
        while (i < a.length() && i < b.length()) {
            if (orderMap[a.charAt(i) - 'a'] < orderMap[b.charAt(i) - 'a']) {
                return true;
            } else if (orderMap[a.charAt(i) - 'a'] > orderMap[b.charAt(i) - 'a']) {
                return false;
            }
            i++;
        }
        return a.length() <= b.length();

=======

        int[] orderMap = new int[26];
        for (int i = 0; i < order.length(); i++) {
            orderMap[order.charAt(i) - 'a'] = i;
        }
        for (int i = 0; i < words.length - 1; i++) {
            if (compare(words[i], words[i + 1], orderMap) > 0) {
                return false;
            }
        }
        return true;
    }
    
    private int compare(String a, String b, int[] order) {
        int i = 0;
        int j = 0;
        while (i < a.length() && j < b.length()) {
            int cmp = order[a.charAt(i) - 'a'] - order[b.charAt(j) - 'a'];
            if (cmp != 0) {
                return cmp;
            }
            i++;
            j++;
        }
        return a.length() - b.length();

=======

        int[] orderMap = new int[26];
        for (int i = 0; i < order.length(); i++) {
            orderMap[order.charAt(i) - 'a'] = i;
        }
        for (int i = 1; i < words.length; i++) {
            if (compare(words[i - 1], words[i], orderMap) > 0) {
                return false;
            }
        }
        return true;
    }
    
    private int compare(String word1, String word2, int[] orderMap) {
        int n = Math.min(word1.length(), word2.length());
        for (int i = 0; i < n; i++) {
            int c1 = orderMap[word1.charAt(i) - 'a'];
            int c2 = orderMap[word2.charAt(i) - 'a'];
            if (c1 != c2) {
                return c1 - c2;
            }
        }
        return word1.length() - word2.length();

=======

        int[] orderMap = new int[26];
        for (int i = 0; i < order.length(); i++) {
            orderMap[order.charAt(i) - 'a'] = i;
        }
        for (int i = 0; i < words.length - 1; i++) {
            if (!isSorted(words[i], words[i + 1], orderMap)) {
                return false;
            }
        }
        return true;
    }

    private boolean isSorted(String word1, String word2, int[] orderMap) {
        int len1 = word1.length();
        int len2 = word2.length();
        for (int i = 0; i < len1 && i < len2; i++) {
            if (word1.charAt(i) != word2.charAt(i)) {
                return orderMap[word1.charAt(i) - 'a'] < orderMap[word2.charAt(i) - 'a'];
            }
        }
        return len1 <= len2;

=======

        int[] orderMap = new int[26];
        for (int i = 0; i < order.length(); i++) {
            orderMap[order.charAt(i) - 'a'] = i;
        }
        for (int i = 0; i < words.length - 1; i++) {
            if (!isSorted(words[i], words[i + 1], orderMap)) {
                return false;
            }
        }
        return true;
    }
    private boolean isSorted(String a, String b, int[] orderMap) {
        int len = Math.min(a.length(), b.length());
        for (int i = 0; i < len; i++) {
            char c1 = a.charAt(i);
            char c2 = b.charAt(i);
            if (c1 != c2) {
                return orderMap[c1 - 'a'] < orderMap[c2 - 'a'];
            }
        }
        return a.length() <= b.length();

=======

        int[] orderIndex = new int[26];
        for (int i = 0; i < order.length(); i++) {
            orderIndex[order.charAt(i) - 'a'] = i;
        }
        for (int i = 0; i < words.length - 1; i++) {
            if (!isSorted(words[i], words[i + 1], orderIndex)) {
                return false;
            }
        }
        return true;
    }
    
    private boolean isSorted(String word1, String word2, int[] orderIndex) {
        for (int i = 0; i < word1.length(); i++) {
            if (i >= word2.length()) {
                return false;
            }
            char c1 = word1.charAt(i);
            char c2 = word2.charAt(i);
            if (c1 != c2) {
                return orderIndex[c1 - 'a'] < orderIndex[c2 - 'a'];
            }
        }
        return true;

=======

        int[] charOrder = new int[26];
        for (int i = 0; i < order.length(); i++) {
            charOrder[order.charAt(i) - 'a'] = i;
        }
        for (int i = 0; i < words.length - 1; i++) {
            if (!isSorted(words[i], words[i + 1], charOrder)) {
                return false;
            }
        }
        return true;
    }
    
    private boolean isSorted(String s1, String s2, int[] charOrder) {
        for (int i = 0; i < s1.length(); i++) {
            if (i == s2.length()) {
                return false;
            }
            if (charOrder[s1.charAt(i) - 'a'] < charOrder[s2.charAt(i) - 'a']) {
                return true;
            }
            if (charOrder[s1.charAt(i) - 'a'] > charOrder[s2.charAt(i) - 'a']) {
                return false;
            }
        }
        return true;

=======

        int[] orderDict = new int[26];
        for (int i = 0; i < order.length(); i++) {
            orderDict[order.charAt(i) - 'a'] = i;
        }
        for (int i = 0; i < words.length - 1; i++) {
            if (!isSorted(words[i], words[i + 1], orderDict)) {
                return false;
            }
        }
        return true;
    }

    private boolean isSorted(String word1, String word2, int[] orderDict) {
        int len = Math.min(word1.length(), word2.length());
        for (int i = 0; i < len; i++) {
            if (orderDict[word1.charAt(i) - 'a'] < orderDict[word2.charAt(i) - 'a']) {
                return true;
            }
            if (orderDict[word1.charAt(i) - 'a'] > orderDict[word2.charAt(i) - 'a']) {
                return false;
            }
        }
        return word1.length() <= word2.length();

=======

        int[] d = new int[26];
        for (int i = 0; i < order.length(); i++) {
            d[order.charAt(i) - 'a'] = i;
        }
        for (int i = 0; i < words.length - 1; i++) {
            if (!compare(words[i], words[i + 1], d)) {
                return false;
            }
        }
        return true;
    }
    private boolean compare(String str1, String str2, int[] d) {
        int len1 = str1.length();
        int len2 = str2.length();
        int i = 0;
        while (i < len1 && i < len2) {
            if (str1.charAt(i) != str2.charAt(i)) {
                return d[str1.charAt(i) - 'a'] < d[str2.charAt(i) - 'a'];
            }
            i++;
        }
        return len1 <= len2;
