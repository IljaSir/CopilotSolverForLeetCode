Synthesizing 10/10 solutions

=======

        int[] groups = new int[37];
        for (int i = 1; i <= n; i++) {
            int sum = 0;
            int num = i;
            while (num > 0) {
                sum += num % 10;
                num /= 10;
            }
            groups[sum]++;
        }
        int max = 0;
        int result = 0;
        for (int i = 0; i < groups.length; i++) {
            if (max < groups[i]) {
                max = groups[i];
                result = 1;
            } else if (max == groups[i]) {
                result++;
            }
        }
        return result;

=======

        int[] groups = new int[37];
        for (int i = 1; i <= n; i++) {
            int sum = 0;
            int num = i;
            while (num > 0) {
                sum += num % 10;
                num /= 10;
            }
            groups[sum]++;
        }
        int max = 0;
        int count = 0;
        for (int i = 0; i < 37; i++) {
            if (groups[i] > max) {
                max = groups[i];
                count = 1;
            } else if (groups[i] == max) {
                count++;
            }
        }
        return count;

=======

        int[] count = new int[37];
        for (int i = 1; i <= n; i++) {
            int sum = 0;
            int j = i;
            while (j > 0) {
                sum += j % 10;
                j /= 10;
            }
            count[sum]++;
        }
        int max = 0;
        for (int i = 0; i < count.length; i++) {
            max = Math.max(max, count[i]);
        }
        int res = 0;
        for (int i = 0; i < count.length; i++) {
            if (count[i] == max) {
                res++;
            }
        }
        return res;

=======

        int[] map = new int[37];
        int max = 0;
        for (int i = 1; i <= n; i++) {
            int sum = 0;
            int num = i;
            while (num > 0) {
                sum += num % 10;
                num /= 10;
            }
            map[sum]++;
            max = Math.max(max, map[sum]);
        }
        int count = 0;
        for (int i = 0; i < map.length; i++) {
            if (map[i] == max) {
                count++;
            }
        }
        return count;

=======

        int[] arr = new int[37];
        for (int i = 1; i <= n; i++) {
            int sum = 0;
            int tmp = i;
            while (tmp > 0) {
                sum += tmp % 10;
                tmp /= 10;
            }
            arr[sum]++;
        }
        int max = 0;
        for (int i = 0; i < 37; i++) {
            max = Math.max(max, arr[i]);
        }
        int cnt = 0;
        for (int i = 0; i < 37; i++) {
            if (arr[i] == max) {
                cnt++;
            }
        }
        return cnt;

=======

        int[] count = new int[37];
        int max = 0;
        for (int i = 1; i <= n; i++) {
            int sum = 0;
            int t = i;
            while (t > 0) {
                sum += t % 10;
                t /= 10;
            }
            max = Math.max(max, ++count[sum]);
        }
        int ans = 0;
        for (int i = 0; i < count.length; i++) {
            if (count[i] == max) {
                ans++;
            }
        }
        return ans;

=======

        int[] count = new int[37];
        int max = 0;
        for (int i = 1; i <= n; i++) {
            int sum = 0;
            int t = i;
            while (t > 0) {
                sum += t % 10;
                t /= 10;
            }
            max = Math.max(max, ++count[sum]);
        }
        int ans = 0;
        for (int i = 0; i < 37; i++) {
            if (count[i] == max) {
                ans++;
            }
        }
        return ans;

=======

        int[] count = new int[37];
        for (int i = 1; i <= n; i++) {
            count[sumOfDigits(i)]++;
        }
        int max = 0;
        for (int i : count) {
            max = Math.max(max, i);
        }
        int ans = 0;
        for (int i : count) {
            if (i == max) {
                ans++;
            }
        }
        return ans;
    }

    private int sumOfDigits(int n) {
        int sum = 0;
        while (n > 0) {
            sum += n % 10;
            n /= 10;
        }
        return sum;

=======

        int[] groups = new int[37];
        for (int i = 1; i <= n; i++) {
            groups[sumOfDigits(i)]++;
        }
        int max = 0;
        int count = 0;
        for (int i = 0; i < groups.length; i++) {
            if (groups[i] > max) {
                max = groups[i];
                count = 1;
            } else if (groups[i] == max) {
                count++;
            }
        }
        return count;
    }
    private int sumOfDigits(int n) {
        int sum = 0;
        while (n > 0) {
            sum += n % 10;
            n /= 10;
        }
        return sum;

=======

        int[] count = new int[37];
        for(int i = 1; i <= n; i++) {
            int sum = 0;
            for(char c : Integer.toString(i).toCharArray()) {
                sum += c - '0';
            }
            count[sum]++;
        }
        int max = 0;
        int res = 0;
        for(int i = 0; i < 37; i++) {
            if(count[i] > max) {
                max = count[i];
                res = 1;
            } else if(count[i] == max) {
                res++;
            }
        }
        return res;
