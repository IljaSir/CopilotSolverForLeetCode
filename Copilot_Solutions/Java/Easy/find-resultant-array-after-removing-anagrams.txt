Synthesizing 10/10 solutions

=======

        List<String> res = new ArrayList<>();
        for (int i = 0; i < words.length; i++) {
            boolean isAnagram = false;
            for (int j = 0; j < res.size(); j++) {
                if (isAnagram(res.get(j), words[i])) {
                    isAnagram = true;
                    break;
                }
            }
            if (!isAnagram) {
                res.add(words[i]);
            }
        }
        return res;
    }

    private boolean isAnagram(String s1, String s2) {
        if (s1.length() != s2.length()) {
            return false;
        }
        int[] count = new int[26];
        for (int i = 0; i < s1.length(); i++) {
            count[s1.charAt(i) - 'a']++;
            count[s2.charAt(i) - 'a']--;
        }
        for (int i = 0; i < count.length; i++) {
            if (count[i] != 0) {
                return false;
            }
        }
        return true;

=======

        List<String> result = new ArrayList<>();
        Map<String, Integer> map = new HashMap<>();
        for (int i = 0; i < words.length; i++) {
            String word = words[i];
            char[] chars = word.toCharArray();
            Arrays.sort(chars);
            String sorted = new String(chars);
            if (map.containsKey(sorted)) {
                int index = map.get(sorted);
                if (words[index].length() > word.length()) {
                    map.put(sorted, i);
                    result.set(index, word);
                }
            } else {
                map.put(sorted, i);
                result.add(word);
            }
        }
        return result;

=======

        ArrayList<String> result = new ArrayList<>();
        for (int i = 0; i < words.length; i++) {
            boolean isAnagram = false;
            for (int j = 0; j < result.size(); j++) {
                if (isAnagram(result.get(j), words[i])) {
                    isAnagram = true;
                    break;
                }
            }
            if (!isAnagram) {
                result.add(words[i]);
            }
        }
        return result;
    }
    
    private boolean isAnagram(String a, String b) {
        if (a.length() != b.length()) {
            return false;
        }
        int[] count = new int[26];
        for (int i = 0; i < a.length(); i++) {
            count[a.charAt(i) - 'a']++;
            count[b.charAt(i) - 'a']--;
        }
        for (int i = 0; i < count.length; i++) {
            if (count[i] != 0) {
                return false;
            }
        }
        return true;

=======

        List<String> result = new ArrayList<>();
        for (String word : words) {
            if (result.isEmpty()) {
                result.add(word);
                continue;
            }
            boolean isAnagram = false;
            for (int i = 0; i < result.size(); i++) {
                String current = result.get(i);
                if (current.length() == word.length() && isAnagram(current, word)) {
                    isAnagram = true;
                    result.remove(i);
                    break;
                }
            }
            if (!isAnagram) {
                result.add(word);
            }
        }
        return result;
    }
    
    private boolean isAnagram(String s1, String s2) {
        if (s1.equals(s2)) {
            return true;
        }
        int[] count = new int[26];
        for (int i = 0; i < s1.length(); i++) {
            count[s1.charAt(i) - 'a']++;
            count[s2.charAt(i) - 'a']--;
        }
        for (int i = 0; i < count.length; i++) {
            if (count[i] != 0) {
                return false;
            }
        }
        return true;

=======

        List<String> result = new ArrayList<>();
        if (words == null || words.length == 0) {
            return result;
        }
        int n = words.length;
        boolean[] visited = new boolean[n];
        for (int i = 0; i < n; i++) {
            if (visited[i]) {
                continue;
            }
            result.add(words[i]);
            for (int j = i + 1; j < n; j++) {
                if (visited[j]) {
                    continue;
                }
                if (isAnagram(words[i], words[j])) {
                    visited[j] = true;
                }
            }
        }
        return result;
    }
    
    private boolean isAnagram(String s1, String s2) {
        if (s1.length() != s2.length()) {
            return false;
        }
        int[] count = new int[26];
        for (int i = 0; i < s1.length(); i++) {
            count[s1.charAt(i) - 'a']++;
            count[s2.charAt(i) - 'a']--;
        }
        for (int c : count) {
            if (c != 0) {
                return false;
            }
        }
        return true;

=======

        List<String> result = new ArrayList<String>();
        boolean[] isAnagram = new boolean[words.length];
        for (int i = 0; i < words.length; i++) {
            if (!isAnagram[i]) {
                result.add(words[i]);
                for (int j = i + 1; j < words.length; j++) {
                    if (!isAnagram[j]) {
                        if (isAnagram(words[i], words[j])) {
                            isAnagram[j] = true;
                        }
                    }
                }
            }
        }
        return result;
    }
    public boolean isAnagram(String a, String b) {
        if (a.length() != b.length()) {
            return false;
        }
        int[] alphabet = new int[26];
        for (int i = 0; i < a.length(); i++) {
            alphabet[a.charAt(i) - 'a']++;
        }
        for (int i = 0; i < b.length(); i++) {
            alphabet[b.charAt(i) - 'a']--;
        }
        for (int i = 0; i < 26; i++) {
            if (alphabet[i] != 0) {
                return false;
            }
        }
        return true;

=======

        List<String> res = new ArrayList<String>();
        for (int i = 0; i < words.length; i++) {
            String word = words[i];
            boolean isAnagram = false;
            for (int j = 0; j < res.size(); j++) {
                if (isAnagram(word, res.get(j))) {
                    isAnagram = true;
                    break;
                }
            }
            if (!isAnagram) {
                res.add(word);
            }
        }
        return res;
    }
    
    public boolean isAnagram(String s, String t) {
        if (s.length() != t.length()) {
            return false;
        }
        int[] count = new int[26];
        for (int i = 0; i < s.length(); i++) {
            count[s.charAt(i) - 'a']++;
            count[t.charAt(i) - 'a']--;
        }
        for (int i = 0; i < count.length; i++) {
            if (count[i] != 0) {
                return false;
            }
        }
        return true;

=======

        List<String> result = new ArrayList<>();
        for(int i = 0; i < words.length; i++) {
            if(i == 0) {
                result.add(words[i]);
                continue;
            }
            boolean isAnagram = false;
            for(String s: result) {
                if(isAnagram(s, words[i])) {
                    isAnagram = true;
                    break;
                }
            }
            if(!isAnagram)
                result.add(words[i]);
        }
        return result;
    }
    
    public boolean isAnagram(String s1, String s2) {
        if(s1.length() != s2.length())
            return false;
        int[] count = new int[26];
        for(int i = 0; i < s1.length(); i++) {
            count[s1.charAt(i) - 'a']++;
            count[s2.charAt(i) - 'a']--;
        }
        for(int i = 0; i < 26; i++) {
            if(count[i] != 0)
                return false;
        }
        return true;

=======

        List<String> result = new ArrayList<String>();
        for(int i = 0; i < words.length; i++) {
            if (i == 0) {
                result.add(words[i]);
                continue;
            }
            String currentWord = words[i];
            boolean isAnagram = false;
            for (int j = 0; j < result.size(); j++) {
                String currentResultWord = result.get(j);
                if (currentResultWord.length() != currentWord.length()) {
                    continue;
                }
                if (isAnagram(currentResultWord, currentWord)) {
                    isAnagram = true;
                    break;
                }
            }
            if (!isAnagram) {
                result.add(currentWord);
            }
        }
        return result;
    }
    
    public boolean isAnagram(String word1, String word2) {
        int[] charCount = new int[26];
        for (int i = 0; i < word1.length(); i++) {
            charCount[word1.charAt(i) - 'a']++;
        }
        for (int i = 0; i < word2.length(); i++) {
            charCount[word2.charAt(i) - 'a']--;
        }
        for (int i = 0; i < charCount.length; i++) {
            if (charCount[i] != 0) {
                return false;
            }
        }
        return true;

=======

        List<String> result = new ArrayList<>();
        int wordLen = words.length;
        for(int i = 0; i < wordLen; i++){
            String word = words[i];
            if(word == null){
                continue;
            }
            int len = word.length();
            boolean found = false;
            for(int j = i + 1; j < wordLen; j++){
                if(words[j] == null){
                    continue;
                }
                if(words[j].length() != len){
                    continue;
                }
                if(isAnagram(word, words[j])){
                    words[j] = null;
                    found = true;
                }
            }
            if(!found){
                result.add(word);
            }
        }
        return result;
    }
    
    public boolean isAnagram(String word1, String word2){
        int[] charCount = new int[26];
        for(char c : word1.toCharArray()){
            charCount[c - 'a']++;
        }
        for(char c : word2.toCharArray()){
            charCount[c - 'a']--;
        }
        for(int count : charCount){
            if(count != 0){
                return false;
            }
        }
        return true;
