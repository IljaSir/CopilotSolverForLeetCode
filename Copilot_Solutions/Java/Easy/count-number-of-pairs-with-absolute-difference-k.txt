Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int count = 0;
        for (int i = 0; i < nums.length; i++) {
            for (int j = i + 1; j < nums.length; j++) {
                if (Math.abs(nums[i] - nums[j]) == k) {
                    count++;
                }
            }
        }
        return count;

=======

        int result = 0;
        for (int i = 0; i < nums.length; i++) {
            for (int j = i + 1; j < nums.length; j++) {
                if (Math.abs(nums[i] - nums[j]) == k) {
                    result++;
                }
            }
        }
        return result;

=======

        int count = 0;
        for (int i = 0; i < nums.length; i++) {
            for (int j = 0; j < nums.length; j++) {
                if (i < j && Math.abs(nums[i] - nums[j]) == k) {
                    count++;
                }
            }
        }
        return count;

=======

        int[] count = new int[101];
        for (int num : nums) {
            count[num]++;
        }
        int res = 0;
        for (int i = 1; i <= 100; i++) {
            if (i + k <= 100) {
                res += count[i] * count[i + k];
            }
        }
        return res;

=======

        HashMap<Integer, Integer> map = new HashMap<>();
        int count = 0;
        for (int n : nums) {
            if (map.containsKey(n - k)) {
                count += map.get(n - k);
            }
            if (map.containsKey(n + k)) {
                count += map.get(n + k);
            }
            map.put(n, map.getOrDefault(n, 0) + 1);
        }
        return count;
