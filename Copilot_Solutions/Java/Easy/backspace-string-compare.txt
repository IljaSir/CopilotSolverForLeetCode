Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int i = s.length() - 1;
        int j = t.length() - 1;
        int skipS = 0;
        int skipT = 0;
        while (i >= 0 || j >= 0) {
            while (i >= 0) {
                if (s.charAt(i) == '#') {
                    skipS++;
                    i--;
                } else if (skipS > 0) {
                    skipS--;
                    i--;
                } else {
                    break;
                }
            }
            while (j >= 0) {
                if (t.charAt(j) == '#') {
                    skipT++;
                    j--;
                } else if (skipT > 0) {
                    skipT--;
                    j--;
                } else {
                    break;
                }
            }
            if (i >= 0 && j >= 0 && s.charAt(i) != t.charAt(j)) {
                return false;
            }
            if ((i >= 0) != (j >= 0)) {
                return false;
            }
            i--;
            j--;
        }
        return true;

=======

        return build(s).equals(build(t));
    }

    public String build(String s) {
        StringBuilder sb = new StringBuilder();
        for (char c : s.toCharArray()) {
            if (c != '#') {
                sb.append(c);
            } else if (sb.length() != 0) {
                sb.deleteCharAt(sb.length() - 1);
            }
        }
        return sb.toString();

=======

        int sIndex = s.length() - 1;
        int tIndex = t.length() - 1;
        int sBackspace = 0;
        int tBackspace = 0;
        while (sIndex >= 0 || tIndex >= 0) {
            while (sIndex >= 0) {
                if (s.charAt(sIndex) == '#') {
                    sBackspace++;
                    sIndex--;
                } else if (sBackspace > 0) {
                    sBackspace--;
                    sIndex--;
                } else {
                    break;
                }
            }
            while (tIndex >= 0) {
                if (t.charAt(tIndex) == '#') {
                    tBackspace++;
                    tIndex--;
                } else if (tBackspace > 0) {
                    tBackspace--;
                    tIndex--;
                } else {
                    break;
                }
            }
            if (sIndex >= 0 && tIndex >= 0 && s.charAt(sIndex) != t.charAt(tIndex)) {
                return false;
            }
            if ((sIndex >= 0) != (tIndex >= 0)) {
                return false;
            }
            sIndex--;
            tIndex--;
        }
        return true;

=======

        int sIndex = s.length() - 1;
        int tIndex = t.length() - 1;
        int sBackspace = 0;
        int tBackspace = 0;
        while (sIndex >= 0 || tIndex >= 0) {
            while (sIndex >= 0 && (s.charAt(sIndex) == '#' || sBackspace > 0)) {
                if (s.charAt(sIndex) == '#') {
                    sBackspace++;
                } else {
                    sBackspace--;
                }
                sIndex--;
            }
            while (tIndex >= 0 && (t.charAt(tIndex) == '#' || tBackspace > 0)) {
                if (t.charAt(tIndex) == '#') {
                    tBackspace++;
                } else {
                    tBackspace--;
                }
                tIndex--;
            }
            if (sIndex < 0 && tIndex < 0) {
                return true;
            } else if (sIndex < 0 || tIndex < 0) {
                return false;
            } else if (s.charAt(sIndex) != t.charAt(tIndex)) {
                return false;
            }
            sIndex--;
            tIndex--;
        }
        return true;

=======

        Stack<Character> sStack = new Stack<>();
        Stack<Character> tStack = new Stack<>();
        for(int i = 0; i < s.length(); i++) {
            if(s.charAt(i) == '#') {
                if(!sStack.isEmpty()) {
                    sStack.pop();
                }
            } else {
                sStack.push(s.charAt(i));
            }
        }
        for(int i = 0; i < t.length(); i++) {
            if(t.charAt(i) == '#') {
                if(!tStack.isEmpty()) {
                    tStack.pop();
                }
            } else {
                tStack.push(t.charAt(i));
            }
        }
        if(sStack.size() != tStack.size()) {
            return false;
        }
        while(!sStack.isEmpty()) {
            if(sStack.pop() != tStack.pop()) {
                return false;
            }
        }
        return true;

=======

        return build(s).equals(build(t));
    }
    private String build(String s) {
        StringBuilder sb = new StringBuilder();
        for (char c : s.toCharArray()) {
            if (c != '#') sb.append(c);
            else if (sb.length() != 0) sb.deleteCharAt(sb.length() - 1);
        }
        return sb.toString();

=======

        return backspace(s).equals(backspace(t));
    }

    private String backspace(String s) {
        Stack<Character> stack = new Stack<>();
        for (char c : s.toCharArray()) {
            if (c == '#') {
                if (!stack.isEmpty()) stack.pop();
            } else stack.push(c);
        }
        StringBuilder sb = new StringBuilder();
        while (!stack.isEmpty()) sb.append(stack.pop());
        return sb.reverse().toString();
