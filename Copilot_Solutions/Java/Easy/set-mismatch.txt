Synthesizing 10/10 solutions

=======

        int[] res = new int[2];
        for (int i = 0; i < nums.length; i++) {
            int index = Math.abs(nums[i]) - 1;
            if (nums[index] < 0) {
                res[0] = Math.abs(nums[i]);
            } else {
                nums[index] *= -1;
            }
        }
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] > 0) {
                res[1] = i + 1;
            }
        }
        return res;

=======

        int[] result = new int[2];
        for (int i = 0; i < nums.length; i++) {
            if (nums[Math.abs(nums[i]) - 1] < 0) {
                result[0] = Math.abs(nums[i]);
            } else {
                nums[Math.abs(nums[i]) - 1] *= -1;
            }
        }
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] > 0) {
                result[1] = i + 1;
            }
        }
        return result;

=======

        int n = nums.length;
        int[] res = new int[2];
        for (int i = 0; i < n; i++) {
            int index = Math.abs(nums[i]) - 1;
            if (nums[index] < 0) {
                res[0] = Math.abs(nums[i]);
            } else {
                nums[index] = -nums[index];
            }
        }
        for (int i = 0; i < n; i++) {
            if (nums[i] > 0) {
                res[1] = i + 1;
            }
        }
        return res;

=======

        int[] arr = new int[nums.length + 1];
        for (int i = 0; i < nums.length; i++) {
            arr[nums[i]]++;
        }
        int[] res = new int[2];
        for (int i = 1; i < arr.length; i++) {
            if (arr[i] == 2) {
                res[0] = i;
            }
            if (arr[i] == 0) {
                res[1] = i;
            }
        }
        return res;

=======

        int[] ans = new int[2];
        int[] cnt = new int[nums.length];
        for (int i = 0; i < nums.length; i++) {
            cnt[nums[i] - 1]++;
        }
        for (int i = 0; i < cnt.length; i++) {
            if (cnt[i] == 2) {
                ans[0] = i + 1;
            }
            if (cnt[i] == 0) {
                ans[1] = i + 1;
            }
        }
        return ans;

=======

        int[] arr = new int[nums.length];
        int[] ret = new int[2];
        for (int i = 0; i < nums.length; i++) {
            if (arr[nums[i] - 1] == 1) {
                ret[0] = nums[i];
            } else {
                arr[nums[i] - 1] = 1;
            }
        }
        for (int i = 0; i < nums.length; i++) {
            if (arr[i] == 0) {
                ret[1] = i + 1;
            }
        }
        return ret;

=======

        int n = nums.length;
        int[] ans = new int[2];
        int[] cnt = new int[n + 1];
        for (int i = 0; i < n; i++) {
            cnt[nums[i]]++;
        }
        for (int i = 1; i <= n; i++) {
            if (cnt[i] == 2) {
                ans[0] = i;
            } else if (cnt[i] == 0) {
                ans[1] = i;
            }
        }
        return ans;

=======

        int[] result = new int[2];
        int n = nums.length;
        int sum = n * (n + 1) / 2;
        for (int i = 0; i < n; i++) {
            sum -= nums[i];
            if (nums[Math.abs(nums[i]) - 1] < 0) {
                result[0] = Math.abs(nums[i]);
            } else {
                nums[Math.abs(nums[i]) - 1] *= -1;
            }
        }
        result[1] = sum + result[0];
        return result;

=======

        int[] result = new int[2];
        int n = nums.length;
        int sum = n * (n + 1) / 2;
        int sum2 = (n * (n + 1) * (2 * n + 1)) / 6;
        int sum3 = 0;
        int sum4 = 0;
        for (int i = 0; i < n; i++) {
            sum3 += nums[i];
            sum4 += nums[i] * nums[i];
        }
        result[1] = (sum3 - sum + sum4 / sum3) / 2;
        result[0] = sum3 - sum + sum4 / sum3 - result[1];
        return result;

=======

        int[] res = new int[2];
        int[] temp = new int[nums.length];
        for (int i=0;i<nums.length;i++) {
            temp[nums[i]-1]++;
        }
        for (int i=0;i<nums.length;i++) {
            if (temp[i] == 0) {
                res[1] = i+1;
            }
            if (temp[i] == 2) {
                res[0] = i+1;
            }
        }
        return res;
