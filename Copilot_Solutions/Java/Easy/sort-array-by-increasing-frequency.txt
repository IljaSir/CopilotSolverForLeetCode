Synthesizing 10/10 solutions

=======

        Map<Integer, Integer> map = new HashMap<>();
        for (int i = 0; i < nums.length; i++) {
            map.put(nums[i], map.getOrDefault(nums[i], 0) + 1);
        }
        Arrays.sort(nums);
        Arrays.sort(nums, new Comparator<Integer>(){
            public int compare(Integer i1, Integer i2) {
                int f1 = map.get(i1);
                int f2 = map.get(i2);
                if (f1 != f2) {
                    return f1 - f2;
                } else {
                    return i2 - i1;
                }
            }
        });
        for (int i = 0; i < nums.length; i++) {
            nums[i] = map.get(nums[i]);
        }
        return nums;

=======

        Map<Integer, Integer> map = new HashMap<>();
        for (int num : nums) {
            map.put(num, map.getOrDefault(num, 0) + 1);
        }
        Arrays.sort(nums);
        Arrays.sort(nums, (n1, n2) -> map.get(n1) - map.get(n2));
        return nums;

=======

        Map<Integer, Integer> map = new HashMap<>();
        for (int num : nums) {
            map.put(num, map.getOrDefault(num, 0) + 1);
        }
        List<Integer> list = new ArrayList<>(map.keySet());
        Collections.sort(list, (a, b) -> map.get(a) == map.get(b) ? b - a : map.get(a) - map.get(b));
        int[] ans = new int[nums.length];
        int index = 0;
        for (int key : list) {
            int count = map.get(key);
            while (count-- > 0) {
                ans[index++] = key;
            }
        }
        return ans;

=======

        Map<Integer, Integer> map = new HashMap<>();
        for (int num : nums) {
            map.put(num, map.getOrDefault(num, 0) + 1);
        }
        List<Integer> list = new ArrayList<>(map.keySet());
        Collections.sort(list, (a, b) -> map.get(a) == map.get(b) ? b - a : map.get(a) - map.get(b));
        int[] res = new int[nums.length];
        int index = 0;
        for (int num : list) {
            int freq = map.get(num);
            while (freq-- > 0) {
                res[index++] = num;
            }
        }
        return res;

=======

        Map<Integer, Integer> map = new HashMap<>();
        for (int num : nums) {
            map.put(num, map.getOrDefault(num, 0) + 1);
        }
        Integer[] arr = new Integer[nums.length];
        for (int i = 0; i < nums.length; i++) {
            arr[i] = nums[i];
        }
        Arrays.sort(arr, (a, b) -> {
            if (map.get(a) != map.get(b)) {
                return map.get(a) - map.get(b);
            } else {
                return b - a;
            }
        });
        for (int i = 0; i < nums.length; i++) {
            nums[i] = arr[i];
        }
        return nums;

=======

        HashMap<Integer, Integer> map = new HashMap<>();
        for (int num : nums) {
            map.put(num, map.getOrDefault(num, 0) + 1);
        }
        Integer[] sorted = new Integer[nums.length];
        for (int i = 0; i < nums.length; i++) {
            sorted[i] = nums[i];
        }
        Arrays.sort(sorted, (a, b) -> {
            int countA = map.get(a);
            int countB = map.get(b);
            if (countA != countB) {
                return countA - countB;
            }
            return b - a;
        });
        for (int i = 0; i < nums.length; i++) {
            nums[i] = sorted[i];
        }
        return nums;

=======

        Map<Integer, Integer> map = new HashMap<>();
        for(int num: nums) {
            map.put(num, map.getOrDefault(num, 0) + 1);
        }
        PriorityQueue<Integer> pq = new PriorityQueue<>((a, b) -> {
            int fa = map.get(a);
            int fb = map.get(b);
            if(fa == fb) {
                return b - a;
            }
            return fa - fb;
        });
        for(int num: map.keySet()) {
            pq.add(num);
        }
        int[] res = new int[nums.length];
        int i = 0;
        while(!pq.isEmpty()) {
            int num = pq.poll();
            int freq = map.get(num);
            for(int j = 0; j < freq; j++) {
                res[i++] = num;
            }
        }
        return res;

=======

        int[] result = new int[nums.length];
        int[] count = new int[201];
        for (int i = 0; i < nums.length; i++) {
            count[nums[i] + 100]++;
        }
        int[] tmp = new int[nums.length];
        for (int i = 0; i < tmp.length; i++) {
            tmp[i] = 201;
        }
        for (int i = 0; i < count.length; i++) {
            if (count[i] == 0) {
                continue;
            }
            int j = 0;
            while (j < tmp.length) {
                if (tmp[j] == 201) {
                    tmp[j] = i - 100;
                    break;
                }
                if (count[tmp[j] + 100] < count[i]) {
                    int t = tmp[j];
                    tmp[j] = i - 100;
                    i = t + 100;
                }
                j++;
            }
        }
        int index = 0;
        for (int i = 0; i < tmp.length; i++) {
            if (tmp[i] == 201) {
                break;
            }
            for (int j = 0; j < count[tmp[i] + 100]; j++) {
                result[index++] = tmp[i];
            }
        }
        return result;

=======

        int[] count = new int[201];
        for (int n : nums) {
            count[n + 100]++;
        }
        List<Integer> list = new ArrayList<>();
        for (int i = 0; i < count.length; i++) {
            list.add(i - 100);
        }
        Collections.sort(list, (a, b) -> {
            if (count[a + 100] != count[b + 100]) {
                return count[a + 100] - count[b + 100];
            }
            return b - a;
        });
        int[] res = new int[nums.length];
        int index = 0;
        for (int n : list) {
            for (int i = 0; i < count[n + 100]; i++) {
                res[index++] = n;
            }
        }
        return res;

=======

        HashMap<Integer, Integer> map = new HashMap<>();
        for(int num : nums){
            map.put(num, map.getOrDefault(num, 0) + 1);
        }
        int[] res = new int[nums.length];
        int index = 0;
        for(Map.Entry<Integer, Integer> entry : map.entrySet()){
            int freq = entry.getValue();
            for(int i = 0; i < freq; i++){
                res[index++] = entry.getKey();
            }
        }
        Arrays.sort(res);
        return res;
