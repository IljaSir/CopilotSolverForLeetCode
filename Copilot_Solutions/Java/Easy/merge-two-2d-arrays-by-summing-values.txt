Synthesizing 10/10 solutions

=======

        List<int[]> res = new ArrayList<>();
        int i = 0, j = 0;
        while (i < nums1.length && j < nums2.length) {
            if (nums1[i][0] == nums2[j][0]) {
                res.add(new int[]{nums1[i][0], nums1[i][1] + nums2[j][1]});
                i++;
                j++;
            } else if (nums1[i][0] < nums2[j][0]) {
                res.add(nums1[i++]);
            } else {
                res.add(nums2[j++]);
            }
        }
        while (i < nums1.length) {
            res.add(nums1[i++]);
        }
        while (j < nums2.length) {
            res.add(nums2[j++]);
        }
        return res.toArray(new int[res.size()][]);

=======

        int[][] result = new int[nums1.length + nums2.length][2];
        int i = 0, j = 0, k = 0;
        while (i < nums1.length && j < nums2.length) {
            if (nums1[i][0] < nums2[j][0]) {
                result[k][0] = nums1[i][0];
                result[k][1] = nums1[i][1];
                i++;
            } else if (nums1[i][0] > nums2[j][0]) {
                result[k][0] = nums2[j][0];
                result[k][1] = nums2[j][1];
                j++;
            } else {
                result[k][0] = nums1[i][0];
                result[k][1] = nums1[i][1] + nums2[j][1];
                i++;
                j++;
            }
            k++;
        }
        while (i < nums1.length) {
            result[k][0] = nums1[i][0];
            result[k][1] = nums1[i][1];
            i++;
            k++;
        }
        while (j < nums2.length) {
            result[k][0] = nums2[j][0];
            result[k][1] = nums2[j][1];
            j++;
            k++;
        }
        int[][] finalResult = new int[k][2];
        for (int l = 0; l < k; l++) {
            finalResult[l][0] = result[l][0];
            finalResult[l][1] = result[l][1];
        }
        return finalResult;

=======

        int i = 0, j = 0;
        List<int[]> list = new ArrayList<>();
        while (i < nums1.length && j < nums2.length) {
            if (nums1[i][0] == nums2[j][0]) {
                list.add(new int[]{nums1[i][0], nums1[i][1] + nums2[j][1]});
                i++;
                j++;
            } else if (nums1[i][0] < nums2[j][0]) {
                list.add(nums1[i++]);
            } else {
                list.add(nums2[j++]);
            }
        }
        while (i < nums1.length) {
            list.add(nums1[i++]);
        }
        while (j < nums2.length) {
            list.add(nums2[j++]);
        }
        int[][] res = new int[list.size()][2];
        for (int k = 0; k < list.size(); k++) {
            res[k] = list.get(k);
        }
        return res;

=======

        int i = 0;
        int j = 0;
        List<int[]> result = new ArrayList<>();
        while (i < nums1.length && j < nums2.length) {
            if (nums1[i][0] == nums2[j][0]) {
                result.add(new int[] {nums1[i][0], nums1[i][1] + nums2[j][1]});
                i++;
                j++;
            } else if (nums1[i][0] < nums2[j][0]) {
                result.add(nums1[i]);
                i++;
            } else {
                result.add(nums2[j]);
                j++;
            }
        }
        while (i < nums1.length) {
            result.add(nums1[i]);
            i++;
        }
        while (j < nums2.length) {
            result.add(nums2[j]);
            j++;
        }
        int[][] resultArray = new int[result.size()][];
        for (int k = 0; k < result.size(); k++) {
            resultArray[k] = result.get(k);
        }
        return resultArray;

=======

        int i = 0;
        int j = 0;
        List<int[]> result = new ArrayList<>();
        while (i < nums1.length || j < nums2.length) {
            if (i < nums1.length && j < nums2.length) {
                if (nums1[i][0] == nums2[j][0]) {
                    result.add(new int[]{nums1[i][0], nums1[i][1] + nums2[j][1]});
                    i++;
                    j++;
                } else if (nums1[i][0] < nums2[j][0]) {
                    result.add(new int[]{nums1[i][0], nums1[i][1]});
                    i++;
                } else {
                    result.add(new int[]{nums2[j][0], nums2[j][1]});
                    j++;
                }
            } else if (i < nums1.length) {
                result.add(new int[]{nums1[i][0], nums1[i][1]});
                i++;
            } else {
                result.add(new int[]{nums2[j][0], nums2[j][1]});
                j++;
            }
        }
        return result.toArray(new int[result.size()][2]);

=======

        int m = nums1.length;
        int n = nums2.length;
        int i = 0;
        int j = 0;
        List<int[]> res = new ArrayList<>();
        while (i < m && j < n) {
            int[] a = nums1[i];
            int[] b = nums2[j];
            if (a[0] == b[0]) {
                res.add(new int[]{a[0], a[1] + b[1]});
                i++;
                j++;
            } else if (a[0] < b[0]) {
                res.add(a);
                i++;
            } else {
                res.add(b);
                j++;
            }
        }
        while (i < m) {
            res.add(nums1[i]);
            i++;
        }
        while (j < n) {
            res.add(nums2[j]);
            j++;
        }
        return res.toArray(new int[res.size()][]);

=======

        int i = 0, j = 0;
        int[][] res = new int[nums1.length + nums2.length][2];
        while (i < nums1.length && j < nums2.length) {
            if (nums1[i][0] < nums2[j][0]) {
                res[i + j] = nums1[i];
                i++;
            } else if (nums1[i][0] > nums2[j][0]) {
                res[i + j] = nums2[j];
                j++;
            } else {
                res[i + j] = new int[]{nums1[i][0], nums1[i][1] + nums2[j][1]};
                i++;
                j++;
            }
        }
        while (i < nums1.length) {
            res[i + j] = nums1[i];
            i++;
        }
        while (j < nums2.length) {
            res[i + j] = nums2[j];
            j++;
        }
        return Arrays.copyOf(res, i + j);

=======

        int i = 0, j = 0;
        int[][] res = new int[nums1.length + nums2.length][2];
        int k = 0;
        while (i < nums1.length && j < nums2.length) {
            if (nums1[i][0] == nums2[j][0]) {
                res[k][0] = nums1[i][0];
                res[k][1] = nums1[i][1] + nums2[j][1];
                i++;
                j++;
            } else if (nums1[i][0] < nums2[j][0]) {
                res[k][0] = nums1[i][0];
                res[k][1] = nums1[i][1];
                i++;
            } else {
                res[k][0] = nums2[j][0];
                res[k][1] = nums2[j][1];
                j++;
            }
            k++;
        }
        while (i < nums1.length) {
            res[k][0] = nums1[i][0];
            res[k][1] = nums1[i][1];
            i++;
            k++;
        }
        while (j < nums2.length) {
            res[k][0] = nums2[j][0];
            res[k][1] = nums2[j][1];
            j++;
            k++;
        }
        return Arrays.copyOf(res, k);

=======

        int i = 0, j = 0;
        List<int[]> list = new ArrayList();
        while (i < nums1.length || j < nums2.length) {
            if (i < nums1.length && j < nums2.length) {
                if (nums1[i][0] == nums2[j][0]) {
                    list.add(new int[]{nums1[i][0], nums1[i][1] + nums2[j][1]});
                    i++;
                    j++;
                } else if (nums1[i][0] < nums2[j][0]) {
                    list.add(nums1[i]);
                    i++;
                } else {
                    list.add(nums2[j]);
                    j++;
                }
            } else if (i < nums1.length) {
                list.add(nums1[i]);
                i++;
            } else {
                list.add(nums2[j]);
                j++;
            }
        }
        return list.toArray(new int[list.size()][]);

=======

        int i = 0, j = 0;
        List<int[]> res = new ArrayList<>();
        while(i < nums1.length || j < nums2.length){
            if(i < nums1.length && j < nums2.length){
                if(nums1[i][0] == nums2[j][0]){
                    res.add(new int[]{nums1[i][0], nums1[i][1] + nums2[j][1]});
                    i++;
                    j++;
                }else if(nums1[i][0] < nums2[j][0]){
                    res.add(new int[]{nums1[i][0], nums1[i][1]});
                    i++;
                }else{
                    res.add(new int[]{nums2[j][0], nums2[j][1]});
                    j++;
                }
            }else if(i < nums1.length){
                res.add(new int[]{nums1[i][0], nums1[i][1]});
                i++;
            }else if(j < nums2.length){
                res.add(new int[]{nums2[j][0], nums2[j][1]});
                j++;
            }
        }
        int[][] ans = new int[res.size()][2];
        for(int k = 0; k < res.size(); k++){
            ans[k] = res.get(k);
        }
        return ans;
