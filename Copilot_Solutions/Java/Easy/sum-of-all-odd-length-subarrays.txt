Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int sum = 0;
        for (int i = 0; i < arr.length; i++) {
            sum += arr[i] * ((i + 1) * (arr.length - i) + 1) / 2;
        }
        return sum;

=======

        int sum = 0;
        int n = arr.length;
        for (int i = 0; i < n; i++) {
            int left = i + 1;
            int right = n - i;
            int leftOdd = left / 2;
            int rightOdd = right / 2;
            int leftEven = (left + 1) / 2;
            int rightEven = (right + 1) / 2;
            sum += (leftOdd * rightOdd + leftEven * rightEven) * arr[i];
        }
        return sum;

=======

        int n = arr.length;
        int[] prefix = new int[n + 1];
        for (int i = 1; i <= n; i++) {
            prefix[i] = prefix[i - 1] + arr[i - 1];
        }
        int ans = 0;
        for (int i = 1; i <= n; i++) {
            for (int j = i; j <= n; j += 2) {
                ans += prefix[j] - prefix[i - 1];
            }
        }
        return ans;

=======

        int n = arr.length;
        int[] prefixSum = new int[n + 1];
        for (int i = 1; i <= n; i++) {
            prefixSum[i] = prefixSum[i - 1] + arr[i - 1];
        }
        int res = 0;
        for (int i = 0; i < n; i++) {
            for (int j = i; j < n; j += 2) {
                res += prefixSum[j + 1] - prefixSum[i];
            }
        }
        return res;

=======

        int len = arr.length;
        int sum = 0;
        for (int i = 0; i < len; i++) {
            int left = i + 1;
            int right = len - i;
            int leftEven = (left + 1) / 2;
            int rightEven = (right + 1) / 2;
            int leftOdd = left / 2;
            int rightOdd = right / 2;
            sum += (leftEven * rightEven + leftOdd * rightOdd) * arr[i];
        }
        return sum;

=======

        int sum = 0, n = arr.length;
        for (int i = 0; i < n; i++) {
            sum += (((i + 1) * (n - i) + 1) / 2) * arr[i];
        }
        return sum;

=======

        int n = arr.length;
        int sum = 0;
        int[] prefix = new int[n + 1];
        for (int i = 1; i <= n; i++) {
            prefix[i] = prefix[i - 1] + arr[i - 1];
        }
        for (int i = 0; i < n; i++) {
            for (int j = i; j < n; j += 2) {
                sum += prefix[j + 1] - prefix[i];
            }
        }
        return sum;

=======

        int sum = 0;
        for(int i = 0; i < arr.length; i++){
            int start = 0;
            int end = arr.length - 1;
            while(start <= i && end >= i){
                sum += arr[i];
                start++;
                end--;
            }
        }
        return sum;

=======

        int sum = 0;
        for(int i = 0; i < arr.length; i++) {
            int start = 0, end = arr.length - 1;
            while(start <= i) {
                int len = i - start + 1;
                if(len % 2 != 0) {
                    sum += arr[i];
                }
                start++;
            }
            while(end >= i) {
                int len = end - i + 1;
                if(len % 2 != 0) {
                    sum += arr[i];
                }
                end--;
            }
        }
        return sum;
