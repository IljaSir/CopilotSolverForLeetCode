Synthesizing 10/10 solutions

=======

        int max = 0;
        int count = 1;
        for (int i = 1; i < nums.length; i++) {
            if (nums[i] > nums[i - 1]) {
                count++;
            } else {
                max = Math.max(max, count);
                count = 1;
            }
        }
        max = Math.max(max, count);
        return max;

=======

        int max = 0;
        int count = 1;
        for (int i = 1; i < nums.length; i++) {
            if (nums[i] > nums[i - 1]) {
                count++;
            } else {
                max = Math.max(count, max);
                count = 1;
            }
        }
        return Math.max(count, max);

=======

        int result = 1;
        int count = 1;
        for (int i = 1; i < nums.length; i++) {
            if (nums[i] > nums[i - 1]) {
                count++;
            } else {
                result = Math.max(result, count);
                count = 1;
            }
        }
        return Math.max(result, count);

=======

        int n = nums.length;
        if (n == 0) {
            return 0;
        }
        int max = 1;
        int count = 1;
        for (int i = 1; i < n; i++) {
            if (nums[i] > nums[i - 1]) {
                count++;
            } else {
                count = 1;
            }
            max = Math.max(count, max);
        }
        return max;

=======

        int max = 1;
        int current = 1;
        for (int i = 1; i < nums.length; i++) {
            if (nums[i] > nums[i - 1]) {
                current++;
                max = Math.max(max, current);
            } else {
                current = 1;
            }
        }
        return max;

=======

        int max = 0;
        int count = 0;
        int prev = Integer.MIN_VALUE;
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] > prev) {
                count++;
                prev = nums[i];
            } else {
                max = Math.max(max, count);
                count = 1;
                prev = nums[i];
            }
        }
        max = Math.max(max, count);
        return max;

=======

        int max = 0;
        int curr = 1;
        for(int i=1; i<nums.length; i++) {
            if(nums[i] > nums[i-1]) {
                curr++;
            } else {
                curr = 1;
            }
            max = Math.max(max, curr);
        }
        return max;

=======

        int n = nums.length;
        if (n < 2) {
            return n;
        }
        int max = 1;
        int l = 0;
        int r = 1;
        while (r < n) {
            if (nums[r] > nums[r - 1]) {
                r++;
            } else {
                max = Math.max(max, r - l);
                l = r;
                r++;
            }
        }
        return Math.max(max, r - l);

=======

        if(nums.length == 0) return 0;
        int max = 1;
        int curr = 1;
        for(int i=0; i<nums.length-1; i++) {
            if(nums[i] < nums[i+1]) {
                curr++;
            } else {
                curr = 1;
            }
            max = Math.max(max, curr);
        }
        return max;

=======

        int max = 0;
        int count = 0;
        int last = Integer.MIN_VALUE;
        for (int num: nums) {
            if (num > last) {
                count++;
                max = Math.max(max, count);
            } else {
                count = 1;
            }
            last = num;
        }
        return max;
