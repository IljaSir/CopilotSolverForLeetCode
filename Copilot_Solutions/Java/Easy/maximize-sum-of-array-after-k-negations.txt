Synthesizing 10/10 solutions

=======

        int sum = 0;
        Arrays.sort(nums);
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] < 0 && k > 0) {
                nums[i] = -nums[i];
                k--;
            }
            sum += nums[i];
        }
        Arrays.sort(nums);
        return sum - (k % 2 == 1 ? nums[0] * 2 : 0);

=======

        Arrays.sort(nums);
        int sum = 0;
        for (int i = 0; i < nums.length; i++) {
            if (k > 0 && nums[i] < 0) {
                nums[i] = -nums[i];
                k--;
            }
            sum += nums[i];
        }
        if (k > 0) {
            Arrays.sort(nums);
            if (k % 2 == 1) {
                sum -= 2 * nums[0];
            }
        }
        return sum;

=======

        Arrays.sort(nums);
        int sum = 0;
        int min = Integer.MAX_VALUE;
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] < 0 && k > 0) {
                nums[i] = -nums[i];
                k--;
            }
            min = Math.min(min, nums[i]);
            sum += nums[i];
        }
        if (k % 2 == 1) {
            sum -= 2 * min;
        }
        return sum;

=======

        int sum = 0;
        int min = Integer.MAX_VALUE;
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] < 0 && k > 0) {
                nums[i] = -nums[i];
                k--;
            }
            sum += nums[i];
            min = Math.min(min, nums[i]);
        }
        if (k % 2 == 1) {
            sum -= 2 * min;
        }
        return sum;

=======

        Arrays.sort(nums);
        int i = 0;
        int sum = 0;
        while (i < nums.length && k > 0 && nums[i] < 0) {
            nums[i] = -nums[i];
            i++;
            k--;
        }
        Arrays.sort(nums);
        for (int j = 0; j < nums.length; j++) {
            sum += nums[j];
        }
        if (k % 2 == 1) {
            sum -= 2 * nums[0];
        }
        return sum;

=======

        Arrays.sort(nums);
        int n = nums.length;
        int i = 0;
        while (i < n && k > 0) {
            if (nums[i] < 0) {
                nums[i] = -nums[i];
                k--;
            }
            i++;
        }
        if (k > 0) {
            if (k % 2 == 1) {
                int min = Integer.MAX_VALUE;
                for (int j = 0; j < n; j++) {
                    min = Math.min(min, nums[j]);
                }
                for (int j = 0; j < n; j++) {
                    if (nums[j] == min) {
                        nums[j] = -nums[j];
                        break;
                    }
                }
            }
        }
        int res = 0;
        for (int j = 0; j < n; j++) {
            res += nums[j];
        }
        return res;

=======

        int sum = 0;
        int min = Integer.MAX_VALUE;
        for (int i = 0; i < nums.length; i++) {
            sum += nums[i];
            if (nums[i] < min) {
                min = nums[i];
            }
        }
        if (k == 0) {
            return sum;
        }
        if (k % 2 == 0) {
            return sum;
        } else {
            return sum - 2 * min;
        }

=======

        int sum = 0;
        int min = Integer.MAX_VALUE;
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] < 0) {
                if (k > 0) {
                    nums[i] = -nums[i];
                    k--;
                }
            }
            if (nums[i] < min) {
                min = nums[i];
            }
            sum += nums[i];
        }
        if (k % 2 == 1) {
            sum -= 2 * min;
        }
        return sum;

=======

        int sum = 0;
        Arrays.sort(nums);
        int i = 0;
        while (k > 0 && i < nums.length && nums[i] < 0) {
            nums[i] *= -1;
            k--;
            i++;
        }
        if (k > 0) {
            Arrays.sort(nums);
            if (k % 2 == 1) {
                nums[0] *= -1;
            }
        }
        for (int n : nums) {
            sum += n;
        }
        return sum;

=======

        Arrays.sort(nums);
        int sum = 0;
        int min = Integer.MAX_VALUE;
        for(int i=0; i<nums.length; i++) {
            if(k>0 && nums[i]<0) {
                nums[i] = -nums[i];
                k--;
            }
            sum += nums[i];
            min = Math.min(min, nums[i]);
        }
        if(k%2==1) {
            sum -= 2*min;
        }
        return sum;
