Synthesizing 10/10 solutions

=======

        List<List<Integer>> res = new ArrayList<>();
        List<Integer> list1 = new ArrayList<>();
        List<Integer> list2 = new ArrayList<>();
        Set<Integer> set1 = new HashSet<>();
        Set<Integer> set2 = new HashSet<>();
        for (int n : nums1) {
            if (!set1.contains(n)) {
                set1.add(n);
                list1.add(n);
            }
        }
        for (int n : nums2) {
            if (!set2.contains(n)) {
                set2.add(n);
                list2.add(n);
            }
        }
        for (int n : list1) {
            if (set2.contains(n)) {
                list1.remove((Integer)n);
            }
        }
        for (int n : list2) {
            if (set1.contains(n)) {
                list2.remove((Integer)n);
            }
        }
        res.add(list1);
        res.add(list2);
        return res;

=======

        List<List<Integer>> res = new ArrayList<>();
        List<Integer> list1 = new ArrayList<>();
        List<Integer> list2 = new ArrayList<>();
        Set<Integer> set1 = new HashSet<>();
        Set<Integer> set2 = new HashSet<>();
        for (int i = 0; i < nums1.length; i++) {
            set1.add(nums1[i]);
        }
        for (int i = 0; i < nums2.length; i++) {
            set2.add(nums2[i]);
        }
        for (int i = 0; i < nums1.length; i++) {
            if (!set2.contains(nums1[i])) {
                list1.add(nums1[i]);
            }
        }
        for (int i = 0; i < nums2.length; i++) {
            if (!set1.contains(nums2[i])) {
                list2.add(nums2[i]);
            }
        }
        res.add(list1);
        res.add(list2);
        return res;

=======

        List<List<Integer>> res = new ArrayList<>();
        Set<Integer> set1 = new HashSet<>();
        Set<Integer> set2 = new HashSet<>();
        for (int i = 0; i < nums1.length; i++) {
            set1.add(nums1[i]);
        }
        for (int i = 0; i < nums2.length; i++) {
            set2.add(nums2[i]);
        }
        List<Integer> list1 = new ArrayList<>();
        List<Integer> list2 = new ArrayList<>();
        for (int i = 0; i < nums1.length; i++) {
            if (!set2.contains(nums1[i])) {
                list1.add(nums1[i]);
            }
        }
        for (int i = 0; i < nums2.length; i++) {
            if (!set1.contains(nums2[i])) {
                list2.add(nums2[i]);
            }
        }
        res.add(list1);
        res.add(list2);
        return res;

=======

        List<List<Integer>> result = new ArrayList<>();
        List<Integer> list1 = new ArrayList<>();
        List<Integer> list2 = new ArrayList<>();
        Arrays.sort(nums1);
        Arrays.sort(nums2);
        int i = 0, j = 0;
        while (i < nums1.length && j < nums2.length) {
            if (nums1[i] < nums2[j]) {
                list1.add(nums1[i++]);
            } else if (nums1[i] > nums2[j]) {
                list2.add(nums2[j++]);
            } else {
                i++;
                j++;
            }
        }
        while (i < nums1.length) {
            list1.add(nums1[i++]);
        }
        while (j < nums2.length) {
            list2.add(nums2[j++]);
        }
        result.add(list1);
        result.add(list2);
        return result;

=======

        int[] count1 = new int[2001];
        int[] count2 = new int[2001];
        for (int num : nums1) {
            count1[num + 1000]++;
        }
        for (int num : nums2) {
            count2[num + 1000]++;
        }
        List<List<Integer>> result = new ArrayList<>();
        List<Integer> list1 = new ArrayList<>();
        List<Integer> list2 = new ArrayList<>();
        for (int i = 0; i < 2001; i++) {
            if (count1[i] > 0 && count2[i] == 0) {
                list1.add(i - 1000);
            }
            if (count2[i] > 0 && count1[i] == 0) {
                list2.add(i - 1000);
            }
        }
        result.add(list1);
        result.add(list2);
        return result;

=======

        List<List<Integer>> result = new ArrayList<>();
        List<Integer> list1 = new ArrayList<>();
        List<Integer> list2 = new ArrayList<>();
        Map<Integer, Integer> map = new HashMap<>();
        for (int num : nums1) {
            map.put(num, map.getOrDefault(num, 0) + 1);
        }
        for (int num : nums2) {
            if (map.containsKey(num)) {
                map.put(num, map.get(num) - 1);
            } else {
                list2.add(num);
            }
        }
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() > 0) {
                list1.add(entry.getKey());
            }
        }
        result.add(list1);
        result.add(list2);
        return result;

=======

        List<List<Integer>> result = new ArrayList<>();
        List<Integer> list1 = new ArrayList<>();
        List<Integer> list2 = new ArrayList<>();
        Map<Integer, Integer> map = new HashMap<>();
        for(int i = 0; i < nums1.length; i++){
            map.put(nums1[i], map.getOrDefault(nums1[i], 0) + 1);
        }
        for(int i = 0; i < nums2.length; i++){
            map.put(nums2[i], map.getOrDefault(nums2[i], 0) - 1);
        }
        for(int i = 0; i < nums1.length; i++){
            if(map.get(nums1[i]) > 0){
                list1.add(nums1[i]);
            }
        }
        for(int i = 0; i < nums2.length; i++){
            if(map.get(nums2[i]) < 0){
                list2.add(nums2[i]);
            }
        }
        result.add(list1);
        result.add(list2);
        return result;

=======

        List<List<Integer>> result = new ArrayList<>();
        List<Integer> notInNums1 = new ArrayList<>();
        List<Integer> notInNums2 = new ArrayList<>();
        Set<Integer> set = new HashSet<>();
        for (int n : nums1) {
            set.add(n);
        }
        for (int n : nums2) {
            if (!set.contains(n)) {
                notInNums1.add(n);
            }
        }
        set.clear();
        for (int n : nums2) {
            set.add(n);
        }
        for (int n : nums1) {
            if (!set.contains(n)) {
                notInNums2.add(n);
            }
        }
        result.add(notInNums1);
        result.add(notInNums2);
        return result;

=======

        List<List<Integer>> ans = new ArrayList<>();
        List<Integer> list1 = new ArrayList<>();
        List<Integer> list2 = new ArrayList<>();
        for(int i=0;i<nums1.length;i++){
            boolean flag = false;
            for(int j=0;j<nums2.length;j++){
                if(nums1[i]==nums2[j]){
                    flag = true;
                    break;
                }
            }
            if(!flag){
                list1.add(nums1[i]);
            }
        }
        for(int i=0;i<nums2.length;i++){
            boolean flag = false;
            for(int j=0;j<nums1.length;j++){
                if(nums2[i]==nums1[j]){
                    flag = true;
                    break;
                }
            }
            if(!flag){
                list2.add(nums2[i]);
            }
        }
        ans.add(list1);
        ans.add(list2);
        return ans;

=======

        List<List<Integer>> res = new ArrayList<>();
        List<Integer> list = new ArrayList<>();
        for (int i = 0; i < nums1.length; i++) {
            boolean isExist = false;
            for (int j = 0; j < nums2.length; j++) {
                if (nums1[i] == nums2[j]) {
                    isExist = true;
                    break;
                }
            }
            if (!isExist) {
                list.add(nums1[i]);
            }
        }
        res.add(list);
        list = new ArrayList<>();
        for (int i = 0; i < nums2.length; i++) {
            boolean isExist = false;
            for (int j = 0; j < nums1.length; j++) {
                if (nums2[i] == nums1[j]) {
                    isExist = true;
                    break;
                }
            }
            if (!isExist) {
                list.add(nums2[i]);
            }
        }
        res.add(list);
        return res;
