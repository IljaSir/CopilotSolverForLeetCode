Synthesizing 10/10 solutions

=======

        int left = 1;
        int right = n;
        while (left <= right) {
            int mid = left + (right - left) / 2;
            int res = guess(mid);
            if (res == 0) {
                return mid;
            }
            if (res < 0) {
                right = mid - 1;
            } else {
                left = mid + 1;
            }
        }
        return -1;

=======

        int left = 1;
        int right = n;
        while (left <= right) {
            int mid = left + (right - left) / 2;
            int res = guess(mid);
            if (res == 0) {
                return mid;
            }
            if (res < 0) {
                right = mid - 1;
            } else {
                left = mid + 1;
            }
        }
        return -1;

=======

        int left = 1, right = n;
        while (left <= right) {
            int mid = left + (right - left) / 2;
            int res = guess(mid);
            if (res == 0) {
                return mid;
            } else if (res == 1) {
                left = mid + 1;
            } else {
                right = mid - 1;
            }
        }
        return -1;

=======

        int left = 1;
        int right = n;
        while (left < right) {
            int mid = left + (right - left) / 2;
            int res = guess(mid);
            if (res == 0) {
                return mid;
            } else if (res == -1) {
                right = mid - 1;
            } else {
                left = mid + 1;
            }
        }
        return left;

=======

        int lo = 1;
        int hi = n;
        while (lo < hi) {
            int mid = lo + (hi - lo) / 2;
            if (guess(mid) == 0) {
                return mid;
            } else if (guess(mid) == -1) {
                hi = mid - 1;
            } else {
                lo = mid + 1;
            }
        }
        return lo;

=======

        int low = 1, high = n;
        while (low <= high) {
            int mid = low + (high - low) / 2;
            int result = guess(mid);
            if (result == 0) {
                return mid;
            } else if (result == 1) {
                high = mid - 1;
            } else {
                low = mid + 1;
            };

=======

        int l = 1;
        int r = n;
        while (l < r) {
            int m = l + (r - l) / 2;
            int g = guess(m);
            if (g == 0) {
                return m;
            } else if (g == -1) {
                l = m + 1;
            } else {
                r = m - 1;
            }
        }
        return l;

=======

        int l = 1;
        int r = n;
        while (l < r) {
            int mid = l + (r - l) / 2;
            int res = guess(mid);
            if (res == 0) {
                return mid;
            } else if (res == -1) {
                r = mid - 1;
            } else {
                l = mid + 1;
            }
        }
        return l
        }
        return -1;

=======

        int l = 1, r = n;
        while (l <= r) {
            int m = l + (r - l) / 2;
            int res = guess(m);
            if (res == 0) {
                return m;
            } else if (res == 1) {
                l = m + 1;
            } else {
                r = m - 1;
            }
        }
        return -1;

=======

        int l = 1;
        int r = n;
        while (l < r) {
            int m = l + (r - l) / 2;
            int g = guess(m);
            if (g == 0) {
                return m;
            } else if (g == -1) {
                l = m + 1;
            } else {
                r = m - 1;
            }
        }
        return l;

=======

        int l = 1, r = n;
        while (l < r) {
            int mid = l + r >>> 1;
            if (guess(mid) <= 0) r = mid;
            else l = mid + 1;
        }
        return l;

=======

        int low = 1, high = n;
        while (low < high) {
            int mid = low + (high - low) / 2;
            int val = guess(mid);
            if (val == 0) {
                return mid;
            } else if (val == -1) {
                high = mid - 1;
            } else {
                low = mid + 1;
            }
        }
        return low;
