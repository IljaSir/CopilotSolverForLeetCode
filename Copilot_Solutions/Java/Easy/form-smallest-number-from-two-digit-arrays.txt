Synthesizing 10/10 solutions

=======

        int[] nums = new int[nums1.length + nums2.length];
        for (int i = 0; i < nums1.length; i++) {
            nums[i] = nums1[i];
        }
        for (int i = 0; i < nums2.length; i++) {
            nums[nums1.length + i] = nums2[i];
        }
        Arrays.sort(nums);
        int result = 0;
        for (int i = 0; i < nums.length; i++) {
            result += nums[i] * Math.pow(10, i);
        }
        return result;

=======

        int min = Integer.MAX_VALUE;
        for (int i = 0; i < nums1.length; i++) {
            for (int j = 0; j < nums2.length; j++) {
                int num = Integer.parseInt("" + nums1[i] + nums2[j]);
                if (num < min) {
                    min = num;
                }
            }
        }
        return min;

=======

        int min1 = 10, min2 = 10;
        for (int i : nums1) {
            min1 = Math.min(min1, i);
        }
        for (int i : nums2) {
            min2 = Math.min(min2, i);
        }
        return min1 * 10 + min2;

=======

        int[] arr = new int[nums1.length + nums2.length];
        int i = 0;
        for (int num : nums1) {
            arr[i++] = num;
        }
        for (int num : nums2) {
            arr[i++] = num;
        }
        Arrays.sort(arr);
        StringBuilder sb = new StringBuilder();
        for (int num : arr) {
            sb.append(num);
        }
        return Integer.valueOf(sb.toString());

=======

        int[] a = new int[10];
        int[] b = new int[10];
        for (int i = 0; i < nums1.length; i++) {
            a[nums1[i]]++;
        }
        for (int i = 0; i < nums2.length; i++) {
            b[nums2[i]]++;
        }
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < 10; i++) {
            int count = Math.min(a[i], b[i]);
            for (int j = 0; j < count; j++) {
                sb.append(i);
            }
        }
        for (int i = 0; i < 10; i++) {
            for (int j = 0; j < a[i] - b[i]; j++) {
                sb.append(i);
            }
        }
        for (int i = 0; i < 10; i++) {
            for (int j = 0; j < b[i] - a[i]; j++) {
                sb.append(i);
            }
        }
        return Integer.parseInt(sb.toString());

=======

        int ans = 0;
        int i = 0;
        int j = 0;
        while(i < nums1.length && j < nums2.length) {
            if(nums1[i] < nums2[j]) {
                ans = ans*10 + nums1[i];
                i++;
            } else {
                ans = ans*10 + nums2[j];
                j++;
            }
        }
        while(i < nums1.length) {
            ans = ans*10 + nums1[i];
            i++;
        }
        while(j < nums2.length) {
            ans = ans*10 + nums2[j];
            j++;
        }
        return ans;

=======

        int number = 0;
        int[] digits = new int[10];
        for (int i = 0; i < nums1.length; i++) {
            digits[nums1[i]] = 1;
        }
        for (int i = 0; i < nums2.length; i++) {
            digits[nums2[i]] = 1;
        }
        for (int i = 0; i < digits.length; i++) {
            if (digits[i] == 1) {
                number = number * 10 + i;
            }
        }
        return number;

=======

        int result = 0;
        int[] numbers = new int[10];
        for(int i = 0; i < nums1.length; i++){
            numbers[nums1[i]]++;
        }
        for(int i = 0; i < nums2.length; i++){
            numbers[nums2[i]]++;
        }
        for(int i = 0; i < 10; i++){
            if(numbers[i] > 0){
                result = result * 10 + i;
            }
        }
        return result;

=======

        return 0;

=======

        //Sort both arrays
        Arrays.sort(nums1);
        Arrays.sort(nums2);
        
        //Check if the first digit of nums1 is less than the first digit of nums2
        if (nums1[0] < nums2[0]) {
            return nums1[0];
        }
        else {
            return nums2[0];
        }
