Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int i = 0;
        int j = nums.length - 1;
        while (i < j) {
            if (nums[i] % 2 == 0) {
                i++;
                continue;
            }
            if (nums[j] % 2 != 0) {
                j--;
                continue;
            }
            int tmp = nums[i];
            nums[i] = nums[j];
            nums[j] = tmp;
            i++;
            j--;
        }
        return nums;

=======

        int[] result = new int[nums.length];
        int left = 0;
        int right = nums.length - 1;
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] % 2 == 0) {
                result[left] = nums[i];
                left++;
            } else {
                result[right] = nums[i];
                right--;
            }
        }
        return result;

=======

        int[] result = new int[nums.length];
        int evenIndex = 0;
        int oddIndex = nums.length - 1;
        for (int num : nums) {
            if (num % 2 == 0) {
                result[evenIndex++] = num;
            } else {
                result[oddIndex--] = num;
            }
        }
        return result;

=======

        int[] res = new int[nums.length];
        int i = 0;
        int j = nums.length - 1;
        for (int num : nums) {
            if (num % 2 == 0) {
                res[i++] = num;
            } else {
                res[j--] = num;
            }
        }
        return res;

=======

        int[] result = new int[nums.length];
        int i = 0;
        int j = nums.length - 1;
        for (int n : nums) {
            if (n % 2 == 0) {
                result[i++] = n;
            } else {
                result[j--] = n;
            }
        }
        return result;

=======

        int[] res = new int[nums.length];
        int i = 0, j = nums.length - 1;
        for (int num : nums) {
            if (num % 2 == 0) {
                res[i++] = num;
            } else {
                res[j--] = num;
            }
        }
        return res;

=======

        int[] result = new int[nums.length];
        int i = 0;
        int j = nums.length - 1;
        for (int k = 0; k < nums.length; k++) {
            if (nums[k] % 2 == 0) {
                result[i] = nums[k];
                i++;
            } else {
                result[j] = nums[k];
                j--;
            }
        }
        return result;

=======

        int[] result = new int[nums.length];
        int start = 0, end = nums.length - 1;
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] % 2 == 0) {
                result[start] = nums[i];
                start++;
            } else {
                result[end] = nums[i];
                end--;
            }
        }
        return result;
