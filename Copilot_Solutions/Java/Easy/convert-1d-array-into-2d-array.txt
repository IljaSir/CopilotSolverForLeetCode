Synthesizing 10/10 solutions

=======

        if (original.length != m * n) {
            return new int[0][0];
        }
        int[][] result = new int[m][n];
        for (int i = 0; i < original.length; i++) {
            result[i / n][i % n] = original[i];
        }
        return result;

=======

        if (m * n != original.length) {
            return new int[0][0];
        }
        int[][] result = new int[m][n];
        int index = 0;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                result[i][j] = original[index++];
            }
        }
        return result;

=======

        int[][] result = new int[m][n];
        if (m * n != original.length) {
            return new int[0][0];
        }
        int index = 0;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                result[i][j] = original[index++];
            }
        }
        return result;

=======

        int[][] res = new int[m][n];
        int k = 0;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (k < original.length) {
                    res[i][j] = original[k];
                    k++;
                } else {
                    return new int[0][0];
                }
            }
        }
        if (k < original.length) {
            return new int[0][0];
        }
        return res;

=======

        int l = original.length;
        if (l != m * n) {
            return new int[0][0];
        }
        int[][] ret = new int[m][n];
        for (int i = 0; i < l; i++) {
            ret[i / n][i % n] = original[i];
        }
        return ret;

=======

        if(m * n != original.length) {
            return new int[0][];
        }
        int[][] result = new int[m][n];
        for(int i = 0; i < original.length; i++) {
            result[i / n][i % n] = original[i];
        }
        return result;

=======

        if (original.length != m * n) return new int[0][0];
        int[][] result = new int[m][n];
        int row = 0;
        int col = 0;
        for (int i = 0; i < original.length; i++) {
            result[row][col] = original[i];
            col++;
            if (col == n) {
                col = 0;
                row++;
            }
        }
        return result;

=======

        int[][] res = new int[m][n];
        if (original.length != m * n) {
            return new int[0][0];
        }
        int i = 0;
        for (int[] row : res) {
            for (int j = 0; j < n; j++) {
                row[j] = original[i++];
            }
        }
        return res;

=======

       int[][] result = new int[m][n];
        if (m * n != original.length) {
            return new int[0][0];
        }
        int k = 0;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                result[i][j] = original[k];
                k++;
            }
        }
        return result;

=======

        int[][] result = new int[m][n];
        int i = 0;
        int j = 0;
        int k = 0;
        if (original.length != m * n) {
            return new int[0][0];
        }
        while (k < original.length) {
            if (i < m && j < n) {
                result[i][j] = original[k];
                j++;
                k++;
            } else if (i < m && j == n) {
                i++;
                j = 0;
            }
        }
        return result;
