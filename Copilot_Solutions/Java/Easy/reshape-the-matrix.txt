Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int m = mat.length;
        int n = mat[0].length;
        if (m * n != r * c) {
            return mat;
        }
        int[][] res = new int[r][c];
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                int index = i * n + j;
                res[index / c][index % c] = mat[i][j];
            }
        }
        return res;

=======

        int m = mat.length;
        int n = mat[0].length;
        if (m * n != r * c) {
            return mat;
        }
        int[][] res = new int[r][c];
        for (int i = 0; i < r; i++) {
            for (int j = 0; j < c; j++) {
                int index = i * c + j;
                res[i][j] = mat[index / n][index % n];
            }
        }
        return res;

=======

        int m = mat.length;
        int n = mat[0].length;
        if (m * n != r * c) {
            return mat;
        }
        int[][] res = new int[r][c];
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                int sum = i * n + j;
                int x = sum / c;
                int y = sum % c;
                res[x][y] = mat[i][j];
            }
        }
        return res;

=======

        int m = mat.length;
        int n = mat[0].length;
        if (m * n != r * c) {
            return mat;
        }
        int[][] result = new int[r][c];
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                int index = i * n + j;
                int newI = index / c;
                int newJ = index % c;
                result[newI][newJ] = mat[i][j];
            }
        }
        return result;

=======

        int m = mat.length;
        int n = mat[0].length;
        if (m * n != r * c) {
            return mat;
        }
        int[][] ans = new int[r][c];
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                int index = i * n + j;
                ans[index / c][index % c] = mat[i][j];
            }
        }
        return ans;

=======

        int m = mat.length;
        int n = mat[0].length;
        if (m * n != r * c) {
            return mat;
        }
        int[][] ans = new int[r][c];
        for (int i = 0; i < m * n; i++) {
            ans[i / c][i % c] = mat[i / n][i % n];
        }
        return ans;

=======

        int m = mat.length;
        int n = mat[0].length;
        if (m * n != r * c) return mat;
        int[][] ans = new int[r][c];
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                int idx = i * n + j;
                ans[idx / c][idx % c] = mat[i][j];
            }
        }
        return ans;

=======

        int rows = mat.length;
        int cols = mat[0].length;
        int[] temp = new int[rows * cols];
        int[][] result = new int[r][c];
        if (r * c != rows * cols) {
            return mat;
        }
        int index = 0;
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                temp[index++] = mat[i][j];
            }
        }
        index = 0;
        for (int i = 0; i < r; i++) {
            for (int j = 0; j < c; j++) {
                result[i][j] = temp[index++];
            }
        }
        return result;
