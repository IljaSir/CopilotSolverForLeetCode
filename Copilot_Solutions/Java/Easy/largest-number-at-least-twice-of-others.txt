Synthesizing 10/10 solutions

=======

        int max = 0;
        int index = 0;
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] > max) {
                max = nums[i];
                index = i;
            }
        }
        for (int i = 0; i < nums.length; i++) {
            if (i != index && nums[i] * 2 > max) {
                return -1;
            }
        }
        return index;

=======

        int max = 0;
        int index = 0;
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] > max) {
                max = nums[i];
                index = i;
            }
        }
        for (int i = 0; i < nums.length; i++) {
            if (i != index && 2 * nums[i] > max) {
                return -1;
            }
        }
        return index;

=======

        int max = 0;
        int maxIndex = 0;
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] > max) {
                max = nums[i];
                maxIndex = i;
            }
        }
        for (int i = 0; i < nums.length; i++) {
            if (max < 2 * nums[i] && i != maxIndex) {
                return -1;
            }
        }
        return maxIndex;

=======

        int max = 0;
        int maxIndex = 0;
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] > max) {
                max = nums[i];
                maxIndex = i;
            }
        }
        for (int i = 0; i < nums.length; i++) {
            if (i != maxIndex && max < 2 * nums[i]) {
                return -1;
            }
        }
        return maxIndex;

=======

        int largest = 0;
        int index = 0;
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] > largest) {
                largest = nums[i];
                index = i;
            }
        }
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] != largest && largest < 2 * nums[i]) {
                return -1;
            }
        }
        return index;

=======

        int max = nums[0];
        int maxIndex = 0;
        for (int i = 1; i < nums.length; i++) {
            if (nums[i] > max) {
                max = nums[i];
                maxIndex = i;
            }
        }
        for (int i = 0; i < nums.length; i++) {
            if (i == maxIndex) {
                continue;
            }
            if (nums[i] * 2 > max) {
                return -1;
            }
        }
        return maxIndex;

=======

        int max = Integer.MIN_VALUE;
        int maxIndex = -1;
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] > max) {
                max = nums[i];
                maxIndex = i;
            }
        }
        for (int i = 0; i < nums.length; i++) {
            if (i != maxIndex && nums[i] * 2 > max) {
                return -1;
            }
        }
        return maxIndex;

=======

        int max = Integer.MIN_VALUE;
        int secondMax = Integer.MIN_VALUE;
        int index = -1;
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] > max) {
                secondMax = max;
                max = nums[i];
                index = i;
            } else if (nums[i] > secondMax) {
                secondMax = nums[i];
            }
        }
        return (max >= 2 * secondMax) ? index : -1;

=======

        int max = 0;
        int maxIndex = 0;
        int secondMax = 0;
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] > max) {
                secondMax = max;
                max = nums[i];
                maxIndex = i;
            } else if (nums[i] > secondMax) {
                secondMax = nums[i];
            }
        }
        if (max >= secondMax * 2) {
            return maxIndex;
        } else {
            return -1;
        }

=======

        int max = 0, second = 0;
        int maxIdx = 0;
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] >= max) {
                second = max;
                max = nums[i];
                maxIdx = i;
            } else if (nums[i] >= second) {
                second = nums[i];
            }
        }
        return (max >= 2 * second) ? maxIdx : -1;
