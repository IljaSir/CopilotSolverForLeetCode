Synthesizing 10/10 solutions

=======

        int[] res = new int[k];
        int n = nums.length;
        int j = 0;
        for (int i = 0; i < n; i++) {
            while (n - i + j > k && j > 0 && res[j - 1] < nums[i]) {
                j--;
            }
            if (j < k) {
                res[j++] = nums[i];
            }
        }
        return res;

=======

        int n = nums.length;
        int[] ans = new int[k];
        int stackSize = 0;
        for (int i = 0; i < n; i++) {
            while (stackSize > 0 && stackSize + n - i > k && ans[stackSize - 1] < nums[i]) {
                stackSize--;
            }
            if (stackSize < k) {
                ans[stackSize++] = nums[i];
            }
        }
        return ans;

=======

        int n = nums.length;
        int[] result = new int[k];
        
        int j = 0;
        for (int i = 0; i < n; i++) {
            while (n - i + j > k && j > 0 && result[j - 1] < nums[i]) {
                j--;
            }
            if (j < k) {
                result[j++] = nums[i];
            }
        }
        return result;

=======

        int n = nums.length;
        int[] res = new int[k];
        int l = 0, r = n - k;
        for (int i = 0; i < k; i++) {
            res[i] = nums[l] > nums[r] ? nums[l++] : nums[r++];
        }
        return res;

=======

        int[] res = new int[k];
        int len = nums.length;
        int start = 0;
        int end = len - k;
        int index = 0;
        while (k > 0) {
            int max = Integer.MIN_VALUE;
            for (int i = start; i <= end; i++) {
                if (nums[i] > max) {
                    max = nums[i];
                    index = i;
                }
            }
            res[len - k] = max;
            start = index + 1;
            end++;
            k--;
        }
        return res;

=======

        int n = nums.length;
        int[] res = new int[k];
        int max = Integer.MIN_VALUE;
        int start = 0;
        for (int i = 0; i <= n - k; i++) {
            int sum = 0;
            for (int j = i; j < n; j++) {
                sum += nums[j];
                if (j - i + 1 == k) {
                    if (sum > max) {
                        max = sum;
                        start = i;
                    }
                    sum -= nums[j - k + 1];
                }
            }
        }
        for (int i = 0; i < k; i++) {
            res[i] = nums[start + i];
        }
        return res;

=======

        int[] arr = new int[k];
        int n = nums.length;
        int j = 0;
        for(int i = 0; i < n; i++){
            while(j > 0 && arr[j-1] < nums[i] && n - i > k - j){
                j--;
            }
            if(j < k){
                arr[j++] = nums[i];
            }
        }
        return arr;

=======

        int[] result = new int[k];
        int start = 0;
        int end = nums.length - 1;
        int index = 0;
        while (k > 0) {
            int max = Integer.MIN_VALUE;
            int maxIndex = -1;
            for (int i = start; i <= end - k + 1; i++) {
                if (nums[i] > max) {
                    max = nums[i];
                    maxIndex = i;
                }
            }
            result[index++] = max;
            k--;
            start = maxIndex + 1;
        }
        return result;

=======

        int n = nums.length;
        int[] ans = new int[k];
        if (n == 0) {
            return ans;
        }
        int i = 0;
        int j = 0;
        int sum = 0;
        int max = Integer.MIN_VALUE;
        int maxI = -1;
        int maxJ = -1;
        while (j < n) {
            sum += nums[j];
            if (j - i + 1 == k) {
                if (sum > max) {
                    max = sum;
                    maxI = i;
                    maxJ = j;
                }
                sum -= nums[i];
                i++;
            }
            j++;
        }
        for (int l = maxI; l <= maxJ; l++) {
            ans[l - maxI] = nums[l];
        }
        return ans;

=======

        int[] res = new int[k];
        int n = nums.length;
        int max = 0;
        int j = 0;
        for (int i = 0; i < n; i++) {
            max = Math.max(max, nums[i]);
            if (n - i + j > k && nums[i] < max) {
                continue;
            }
            res[j++] = nums[i];
            if (j == k) {
                break;
            }
        }
        return res;
