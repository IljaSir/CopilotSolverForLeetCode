Synthesizing 10/10 solutions

=======

        int sum = 0;
        for (int i = 0; i < arr.length; i++) {
            sum += arr[i];
        }
        if (sum % 3 != 0) {
            return false;
        }
        int subSum = sum / 3;
        int curSum = 0;
        int count = 0;
        for (int i = 0; i < arr.length; i++) {
            curSum += arr[i];
            if (curSum == subSum) {
                count++;
                curSum = 0;
            }
        }
        return count >= 3;

=======

        int sum = 0;
        for (int i = 0; i < arr.length; i++) {
            sum += arr[i];
        }
        if (sum % 3 != 0) {
            return false;
        }
        int part = sum / 3;
        int cur = 0;
        int count = 0;
        for (int i = 0; i < arr.length; i++) {
            cur += arr[i];
            if (cur == part) {
                count++;
                cur = 0;
            }
        }
        return count >= 3;

=======

        int sum = 0;
        for (int i = 0; i < arr.length; i++) {
            sum += arr[i];
        }
        if (sum % 3 != 0) {
            return false;
        }
        int partSum = sum / 3;
        int partCount = 0;
        int curSum = 0;
        for (int i = 0; i < arr.length; i++) {
            curSum += arr[i];
            if (curSum == partSum) {
                partCount++;
                curSum = 0;
            }
        }
        return partCount >= 3;

=======

        int sum = 0;
        for (int i = 0; i < arr.length; i++) {
            sum += arr[i];
        }
        if (sum % 3 != 0) {
            return false;
        }
        int target = sum / 3;
        int curSum = 0;
        int count = 0;
        for (int i = 0; i < arr.length; i++) {
            curSum += arr[i];
            if (curSum == target) {
                count++;
                curSum = 0;
            }
        }
        return count >= 3;

=======

        int sum = 0;
        for (int i = 0; i < arr.length; i++) {
            sum += arr[i];
        }
        if (sum % 3 != 0) {
            return false;
        }
        int count = 0;
        int temp = 0;
        for (int i = 0; i < arr.length; i++) {
            temp += arr[i];
            if (temp == sum / 3) {
                count++;
                temp = 0;
            }
        }
        if (count >= 3) {
            return true;
        } else {
            return false;
        }

=======

        int sum = 0;
        for (int i : arr) {
            sum += i;
        }
        if (sum % 3 != 0) {
            return false;
        }
        int target = sum / 3;
        int count = 0;
        int temp = 0;
        for (int i : arr) {
            temp += i;
            if (temp == target) {
                count++;
                temp = 0;
            }
        }
        return count >= 3;

=======

        int sum = 0;
        for (int i = 0; i < arr.length; i++) {
            sum += arr[i];
        }
        if (sum % 3 != 0) return false;
        int target = sum / 3;
        int curr = 0, count = 0;
        for (int i = 0; i < arr.length; i++) {
            curr += arr[i];
            if (curr == target) {
                curr = 0;
                count++;
            }
        }
        return count >= 3;

=======

        int sum = 0;
        for (int i : arr) {
            sum += i;
        }
        if (sum % 3 != 0) {
            return false;
        }
        int partSum = sum / 3;
        int count = 0;
        int curSum = 0;
        for (int i : arr) {
            curSum += i;
            if (curSum == partSum) {
                curSum = 0;
                count++;
            }
        }
        return count >= 3;

=======

        int sum = 0;
        for(int i = 0; i < arr.length; i++) {
            sum += arr[i];
        }
        if(sum % 3 != 0) return false;
        int target = sum / 3;
        int count = 0;
        sum = 0;
        for(int i = 0; i < arr.length; i++) {
            sum += arr[i];
            if(sum == target) {
                count++;
                sum = 0;
            }
        }
        return count >= 3;

=======

        int sum = 0;
        for(int i: arr){
            sum += i;
        }
        if(sum % 3 != 0){
            return false;
        }
        int part = sum / 3;
        int curSum = 0;
        int count = 0;
        for(int i: arr){
            curSum += i;
            if(curSum == part){
                count++;
                curSum = 0;
            }
        }
        return count >= 3;
