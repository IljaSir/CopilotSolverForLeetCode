Synthesizing 10/10 solutions

=======

        char[] chars = s.toCharArray();
        for (int i = 0; i < chars.length; i++) {
            if (chars[i] == '?') {
                for (char c = 'a'; c <= 'z'; c++) {
                    if (i > 0 && chars[i - 1] == c) {
                        continue;
                    }
                    if (i < chars.length - 1 && chars[i + 1] == c) {
                        continue;
                    }
                    chars[i] = c;
                    break;
                }
            }
        }
        return new String(chars);

=======

        char[] arr = s.toCharArray();
        for (int i = 0; i < arr.length; i++) {
            if (arr[i] == '?') {
                for (char c = 'a'; c <= 'z'; c++) {
                    if (i > 0 && arr[i - 1] == c) continue;
                    if (i < arr.length - 1 && arr[i + 1] == c) continue;
                    arr[i] = c;
                    break;
                }
            }
        }
        return new String(arr);

=======

        char[] arr = s.toCharArray();
        for (int i = 0; i < arr.length; i++) {
            if (arr[i] == '?') {
                for (char c = 'a'; c <= 'z'; c++) {
                    if ((i == 0 || arr[i - 1] != c) && (i == arr.length - 1 || arr[i + 1] != c)) {
                        arr[i] = c;
                        break;
                    }
                }
            }
        }
        return new String(arr);

=======

        char[] a = s.toCharArray();
        for (int i = 0; i < a.length; i++) {
            if (a[i] == '?') {
                for (char c = 'a'; c <= 'z'; c++) {
                    if ((i == 0 || a[i - 1] != c) && (i == a.length - 1 || a[i + 1] != c)) {
                        a[i] = c;
                        break;
                    }
                }
            }
        }
        return new String(a);
    }
}

=======

        char[] chars = s.toCharArray();
        for (int i = 0; i < chars.length; i++) {
            if (chars[i] != '?') {
                continue;
            }
            for (char c = 'a'; c <= 'z'; c++) {
                if (i > 0 && chars[i - 1] == c) {
                    continue;
                }
                if (i < chars.length - 1 && chars[i + 1] == c) {
                    continue;
                }
                chars[i] = c;
                break;
            }
        }
        return new String(chars);

=======

        char[] c = s.toCharArray();
        for (int i = 0; i < c.length; i++) {
            if (c[i] == '?') {
                c[i] = 'a';
                while ((i > 0 && c[i] == c[i - 1]) || (i < c.length - 1 && c[i] == c[i + 1])) {
                    c[i]++;
                }
            }
        }
        return new String(c);

=======

        char[] chars = s.toCharArray();
        for (int i = 0; i < chars.length; i++) {
            if (chars[i] == '?') {
                char prev = i == 0 ? ' ' : chars[i - 1];
                char next = i == chars.length - 1 ? ' ' : chars[i + 1];
                char c = 'a';
                while (c == prev || c == next) {
                    c++;
                }
                chars[i] = c;
            }
        }
        return new String(chars);

=======

        char[] chs = s.toCharArray();
        for (int i = 0; i < chs.length; i++) {
            if (chs[i] == '?') {
                char left = i == 0 ? ' ' : chs[i - 1];
                char right = i == chs.length - 1 ? ' ' : chs[i + 1];
                for (char c = 'a'; c <= 'z'; c++) {
                    if (c != left && c != right) {
                        chs[i] = c;
                        break;
                    }
                }
            }
        }
        return new String(chs);

=======

        char[] arr = s.toCharArray();
        char[] result = new char[arr.length];
        for (int i = 0; i < arr.length; i++) {
            if (arr[i] == '?') {
                char c = 'a';
                while (c == result[i - 1] || c == arr[i + 1]) {
                    c++;
                }
                result[i] = c;
            } else {
                result[i] = arr[i];
            }
        }
        return new String(result);

=======

        String result = "";
        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            if (c == '?') {
                char pre = i > 0 ? s.charAt(i - 1) : ' ';
                char next = i < s.length() - 1 ? s.charAt(i + 1) : ' ';
                char replace = 'a';
                while (replace == pre || replace == next) {
                    replace++;
                }
                result += replace;
            } else {
                result += c;
            }
        }
        return result;
