Synthesizing 10/10 solutions

=======

        int cold = amount[0];
        int warm = amount[1];
        int hot = amount[2];
        int time = 0;
        while (cold > 0 || warm > 0 || hot > 0) {
            if (cold > 0 && warm > 0) {
                cold--;
                warm--;
                time++;
            } else if (warm > 0 && hot > 0) {
                warm--;
                hot--;
                time++;
            } else if (hot > 0 && cold > 0) {
                cold--;
                hot--;
                time++;
            } else if (cold > 0) {
                cold--;
                time++;
            } else if (warm > 0) {
                warm--;
                time++;
            } else if (hot > 0) {
                hot--;
                time++;
            }
        }
        return time;

=======

        int[] cups = new int[3];
        int time = 0;
        while (cups[0] < amount[0] || cups[1] < amount[1] || cups[2] < amount[2]) {
            if (cups[0] < amount[0] && cups[1] < amount[1]) {
                cups[0]++;
                cups[1]++;
            } else if (cups[0] < amount[0] && cups[2] < amount[2]) {
                cups[0]++;
                cups[2]++;
            } else if (cups[1] < amount[1] && cups[2] < amount[2]) {
                cups[1]++;
                cups[2]++;
            } else if (cups[0] < amount[0]) {
                cups[0]++;
            } else if (cups[1] < amount[1]) {
                cups[1]++;
            } else if (cups[2] < amount[2]) {
                cups[2]++;
            }
            time++;
        }
        return time;

=======

        int ans = 0;
        int[] cups = new int[3];
        while (cups[0] < amount[0] || cups[1] < amount[1] || cups[2] < amount[2]) {
            if (cups[0] < amount[0] && cups[1] < amount[1]) {
                cups[0]++;
                cups[1]++;
                ans++;
            }
            if (cups[1] < amount[1] && cups[2] < amount[2]) {
                cups[1]++;
                cups[2]++;
                ans++;
            }
            if (cups[0] < amount[0] && cups[2] < amount[2]) {
                cups[0]++;
                cups[2]++;
                ans++;
            }
            if (cups[0] < amount[0]) {
                cups[0]++;
                ans++;
            }
            if (cups[1] < amount[1]) {
                cups[1]++;
                ans++;
            }
            if (cups[2] < amount[2]) {
                cups[2]++;
                ans++;
            }
        }
        return ans;

=======

        int res = 0;
        int[] cups = new int[3];
        while (cups[0] < amount[0] || cups[1] < amount[1] || cups[2] < amount[2]) {
            res++;
            int[] next = new int[3];
            for (int i = 0; i < 3; i++) {
                next[i] = Math.min(cups[i] + 2, amount[i]);
            }
            if (next[0] == amount[0] && next[1] == amount[1] && next[2] == amount[2]) {
                return res;
            }
            if (next[0] == amount[0] && next[1] == amount[1]) {
                cups[2] = next[2];
                continue;
            }
            if (next[0] == amount[0] && next[2] == amount[2]) {
                cups[1] = next[1];
                continue;
            }
            if (next[1] == amount[1] && next[2] == amount[2]) {
                cups[0] = next[0];
                continue;
            }
            if (next[0] == amount[0]) {
                cups[1] = next[1];
                cups[2] = next[2];
                continue;
            }
            if (next[1] == amount[1]) {
                cups[0] = next[0];
                cups[2] = next[2];
                continue;
            }
            if (next[2] == amount[2]) {
                cups[0] = next[0];
                cups[1] = next[1];
                continue;
            }
            cups[0] = next[0];
            cups[1] = next[1];
            cups[2] = next[2];
        }
        return res;

=======

        int cold = amount[0];
        int warm = amount[1];
        int hot = amount[2];
        int time = 0;
        while (cold + warm + hot > 0) {
            if (cold > 0 && warm > 0) {
                cold--;
                warm--;
                time++;
            } else if (warm > 0 && hot > 0) {
                warm--;
                hot--;
                time++;
            } else if (cold > 0 && hot > 0) {
                cold--;
                hot--;
                time++;
            } else if (cold > 0) {
                cold--;
                time++;
            } else if (warm > 0) {
                warm--;
                time++;
            } else if (hot > 0) {
                hot--;
                time++;
            }
        }
        return time;

=======

        int max = 0;
        for (int i = 0; i < 3; i++) {
            max = Math.max(max, amount[i]);
        }
        int[] dp = new int[max + 1];
        for (int i = 0; i < 3; i++) {
            for (int j = 1; j <= max; j++) {
                if (j <= amount[i]) {
                    dp[j] += 1;
                } else {
                    dp[j] = Math.min(dp[j], dp[j - amount[i]] + 1);
                }
            }
        }
        return dp[max];
    }
}

=======

        int cold = amount[0];
        int warm = amount[1];
        int hot = amount[2];
        int seconds = 0;
        int max = Math.max(cold, Math.max(warm, hot));
        int min = Math.min(cold, Math.min(warm, hot));
        int mid = cold + warm + hot - max - min;
        
        if (max >= min + mid) {
            seconds = max + mid;
        } else {
            seconds = max + (min + mid - max) / 2 + (min + mid - max) % 2;
        }
        
        return seconds;

=======

        int totalAmount = 0;
        for (int i = 0; i < amount.length; i++) {
            totalAmount += amount[i];
        }
        int cold = amount[0];
        int warm = amount[1];
        int hot = amount[2];
        int min = Math.min(cold, Math.min(warm, hot));
        int max = Math.max(cold, Math.max(warm, hot));
        int mid = cold + warm + hot - min - max;
        int time = 0;
        if (min == max) {
            time = min * 2;
        } else if (min == mid) {
            time = min * 2 + 1;
        } else if (mid == max) {
            time = min * 2 + 1;
        } else if (min < mid) {
            time = min * 2 + mid - min;
        } else if (mid < max) {
            time = min * 2 + max - mid;
        }
        return time;

=======

        int minTime = 0;
        int min = Integer.MAX_VALUE;
        int minIndex = -1;
        for(int i=0;i<3;i++){
            if(amount[i] < min){
                min = amount[i];
                minIndex = i;
            }
        }
        minTime += min;
        int max = Integer.MIN_VALUE;
        int maxIndex = -1;
        for(int i=0;i<3;i++){
            if(amount[i] > max && i != minIndex){
                max = amount[i];
                maxIndex = i;
            }
        }
        minTime += max - min;
        int sum = 0;
        for(int i=0;i<3;i++){
            if(i != minIndex && i != maxIndex){
                sum += amount[i];
            }
        }
        if(sum > 0){
            minTime += sum;
        }
        return minTime;

=======

        int ans = 0;
        for(int i=0; i<3; i++){
            ans += amount[i];
        }
        int[] arr = Arrays.copyOf(amount, 3);
        if(arr[0] > arr[2]){
            int temp = arr[0];
            arr[0] = arr[2];
            arr[2] = temp;
        }
        if(arr[1] > arr[2]){
            int temp = arr[1];
            arr[1] = arr[2];
            arr[2] = temp;
        }
        int min = Math.min(arr[0], arr[1]);
        ans += min;
        arr[0] -= min;
        arr[1] -= min;
        ans += arr[2];
        return ans;
