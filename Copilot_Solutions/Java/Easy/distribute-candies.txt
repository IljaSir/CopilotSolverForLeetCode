Synthesizing 10/10 solutions

=======

        Set<Integer> set = new HashSet<>();
        for (int candy : candyType) {
            set.add(candy);
        }
        return Math.min(set.size(), candyType.length / 2);

=======

        Set<Integer> set = new HashSet<>();
        for(int i = 0; i < candyType.length; i++) {
            set.add(candyType[i]);
        }
        return Math.min(set.size(), candyType.length / 2);

=======

        Set<Integer> set = new HashSet<>();
        for (int c : candyType) {
            set.add(c);
        }
        return Math.min(set.size(), candyType.length / 2);

=======

        Set<Integer> types = new HashSet<>();
        for (int t : candyType) {
            types.add(t);
        }
        return Math.min(types.size(), candyType.length / 2);

=======

        Set<Integer> candySet = new HashSet<>();
        for (int i = 0; i < candyType.length; i++) {
            candySet.add(candyType[i]);
        }
        return Math.min(candyType.length / 2, candySet.size());

=======

        Set<Integer> set = new HashSet<Integer>();
        for (int i : candyType) {
            set.add(i);
        }
        return Math.min(set.size(), candyType.length / 2);

=======

        int n = candyType.length;
        Set<Integer> set = new HashSet<>();
        for (int i = 0; i < n; i++) {
            set.add(candyType[i]);
        }
        return set.size() > n / 2 ? n / 2 : set.size();

=======

        Set<Integer> types = new HashSet<>();
        for (int type : candyType) {
            types.add(type);
        }
        int n = candyType.length;
        return Math.min(types.size(), n / 2);

=======

        Set<Integer> candySet = new HashSet<Integer>();
        for (int t : candyType) {
            candySet.add(t);
        }
        return Math.min(candySet.size(), candyType.length / 2);

=======

        int n = candyType.length;
        Set<Integer> set = new HashSet<>();
        for(int i=0;i<n;i++){
            set.add(candyType[i]);
        }
        if(set.size() > n/2){
            return n/2;
        }else{
            return set.size();
        }
