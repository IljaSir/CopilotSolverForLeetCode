Synthesizing 10/10 solutions

=======

        int i = 0;
        int j = 0;
        StringBuilder sb = new StringBuilder();
        while (i < word1.length() || j < word2.length()) {
            if (i < word1.length()) {
                sb.append(word1.charAt(i));
                i++;
            }
            if (j < word2.length()) {
                sb.append(word2.charAt(j));
                j++;
            }
        }
        return sb.toString();

=======

        int i = 0;
        int j = 0;
        StringBuilder sb = new StringBuilder();
        while (i < word1.length() && j < word2.length()) {
            sb.append(word1.charAt(i++));
            sb.append(word2.charAt(j++));
        }
        while (i < word1.length()) {
            sb.append(word1.charAt(i++));
        }
        while (j < word2.length()) {
            sb.append(word2.charAt(j++));
        }
        return sb.toString();

=======

        var sb = new StringBuilder();
        var i = 0;
        for (; i < word1.length() && i < word2.length(); i++) {
            sb.append(word1.charAt(i));
            sb.append(word2.charAt(i));
        }
        if (i < word1.length()) {
            sb.append(word1.substring(i));
        }
        if (i < word2.length()) {
            sb.append(word2.substring(i));
        }
        return sb.toString();

=======

        var sb = new StringBuilder();
        int i = 0;
        for (; i < word1.length() && i < word2.length(); i++) {
            sb.append(word1.charAt(i));
            sb.append(word2.charAt(i));
        }
        if (i < word1.length()) {
            sb.append(word1.substring(i));
        }
        if (i < word2.length()) {
            sb.append(word2.substring(i));
        }
        return sb.toString();

=======

        int i = 0;
        int j = 0;
        StringBuilder sb = new StringBuilder();
        while(i < word1.length() && j < word2.length()) {
            sb.append(word1.charAt(i++));
            sb.append(word2.charAt(j++));
        }
        if (i < word1.length()) {
            sb.append(word1.substring(i));
        }
        if (j < word2.length()) {
            sb.append(word2.substring(j));
        }
        return sb.toString();

=======

        int n1 = word1.length();
        int n2 = word2.length();
        int n = Math.min(n1, n2);
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < n; i++) {
            sb.append(word1.charAt(i));
            sb.append(word2.charAt(i));
        }
        if (n1 > n) {
            sb.append(word1.substring(n));
        }
        if (n2 > n) {
            sb.append(word2.substring(n));
        }
        return sb.toString();

=======

        int l1 = word1.length();
        int l2 = word2.length();
        int i = 0;
        int j = 0;
        StringBuilder sb = new StringBuilder();
        while (i < l1 && j < l2) {
            sb.append(word1.charAt(i));
            sb.append(word2.charAt(j));
            i++;
            j++;
        }
        if (i == l1) {
            sb.append(word2.substring(j));
        } else {
            sb.append(word1.substring(i));
        }
        return sb.toString();

=======

        int m = word1.length();
        int n = word2.length();
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < Math.min(m, n); i++) {
            sb.append(word1.charAt(i));
            sb.append(word2.charAt(i));
        }
        if (m > n) {
            sb.append(word1.substring(n));
        } else {
            sb.append(word2.substring(m));
        }
        return sb.toString();

=======

        int i=0;
        int j=0;
        StringBuilder sb = new StringBuilder();
        while(i<word1.length() && j<word2.length()){
            sb.append(word1.charAt(i));
            sb.append(word2.charAt(j));
            i++;
            j++;
        }
        if(i<word1.length()){
            sb.append(word1.substring(i));
        }
        if(j<word2.length()){
            sb.append(word2.substring(j));
        }
        return sb.toString();

=======

        int len1 = word1.length();
        int len2 = word2.length();
        int len = Math.min(len1, len2);
        char[] result = new char[len1 + len2];
        int index = 0;
        for (int i = 0; i < len; i++) {
            result[index++] = word1.charAt(i);
            result[index++] = word2.charAt(i);
        }
        if (len1 > len) {
            for (int i = len; i < len1; i++) {
                result[index++] = word1.charAt(i);
            }
        } else {
            for (int i = len; i < len2; i++) {
                result[index++] = word2.charAt(i);
            }
        }
        return new String(result);
