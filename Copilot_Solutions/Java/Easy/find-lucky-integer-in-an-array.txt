Synthesizing 10/10 solutions (Duplicates hidden)

=======

        Map<Integer, Integer> map = new HashMap<>();
        for (int i = 0; i < arr.length; i++) {
            map.put(arr[i], map.getOrDefault(arr[i], 0) + 1);
        }
        int max = -1;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getKey() == entry.getValue()) {
                max = Math.max(max, entry.getKey());
            }
        }
        return max;

=======

        int[] freq = new int[501];
        for (int i = 0; i < arr.length; i++) {
            freq[arr[i]]++;
        }
        int max = -1;
        for (int i = 1; i < freq.length; i++) {
            if (freq[i] == i) {
                max = Math.max(max, i);
            }
        }
        return max;

=======

        int[] freq = new int[501];
        for (int i = 0; i < arr.length; i++) {
            freq[arr[i]]++;
        }
        int max = -1;
        for (int i = 0; i < freq.length; i++) {
            if (freq[i] == i) {
                max = Math.max(max, i);
            }
        }
        return max;

=======

        int[] count = new int[501];
        for (int i = 0; i < arr.length; i++) {
            count[arr[i]]++;
        }
        int max = -1;
        for (int i = 0; i < count.length; i++) {
            if (count[i] == i) {
                max = i;
            }
        }
        return max;

=======

        int[] counts = new int[501];
        for (int n : arr) {
            counts[n]++;
        }
        for (int i = counts.length - 1; i >= 1; i--) {
            if (counts[i] == i) {
                return i;
            }
        }
        return -1;

=======

        int[] freq = new int[501];
        for (int x : arr) {
            freq[x]++;
        }
        int ans = -1;
        for (int i = 1; i < 501; i++) {
            if (freq[i] == i) {
                ans = i;
            }
        }
        return ans;

=======

        int[] freq = new int[501];
        for (int i: arr) {
            freq[i]++;
        }
        int res = -1;
        for (int i = 1; i < 501; i++) {
            if (freq[i] == i) {
                res = i;
            }
        }
        return res;

=======

        int[] count = new int[501];
        for (int n: arr) {
            count[n]++;
        }
        int res = -1;
        for (int i = 1; i < 501; i++) {
            if (count[i] == i) {
                res = i;
            }
        }
        return res;

=======

        int[] count = new int[501];
        for (int i : arr) {
            count[i] += 1;
        }
        int max = -1;
        for (int i = 0; i <= 500; i++) {
            if (count[i] == i) {
                max = Math.max(max, i);
            }
        }
        return max;
