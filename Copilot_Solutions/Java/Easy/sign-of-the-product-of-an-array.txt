Synthesizing 10/10 solutions

=======

        int sign = 1;
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] == 0) {
                return 0;
            } else if (nums[i] < 0) {
                sign = -sign;
            }
        }
        return sign;

=======

        int result = 1;
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] == 0) {
                return 0;
            } else if (nums[i] < 0) {
                result = -result;
            }
        }
        return result;

=======

        int product = 1;
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] == 0) {
                return 0;
            } else if (nums[i] < 0) {
                product *= -1;
            }
        }
        return product;

=======

        int product = 1;
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] == 0) {
                return 0;
            }
            if (nums[i] < 0) {
                product = -1 * product;
            }
        }
        return product;

=======

        int sign = 1;
        for (int num : nums) {
            if (num == 0) {
                return 0;
            }
            if (num < 0) {
                sign *= -1;
            }
        }
        return sign;

=======

        int sign = 1;
        for (int num : nums) {
            if (num == 0) {
                return 0;
            } else if (num < 0) {
                sign = -sign;
            }
        }
        return sign;

=======

        int product = 1;
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] > 0) {
                product *= 1;
            } else if (nums[i] < 0) {
                product *= -1;
            } else {
                product *= 0;
            }
        }
        return product;

=======

        int res = 1;
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] == 0) {
                return 0;
            }
            if (nums[i] < 0) {
                res = -res;
            }
        }
        return res;

=======

        int count = 0;
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] == 0) {
                return 0;
            }
            if (nums[i] < 0) {
                count++;
            }
        }
        if (count % 2 == 0) {
            return 1;
        } else {
            return -1;
        }

=======

        int product = 1;
        for(int num : nums) {
            if(num == 0) return 0;
            if(num < 0) product *= -1;
        }
        return product;
