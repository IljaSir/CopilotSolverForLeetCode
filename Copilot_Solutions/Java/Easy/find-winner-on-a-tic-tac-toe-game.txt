Synthesizing 10/10 solutions

=======

        int[][] board = new int[3][3];
        for (int i = 0; i < moves.length; i++) {
            if (i % 2 == 0) {
                board[moves[i][0]][moves[i][1]] = 1;
            } else {
                board[moves[i][0]][moves[i][1]] = 2;
            }
        }
        int sum = 0;
        for (int i = 0; i < 3; i++) {
            sum = board[i][0] + board[i][1] + board[i][2];
            if (sum == 3) {
                return "A";
            }
            if (sum == 6) {
                return "B";
            }
            sum = board[0][i] + board[1][i] + board[2][i];
            if (sum == 3) {
                return "A";
            }
            if (sum == 6) {
                return "B";
            }
        }
        sum = board[0][0] + board[1][1] + board[2][2];
        if (sum == 3) {
            return "A";
        }
        if (sum == 6) {
            return "B";
        }
        sum = board[2][0] + board[1][1] + board[0][2];
        if (sum == 3) {
            return "A";
        }
        if (sum == 6) {
            return "B";
        }
        if (moves.length == 9) {
            return "Draw";
        }
        return "Pending";

=======

        int[][] board = new int[3][3];
        for (int i = 0; i < moves.length; i++) {
            if (i % 2 == 0) {
                board[moves[i][0]][moves[i][1]] = 1;
            } else {
                board[moves[i][0]][moves[i][1]] = 2;
            }
        }
        for (int i = 0; i < 3; i++) {
            if (board[i][0] == board[i][1] && board[i][1] == board[i][2]) {
                if (board[i][0] == 1) {
                    return "A";
                } else if (board[i][0] == 2) {
                    return "B";
                }
            }
            if (board[0][i] == board[1][i] && board[1][i] == board[2][i]) {
                if (board[0][i] == 1) {
                    return "A";
                } else if (board[0][i] == 2) {
                    return "B";
                }
            }
        }
        if (board[0][0] == board[1][1] && board[1][1] == board[2][2]) {
            if (board[0][0] == 1) {
                return "A";
            } else if (board[0][0] == 2) {
                return "B";
            }
        }
        if (board[0][2] == board[1][1] && board[1][1] == board[2][0]) {
            if (board[0][2] == 1) {
                return "A";
            } else if (board[0][2] == 2) {
                return "B";
            }
        }
        if (moves.length == 9) {
            return "Draw";
        }
        return "Pending";

=======

        int[][] board = new int[3][3];
        for (int i = 0; i < moves.length; i++) {
            int[] move = moves[i];
            board[move[0]][move[1]] = i % 2 + 1;
        }
        int[] row = new int[3];
        int[] col = new int[3];
        int diag = 0;
        int antiDiag = 0;
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                int player = board[i][j];
                if (player == 0) {
                    continue;
                }
                row[i] += player;
                col[j] += player;
                if (i == j) {
                    diag += player;
                }
                if (i + j == 2) {
                    antiDiag += player;
                }
            }
        }
        if (row[0] == 3 || row[1] == 3 || row[2] == 3 || col[0] == 3 || col[1] == 3 || col[2] == 3 || diag == 3 || antiDiag == 3) {
            return "A";
        }
        if (row[0] == 6 || row[1] == 6 || row[2] == 6 || col[0] == 6 || col[1] == 6 || col[2] == 6 || diag == 6 || antiDiag == 6) {
            return "B";
        }
        if (moves.length == 9) {
            return "Draw";
        }
        return "Pending";

=======

        char[][] grid = new char[3][3];
        for (int i = 0; i < moves.length; i++) {
            int x = moves[i][0];
            int y = moves[i][1];
            if (i % 2 == 0) {
                grid[x][y] = 'X';
            } else {
                grid[x][y] = 'O';
            }
        }

        int[] xCount = new int[8];
        int[] oCount = new int[8];
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                if (grid[i][j] == 'X') {
                    xCount[i]++;
                    xCount[j + 3]++;
                    if (i == j) {
                        xCount[6]++;
                    }
                    if (i + j == 2) {
                        xCount[7]++;
                    }
                } else if (grid[i][j] == 'O') {
                    oCount[i]++;
                    oCount[j + 3]++;
                    if (i == j) {
                        oCount[6]++;
                    }
                    if (i + j == 2) {
                        oCount[7]++;
                    }
                }
            }
        }

        for (int i = 0; i < 8; i++) {
            if (xCount[i] == 3) {
                return "A";
            } else if (oCount[i] == 3) {
                return "B";
            }
        }
        if (moves.length < 9) {
            return "Pending";
        }
        return "Draw";

=======

        int[] row = new int[3];
        int[] col = new int[3];
        int diagonal = 0;
        int antiDiagonal = 0;
        int n = moves.length;
        for (int i = 0; i < n; i++) {
            int r = moves[i][0];
            int c = moves[i][1];
            int player = i % 2 == 0 ? 1 : -1;
            row[r] += player;
            col[c] += player;
            if (r == c) {
                diagonal += player;
            }
            if (r + c == 2) {
                antiDiagonal += player;
            }
            if (Math.abs(row[r]) == 3 || Math.abs(col[c]) == 3 || Math.abs(diagonal) == 3 || Math.abs(antiDiagonal) == 3) {
                return i % 2 == 0 ? "A" : "B";
            }
        }
        return n == 9 ? "Draw" : "Pending";

=======

        int[] row = new int[3];
        int[] col = new int[3];
        int diag = 0, antidiag = 0;
        int n = moves.length;
        for (int i = 0; i < n; i++) {
            int r = moves[i][0], c = moves[i][1];
            int player = i % 2 == 0 ? 1 : -1;
            row[r] += player;
            col[c] += player;
            if (r == c) {
                diag += player;
            }
            if (r + c == 2) {
                antidiag += player;
            }
            if (Math.abs(row[r]) == 3 || Math.abs(col[c]) == 3 || Math.abs(diag) == 3 || Math.abs(antidiag) == 3) {
                return i % 2 == 0 ? "A" : "B";
            }
        }
        return n == 9 ? "Draw" : "Pending";

=======

        int[][] grid = new int[3][3];
        int player = 1;
        for (int[] move : moves) {
            grid[move[0]][move[1]] = player;
            player = -player;
        }
        int[] sumRow = new int[3];
        int[] sumCol = new int[3];
        int sumDiag = 0;
        int sumAntiDiag = 0;
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                sumRow[i] += grid[i][j];
                sumCol[j] += grid[i][j];
                if (i == j) {
                    sumDiag += grid[i][j];
                }
                if (i + j == 2) {
                    sumAntiDiag += grid[i][j];
                }
            }
        }
        for (int i = 0; i < 3; i++) {
            if (sumRow[i] == 3 || sumCol[i] == 3) {
                return "A";
            }
            if (sumRow[i] == -3 || sumCol[i] == -3) {
                return "B";
            }
        }
        if (sumDiag == 3 || sumAntiDiag == 3) {
            return "A";
        }
        if (sumDiag == -3 || sumAntiDiag == -3) {
            return "B";
        }
        if (moves.length == 9) {
            return "Draw";
        }
        return "Pending";

=======

        char[][] board = new char[3][3];
        int n = moves.length;
        for (int i = 0; i < n; i++) {
            int row = moves[i][0];
            int col = moves[i][1];
            if (i % 2 == 0) {
                board[row][col] = 'X';
            } else {
                board[row][col] = 'O';
            }
        }
        int sum = 0;
        for (int i = 0; i < 3; i++) {
            sum = 0;
            for (int j = 0; j < 3; j++) {
                sum += board[i][j];
            }
            if (sum == 'X' * 3) {
                return "A";
            }
            if (sum == 'O' * 3) {
                return "B";
            }
        }
        for (int i = 0; i < 3; i++) {
            sum = 0;
            for (int j = 0; j < 3; j++) {
                sum += board[j][i];
            }
            if (sum == 'X' * 3) {
                return "A";
            }
            if (sum == 'O' * 3) {
                return "B";
            }
        }
        sum = 0;
        for (int i = 0; i < 3; i++) {
            sum += board[i][i];
        }
        if (sum == 'X' * 3) {
            return "A";
        }
        if (sum == 'O' * 3) {
            return "B";
        }
        sum = 0;
        for (int i = 0; i < 3; i++) {
            sum += board[2 - i][i];
        }
        if (sum == 'X' * 3) {
            return "A";
        }
        if (sum == 'O' * 3) {
            return "B";
        }
        if (n < 9) {
            return "Pending";
        }
        return "Draw";

=======

        int[][] grid = new int[3][3];
        int n = moves.length;
        for (int i = 0; i < n; i++) {
            int[] move = moves[i];
            if (i % 2 == 0) {
                grid[move[0]][move[1]] = 1;
            } else {
                grid[move[0]][move[1]] = 2;
            }
        }
        if (grid[0][0] == 1 && grid[0][1] == 1 && grid[0][2] == 1) {
            return "A";
        } else if (grid[1][0] == 1 && grid[1][1] == 1 && grid[1][2] == 1) {
            return "A";
        } else if (grid[2][0] == 1 && grid[2][1] == 1 && grid[2][2] == 1) {
            return "A";
        } else if (grid[0][0] == 1 && grid[1][0] == 1 && grid[2][0] == 1) {
            return "A";
        } else if (grid[0][1] == 1 && grid[1][1] == 1 && grid[2][1] == 1) {
            return "A";
        } else if (grid[0][2] == 1 && grid[1][2] == 1 && grid[2][2] == 1) {
            return "A";
        } else if (grid[0][0] == 1 && grid[1][1] == 1 && grid[2][2] == 1) {
            return "A";
        } else if (grid[0][2] == 1 && grid[1][1] == 1 && grid[2][0] == 1) {
            return "A";
        } else if (grid[0][0] == 2 && grid[0][1] == 2 && grid[0][2] == 2) {
            return "B";
        } else if (grid[1][0] == 2 && grid[1][1] == 2 && grid[1][2] == 2) {
            return "

=======

        int n = moves.length;
        int[][] board = new int[3][3];
        int[][][] win = new int[8][3][2];
        win[0] = new int[][]{{0, 0}, {0, 1}, {0, 2}};
        win[1] = new int[][]{{1, 0}, {1, 1}, {1, 2}};
        win[2] = new int[][]{{2, 0}, {2, 1}, {2, 2}};
        win[3] = new int[][]{{0, 0}, {1, 0}, {2, 0}};
        win[4] = new int[][]{{0, 1}, {1, 1}, {2, 1}};
        win[5] = new int[][]{{0, 2}, {1, 2}, {2, 2}};
        win[6] = new int[][]{{0, 0}, {1, 1}, {2, 2}};
        win[7] = new int[][]{{0, 2}, {1, 1}, {2, 0}};
        for (int i = 0; i < n; i++) {
            board[moves[i][0]][moves[i][1]] = i % 2 == 0 ? 1 : 2;
        }
        for (int i = 0; i < 8; i++) {
            int a = board[win[i][0][0]][win[i][0][1]];
            int b = board[win[i][1][0]][win[i][1][1]];
            int c = board[win[i][2][0]][win[i][2][1]];
            if (a == b && a == c && a != 0) {
                return a == 1 ? "A" : "B";
            }
        }
        if (n == 9) {
            return "Draw";
        }
        return "Pending";
