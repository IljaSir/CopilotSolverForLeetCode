Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int count0 = 0;
        int count1 = 0;
        int max0 = 0;
        int max1 = 0;
        for (int i = 0; i < s.length(); i++) {
            if (s.charAt(i) == '0') {
                count0++;
                count1 = 0;
            } else {
                count1++;
                count0 = 0;
            }
            max0 = Math.max(max0, count0);
            max1 = Math.max(max1, count1);
        }
        return max1 > max0;

=======

        int max1 = 0;
        int max0 = 0;
        int count1 = 0;
        int count0 = 0;
        for (int i = 0; i < s.length(); i++) {
            if (s.charAt(i) == '1') {
                count1++;
                count0 = 0;
            } else {
                count0++;
                count1 = 0;
            }
            max1 = Math.max(max1, count1);
            max0 = Math.max(max0, count0);
        }
        return max1 > max0;

=======

        int max1 = 0;
        int max0 = 0;
        int count1 = 0;
        int count0 = 0;
        for (int i = 0; i < s.length(); i++) {
            if (s.charAt(i) == '1') {
                count1++;
                count0 = 0;
                max1 = Math.max(max1, count1);
            } else {
                count0++;
                count1 = 0;
                max0 = Math.max(max0, count0);
            }
        }
        return max1 > max0;

=======

        int max0 = 0;
        int max1 = 0;
        int count0 = 0;
        int count1 = 0;
        for (int i = 0; i < s.length(); i++) {
            if (s.charAt(i) == '0') {
                count0++;
                count1 = 0;
            } else {
                count1++;
                count0 = 0;
            }
            max0 = Math.max(max0, count0);
            max1 = Math.max(max1, count1);
        }
        return max1 > max0;

=======

        int max1 = 0;
        int max0 = 0;
        int count1 = 0;
        int count0 = 0;
        for (char c : s.toCharArray()) {
            if (c == '1') {
                count1++;
                count0 = 0;
            } else {
                count0++;
                count1 = 0;
            }
            max1 = Math.max(max1, count1);
            max0 = Math.max(max0, count0);
        }
        return max1 > max0;

=======

        int max1 = 0, max0 = 0, cur1 = 0, cur0 = 0;
        for (int i = 0; i < s.length(); i++) {
            if (s.charAt(i) == '1') {
                cur1++;
                max1 = Math.max(max1, cur1);
            } else {
                cur1 = 0;
            }
            if (s.charAt(i) == '0') {
                cur0++;
                max0 = Math.max(max0, cur0);
            } else {
                cur0 = 0;
            }
        }
        return max1 > max0;

=======

        int max1 = 0, max0 = 0;
        int count1 = 0, count0 = 0;
        for (char c : s.toCharArray()) {
            if (c == '1') {
                count1++;
                count0 = 0;
            } else {
                count0++;
                count1 = 0;
            }
            max1 = Math.max(max1, count1);
            max0 = Math.max(max0, count0);
        }
        return max1 > max0;

=======

        int ones = 0, zeros = 0;
        int onesCount = 0, zerosCount = 0;
        for(int i = 0; i < s.length(); i++){
            if(s.charAt(i) == '1'){
                onesCount++;
                zerosCount = 0;
                ones = Math.max(ones, onesCount);
            } else {
                zerosCount++;
                onesCount = 0;
                zeros = Math.max(zeros, zerosCount);
            }
        }
        return ones > zeros;
