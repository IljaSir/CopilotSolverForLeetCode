Synthesizing 10/10 solutions

=======

        String result = "";
        for (int i = 0; i < s.length(); i++) {
            for (int j = i + 1; j <= s.length(); j++) {
                String sub = s.substring(i, j);
                if (isNice(sub) && sub.length() > result.length()) {
                    result = sub;
                }
            }
        }
        return result;
    }
    
    private boolean isNice(String s) {
        Set<Character> set = new HashSet<>();
        for (char c : s.toCharArray()) {
            set.add(c);
        }
        for (char c : s.toCharArray()) {
            if (Character.isLowerCase(c) && !set.contains(Character.toUpperCase(c))) {
                return false;
            }
            if (Character.isUpperCase(c) && !set.contains(Character.toLowerCase(c))) {
                return false;
            }
        }
        return true;

=======

        String result = "";
        for (int i = 0; i < s.length(); i++) {
            for (int j = i + 1; j <= s.length(); j++) {
                String sub = s.substring(i, j);
                if (sub.length() > result.length() && isNice(sub)) {
                    result = sub;
                }
            }
        }
        return result;
    }

    private boolean isNice(String s) {
        Set<Character> set = new HashSet<>();
        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            if (set.contains(c)) {
                continue;
            }
            if (set.contains(Character.toLowerCase(c)) && set.contains(Character.toUpperCase(c))) {
                continue;
            }
            return false;
        }
        return true;

=======

        int n = s.length();
        String ans = "";
        for (int i = 0; i < n; ++i) {
            for (int j = i + 1; j <= n; ++j) {
                if (j - i > ans.length() && isNice(s.substring(i, j))) {
                    ans = s.substring(i, j);
                }
            }
        }
        return ans;
    }
    
    private boolean isNice(String s) {
        int[] cnt = new int[26];
        for (int i = 0; i < s.length(); ++i) {
            cnt[s.charAt(i) - 'a']++;
        }
        for (int i = 0; i < 26; ++i) {
            if (cnt[i] > 0 && cnt[i ^ 1 << 5] == 0) {
                return false;
            }
        }
        return true;

=======

        int n = s.length();
        for (int i = 0; i < n; ++i) {
            if (!Character.isLowerCase(s.charAt(i))) {
                String left = longestNiceSubstring(s.substring(0, i));
                String right = longestNiceSubstring(s.substring(i + 1));
                return left.length() >= right.length() ? left : right;
            }
        }
        for (int i = 0; i < n; ++i) {
            if (!Character.isUpperCase(s.charAt(i))) {
                String left = longestNiceSubstring(s.substring(0, i));
                String right = longestNiceSubstring(s.substring(i + 1));
                return left.length() >= right.length() ? left : right;
            }
        }
        return s;

=======

        int n = s.length();
        String res = "";
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j <= n; j++) {
                String sub = s.substring(i, j);
                if (isNice(sub) && sub.length() > res.length()) {
                    res = sub;
                }
            }
        }
        return res;
    }

    private boolean isNice(String s) {
        Set<Character> set = new HashSet<>();
        for (char c : s.toCharArray()) {
            set.add(c);
        }
        for (char c : s.toCharArray()) {
            if (Character.isUpperCase(c) && !set.contains(Character.toLowerCase(c))) {
                return false;
            }
            if (Character.isLowerCase(c) && !set.contains(Character.toUpperCase(c))) {
                return false;
            }
        }
        return true;

=======

        int n = s.length();
        for (int i = 0; i < n; i++) {
            if (!Character.isUpperCase(s.charAt(i))) {
                String left = longestNiceSubstring(s.substring(0, i));
                String right = longestNiceSubstring(s.substring(i + 1));
                return (left.length() >= right.length()) ? left : right;
            }
        }
        for (int i = 0; i < n; i++) {
            if (!Character.isLowerCase(s.charAt(i))) {
                String left = longestNiceSubstring(s.substring(0, i));
                String right = longestNiceSubstring(s.substring(i + 1));
                return (left.length() >= right.length()) ? left : right;
            }
        }
        return s;

=======

        int len = s.length();
        for (int i = 0; i < len; i++) {
            char c = s.charAt(i);
            if (s.indexOf(Character.toLowerCase(c)) < 0 || s.indexOf(Character.toUpperCase(c)) < 0) {
                String left = longestNiceSubstring(s.substring(0, i));
                String right = longestNiceSubstring(s.substring(i + 1));
                return left.length() >= right.length() ? left : right;
            }
        }
        return s;

=======

        int len = s.length();
        for (int i = 0; i < len; i++) {
            if (!Character.isUpperCase(s.charAt(i))) {
                String s1 = longestNiceSubstring(s.substring(0, i));
                String s2 = longestNiceSubstring(s.substring(i + 1));
                return s1.length() >= s2.length() ? s1 : s2;
            }
        }
        for (int i = 0; i < len; i++) {
            if (!s.contains("" + Character.toUpperCase(s.charAt(i)))) {
                String s1 = longestNiceSubstring(s.substring(0, i));
                String s2 = longestNiceSubstring(s.substring(i + 1));
                return s1.length() >= s2.length() ? s1 : s2;
            }
        }
        return s;

=======

        if (s == null || s.length() == 0) {
            return "";
        }
        int[] counts = new int[26];
        for (int i = 0; i < s.length(); i++) {
            counts[s.charAt(i) - 'a']++;
        }
        int i = 0;
        while (i < s.length() && counts[s.charAt(i) - 'a'] > 0) {
            i++;
        }
        if (i == s.length()) {
            return s;
        }
        String left = longestNiceSubstring(s.substring(0, i));
        String right = longestNiceSubstring(s.substring(i + 1));
        return left.length() >= right.length() ? left : right;

=======

        if (s.length() < 2) {
            return "";
        }
        int[] count = new int[26];
        for (char c : s.toCharArray()) {
            count[c - 'a'] += 1;
        }
        int i = 0;
        while (i < s.length()) {
            if (count[s.charAt(i) - 'a'] < 2) {
                i++;
            } else {
                break;
            }
        }
        if (i == s.length()) {
            return s;
        }
        String l = longestNiceSubstring(s.substring(0, i));
        String r = longestNiceSubstring(s.substring(i + 1));
        return l.length() > r.length() ? l : r;
