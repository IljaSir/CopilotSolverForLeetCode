Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int count = 0;
        for (int i = 1; i <= n; i++) {
            if (n % i == 1) {
                count++;
            }
        }
        return count;

=======

        int[] count = new int[n + 1];
        for (int i = 1; i <= n; i++) {
            int j = 1;
            while (i * j <= n) {
                count[i * j]++;
                j++;
            }
        }
        int result = 0;
        for (int i = 1; i <= n; i++) {
            if (count[i] == 1) {
                result++;
            }
        }
        return result;

=======

        if (n == 1) return 1;
        int[] dp = new int[n + 1];
        Arrays.fill(dp, 1);
        int res = 1;
        for (int i = 2; i <= n; i++) {
            for (int j = i; j <= n; j += i) {
                if (dp[j] == 1) {
                    dp[j] = 0;
                    res--;
                }
            }
            res++;
        }
        return res;

=======

        int[] dp = new int[n + 1];
        int ans = 0;
        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= n; j++) {
                if (i % j == 1) {
                    dp[i]++;
                }
            }
            ans += dp[i];
        }
        return ans;

=======

        int[] dp = new int[n+1];
        for(int i = 1; i <= n; i++){
            dp[i] = 1;
            for(int j = 2; j <= Math.sqrt(i); j++){
                if(i % j == 0){
                    dp[i] += dp[i/j];
                    if(i/j != j){
                        dp[i] += dp[j];
                    }
                }
            }
        }
        return dp[n];

=======

        return (int) Math.sqrt(n);

=======

        int result = 0;
        for (int i = 1; i <= n; i++) {
            int j = 1;
            while (j <= n) {
                j = j * 10;
            }
            result += j / 10;
        }
        return result;

=======

        int[] dp = new int[n+1];
        dp[1] = 1;
        for(int i=2; i<=n; i++){
            int j = 1;
            int count = 1;
            while(j*i <= n){
                if(dp[j*i] == 0){
                    dp[j*i] = 1;
                    count++;
                }
                j++;
            }
            dp[i] = count;
        }
        int sum = 0;
        for(int i=1; i<=n; i++){
            sum += dp[i];
        }
        return sum;

=======

        return (int)(Math.log(n) / Math.log(2));
