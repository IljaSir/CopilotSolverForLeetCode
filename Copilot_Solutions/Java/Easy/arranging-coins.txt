Synthesizing 10/10 solutions (Duplicates hidden)

=======

        long left = 0, right = n;
        long k, curr;
        while (left <= right) {
            k = left + (right - left) / 2;
            curr = k * (k + 1) / 2;
            if (curr == n) {
                return (int) k;
            } else if (curr < n) {
                left = k + 1;
            } else {
                right = k - 1;
            }
        }
        return (int) right;

=======

        int i = 0;
        while (n > 0) {
            i++;
            n -= i;
        }
        return n == 0 ? i : i - 1;

=======

        int i = 1;
        while (n >= i) {
            n -= i;
            i++;
        }
        return i - 1;

=======

        long l = 0, r = n;
        while (l <= r) {
            long m = (l + r) / 2;
            long sum = m * (m + 1) / 2;
            if (sum == n) return (int) m;
            if (sum < n) l = m + 1;
            else r = m - 1;
        }
        return (int) r;

=======

        int i = 1;
        while (n >= 0) {
            n -= i;
            i++;
        }
        return i - 2;

=======

        int k = 1;
        while (n >= k) {
            n -= k;
            k++;
        }
        return k - 1;

=======

        long l = 0;
        long r = n;
        while (l < r) {
            long mid = (l + r + 1) >> 1;
            if (mid * (mid + 1) / 2 <= n) {
                l = mid;
            } else {
                r = mid - 1;
            }
        }
        return (int)l;

=======

        return (int)(Math.sqrt((long)2 * n + 0.25) - 0.5);

=======

        int left = 1;
        int right = n;
        while (left <= right) {
            int mid = (left + right) / 2;
            if ((long) mid * (mid + 1) / 2 <= n) {
                left = mid + 1;
            } else {
                right = mid - 1;
            }
        }
        return right;
