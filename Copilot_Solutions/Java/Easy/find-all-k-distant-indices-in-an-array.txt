Synthesizing 10/10 solutions

=======

        List<Integer> result = new ArrayList<>();
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] == key) {
                for (int j = i - k; j <= i + k; j++) {
                    if (j >= 0 && j < nums.length && nums[j] == key) {
                        result.add(j);
                    }
                }
            }
        }
        return result;

=======

        List<Integer> result = new ArrayList<>();
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] == key) {
                result.add(i);
            }
        }
        List<Integer> res = new ArrayList<>();
        for (int i = 0; i < nums.length; i++) {
            for (int j = 0; j < result.size(); j++) {
                if (Math.abs(result.get(j) - i) <= k) {
                    res.add(i);
                    break;
                }
            }
        }
        return res;

=======

        List<Integer> result = new ArrayList<>();
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] == key) {
                for (int j = 0; j < nums.length; j++) {
                    if (Math.abs(i - j) <= k && nums[j] == key) {
                        result.add(i);
                        break;
                    }
                }
            }
        }
        return result;

=======

        List<Integer> res = new ArrayList<>();
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] == key) {
                res.add(i);
            }
        }
        List<Integer> ans = new ArrayList<>();
        if (res.size() == 0) {
            return ans;
        }
        for (int i = 0; i < nums.length; i++) {
            if (res.get(0) - i > k) {
                continue;
            }
            if (res.get(res.size() - 1) - i < -k) {
                break;
            }
            for (int j = 0; j < res.size(); j++) {
                if (Math.abs(res.get(j) - i) <= k) {
                    ans.add(i);
                    break;
                }
            }
        }
        return ans;

=======

        List<Integer> list = new ArrayList<>();
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] == key) {
                for (int j = 0; j < nums.length; j++) {
                    if (Math.abs(i - j) <= k && nums[j] == key) {
                        list.add(j);
                    }
                }
            }
        }
        return list;

=======

        List<Integer> indices = new ArrayList<>();
        Map<Integer, Integer> map = new HashMap<>();
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] == key) {
                map.put(i, 1);
            }
        }
        for (int i = 0; i < nums.length; i++) {
            if (map.containsKey(i)) {
                indices.add(i);
            } else {
                boolean found = false;
                for (int j : map.keySet()) {
                    if (Math.abs(j - i) <= k) {
                        indices.add(i);
                        found = true;
                        break;
                    }
                }
                if (!found) {
                    indices.add(-1);
                }
            }
        }
        return indices;

=======

        List<Integer> result = new ArrayList<>();
        int prev = -k - 1;
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] == key) {
                if (i - prev > k) {
                    result.add(i);
                }
                prev = i;
            }
        }
        return result;

=======

        List<Integer> res = new ArrayList<>();
        int j = 0;
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] == key) {
                while (j < nums.length && j <= i + k) {
                    if (nums[j] != key) {
                        res.add(j);
                    }
                    j++;
                }
            }
        }
        while (j < nums.length) {
            if (nums[j] != key) {
                res.add(j);
            }
            j++;
        }
        return res;

=======

        List<Integer> res = new ArrayList<>();
        int n = nums.length;
        int i = 0;
        while (i < n) {
            if (nums[i] == key) {
                int j = i + 1;
                while (j < n && j - i <= k && nums[j] != key) j++;
                if (j - i > k) {
                    res.add(i);
                }
                i = j;
            } else {
                i++;
            }
        }
        return res;

=======

        List<Integer> result = new LinkedList<>();
        int i = 0, j = 0;
        while (j < nums.length) {
            if (nums[j] == key) {
                if (j - i <= k) {
                    result.add(i);
                }
                i++;
            }
            j++;
        }
        return result;
