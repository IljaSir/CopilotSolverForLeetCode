Synthesizing 10/10 solutions

=======

        int max = 0;
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] > 0) {
                max = Math.max(max, nums[i]);
            }
        }
        boolean[] exist = new boolean[max + 1];
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] > 0) {
                exist[nums[i]] = true;
            }
        }
        for (int i = max; i >= 1; i--) {
            if (exist[i] && exist[-i]) {
                return i;
            }
        }
        return -1;

=======

        int max = 0;
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] > 0) {
                max = Math.max(max, nums[i]);
            }
        }
        return max;
    }
    public int largestInteger(int[] nums) {
        int max = findMaxK(nums);
        if (max == 0) {
            return -1;
        }
        for (int i = max; i > 0; i--) {
            if (Arrays.binarySearch(nums, -i) >= 0) {
                return i;
            }
        }
        return -1;

=======

        int max = Integer.MIN_VALUE;
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] > 0) {
                max = Math.max(max, nums[i]);
            }
        }
        if (max == Integer.MIN_VALUE) {
            return -1;
        }
        return max;
    }
    public int findMinK(int[] nums) {
        int min = Integer.MAX_VALUE;
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] < 0) {
                min = Math.min(min, nums[i]);
            }
        }
        if (min == Integer.MAX_VALUE) {
            return -1;
        }
        return min;
    }
    public int largestInteger(int[] nums) {
        int max = findMaxK(nums);
        int min = findMinK(nums);
        if (max == -1 || min == -1) {
            return -1;
        }
        if (max == -min) {
            return max;
        }
        return -1;

=======

        int maxK = -1;
        Set<Integer> set = new HashSet<>();
        for (int num : nums) {
            set.add(num);
        }
        for (int num : nums) {
            if (num > 0 && set.contains(-num)) {
                maxK = Math.max(maxK, num);
            }
        }
        return maxK;

=======

        int n = nums.length;
        int max = Integer.MIN_VALUE;
        for (int i = 0; i < n; i++) {
            if (nums[i] > max) {
                max = nums[i];
            }
        }
        if (max <= 0) {
            return -1;
        }
        int[] arr = new int[max + 1];
        for (int i = 0; i < n; i++) {
            if (nums[i] > 0) {
                arr[nums[i]] = 1;
            }
        }
        for (int i = max; i >= 1; i--) {
            if (arr[i] == 1 && arr[-i] == 1) {
                return i;
            }
        }
        return -1;

=======

        int max = Integer.MIN_VALUE;
        for(int i=0;i<nums.length;i++){
            if(nums[i]>max){
                max = nums[i];
            }
        }
        return max;
    }
    
    public int findMinK(int[] nums) {
        int min = Integer.MAX_VALUE;
        for(int i=0;i<nums.length;i++){
            if(nums[i]<min){
                min = nums[i];
            }
        }
        return min;
    }
    
    public int largestInteger(int[] nums) {
        int max = findMaxK(nums);
        int min = findMinK(nums);
        if(min<0){
            if(min*-1==max){
                return max;
            }
            else{
                return -1;
            }
        }
        else{
            return -1;
        }
    }
}

=======

        int max = Integer.MIN_VALUE;
        for(int n : nums) {
            if(Math.abs(n) > max) {
                max = Math.abs(n);
            }
        }
        return max;
    }
    public int largestInteger(int[] nums) {
        int max = findMaxK(nums);
        boolean[] visited = new boolean[max + 1];
        for(int n : nums) {
            if(n > 0) {
                visited[n] = true;
            }
        }
        for(int i = max; i >= 1; i--) {
            if(visited[i] && visited[-i]) {
                return i;
            }
        }
        return -1;
    }
}

=======

        HashSet<Integer> set = new HashSet<>();
        int max = 0;
        for(int i: nums) {
            set.add(i);
            if(i > 0) max = Math.max(max, i);
        }
        for(int i = max; i > 0; i--) {
            if(set.contains(i) && set.contains(-i)) return i;
        }
        return -1;

=======

        Arrays.sort(nums);
        int max = nums[nums.length - 1];
        int min = nums[0];
        if (max < 0 || min > 0) {
            return -1;
        }
        int i = 0;
        int j = nums.length - 1;
        while (i < j) {
            if (nums[i] == -nums[j]) {
                return nums[j];
            } else if (nums[i] < -nums[j]) {
                i++;
            } else {
                j--;
            }
        }
        return -1;

=======

        Arrays.sort(nums);
        int n = nums.length;
        int max = nums[n-1];
        int min = nums[0];
        if(min > 0) return -1;
        if(min < 0 && max < 0) return -min;
        if(min < 0 && max > 0){
            int i = 0;
            int j = n-1;
            int k = 0;
            while(i < j){
                if(nums[i] == -nums[j]){
                    k = nums[i];
                    break;
                }else if(nums[i] < -nums[j]){
                    i++;
                }else{
                    j--;
                }
            }
            return k;
        }
        return -1;
