Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int x1 = points[0][0];
        int y1 = points[0][1];
        int x2 = points[1][0];
        int y2 = points[1][1];
        int x3 = points[2][0];
        int y3 = points[2][1];
        return (x1 - x3) * (y2 - y3) != (x2 - x3) * (y1 - y3);

=======

        int x1 = points[0][0], y1 = points[0][1];
        int x2 = points[1][0], y2 = points[1][1];
        int x3 = points[2][0], y3 = points[2][1];
        return (x2 - x1) * (y3 - y1) != (x3 - x1) * (y2 - y1);

=======

        int x1 = points[0][0];
        int x2 = points[1][0];
        int x3 = points[2][0];
        int y1 = points[0][1];
        int y2 = points[1][1];
        int y3 = points[2][1];
        return (x1-x2)*(y1-y3) != (x1-x3)*(y1-y2);

=======

        int x0 = points[0][0], y0 = points[0][1];
        int x1 = points[1][0], y1 = points[1][1];
        int x2 = points[2][0], y2 = points[2][1];
        return (y1 - y0) * (x2 - x0) != (y2 - y0) * (x1 - x0);

=======

        return (points[0][0] - points[1][0]) * (points[0][1] - points[2][1]) != (points[0][1] - points[1][1]) * (points[0][0] - points[2][0]);

=======

        return (points[1][1] - points[0][1]) * (points[2][0] - points[0][0]) != (points[2][1] - points[0][1]) * (points[1][0] - points[0][0]);

=======

        return (points[1][1] - points[0][1]) * (points[2][0] - points[1][0]) != (points[2][1] - points[1][1]) * (points[1][0] - points[0][0]);

=======

        int[] p1 = points[0];
        int[] p2 = points[1];
        int[] p3 = points[2];
        if (p1[0] == p2[0] && p1[1] == p2[1] || p2[0] == p3[0] && p2[1] == p3[1]) {
            return false;
        }
        if (p1[0] == p3[0] && p1[1] == p3[1]) {
            return false;
        }
        if (p1[0] == p2[0]) {
            return p2[0] != p3[0];
        }
        if (p1[0] == p3[0]) {
            return p2[0] != p3[0];
        }
        if (p2[0] == p3[0]) {
            return p1[0] != p2[0];
        }
        if (p1[1] == p2[1]) {
            return p2[1] != p3[1];
        }
        if (p1[1] == p3[1]) {
            return p2[1] != p3[1];
        }
        if (p2[1] == p3[1]) {
            return p1[1] != p2[1];
        }
        return (p2[1] - p1[1]) * (p3[0] - p2[0]) != (p2[0] - p1[0]) * (p3[1] - p2[1]);

=======

        int[] p1 = points[0];
        int[] p2 = points[1];
        int[] p3 = points[2];
        if (p1[0] == p2[0] && p1[1] == p2[1]) {
            return false;
        }
        if (p2[0] == p3[0] && p2[1] == p3[1]) {
            return false;
        }
        if (p1[0] == p3[0] && p1[1] == p3[1]) {
            return false;
        }
        return (p2[0] - p1[0]) * (p3[1] - p1[1]) != (p2[1] - p1[1]) * (p3[0] - p1[0]);
