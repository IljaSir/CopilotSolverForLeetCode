Synthesizing 10/10 solutions (Duplicates hidden)

=======

        for (int[] op : ops) {
            m = Math.min(m, op[0]);
            n = Math.min(n, op[1]);
        }
        return m * n;

=======

        int minM = m;
        int minN = n;
        for (int[] op : ops) {
            minM = Math.min(minM, op[0]);
            minN = Math.min(minN, op[1]);
        }
        return minM * minN;

=======

        int minRow = m;
        int minCol = n;
        for (int[] op : ops) {
            minRow = Math.min(minRow, op[0]);
            minCol = Math.min(minCol, op[1]);
        }
        return minRow * minCol;

=======

        int minA = m;
        int minB = n;
        for (int[] op : ops) {
            minA = Math.min(minA, op[0]);
            minB = Math.min(minB, op[1]);
        }
        return minA * minB;

=======

        int minM = m;
        int minN = n;
        for (int i = 0; i < ops.length; i++) {
            minM = Math.min(minM, ops[i][0]);
            minN = Math.min(minN, ops[i][1]);
        }
        return minM * minN;

=======

        int min1 = m;
        int min2 = n;
        for (int[] op : ops) {
            min1 = Math.min(min1, op[0]);
            min2 = Math.min(min2, op[1]);
        }
        return min1 * min2;

=======

        int min1 = m;
        int min2 = n;
        for (int i = 0; i < ops.length; i++) {
            min1 = Math.min(min1, ops[i][0]);
            min2 = Math.min(min2, ops[i][1]);
        }
        return min1 * min2;
