Synthesizing 10/10 solutions

=======

        int[] count = new int[101];
        for (int num : nums1) {
            count[num]++;
        }
        for (int num : nums2) {
            count[num]++;
        }
        for (int num : nums3) {
            count[num]++;
        }
        List<Integer> result = new ArrayList<>();
        for (int i = 0; i < count.length; i++) {
            if (count[i] >= 2) {
                result.add(i);
            }
        }
        return result;

=======

        int[] count = new int[101];
        for (int num : nums1) {
            count[num]++;
        }
        for (int num : nums2) {
            count[num]++;
        }
        for (int num : nums3) {
            count[num]++;
        }
        List<Integer> list = new ArrayList<>();
        for (int i = 1; i <= 100; i++) {
            if (count[i] >= 2) {
                list.add(i);
            }
        }
        return list;

=======

        int[] count = new int[101];
        for (int n : nums1) {
            count[n]++;
        }
        for (int n : nums2) {
            count[n]++;
        }
        for (int n : nums3) {
            count[n]++;
        }
        List<Integer> res = new ArrayList<>();
        for (int i = 1; i <= 100; i++) {
            if (count[i] >= 2) {
                res.add(i);
            }
        }
        return res;

=======

        int[] count = new int[101];
        for (int i = 0; i < nums1.length; i++) {
            count[nums1[i]]++;
        }
        for (int i = 0; i < nums2.length; i++) {
            count[nums2[i]]++;
        }
        for (int i = 0; i < nums3.length; i++) {
            count[nums3[i]]++;
        }
        List<Integer> result = new ArrayList<>();
        for (int i = 1; i < 101; i++) {
            if (count[i] > 1) {
                result.add(i);
            }
        }
        return result;

=======

        Set<Integer> set1 = new HashSet<>();
        Set<Integer> set2 = new HashSet<>();
        Set<Integer> set3 = new HashSet<>();
        Set<Integer> result = new HashSet<>();
        for (int i = 0; i < nums1.length; i++) {
            set1.add(nums1[i]);
        }
        for (int i = 0; i < nums2.length; i++) {
            set2.add(nums2[i]);
        }
        for (int i = 0; i < nums3.length; i++) {
            set3.add(nums3[i]);
        }
        for (int i = 0; i < nums1.length; i++) {
            if (set2.contains(nums1[i]) || set3.contains(nums1[i])) {
                result.add(nums1[i]);
            }
        }
        for (int i = 0; i < nums2.length; i++) {
            if (set1.contains(nums2[i]) || set3.contains(nums2[i])) {
                result.add(nums2[i]);
            }
        }
        for (int i = 0; i < nums3.length; i++) {
            if (set1.contains(nums3[i]) || set2.contains(nums3[i])) {
                result.add(nums3[i]);
            }
        }
        return new ArrayList<>(result);

=======

        Set<Integer> set = new HashSet<>();
        Set<Integer> set1 = new HashSet<>();
        Set<Integer> set2 = new HashSet<>();
        Set<Integer> set3 = new HashSet<>();
        for (int i = 0; i < nums1.length; i++) {
            set1.add(nums1[i]);
        }
        for (int i = 0; i < nums2.length; i++) {
            set2.add(nums2[i]);
        }
        for (int i = 0; i < nums3.length; i++) {
            set3.add(nums3[i]);
        }
        for (int i = 0; i < nums1.length; i++) {
            if (set2.contains(nums1[i]) || set3.contains(nums1[i])) {
                set.add(nums1[i]);
            }
        }
        for (int i = 0; i < nums2.length; i++) {
            if (set1.contains(nums2[i]) || set3.contains(nums2[i])) {
                set.add(nums2[i]);
            }
        }
        for (int i = 0; i < nums3.length; i++) {
            if (set1.contains(nums3[i]) || set2.contains(nums3[i])) {
                set.add(nums3[i]);
            }
        }
        return new ArrayList<>(set);

=======

        Set<Integer> set1 = new HashSet<>();
        Set<Integer> set2 = new HashSet<>();
        Set<Integer> set3 = new HashSet<>();
        Set<Integer> set = new HashSet<>();
        for (int i = 0; i < nums1.length; i++) {
            set1.add(nums1[i]);
        }
        for (int i = 0; i < nums2.length; i++) {
            set2.add(nums2[i]);
        }
        for (int i = 0; i < nums3.length; i++) {
            set3.add(nums3[i]);
        }
        for (Integer i : set1) {
            if (set2.contains(i) || set3.contains(i)) {
                set.add(i);
            }
        }
        for (Integer i : set2) {
            if (set3.contains(i)) {
                set.add(i);
            }
        }
        return new ArrayList<>(set);

=======

        int[] map = new int[101];
        for (int i = 0; i < nums1.length; i++) {
            map[nums1[i]] |= 1;
        }
        for (int i = 0; i < nums2.length; i++) {
            map[nums2[i]] |= 2;
        }
        for (int i = 0; i < nums3.length; i++) {
            map[nums3[i]] |= 4;
        }
        List<Integer> result = new ArrayList<Integer>();
        for (int i = 0; i < map.length; i++) {
            if (map[i] > 1) {
                result.add(i);
            }
        }
        return result;

=======

        List<Integer> result = new ArrayList<>();
        int[] count = new int[101];
        for (int i : nums1) {
            count[i] = 1;
        }
        for (int i : nums2) {
            count[i] = count[i] == 1 ? 2 : 1;
        }
        for (int i : nums3) {
            count[i] = count[i] == 2 ? 2 : count[i] == 1 ? 3 : 0;
        }
        for (int i = 1; i < count.length; i++) {
            if (count[i] >= 2) {
                result.add(i);
            }
        }
        return result;

=======

        List<Integer> ans = new ArrayList<Integer>();
        int[] count = new int[101];
        for(int n: nums1) {
            count[n]++;
        }
        for(int n: nums2) {
            count[n]++;
        }
        for(int n: nums3) {
            count[n]++;
        }
        for(int i=1; i<=100; i++) {
            if(count[i] >= 2) {
                ans.add(i);
            }
        }
        return ans;
