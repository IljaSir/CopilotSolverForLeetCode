Synthesizing 10/10 solutions

=======

        Map<String, Integer> map = new HashMap<>();
        for (String word : s1.split(" ")) map.put(word, map.getOrDefault(word, 0) + 1);
        for (String word : s2.split(" ")) map.put(word, map.getOrDefault(word, 0) + 1);

        List<String> list = new ArrayList<>();
        for (String key : map.keySet()) {
            if (map.get(key) == 1) list.add(key);
        }

        return list.toArray(new String[list.size()]);

=======

        String[] words1 = s1.split(" ");
        String[] words2 = s2.split(" ");
        HashMap<String, Integer> map = new HashMap<>();
        for (String word : words1) {
            map.put(word, map.getOrDefault(word, 0) + 1);
        }
        for (String word : words2) {
            map.put(word, map.getOrDefault(word, 0) + 1);
        }
        ArrayList<String> result = new ArrayList<>();
        for (String word : map.keySet()) {
            if (map.get(word) == 1) {
                result.add(word);
            }
        }
        return result.toArray(new String[result.size()]);

=======

        String[] words1 = s1.split(" ");
        String[] words2 = s2.split(" ");
        Map<String, Integer> map = new HashMap<>();
        for (String w : words1) {
            map.put(w, map.getOrDefault(w, 0) + 1);
        }
        for (String w : words2) {
            map.put(w, map.getOrDefault(w, 0) + 1);
        }
        List<String> list = new ArrayList<>();
        for (Map.Entry<String, Integer> entry : map.entrySet()) {
            if (entry.getValue() == 1) {
                list.add(entry.getKey());
            }
        }
        return list.toArray(new String[0]);

=======

        String[] words1 = s1.split(" ");
        String[] words2 = s2.split(" ");
        Map<String, Integer> map = new HashMap<>();
        for (String w : words1) {
            map.put(w, map.getOrDefault(w, 0) + 1);
        }
        for (String w : words2) {
            map.put(w, map.getOrDefault(w, 0) + 1);
        }
        List<String> result = new ArrayList<>();
        for (String w : map.keySet()) {
            if (map.get(w) == 1) {
                result.add(w);
            }
        }
        String[] array = new String[result.size()];
        return result.toArray(array);

=======

        String[] words1 = s1.split(" ");
        String[] words2 = s2.split(" ");
        Map<String, Integer> map = new HashMap<String, Integer>();
        for (String word : words1) {
            map.put(word, map.getOrDefault(word, 0) + 1);
        }
        for (String word : words2) {
            map.put(word, map.getOrDefault(word, 0) + 1);
        }
        List<String> result = new ArrayList<String>();
        for (String word : map.keySet()) {
            if (map.get(word) == 1) {
                result.add(word);
            }
        }
        return result.toArray(new String[0]);

=======

        String[] s1s = s1.split(" ");
        String[] s2s = s2.split(" ");
        Map<String, Integer> s1Map = new HashMap<>();
        Map<String, Integer> s2Map = new HashMap<>();
        for (String s : s1s) {
            s1Map.put(s, s1Map.getOrDefault(s, 0) + 1);
        }
        for (String s : s2s) {
            s2Map.put(s, s2Map.getOrDefault(s, 0) + 1);
        }
        List<String> result = new ArrayList<>();
        for (String s : s1Map.keySet()) {
            if (s1Map.get(s) == 1 && !s2Map.containsKey(s)) {
                result.add(s);
            }
        }
        for (String s : s2Map.keySet()) {
            if (s2Map.get(s) == 1 && !s1Map.containsKey(s)) {
                result.add(s);
            }
        }
        return result.toArray(new String[result.size()]);

=======

        String[] s1Arr = s1.split(" ");
        String[] s2Arr = s2.split(" ");
        Map<String, Integer> map = new HashMap<>();
        for (String str : s1Arr) {
            map.put(str, map.getOrDefault(str, 0) + 1);
        }
        for (String str : s2Arr) {
            map.put(str, map.getOrDefault(str, 0) + 1);
        }
        List<String> list = new ArrayList<>();
        for (String str : map.keySet()) {
            if (map.get(str) == 1) {
                list.add(str);
            }
        }
        String[] result = new String[list.size()];
        for (int i = 0; i < list.size(); i++) {
            result[i] = list.get(i);
        }
        return result;

=======

        String[] s1Split = s1.split(" ");
        String[] s2Split = s2.split(" ");
        Map<String, Integer> map = new HashMap<>();
        for (String s : s1Split) {
            map.put(s, map.getOrDefault(s, 0) + 1);
        }
        for (String s : s2Split) {
            map.put(s, map.getOrDefault(s, 0) + 1);
        }
        List<String> list = new ArrayList<>();
        for (Map.Entry<String, Integer> entry : map.entrySet()) {
            if (entry.getValue() == 1) {
                list.add(entry.getKey());
            }
        }
        return list.toArray(new String[list.size()]);

=======

        String[] s1Array = s1.split(" ");
        String[] s2Array = s2.split(" ");
        Map<String, Integer> map = new HashMap<>();
        for (String s : s1Array) {
            if (!map.containsKey(s)) {
                map.put(s, 1);
            } else {
                map.put(s, map.get(s) + 1);
            }
        }
        for (String s : s2Array) {
            if (!map.containsKey(s)) {
                map.put(s, 1);
            } else {
                map.put(s, map.get(s) + 1);
            }
        }
        List<String> list = new ArrayList<>();
        for (Map.Entry<String, Integer> entry : map.entrySet()) {
            if (entry.getValue() == 1) {
                list.add(entry.getKey());
            }
        }
        String[] result = new String[list.size()];
        int i = 0;
        for (String s : list) {
            result[i++] = s;
        }
        return result;

=======

        String[] s1Array = s1.split(" ");
        String[] s2Array = s2.split(" ");
        ArrayList<String> uncommonList = new ArrayList<String>();
        for(String s: s1Array) {
            if(s2.contains(s)) {
                continue;
            }
            else {
                boolean isUncommon = true;
                for(String s3: s1Array) {
                    if(s3.equals(s)) {
                        continue;
                    }
                    else {
                        if(s3.equals(s)) {
                            isUncommon = false;
                            break;
                        }
                    }
                }
                if(isUncommon) {
                    uncommonList.add(s);
                }
            }
        }
        for(String s: s2Array) {
            if(s1.contains(s)) {
                continue;
            }
            else {
                boolean isUncommon = true;
                for(String s3: s2Array) {
                    if(s3.equals(s)) {
                        continue;
                    }
                    else {
                        if(s3.equals(s)) {
                            isUncommon = false;
                            break;
                        }
                    }
                }
                if(isUncommon) {
                    uncommonList.add(s);
                }
            }
        }
        String[] uncommonArray = new String[uncommonList.size()];
        for(int i = 0; i < uncommonArray.length; i++) {
            uncommonArray[i] = uncommonList.get(i);
        }
        return uncommonArray;
