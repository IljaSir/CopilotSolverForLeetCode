Synthesizing 10/10 solutions

=======

        int max = 0;
        for (String s : strs) {
            int val = 0;
            try {
                val = Integer.parseInt(s);
            } catch (NumberFormatException e) {
                val = s.length();
            }
            if (val > max) {
                max = val;
            }
        }
        return max;

=======

        int max = 0;
        for (String str : strs) {
            int val = 0;
            for (int i = 0; i < str.length(); i++) {
                char c = str.charAt(i);
                if (c >= '0' && c <= '9') {
                    val *= 10;
                    val += c - '0';
                } else {
                    val = str.length();
                    break;
                }
            }
            max = Math.max(max, val);
        }
        return max;

=======

        int max = 0;
        for(int i = 0; i < strs.length; i++) {
            int val = 0;
            for(int j = 0; j < strs[i].length(); j++) {
                if(Character.isDigit(strs[i].charAt(j))) {
                    val = val * 10 + (strs[i].charAt(j) - '0');
                } else {
                    val = strs[i].length();
                    break;
                }
            }
            max = Math.max(val, max);
        }
        return max;

=======

        int max = 0;
        for (String s : strs) {
            int val = 0;
            for (char c : s.toCharArray()) {
                if (Character.isDigit(c)) {
                    val = val * 10 + (c - '0');
                } else {
                    val++;
                }
            }
            max = Math.max(max, val);
        }
        return max;

=======

        int max = 0;
        for (String s : strs) {
            int value = 0;
            for (char c : s.toCharArray()) {
                if (Character.isDigit(c)) {
                    value = value * 10 + (c - '0');
                } else {
                    value++;
                }
            }
            max = Math.max(max, value);
        }
        return max;

=======

        int max = 0;
        for (String str : strs) {
            int val = 0;
            for (char c : str.toCharArray()) {
                if (c >= '0' && c <= '9') {
                    val = val * 10 + (c - '0');
                } else {
                    val++;
                }
            }
            max = Math.max(max, val);
        }
        return max;

=======

        int max = 0;
        for (String str: strs) {
            int val = 0;
            try {
                val = Integer.parseInt(str);
            } catch (Exception e) {
                val = str.length();
            }
            max = Math.max(max, val);
        }
        return max;

=======

        int max = 0;
        for (String str : strs) {
            int num = 0;
            for (char ch : str.toCharArray()) {
                if (Character.isDigit(ch)) {
                    num = num * 10 + (ch - '0');
                } else {
                    num = 0;
                    break;
                }
            }
            max = Math.max(max, num == 0 ? str.length() : num);
        }
        return max;

=======

        int max = 0;
        for(String s : strs) {
            int value = 0;
            for(int i = 0; i < s.length(); i++) {
                if(Character.isDigit(s.charAt(i))) {
                    value = value * 10 + (s.charAt(i) - '0');
                } else {
                    value = s.length();
                    break;
                }
            }
            max = Math.max(max, value);
        }
        return max;

=======

        int max = 0;
        for (String s : strs) {
            int val = 0;
            for (int i = 0; i < s.length(); i++) {
                int c = s.charAt(i) - '0';
                if (c >= 0 && c <= 9) {
                    val *= 10;
                    val += c;
                } else {
                    val = s.length();
                    break;
                }
            }
            max = Math.max(max, val);
        }
        return max;
