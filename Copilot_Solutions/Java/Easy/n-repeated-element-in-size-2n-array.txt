Synthesizing 10/10 solutions

=======

        int n = nums.length / 2;
        for (int i = 0; i < nums.length; i++) {
            int count = 0;
            for (int j = 0; j < nums.length; j++) {
                if (nums[i] == nums[j]) {
                    count++;
                }
            }
            if (count == n) {
                return nums[i];
            }
        }
        return -1;

=======

        int n = nums.length / 2;
        Map<Integer, Integer> map = new HashMap<>();
        for (int num : nums) {
            map.put(num, map.getOrDefault(num, 0) + 1);
            if (map.get(num) == n) {
                return num;
            }
        }
        return -1;

=======

        int n = nums.length / 2;
        int[] count = new int[10001];
        for (int i = 0; i < nums.length; i++) {
            count[nums[i]]++;
            if (count[nums[i]] == n) {
                return nums[i];
            }
        }
        return 0;

=======

        int len = nums.length;
        int[] count = new int[10001];
        for (int i = 0; i < len; i++) {
            count[nums[i]]++;
            if (count[nums[i]] > 1) {
                return nums[i];
            }
        }
        return -1;

=======

        int n = nums.length;
        int[] count = new int[10000];
        for (int i = 0; i < n; i++) {
            count[nums[i]]++;
            if (count[nums[i]] > 1) {
                return nums[i];
            }
        }
        return 0;

=======

        int n = nums.length;
        int[] count = new int[10001];
        for (int x: nums) {
            count[x]++;
            if (count[x] > 1)
                return x;
        }
        return -1;

=======

        int[] count = new int[10001];
        for (int x : nums) {
            count[x]++;
            if (count[x] > 1)
                return x;
        }
        return -1;

=======

        int n = nums.length/2;
        Map<Integer, Integer> map = new HashMap<>();
        for (int i=0; i<nums.length; i++) {
            if (map.containsKey(nums[i])) {
                map.put(nums[i], map.get(nums[i])+1);
            } else {
                map.put(nums[i], 1);
            }
        }
        for (Map.Entry<Integer, Integer> entry: map.entrySet()) {
            if (entry.getValue() == n) {
                return entry.getKey();
            }
        }
        return -1;

=======

        int n = nums.length/2;
        Map<Integer, Integer> map = new HashMap<>();
        for (int i = 0; i < nums.length; i++){
            if (map.containsKey(nums[i])){
                int count = map.get(nums[i]);
                if (count == n - 1){
                    return nums[i];
                }
                map.put(nums[i], count + 1);
            } else {
                map.put(nums[i], 1);
            }
        }
        return 0;

=======

        Arrays.sort(nums);
        int len = nums.length;
        if (nums[(len/2)-1] == nums[len/2]) {
            return nums[len/2];
        } else {
            return nums[len/2-1];
        }
