Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int min = Integer.MAX_VALUE;
        for (int i = 0; i < words.length; i++) {
            if (words[i].equals(target)) {
                min = Math.min(min, Math.abs(i - startIndex));
            }
        }
        return min == Integer.MAX_VALUE ? -1 : min;

=======

        int min = Integer.MAX_VALUE;
        for (int i = 0; i < words.length; i++) {
            String word = words[i];
            if (word.equals(target)) {
                min = Math.min(min, Math.abs(startIndex - i));
            }
        }
        return min == Integer.MAX_VALUE ? -1 : min;

=======

        int n = words.length;
        int[] next = new int[n];
        int[] prev = new int[n];
        for (int i = 0; i < n; i++) {
            next[i] = prev[i] = -1;
        }
        for (int i = 0; i < n; i++) {
            if (words[i].equals(target)) {
                next[i] = prev[i] = i;
            }
        }
        int last = -1;
        for (int i = 0; i < n; i++) {
            int j = (startIndex + i) % n;
            if (words[j].equals(target)) {
                last = j;
            }
            next[j] = last;
        }
        last = -1;
        for (int i = n - 1; i >= 0; i--) {
            int j = (startIndex + i) % n;
            if (words[j].equals(target)) {
                last = j;
            }
            prev[j] = last;
        }
        int ans = Integer.MAX_VALUE;
        for (int i = 0; i < n; i++) {
            if (next[i] != -1 && prev[i] != -1) {
                ans = Math.min(ans, Math.min(Math.abs(next[i] - startIndex), Math.abs(prev[i] - startIndex)));
            }
        }
        return ans == Integer.MAX_VALUE ? -1 : ans;

=======

        int n = words.length;
        int[] prev = new int[n];
        int[] next = new int[n];
        Arrays.fill(prev, -1);
        Arrays.fill(next, -1);
        for (int i = startIndex - 1; i >= 0; i--) {
            if (words[i].equals(target)) {
                prev[i] = i;
            } else {
                prev[i] = prev[(i + 1) % n];
            }
        }
        for (int i = startIndex + 1; i < n; i++) {
            if (words[i].equals(target)) {
                next[i] = i;
            } else {
                next[i] = next[(i - 1 + n) % n];
            }
        }
        int min = Integer.MAX_VALUE;
        for (int i = 0; i < n; i++) {
            if (prev[i] != -1) {
                min = Math.min(min, Math.abs(prev[i] - startIndex));
            }
            if (next[i] != -1) {
                min = Math.min(min, Math.abs(next[i] - startIndex));
            }
        }
        return min == Integer.MAX_VALUE ? -1 : min;

=======

        int n = words.length;
        int[] left = new int[n], right = new int[n];
        Arrays.fill(left, -1);
        Arrays.fill(right, -1);
        for (int i = startIndex - 1; i >= 0; i--) {
            if (words[i].equals(target)) {
                left[i] = 0;
            } else if (left[(i + 1) % n] != -1) {
                left[i] = left[(i + 1) % n] + 1;
            }
        }
        for (int i = startIndex + 1; i < n; i++) {
            if (words[i].equals(target)) {
                right[i] = 0;
            } else if (right[(i - 1 + n) % n] != -1) {
                right[i] = right[(i - 1 + n) % n] + 1;
            }
        }
        int ans = Integer.MAX_VALUE;
        for (int i = 0; i < n; i++) {
            if (left[i] != -1 && right[i] != -1) {
                ans = Math.min(ans, Math.min(left[i], right[i]));
            } else if (left[i] != -1) {
                ans = Math.min(ans, left[i]);
            } else if (right[i] != -1) {
                ans = Math.min(ans, right[i]);
            }
        }
        return ans == Integer.MAX_VALUE ? -1 : ans;

=======

        int n = words.length;
        int[] prev = new int[n];
        int[] next = new int[n];
        Arrays.fill(prev, -1);
        Arrays.fill(next, -1);
        
        for (int i = 0; i < n; i++) {
            if (words[i].equals(target)) {
                prev[i] = i;
                next[i] = i;
            }
        }
        
        for (int i = (startIndex - 1 + n) % n; i != startIndex; i = (i - 1 + n) % n) {
            if (prev[(i + 1) % n] != -1) {
                prev[i] = prev[(i + 1) % n];
            }
        }
        
        for (int i = (startIndex + 1) % n; i != startIndex; i = (i + 1) % n) {
            if (next[(i - 1 + n) % n] != -1) {
                next[i] = next[(i - 1 + n) % n];
            }
        }
        
        int ans = Integer.MAX_VALUE;
        for (int i = 0; i < n; i++) {
            if (prev[i] != -1 && next[i] != -1) {
                ans = Math.min(ans, Math.min(Math.abs(i - prev[i]), Math.abs(i - next[i])));
            }
        }
        
        return ans == Integer.MAX_VALUE ? -1 : ans;

=======

        int n = words.length;
        int[] dp = new int[n];
        int[] dp2 = new int[n];
        for (int i = 0; i < n; i++) {
            dp[i] = words[i].equals(target) ? i : n;
            dp2[i] = words[i].equals(target) ? i : n;
        }
        for (int i = 0; i < n; i++) {
            dp[(i + 1) % n] = Math.min(dp[(i + 1) % n], dp[i] + 1);
            dp2[(i + n - 1) % n] = Math.min(dp2[(i + n - 1) % n], dp2[i] + 1);
        }
        int res = Integer.MAX_VALUE;
        for (int i = 0; i < n; i++) {
            res = Math.min(res, Math.min(dp[i], dp2[i]));
        }
        return res == n ? -1 : res;

=======

        int minDiff = Integer.MAX_VALUE;
        int i = startIndex;
        int j = startIndex;
        
        while (i >= 0 || j < words.length) {
            if (i >= 0 && words[i].equals(target)) {
                minDiff = Math.min(minDiff, startIndex - i);
                break;
            }
            
            if (j < words.length && words[j].equals(target)) {
                minDiff = Math.min(minDiff, j - startIndex);
                break;
            }
            
            i--;
            j++;
        }
        
        return minDiff == Integer.MAX_VALUE ? -1 : minDiff;

=======

        int n = words.length;
        int[] arr = new int[n];
        for(int i = 0; i < n; i++) {
            arr[i] = i;
        }
        int l = startIndex;
        int r = startIndex;
        int min = Integer.MAX_VALUE;
        while(true) {
            if(l == r) {
                if(words[l].equals(target)) {
                    return 0;
                }
                l--;
                r++;
            } else {
                if(l >= 0 && words[l].equals(target)) {
                    min = Math.min(min, startIndex - l);
                }
                if(r < n && words[r].equals(target)) {
                    min = Math.min(min, r - startIndex);
                }
                if(l < 0 && r >= n) {
                    break;
                }
                l--;
                r++;
            }
        }
        return min == Integer.MAX_VALUE ? -1 : min;
