Synthesizing 10/10 solutions

=======

        Set<Integer> set1 = new HashSet<>();
        Set<Integer> set2 = new HashSet<>();
        for (int i = 0; i < nums1.length; i++) {
            set1.add(nums1[i]);
        }
        for (int i = 0; i < nums2.length; i++) {
            set2.add(nums2[i]);
        }
        List<Integer> list = new ArrayList<>();
        for (int i : set1) {
            if (set2.contains(i)) {
                list.add(i);
            }
        }
        int[] result = new int[list.size()];
        for (int i = 0; i < list.size(); i++) {
            result[i] = list.get(i);
        }
        return result;

=======

        Set<Integer> set1 = new HashSet<>();
        Set<Integer> set2 = new HashSet<>();
        for (int num : nums1) {
            set1.add(num);
        }
        for (int num : nums2) {
            set2.add(num);
        }
        if (set1.size() < set2.size()) {
            return setIntersection(set1, set2);
        } else {
            return setIntersection(set2, set1);
        }
    }
    private int[] setIntersection(Set<Integer> set1, Set<Integer> set2) {
        int[] output = new int[set1.size()];
        int idx = 0;
        for (int s : set1) {
            if (set2.contains(s)) {
                output[idx++] = s;
            }
        }
        return Arrays.copyOf(output, idx);

=======

        Set<Integer> set1 = new HashSet<>();
        Set<Integer> set2 = new HashSet<>();
        for (int i : nums1) {
            set1.add(i);
        }
        for (int i : nums2) {
            set2.add(i);
        }
        Set<Integer> set3 = new HashSet<>();
        for (int i : set1) {
            if (set2.contains(i)) {
                set3.add(i);
            }
        }
        int[] result = new int[set3.size()];
        int i = 0;
        for (int j : set3) {
            result[i++] = j;
        }
        return result;

=======

        Set<Integer> set1 = new HashSet<>();
        Set<Integer> set2 = new HashSet<>();
        for (int i : nums1) {
            set1.add(i);
        }
        for (int i : nums2) {
            set2.add(i);
        }
        set1.retainAll(set2);
        int[] result = new int[set1.size()];
        int index = 0;
        for (int i : set1) {
            result[index++] = i;
        }
        return result;

=======

        Set<Integer> set = new HashSet<>();
        for (int i = 0; i < nums1.length; i++) {
            for (int j = 0; j < nums2.length; j++) {
                if (nums1[i] == nums2[j]) {
                    set.add(nums1[i]);
                }
            }
        }
        int[] result = new int[set.size()];
        int i = 0;
        for (Integer num : set) {
            result[i++] = num;
        }
        return result;

=======

        Set<Integer> set = new HashSet<>();
        Set<Integer> result = new HashSet<>();
        for (int num : nums1) {
            set.add(num);
        }
        for (int num : nums2) {
            if (set.contains(num)) {
                result.add(num);
            }
        }
        int[] res = new int[result.size()];
        int index = 0;
        for (int num : result) {
            res[index++] = num;
        }
        return res;

=======

        Set<Integer> set1 = new HashSet<>();
        Set<Integer> set2 = new HashSet<>();
        
        for(int num: nums1) {
            set1.add(num);
        }
        
        for(int num: nums2) {
            set2.add(num);
        }
        
        set1.retainAll(set2);
        int[] result = new int[set1.size()];
        int i = 0;
        for(int num: set1) {
            result[i++] = num;
        }
        
        return result;

=======

        Set<Integer> set = new HashSet<>();
        for(int i: nums1) {
            set.add(i);
        }
        Set<Integer> resultSet = new HashSet<>();
        for(int i: nums2) {
            if(set.contains(i)) {
                resultSet.add(i);
            }
        }
        int[] result = new int[resultSet.size()];
        int i = 0;
        for(int num: resultSet) {
            result[i++] = num;
        }
        return result;

=======

        Set<Integer> set1 = new HashSet<>();
        Set<Integer> set2 = new HashSet<>();
        for(int i : nums1) {
            set1.add(i);
        }
        for(int i : nums2) {
            if (set1.contains(i)) {
                set2.add(i);
            }
        }
        int[] result = new int[set2.size()];
        int i = 0;
        for (int n : set2) {
            result[i++] = n;
        }
        return result;

=======

        Set<Integer> set = new HashSet<>();
        for(int i : nums1) {
            set.add(i);
        }
        Set<Integer> intersect = new HashSet<>();
        for(int i : nums2) {
            if(set.contains(i)) {
                intersect.add(i);
            }
        }
        int[] result = new int[intersect.size()];
        int i = 0;
        for(int j : intersect) {
            result[i++] = j;
        }
        return result;
