Synthesizing 10/10 solutions

=======

        if (needle.length() == 0) {
            return 0;
        }
        for (int i = 0; i < haystack.length(); i++) {
            if (haystack.charAt(i) == needle.charAt(0)) {
                if (haystack.length() - i < needle.length()) {
                    return -1;
                }
                int j = i;
                int k = 0;
                while (j < haystack.length() && k < needle.length() && haystack.charAt(j) == needle.charAt(k)) {
                    j++;
                    k++;
                }
                if (k == needle.length()) {
                    return i;
                }
            }
        }
        return -1;

=======

        if (needle.length() == 0) {
            return 0;
        }
        if (haystack.length() == 0) {
            return -1;
        }
        if (haystack.length() < needle.length()) {
            return -1;
        }
        for (int i = 0; i < haystack.length(); i++) {
            if (haystack.charAt(i) == needle.charAt(0)) {
                int j = 0;
                for (; j < needle.length(); j++) {
                    if (i + j >= haystack.length()) {
                        return -1;
                    }
                    if (haystack.charAt(i + j) != needle.charAt(j)) {
                        break;
                    }
                }
                if (j == needle.length()) {
                    return i;
                }
            }
        }
        return -1;

=======

        if (needle.length() == 0) return 0;
        if (haystack.length() == 0) return -1;
        if (haystack.length() < needle.length()) return -1;
        for (int i = 0; i < haystack.length(); i++) {
            if (haystack.charAt(i) == needle.charAt(0)) {
                if (i + needle.length() > haystack.length()) return -1;
                if (haystack.substring(i, i + needle.length()).equals(needle)) {
                    return i;
                }
            }
        }
        return -1;

=======

        if (needle.length() == 0) {
            return 0;
        }
        if (haystack.length() == 0) {
            return -1;
        }
        int index = -1;
        for (int i = 0; i < haystack.length(); i++) {
            if (haystack.charAt(i) == needle.charAt(0)) {
                if (needle.length() == 1) {
                    return i;
                }
                for (int j = 1; j < needle.length(); j++) {
                    if (i + j >= haystack.length()) {
                        return -1;
                    }
                    if (haystack.charAt(i + j) != needle.charAt(j)) {
                        break;
                    }
                    if (j == needle.length() - 1) {
                        return i;
                    }
                }
            }
        }
        return index;

=======

        if (needle.length() == 0) {
            return 0;
        }
        if (needle.length() > haystack.length()) {
            return -1;
        }
        int index = -1;
        for (int i = 0; i < haystack.length(); i++) {
            if (haystack.charAt(i) == needle.charAt(0)) {
                if (haystack.substring(i, i + needle.length()).equals(needle)) {
                    index = i;
                    break;
                }
            }
        }
        return index;

=======

        return haystack.indexOf(needle);

=======

        if (needle.isEmpty()) {
            return 0;
        }
        if (haystack.isEmpty()) {
            return -1;
        }
        return haystack.indexOf(needle);

=======

        int n = haystack.length();
        int m = needle.length();
        for(int i = 0; i < n - m + 1; i++){
            boolean flag = true;
            for(int j = 0; j < m; j++){
                if(haystack.charAt(i + j) != needle.charAt(j)){
                    flag = false;
                    break;
                }
            }
            if(flag) return i;
        }
        return -1;

=======

        if(haystack.equals(needle)){
            return 0;
        }
        
        if(haystack.length() == 0 || needle.length() == 0){
            return -1;
        }
        
        if(needle.length() > haystack.length()){
            return -1;
        }
        
        for(int i = 0; i < haystack.length(); i++){
            if(haystack.charAt(i) == needle.charAt(0)){
                if(haystack.substring(i, i + needle.length()).equals(needle)){
                    return i;
                }
            }
        }
        
        return -1;

=======

        if (needle == null || haystack == null)
            return -1;
        if (needle.length() == 0)
            return 0;
        int i = 0;
        int j = 0;
        int[] next = new int[needle.length()];
        next[0] = -1;
        for (int k = 1; k < needle.length(); k++) {
            if (needle.charAt(k) == needle.charAt(j)) {
                next[k] = next[j];
            } else {
                next[k] = j;
                while (j != -1 && needle.charAt(k) != needle.charAt(j)) {
                    j = next[j];
                }
            }
            j++;
        }
        i = 0;
        j = 0;
        while (i < haystack.length() && j < needle.length()) {
            if (haystack.charAt(i) == needle.charAt(j)) {
                i++;
                j++;
            } else if (j == 0) {
                i++;
            } else {
                j = next[j];
            }
        }
        if (j == needle.length()) {
            return i - j;
        } else {
            return -1;
        }
