Synthesizing 10/10 solutions

=======

        int a = 0, e = 0, i = 0, o = 0, u = 0;
        for (char c : word.toCharArray()) {
            if (c == 'a') {
                a = 1 + a + a + a + a;
            } else if (c == 'e') {
                e = a + e + e + e;
            } else if (c == 'i') {
                i = e + i + i;
            } else if (c == 'o') {
                o = i + o + o;
            } else if (c == 'u') {
                u = o + u + u + u;
            }
        }
        return a + e + i + o + u;

=======

        int n = word.length();
        int[][] dp = new int[n][5];
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < 5; ++j) {
                if (word.charAt(i) == "aeiou".charAt(j)) {
                    if (i == 0) {
                        dp[i][j] = 1;
                    } else {
                        dp[i][j] = 1;
                        for (int k = 0; k < j; ++k) {
                            dp[i][j] += dp[i - 1][k];
                        }
                    }
                }
            }
        }
        int ans = 0;
        for (int j = 0; j < 5; ++j) {
            ans += dp[n - 1][j];
        }
        return ans;

=======

        int[] dp = new int[5];
        int sum = 0;
        for (char c : word.toCharArray()) {
            dp[c - 'a'] = Arrays.stream(dp).sum() + 1;
            sum += dp[c - 'a'];
        }
        return sum;

=======

        int n = word.length();
        int[][] dp = new int[n][5];
        for (int i = 0; i < n; i++) {
            char c = word.charAt(i);
            int idx = c - 'a';
            dp[i][idx] = 1;
            for (int j = 0; j < idx; j++) {
                dp[i][idx] += dp[i - 1][j];
            }
        }
        int result = 0;
        for (int i = 0; i < 5; i++) {
            result += dp[n - 1][i];
        }
        return result;

=======

        int n = word.length();
        int[][] dp = new int[n][5];
        for (int i = 0; i < n; i++) {
            int j = word.charAt(i) - 'a';
            dp[i][j] = 1;
            for (int k = 0; k < j; k++) {
                dp[i][j] += dp[i - 1][k];
            }
        }
        int ans = 0;
        for (int i = 0; i < 5; i++) {
            ans += dp[n - 1][i];
        }
        return ans;

=======

        int a = 0, e = 0, i = 0, o = 0, u = 0;
        int count = 0;
        for(char c : word.toCharArray()) {
            switch(c) {
                case 'a':
                    a++;
                    break;
                case 'e':
                    e += a;
                    break;
                case 'i':
                    i += e;
                    break;
                case 'o':
                    o += i;
                    break;
                case 'u':
                    u += o;
                    break;
            }
            count += a + e + i + o + u;
        }
        return count;

=======

        int[] count = new int[5];
        int res = 0;
        for (char c : word.toCharArray()) {
            int index = "aeiou".indexOf(c);
            count[index] = 1;
            if (index > 0) {
                count[index] += count[index - 1];
            }
            res += count[index];
        }
        return res;

=======

        int n = word.length();
        int[] cnt = new int[5];
        int ans = 0;
        for (char c : word.toCharArray()) {
            int i = "aeiou".indexOf(c);
            cnt[i] = 1 + (i > 0 ? cnt[i - 1] : 0);
            ans += cnt[i];
        }
        return ans;

=======

        int[] vowels = new int[5];
        Arrays.fill(vowels, 1);
        int ans = 0;
        for (char c : word.toCharArray()) {
            int idx = "aeiou".indexOf(c);
            if (idx > 0) vowels[idx] += vowels[idx - 1];
            ans += vowels[idx];
        }
        return ans;

=======

        int vowel[] = new int[5];
        int n = word.length();
        int ans = 0;
        for(int i = 0; i < n; i++) {
            char c = word.charAt(i);
            if(c == 'a') {
                vowel[0]++;
            } else if(c == 'e') {
                vowel[1] += vowel[0];
            } else if(c == 'i') {
                vowel[2] += vowel[1];
            } else if(c == 'o') {
                vowel[3] += vowel[2];
            } else if(c == 'u') {
                vowel[4] += vowel[3];
            }
        }
        for(int i = 0; i < 5; i++) {
            ans += vowel[i];
        }
        return ans;
