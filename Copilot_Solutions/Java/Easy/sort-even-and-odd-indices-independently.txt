Synthesizing 10/10 solutions

=======

        int[] odd = new int[nums.length];
        int[] even = new int[nums.length];
        int oddIndex = 0;
        int evenIndex = 0;
        for (int i = 0; i < nums.length; i++) {
            if (i % 2 == 0) {
                even[evenIndex++] = nums[i];
            } else {
                odd[oddIndex++] = nums[i];
            }
        }
        Arrays.sort(even, 0, evenIndex);
        Arrays.sort(odd, 0, oddIndex);
        int oddIndex2 = oddIndex - 1;
        int evenIndex2 = evenIndex - 1;
        for (int i = 0; i < nums.length; i++) {
            if (i % 2 == 0) {
                nums[i] = even[evenIndex2--];
            } else {
                nums[i] = odd[oddIndex2--];
            }
        }
        return nums;

=======

        int[] even = new int[nums.length];
        int[] odd = new int[nums.length];
        int evenIndex = 0;
        int oddIndex = 0;
        for (int i = 0; i < nums.length; i++) {
            if (i % 2 == 0) {
                even[evenIndex] = nums[i];
                evenIndex++;
            } else {
                odd[oddIndex] = nums[i];
                oddIndex++;
            }
        }
        Arrays.sort(even, 0, evenIndex);
        Arrays.sort(odd, 0, oddIndex);
        int[] result = new int[nums.length];
        evenIndex = 0;
        oddIndex = 0;
        for (int i = 0; i < nums.length; i++) {
            if (i % 2 == 0) {
                result[i] = even[evenIndex];
                evenIndex++;
            } else {
                result[i] = odd[oddIndex];
                oddIndex++;
            }
        }
        return result;

=======

        int[] even = new int[nums.length];
        int[] odd = new int[nums.length];
        int evenIndex = 0;
        int oddIndex = 0;
        for (int i = 0; i < nums.length; i++) {
            if (i % 2 == 0) {
                even[evenIndex] = nums[i];
                evenIndex++;
            } else {
                odd[oddIndex] = nums[i];
                oddIndex++;
            }
        }
        Arrays.sort(even);
        Arrays.sort(odd);
        int[] result = new int[nums.length];
        evenIndex = 0;
        oddIndex = 0;
        for (int i = 0; i < nums.length; i++) {
            if (i % 2 == 0) {
                result[i] = even[evenIndex];
                evenIndex++;
            } else {
                result[i] = odd[oddIndex];
                oddIndex++;
            }
        }
        return result;
    }
}

=======

        int[] even = new int[nums.length];
        int[] odd = new int[nums.length];
        int e = 0;
        int o = 0;
        for (int i = 0; i < nums.length; i++) {
            if (i % 2 == 0) {
                even[e++] = nums[i];
            } else {
                odd[o++] = nums[i];
            }
        }
        Arrays.sort(even, 0, e);
        Arrays.sort(odd, 0, o);
        int k = 0;
        for (int i = 0; i < e; i++) {
            nums[k++] = even[i];
        }
        for (int i = o - 1; i >= 0; i--) {
            nums[k++] = odd[i];
        }
        return nums;

=======

        int[] result = new int[nums.length];
        int evenIndex = 0;
        int oddIndex = nums.length - 1;
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] % 2 == 0) {
                result[evenIndex++] = nums[i];
            } else {
                result[oddIndex--] = nums[i];
            }
        }
        Arrays.sort(result, 0, evenIndex);
        Arrays.sort(result, oddIndex + 1, nums.length);
        return result;

=======

        int[] odd = new int[nums.length];
        int[] even = new int[nums.length];
        int oddCounter = 0;
        int evenCounter = 0;
        for (int i = 0; i < nums.length; i++) {
            if (i % 2 == 0) {
                even[evenCounter++] = nums[i];
            } else {
                odd[oddCounter++] = nums[i];
            }
        }
        Arrays.sort(even, 0, evenCounter);
        Arrays.sort(odd, 0, oddCounter);
        for (int i = 0; i < nums.length; i++) {
            if (i % 2 == 0) {
                nums[i] = even[i / 2];
            } else {
                nums[i] = odd[i / 2];
            }
        }
        return nums;

=======

        int n = nums.length;
        int[] odd = new int[n];
        int[] even = new int[n];
        int oddCount = 0;
        int evenCount = 0;
        for (int i = 0; i < n; i++) {
            if (i % 2 == 0) {
                even[evenCount++] = nums[i];
            } else {
                odd[oddCount++] = nums[i];
            }
        }
        Arrays.sort(odd, 0, oddCount);
        Arrays.sort(even, 0, evenCount);
        for (int i = 0; i < n; i++) {
            if (i % 2 == 0) {
                nums[i] = even[--evenCount];
            } else {
                nums[i] = odd[--oddCount];
            }
        }
        return nums;

=======

        int n = nums.length;
        int[] result = new int[n];
        int even = 0;
        int odd = n - 1;
        for (int i = 0; i < n; i++) {
            if (nums[i] % 2 == 0) {
                result[even++] = nums[i];
            } else {
                result[odd--] = nums[i];
            }
        }
        Arrays.sort(result, 0, even);
        Arrays.sort(result, odd + 1, n);
        return result;

=======

        int[] sorted = new int[nums.length];
        List<Integer> even = new ArrayList<>();
        List<Integer> odd = new ArrayList<>();
        for(int i=0; i<nums.length; i++){
            if(i%2==0){
                even.add(nums[i]);
            }else{
                odd.add(nums[i]);
            }
        }
        Collections.sort(even);
        Collections.sort(odd, Collections.reverseOrder());
        for(int i=0; i<nums.length; i++){
            if(i%2==0){
                sorted[i] = even.get(i/2);
            }else{
                sorted[i] = odd.get(i/2);
            }
        }
        return sorted;

=======

        int n = nums.length;
        if(n==1) return nums;
        int mid = n/2;
        int[] even = new int[mid];
        int[] odd = new int[n-mid];
        int e = 0;
        int o = 0;
        for(int i=0; i<n; i++){
            if(i%2==0){
                even[e] = nums[i];
                e++;
            }else{
                odd[o] = nums[i];
                o++;
            }
        }
        Arrays.sort(even);
        Arrays.sort(odd);
        e = 0;
        o = 0;
        for(int i=0; i<n; i++){
            if(i%2==0){
                nums[i] = even[e];
                e++;
            }else{
                nums[i] = odd[o];
                o++;
            }
        }
        return nums;
