Synthesizing 10/10 solutions

=======

        int[] count = new int[10];
        for (int i = 0; i < rings.length(); i += 2) {
            count[rings.charAt(i + 1) - '0']++;
        }
        int res = 0;
        for (int i = 0; i < 10; i++) {
            if (count[i] >= 3) {
                res++;
            }
        }
        return res;

=======

        int[] count = new int[10];
        for (int i = 0; i < rings.length(); i += 2) {
            count[rings.charAt(i + 1) - '0']++;
        }
        int res = 0;
        for (int i : count) {
            if (i == 3) {
                res++;
            }
        }
        return res;

=======

        int n = rings.length() / 2;
        int[] r = new int[10];
        int[] g = new int[10];
        int[] b = new int[10];
        for (int i = 0; i < n; i++) {
            char c = rings.charAt(i * 2);
            int j = rings.charAt(i * 2 + 1) - '0';
            if (c == 'R') {
                r[j]++;
            } else if (c == 'G') {
                g[j]++;
            } else {
                b[j]++;
            }
        }
        int count = 0;
        for (int i = 0; i < 10; i++) {
            if (r[i] > 0 && g[i] > 0 && b[i] > 0) {
                count++;
            }
        }
        return count;

=======

        int[] cnt = new int[10];
        for (int i = 0; i < rings.length(); i += 2) {
            cnt[rings.charAt(i + 1) - '0']++;
        }
        int res = 0;
        for (int i = 0; i < 10; i++) {
            if (cnt[i] >= 3) {
                res++;
            }
        }
        return res;

=======

        int count = 0;
        int[] r = new int[10];
        int[] g = new int[10];
        int[] b = new int[10];
        for (int i = 0; i < rings.length(); i += 2) {
            int rod = rings.charAt(i + 1) - '0';
            switch (rings.charAt(i)) {
                case 'R':
                    r[rod]++;
                    break;
                case 'G':
                    g[rod]++;
                    break;
                case 'B':
                    b[rod]++;
                    break;
            }
        }
        for (int i = 0; i < 10; i++) {
            if (r[i] > 0 && g[i] > 0 && b[i] > 0) {
                count++;
            }
        }
        return count;

=======

        int result = 0;
        int[] count = new int[10];
        for (int i = 0; i < rings.length(); i += 2) {
            count[rings.charAt(i + 1) - '0']++;
        }
        for (int i = 0; i < count.length; i++) {
            if (count[i] >= 3) {
                result++;
            }
        }
        return result;

=======

        int n = rings.length() / 2;
        int[][] count = new int[10][3];
        for (int i = 0; i < n; i++) {
            int rod = rings.charAt(i * 2 + 1) - '0';
            int color = "RGB".indexOf(rings.charAt(i * 2));
            count[rod][color]++;
        }
        int result = 0;
        for (int i = 0; i < 10; i++) {
            if (count[i][0] > 0 && count[i][1] > 0 && count[i][2] > 0) {
                result++;
            }
        }
        return result;

=======

        int[] count = new int[10];
        for(int i = 0; i < rings.length(); i += 2) {
            count[rings.charAt(i+1) - '0']++;
        }
        int result = 0;
        for(int i = 0; i < 10; i++) {
            if(count[i] == 3) {
                result++;
            }
        }
        return result;

=======

        int count = 0;
        int[] arr = new int[10];
        for(int i = 0; i < rings.length(); i += 2) {
            if(rings.charAt(i) == 'R') {
                arr[rings.charAt(i+1) - '0'] |= 1;
            }
            if(rings.charAt(i) == 'G') {
                arr[rings.charAt(i+1) - '0'] |= 2;
            }
            if(rings.charAt(i) == 'B') {
                arr[rings.charAt(i+1) - '0'] |= 4;
            }
        }
        for(int i = 0; i < 10; i++) {
            if(arr[i] == 7) {
                count++;
            }
        }
        return count;

=======

        int count = 0;
        for (char c: "RGB".toCharArray()) {
            int[] countRod = new int[10];
            for (int i = 0; i < rings.length(); i += 2) {
                if (rings.charAt(i) == c) {
                    countRod[rings.charAt(i + 1) - '0']++;
                }
            }
            for (int i = 0; i < 10; i++) {
                if (countRod[i] == 3) {
                    count++;
                }
            }
        }
        return count;
