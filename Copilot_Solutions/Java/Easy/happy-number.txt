Synthesizing 10/10 solutions

=======

        Set<Integer> set = new HashSet<>();
        while (n != 1) {
            int sum = 0;
            while (n != 0) {
                sum += (n % 10) * (n % 10);
                n /= 10;
            }
            if (set.contains(sum)) {
                return false;
            }
            set.add(sum);
            n = sum;
        }
        return true;

=======

        int slow = n;
        int fast = n;
        do {
            slow = squareSum(slow);
            fast = squareSum(fast);
            fast = squareSum(fast);
        } while (slow != fast);
        return slow == 1;
    }
    public int squareSum(int n) {
        int sum = 0;
        while (n > 0) {
            int digit = n % 10;
            sum += digit * digit;
            n /= 10;
        }
        return sum;

=======

        Set<Integer> seen = new HashSet<>();
        while (n != 1) {
            int sum = 0;
            while (n > 0) {
                int digit = n % 10;
                sum += digit * digit;
                n /= 10;
            }
            if (seen.contains(sum)) {
                return false;
            }
            seen.add(sum);
            n = sum;
        }
        return true;

=======

        Set<Integer> set = new HashSet<Integer>();
        while (n != 1) {
            if (set.contains(n)) {
                return false;
            }
            set.add(n);
            n = getNext(n);
        }
        return true;
    }
    public int getNext(int n) {
        int totalSum = 0;
        while (n > 0) {
            int d = n % 10;
            n = n / 10;
            totalSum += d * d;
        }
        return totalSum;

=======

        HashSet<Integer> set = new HashSet<Integer>();
        while (n != 1) {
            int sum = 0;
            while (n > 0) {
                sum += (n % 10) * (n % 10);
                n /= 10;
            }
            if (set.contains(sum)) {
                return false;
            }
            set.add(sum);
            n = sum;
        }
        return true;

=======

        Set<Integer> set = new HashSet<>();
        while (n != 1) {
            n = squareSum(n);
            if (set.contains(n)) {
                return false;
            } else {
                set.add(n);
            }
        }
        return true;
    }
    public int squareSum(int n) {
        int sum = 0;
        while (n > 0) {
            int num = n % 10;
            sum += num * num;
            n /= 10;
        }
        return sum;

=======

        int slow = n;
        int fast = n;
        do{
            slow = square(slow);
            fast = square(fast);
            fast = square(fast);
        }while(slow != fast);
        return slow == 1;
    }
    private int square(int n){
        int sum = 0;
        while(n > 0){
            int digit = n % 10;
            sum += digit * digit;
            n /= 10;
        }
        return sum;

=======

        int sum = 0;
        while (n > 0) {
            int digit = n % 10;
            sum += digit * digit;
            n /= 10;
            if (n == 0) {
                n = sum;
                sum = 0;
                if (n == 1) {
                    return true;
                }
                if (n == 4) {
                    return false;
                }
            }
        }
        return false;

=======

        int sum = 0, rem = 0;
        while(n > 0){
            rem = n % 10;
            sum = sum + rem * rem;
            n = n / 10;
        }
        if(sum == 1){
            return true;
        }else if(sum == 4){
            return false;
        }else{
            return isHappy(sum);
        }

=======

        int sum = 0;
        int[] arr = new int[100];
        int i = 0;
        while (n != 1) {
            sum = 0;
            while (n != 0) {
                sum += (n % 10) * (n % 10);
                n /= 10;
            }
            for (int j = 0; j < i; j++) {
                if (arr[j] == sum) {
                    return false;
                }
            }
            arr[i++] = sum;
            n = sum;
        }
        return true;
