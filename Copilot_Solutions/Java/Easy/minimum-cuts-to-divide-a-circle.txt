Synthesizing 10/10 solutions (Duplicates hidden)

=======

        if (n < 2) {
            return 0;
        }
        if (n == 2) {
            return 1;
        }
        if (n == 3) {
            return 2;
        }
        if (n == 4) {
            return 3;
        }
        if (n == 5) {
            return 4;
        }
        int[] dp = new int[n + 1];
        dp[1] = 0;
        dp[2] = 1;
        dp[3] = 2;
        dp[4] = 3;
        dp[5] = 4;
        for (int i = 6; i <= n; i++) {
            dp[i] = i;
            for (int j = 1; j <= i / 2; j++) {
                dp[i] = Math.min(dp[i], dp[j] + dp[i - j]);
            }
        }
        return dp[n];

=======

        if(n == 1) return 0;
        if(n == 2) return 1;
        if(n == 3) return 2;
        if(n == 4) return 2;
        if(n == 5) return 3;
        if(n == 6) return 3;
        if(n == 7) return 4;
        if(n == 8) return 4;
        if(n == 9) return 5;
        if(n == 10) return 5;
        if(n == 11) return 6;
        if(n == 12) return 6;
        if(n == 13) return 7;
        if(n == 14) return 7;
        if(n == 15) return 8;
        if(n == 16) return 8;
        if(n == 17) return 9;
        if(n == 18) return 9;
        if(n == 19) return 10;
        if(n == 20) return 10;
        if(n == 21) return 11;
        if(n == 22) return 11;
        if(n == 23) return 12;
        if(n == 24) return 12;
        if(n == 25) return 13;
        if(n == 26) return 13;
        if(n == 27) return 14;
        if(n == 28) return 14;
        if(n == 29) return 15;
        if(n == 30) return 15;
        if(n == 31) return 16;
        if(n == 32) return 16;
        if(n == 33) return 17;
        if(n == 34) return 17;
        if(n == 35) return 18;
        if(n == 36) return 18;
        if(n == 37) return 19;
        if(n == 38) return 19;
        if(n == 39) return 20;
        if(n == 40) return 20;
        if(n == 41) return 21;
        if(n == 42) return 21;
        if(n == 43) return 22;
        if(n == 44) return 22;
        if(n == 45) return 23;
        if(n ==

=======

        int count = 0;
        int i = 1;
        while (i < n) {
            if (n % i == 0) {
                count++;
            }
            i++;
        }
        return count;

=======

        int ans = 0;
        while (n > 2) {
            ans++;
            n -= 2;
        }
        return ans;

=======

        int cuts = 0;
        int current = n;
        while (current > 1) {
            cuts++;
            current = (current + 1) / 2;
        }
        return cuts;

=======

        return n - 2;

=======

        return n - 1;

=======

        return n / 2;
