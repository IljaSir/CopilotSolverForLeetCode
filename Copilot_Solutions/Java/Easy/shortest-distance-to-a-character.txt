Synthesizing 10/10 solutions

=======

        int[] result = new int[s.length()];
        for (int i = 0; i < s.length(); i++) {
            if (s.charAt(i) == c) {
                result[i] = 0;
            } else {
                int left = i;
                int right = i;
                while (left >= 0 || right < s.length()) {
                    if (left >= 0 && s.charAt(left) == c) {
                        result[i] = i - left;
                        break;
                    }
                    if (right < s.length() && s.charAt(right) == c) {
                        result[i] = right - i;
                        break;
                    }
                    left--;
                    right++;
                }
            }
        }
        return result;

=======

        int[] result = new int[s.length()];
        int prev = Integer.MIN_VALUE / 2;
        for (int i = 0; i < s.length(); i++) {
            if (s.charAt(i) == c) {
                prev = i;
            }
            result[i] = i - prev;
        }
        prev = Integer.MAX_VALUE / 2;
        for (int i = s.length() - 1; i >= 0; i--) {
            if (s.charAt(i) == c) {
                prev = i;
            }
            result[i] = Math.min(result[i], prev - i);
        }
        return result;

=======

        int[] res = new int[s.length()];
        int prev = Integer.MIN_VALUE / 2;
        for (int i = 0; i < s.length(); i++) {
            if (s.charAt(i) == c) prev = i;
            res[i] = i - prev;
        }
        prev = Integer.MAX_VALUE / 2;
        for (int i = s.length() - 1; i >= 0; i--) {
            if (s.charAt(i) == c) prev = i;
            res[i] = Math.min(res[i], prev - i);
        }
        return res;

=======

        int[] res = new int[s.length()];
        int last = -1;
        for (int i = 0; i < s.length(); i++) {
            if (s.charAt(i) == c) {
                last = i;
            }
            res[i] = last == -1 ? Integer.MAX_VALUE : i - last;
        }
        last = -1;
        for (int i = s.length() - 1; i >= 0; i--) {
            if (s.charAt(i) == c) {
                last = i;
            }
            res[i] = last == -1 ? Integer.MAX_VALUE : Math.min(res[i], last - i);
        }
        return res;

=======

        int[] res = new int[s.length()];
        int last = -s.length();
        for (int i = 0; i < s.length(); ++i) {
            if (s.charAt(i) == c) last = i;
            res[i] = i - last;
        }
        for (int i = last - 1; i >= 0; --i) {
            if (s.charAt(i) == c) last = i;
            res[i] = Math.min(res[i], last - i);
        }
        return res;

=======

        int[] res = new int[s.length()];
        int lastC = -1;
        for (int i = 0; i < s.length(); i++) {
            if (s.charAt(i) == c) {
                lastC = i;
            }
            res[i] = lastC == -1 ? Integer.MAX_VALUE : i - lastC;
        }
        lastC = -1;
        for (int i = s.length() - 1; i >= 0; i--) {
            if (s.charAt(i) == c) {
                lastC = i;
            }
            if (lastC != -1) {
                res[i] = Math.min(res[i], Math.abs(lastC - i));
            }
        }
        return res;

=======

        int[] result = new int[s.length()];
        int last = -1;
        for (int i = 0; i < s.length(); i++) {
            if (s.charAt(i) == c) {
                for (int j = last + 1; j <= i; j++) {
                    result[j] = j - last - 1;
                }
                last = i;
            }
        }
        for (int i = last + 1; i < s.length(); i++) {
            result[i] = i - last - 1;
        }
        return result;

=======

        int[] result = new int[s.length()];
        int cPos = Integer.MIN_VALUE / 2;
        for (int i = 0; i < s.length(); i++) {
            if (s.charAt(i) == c) {
                cPos = i;
            }
            result[i] = i - cPos;
        }
        cPos = Integer.MAX_VALUE / 2;
        for (int i = s.length() - 1; i >= 0; i--) {
            if (s.charAt(i) == c) {
                cPos = i;
            }
            result[i] = Math.min(result[i], cPos - i);
        }
        return result;

=======

        int[] result = new int[s.length()];
        int[] cIndex = new int[s.length()];
        int index = 0;
        for (int i = 0; i < s.length(); i++) {
            if (s.charAt(i) == c) {
                cIndex[index] = i;
                index++;
            }
        }
        int[] cIndex2 = new int[index];
        for (int i = 0; i < index; i++) {
            cIndex2[i] = cIndex[i];
        }
        for (int i = 0; i < s.length(); i++) {
            if (s.charAt(i) == c) {
                result[i] = 0;
            } else {
                int min = Integer.MAX_VALUE;
                for (int j = 0; j < cIndex2.length; j++) {
                    int tmp = Math.abs(cIndex2[j] - i);
                    if (tmp < min) {
                        min = tmp;
                    }
                }
                result[i] = min;
            }
        }
        return result;

=======

        int[] result = new int[s.length()];
        for(int i = 0; i < s.length(); i++){
            int dist = Integer.MAX_VALUE;
            for(int j = 0; j < s.length(); j++){
                if(s.charAt(j) == c){
                    dist = Math.min(dist, Math.abs(j - i));
                }
            }
            result[i] = dist;
        }
        return result;
