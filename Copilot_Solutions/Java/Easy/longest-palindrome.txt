Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int[] count = new int[128];
        for (char c : s.toCharArray()) {
            count[c]++;
        }
        int ans = 0;
        for (int v : count) {
            ans += v / 2 * 2;
            if (ans % 2 == 0 && v % 2 == 1) {
                ans++;
            }
        }
        return ans;

=======

        int[] count = new int[128];
        for (char c: s.toCharArray())
            count[c]++;
        int ans = 0;
        for (int v: count) {
            ans += v / 2 * 2;
            if (ans % 2 == 0 && v % 2 == 1)
                ans++;
        }
        return ans;

=======

        int[] count = new int[58];
        for (char c : s.toCharArray()) {
            count[c - 'A']++;
        }
        int ans = 0;
        for (int v : count) {
            ans += v / 2 * 2;
            if (ans % 2 == 0 && v % 2 == 1) {
                ans++;
            }
        }
        return ans;

=======

        int[] count = new int[58];
        for (char c : s.toCharArray()) {
            count[c - 'A']++;
        }
        int res = 0;
        for (int v : count) {
            res += v / 2 * 2;
            if (res % 2 == 0 && v % 2 == 1) {
                res++;
            }
        }
        return res;

=======

        int[] freq = new int[52];
        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            if (c >= 'a' && c <= 'z') {
                freq[c - 'a']++;
            } else {
                freq[c - 'A' + 26]++;
            }
        }
        int result = 0;
        boolean hasOdd = false;
        for (int i = 0; i < 52; i++) {
            if (freq[i] % 2 == 0) {
                result += freq[i];
            } else {
                hasOdd = true;
                result += freq[i] - 1;
            }
        }
        return hasOdd ? result + 1 : result;

=======

        int[] map = new int[128];
        for (char c : s.toCharArray()) {
            map[c]++;
        }
        int ans = 0;
        for (int v : map) {
            ans += v / 2 * 2;
            if (ans % 2 == 0 && v % 2 == 1) {
                ans++;
            }
        }
        return ans;

=======

        int[] freq = new int[128];
        for (int i = 0; i < s.length(); i++) {
            freq[s.charAt(i)]++;
        }
        int result = 0;
        for (int i = 0; i < 128; i++) {
            result += (freq[i] / 2) * 2;
            if (result % 2 == 0 && freq[i] % 2 == 1) {
                result++;
            }
        }
        return result;

=======

        int[] arr = new int[128];
        for (char c : s.toCharArray()) {
            arr[c]++;
        }
        int sum = 0;
        for (int i : arr) {
            sum += i / 2 * 2;
            if (sum % 2 == 0 && i % 2 == 1) {
                sum++;
            }
        }
        return sum;

=======

        int[] charCount = new int[58];
        int result = 0;
        for (char c : s.toCharArray()) {
            charCount[c - 'A']++;
        }
        for (int count : charCount) {
            result += count / 2 * 2;
            if (result % 2 == 0 && count % 2 == 1) {
                result++;
            }
        }
        return result;
