Synthesizing 10/10 solutions

=======

        int n = s.length();
        int a = 0;
        int b = 0;
        for (int i = 0; i < n / 2; i++) {
            if (isVowel(s.charAt(i))) {
                a++;
            }
            if (isVowel(s.charAt(i + n / 2))) {
                b++;
            }
        }
        return a == b;

=======

        int n = s.length();
        int a = 0;
        int b = 0;
        for (int i = 0; i < n / 2; i++) {
            if (isVowel(s.charAt(i))) {
                a++;
            }
            if (isVowel(s.charAt(n - i - 1))) {
                b++;
            }
        }
        return a == b;

=======

        int n = s.length();
        int count = 0;
        for (int i = 0; i < n / 2; i++) {
            if (isVowel(s.charAt(i))) {
                count++;
            }
            if (isVowel(s.charAt(i + n / 2))) {
                count--;
            }
        }
        return count == 0;

=======

        String vowels = "aeiouAEIOU";
        int count = 0;
        for (int i = 0, j = s.length() - 1; i < s.length() / 2; i++, j--) {
            if (vowels.indexOf(s.charAt(i)) != -1) count++;
            if (vowels.indexOf(s.charAt(j)) != -1) count--;
        }
        return count == 0;

=======

        int n = s.length();
        int a = 0, b = 0;
        for (int i = 0; i < n/2; i++) {
            char c = s.charAt(i);
            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {
                a++;
            }
        }
        for (int i = n/2; i < n; i++) {
            char c = s.charAt(i);
            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {
                b++;
            }
        }
        return a == b;

=======

        int[] c = new int[26];
        c['a' - 'a'] = 1;
        c['e' - 'a'] = 1;
        c['i' - 'a'] = 1;
        c['o' - 'a'] = 1;
        c['u' - 'a'] = 1;
        c['A' - 'a'] = 1;
        c['E' - 'a'] = 1;
        c['I' - 'a'] = 1;
        c['O' - 'a'] = 1;
        c['U' - 'a'] = 1;
        
        int n = s.length();
        int l = 0, r = 0;
        for (int i = 0; i < n / 2; i++) {
            l += c[s.charAt(i) - 'a'];
        }
        for (int i = n / 2; i < n; i++) {
            r += c[s.charAt(i) - 'a'];
        }
        return l == r;

=======

        int n = s.length();
        String a = s.substring(0, n/2);
        String b = s.substring(n/2);
        int countA = 0;
        int countB = 0;
        for (int i = 0; i < n/2; i++) {
            if (a.charAt(i) == 'a' || a.charAt(i) == 'e' || a.charAt(i) == 'i' || a.charAt(i) == 'o' || a.charAt(i) == 'u' || a.charAt(i) == 'A' || a.charAt(i) == 'E' || a.charAt(i) == 'I' || a.charAt(i) == 'O' || a.charAt(i) == 'U') {
                countA++;
            }
            if (b.charAt(i) == 'a' || b.charAt(i) == 'e' || b.charAt(i) == 'i' || b.charAt(i) == 'o' || b.charAt(i) == 'u' || b.charAt(i) == 'A' || b.charAt(i) == 'E' || b.charAt(i) == 'I' || b.charAt(i) == 'O' || b.charAt(i) == 'U') {
                countB++;
            }
        }
        return countA == countB;

=======

        int n = s.length();
        int cnt = 0;
        for (int i = 0; i < n / 2; i++) {
            if (isVowel(s.charAt(i))) {
                cnt++;
            }
            if (isVowel(s.charAt(i + n / 2))) {
                cnt--;
            }
        }
        return cnt == 0;

=======

        int size = s.length();
        int half = size / 2;
        int count = 0;
        for (int i = 0; i < half; i++) {
            char c = s.charAt(i);
            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {
                count++;
            }
        }
        for (int i = half; i < size; i++) {
            char c = s.charAt(i);
            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {
                count--;
            }
        }
        return count == 0;

=======

        int len = s.length();
        int mid = len / 2;
        int c = 0;
        for (int i = 0; i < mid; i++) {
            if (isVowel(s.charAt(i))) {
                c++;
            }
            if (isVowel(s.charAt(i + mid))) {
                c--;
            }
        }
        return c == 0;
    }
    
    private boolean isVowel(char c) {
        switch(c) {
            case 'a':
            case 'e':
            case 'i':
            case 'o':
            case 'u':
            case 'A':
            case 'E':
            case 'I':
            case 'O':
            case 'U':
                return true;
            default:
                return false;
        }
