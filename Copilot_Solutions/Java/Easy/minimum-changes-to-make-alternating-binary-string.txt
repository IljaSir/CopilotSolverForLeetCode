Synthesizing 10/10 solutions

=======

        int count = 0;
        for (int i = 0; i < s.length(); i++) {
            if (s.charAt(i) - '0' != i % 2) {
                count++;
            }
        }
        return Math.min(count, s.length() - count);

=======

        int count = 0;
        for (int i = 0; i < s.length(); i++) {
            if (s.charAt(i) != (i % 2 == 0 ? '0' : '1')) {
                count++;
            }
        }
        return Math.min(count, s.length() - count);

=======

        int n = s.length();
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = s.charAt(i) - '0';
        }
        int[] b = new int[n];
        for (int i = 0; i < n; i++) {
            b[i] = i % 2;
        }
        int[] c = new int[n];
        for (int i = 0; i < n; i++) {
            c[i] = (i + 1) % 2;
        }
        int res = n;
        int cnt = 0;
        for (int i = 0; i < n; i++) {
            if (a[i] != b[i]) {
                cnt++;
            }
        }
        res = Math.min(res, cnt);
        cnt = 0;
        for (int i = 0; i < n; i++) {
            if (a[i] != c[i]) {
                cnt++;
            }
        }
        res = Math.min(res, cnt);
        return res;

=======

        int n = s.length();
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = s.charAt(i) - '0';
        }
        int[] b = new int[n];
        for (int i = 0; i < n; i++) {
            b[i] = i % 2;
        }
        int[] c = new int[n];
        for (int i = 0; i < n; i++) {
            c[i] = (i + 1) % 2;
        }
        return Math.min(count(a, b), count(a, c));
    }
    
    private int count(int[] a, int[] b) {
        int n = a.length;
        int ans = 0;
        for (int i = 0; i < n; i++) {
            ans += a[i] == b[i] ? 0 : 1;
        }
        return ans;

=======

        int cnt1 = 0;
        int cnt2 = 0;
        for (int i = 0; i < s.length(); i++) {
            if (s.charAt(i) - '0' != i % 2) {
                cnt1++;
            } else {
                cnt2++;
            }
        }
        return Math.min(cnt1, cnt2);

=======

        int count0 = 0;
        int count1 = 0;
        for(int i=0;i<s.length();i++){
            if(i%2==0){
                if(s.charAt(i)=='0'){
                    count0++;
                }else{
                    count1++;
                }
            }else{
                if(s.charAt(i)=='0'){
                    count1++;
                }else{
                    count0++;
                }
            }
        }
        return Math.min(count0,count1);

=======

        int n = s.length();
        int[] a = new int[n];
        int[] b = new int[n];
        for (int i = 0; i < n; ++i) {
            a[i] = s.charAt(i) - '0';
            b[i] = 1 - a[i];
        }
        int res = 0;
        for (int i = 0; i < n; ++i) {
            if (i % 2 == 0) {
                if (a[i] != 0) {
                    ++res;
                }
                if (b[i] != 1) {
                    ++res;
                }
            } else {
                if (a[i] != 1) {
                    ++res;
                }
                if (b[i] != 0) {
                    ++res;
                }
            }
        }
        return Math.min(res, n - res);

=======

        int n = s.length();
        int c = 0;
        for (int i = 0; i < n; i++) {
            if (s.charAt(i) == '0' + i % 2) {
                c++;
            }
        }
        return Math.min(c, n - c);

=======

        int n = s.length();
        int[] arr = new int[n];
        for(int i=0;i<n;i++){
            arr[i] = s.charAt(i)-'0';
        }
        int[] arr1 = new int[n];
        int[] arr2 = new int[n];
        arr1[0] = 0;
        arr2[0] = 1;
        for(int i=1;i<n;i++){
            arr1[i] = arr1[i-1]==arr[i-1]?1-arr[i-1]:arr[i-1];
            arr2[i] = arr2[i-1]==arr[i-1]?1-arr[i-1]:arr[i-1];
        }
        int c1=0;
        int c2=0;
        for(int i=0;i<n;i++){
            if(arr[i]!=arr1[i]){
                c1++;
            }
            if(arr[i]!=arr2[i]){
                c2++;
            }
        }
        return Math.min(c1,c2);

=======

        int n = s.length();
        char[] ch = s.toCharArray();
        int[] c1 = new int[n];
        int[] c2 = new int[n];
        int ans = 0;
        for (int i = 0; i < n; i++) {
            if (i % 2 == 0) {
                if (ch[i] == '0') {
                    c1[i] = 0;
                    c2[i] = 1;
                } else {
                    c1[i] = 1;
                    c2[i] = 0;
                }
            } else {
                if (ch[i] == '0') {
                    c1[i] = 1;
                    c2[i] = 0;
                } else {
                    c1[i] = 0;
                    c2[i] = 1;
                }
            }
        }
        for (int i = 1; i < n; i++) {
            c1[i] += c1[i - 1];
            c2[i] += c2[i - 1];
        }
        for (int i = 0; i < n; i++) {
            int t1 = c1[n - 1] - c1[i];
            int t2 = c2[n - 1] - c2[i];
            if (i % 2 == 0) {
                t1 += c2[i];
                t2 += c1[i];
            } else {
                t1 += c1[i];
                t2 += c2[i];
            }
            if (i == 0) {
                ans = Math.min(t1, t2);
            } else {
                ans = Math.min(ans, Math.min(t1, t2));
            }
        }
        return ans;
