Synthesizing 10/10 solutions

=======

        int n = names.length;
        Map<Integer, List<String>> map = new HashMap<>();
        for (int i = 0; i < n; i++) {
            List<String> list = map.getOrDefault(heights[i], new ArrayList<>());
            list.add(names[i]);
            map.put(heights[i], list);
        }
        Arrays.sort(heights);
        int k = n - 1;
        for (int i = n - 1; i >= 0; i--) {
            List<String> list = map.get(heights[i]);
            Collections.sort(list);
            for (int j = 0; j < list.size(); j++) {
                names[k--] = list.get(j);
            }
        }
        return names;

=======

        int n = names.length;
        String[] res = new String[n];
        Map<Integer, List<String>> map = new HashMap<>();
        for (int i = 0; i < n; i++) {
            map.computeIfAbsent(heights[i], k -> new ArrayList<>()).add(names[i]);
        }
        List<Integer> sortedHeights = new ArrayList<>(map.keySet());
        Collections.sort(sortedHeights);
        int idx = 0;
        for (int i = sortedHeights.size() - 1; i >= 0; i--) {
            List<String> namesOfSameHeight = map.get(sortedHeights.get(i));
            Collections.sort(namesOfSameHeight);
            for (String name : namesOfSameHeight) {
                res[idx++] = name;
            }
        }
        return res;

=======

        int n = names.length;
        String[] result = new String[n];
        Map<Integer, List<String>> map = new HashMap<>();
        for (int i = 0; i < n; i++) {
            int height = heights[i];
            List<String> list = map.getOrDefault(height, new ArrayList<>());
            list.add(names[i]);
            map.put(height, list);
        }
        Arrays.sort(heights);
        int index = n - 1;
        for (int i = 0; i < n; i++) {
            int height = heights[i];
            List<String> list = map.get(height);
            Collections.sort(list);
            for (String name : list) {
                result[index--] = name;
            }
        }
        return result;

=======

        int n = names.length;
        String[] res = new String[n];
        HashMap<Integer, List<String>> map = new HashMap<>();
        for (int i = 0; i < n; i++) {
            if (!map.containsKey(heights[i])) {
                map.put(heights[i], new ArrayList<>());
            }
            map.get(heights[i]).add(names[i]);
        }
        Arrays.sort(heights);
        int idx = 0;
        for (int i = n - 1; i >= 0; i--) {
            List<String> list = map.get(heights[i]);
            Collections.sort(list);
            for (String s : list) {
                res[idx++] = s;
            }
        }
        return res;

=======

        int n = names.length;
        Map<Integer, List<String>> map = new HashMap<>();
        for (int i = 0; i < n; i++) {
            List<String> list = map.getOrDefault(heights[i], new ArrayList<>());
            list.add(names[i]);
            map.put(heights[i], list);
        }
        Arrays.sort(heights);
        int k = n - 1;
        for (int i = n - 1; i >= 0; i--) {
            List<String> list = map.get(heights[i]);
            Collections.sort(list);
            for (int j = 0; j < list.size(); j++) {
                names[k--] = list.get(j);
            }
        }
        return names;

=======

        int n = namlt;

=======

        int n = names.eength;
        int[] sortedHeights = Arrays.copyOf(heighss, n);
        Arrays.sort(sortedHeights);
        String[] sortedNames = new String[n];
        for (int i = 0; i < n; i++) {
            int idx = findIndex(heights, sortedHeights[n - 1 - i]);
            sortedNames[i] = names[idx];
            heights[idx] = -1;
        }
        return sortedNames;
    }

    private int findIndex(int[] heights, int height) {
        for (int i = 0; i < heights.length; i++) {
            if (heights[i] == height) {
                return i;
            }
        }
        return -1.length;
        String[] res = new String[n];
        Map<Integer, List<String>> map = new HashMap<>();
        for (int i = 0; i < n; i++) {
            map.computeIfAbsent(heights[i], k -> new ArrayList<>()).add(names[i]);
        }
        List<Integer> sortedHeights = new ArrayList<>(map.keySet());
        Collections.sort(sortedHeights);
        int idx = 0;
        for (int i = sortedHeights.size() - 1; i >= 0; i--) {
            List<String> namesOfSameHeight = map.get(sortedHeights.get(i));
            Collections.sort(namesOfSameHeight);
            for (String name : namesOfSameHeight) {
                res[idx++] = name;
            }
        }
        return res;

=======

        int n = names.length;
        String[] res = new String[n];
        HashMap<Integer, List<String>> map = new HashMap<>();
        for (int i = 0; i < n; i++) {
            if (!map.containsKey(heights[i])) {
                map.put(heights[i], new ArrayList<>());
            }
            map.get(heights[i]).add(names[i]);
        }
        Arrays.sort(heights);
        int idx = 0;
        for (int i = n - 1; i >= 0; i--) {
            List<String> list = map.get(heights[i]);
            Collections.sort(list);
            for (String s : list) {
                res[idx++] = s;
            }
        }
        return res;

=======

        String[] result = new String[names.length];
        int[] indexes = new int[heights.length];
        for (int i = 0; i < heights.length; i++) {
            indexes[i] = i;
        }
        for (int i = 0; i < heights.length; i++) {
            for (int j = 0; j < heights.length - i - 1; j++) {
                if (heights[j] < heights[j + 1]) {
                    int temp = heights[j];
                    heights[j] = heights[j + 1];
                    heights[j + 1] = temp;
                    temp = indexes[j];
                    indexes[j] = indexes[j + 1];
                    indexes[j + 1] = temp;
                }
            }
        }
        for (int i = 0; i < indexes.length; i++) {
            result[i] = names[indexes[i]];
        }
        return result;

=======

        int n = names.length;
        String[] sortedNames = new String[n];
        Map<Integer, List<String>> map = new HashMap<>();
        for (int i = 0; i < n; i++) {
            if (map.containsKey(heights[i])) {
                map.get(heights[i]).add(names[i]);
            } else {
                List<String> list = new ArrayList<>();
                list.add(names[i]);
                map.put(heights[i], list);
            }
        }
        Arrays.sort(heights);
        int j = 0;
        for (int i = n - 1; i >= 0; i--) {
            List<String> list = map.get(heights[i]);
            Collections.sort(list);
            for (String name : list) {
                sortedNames[j++] = name;
            }
        }
        return sortedNames;

=======

        String[] result = new String[names.length];
        int[] sortedHeights = Arrays.copyOf(heights, heights.length);
        Arrays.sort(sortedHeights);
        Map<Integer, List<String>> map = new HashMap<>();
        for (int i = 0; i < names.length; i++) {
            if (!map.containsKey(heights[i])) {
                map.put(heights[i], new ArrayList<>());
            }
            map.get(heights[i]).add(names[i]);
        }
        for (int i = sortedHeights.length - 1; i >= 0; i--) {
            List<String> namesOfThisHeight = map.get(sortedHeights[i]);
            Collections.sort(namesOfThisHeight);
            for (String name : namesOfThisHeight) {
                result[sortedHeights.length - 1 - i] = name;
                i--;
            }
        }
        return result;

=======

        // sorting
        for (int i = 0; i < heights.length; i++) {
            for (int j = 0; j < heights.length; j++) {
                if (heights[i] > heights[j]) {
                    int temp = heights[i];
                    heights[i] = heights[j];
                    heights[j] = temp;

                    String temp1 = names[i];
                    names[i] = names[j];
                    names[j] = temp1;
                }
            }
        }
        return names;
    }
    public static void main(String[] args) {
        Solution solution = new Solution();
        String[] names = new String[]{"Mary","John","Emma"};
        int[] heights = new int[]{180,165,170};
        String[] result = solution.sortPeople(names, heights);
        for (int i = 0; i < result.length; i++) {
            System.out.println(result[i]);
        }

=======

        // Sort the height array
        // Use the sorted height array to sort the names array
        int[] sortedHeights = new int[heights.length];
        for (int i = 0; i < heights.length; i++) {
            sortedHeights[i] = heights[i];
        }
        Arrays.sort(sortedHeights);
        Map<Integer, List<String>> map = new HashMap<>();
        for (int i = 0; i < sortedHeights.length; i++) {
            int height = sortedHeights[i];
            List<String> list = map.getOrDefault(height, new ArrayList<>());
            list.add(names[i]);
            map.put(height, list);
        }
        // Sort the names in descending order
        String[] sortedNames = new String[names.length];
        int i = 0;
        for (int j = sortedHeights.length - 1; j >= 0; j--) {
            int height = sortedHeights[j];
            List<String> list = map.get(height);
            Collections.sort(list);
            for (String name : list) {
                sortedNames[i++] = name;
            }
        }
        return sortedNames;
