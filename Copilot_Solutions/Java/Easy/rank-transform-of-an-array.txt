Synthesizing 10/10 solutions

=======

        int[] sorted = Arrays.copyOf(arr, arr.length);
        Arrays.sort(sorted);
        Map<Integer, Integer> map = new HashMap<>();
        int rank = 1;
        for (int i = 0; i < sorted.length; i++) {
            if (!map.containsKey(sorted[i])) {
                map.put(sorted[i], rank++);
            }
        }
        for (int i = 0; i < arr.length; i++) {
            arr[i] = map.get(arr[i]);
        }
        return arr;

=======

        int[] temp = new int[arr.length];
        for (int i = 0; i < arr.length; i++) {
            temp[i] = arr[i];
        }
        Arrays.sort(temp);
        int rank = 1;
        for (int i = 0; i < arr.length; i++) {
            if (i == 0 || temp[i] != temp[i - 1]) {
                rank++;
            }
            arr[i] = rank;
        }
        return arr;

=======

        int[] sorted = Arrays.copyOf(arr, arr.length);
        Arrays.sort(sorted);
        Map<Integer, Integer> rank = new HashMap<>();
        int r = 1;
        for (int i = 0; i < sorted.length; i++) {
            if (i == 0 || sorted[i] != sorted[i - 1]) {
                rank.put(sorted[i], r++);
            }
        }
        for (int i = 0; i < arr.length; i++) {
            arr[i] = rank.get(arr[i]);
        }
        return arr;

=======

        int[] sorted = Arrays.copyOf(arr, arr.length);
        Arrays.sort(sorted);
        Map<Integer, Integer> rank = new HashMap<>();
        int r = 1;
        for (int i = 0; i < sorted.length; i++) {
            if (!rank.containsKey(sorted[i])) {
                rank.put(sorted[i], r++);
            }
        }
        for (int i = 0; i < arr.length; i++) {
            arr[i] = rank.get(arr[i]);
        }
        return arr;

=======

        int[] sorted = arr.clone();
        Arrays.sort(sorted);
        Map<Integer, Integer> rank = new HashMap<>();
        for (int i = 0; i < sorted.length; i++) {
            if (!rank.containsKey(sorted[i])) {
                rank.put(sorted[i], rank.size() + 1);
            }
        }
        for (int i = 0; i < arr.length; i++) {
            arr[i] = rank.get(arr[i]);
        }
        return arr;

=======

        int[] sorted = arr.clone();
        Arrays.sort(sorted);
        int rank = 1;
        Map<Integer, Integer> rankMap = new HashMap<>();
        for (int i = 0; i < sorted.length; i++) {
            if (i == 0 || sorted[i] != sorted[i - 1]) {
                rankMap.put(sorted[i], rank++);
            }
        }
        for (int i = 0; i < arr.length; i++) {
            arr[i] = rankMap.get(arr[i]);
        }
        return arr;

=======

        int[] res = new int[arr.length];
        int[] sorted = arr.clone();
        Arrays.sort(sorted);
        Map<Integer, Integer> map = new HashMap<>();
        int rank = 1;
        for (int i = 0; i < sorted.length; i++) {
            if (!map.containsKey(sorted[i])) {
                map.put(sorted[i], rank++);
            }
        }
        for (int i = 0; i < arr.length; i++) {
            res[i] = map.get(arr[i]);
        }
        return res;

=======

        int[] result = new int[arr.length];
        int[] temp = arr.clone();
        Arrays.sort(temp);
        Map<Integer, Integer> map = new HashMap<>();
        for (int i = 0; i < temp.length; i++) {
            if (!map.containsKey(temp[i])) {
                map.put(temp[i], i + 1);
            }
        }
        for (int i = 0; i < arr.length; i++) {
            result[i] = map.get(arr[i]);
        }
        return result;

=======

        int[] map = new int[200001];
        int[] res = new int[arr.length];
        for (int i = 0; i < arr.length; i++) {
            map[arr[i] + 100000]++;
        }
        int rank = 1;
        for (int i = 0; i < map.length; i++) {
            if (map[i] > 0) {
                map[i] = rank;
                rank++;
            }
        }
        for (int i = 0; i < arr.length; i++) {
            res[i] = map[arr[i] + 100000];
        }
        return res;

=======

        int[] result = new int[arr.length];
        if (arr.length == 0) return result;
        int[] arrCopy = arr.clone();
        Arrays.sort(arrCopy);
        int count = 1;
        Map<Integer, Integer> map = new HashMap<>();
        map.put(arrCopy[0], count);
        for (int i = 1; i < arrCopy.length; i++) {
            if (arrCopy[i] != arrCopy[i - 1]) {
                count++;
                map.put(arrCopy[i], count);
            }
        }
        for (int i = 0; i < arr.length; i++) {
            result[i] = map.get(arr[i]);
        }
        return result;
