Synthesizing 10/10 solutions

=======

        int n = code.length;
        int[] res = new int[n];
        if (k == 0) {
            return res;
        }
        if (k > 0) {
            for (int i = 0; i < n; i++) {
                int sum = 0;
                for (int j = 1; j <= k; j++) {
                    sum += code[(i + j) % n];
                }
                res[i] = sum;
            }
        } else {
            for (int i = 0; i < n; i++) {
                int sum = 0;
                for (int j = -1; j >= k; j--) {
                    sum += code[(i + j + n) % n];
                }
                res[i] = sum;
            }
        }
        return res;

=======

        int[] result = new int[code.length];
        if (k == 0) {
            return result;
        }
        if (k > 0) {
            for (int i = 0; i < code.length; i++) {
                int sum = 0;
                for (int j = 1; j <= k; j++) {
                    sum += code[(i + j) % code.length];
                }
                result[i] = sum;
            }
        } else {
            for (int i = 0; i < code.length; i++) {
                int sum = 0;
                for (int j = 1; j <= -k; j++) {
                    sum += code[(i - j + code.length) % code.length];
                }
                result[i] = sum;
            }
        }
        return result;

=======

        int[] res = new int[code.length];
        if (k == 0) {
            return res;
        }
        if (k > 0) {
            for (int i = 0; i < code.length; i++) {
                for (int j = 1; j <= k; j++) {
                    res[i] += code[(i + j) % code.length];
                }
            }
        }
        if (k < 0) {
            for (int i = 0; i < code.length; i++) {
                for (int j = -1; j >= k; j--) {
                    res[i] += code[(i + j + code.length) % code.length];
                }
            }
        }
        return res;

=======

        int n = code.length;
        int[] res = new int[n];
        if (k == 0) {
            return res;
        }
        int sum = 0;
        if (k > 0) {
            for (int i = 1; i <= k; i++) {
                sum += code[i];
            }
            for (int i = 0; i < n; i++) {
                res[i] = sum;
                sum -= code[(i + 1) % n];
                sum += code[(i + k + 1) % n];
            }
        } else {
            for (int i = n - 1; i > n - 1 + k; i--) {
                sum += code[(i + n) % n];
            }
            for (int i = 0; i < n; i++) {
                res[i] = sum;
                sum -= code[(i - 1 + n) % n];
                sum += code[(i + k - 1 + n) % n];
            }
        }
        return res;

=======

        int n = code.length;
        int[] result = new int[n];
        if (k == 0) {
            return result;
        }
        for (int i = 0; i < n; i++) {
            int start = k > 0 ? i + 1 : i - 1;
            int end = k > 0 ? i + k : i + k + 1;
            int sum = 0;
            for (int j = start; j != end; j = k > 0 ? j + 1 : j - 1) {
                sum += code[(j + n) % n];
            }
            result[i] = sum;
        }
        return result;

=======

        int n = code.length;
        int[] res = new int[n];
        if (k == 0) {
            return res;
        }
        int sum = 0;
        for (int i = 1; i <= Math.abs(k); i++) {
            sum += code[(i + n) % n];
        }
        for (int i = 0; i < n; i++) {
            res[i] = sum;
            sum -= code[(i + 1 + n) % n];
            sum += code[(i + 1 + k + n) % n];
        }
        return res;

=======

        int n = code.length;
        int[] result = new int[n];
        if (k == 0) {
            return result;
        }
        int sum = 0;
        if (k > 0) {
            for (int i = 1; i <= k; i++) {
                sum += code[i];
            }
            for (int i = 0; i < n; i++) {
                result[i] = sum;
                sum -= code[(i + 1) % n];
                sum += code[(i + k + 1) % n];
            }
        } else {
            for (int i = 1; i <= -k; i++) {
                sum += code[(n - i) % n];
            }
            for (int i = 0; i < n; i++) {
                result[i] = sum;
                sum -= code[(n + i - 1) % n];
                sum += code[(n + i + k - 1) % n];
            }
        }
        return result;

=======

        int n = code.length;
        int[] result = new int[n];
        if (k == 0) {
            return result;
        }
        int sum = 0;
        if (k > 0) {
            for (int i = 0; i < k; i++) {
                sum += code[i];
            }
            for (int i = 0; i < n; i++) {
                result[i] = sum;
                sum -= code[i];
                sum += code[(i + k) % n];
            }
        } else {
            for (int i = n - 1; i >= n + k; i--) {
                sum += code[i];
            }
            for (int i = n - 1; i >= 0; i--) {
                result[i] = sum;
                sum -= code[(i + k + 1) % n];
                sum += code[i];
            }
        }
        return result;

=======

        int[] res = new int[code.length];
        if (k == 0) return res;
        for (int i = 0; i < code.length; i++) {
            int sum = 0;
            if (k > 0) {
                for (int j = 1; j <= k; j++) {
                    sum += code[(i + j) % code.length];
                }
            } else {
                for (int j = -1; j >= k; j--) {
                    sum += code[(i + j + code.length) % code.length];
                }
            }
            res[i] = sum;
        }
        return res;

=======

        int n = code.length;
        int[] res = new int[n];
        if (k == 0) return res;
        int p = 0, sum = 0;
        if (k > 0) {
            for (int i = 1; i <= k; i++) {
                sum += code[i];
            }
            for (int i = 0; i < n; i++) {
                res[i] = sum;
                sum += code[(i + k + 1) % n] - code[(i + 1) % n];
            }
        } else {
            for (int i = n - 1; i >= n + k; i--) {
                sum += code[i];
            }
            for (int i = 0; i < n; i++) {
                res[i] = sum;
                sum += code[(i + k + n) % n] - code[(i - 1 + n) % n];
            }
        }
        return res;
