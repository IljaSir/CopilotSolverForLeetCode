Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int count = 0;
        String temp = word;
        while (sequence.contains(temp)) {
            count++;
            temp += word;
        }
        return count;

=======

        int res = 0;
        String s = word;
        while (sequence.contains(s)) {
            res++;
            s += word;
        }
        return res;

=======

        int max = 0;
        for (int i = 0; i < sequence.length(); i++) {
            int count = 0;
            for (int j = i; j < sequence.length(); j++) {
                if (sequence.charAt(j) == word.charAt((j - i) % word.length())) {
                    if ((j - i + 1) % word.length() == 0) {
                        count++;
                    }
                } else {
                    break;
                }
            }
            max = Math.max(max, count);
        }
        return max;

=======

        int count = 0;
        String temp = word;
        while(sequence.indexOf(temp) >= 0){
            count++;
            temp += word;
        }
        return count;

=======

        int count = 0;
        String s = word;
        
        while (sequence.contains(s)) {
            count++;
            s += word;
        }
        
        return count;

=======

        int size = sequence.length();
        int wordSize = word.length();
        int count = 0;
        for (int i = 0; i < size; i++) {
            if (sequence.charAt(i) == word.charAt(0)) {
                int cur = 0;
                int j = i;
                while (j < size) {
                    int k = 0;
                    while (k < wordSize && j < size && sequence.charAt(j) == word.charAt(k)) {
                        j++;
                        k++;
                    }
                    if (k == wordSize) {
                        cur++;
                    } else {
                        break;
                    }
                }
                count = Math.max(count, cur);
            }
        }
        return count;

=======

        int i = 0;
        while (sequence.contains(word)) {
            word = word + word;
            i++;
        }
        return i;

=======

        int k = 0;
        int i = 0;
        String s = word;
        while (sequence.indexOf(s) != -1) {
            k++;
            s += word;
        }
        return k;

=======

        int maxLength = sequence.length() / word.length();
        int max = 0;
        for (int i = 1; i <= maxLength; i++) {
            String wordToSearch = "";
            for (int j = 0; j < i; j++) {
                wordToSearch += word;
            }
            if (sequence.contains(wordToSearch)) {
                max = i;
            }
        }
        return max;
