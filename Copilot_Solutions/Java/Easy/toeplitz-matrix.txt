Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int m = matrix.length;
        int n = matrix[0].length;
        for (int i = 0; i < m - 1; i++) {
            for (int j = 0; j < n - 1; j++) {
                if (matrix[i][j] != matrix[i + 1][j + 1]) {
                    return false;
                }
            }
        }
        return true;

=======

        int m = matrix.length;
        int n = matrix[0].length;
        for (int i = 1; i < m; i++) {
            for (int j = 1; j < n; j++) {
                if (matrix[i][j] != matrix[i - 1][j - 1]) {
                    return false;
                }
            }
        }
        return true;

=======

        int m = matrix.length;
        int n = matrix[0].length;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (i > 0 && j > 0 && matrix[i - 1][j - 1] != matrix[i][j]) {
                    return false;
                }
            }
        }
        return true;

=======

        int m = matrix.length;
        int n = matrix[0].length;
        for (int i = 0; i < m; i++) {
            int x = i;
            int y = 0;
            int val = matrix[x][y];
            while (x < m && y < n) {
                if (matrix[x][y] != val) {
                    return false;
                }
                x++;
                y++;
            }
        }
        for (int i = 0; i < n; i++) {
            int x = 0;
            int y = i;
            int val = matrix[x][y];
            while (x < m && y < n) {
                if (matrix[x][y] != val) {
                    return false;
                }
                x++;
                y++;
            }
        }
        return true;

=======

        int m = matrix.length;
        int n = matrix[0].length;
        for (int i = 0; i < m; i++) {
            int x = i;
            int y = 0;
            int v = matrix[x][y];
            while (x < m && y < n) {
                if (matrix[x][y] != v) {
                    return false;
                }
                x++;
                y++;
            }
        }
        for (int i = 0; i < n; i++) {
            int x = 0;
            int y = i;
            int v = matrix[x][y];
            while (x < m && y < n) {
                if (matrix[x][y] != v) {
                    return false;
                }
                x++;
                y++;
            }
        }
        return true;

=======

        int m = matrix.length;
        int n = matrix[0].length;
        int[] diagonal = new int[n];
        for (int i = 0; i < n; i++) {
            diagonal[i] = matrix[0][i];
        }
        for (int i = 1; i < m; i++) {
            for (int j = 1; j < n; j++) {
                if (diagonal[j] != matrix[i][j]) {
                    return false;
                }
            }
            for (int j = 0; j < n - 1; j++) {
                diagonal[j] = diagonal[j + 1];
            }
            diagonal[n - 1] = matrix[i][n - 1];
        }
        return true;
