Synthesizing 10/10 solutions

=======

        if (s.length() != t.length()) {
            return false;
        }
        Map<Character, Character> map = new HashMap<>();
        for (int i = 0; i < s.length(); i++) {
            if (map.containsKey(s.charAt(i))) {
                if (map.get(s.charAt(i)) != t.charAt(i)) {
                    return false;
                }
            } else {
                if (map.containsValue(t.charAt(i))) {
                    return false;
                }
                map.put(s.charAt(i), t.charAt(i));
            }
        }
        return true;

=======

        if (s.length() != t.length()) return false;
        Map<Character, Character> map = new HashMap<>();
        Set<Character> set = new HashSet<>();
        for (int i = 0; i < s.length(); i++) {
            char c1 = s.charAt(i);
            char c2 = t.charAt(i);
            if (map.containsKey(c1)) {
                if (map.get(c1) != c2) return false;
            } else {
                if (set.contains(c2)) return false;
                map.put(c1, c2);
                set.add(c2);
            }
        }
        return true;

=======

        int[] sMap = new int[256];
        int[] tMap = new int[256];
        for (int i = 0; i < s.length(); i++) {
            if (sMap[s.charAt(i)] != tMap[t.charAt(i)]) {
                return false;
            }
            sMap[s.charAt(i)] = i + 1;
            tMap[t.charAt(i)] = i + 1;
        }
        return true;

=======

        if (s.length() != t.length()) {
            return false;
        }
        int[] map1 = new int[256];
        int[] map2 = new int[256];
        for (int i = 0; i < s.length(); i++) {
            if (map1[s.charAt(i)] != map2[t.charAt(i)]) {
                return false;
            }
            map1[s.charAt(i)] = i + 1;
            map2[t.charAt(i)] = i + 1;
        }
        return true;

=======

        int[] m1 = new int[256];
        int[] m2 = new int[256];
        for(int i = 0; i < s.length(); i++){
            if(m1[s.charAt(i)] != m2[t.charAt(i)]) return false;
            m1[s.charAt(i)] = i + 1;
            m2[t.charAt(i)] = i + 1;
        }
        return true;

=======

        if (s.length() != t.length()) {
            return false;
        }
        int[] sToT = new int[256];
        int[] tToS = new int[256];
        for (int i = 0; i < s.length(); i++) {
            char sChar = s.charAt(i);
            char tChar = t.charAt(i);
            if (sToT[sChar] == 0 && tToS[tChar] == 0) {
                sToT[sChar] = tChar;
                tToS[tChar] = sChar;
            } else if (sToT[sChar] != tChar || tToS[tChar] != sChar) {
                return false;
            }
        }
        return true;

=======

        if(s.length() != t.length()) return false;
        HashMap<Character, Character> map1 = new HashMap<>();
        HashMap<Character, Character> map2 = new HashMap<>();
        for(int i = 0; i < s.length(); i++){
            if(map1.containsKey(s.charAt(i))){
                if(map1.get(s.charAt(i)) != t.charAt(i)) return false;
            }else{
                map1.put(s.charAt(i), t.charAt(i));
            }
            if(map2.containsKey(t.charAt(i))){
                if(map2.get(t.charAt(i)) != s.charAt(i)) return false;
            }else{
                map2.put(t.charAt(i), s.charAt(i));
            }
        }
        return true;

=======

        int[] map = new int[256];
        boolean[] used = new boolean[256];
        for (int i = 0; i < s.length(); i++) {
            char sc = s.charAt(i);
            char tc = t.charAt(i);
            if (map[sc] == 0) {
                if (used[tc]) {
                    return false;
                }
                map[sc] = tc;
                used[tc] = true;
            } else if (map[sc] != tc) {
                return false;
            }
        }
        return true;

=======

        int[] map = new int[512];
        int[] map2 = new int[512];
        for (int i = 0; i < s.length(); i++) {
            if (map[s.charAt(i)] != map2[t.charAt(i)]) return false;
            map[s.charAt(i)] = i + 1;
            map2[t.charAt(i)] = i + 1;
        }
        return true;

=======

        if (s.length() != t.length()) {
            return false;
        }
        char[] map = new char[128];
        char[] map2 = new char[128];
        for (int i = 0; i < s.length(); i++) {
            char c1 = s.charAt(i);
            char c2 = t.charAt(i);
            if (map[c1] == 0 && map2[c2] == 0) {
                map[c1] = c2;
                map2[c2] = c1;
            } else if (map[c1] != c2 || map2[c2] != c1) {
                return false;
            }
        }
        return true;
