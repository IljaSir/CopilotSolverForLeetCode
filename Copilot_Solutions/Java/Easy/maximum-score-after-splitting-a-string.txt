Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int oneCount = 0;
        for (int i = 0; i < s.length(); i++) {
            if (s.charAt(i) == '1') {
                oneCount++;
            }
        }
        int maxScore = 0;
        int zeroCount = 0;
        for (int i = 0; i < s.length() - 1; i++) {
            if (s.charAt(i) == '0') {
                zeroCount++;
            } else {
                oneCount--;
            }
            maxScore = Math.max(maxScore, zeroCount + oneCount);
        }
        return maxScore;

=======

        int max = 0;
        int count = 0;
        for (int i = 0; i < s.length(); i++) {
            if (s.charAt(i) == '1') {
                count++;
            }
        }
        int left = 0;
        int right = count;
        for (int i = 0; i < s.length() - 1; i++) {
            if (s.charAt(i) == '0') {
                left++;
            } else {
                right--;
            }
            max = Math.max(max, left + right);
        }
        return max;

=======

        int max = 0;
        int left = 0;
        int right = 0;
        for (int i = 0; i < s.length(); i++) {
            if (s.charAt(i) == '1') {
                right++;
            }
        }
        for (int i = 0; i < s.length() - 1; i++) {
            if (s.charAt(i) == '0') {
                left++;
            } else {
                right--;
            }
            max = Math.max(max, left + right);
        }
        return max;

=======

        int max = 0;
        int count = 0;
        for (int i = 0; i < s.length(); i++) {
            if (s.charAt(i) == '1') {
                count++;
            }
        }
        int left = 0;
        for (int i = 0; i < s.length() - 1; i++) {
            if (s.charAt(i) == '0') {
                left++;
            } else {
                count--;
            }
            max = Math.max(max, left + count);
        }
        return max;

=======

        int max = 0;
        int count = 0;
        for (int i = 0; i < s.length(); i++) {
            if (s.charAt(i) == '0') {
                count++;
            }
        }
        int temp = 0;
        for (int i = 0; i < s.length() - 1; i++) {
            if (s.charAt(i) == '0') {
                temp++;
            } else {
                count--;
            }
            max = Math.max(max, temp + count);
        }
        return max;

=======

        int maxScore = 0;
        int left = 0;
        int right = 0;
        for (int i = 0; i < s.length() - 1; i++) {
            if (s.charAt(i) == '0') {
                left++;
            } else {
                right++;
            }
            maxScore = Math.max(maxScore, left + (s.length() - i - 1 - right));
        }
        return maxScore;

=======

        int n = s.length();
        int max = 0;
        int zeros = 0;
        int ones = 0;
        for (int i = 0; i < n; i++) {
            if (s.charAt(i) == '0') {
                zeros++;
            } else {
                ones++;
            }
        }
        for (int i = 0; i < n - 1; i++) {
            if (s.charAt(i) == '0') {
                zeros--;
            } else {
                ones--;
            }
            max = Math.max(max, zeros + ones);
        }
        return max;

=======

        int max = 0;
        int count = 0;
        for(int i = 0; i < s.length(); i++) {
            if(s.charAt(i) == '0') {
                count++;
            }
        }
        int left = 0;
        int right = count;
        for(int i = 0; i < s.length() - 1; i++) {
            if(s.charAt(i) == '0') {
                left++;
            } else {
                right--;
            }
            max = Math.max(max, left + right);
        }
        return max;

=======

        int max = 0;
        int[] zero = new int[s.length()];
        int[] one = new int[s.length()];
        zero[0] = s.charAt(0) == '0' ? 1 : 0;
        one[s.length() - 1] = s.charAt(s.length() - 1) == '1' ? 1 : 0;
        for (int i = 1; i < s.length(); i++) {
            zero[i] = zero[i - 1] + (s.charAt(i) == '0' ? 1 : 0);
        }
        for (int i = s.length() - 2; i >= 0; i--) {
            one[i] = one[i + 1] + (s.charAt(i) == '1' ? 1 : 0);
        }
        for (int i = 0; i < s.length() - 1; i++) {
            max = Math.max(max, zero[i] + one[i + 1]);
        }
        return max;
