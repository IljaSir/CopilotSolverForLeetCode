Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int n = nums.length;
        for (int i = 0; i < n - 1; i++) {
            if (nums[i] == nums[i + 1]) {
                nums[i] *= 2;
                nums[i + 1] = 0;
            }
        }
        int[] arr = new int[n];
        int index = 0;
        for (int i = 0; i < n; i++) {
            if (nums[i] != 0) {
                arr[index++] = nums[i];
            }
        }
        return arr;

=======

        int n = nums.length;
        for (int i = 0; i < n - 1; i++) {
            if (nums[i] == nums[i + 1]) {
                nums[i] *= 2;
                nums[i + 1] = 0;
            }
        }
        int[] res = new int[n];
        int j = 0;
        for (int i = 0; i < n; i++) {
            if (nums[i] != 0) {
                res[j++] = nums[i];
            }
        }
        return res;

=======

        int n = nums.length;
        for (int i = 0; i < n - 1; i++) {
            if (nums[i] == nums[i + 1]) {
                nums[i] *= 2;
                nums[i + 1] = 0;
            }
        }
        int j = 0;
        for (int i = 0; i < n; i++) {
            if (nums[i] != 0) {
                nums[j] = nums[i];
                j++;
            }
        }
        while (j < n) {
            nums[j] = 0;
            j++;
        }
        return nums;

=======

        int n = nums.length;
        int[] ans = new int[n];
        int j = 0;
        for (int i = 0; i < n; i++) {
            if (i + 1 < n && nums[i] == nums[i + 1]) {
                ans[j++] = nums[i] * 2;
                i++;
            } else {
                ans[j++] = nums[i];
            }
        }
        return ans;

=======

        int n = nums.length;
        int[] result = new int[n];
        int index = 0;
        for (int i = 0; i < n - 1; i++) {
            if (nums[i] != nums[i + 1]) {
                result[index++] = nums[i];
            } else {
                result[index++] = nums[i] * 2;
                i++;
            }
        }
        if (index < n) {
            result[index] = nums[n - 1];
        }
        return result;

=======

        int[] result = new int[nums.length];
        int i = 0;
        int j = 0;
        while (i < nums.length) {
            if (i == nums.length - 1 || nums[i] != nums[i + 1]) {
                result[j++] = nums[i++];
            } else {
                result[j++] = nums[i] * 2;
                i += 2;
            }
        }
        return result;

=======

        int[] result = new int[nums.length];
        int j = 0;
        for(int i = 0; i < nums.length; i++) {
            if(nums[i] != 0) {
                result[j++] = nums[i];
            }
        }
        for(int i = 0; i < nums.length - 1; i++) {
            if(result[i] == result[i + 1]) {
                result[i] = result[i] * 2;
                result[i + 1] = 0;
            }
        }
        j = 0;
        int[] finalResult = new int[nums.length];
        for(int i = 0; i < nums.length; i++) {
            if(result[i] != 0) {
                finalResult[j++] = result[i];
            }
        }
        return finalResult;

=======

        int n = nums.length;
        int[] res = new int[n];
        int i = 0;
        int j = 0;
        while (i < n) {
            if (i == n - 1 || nums[i] != nums[i + 1]) {
                res[j++] = nums[i++];
            } else {
                res[j++] = 2 * nums[i++];
                i++;
            }
        }
        return res;

=======

        int n = nums.length;
        int[] ans = new int[n];
        int i = 0;
        for (int j = 0; j < n; j++) {
            if (j == n - 1 || nums[j] != nums[j + 1]) {
                ans[i++] = nums[j];
            } else {
                ans[i++] = 2 * nums[j];
                j++;
            }
        }
        return ans;
