Synthesizing 10/10 solutions (Duplicates hidden)

=======

        Arrays.sort(target);
        Arrays.sort(arr);
        for (int i = 0; i < target.length; i++) {
            if (target[i] != arr[i]) {
                return false;
            }
        }
        return true;

=======

        int[] count = new int[1001];
        for (int i = 0; i < target.length; i++) {
            count[target[i]]++;
            count[arr[i]]--;
        }
        for (int i = 0; i < 1001; i++) {
            if (count[i] != 0) {
                return false;
            }
        }
        return true;

=======

        Map<Integer, Integer> map = new HashMap<>();
        for (int i = 0; i < target.length; i++) {
            map.put(target[i], map.getOrDefault(target[i], 0) + 1);
        }
        for (int i = 0; i < arr.length; i++) {
            if (!map.containsKey(arr[i])) {
                return false;
            }
            int count = map.get(arr[i]);
            if (count == 1) {
                map.remove(arr[i]);
            } else {
                map.put(arr[i], count - 1);
            }
        }
        return map.isEmpty();

=======

        int[] count = new int[1001];
        for (int i = 0; i < target.length; i++) {
            count[target[i]]++;
            count[arr[i]]--;
        }
        for (int i = 0; i < count.length; i++) {
            if (count[i] != 0) {
                return false;
            }
        }
        return true;

=======

        Map<Integer, Integer> map = new HashMap<>();
        for (int i = 0; i < target.length; i++) {
            map.put(target[i], map.getOrDefault(target[i], 0) + 1);
            map.put(arr[i], map.getOrDefault(arr[i], 0) - 1);
        }
        for (int key : map.keySet()) {
            if (map.get(key) != 0) {
                return false;
            }
        }
        return true;

=======

        int[] freq = new int[1001];
        for (int i = 0; i < target.length; i++) {
            freq[target[i]]++;
            freq[arr[i]]--;
        }
        for (int i = 0; i < freq.length; i++) {
            if (freq[i] != 0) {
                return false;
            }
        }
        return true;

=======

        int[] targetCount = new int[1001];
        int[] arrCount = new int[1001];
        
        for (int i = 0; i < target.length; i++) {
            targetCount[target[i]]++;
            arrCount[arr[i]]++;
        }
        
        for (int i = 0; i < 1001; i++) {
            if (targetCount[i] != arrCount[i]) {
                return false;
            }
        }
        
        return true;
