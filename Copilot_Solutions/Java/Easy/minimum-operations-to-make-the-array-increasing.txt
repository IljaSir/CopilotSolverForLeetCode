Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int count = 0;
        for (int i = 1; i < nums.length; i++) {
            if (nums[i] <= nums[i - 1]) {
                count += nums[i - 1] - nums[i] + 1;
                nums[i] = nums[i - 1] + 1;
            }
        }
        return count;

=======

        int res = 0;
        for (int i = 1; i < nums.length; i++) {
            if (nums[i] <= nums[i - 1]) {
                res += nums[i - 1] - nums[i] + 1;
                nums[i] = nums[i - 1] + 1;
            }
        }
        return res;

=======

        int sum = 0;
        for (int i = 1; i < nums.length; i++) {
            if (nums[i] <= nums[i - 1]) {
                sum += nums[i - 1] - nums[i] + 1;
                nums[i] = nums[i - 1] + 1;
            }
        }
        return sum;

=======

        int count = 0;
        for (int i = 1; i < nums.length; i++) {
            if (nums[i] <= nums[i-1]) {
                int diff = nums[i-1] - nums[i] + 1;
                count += diff;
                nums[i] += diff;
            }
        }
        return count;

=======

        int count = 0;
        for (int i = 1; i < nums.length; i++) {
            if (nums[i] <= nums[i-1]) {
                int diff = nums[i-1] - nums[i] + 1;
                nums[i] += diff;
                count += diff;
            }
        }
        return count;

=======

        int res = 0;
        int prev = nums[0];
        for (int i = 1; i < nums.length; i++) {
            if (nums[i] <= prev) {
                res += prev + 1 - nums[i];
                prev++;
            } else {
                prev = nums[i];
            }
        }
        return res;

=======

        int n = nums.length;
        int[] dp = new int[n];
        dp[0] = 0;
        for (int i = 1; i < n; i++) {
            dp[i] = Math.max(dp[i - 1] + 1 - nums[i], 0) + dp[i - 1];
            nums[i] = Math.max(nums[i - 1] + 1, nums[i]);
        }
        return dp[n - 1];

=======

        int count = 0;
        int cur = nums[0];
        for (int i = 1; i < nums.length; i++) {
            if (nums[i] <= cur) {
                count += cur - nums[i] + 1;
                cur++;
            } else {
                cur = nums[i];
            }
        }
        return count;

=======

        int n = nums.length;
        int ans = 0;
        for (int i = 1; i < n; i++) {
            if (nums[i] <= nums[i - 1]) {
                ans += nums[i - 1] - nums[i] + 1;
                nums[i] = nums[i - 1] + 1;
            }
        }
        return ans;
