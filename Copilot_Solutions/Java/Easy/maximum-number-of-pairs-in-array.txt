Synthesizing 10/10 solutions

=======

        int[] count = new int[101];
        for (int num : nums) {
            count[num]++;
        }
        int pairs = 0;
        for (int i = 0; i < 101; i++) {
            pairs += count[i] / 2;
            count[i] %= 2;
        }
        int left = 0;
        for (int i = 0; i < 101; i++) {
            if (count[i] == 1) {
                left++;
            }
        }
        return new int[]{pairs, left};

=======

        int[] count = new int[101];
        for (int n : nums) {
            count[n]++;
        }
        int pairs = 0;
        for (int i = 0; i < 101; i++) {
            pairs += count[i] / 2;
        }
        int left = 0;
        for (int i = 0; i < 101; i++) {
            left += count[i] % 2;
        }
        return new int[] {pairs, left};

=======

        int[] counts = new int[101];
        for (int i = 0; i < nums.length; i++) {
            counts[nums[i]]++;
        }
        int pairs = 0;
        int left = 0;
        for (int i = 0; i < counts.length; i++) {
            if (counts[i] > 0) {
                if (counts[i] % 2 == 0) {
                    pairs += counts[i] / 2;
                } else {
                    pairs += (counts[i] - 1) / 2;
                    left++;
                }
            }
        }
        return new int[]{pairs, left};

=======

        int[] count = new int[101];
        int[] answer = new int[2];
        for (int i = 0; i < nums.length; i++) {
            count[nums[i]]++;
        }
        for (int i = 0; i < count.length; i++) {
            answer[0] += count[i] / 2;
            answer[1] += count[i] % 2;
        }
        return answer;

=======

        int[] freq = new int[101];
        for (int num : nums) {
            freq[num]++;
        }
        int pairs = 0;
        int left = 0;
        for (int i = 0; i < 101; i++) {
            if (freq[i] >= 2) {
                pairs += freq[i] / 2;
                freq[i] = freq[i] % 2;
            }
            if (freq[i] == 1) {
                left++;
            }
        }
        return new int[] {pairs, left};

=======

        int[] count = new int[101];
        int pairs = 0;
        for(int i = 0; i < nums.length; i++){
            count[nums[i]]++;
        }
        for(int i = 0; i < count.length; i++){
            pairs += count[i] / 2;
            count[i] = count[i] % 2;
        }
        int[] res = {pairs, 0};
        for(int i = 0; i < count.length; i++){
            res[1] += count[i];
        }
        return res;

=======

        int[] count = new int[101];
        for (int num : nums) {
            count[num]++;
        }
        int pairs = 0, left = 0;
        for (int i = 0; i <= 100; i++) {
            pairs += count[i] / 2;
            left += count[i] % 2;
        }
        return new int[]{pairs, left};

=======

        int[] count = new int[101];
        int pair = 0;
        for (int n : nums) {
            if (count[n] > 0) {
                pair++;
                count[n]--;
            } else {
                count[n]++;
            }
        }
        return new int[] {pair, Arrays.stream(count).sum()};

=======

        int[] arr = new int[101];
        int pairs = 0;
        for (int n : nums) {
            arr[n]++;
        }
        for (int i = 0; i < 101; i++) {
            pairs += arr[i] / 2;
        }
        int left = 0;
        for (int i = 0; i < 101; i++) {
            if (arr[i] % 2 == 1) {
                left++;
            }
        }
        return new int[]{pairs, left};

=======

        int[] count = new int[101];
        int[] ans = new int[2];
        for(int num: nums) {
            count[num]++;
        }
        for(int i = 0; i < 101; i++) {
            ans[0] += count[i] / 2;
            ans[1] += count[i] % 2;
        }
        return ans;
