Synthesizing 10/10 solutions

=======

        int max = -1;
        for (int i = 0; i < s.length(); i++) {
            for (int j = i + 1; j < s.length(); j++) {
                if (s.charAt(i) == s.charAt(j)) {
                    max = Math.max(max, j - i - 1);
                    break;
                }
            }
        }
        return max;

=======

        int[] first = new int[26];
        int[] last = new int[26];
        Arrays.fill(first, -1);
        Arrays.fill(last, -1);
        for (int i = 0; i < s.length(); i++) {
            int c = s.charAt(i) - 'a';
            if (first[c] == -1) {
                first[c] = i;
            }
            last[c] = i;
        }
        int max = -1;
        for (int i = 0; i < 26; i++) {
            if (first[i] >= 0 && last[i] >= 0 && first[i] != last[i]) {
                max = Math.max(max, last[i] - first[i] - 1);
            }
        }
        return max;

=======

        int max = -1;
        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            for (int j = i + 1; j < s.length(); j++) {
                if (s.charAt(j) == c) {
                    max = Math.max(max, j - i - 1);
                }
            }
        }
        return max;

=======

        int[] first = new int[26];
        int[] last = new int[26];
        Arrays.fill(first, -1);
        Arrays.fill(last, -1);
        int n = s.length();
        for (int i = 0; i < n; i++) {
            if (first[s.charAt(i) - 'a'] == -1) {
                first[s.charAt(i) - 'a'] = i;
            }
            last[s.charAt(i) - 'a'] = i;
        }
        int res = -1;
        for (int i = 0; i < 26; i++) {
            if (first[i] != -1 && last[i] != -1) {
                res = Math.max(res, last[i] - first[i] - 1);
            }
        }
        return res;

=======

        int max = -1;
        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            int j = s.lastIndexOf(c);
            if (j > i) {
                max = Math.max(max, j - i - 1);
            }
        }
        return max;

=======

        int max = -1;
        for(int i=0;i<s.length();i++){
            for(int j=s.length()-1;j>i;j--){
                if(s.charAt(i)==s.charAt(j)){
                    max = Math.max(max,j-i-1);
                    break;
                }
            }
        }
        return max;

=======

        int[] firstIndex = new int[26];
        int[] lastIndex = new int[26];
        Arrays.fill(firstIndex, -1);
        Arrays.fill(lastIndex, -1);
        for(int i = 0; i < s.length(); i++) {
            int index = s.charAt(i) - 'a';
            if(firstIndex[index] == -1) {
                firstIndex[index] = i;
            }
            lastIndex[index] = i;
        }
        int max = -1;
        for(int i = 0; i < 26; i++) {
            if(firstIndex[i] != -1 && lastIndex[i] != -1) {
                max = Math.max(max, lastIndex[i] - firstIndex[i] - 1);
            }
        }
        return max;

=======

        int[] firstIndex = new int[26];
        Arrays.fill(firstIndex, -1);
        int max = -1;
        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            if (firstIndex[c - 'a'] == -1) {
                firstIndex[c - 'a'] = i;
            } else {
                max = Math.max(max, i - firstIndex[c - 'a'] - 1);
            }
        }
        return max;

=======

        int[] a = new int[26];
        Arrays.fill(a, -1);
        int max = -1;
        for (int i = 0; i < s.length(); i++) {
            int j = s.charAt(i) - 'a';
            if (a[j] < 0) {
                a[j] = i;
            } else {
                max = Math.max(max, i - a[j] - 1);
            }
        }
        return max;

=======

        int[] charIndex = new int[26];
        Arrays.fill(charIndex, -1);
        int max = -1;
        for (int i = 0; i < s.length(); i++) {
            int index = s.charAt(i) - 'a';
            if (charIndex[index] == -1) {
                charIndex[index] = i;
            } else {
                max = Math.max(max, i - charIndex[index] - 1);
            }
        }
        return max;
