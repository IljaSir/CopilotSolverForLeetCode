Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int n = nums.length;
        Set<Double> set = new HashSet<>();
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                set.add((nums[i] + nums[j]) / 2.0);
            }
        }
        return set.size();

=======

        Arrays.sort(nums);
        int n = nums.length;
        int[] sum = new int[n + 1];
        for (int i = 0; i < n; i++) {
            sum[i + 1] = sum[i] + nums[i];
        }
        int[] dp = new int[n];
        for (int i = 0; i < n; i++) {
            dp[i] = sum[n] - sum[i];
        }
        for (int i = 1; i < n; i++) {
            int[] next = new int[n];
            for (int j = i; j < n; j++) {
                int lo = j + 1, hi = n;
                while (lo < hi) {
                    int mi = (lo + hi) / 2;
                    if (nums[j] * (mi - j) + dp[mi] >= nums[mi] * (mi - j) + dp[j]) {
                        lo = mi + 1;
                    } else {
                        hi = mi;
                    }
                }
                next[j] = Math.max(dp[j], dp[lo - 1]);
                if (lo < n) {
                    next[j] = Math.max(next[j], (sum[lo] - sum[j]) * (lo - j));
                }
            }
            dp = next;
        }
        return n - dp[n - 1];

=======

        int n = nums.length;
        Arrays.sort(nums);
        Set<Double> set = new HashSet<>();
        for (int i = 0; i < n / 2; i++) {
            for (int j = i + 1; j < n / 2 + 1; j++) {
                set.add((nums[i] + nums[n - j]) / 2.0);
            }
        }
        return set.size();

=======

        int n = nums.length;
        Arrays.sort(nums);
        int[] sum = new int[n + 1];
        for (int i = 1; i <= n; ++i) {
            sum[i] = sum[i - 1] + nums[i - 1];
        }
        Set<Double> set = new HashSet<>();
        for (int i = 0; i < n; ++i) {
            for (int j = i + 1; j < n; ++j) {
                double avg = (sum[j + 1] - sum[i]) * 1.0 / (j - i + 1);
                set.add(avg);
            }
        }
        return set.size();

=======

        int n = nums.length;
        Arrays.sort(nums);
        int[][] dp = new int[n][n];
        for (int i = 0; i < n; i++) {
            Arrays.fill(dp[i], -1);
        }
        return dfs(nums, 0, n - 1, dp);
    }
    
    private int dfs(int[] nums, int l, int r, int[][] dp) {
        if (l > r) {
            return 0;
        }
        if (l == r) {
            return 1;
        }
        if (dp[l][r] != -1) {
            return dp[l][r];
        }
        Set<Integer> set = new HashSet<>();
        for (int i = l; i <= r; i++) {
            set.add(nums[i]);
        }
        int ans = set.size();
        for (int i = l; i < r; i++) {
            ans = Math.min(ans, dfs(nums, l, i, dp) + dfs(nums, i + 1, r, dp));
        }
        return dp[l][r] = ans;

=======

        Set<Double> res = new HashSet<>();
        int n = nums.length;
        Arrays.sort(nums);
        for (int i = 0; i < n / 2; i++) {
            for (int j = i + 1; j < n / 2 + 1; j++) {
                res.add((nums[i] + nums[n - j]) / 2.0);
            }
        }
        return res.size();

=======

        Set<Double> set = new HashSet<>();
        int n = nums.length;
        Arrays.sort(nums);
        for(int i = 0; i < n / 2; i++) {
            for(int j = n - 1; j >= n / 2; j--) {
                set.add((nums[i] + nums[j]) / 2.0);
            }
        }
        return set.size();

=======

        // 2 <= nums.length <= 100
        // nums.length is even.
        // 0 <= nums[i] <= 100
        int len = nums.length;
        int[] preSum = new int[len + 1];
        for (int i = 0; i < len; i++) {
            preSum[i + 1] = preSum[i] + nums[i];
        }
        Set<Double> set = new HashSet<>();
        for (int i = 0; i < len; i++) {
            for (int j = i + 1; j < len; j++) {
                set.add((preSum[j + 1] - preSum[i]) * 1.0 / (j - i));
            }
        }
        return set.size();

=======

        int n = nums.length;

        // sort the array
        Arrays.sort(nums);

        // count the number of distinct averages
        Set<Double> averages = new HashSet<>();
        for (int i = 0; i < n / 2; i++) {
            for (int j = n - 1; j >= n / 2; j--) {
                averages.add((nums[i] + nums[j]) / 2.0);
            }
        }

        return averages.size();
