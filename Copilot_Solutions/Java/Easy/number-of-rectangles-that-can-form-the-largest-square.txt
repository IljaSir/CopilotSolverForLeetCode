Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int maxLen = 0;
        int count = 0;
        for (int i = 0; i < rectangles.length; i++) {
            int len = Math.min(rectangles[i][0], rectangles[i][1]);
            if (len > maxLen) {
                maxLen = len;
                count = 1;
            } else if (len == maxLen) {
                count++;
            }
        }
        return count;

=======

        int max = 0;
        int count = 0;
        for (int i = 0; i < rectangles.length; i++) {
            int min = Math.min(rectangles[i][0], rectangles[i][1]);
            if (min > max) {
                max = min;
                count = 1;
            } else if (min == max) {
                count++;
            }
        }
        return count;

=======

        int maxLen = 0;
        int count = 0;
        for (int[] r : rectangles) {
            int len = Math.min(r[0], r[1]);
            if (len > maxLen) {
                maxLen = len;
                count = 1;
            } else if (len == maxLen) {
                count++;
            }
        }
        return count;

=======

        int max = 0;
        for (int i = 0; i < rectangles.length; i++) {
            max = Math.max(max, Math.min(rectangles[i][0], rectangles[i][1]));
        }
        int count = 0;
        for (int i = 0; i < rectangles.length; i++) {
            if (Math.min(rectangles[i][0], rectangles[i][1]) == max) {
                count++;
            }
        }
        return count;

=======

        int max = 0;
        int count = 0;
        for (int[] r : rectangles) {
            int min = Math.min(r[0], r[1]);
            if (min > max) {
                max = min;
                count = 1;
            } else if (min == max) {
                count++;
            }
        }
        return count;

=======

        int max = 0;
        int count = 0;
        for (int[] rect : rectangles) {
            int min = Math.min(rect[0], rect[1]);
            if (min > max) {
                max = min;
                count = 1;
            } else if (min == max) {
                count++;
            }
        }
        return count;

=======

        int maxLen = 0;
        int count = 0;
        for (int[] r : rectangles) {
            int min = Math.min(r[0], r[1]);
            if (min > maxLen) {
                maxLen = min;
                count = 1;
            } else if (min == maxLen) {
                count++;
            }
        }
        return count;

=======

        int maxLen = 0;
        int count = 0;
        for (int[] rectangle : rectangles) {
            int minLen = Math.min(rectangle[0], rectangle[1]);
            if (minLen > maxLen) {
                maxLen = minLen;
                count = 1;
            } else if (minLen == maxLen) {
                count++;
            }
        }
        return count;

=======

        int max = 0;
        int count = 0;
        for (int[] r : rectangles) {
            int s = Math.min(r[0], r[1]);
            if (s > max) {
                max = s;
                count = 1;
            } else if (s == max) {
                count++;
            }
        }
        return count;
