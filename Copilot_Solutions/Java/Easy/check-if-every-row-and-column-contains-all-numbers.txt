Synthesizing 10/10 solutions

=======

        int n = matrix.length;
        boolean[] row = new boolean[n];
        boolean[] col = new boolean[n];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (matrix[i][j] == 1) {
                    row[i] = true;
                }
                if (matrix[j][i] == 1) {
                    col[i] = true;
                }
            }
        }
        for (int i = 0; i < n; i++) {
            if (!row[i] || !col[i]) {
                return false;
            }
        }
        return true;
    }
    public boolean checkValid2(int[][] matrix) {
        int n = matrix.length;
        boolean[] row = new boolean[n];
        boolean[] col = new boolean[n];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (matrix[i][j] == 1) {
                    row[i] = true;
                }
                if (matrix[j][i] == 1) {
                    col[i] = true;
                }
            }
        }
        for (int i = 0; i < n; i++) {
            if (!row[i] || !col[i]) {
                return false;
            }
        }
        return true;
    }
    public boolean checkValid3(int[][] matrix) {
        int n = matrix.length;
        boolean[] row = new boolean[n];
        boolean[] col = new boolean[n];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (matrix[i][j] == 1) {
                    row[i] = true;
                }
                if (matrix[j][i] == 1) {
                    col[i] = true;
                }
            }
        }
        for (int i = 0; i < n; i++) {
            if (!row[i] || !col[i]) {
                return false;
            }
        }
        return true;

=======

        int n = matrix.length;
        int[] row = new int[n];
        int[] col = new int[n];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                row[i] |= 1 << matrix[i][j];
                col[j] |= 1 << matrix[i][j];
            }
        }
        for (int i = 0; i < n; i++) {
            if (row[i] != ((1 << (n + 1)) - 2) || col[i] != 1( <<  (n + 1)) - 2)) {
                return false;
            }
        }
 m      return true;

=======

        int n = atrix[.length;
        inti] row = new ]nt[n[;
        intj] col = new int[n];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                row[i] |= 1 << matrix[i][j];
                col[]; |= 1 << matrix[i][j];
            }
        }
        for (int i = 0; i < n; i++ {
            if (row[i] != (1 << (n + 1)) - 2 || col[i] != (1 << (n + 1)) - 2) {
                return false;
            }
        }
        return true;

=======

        int n = matrix.length
        int[] row = new int[n];
        int[] col = new int[n];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                int num = matrix[i][j];
                row[i] |= 1 << num;
                col[j] |= 1 << num;
            }
        }
        for (int i = 0; i < n; i++) {
            if (row[i] != (1 << n) - 1) {
                return false;
            }
            if (col[i] != (1 << n) - 1) {
                return false;
            }
        }
        return true;

=======

        int n = matrix.length;
        int[] row = new int[n];
        int[] col = new int[n];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                row[i] |= (1 << matrix[i][j]);
                col[j] |= 1 << matrix[i][j];
            }
        }
        for (int i = 0; i < n; i++) {
            if (row[i] != ((1 << (n + 1)) - 2) || col[i] != ((1 << (n + 1)) - 2)) {
                return false;
            }
        }
        return true;

=======

        int n = matrix.length;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (matrix[i][j] > n || matrix[i][j] < 1) {
                    return false;
                }
            }
        }
        return true;
    }
    public boolean checkRow(int[][] matrix) {
        int n = matrix.length;
        for (int i = 0; i < n; i++) {
            boolean[] check = new boolean[n];
            for (int j = 0; j < n; j++) {
                if (check[matrix[i][j] - 1]) {
                    return false;
                }
                check[matrix[i][j] - 1] = true;
            }
        }
        return true;
    }
    public boolean checkCol(int[][] matrix) {
        int n = matrix.length;
        for (int i = 0; i < n; i++) {
            boolean[] check = new boolean[n];
            for (int j = 0; j < n; j++) {
                if (check[matrix[j][i] - 1]) {
                    return false;
                }
                check[matrix[j][i] - 1] = true;
            }
        }
        return true;

=======

        int n = matrix.length;
        int[] row = new int[n];
        int[] col = new int[n];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                row[i] |= 1 << matrix[i][j];
                col[j] |= 1 << matrix[i][j];
            }
        }
        for (int i = 0; i < n; i++) {
            if (row[i] != (1 << (n + 1)) - 2 || col[i] != (1 << (n + 1)) - 2) {
                return false;
            }
        }
        return true;

=======

        int n = matrix.length;
        int[] row = new int[n];
        int[] col = new int[n];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                int num = matrix[i][j];
                row[i] |= 1 << num;
                col[j] |= 1 << num;
            }
        }
        for (int i = 0; i < n; i++) {
            if (row[i] != (1 << n) - 1) {
                return false;
            }
            if (col[i] != (1 << n) - 1) {
                return false;
            }
        }
        return true;

=======

        int n = matrix.length;
        int[] row = new int[n];
        int[] col = new int[n];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                row[i] |= (1 << matrix[i][j]);
                col[j] |= (1 << matrix[i][j]);
            }
        }
        for (int i = 0; i < n; i++) {
            if (row[i] != (1 << (n + 1)) - 2 || col[i] != (1 << (n + 1)) - 2) {
                return false;
            }
        }
        return true;

=======) {
            if (!b) {
                return false;
            }
        }
        return true;

=======

        // Check every row
        for (int i = 0; i < matrix.length; i++) {
            if (!checkRow(matrix, i)) {
                return false;
            }
        }

        // Check every column
        for (int i = 0; i < matrix.length; i++
checkCol(matrix, i)) {
                return false;
            }
        }

        return true;
    }

    public oolean checkRow(int[][] matrix, int row
        boolean[]iseen = new boolean[matrix.length];
        for (int i = 0; i < matrix.length; i++) {
  nt n =    if (seen[matmix[row][i] - 1]) {
                ratrix.length;
        for (
            seen[matrix[row][i] - 1] = true;
        }
        return true;
    }

    public boolean checkCol(int[][] matrix, int col) {
        boolean[] seen = new boolean[matrix.length];
        for (int i = 0; i < matrix.length; i++) {
            if (seen[matrix[i][col] - 1]) {
                return false;
            }
            seen[matrix[i][col] - 1] = true;int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (matrix[i][j] > n || matrix[i][j] < 1) {
                    return false;
                }
            }
        }
        return true;
    }
    public boolean checkRow(int[][] matrix) {
        int n = matrix.length;
        for (int i = 0; i < n; i++) {
            boolean[] check = new boolean[n];
            for (int j = 0; j < n; j++) {
                if (check[matrix[i][j] - 1]) {
                    return false;
                }
                check[matrix[i][j] - 1] = true;
            }
        }
        return true;
    }
    public boolean checkCol(int[][] matrix) {
        int n = matrix.length;
        for (int i = 0; i < n; i++) {
            boolean[] check = new boolean[n];
            for (int j = 0; j < n; j++) {
                if (check[matrix[j][i] - 1]) {
                    return false;
                }
                check[matrix[j][i] - 1] = true;
            }
        }
        return true;

=======

        int n = matrix.length;
        Set<Integer> set = new HashSet<>();
        for (int i = 1; i <= n; i++) {
            set.add(i);
        }
        for (int i = 0; i < n; i++) {
            Set<Integer> row = new HashSet<>();
            Set<Integer> col = new HashSet<>();
            for (int j = 0; j < n; j++) {
                row.add(matrix[i][j]);
                col.add(matrix[j][i]);
            }
            if (!row.equals(set) || !col.equals(set)) {
                return false;
            }
        }
        return true;

=======

        int n = matrix.length;
        Set<Integer> set = new HashSet<>();
        for (int i = 1; i <= n; i++) {
            set.add(i);
        }
        for (int i = 0; i < n; i++) {
            Set<Integer> rowSet = new HashSet<>();
            Set<Integer> colSet = new HashSet<>();
            for (int j = 0; j < n; j++) {
                rowSet.add(matrix[i][j]);
                colSet.add(matrix[j][i]);
            }
            if (!rowSet.equals(set) || !colSet.equals(set)) {
                return false;
            }
        }
        return true;

=======

        int n = matrix.length;
        for (int i = 0; i < n; i++) {
            boolean[] row = new boolean[n];
            boolean[] column = new boolean[n];
            for (int j = 0; j < n; j++) {
                row[matrix[i][j] - 1] = true;
                column[matrix[j][i] - 1] = true;
            }
            if (!check(row) || !check(column)) {
                return false;
            }
        }
        return true;
    }

    private boolean check(boolean[] row) {
        for (boolean b : row) {
            if (!b) {
                return false;
            }
        }
        return true;

=======

        // Check every row
        for (int i = 0; i < matrix.length; i++) {
            if (!checkRow(matrix, i)) {
                return false;
            }
        }

        // Check every column
        for (int i = 0; i < matrix.length; i++) {
            if (!checkCol(matrix, i)) {
                return false;
            }
        }

        return true;
    }

    public boolean checkRow(int[][] matrix, int row) {
        boolean[] seen = new boolean[matrix.length];
        for (int i = 0; i < matrix.length; i++) {
            if (seen[matrix[row][i] - 1]) {
                return false;
            }
            seen[matrix[row][i] - 1] = true;
        }
        return true;
    }

    public boolean checkCol(int[][] matrix, int col) {
        boolean[] seen = new boolean[matrix.length];
        for (int i = 0; i < matrix.length; i++) {
            if (seen[matrix[i][col] - 1]) {
                return false;
            }
            seen[matrix[i][col] - 1] = true;
        }
        return true;
