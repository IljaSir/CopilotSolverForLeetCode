Synthesizing 10/10 solutions

=======

        return edges[0][0] == edges[1][0] || edges[0][0] == edges[1][1] ? edges[0][0] : edges[0][1];

=======

        int a = edges[0][0];
        int b = edges[0][1];
        int c = edges[1][0];
        int d = edges[1][1];
        if (a == c || a == d) {
            return a;
        }
        return b;

=======

        int[] degree = new int[edges.length + 2];
        for (int[] edge : edges) {
            degree[edge[0]]++;
            degree[edge[1]]++;
        }
        for (int i = 1; i < degree.length; i++) {
            if (degree[i] == edges.length) {
                return i;
            }
        }
        return -1;

=======

        int[] count = new int[edges.length + 2];
        for (int[] e : edges) {
            count[e[0]]++;
            count[e[1]]++;
        }
        for (int i = 1; i < count.length; i++) {
            if (count[i] == edges.length) {
                return i;
            }
        }
        return -1;

=======

        int[] count = new int[edges.length+2];
        for (int[] edge : edges) {
            count[edge[0]]++;
            count[edge[1]]++;
        }
        for (int i = 1; i < count.length; i++) {
            if (count[i] == edges.length) {
                return i;
            }
        }
        return -1;

=======

        int n = edges.length;
        int[] degree = new int[n + 1];
        for (int[] edge : edges) {
            degree[edge[0]]++;
            degree[edge[1]]++;
        }
        for (int i = 1; i <= n; i++) {
            if (degree[i] == n) {
                return i;
            }
        }
        return 0;

=======

        int n = edges.length + 1;
        int[] degree = new int[n + 1];
        for (int i = 0; i < edges.length; i++) {
            degree[edges[i][0]] += 1;
            degree[edges[i][1]] += 1;
        }
        for (int i = 1; i <= n; i++) {
            if (degree[i] == n - 1) {
                return i;
            }
        }
        return -1;

=======

        int[] cnt = new int[edges.length + 2];
        for (int[] e: edges) {
            cnt[e[0]]++;
            cnt[e[1]]++;
        }
        for (int i = 1; i < cnt.length; i++) {
            if (cnt[i] == edges.length) return i;
        }
        return -1;

=======

        int n = edges.length;
        int[] degrees = new int[n+2];
        for (int[] edge: edges) {
            degrees[edge[0]]++;
            degrees[edge[1]]++;
        }
        for (int i = 0; i < degrees.length; i++) {
            if (degrees[i] == n) {
                return i;
            }
        }
        return -1;

=======

        int n = edges.length;
        int[] count = new int[n+1];
        for(int i=0; i<n; i++){
            count[edges[i][0]]++;
            count[edges[i][1]]++;
        }
        for(int i=1; i<=n; i++){
            if(count[i]==n) return i;
        }
        return -1;
