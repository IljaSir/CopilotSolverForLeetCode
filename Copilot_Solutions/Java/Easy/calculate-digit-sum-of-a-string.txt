Synthesizing 10/10 solutions (Duplicates hidden)

=======

        while (s.length() > k) {
            StringBuilder sb = new StringBuilder();
            for (int i = 0; i < s.length(); i += k) {
                int sum = 0;
                for (int j = i; j < i + k && j < s.length(); j++) {
                    sum += s.charAt(j) - '0';
                }
                sb.append(sum);
            }
            s = sb.toString();
        }
        return s;

=======

        while (s.length() > k) {
            StringBuilder sb = new StringBuilder();
            for (int i = 0; i < s.length(); i += k) {
                int end = Math.min(i + k, s.length());
                int sum = 0;
                for (int j = i; j < end; j++) {
                    sum += s.charAt(j) - '0';
                }
                sb.append(sum);
            }
            s = sb.toString();
        }
        return s;
    }
}

=======

        if (s.length() <= k) {
            return s;
        }
        int sum = 0;
        for (int i = 0; i < s.length(); i++) {
            sum += s.charAt(i) - '0';
        }
        return digitSum(String.valueOf(sum), k);

=======

        while (s.length() > k) {
            int i = 0;
            StringBuilder sb = new StringBuilder();
            while (i < s.length()) {
                int sum = 0;
                for (int j = 0; j < k; j++) {
                    if (i >= s.length()) {
                        break;
                    }
                    sum += s.charAt(i) - '0';
                    i++;
                }
                sb.append(sum);
            }
            s = sb.toString();
        }
        return s;

=======

        int n = s.length();
        if (n == 1) {
            return s;
        }
        if (n <= k) {
            int sum = 0;
            for (int i = 0; i < n; i++) {
                sum += s.charAt(i) - '0';
            }
            return Integer.toString(sum);
        }
        StringBuilder sb = new StringBuilder();
        int i = 0;
        while (i < n) {
            int j = i + k;
            int sum = 0;
            while (i < j && i < n) {
                sum += s.charAt(i) - '0';
                i++;
            }
            sb.append(Integer.toString(sum));
        }
        return digitSum(sb.toString(), k);
    }
    public String truncate(String s, int k) {
        int n = s.length();
        if (n <= k) {
            return s;
        }
        return s.substring(0, k);
    }
    public String truncateAndSum(String s, int k) {
        int n = s.length();
        if (n <= k) {
            return s;
        }
        int sum = 0;
        for (int i = 0; i < k; i++) {
            sum += s.charAt(i) - '0';
        }
        return Integer.toString(sum);
    }
    public String truncateAndSum2(String s, int k) {
        int n = s.length();
        if (n <= k) {
            return s;
        }
        int sum = 0;
        for (int i = n - k; i < n; i++) {
            sum += s.charAt(i) - '0';
        }
        return Integer.toString(sum);
    }
    public String truncateAndSum3(String s, int k) {
        int n = s.length();
        if (n <= k) {
            return s;
        }
        int sum = 0;
        for (int i = 0; i < n - k; i++) {
            sum += s.charAt(i) - '0';
        }
        return Integer.toString(sum);
    }
    public String truncateAndSum4(String s, int k) {
        int n = s.length();
        if (n <= k) {
            return s;
        }
        int sum = 0;
        for (int i = 0; i < n; i++) {

=======

        int n = s.length();
        String res = s;
        while (res.length() > k) {
            StringBuilder sb = new StringBuilder();
            for (int i = 0; i < res.length(); i += k) {
                int sum = 0;
                for (int j = i; j < i + k && j < res.length(); j++) {
                    sum += res.charAt(j) - '0';
                }
                sb.append(sum);
            }
            res = sb.toString();
        }
        return res;

=======

        int n = s.length();
        int[] dp = new int[n];
        int sum = 0;
        for (int i = 0; i < n; i++) {
            sum += s.charAt(i) - '0';
            dp[i] = sum % 9 == 0 ? 9 : (sum % 9);
            if (i >= k)
                sum -= s.charAt(i - k) - '0';
        }
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < n; i++) {
            sb.append(dp[i]);
            if (sb.length() == k)
                break;
        }
        return sb.toString();

=======

        if (s.length() <= k) {
            return s;
        }
        int i = 0;
        int j = k;
        int sum = 0;
        StringBuilder sb = new StringBuilder();
        while (j <= s.length()) {
            //System.out.println("i: " + i + " j: " + j);
            for (int m = i; m < j; m++) {
                sum += Character.getNumericValue(s.charAt(m));
            }
            sb.append(sum);
            i = j;
            j += k;
            sum = 0;
        }
        if (i < s.length()) {
            for (int m = i; m < s.length(); m++) {
                sum += Character.getNumericValue(s.charAt(m));
            }
            sb.append(sum);
        }
        //System.out.println(sb.toString());
        return digitSum(sb.toString(), k);
    }
    public String removeKdigits(String num, int k) {
        if (k == num.length()) {
            return "0";
        }
        String result = digitSum(num, k);
        int i = 0;
        while (i < result.length() && result.charAt(i) == '0') {
            i++;
        }
        if (i == result.length()) {
            return "0";
        }
        return result.substring(i);

=======

        while (s.length() > k) {
            int i = 0;
            int j = k;
            String temp = "";
            while (j <= s.length()) {
                int sum = 0;
                for (int m = i; m < j; m++) {
                    sum += Character.getNumericValue(s.charAt(m));
                }
                temp += String.valueOf(sum);
                i += k;
                j += k;
            }
            if (s.length() % k != 0) {
                int sum = 0;
                for (int m = i; m < s.length(); m++) {
                    sum += Character.getNumericValue(s.charAt(m));
                }
                temp += String.valueOf(sum);
            }
            s = temp;
        }
        return s;
