Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int i = 0;
        int j = 0;
        while (i < nums1.length && j < nums2.length) {
            if (nums1[i] == nums2[j]) {
                return nums1[i];
            } else if (nums1[i] < nums2[j]) {
                i++;
            } else {
                j++;
            }
        }
        return -1;

=======

        int i = 0, j = 0;
        while (i < nums1.length && j < nums2.length) {
            if (nums1[i] == nums2[j]) {
                return nums1[i];
            } else if (nums1[i] < nums2[j]) {
                i++;
            } else {
                j++;
            }
        }
        return -1;

=======

        int i = 0, j = 0;
        while (i < nums1.length && j < nums2.length) {
            if (nums1[i] == nums2[j]) {
                return nums1[i];
            }
            if (nums1[i] < nums2[j]) {
                i++;
            } else {
                j++;
            }
        }
        return -1;
    }
    public int[] smallestCommonElement(int[][] mat) {
        int[] res = new int[mat.length];
        for (int i = 0; i < mat.length; i++) {
            res[i] = getCommon(mat[0], mat[i]);
        }
        return res;

=======

        int i = 0;
        int j = 0;
        while (i < nums1.length && j < nums2.length) {
            if (nums1[i] < nums2[j]) {
                i++;
            } else if (nums1[i] > nums2[j]) {
                j++;
            } else {
                return nums1[i];
            }
        }
        return -1;

=======

        int i = 0, j = 0;
        while(i < nums1.length && j < nums2.length) {
            if(nums1[i] == nums2[j]) {
                return nums1[i];
            }
            if(nums1[i] < nums2[j]) {
                i++;
            } else {
                j++;
            }
        }
        return -1;

=======

        int i = 0, j = 0;
        while(i < nums1.length && j < nums2.length) {
            if(nums1[i] == nums2[j]) return nums1[i];
            else if(nums1[i] < nums2[j]) i++;
            else j++;
        }
        return -1;

=======

        int i = 0, j = 0;
        int min = -1;
        while(i < nums1.length && j < nums2.length) {
            if(nums1[i] == nums2[j]) {
                if(min == -1) {
                    min = nums1[i];
                } else {
                    min = Math.min(min, nums1[i]);
                }
                i++;
                j++;
            } else if(nums1[i] < nums2[j]) {
                i++;
            } else {
                j++;
            }
        }
        return min;
