Synthesizing 10/10 solutions

=======

        int[] last = new int[26];
        Arrays.fill(last, -1);
        for (int i = 0; i < s.length(); i++) {
            int c = s.charAt(i) - 'a';
            if (last[c] >= 0 && i - last[c] != distance[c]) {
                return false;
            }
            last[c] = i;
        }
        return true;

=======

        int[] last = new int[26];
        for (int i = 0; i < s.length(); i++) {
            int c = s.charAt(i) - 'a';
            if (i - last[c] < distance[c]) {
                return false;
            }
            last[c] = i;
        }
        return true;

=======

        int[] last = new int[26];
        for (int i = 0; i < s.length(); ++i) {
            int c = s.charAt(i) - 'a';
            if (i - last[c] < distance[c]) return false;
            last[c] = i;
        }
        return true;

=======

        int[] arr = new int[26];
        for (int i = 0; i < s.length(); i++) {
            arr[s.charAt(i) - 'a']++;
        }
        for (int i = 0; i < arr.length; i++) {
            if (arr[i] == 2) {
                int first = s.indexOf((char) ('a' + i));
                int second = s.indexOf((char) ('a' + i), first + 1);
                if (second - first - 1 != distance[i]) {
                    return false;
                }
            }
        }
        return true;

=======

        int[] last = new int[26];
        for (int i = 0; i < s.length(); i++) {
            int c = s.charAt(i) - 'a';
            if (last[c] != 0 && i - last[c] != distance[c]) {
                return false;
            }
            last[c] = i;
        }
        return true;

=======

        int[] last = new int[26];
        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            if (i - last[c - 'a'] < distance[c - 'a']) {
                return false;
            }
            last[c - 'a'] = i;
        }
        return true;

=======

        int n = s.length();
        int[] last = new int[26];
        for (int i = 0; i < n; i++) {
            int c = s.charAt(i) - 'a';
            if (i - last[c] < distance[c]) {
                return false;
            }
            last[c] = i;
        }
        return true;

=======

        int[] last = new int[26];
        for (int i = 0; i < 26; i++) {
            last[i] = -1;
        }
        int n = s.length();
        for (int i = 0; i < n; i++) {
            int c = s.charAt(i) - 'a';
            if (last[c] != -1 && i - last[c] - 1 != distance[c]) {
                return false;
            }
            last[c] = i;
        }
        return true;

=======

        int n = s.length();
        int[] lastSeen = new int[26];
        Arrays.fill(lastSeen, -1);
        for (int i = 0; i < n; i++) {
            int idx = s.charAt(i) - 'a';
            if (lastSeen[idx] != -1 && distance[idx] != i - lastSeen[idx] - 1) {
                return false;
            }
            lastSeen[idx] = i;
        }
        return true;

=======

        int n = s.length();
        int[] count = new int[26];
        int[] first = new int[26];
        int[] last = new int[26];
        for (int i = 0; i < n; i++) {
            int index = s.charAt(i) - 'a';
            count[index]++;
            if (count[index] == 1) {
                first[index] = i;
            } else {
                last[index] = i;
            }
        }
        for (int i = 0; i < 26; i++) {
            if (count[i] == 0) {
                continue;
            }
            if (last[i] - first[i] != distance[i]) {
                return false;
            }
        }
        return true;
