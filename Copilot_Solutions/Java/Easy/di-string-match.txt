Synthesizing 10/10 solutions

=======

        int[] result = new int[s.length() + 1];
        int low = 0;
        int high = s.length();
        for (int i = 0; i < s.length(); i++) {
            if (s.charAt(i) == 'I') {
                result[i] = low++;
            } else {
                result[i] = high--;
            }
        }
        result[s.length()] = low;
        return result;

=======

        int[] result = new int[s.length() + 1];
        int left = 0;
        int right = s.length();
        for (int i = 0; i < s.length(); i++) {
            if (s.charAt(i) == 'I') {
                result[i] = left;
                left++;
            } else {
                result[i] = right;
                right--;
            }
        }
        result[s.length()] = left;
        return result;

=======

        int[] res = new int[s.length() + 1];
        int low = 0;
        int high = s.length();
        for (int i = 0; i < s.length(); i++) {
            if (s.charAt(i) == 'I') {
                res[i] = low++;
            } else {
                res[i] = high--;
            }
        }
        res[s.length()] = low;
        return res;

=======

        int n = s.length();
        int[] ans = new int[n + 1];
        int left = 0, right = n;
        for (int i = 0; i < n; i++) {
            if (s.charAt(i) == 'I') {
                ans[i] = left++;
            } else {
                ans[i] = right--;
            }
        }
        ans[n] = left;
        return ans;

=======

        int n = s.length();
        int[] res = new int[n+1];
        int lo = 0;
        int hi = n;
        for (int i = 0; i < n; i++) {
            if (s.charAt(i) == 'I') {
                res[i] = lo++;
            } else {
                res[i] = hi--;
            }
        }
        res[n] = lo;
        return res;

=======

        int n = s.length();
        int[] res = new int[n + 1];
        int l = 0, r = n;
        for (int i = 0; i < n; i++) {
            res[i] = s.charAt(i) == 'I' ? l++ : r--;
        }
        res[n] = l;
        return res;

=======

        int n = s.length();
        int[] ans = new int[n+1];
        int lo = 0;
        int hi = n;
        for (int i = 0; i < n; i++) {
            if (s.charAt(i) == 'I') {
                ans[i] = lo++;
            } else {
                ans[i] = hi--;
            }
        }
        ans[n] = lo;
        return ans;

=======

        int n = s.length();
        int[] ans = new int[n+1];
        int low = 0, high = n;
        for (int i = 0; i < n; i++) {
            if (s.charAt(i) == 'I') {
                ans[i] = low++;
            } else {
                ans[i] = high--;
            }
        }
        ans[n] = low;
        return ans;

=======

        int[] res = new int[s.length()+1];
        int min = 0;
        int max = s.length();
        for(int i = 0; i < s.length(); i++){
            if(s.charAt(i) == 'I'){
                res[i] = min;
                min++;
            }else{
                res[i] = max;
                max--;
            }
        }
        res[s.length()] = min;
        return res;

=======

        int n = s.length();
        int[] result = new int[n+1];
        int low = 0;
        int high = n;
        for(int i = 0; i < n; i++){
            if(s.charAt(i) == 'I'){
                result[i] = low;
                low++;
            }else{
                result[i] = high;
                high--;
            }
        }
        result[n] = low;
        return result;
