Synthesizing 10/10 solutions

=======

        Integer[] a = new Integer[arr.length];
        for (int i = 0; i < arr.length; i++) {
            a[i] = arr[i];
        }
        Arrays.sort(a, new Comparator<Integer>() {
            @Override
            public int compare(Integer o1, Integer o2) {
                int c = Integer.bitCount(o1) - Integer.bitCount(o2);
                if (c != 0) {
                    return c;
                }
                return o1 - o2;
            }
        });
        for (int i = 0; i < arr.length; i++) {
            arr[i] = a[i];
        }
        return arr;

=======

        Integer[] arr1 = new Integer[arr.length];
        for (int i = 0; i < arr.length; i++) {
            arr1[i] = arr[i];
        }
        Arrays.sort(arr1, (a, b) -> {
            int c1 = Integer.bitCount(a);
            int c2 = Integer.bitCount(b);
            if (c1 != c2) {
                return c1 - c2;
            } else {
                return a - b;
            }
        });
        int[] res = new int[arr.length];
        for (int i = 0; i < arr.length; i++) {
            res[i] = arr1[i];
        }
        return res;

=======

        int[] bits = new int[10001];
        for (int i = 1; i <= 10000; i++) {
            bits[i] = bits[i >> 1] + (i & 1);
        }
        Integer[] indices = new Integer[arr.length];
        for (int i = 0; i < arr.length; i++) {
            indices[i] = i;
        }
        Arrays.sort(indices, (i1, i2) -> {
            if (bits[arr[i1]] != bits[arr[i2]]) {
                return bits[arr[i1]] - bits[arr[i2]];
            } else {
                return arr[i1] - arr[i2];
            }
        });
        int[] ans = new int[arr.length];
        for (int i = 0; i < arr.length; i++) {
            ans[i] = arr[indices[i]];
        }
        return ans;

=======

        int[] bits = new int[arr.length];
        for (int i = 0; i < arr.length; i++) {
            bits[i] = Integer.bitCount(arr[i]);
        }
        for (int i = 0; i < arr.length; i++) {
            for (int j = i + 1; j < arr.length; j++) {
                if (bits[i] > bits[j]) {
                    int temp = arr[i];
                    arr[i] = arr[j];
                    arr[j] = temp;
                    temp = bits[i];
                    bits[i] = bits[j];
                    bits[j] = temp;
                } else if (bits[i] == bits[j]) {
                    if (arr[i] > arr[j]) {
                        int temp = arr[i];
                        arr[i] = arr[j];
                        arr[j] = temp;
                        temp = bits[i];
                        bits[i] = bits[j];
                        bits[j] = temp;
                    }
                }
            }
        }
        return arr;

=======

        int[] bits = new int[10001];
        for (int i = 0; i < 10001; i++) {
            bits[i] = countBits(i);
        }
        Arrays.sort(arr);
        Arrays.sort(arr, (a, b) -> bits[a] - bits[b]);
        return arr;
    }

    private int countBits(int x) {
        int count = 0;
        while (x > 0) {
            if ((x & 1) == 1) {
                count++;
            }
            x >>= 1;
        }
        return count;

=======

        int[] bits = new int[10001];
        for (int i = 0; i < 10001; i++) {
            bits[i] = Integer.bitCount(i);
        }
        Integer[] sorted = new Integer[arr.length];
        for (int i = 0; i < arr.length; i++) {
            sorted[i] = arr[i];
        }
        Arrays.sort(sorted, (a, b) -> {
            if (bits[a] == bits[b]) {
                return a - b;
            }
            return bits[a] - bits[b];
        });
        for (int i = 0; i < arr.length; i++) {
            arr[i] = sorted[i];
        }
        return arr;

=======

        int[] result = new int[arr.length];
        int[] bits = new int[10001];
        for (int i = 0; i < arr.length; i++) {
            bits[arr[i]] = getBits(arr[i]);
        }
        List<Integer> list = new ArrayList<>();
        for (int i = 0; i < bits.length; i++) {
            if (bits[i] != 0) {
                list.add(i);
            }
        }
        Collections.sort(list, new Comparator<Integer>() {
            @Override
            public int compare(Integer o1, Integer o2) {
                if (bits[o1] != bits[o2]) {
                    return bits[o1] - bits[o2];
                } else {
                    return o1 - o2;
                }
            }
        });
        for (int i = 0; i < list.size(); i++) {
            result[i] = list.get(i);
        }
        return result;
    }

    private int getBits(int n) {
        int count = 0;
        while (n != 0) {
            n = n & (n - 1);
            count++;
        }
        return count;

=======

        int[] bits = new int[10001];
        for (int i = 0; i < 10001; i++) {
            bits[i] = countBits(i);
        }
        
        Arrays.sort(arr);
        Arrays.sort(arr, (a, b) -> bits[a] - bits[b]);
        return arr;
    }
    
    private int countBits(int n) {
        int count = 0;
        while (n > 0) {
            count += n & 1;
            n >>= 1;
        }
        return count;

=======

        int n = arr.length;
        int[] res = new int[n];
        int[] count = new int[10001];
        for(int i = 0; i < n; i++) {
            count[arr[i]] = countOne(arr[i]);
        }
        Arrays.sort(arr);
        for(int i = 0; i < n; i++) {
            res[i] = arr[i];
        }
        Arrays.sort(res, new Comparator<Integer>() {
            @Override
            public int compare(Integer a, Integer b) {
                return count[a] - count[b];
            }
        });
        return res;
    }
    private int countOne(int n) {
        int count = 0;
        while(n != 0) {
            n &= n - 1;
            count++;
        }
        return count;

=======

        int[] sorted = new int[arr.length];
        int[] count = new int[10001];
        for (int i = 0; i < arr.length; i++) {
            int n = arr[i];
            int c = 0;
            while (n > 0) {
                if (n % 2 == 1) {
                    c++;
                }
                n = n / 2;
            }
            count[arr[i]] = c;
        }
        for (int i = 0; i < arr.length; i++) {
            int min = 10001;
            for (int j = 0; j < arr.length; j++) {
                if (count[arr[j]] < min) {
                    min = count[arr[j]];
                }
            }
            for (int j = 0; j < arr.length; j++) {
                if (count[arr[j]] == min) {
                    sorted[i] = arr[j];
                    count[arr[j]] = 10001;
                    break;
                }
            }
        }
        return sorted;
