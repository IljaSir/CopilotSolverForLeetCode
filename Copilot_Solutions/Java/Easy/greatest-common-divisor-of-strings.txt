Synthesizing 10/10 solutions (Duplicates hidden)

=======

        if (str1.length() < str2.length()) {
            return gcdOfStrings(str2, str1);
        }
        if (str2.length() == 0) {
            return str1;
        }
        if (str1.startsWith(str2)) {
            return gcdOfStrings(str1.substring(str2.length()), str2);
        }
        return "";

=======

        if (str1.length() < str2.length()) {
            return gcdOfStrings(str2, str1);
        }
        if (str2.length() == 0) {
            return str1;
        }
        if (!str1.startsWith(str2)) {
            return "";
        }
        return gcdOfStrings(str1.substring(str2.length()), str2);

=======

        if (str1.length() < str2.length()) {
            return gcdOfStrings(str2, str1);
        }
        if (str2.isEmpty()) {
            return str1;
        }
        if (!str1.startsWith(str2)) {
            return "";
        }
        return gcdOfStrings(str1.substring(str2.length()), str2);

=======

        if (str1.length() < str2.length()) {
            return gcdOfStrings(str2, str1);
        }
        if (str2.isEmpty()) {
            return str1;
        }
        if (str1.startsWith(str2)) {
            return gcdOfStrings(str1.substring(str2.length()), str2);
        }
        return "";

=======

        int len1 = str1.length();
        int len2 = str2.length();
        int len = Math.min(len1, len2);
        for (int i = len; i > 0; i--) {
            if (len1 % i == 0 && len2 % i == 0) {
                String s = str1.substring(0, i);
                if (str1.replaceAll(s, "").equals("") && str2.replaceAll(s, "").equals("")) {
                    return s;
                }
            }
        }
        return "";

=======

        int gcd = gcd(str1.length(), str2.length());
        String str = str1.substring(0, gcd);
        if (check(str1, str) && check(str2, str)) {
            return str;
        }
        return "";
    }

    private int gcd(int a, int b) {
        if (b == 0) {
            return a;
        }
        return gcd(b, a % b);
    }

    private boolean check(String str1, String str2) {
        int m = str1.length();
        int n = str2.length();
        if (m % n != 0) {
            return false;
        }
        for (int i = 0; i < m; i++) {
            if (str1.charAt(i) != str2.charAt(i % n)) {
                return false;
            }
        }
        return true;

=======

        String s = str1.length() > str2.length() ? str1 : str2;
        String t = str1.length() > str2.length() ? str2 : str1;
        int sLen = s.length();
        int tLen = t.length();
        if(!s.startsWith(t)) return "";
        if(tLen == 0) return s;
        if(sLen % tLen != 0) return "";
        String x = s.substring(0, tLen);
        for(int i = tLen; i < sLen; i += tLen) {
            if(!s.substring(i, i + tLen).equals(x)) return "";
        }
        return x;

=======

        int gcd = gcd(str1.length(), str2.length());
        String candidate = str1.substring(0, gcd);
        if (!str1.replace(candidate, "").equals("") || !str2.replace(candidate, "").equals("")) {
            return "";
        }
        return candidate;
    }
    public int gcd(int a, int b) {
        if (b == 0) {
            return a;
        }
        return gcd(b, a % b);

=======

        String s = str1.length() > str2.length() ? str1 : str2;
        String t = str1.length() > str2.length() ? str2 : str1;

        int i = 0;
        while (i < t.length() && s.charAt(i) == t.charAt(i)) {
            i++;
        }

        if (i == 0) {
            return "";
        }

        String d = t.substring(0, i);
        for (int j = 0; j < s.length(); j += d.length()) {
            if (!s.substring(j, j + d.length()).equals(d)) {
                return "";
            }
        }

        return d;
