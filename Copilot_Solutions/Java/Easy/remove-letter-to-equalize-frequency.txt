Synthesizing 10/10 solutions

=======

        int[] freq = new int[26];
        for (int i = 0; i < word.length(); i++) {
            freq[word.charAt(i) - 'a']++;
        }
        int[] count = new int[word.length() + 1];
        for (int f : freq) {
            if (f > 0) {
                count[f]++;
            }
        }
        int n = word.length();
        if (count[1] == n) {
            return true;
        }
        if (count[1] == 1) {
            return count[n] == 1;
        }
        if (count[n] == 1) {
            return count[1] == 1;
        }
        return false;

=======

        int[] count = new int[26];
        for (char c : word.toCharArray()) {
            count[c - 'a']++;
        }
        int[] freq = new int[word.length() + 1];
        for (int i = 0; i < 26; i++) {
            if (count[i] > 0) {
                freq[count[i]]++;
            }
        }
        int odd = 0;
        for (int i = 0; i <= word.length(); i++) {
            if (freq[i] % 2 == 1) {
                odd++;
            }
        }
        return odd <= 1;

=======

        int[] count = new int[26];
        for (char c : word.toCharArray()) {
            count[c - 'a']++;
        }
        int[] freq = new int[word.length() + 1];
        for (int c : count) {
            if (c > 0) {
                freq[c]++;
            }
        }
        int odd = 0;
        for (int f : freq) {
            if (f % 2 == 1) {
                odd++;
            }
        }
        return odd <= 1;

=======

        int[] count = new int[26];
        int[] freq = new int[word.length() + 1];
        for (int i = 0; i < word.length(); i++) {
            char c = word.charAt(i);
            freq[count[c - 'a']]--;
            count[c - 'a']++;
            freq[count[c - 'a']]++;
        }
        int odd = 0;
        for (int i = 0; i < freq.length; i++) {
            if (freq[i] == 1) {
                odd++;
            }
        }
        if (odd > 1) {
            return false;
        }
        if (odd == 0) {
            return true;
        }
        for (int i = 0; i < count.length; i++) {
            if (count[i] == 1) {
                return true;
            }
        }
        return false;

=======

        int[] freq = new int[26];
        for (int i = 0; i < word.length(); i++) {
            freq[word.charAt(i) - 'a']++;
        }
        int[] freq2 = new int[26];
        for (int i = 0; i < 26; i++) {
            if (freq[i] > 0) {
                freq2[freq[i]]++;
            }
        }
        int count = 0;
        int index = 0;
        for (int i = 0; i < 26; i++) {
            if (freq2[i] > 0) {
                count++;
                index = i;
            }
        }
        if (count == 1 && index == 1) {
            return true;
        }
        if (count == 2) {
            for (int i = 0; i < 26; i++) {
                if (freq[i] == index) {
                    freq[i]--;
                }
            }
            for (int i = 0; i < 26; i++) {
                if (freq[i] > 0 && freq[i] != index - 1) {
                    return false;
                }
            }
            return true;
        }
        return false;

=======

        int[] freq = new int[26];
        for (char c : word.toCharArray()) {
            freq[c - 'a']++;
        }
        int min = Integer.MAX_VALUE;
        int max = Integer.MIN_VALUE;
        for (int i : freq) {
            if (i > 0) {
                min = Math.min(min, i);
                max = Math.max(max, i);
            }
        }
        if (min == max) return true;
        for (int i : freq) {
            if (i == max) {
                if (max - min == 1) return true;
                if (min == 1) return true;
            }
            if (i == min) {
                if (max - min == 1) return true;
            }
        }
        return false;

=======

        int[] freq = new int[26];
        for (char c : word.toCharArray()) {
            freq[c - 'a']++;
        }
        int[] freqFreq = new int[word.length() + 1];
        for (int f : freq) {
            if (f == 0) {
                continue;
            }
            freqFreq[f]++;
        }
        int count = 0;
        for (int f : freqFreq) {
            if (f > 0) {
                count++;
            }
        }
        if (count == 1) {
            return true;
        }
        if (count == 2) {
            if (freqFreq[1] == 1) {
                return true;
            }
            for (int i = 2; i < freqFreq.length; i++) {
                if (freqFreq[i] == 1 && freqFreq[i - 1] == 1) {
                    return true;
                }
            }
        }
        return false;

=======

        int[] cnt = new int[26];
        for (char c : word.toCharArray()) {
            cnt[c - 'a']++;
        }
        int[] freq = new int[word.length() + 1];
        for (int c : cnt) {
            if (c > 0) freq[c]++;
        }
        int odd = 0;
        for (int f : freq) {
            if (f % 2 == 1) odd++;
        }
        return odd <= 1;

=======

        int[] count = new int[26];
        for (char c : word.toCharArray())
            count[c - 'a']++;
        Arrays.sort(count);
        int i = 0;
        while (i < 26 && count[i] == 0)
            i++;
        int min = count[i];
        int max = count[25];
        if (min == max)
            return true;
        if (min == 1 && count[i + 1] == max)
            return true;
        return min == max - 1 && count[24] == max;

=======

        int[] freq = new int[26];
        for (char c : word.toCharArray()) {
            freq[c - 'a']++;
        }
        TreeMap<Integer, Integer> map = new TreeMap<>();
        for (int i = 0; i < 26; i++) {
            if (freq[i] > 0) {
                map.put(freq[i], map.getOrDefault(freq[i], 0) + 1);
            }
        }
        if (map.size() == 1) {
            return true;
        }
        if (map.size() == 2) {
            Map.Entry<Integer, Integer> first = map.firstEntry();
            Map.Entry<Integer, Integer> last = map.lastEntry();
            if (first.getValue() == 1 && first.getKey() == 1) {
                return true;
            }
            if (last.getValue() == 1 && last.getKey() - first.getKey() == 1) {
                return true;
            }
        }
        return false;
