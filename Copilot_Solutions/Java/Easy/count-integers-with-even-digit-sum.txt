Synthesizing 10/10 solutions

=======

        int count = 0;
        for (int i = 1; i <= num; i++) {
            if (digitSum(i) % 2 == 0) {
                count++;
            }
        }
        return count;
    }
    private int digitSum(int num) {
        int sum = 0;
        while (num > 0) {
            sum += num % 10;
            num /= 10;
        }
        return sum;

=======

        int count = 0;
        for (int i = 1; i <= num; i++) {
            if (sumOfDigits(i) % 2 == 0) {
                count++;
            }
        }
        return count;
    }
    private int sumOfDigits(int num) {
        int sum = 0;
        while (num > 0) {
            sum += num % 10;
            num /= 10;
        }
        return sum;
    }
}

=======

        int count = 0;
        for (int i = 1; i <= num; i++) {
            if (sum(i) % 2 == 0) {
                count++;
            }
        }
        return count;
    }
    public int sum(int num) {
        int sum = 0;
        while (num > 0) {
            sum += num % 10;
            num /= 10;
        }
        return sum;

=======

        int count = 0;
        for (int i = 1; i <= num; i++) {
            int sum = 0;
            int temp = i;
            while (temp > 0) {
                sum += temp % 10;
                temp /= 10;
            }
            if (sum % 2 == 0) {
                count++;
            }
        }
        return count;

=======

        int count = 0;
        for (int i = 1; i <= num; i++) {
            int sum = 0;
            int n = i;
            while (n != 0) {
                sum += n % 10;
                n /= 10;
            }
            if (sum % 2 == 0) {
                count++;
            }
        }
        return count;

=======

        int cnt = 0;
        for (int i = 1; i <= num; i++) {
            if (digitSum(i) % 2 == 0) {
                cnt++;
            }
        }
        return cnt;
    }
    
    public int digitSum(int num) {
        int sum = 0;
        while (num > 0) {
            sum += num % 10;
            num /= 10;
        }
        return sum;

=======

        int result = 0;
        for (int i = 1; i <= num; i++) {
            int sum = 0;
            int j = i;
            while (j > 0) {
                sum += j % 10;
                j /= 10;
            }
            if (sum % 2 == 0) {
                result++;
            }
        }
        return result;
    }
}

=======

        int count = 0;
        for (int i = 1; i <= num; i++) {
            if (i % 2 == 0) {
                count++;
            } else {
                int sum = 0;
                int n = i;
                while (n > 0) {
                    sum += n % 10;
                    n /= 10;
                }
                if (sum % 2 == 0) {
                    count++;
                }
            }
        }
        return count;

=======

        int count = 0;
        for (int i = 1; i <= num; i++) {
            if (i % 2 == 0) {
                count++;
            } else {
                int temp = i;
                int sum = 0;
                while (temp > 0) {
                    sum += temp % 10;
                    temp /= 10;
                }
                if (sum % 2 == 0) {
                    count++;
                }
            }
        }
        return count;

=======

        if (num < 10) {
            return num / 2;
        }
        int[] dp = new int[1001];
        dp[0] = 0;
        dp[1] = 1;
        dp[2] = 1;
        dp[3] = 2;
        dp[4] = 2;
        dp[5] = 3;
        dp[6] = 3;
        dp[7] = 4;
        dp[8] = 4;
        dp[9] = 5;
        for (int i = 10; i <= num; i++) {
            int sum = 0;
            int j = i;
            while (j > 0) {
                sum += j % 10;
                j /= 10;
            }
            if (sum % 2 == 0) {
                dp[i] = dp[i - 1] + 1;
            } else {
                dp[i] = dp[i - 1];
            }
        }
        return dp[num];
    }
    public int findNumbers(int[] nums) {
        int res = 0;
        for (int i = 0; i < nums.length; i++) {
            res += countEven(nums[i]);
        }
        return res;
