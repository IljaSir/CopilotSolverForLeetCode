Synthesizing 10/10 solutions

=======

        int sumA = 0;
        int sumB = 0;
        for (int i = 0; i < aliceSizes.length; i++) {
            sumA += aliceSizes[i];
        }
        for (int i = 0; i < bobSizes.length; i++) {
            sumB += bobSizes[i];
        }
        if (sumA > sumB) {
            int[] res = fairCandySwap(bobSizes, aliceSizes);
            return new int[]{res[1], res[0]};
        }
        int delta = (sumB - sumA) / 2;
        HashSet<Integer> set = new HashSet<>();
        for (int i = 0; i < bobSizes.length; i++) {
            set.add(bobSizes[i]);
        }
        for (int i = 0; i < aliceSizes.length; i++) {
            if (set.contains(aliceSizes[i] + delta)) {
                return new int[]{aliceSizes[i], aliceSizes[i] + delta};
            }
        }
        return null;

=======

        int sumA = 0;
        int sumB = 0;
        for (int i = 0; i < aliceSizes.length; i++) {
            sumA += aliceSizes[i];
        }
        for (int i = 0; i < bobSizes.length; i++) {
            sumB += bobSizes[i];
        }
        int[] res = new int[2];
        if (sumA > sumB) {
            int diff = (sumA - sumB) / 2;
            for (int i = 0; i < aliceSizes.length; i++) {
                for (int j = 0; j < bobSizes.length; j++) {
                    if (aliceSizes[i] - bobSizes[j] == diff) {
                        res[0] = aliceSizes[i];
                        res[1] = bobSizes[j];
                        break;
                    }
                }
            }
        } else {
            int diff = (sumB - sumA) / 2;
            for (int i = 0; i < bobSizes.length; i++) {
                for (int j = 0; j < aliceSizes.length; j++) {
                    if (bobSizes[i] - aliceSizes[j] == diff) {
                        res[0] = aliceSizes[j];
                        res[1] = bobSizes[i];
                        break;
                    }
                }
            }
        }
        return res;

=======

        int sumA = 0;
        int sumB = 0;
        for (int i = 0; i < aliceSizes.length; i++) {
            sumA += aliceSizes[i];
        }
        for (int i = 0; i < bobSizes.length; i++) {
            sumB += bobSizes[i];
        }
        int diff = (sumA - sumB) / 2;
        for (int i = 0; i < aliceSizes.length; i++) {
            for (int j = 0; j < bobSizes.length; j++) {
                if (aliceSizes[i] - bobSizes[j] == diff) {
                    return new int[]{aliceSizes[i], bobSizes[j]};
                }
            }
        }
        return new int[]{-1, -1};

=======

        int asum = 0;
        int bsum = 0;
        for (int i = 0; i < aliceSizes.length; i++) {
            asum += aliceSizes[i];
        }
        for (int i = 0; i < bobSizes.length; i++) {
            bsum += bobSizes[i];
        }
        int diff = (asum - bsum) / 2;
        for (int i = 0; i < aliceSizes.length; i++) {
            for (int j = 0; j < bobSizes.length; j++) {
                if (aliceSizes[i] - bobSizes[j] == diff) {
                    return new int[]{aliceSizes[i], bobSizes[j]};
                }
            }
        }
        return null;

=======

        int sumA = 0;
        int sumB = 0;
        for(int i = 0; i < aliceSizes.length; i++) {
            sumA += aliceSizes[i];
        }
        for(int i = 0; i < bobSizes.length; i++) {
            sumB += bobSizes[i];
        }
        int[] answer = new int[2];
        for(int i = 0; i < aliceSizes.length; i++) {
            for(int j = 0; j < bobSizes.length; j++) {
                if(sumA - aliceSizes[i] + bobSizes[j] == sumB - bobSizes[j] + aliceSizes[i]) {
                    answer[0] = aliceSizes[i];
                    answer[1] = bobSizes[j];
                    break;
                }
            }
        }
        return answer;

=======

        int[] result = new int[2];
        int sumA = 0;
        int sumB = 0;
        for (int i = 0; i < aliceSizes.length; i++) {
            sumA += aliceSizes[i];
        }
        for (int i = 0; i < bobSizes.length; i++) {
            sumB += bobSizes[i];
        }
        int diff = (sumB - sumA) / 2;
        for (int i = 0; i < aliceSizes.length; i++) {
            for (int j = 0; j < bobSizes.length; j++) {
                if (aliceSizes[i] - bobSizes[j] == diff) {
                    result[0] = aliceSizes[i];
                    result[1] = bobSizes[j];
                    return result;
                }
            }
        }
        return result;

=======

        int[] result = new int[2];
        int sumA = 0;
        int sumB = 0;
        for (int i = 0; i < aliceSizes.length; i++) {
            sumA += aliceSizes[i];
        }
        for (int i = 0; i < bobSizes.length; i++) {
            sumB += bobSizes[i];
        }
        int diff = sumA - sumB;
        if (diff % 2 != 0) {
            return result;
        }
        diff /= 2;
        for (int i = 0; i < aliceSizes.length; i++) {
            for (int j = 0; j < bobSizes.length; j++) {
                if (aliceSizes[i] - bobSizes[j] == diff) {
                    result[0] = aliceSizes[i];
                    result[1] = bobSizes[j];
                    return result;
                }
            }
        }
        return result;

=======

        int[] result = new int[2];
        int sumAlice = 0;
        int sumBob = 0;
        for (int i = 0; i < aliceSizes.length; i++) {
            sumAlice += aliceSizes[i];
        }
        for (int i = 0; i < bobSizes.length; i++) {
            sumBob += bobSizes[i];
        }
        int diff = (sumAlice - sumBob) / 2;
        for (int i = 0; i < aliceSizes.length; i++) {
            for (int j = 0; j < bobSizes.length; j++) {
                if (aliceSizes[i] - bobSizes[j] == diff) {
                    result[0] = aliceSizes[i];
                    result[1] = bobSizes[j];
                }
            }
        }
        return result;

=======

        int[] result = new int[2];
        int sa = 0;
        int sb = 0;
        for (int i = 0; i < aliceSizes.length; i++) {
            sa += aliceSizes[i];
        }
        for (int i = 0; i < bobSizes.length; i++) {
            sb += bobSizes[i];
        }
        int diff = (sb - sa) / 2;
        for (int i = 0; i < aliceSizes.length; i++) {
            for (int j = 0; j < bobSizes.length; j++) {
                if (bobSizes[j] - aliceSizes[i] == diff) {
                    result[0] = aliceSizes[i];
                    result[1] = bobSizes[j];
                    return result;
                }
            }
        }
        return result;

=======

        int[] ans = new int[2];
        int aliceSum = 0, bobSum = 0;
        for (int i = 0; i < aliceSizes.length; i++) {
            aliceSum += aliceSizes[i];
        }
        for (int i = 0; i < bobSizes.length; i++) {
            bobSum += bobSizes[i];
        }
        int diff = (bobSum - aliceSum) / 2;
        Set<Integer> set = new HashSet<>();
        for (int i = 0; i < aliceSizes.length; i++) {
            set.add(aliceSizes[i]);
        }
        for (int i = 0; i < bobSizes.length; i++) {
            if (set.contains(bobSizes[i] - diff)) {
                ans[0] = bobSizes[i] - diff;
                ans[1] = bobSizes[i];
                break;
            }
        }
        return ans;
