Synthesizing 10/10 solutions

=======

        int m = matrix.length, n = matrix[0].length;
        int[] rowMin = new int[m];
        int[] colMax = new int[n];
        Arrays.fill(rowMin, Integer.MAX_VALUE);
        Arrays.fill(colMax, Integer.MIN_VALUE);
        for(int i = 0; i < m; i++){
            for(int j = 0; j < n; j++){
                rowMin[i] = Math.min(rowMin[i], matrix[i][j]);
                colMax[j] = Math.max(colMax[j], matrix[i][j]);
            }
        }
        List<Integer> ans = new ArrayList<>();
        for(int i = 0; i < m; i++){
            for(int j = 0; j < n; j++){
                if(matrix[i][j] == rowMin[i] && matrix[i][j] == colMax[j]){
                    ans.add(matrix[i][j]);
                }
            }
        }
        return ans;

=======

        List<Integer> res = new ArrayList<>();
        int m = matrix.length;
        int n = matrix[0].length;
        for (int i = 0; i < m; i++) {
            int min = matrix[i][0];
            int col = 0;
            for (int j = 1; j < n; j++) {
                if (matrix[i][j] < min) {
                    min = matrix[i][j];
                    col = j;
                }
            }
            boolean isMax = true;
            for (int k = 0; k < m; k++) {
                if (matrix[k][col] > min) {
                    isMax = false;
                    break;
                }
            }
            if (isMax) {
                res.add(min);
            }
        }
        return res;

=======

        List<Integer> result = new ArrayList<>();
        int[] minRow = new int[matrix.length];
        int[] maxCol = new int[matrix[0].length];
        for (int i = 0; i < matrix.length; i++) {
            int min = matrix[i][0];
            for (int j = 1; j < matrix[i].length; j++) {
                min = Math.min(min, matrix[i][j]);
            }
            minRow[i] = min;
        }
        for (int i = 0; i < matrix[0].length; i++) {
            int max = matrix[0][i];
            for (int j = 1; j < matrix.length; j++) {
                max = Math.max(max, matrix[j][i]);
            }
            maxCol[i] = max;
        }
        for (int i = 0; i < minRow.length; i++) {
            for (int j = 0; j < maxCol.length; j++) {
                if (minRow[i] == maxCol[j]) {
                    result.add(minRow[i]);
                }
            }
        }
        return result;

=======

        int m = matrix.length;
        int n = matrix[0].length;
        int[] min = new int[m];
        int[] max = new int[n];
        for(int i = 0; i < m; i++){
            min[i] = 0;
            for(int j = 1; j < n; j++){
                if(matrix[i][j] < matrix[i][min[i]])
                    min[i] = j;
            }
        }
        for(int i = 0; i < n; i++){
            max[i] = 0;
            for(int j = 1; j < m; j++){
                if(matrix[j][i] > matrix[max[i]][i])
                    max[i] = j;
            }
        }
        List<Integer> result = new ArrayList<Integer>();
        for(int i = 0; i < m; i++){
            for(int j = 0; j < n; j++){
                if(min[i] == j && max[j] == i)
                    result.add(matrix[i][j]);
            }
        }
        return result;

=======

        List<Integer> res = new ArrayList<>();
        int m = matrix.length;
        int n = matrix[0].length;
        int[] rowMin = new int[m];
        int[] colMax = new int[n];
        for (int i = 0; i < m; i++) {
            rowMin[i] = matrix[i][0];
            for (int j = 1; j < n; j++) {
                rowMin[i] = Math.min(rowMin[i], matrix[i][j]);
            }
        }
        for (int i = 0; i < n; i++) {
            colMax[i] = matrix[0][i];
            for (int j = 1; j < m; j++) {
                colMax[i] = Math.max(colMax[i], matrix[j][i]);
            }
        }
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (rowMin[i] == colMax[j]) {
                    res.add(rowMin[i]);
                }
            }
        }
        return res;

=======

        List<Integer> result = new ArrayList<>();
        int m = matrix.length;
        int n = matrix[0].length;
        int[] minRow = new int[m];
        int[] maxCol = new int[n];
        for (int i = 0; i < m; i++) {
            minRow[i] = matrix[i][0];
            for (int j = 1; j < n; j++) {
                minRow[i] = Math.min(minRow[i], matrix[i][j]);
            }
        }
        for (int j = 0; j < n; j++) {
            maxCol[j] = matrix[0][j];
            for (int i = 1; i < m; i++) {
                maxCol[j] = Math.max(maxCol[j], matrix[i][j]);
            }
        }
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (minRow[i] == maxCol[j]) {
                    result.add(minRow[i]);
                }
            }
        }
        return result;

=======

        List<Integer> result = new ArrayList<>();
        int m = matrix.length;
        int n = matrix[0].length;
        int[] min = new int[m];
        int[] max = new int[n];
        for (int i = 0; i < m; i++) {
            min[i] = matrix[i][0];
            for (int j = 1; j < n; j++) {
                min[i] = Math.min(min[i], matrix[i][j]);
            }
        }
        for (int j = 0; j < n; j++) {
            max[j] = matrix[0][j];
            for (int i = 1; i < m; i++) {
                max[j] = Math.max(max[j], matrix[i][j]);
            }
        }
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (matrix[i][j] == min[i] && matrix[i][j] == max[j]) {
                    result.add(matrix[i][j]);
                }
            }
        }
        return result;

=======

        int m = matrix.length;
        int n = matrix[0].length;
        int[] rowMin = new int[m];
        int[] colMax = new int[n];
        for(int i=0; i<m; i++) {
            int min = Integer.MAX_VALUE;
            for(int j=0; j<n; j++) {
                min = Math.min(min, matrix[i][j]);
            }
            rowMin[i] = min;
        }
        for(int j=0; j<n; j++) {
            int max = Integer.MIN_VALUE;
            for(int i=0; i<m; i++) {
                max = Math.max(max, matrix[i][j]);
            }
            colMax[j] = max;
        }
        List<Integer> result = new ArrayList<>();
        for(int i=0; i<m; i++) {
            for(int j=0; j<n; j++) {
                if(matrix[i][j] == rowMin[i] && matrix[i][j] == colMax[j]) {
                    result.add(matrix[i][j]);
                }
            }
        }
        return result;

=======

        List<Integer> luckyNumbers = new ArrayList<>();
        int[] rowMin = new int[matrix.length];
        int[] colMax = new int[matrix[0].length];
        for (int i = 0; i < matrix.length; i++) {
            rowMin[i] = Integer.MAX_VALUE;
        }
        for (int i = 0; i < matrix[0].length; i++) {
            colMax[i] = Integer.MIN_VALUE;
        }
        for (int i = 0; i < matrix.length; i++) {
            for (int j = 0; j < matrix[0].length; j++) {
                rowMin[i] = Math.min(rowMin[i], matrix[i][j]);
                colMax[j] = Math.max(colMax[j], matrix[i][j]);
            }
        }
        for (int i = 0; i < matrix.length; i++) {
            for (int j = 0; j < matrix[0].length; j++) {
                if (matrix[i][j] == rowMin[i] && matrix[i][j] == colMax[j]) {
                    luckyNumbers.add(matrix[i][j]);
                }
            }
        }
        return luckyNumbers;

=======

        List<Integer> list = new ArrayList<>();
        int min = 0;
        int max = 0;
        for(int i = 0; i < matrix.length; i++){
            min = matrix[i][0];
            for(int j = 0; j < matrix[i].length; j++){
                if(matrix[i][j] < min){
                    min = matrix[i][j];
                }
            }
            for(int k = 0; k < matrix.length; k++){
                if(matrix[k][i] > max){
                    max = matrix[k][i];
                }
            }
            if(min == max){
                list.add(min);
            }
        }
        return list;
