Synthesizing 10/10 solutions

=======

        int even = 0;
        int odd = 0;
        for (int i = 0; i < 32; i++) {
            if (((n >> i) & 1) == 1) {
                if (i % 2 == 0) {
                    even++;
                } else {
                    odd++;
                }
            }
        }
        return new int[]{even, odd};

=======

        int even = 0;
        int odd = 0;
        int i = 0;
        while (n > 0) {
            if (i % 2 == 0) {
                if (n % 2 == 1) {
                    even++;
                }
            } else {
                if (n % 2 == 1) {
                    odd++;
                }
            }
            n = n / 2;
            i++;
        }
        return new int[]{even, odd};
    }
    
    public static void main(String[] args) {
        Solution solution = new Solution();
        int[] result = solution.evenOddBit(17);
        for (int i : result) {
            System.out.println(i);
        }

=======

        int even = 0;
        int odd = 0;
        for (int i = 0; i < 32; i++) {
            int bit = (n >> i) & 1;
            if (bit == 1) {
                if (i % 2 == 0) {
                    even++;
                } else {
                    odd++;
                }
            }
        }
        return new int[]{even, odd};

=======

        int even = 0;
        int odd = 0;
        int i = 0;
        while (n > 0) {
            if (i % 2 == 0 && (n & 1) == 1) {
                even++;
            }
            if (i % 2 == 1 && (n & 1) == 1) {
                odd++;
            }
            n >>= 1;
            i++;
        }
        return new int[] {even, odd};

=======

        int even = 0;
        int odd = 0;
        int i = 0;
        while (n > 0) {
            int bit = n & 1;
            if (bit == 1) {
                if (i % 2 == 0) {
                    even++;
                } else {
                    odd++;
                }
            }
            n = n >> 1;
            i++;
        }
        return new int[]{even, odd};

=======

        int even = 0;
        int odd = 0;
        int i = 0;
        while(n > 0) {
            if((n & 1) == 1) {
                if(i % 2 == 0) {
                    even++;
                } else {
                    odd++;
                }
            }
            n = n >> 1;
            i++;
        }
        return new int[] {even, odd};

=======

        int even = 0;
        int odd = 0;
        int i = 0;
        while (n > 0) {
            if (n % 2 != 0) {
                if (i % 2 == 0) {
                    even++;
                } else {
                    odd++;
                }
            }
            n = n / 2;
            i++;
        }
        return new int[] {even, odd};

=======

        String binary = Integer.toBinaryString(n);
        int even = 0;
        int odd = 0;
        for(int i = 0; i < binary.length(); i++){
            if(i % 2 == 0 && binary.charAt(i) == '1'){
                even++;
            }
            if(i % 2 == 1 && binary.charAt(i) == '1'){
                odd++;
            }
        }
        return new int[]{even, odd};

=======

        int even = 0, odd = 0;
        int i = 0;
        while (n > 0) {
            if (i % 2 == 0 && n % 2 == 1) even++;
            if (i % 2 == 1 && n % 2 == 1) odd++;
            n = n / 2;
            i++;
        }
        return new int[]{even, odd};

=======

        int even = 0, odd = 0;
        int i = 0;
        while(n > 0) {
            if((n & 1) == 1) {
                if((i & 1) == 0) {
                    even++;
                } else {
                    odd++;
                }
            }
            n = n >> 1;
            i++;
        }
        return new int[] {even, odd};
