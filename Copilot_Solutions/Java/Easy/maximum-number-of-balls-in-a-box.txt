Synthesizing 10/10 solutions

=======

        Map<Integer, Integer> map = new HashMap<>();
        for (int i = lowLimit; i <= highLimit; i++) {
            int sum = 0;
            int num = i;
            while (num > 0) {
                sum += num % 10;
                num /= 10;
            }
            map.put(sum, map.getOrDefault(sum, 0) + 1);
        }
        int max = 0;
        for (int count : map.values()) {
            max = Math.max(max, count);
        }
        return max;

=======

        int[] count = new int[46];
        for (int i = lowLimit; i <= highLimit; i++) {
            int sum = 0;
            int num = i;
            while (num > 0) {
                sum += num % 10;
                num /= 10;
            }
            count[sum]++;
        }
        int result = 0;
        for (int i = 0; i < count.length; i++) {
            if (count[i] > result) {
                result = count[i];
            }
        }
        return result;

=======

        int[] boxes = new int[46];
        for (int i = lowLimit; i <= highLimit; i++) {
            int sum = 0;
            int n = i;
            while (n > 0) {
                sum += n % 10;
                n /= 10;
            }
            boxes[sum]++;
        }
        int max = 0;
        for (int i = 0; i < 46; i++) {
            max = Math.max(max, boxes[i]);
        }
        return max;

=======

        int[] count = new int[46];
        for (int i = lowLimit; i <= highLimit; i++) {
            count[getSum(i)]++;
        }
        int max = 0;
        for (int i : count) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    private int getSum(int num) {
        int sum = 0;
        while (num > 0) {
            sum += num % 10;
            num /= 10;
        }
        return sum;

=======

        int[] counts = new int[46];
        for (int i = lowLimit; i <= highLimit; i++) {
            counts[sumOfDigits(i)]++;
        }
        int max = 0;
        for (int count : counts) {
            max = Math.max(max, count);
        }
        return max;
    }
    
    private int sumOfDigits(int n) {
        int sum = 0;
        while (n > 0) {
            sum += n % 10;
            n /= 10;
        }
        return sum;

=======

        int[] count = new int[46];
        for (int i = lowLimit; i <= highLimit; i++) {
            int sum = 0;
            int num = i;
            while (num != 0) {
                sum += num % 10;
                num /= 10;
            }
            count[sum]++;
        }
        int max = 0;
        for (int i = 0; i < count.length; i++) {
            max = Math.max(max, count[i]);
        }
        return max;

=======

        int[] boxes = new int[46];
        for (int i = lowLimit; i <= highLimit; i++) {
            int box = 0;
            int num = i;
            while (num > 0) {
                box += num % 10;
                num /= 10;
            }
            boxes[box]++;
        }
        int max = 0;
        for (int i = 0; i < boxes.length; i++) {
            if (boxes[i] > max) {
                max = boxes[i];
            }
        }
        return max;

=======

        int[] box = new int[46];
        for (int i = lowLimit; i <= highLimit; i++) {
            int sum = 0;
            int tmp = i;
            while (tmp > 0) {
                sum += tmp % 10;
                tmp /= 10;
            }
            box[sum]++;
        }
        int max = 0;
        for (int i = 1; i < box.length; i++) {
            max = Math.max(max, box[i]);
        }
        return max;

=======

        int[] counts = new int[46];
        for (int i = lowLimit; i <= highLimit; ++i) {
            int sum = 0;
            for (int j = i; j > 0; j /= 10) {
                sum += j % 10;
            }
            counts[sum]++;
        }
        int max = 0;
        for (int count : counts) {
            max = Math.max(max, count);
        }
        return max;

=======

        int[] counts = new int[46];
        int max = 0;
        for (int i = lowLimit; i <= highLimit; i++) {
            int sum = 0;
            int num = i;
            while (num > 0) {
                sum += num % 10;
                num /= 10;
            }
            counts[sum]++;
            max = Math.max(max, counts[sum]);
        }
        return max;
