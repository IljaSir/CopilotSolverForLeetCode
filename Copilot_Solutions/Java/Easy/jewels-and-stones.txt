Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int count = 0;
        for (int i = 0; i < stones.length(); i++) {
            if (jewels.indexOf(stones.charAt(i)) != -1) {
                count++;
            }
        }
        return count;

=======

        int count = 0;
        for (int i = 0; i < stones.length(); i++) {
            if (jewels.contains(String.valueOf(stones.charAt(i)))) {
                count++;
            }
        }
        return count;

=======

        Set<Character> set = new HashSet<>();
        for (char c : jewels.toCharArray()) {
            set.add(c);
        }
        int count = 0;
        for (char c : stones.toCharArray()) {
            if (set.contains(c)) {
                count++;
            }
        }
        return count;

=======

        int count = 0;
        for (char c : stones.toCharArray()) {
            if (jewels.indexOf(c) != -1) {
                count++;
            }
        }
        return count;

=======

        int ans = 0;
        for (int i = 0; i < stones.length(); i++) {
            if (jewels.indexOf(stones.charAt(i)) >= 0) {
                ans++;
            }
        }
        return ans;

=======

        int result = 0;
        for (char c : stones.toCharArray()) {
            if (jewels.indexOf(c) != -1) {
                result++;
            }
        }
        return result;

=======

        int count = 0;
        for (char c: jewels.toCharArray()) {
            for (char s: stones.toCharArray()) {
                if (c == s) {
                    count++;
                }
            }
        }
        return count;

=======

        int count = 0;
        HashSet<Character> jewelsSet = new HashSet<>();
        for (char jewel : jewels.toCharArray()) {
            jewelsSet.add(jewel);
        }
        for (char stone : stones.toCharArray()) {
            if (jewelsSet.contains(stone)) {
                count++;
            }
        }
        return count;
