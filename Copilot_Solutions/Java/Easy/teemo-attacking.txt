Synthesizing 10/10 solutions

=======

        int result = 0;
        for (int i = 0; i < timeSeries.length; i++) {
            if (i == timeSeries.length - 1) {
                result += duration;
            } else {
                result += Math.min(duration, timeSeries[i+1] - timeSeries[i]);
            }
        }
        return result;

=======

        int time = 0;
        for (int i = 0; i < timeSeries.length; i++) {
            if (i == timeSeries.length - 1) {
                time += duration;
            } else {
                time += Math.min(timeSeries[i + 1] - timeSeries[i], duration);
            }
        }
        return time;

=======

        int sum = 0;
        for (int i = 0; i < timeSeries.length; i++) {
            if (i == timeSeries.length - 1) {
                sum += duration;
            } else {
                sum += Math.min(timeSeries[i + 1] - timeSeries[i], duration);
            }
        }
        return sum;

=======

        int n = timeSeries.length;
        if (n == 0) return 0;
        int sum = 0;
        for (int i = 0; i < n - 1; i++) {
            sum += Math.min(duration, timeSeries[i + 1] - timeSeries[i]);
        }
        return sum + duration;

=======

        int ans = 0;
        int n = timeSeries.length;
        for (int i = 0; i < n; i++) {
            if (i == n - 1) {
                ans += duration;
            } else {
                ans += Math.min(duration, timeSeries[i + 1] - timeSeries[i]);
            }
        }
        return ans;

=======

        int res = 0;
        int n = timeSeries.length;
        if (n == 0) {
            return 0;
        }
        for (int i = 0; i < n - 1; i++) {
            res += Math.min(timeSeries[i + 1] - timeSeries[i], duration);
        }
        return res + duration;

=======

        int total = 0;
        for (int i = 0; i < timeSeries.length; i++) {
            int end = timeSeries[i] + duration - 1;
            if (i + 1 < timeSeries.length && end >= timeSeries[i + 1]) {
                total += timeSeries[i + 1] - timeSeries[i];
            } else {
                total += duration;
            }
        }
        return total;

=======

        int total = 0;
        for (int i = 0; i < timeSeries.length; i++) {
            int end = timeSeries[i] + duration;
            if (i < timeSeries.length - 1) {
                end = Math.min(end, timeSeries[i + 1]);
            }
            total += end - timeSeries[i];
        }
        return total;

=======

        int n = timeSeries.length;
        int res = 0;
        if (n == 0) {
            return 0;
        }
        for (int i = 0; i < n - 1; i++) {
            res += Math.min(timeSeries[i + 1] - timeSeries[i], duration);
        }
        return res + duration;

=======

        if(timeSeries.length == 0) return 0;
        int ans = 0;
        for(int i = 1; i < timeSeries.length; i++) {
            ans += Math.min(timeSeries[i] - timeSeries[i - 1], duration);
        }
        return ans + duration;
