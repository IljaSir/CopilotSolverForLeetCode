Synthesizing 10/10 solutions (Duplicates hidden)

=======

        Arrays.sort(arr);
        int len = arr.length;
        double sum = 0;
        for (int i = len / 20; i < len - len / 20; i++) {
            sum += arr[i];
        }
        return sum / (len - len / 10);

=======

        int n = arr.length;
        Arrays.sort(arr);
        int sum = 0;
        for (int i = n / 20; i < n - n / 20; i++) {
            sum += arr[i];
        }
        return (double) sum / (n - n / 10);

=======

        int n = arr.length;
        int k = n / 20;
        Arrays.sort(arr);
        double sum = 0;
        for (int i = k; i < n - k; i++) {
            sum += arr[i];
        }
        return sum / (n - 2 * k);

=======

        Arrays.sort(arr);
        int n = arr.length;
        int start = n / 20;
        int end = n - start;
        double sum = 0;
        for (int i = start; i < end; i++) {
            sum += arr[i];
        }
        return sum / (n - 2 * start);

=======

        Arrays.sort(arr);
        int n = arr.length;
        double sum = 0;
        int count = 0;
        for (int i = n / 20; i < n - n / 20; i++) {
            sum += arr[i];
            count++;
        }
        return sum / count;

=======

        Arrays.sort(arr);
        int n = arr.length;
        int removed = n / 20;
        double sum = 0;
        for (int i = removed; i < n - removed; i++) {
            sum += arr[i];
        }
        return sum / (n - 2 * removed);

=======

        Arrays.sort(arr);
        int n = arr.length;
        int toRemove = n / 20;
        double sum = 0;
        for (int i = toRemove; i < n - toRemove; i++) {
            sum += arr[i];
        }
        return sum / (n - 2 * toRemove);

=======

        Arrays.sort(arr);
        int n = arr.length;
        int start = (int) (n * 0.05);
        int end = n - start;
        double sum = 0;
        for (int i = start; i < end; i++) {
            sum += arr[i];
        }
        return sum / (end - start);
