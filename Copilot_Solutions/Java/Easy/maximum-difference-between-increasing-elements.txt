Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int min = nums[0];
        int maxDiff = -1;
        for (int i = 1; i < nums.length; i++) {
            if (nums[i] > min) {
                maxDiff = Math.max(maxDiff, nums[i] - min);
            } else {
                min = nums[i];
            }
        }
        return maxDiff;

=======

        int maxDiff = -1;
        int min = nums[0];
        for (int i = 1; i < nums.length; i++) {
            if (nums[i] > min) {
                maxDiff = Math.max(maxDiff, nums[i] - min);
            } else {
                min = nums[i];
            }
        }
        return maxDiff;

=======

        int maxDiff = -1;
        int min = nums[0];
        for (int i = 1; i < nums.length; i++) {
            if (nums[i] > min) {
                maxDiff = Math.max(maxDiff, nums[i] - min);
            }
            min = Math.min(min, nums[i]);
        }
        return maxDiff;

=======

        int max = -1;
        int min = nums[0];
        for(int i = 1; i < nums.length; i++) {
            if(nums[i] > min) {
                max = Math.max(max, nums[i] - min);
            }
            min = Math.min(min, nums[i]);
        }
        return max;

=======

        int min = Integer.MAX_VALUE;
        int max = -1;
        for (int i = 0; i < nums.length; i++) {
            for (int j = i + 1; j < nums.length; j++) {
                if (nums[i] < nums[j]) {
                    min = Math.min(min, nums[i]);
                    max = Math.max(max, nums[j]);
                }
            }
        }
        return max - min > 0 ? max - min : -1;

=======

        int max = -1;
        int min = nums[0];
        for (int i = 1; i < nums.length; i++) {
            int diff = nums[i] - min;
            if (diff > max) {
                max = diff;
            }
            if (nums[i] < min) {
                min = nums[i];
            }
        }
        return max;
