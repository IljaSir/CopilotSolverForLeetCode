Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int[] count = new int[100];
        int res = 0;
        for (int[] d : dominoes) {
            int v = Math.min(d[0], d[1]) * 10 + Math.max(d[0], d[1]);
            res += count[v]++;
        }
        return res;

=======

        int[] count = new int[100];
        int res = 0;
        for (int[] d : dominoes) {
            int v = Math.min(d[0], d[1]) * 10 + Math.max(d[0], d[1]);
            res += count[v];
            count[v]++;
        }
        return res;

=======

        int[] count = new int[100];
        int res = 0;
        for (int[] domino : dominoes) {
            int val = domino[0] < domino[1] ? domino[0] * 10 + domino[1] : domino[1] * 10 + domino[0];
            res += count[val];
            count[val]++;
        }
        return res;

=======

        int[] count = new int[100];
        int ans = 0;
        for (int[] domino : dominoes) {
            int val = domino[0] < domino[1] ? domino[0] * 10 + domino[1] : domino[1] * 10 + domino[0];
            ans += count[val];
            count[val]++;
        }
        return ans;

=======

        int[] count = new int[100];
        int res = 0;
        for (int[] domino : dominoes) {
            int index = domino[0] < domino[1] ? domino[0] * 10 + domino[1] : domino[1] * 10 + domino[0];
            res += count[index];
            count[index]++;
        }
        return res;

=======

        int[] num = new int[100];
        int res = 0;
        for (int[] domino : dominoes) {
            int d = domino[0] < domino[1] ? domino[0] * 10 + domino[1] : domino[1] * 10 + domino[0];
            res += num[d];
            num[d]++;
        }
        return res;

=======

        int[] hash = new int[100];
        int count = 0;
        for (int[] domino : dominoes) {
            int num = domino[0] < domino[1] ? domino[0] * 10 + domino[1] : domino[1] * 10 + domino[0];
            count += hash[num];
            hash[num]++;
        }
        return count;
