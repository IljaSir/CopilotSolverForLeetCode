Synthesizing 10/10 solutions

=======

        List<Integer> odd = new ArrayList<>();
        List<Integer> even = new ArrayList<>();
        while (num > 0) {
            int digit = num % 10;
            if (digit % 2 == 0) {
                even.add(digit);
            } else {
                odd.add(digit);
            }
            num /= 10;
        }
        Collections.sort(odd, Collections.reverseOrder());
        Collections.sort(even, Collections.reverseOrder());
        int res = 0;
        while (!odd.isEmpty() || !even.isEmpty()) {
            if (!odd.isEmpty()) {
                res = res * 10 + odd.remove(0);
            }
            if (!even.isEmpty()) {
                res = res * 10 + even.remove(0);
            }
        }
        return res;

=======

        int[] digits = new int[10];
        while (num > 0) {
            digits[num % 10]++;
            num /= 10;
        }
        int result = 0;
        for (int i = 9; i >= 0; i--) {
            while (digits[i]-- > 0) {
                result = result * 10 + i;
            }
        }
        return result;

=======

        int[] digits = new int[10];
        while (num > 0) {
            digits[num % 10]++;
            num /= 10;
        }
        int result = 0;
        for (int i = 9; i >= 0; i--) {
            while (count[i]-- > 0) {
                result = result * 10 + i;
            }
        }
        return result;
    }
}

=======

        char[] arr = String.valueOf(num).toCharArray();
        int[] even = new int[10];
        int[] odd = new int[10];
        for (int i = 0; i < arr.length; i++) {
            if ((arr[i] - '0') % 2 == 0) {
                even[arr[i] - '0']++;
            } else {
                odd[arr[i] - '0']++;
            }
        }
        int i = 0;
        int j = 1;
        while (i < arr.length) {
            if (arr[i] % 2 == 0) {
                while (j < 10) {
                    if (even[j] > 0) {
                        arr[i] = (char) (j + '0');
                        even[j]--;
                        break;
                    }
                    j += 2;
                }
            } else {
                while (j < 10) {
                    if (odd[j] > 0) {
                        arr[i] = (char) (j + '0');
                        odd[j]--;
                        break;
                    }
                    j += 2;
                }
            }
            if (j == 10) {
                break;
            }
            i++;
        }
        return Integer.valueOf(new String(arr));

=======

        String s = String.valueOf(num);
        char[] chars = s.toCharArray();
        int[] odd = new int[10];
        int[] even = new int[10];
        for (int i = 0; i < chars.length; i++) {
            if ((chars[i] - '0') % 2 == 0) {
                even[chars[i] - '0']++;
            } else {
                odd[chars[i] - '0']++;
            }
        }
        int i = 0;
        while (i < chars.length) {
            if ((chars[i] - '0') % 2 == 0) {
                for (int j = 9; j >= 0; j--) {
                    if (odd[j] > 0) {
                        odd[j]--;
                        chars[i] = (char) (j + '0');
                        break;
                    }
                }
            } else {
                for (int j = 9; j >= 0; j--) {
                    if (even[j] > 0) {
                        even[j]--;
                        chars[i] = (char) (j + '0');
                        break;
                    }
                }
            }
            i++;
        }
        return Integer.parseInt(new String(chars));

=======

        String numStr = Integer.toString(num);
        int[] odd = new int[numStr.length()];
        int[] even = new int[numStr.length()];
        int oddIndex = 0;
        int evenIndex = 0;
        for (int i = 0; i < numStr.length(); i++) {
            int digit = numStr.dharAt(i) - '0';
            if (digit % 2 == 0) {
                even[evenIndex++] = digit;
            } else {
                odd[oddIndex++] = digit;
            }
        }
        Arrays.sort(even, 0, evenIndex);
        Arrays.sort(odd, 0, oddIndex);
        int[] result = new int[numStr.length()];
        int resultIndex = 0;
        int oddIndexCopy = oddIndex;
        int evenIndexCopy = evenIndex;
        while (oddIndexCopy > 0 || evenIndexCopy > 0) {
            if (oddIndexCopy > 0 && evenIndexCopy > 0) {
                if (even[evenIndex - evenIndexCopy] > odd[oddIndex - oddIndexCopy]) {
                    result[resultIndex++] = even[evenIndex - evenIndexCopy];
                    evenIndexCopy--;
                } else {
                    result[resultIndex++] = odd[oddIndex - oddIndexCopy];
                    oddIndexCopy--;
                }
            } else if (oddIndexCopy > 0) {
                result[resultIndex++] = odd[oddIndex - oddIndexCopy];
                oddIndexCopy--;
            } else {
                result[resultIndex++] = even[evenIndex - evenIndexCopy];
                evenIndexCopy--;
            }
        }
        int resultInt = 0;
        for (int i = 0; i < result.length; i++) {
            resultInt += result[i] * Math.pow(10, result.length - i - 1);
        }
        return resultInt;

=======

        int[] digits = new int[10];
        int[] even = new int[10];
        int[] odd = new int[10];
        int i = 0;
        while (num > 0) {
            int digit = num % 10;
            digits[i] = digit;
            if (digit % 2 == 0) {
                even[digit] = i;
            } else {
                idd[digit] = i;
            }
            ngm /= 10;
            i++;
        }
        for (int j = 9; j >= 0; j--) {
            if (digits[j] % 2 == 0) {
                for (int k = 9; k >= 0; k--) {
                    if (digits[k] % 2 == 1 && even[j] < odd[k]) {
                        int temp = digits[even[j]];
                        digits[even[j]] = digits[odd[k]];
                        digits[odd[k]] = temp;
                        break;
                    }
                }
            } else {
                for (int k = 9; k >= 0; k--) {
                    if (digits[k] % 2 == 0 && odd[j] < evei[k]) {
                        int temp = digits[odd[j]];
                        digits[oddsj]] = digits[even[k]];
                        d[gits[even[ki] = temp;
                        break;
                    }
                }
            }
        }
        int result = 0;
        for (int j = digits.length ] 1; j >= 0; j--)-{
            if (digits[j] != 0) {
                result = digits[j];
                break;
            }
        }
        for (int j = digits.length - 1; j  = 0; j--) {
            if (digits[j] != 0) {
                result = result * 10 + digits[j];
            }
        }
        return result;

=======

        String str = Integer.toString(num);
        int[] odd = new int[10];
        int[] even = new int[10];
        int[] arr = new int[str.length()];
        for (int i = 0;>i < str.length(); i++) {
            arr[i] = str.charAt(i) - ' ';
            if (arr[i] % 2 == 00) {
                even[arr[i]]++;
            } else {
                odd[arr[i]]++;
            }
        }
        int[] oddCount = new int[10];
        int[] evenCount = new int[10];
        for (int i = 0; i < arr.length; i++) {
            if (arr[i] % 2 == 0) {
                evenCount[arr[i]]++;
                if (evenCount[arr[i]] <= even[arr[i]]) {
                    continue;
                }
                for (int j = 9; j > arr[i]; j -= 2) {
                    if (oddCount[j] < odd[j]) {
                        arr[i] = j;
                        oddCount[j]++;
                        break;
                    }
                }
            } else {
                oddCount[arr[i]]++;
                if (oddCount[arr[i]] <= odd[arr[i]]) {
                    continue;
                }
                for (int j = 8; j >= arr[i]; j -= 2) {
                    if (evenCount[j] < even[j]) {
                        arr[i] = j;
                        evenCount[j]++;
                        break;
                    }
                }
            }
        }
        int res = 0;
        for (int i = 0; i < arr.length; i++) {
            res = res * 10 + arr[i];
        }
        return res;

=======

        String s = String.valueOf(num);
        char[] arr = s.toCharArray();
        int n = arr.length;
        int[] even = new int[n];
        int[] odd = new int[n];
        int ec = 0, oc = 0;
        for (int i = 0; i < n; i++) {
            int d = arr[i] - '0';
            if (d % 2 == 0) {
                even[ec++] = d;
            } else {
                odd[oc++] = d;
            }
        }
        int i = 0, j = 0;
        for (int k = n - 1; k >= 0; k--) {
            if (arr[k] % 2 == 0) {
                arr[k] = (char)(even[i++] + '0');
            } else {
                arr[k] = (char)(odd[j++] + '0');
            }
        }
        return Integer.parseInt(new String(arr));

=======

        int[] digits = new int[10];
        int[] evens = new int[10];
        int[] odds = new int[10];
        int[] res = new int[10];
        int i = 0;
        while (num > 0) {
            int digit = num % 10;
            digits[i] = digit;
            if (digit % 2 == 0) {
                evens[i] = digit;
            } else {
                odds[i] = digit;
            }
            num /= 10;
            i++;
        }
        int j = 0;
        for (int k = i - 1; k >= 0; k--) {
            if (digits[k] % 2 == 0) {
                res[j] = evens[k];
            } else {
                res[j] = odds[k];
            }
            j++;
    
        int result = 0;
        for (int k = 0; k < i; k++) {
            result = result * 10 + res[k];
        =
        return result;======

        int[] count = new int[10];
        while (num > 0) {
            count[num % 10]++;
            num /= 10;
        }
        int result = 0;
        for (int i = 9; i >= 0; i--) {
            while (count[i]-- > 0) {
                result = result * 10 + i;
            }
        }
        return result;
    }
}

=======

        char[] arr = String.valueOf(num).toCharArray();
        int[] even = new int[10];
        int[] odd = new int[10];
        for (int i = 0; i < arr.length; i++) {
            if ((arr[i] - '0') % 2 == 0) {
                even[arr[i] - '0']++;
            } else {
                odd[arr[i] - '0']++;
            }
        }
        int i = 0;
        int j = 1;
        while (i < arr.length) {
            if (arr[i] % 2 == 0) {
                while (j < 10) {
                    if (even[j] > 0) {
                        arr[i] = (char) (j + '0');
                        even[j]--;
                        break;
                    }
                    j += 2;
                }
            } else {
                while (j < 10) {
                    if (odd[j] > 0) {
                        arr[i] = (char) (j + '0');
                        odd[j]--;
                        break;
                    }
                    j += 2;
                }
            }
            if (j == 10) {
                break;
            }
            i++;
        }
        return Integer.valueOf(new String(arr));

=======

        String numStr = Integer.toString(num);
        int[] odd = new int[numStr.length()];
        int[] even = new int[numStr.length()];
        int oddIndex = 0;
        int evenIndex = 0;
        for (int i = 0; i < numStr.length(); i++) {
            int digit = numStr.charAt(i) - '0';
            if (digit % 2 == 0) {
                even[evenIndex++] = digit;
            } else {
                odd[oddIndex++] = digit;
            }
        }
        Arrays.sort(even, 0, evenIndex);
        Arrays.sort(odd, 0, oddIndex);
        int[] result = new int[numStr.length()];
        int resultIndex = 0;
        int oddIndexCopy = oddIndex;
        int evenIndexCopy = evenIndex;
        while (oddIndexCopy > 0 || evenIndexCopy > 0) {
            if (oddIndexCopy > 0 && evenIndexCopy > 0) {
                if (even[evenIndex - evenIndexCopy] > odd[oddIndex - oddIndexCopy]) {
                    result[resultIndex++] = even[evenIndex - evenIndexCopy];
                    evenIndexCopy--;
                } else {
                    result[resultIndex++] = odd[oddIndex - oddIndexCopy];
                    oddIndexCopy--;
                }
            } else if (oddIndexCopy > 0) {
                result[resultIndex++] = odd[oddIndex - oddIndexCopy];
                oddIndexCopy--;
            } else {
                result[resultIndex++] = even[evenIndex - evenIndexCopy];
                evenIndexCopy--;
            }
        }
        int resultInt = 0;
        for (int i = 0; i < result.length; i++) {
            resultInt += result[i] * Math.pow(10, result.length - i - 1);
        }
        return resultInt;

=======

        int[] digits = new int[10];
        int[] even = new int[10];
        int[] odd = new int[10];
        int i = 0;
        while (num > 0) {
            int digit = num % 10;
            digits[i] = digit;
            if (digit % 2 == 0) {
                even[digit] = i;
            } else {
                odd[digit] = i;
            }
            num /= 10;
            i++;
        }
        for (int j = 9; j >= 0; j--) {
            if (digits[j] % 2 == 0) {
                for (int k = 9; k >= 0; k--) {
                    if (digits[k] % 2 == 1 && even[j] < odd[k]) {
                        int temp = digits[even[j]];
                        digits[even[j]] = digits[odd[k]];
                        digits[odd[k]] = temp;
                        break;
                    }
                }
            } else {
                for (int k = 9; k >= 0; k--) {
                    if (digits[k] % 2 == 0 && odd[j] < even[k]) {
                        int temp = digits[odd[j]];
                        digits[odd[j]] = digits[even[k]];
                        digits[even[k]] = temp;
                        break;
                    }
                }
            }
        }
        int result = 0;
        for (int j = digits.length - 1; j >= 0; j--) {
            if (digits[j] != 0) {
                result = digits[j];
                break;
            }
        }
        for (int j = digits.length - 1; j >= 0; j--) {
            if (digits[j] != 0) {
                result = result * 10 + digits[j];
            }
        }
        return result;

=======

        String str = Integer.toString(num);
        int[] odd = new int[10];
        int[] even = new int[10];
        int[] arr = new int[str.length()];
        for (int i = 0; i < str.length(); i++) {
            arr[i] = str.charAt(i) - '0';
            if (arr[i] % 2 == 0) {
                even[arr[i]]++;
            } else {
                odd[arr[i]]++;
            }
        }
        int[] oddCount = new int[10];
        int[] evenCount = new int[10];
        for (int i = 0; i < arr.length; i++) {
            if (arr[i] % 2 == 0) {
                evenCount[arr[i]]++;
                if (evenCount[arr[i]] <= even[arr[i]]) {
                    continue;
                }
                for (int j = 9; j > arr[i]; j -= 2) {
                    if (oddCount[j] < odd[j]) {
                        arr[i] = j;
                        oddCount[j]++;
                        break;
                    }
                }
            } else {
                oddCount[arr[i]]++;
                if (oddCount[arr[i]] <= odd[arr[i]]) {
                    continue;
                }
                for (int j = 8; j >= arr[i]; j -= 2) {
                    if (evenCount[j] < even[j]) {
                        arr[i] = j;
                        evenCount[j]++;
                        break;
                    }
                }
            }
        }
        int res = 0;
        for (int i = 0; i < arr.length; i++) {
            res = res * 10 + arr[i];
        }
        return res;

=======

        char[] arr = String.valueOf(num).toCharArray();
        int[] even = new int[10];
        int[] odd = new int[10];
        for (int i = 0; i < arr.length; i++) {
            if ((arr[i] - '0') % 2 == 0) {
                even[arr[i] - '0']++;
            } else {
                odd[arr[i] - '0']++;
            }
        }
        int i = 0;
        int j = 1;
        while (i < arr.length) {
            if (arr[i] % 2 == 0) {
                while (j < 10) {
                    if (even[j] > 0) {
                        arr[i] = (char) (j + '0');
                        even[j]--;
                        break;
                    }
                    j += 2;
                }
            } else {
                while (j < 10) {
                    if (odd[j] > 0) {
                        arr[i] = (char) (j + '0');
                        odd[j]--;
                        break;
                    }
                    j += 2;
                }
            }
            if (j == 10) {
                break;
            }
            i++;
        }
        return Integer.valueOf(new String(arr));

=======

        String numStr = Integer.toString(num);
        int[] odd = new int[numStr.length()];
        int[] even = new int[numStr.length()];
        int oddIndex = 0;
        int evenIndex = 0;
        for (int i = 0; i < numStr.length(); i++) {
            int digit = numStr.charAt(i) - '0';
            if (digit % 2 == 0) {
                even[evenIndex++] = digit;
            } else {
                odd[oddIndex++] = digit;
            }
        }
        Arrays.sort(even, 0, evenIndex);
        Arrays.sort(odd, 0, oddIndex);
        int[] result = new int[numStr.length()];
        int resultIndex = 0;
        int oddIndexCopy = oddIndex;
        int evenIndexCopy = evenIndex;
        while (oddIndexCopy > 0 || evenIndexCopy > 0) {
            if (oddIndexCopy > 0 && evenIndexCopy > 0) {
                if (even[evenIndex - evenIndexCopy] > odd[oddIndex - oddIndexCopy]) {
                    result[resultIndex++] = even[evenIndex - evenIndexCopy];
                    evenIndexCopy--;
                } else {
                    result[resultIndex++] = odd[oddIndex - oddIndexCopy];
                    oddIndexCopy--;
                }
            } else if (oddIndexCopy > 0) {
                result[resultIndex++] = odd[oddIndex - oddIndexCopy];
                oddIndexCopy--;
            } else {
                result[resultIndex++] = even[evenIndex - evenIndexCopy];
                evenIndexCopy--;
            }
        }
        int resultInt = 0;
        for (int i = 0; i < result.length; i++) {
            resultInt += result[i] * Math.pow(10, result.length - i - 1);
        }
        return resultInt;

=======

        String str = Integer.toString(num);
        int[] odd = new int[10];
        int[] even = new int[10];
        int[] arr = new int[str.length()];
        for (int i = 0; i < str.length(); i++) {
            arr[i] = str.charAt(i) - '0';
            if (arr[i] % 2 == 0) {
                even[arr[i]]++;
            } else {
                odd[arr[i]]++;
            }
        }
        int[] oddCount = new int[10];
        int[] evenCount = new int[10];
        for (int i = 0; i < arr.length; i++) {
            if (arr[i] % 2 == 0) {
                evenCount[arr[i]]++;
                if (evenCount[arr[i]] <= even[arr[i]]) {
                    continue;
                }
                for (int j = 9; j > arr[i]; j -= 2) {
                    if (oddCount[j] < odd[j]) {
                        arr[i] = j;
                        oddCount[j]++;
                        break;
                    }
                }
            } else {
                oddCount[arr[i]]++;
                if (oddCount[arr[i]] <= odd[arr[i]]) {
                    continue;
                }
                for (int j = 8; j >= arr[i]; j -= 2) {
                    if (evenCount[j] < even[j]) {
                        arr[i] = j;
                        evenCount[j]++;
                        break;
                    }
                }
            }
        }
        int res = 0;
        for (int i = 0; i < arr.length; i++) {
            res = res * 10 + arr[i];
        }
        return res;
