Synthesizing 10/10 solutions (Duplicates hidden)

=======

        String[] words = s.split(" ");
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < words.length; i++) {
            String word = words[i];
            for (int j = word.length() - 1; j >= 0; j--) {
                sb.append(word.charAt(j));
            }
            if (i != words.length - 1) {
                sb.append(" ");
            }
        }
        return sb.toString();

=======

        String[] words = s.split(" ");
        StringBuilder sb = new StringBuilder();
        for (String word : words) {
            sb.append(new StringBuilder(word).reverse().toString() + " ");
        }
        return sb.toString().trim();

=======

        String[] words = s.split(" ");
        StringBuilder sb = new StringBuilder();
        for (String word : words) {
            sb.append(new StringBuilder(word).reverse().toString()).append(" ");
        }
        return sb.toString().trim();

=======

        String[] words = s.split(" ");
        StringBuilder sb = new StringBuilder();
        for (String word : words) {
            sb.append(new StringBuilder(word).reverse().toString());
            sb.append(" ");
        }
        return sb.toString().trim();

=======

        String[] words = s.split(" ");
        String[] reversedWords = new String[words.length];
        for (int i = 0; i < words.length; i++) {
            reversedWords[i] = reverseWord(words[i]);
        }
        return String.join(" ", reversedWords);
    }

    public String reverseWord(String word) {
        char[] chars = word.toCharArray();
        int left = 0;
        int right = chars.length - 1;
        while (left < right) {
            char temp = chars[left];
            chars[left] = chars[right];
            chars[right] = temp;
            left++;
            right--;
        }
        return new String(chars);

=======

        String[] arr = s.split(" ");
        StringBuilder sb = new StringBuilder();
        for (String str : arr) {
            sb.append(new StringBuilder(str).reverse().toString()).append(" ");
        }
        return sb.toString().trim();

=======

        String[] arr = s.split(" ");
        String result = "";
        for (int i = 0; i < arr.length; i++) {
            result += new StringBuilder(arr[i]).reverse().toString() + " ";
        }
        return result.substring(0, result.length() - 1);

=======

        String[] words = s.split(" ");
        String result = "";
        for (String word : words) {
            result += reverseWord(word) + " ";
        }
        return result.trim();
    }
    
    private String reverseWord(String word) {
        String result = "";
        for (int i = word.length() - 1; i >= 0; i--) {
            result += word.charAt(i);
        }
        return result;
