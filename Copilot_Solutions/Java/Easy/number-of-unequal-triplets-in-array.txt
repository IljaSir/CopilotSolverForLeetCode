Synthesizing 10/10 solutions

=======

        int count = 0;
        for (int i = 0; i < nums.length; i++) {
            for (int j = i + 1; j < nums.length; j++) {
                for (int k = j + 1; k < nums.length; k++) {
                    if (nums[i] != nums[j] && nums[j] != nums[k] && nums[i] != nums[k]) {
                        count++;
                    }
                }
            }
        }
        return count;

=======

        int ans = 0;
        for (int i = 0; i < nums.length; i++) {
            for (int j = i + 1; j < nums.length; j++) {
                for (int k = j + 1; k < nums.length; k++) {
                    if (nums[i] != nums[j] && nums[i] != nums[k] && nums[j] != nums[k]) {
                        ans++;
                    }
                }
            }
        }
        return ans;

=======

        int n = nums.length;
        int ans = 0;
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                for (int k = j + 1; k < n; k++) {
                    if (nums[i] != nums[j] && nums[i] != nums[k] && nums[j] != nums[k]) {
                        ans++;
                    }
                }
            }
        }
        return ans;

=======

        int n = nums.length;
        int res = 0;
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                for (int k = j + 1; k < n; k++) {
                    if (nums[i] != nums[j] && nums[i] != nums[k] && nums[j] != nums[k]) {
                        res++;
                    }
                }
            }
        }
        return res;

=======

        int result = 0;
        for(int i = 0; i < nums.length - 2; i++){
            for(int j = i + 1; j < nums.length - 1; j++){
                for(int k = j + 1; k < nums.length; k++){
                    if(nums[i] != nums[j] && nums[i] != nums[k] && nums[j] != nums[k]){
                        result++;
                    }
                }
            }
        }
        return result;

=======

        int count = 0;
        for (int i = 0; i < nums.length - 2; i++) {
            int first = nums[i];
            for (int j = i + 1; j < nums.length - 1; j++) {
                int second = nums[j];
                for (int k = j + 1; k < nums.length; k++) {
                    int third = nums[k];
                    if (first != second && second != third && first != third) {
                        count++;
                    }
                }
            }
        }
        return count;

=======

        int n = nums.length;
        int[] cnt = new int[1001];
        for (int i = 0; i < n; i++) {
            cnt[nums[i]]++;
        }
        int ans = 0;
        for (int i = 1; i <= 1000; i++) {
            for (int j = i + 1; j <= 1000; j++) {
                for (int k = j + 1; k <= 1000; k++) {
                    if (cnt[i] > 0 && cnt[j] > 0 && cnt[k] > 0) {
                        ans++;
                    }
                }
            }
        }
        return ans;

=======

        int n = nums.length;
        int[] cnt = new int[1001];
        for (int x : nums) {
            cnt[x]++;
        }
        int ans = 0;
        for (int i = 0; i < n; ++i) {
            for (int j = i + 1; j < n; ++j) {
                if (nums[i] != nums[j]) {
                    ans += (n - j - 1) - (cnt[nums[i]] + cnt[nums[j]] - 2);
                }
            }
        }
        return ans;

=======

        int n = nums.length;
        int[] cnt = new int[1001];
        for (int i = 0; i < n; ++i) {
            ++cnt[nums[i]];
        }
        int ans = 0;
        for (int i = 0; i < n; ++i) {
            for (int j = i + 1; j < n; ++j) {
                for (int k = j + 1; k < n; ++k) {
                    if (nums[i] != nums[j] && nums[i] != nums[k] && nums[j] != nums[k]) {
                        ++ans;
                    }
                }
            }
        }
        return ans;

=======

        int ans = 0;
        int[] arr = new int[1001];
        for (int num : nums) {
            arr[num]++;
        }
        for (int i = 1; i < 1001; i++) {
            if (arr[i] == 0) continue;
            for (int j = i + 1; j < 1001; j++) {
                if (arr[j] == 0) continue;
                for (int k = j + 1; k < 1001; k++) {
                    if (arr[k] == 0) continue;
                    ans++;
                }
            }
        }
        return ans;
