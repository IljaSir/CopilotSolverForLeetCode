Synthesizing 10/10 solutions

=======

        int x = 0, y = 0;
        for (int i = 0; i < 8; ++i) {
            for (int j = 0; j < 8; ++j) {
                if (board[i][j] == 'R') {
                    x = i;
                    y = j;
                    break;
                }
            }
        }
        int ans = 0;
        for (int i = x + 1; i < 8; ++i) {
            if (board[i][y] == 'p') {
                ans++;
                break;
            }
            if (board[i][y] == 'B') {
                break;
            }
        }
        for (int i = x - 1; i >= 0; --i) {
            if (board[i][y] == 'p') {
                ans++;
                break;
            }
            if (board[i][y] == 'B') {
                break;
            }
        }
        for (int j = y + 1; j < 8; ++j) {
            if (board[x][j] == 'p') {
                ans++;
                break;
            }
            if (board[x][j] == 'B') {
                break;
            }
        }
        for (int j = y - 1; j >= 0; --j) {
            if (board[x][j] == 'p') {
                ans++;
                break;
            }
            if (board[x][j] == 'B') {
                break;
            }
        }
        return ans;

=======

        int x = 0, y = 0;
        for(int i = 0; i < 8; i++) {
            for(int j = 0; j < 8; j++) {
                if(board[i][j] == 'R') {
                    x = i;
                    y = j;
                    break;
                }
            }
        }
        int count = 0;
        for(int i = x; i >= 0; i--) {
            if(board[i][y] == 'B') {
                break;
            } else if(board[i][y] == 'p') {
                count++;
                break;
            }
        }
        for(int i = x; i < 8; i++) {
            if(board[i][y] == 'B') {
                break;
            } else if(board[i][y] == 'p') {
                count++;
                break;
            }
        }
        for(int i = y; i >= 0; i--) {
            if(board[x][i] == 'B') {
                break;
            } else if(board[x][i] == 'p') {
                count++;
                break;
            }
        }
        for(int i = y; i < 8; i++) {
            if(board[x][i] == 'B') {
                break;
            } else if(board[x][i] == 'p') {
                count++;
                break;
            }
        }
        return count;

=======

        int x = 0;
        int y = 0;
        int count = 0;
        for (int i = 0; i < 8; i++) {
            for (int j = 0; j < 8; j++) {
                if (board[i][j] == 'R') {
                    x = i;
                    y = j;
                    break;
                }
            }
        }
        for (int i = x; i >= 0; i--) {
            if (board[i][y] == 'B') {
                break;
            }
            if (board[i][y] == 'p') {
                count++;
                break;
            }
        }
        for (int i = x; i < 8; i++) {
            if (board[i][y] == 'B') {
                break;
            }
            if (board[i][y] == 'p') {
                count++;
                break;
            }
        }
        for (int j = y; j >= 0; j--) {
            if (board[x][j] == 'B') {
                break;
            }
            if (board[x][j] == 'p') {
                count++;
                break;
            }
        }
        for (int j = y; j < 8; j++) {
            if (board[x][j] == 'B') {
                break;
            }
            if (board[x][j] == 'p') {
                count++;
                break;
            }
        }
        return count;

=======

        int x = 0;
        int y = 0;
        for(int i = 0; i < board.length; i++){
            for(int j = 0; j < board[i].length; j++){
                if(board[i][j] == 'R'){
                    x = i;
                    y = j;
                    break;
                }
            }
        }
        int count = 0;
        for(int i = x; i < board.length; i++){
            if(board[i][y] == 'B'){
                break;
            }
            if(board[i][y] == 'p'){
                count++;
                break;
            }
        }
        for(int i = x; i >= 0; i--){
            if(board[i][y] == 'B'){
                break;
            }
            if(board[i][y] == 'p'){
                count++;
                break;
            }
        }
        for(int i = y; i < board[x].length; i++){
            if(board[x][i] == 'B'){
                break;
            }
            if(board[x][i] == 'p'){
                count++;
                break;
            }
        }
        for(int i = y; i >= 0; i--){
            if(board[x][i] == 'B'){
                break;
            }
            if(board[x][i] == 'p'){
                count++;
                break;
            }
        }
        return count;

=======

        int x = 0, y = 0;
        int count = 0;
        for (int i = 0; i < 8; i++) {
            for (int j = 0; j < 8; j++) {
                if (board[i][j] == 'R') {
                    x = i;
                    y = j;
                    break;
                }
            }
        }
        for (int i = x - 1; i >= 0; i--) {
            if (board[i][y] == 'B') {
                break;
            }
            if (board[i][y] == 'p') {
                count++;
                break;
            }
        }
        for (int i = x + 1; i < 8; i++) {
            if (board[i][y] == 'B') {
                break;
            }
            if (board[i][y] == 'p') {
                count++;
                break;
            }
        }
        for (int i = y - 1; i >= 0; i--) {
            if (board[x][i] == 'B') {
                break;
            }
            if (board[x][i] == 'p') {
                count++;
                break;
            }
        }
        for (int i = y + 1; i < 8; i++) {
            if (board[x][i] == 'B') {
                break;
            }
            if (board[x][i] == 'p') {
                count++;
                break;
            }
        }
        return count;

=======

        int row = 0;
        int col = 0;
        int res = 0;
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[0].length; j++) {
                if (board[i][j] == 'R') {
                    row = i;
                    col = j;
                    break;
                }
            }
        }
        res += count(board, row, col, 0, 1);
        res += count(board, row, col, 0, -1);
        res += count(board, row, col, 1, 0);
        res += count(board, row, col, -1, 0);
        return res;
    }
    public int count(char[][] board, int row, int col, int rowDir, int colDir) {
        while (row >= 0 && row < board.length && col >= 0 && col < board[0].length && board[row][col] != 'B') {
            if (board[row][col] == 'p') {
                return 1;
            }
            row += rowDir;
            col += colDir;
        }
        return 0;

=======

        int x = 0;
        int y = 0;
        int count = 0;
        for(int i=0;i<8;i++){
            for(int j=0;j<8;j++){
                if(board[i][j] == 'R'){
                    x = i;
                    y = j;
                    break;
                }
            }
        }
        for(int i=x;i>=0;i--){
            if(board[i][y] == 'B'){
                break;
            }
            if(board[i][y] == 'p'){
                count++;
                break;
            }
        }
        for(int i=x;i<8;i++){
            if(board[i][y] == 'B'){
                break;
            }
            if(board[i][y] == 'p'){
                count++;
                break;
            }
        }
        for(int i=y;i>=0;i--){
            if(board[x][i] == 'B'){
                break;
            }
            if(board[x][i] == 'p'){
                count++;
                break;
            }
        }
        for(int i=y;i<8;i++){
            if(board[x][i] == 'B'){
                break;
            }
            if(board[x][i] == 'p'){
                count++;
                break;
            }
        }
        return count;

=======

        int[] rook = new int[2];
        for(int i = 0; i < 8; i++){
            for(int j = 0; j < 8; j++){
                if(board[i][j] == 'R'){
                    rook[0] = i;
                    rook[1] = j;
                    break;
                }
            }
        }
        int count = 0;
        for(int i = rook[0]; i >= 0; i--){
            if(board[i][rook[1]] == 'p'){
                count++;
                break;
            }
            if(board[i][rook[1]] == 'B'){
                break;
            }
        }
        for(int i = rook[0]; i < 8; i++){
            if(board[i][rook[1]] == 'p'){
                count++;
                break;
            }
            if(board[i][rook[1]] == 'B'){
                break;
            }
        }
        for(int i = rook[1]; i >= 0; i--){
            if(board[rook[0]][i] == 'p'){
                count++;
                break;
            }
            if(board[rook[0]][i] == 'B'){
                break;
            }
        }
        for(int i = rook[1]; i < 8; i++){
            if(board[rook[0]][i] == 'p'){
                count++;
                break;
            }
            if(board[rook[0]][i] == 'B'){
                break;
            }
        }
        return count;

=======

        int n = 8;
        int r = 0, c = 0;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (board[i][j] == 'R') {
                    r = i;
                    c = j;
                    break;
                }
            }
        }
        int count = 0;
        for (int i = r-1; i >= 0; i--) {
            if (board[i][c] == 'p') {
                count++;
                break;
            } else if (board[i][c] == 'B') {
                break;
            }
        }
        for (int i = r+1; i < n; i++) {
            if (board[i][c] == 'p') {
                count++;
                break;
            } else if (board[i][c] == 'B') {
                break;
            }
        }
        for (int j = c-1; j >= 0; j--) {
            if (board[r][j] == 'p') {
                count++;
                break;
            } else if (board[r][j] == 'B') {
                break;
            }
        }
        for (int j = c+1; j < n; j++) {
            if (board[r][j] == 'p') {
                count++;
                break;
            } else if (board[r][j] == 'B') {
                break;
            }
        }
        return count;

=======

        int row = 0, col = 0;
        int count = 0;
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[i].length; j++) {
                if (board[i][j] == 'R') {
                    row = i;
                    col = j;
                    break;
                }
            }
        }
        for (int i = row; i >= 0; i--) {
            if (board[i][col] == 'B') {
                break;
            }
            if (board[i][col] == 'p') {
                count++;
                break;
            }
        }
        for (int i = row; i < board.length; i++) {
            if (board[i][col] == 'B') {
                break;
            }
            if (board[i][col] == 'p') {
                count++;
                break;
            }
        }
        for (int i = col; i >= 0; i--) {
            if (board[row][i] == 'B') {
                break;
            }
            if (board[row][i] == 'p') {
                count++;
                break;
            }
        }
        for (int i = col; i < board[row].length; i++) {
            if (board[row][i] == 'B') {
                break;
            }
            if (board[row][i] == 'p') {
                count++;
                break;
            }
        }
        return count;
