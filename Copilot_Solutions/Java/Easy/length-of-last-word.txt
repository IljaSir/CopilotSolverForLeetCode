Synthesizing 10/10 solutions

=======

        int i = s.length() - 1;
        while (i >= 0 && s.charAt(i) == ' ') {
            i--;
        }
        int j = i;
        while (j >= 0 && s.charAt(j) != ' ') {
            j--;
        }
        return i - j;

=======

        int count = 0;
        int i = s.length() - 1;
        while (i >= 0 && s.charAt(i) == ' ') {
            i--;
        }
        while (i >= 0 && s.charAt(i) != ' ') {
            i--;
            count++;
        }
        return count;

=======

        int len = 0;
        for(int i = s.length() - 1; i >= 0; i--) {
            if(s.charAt(i) != ' ') {
                len++;
            } else if(len > 0) {
                return len;
            }
        }
        return len;

=======

        int len = s.length();
        int res = 0;
        int i = len - 1;
        while (i >= 0 && s.charAt(i) == ' ') {
            i--;
        }
        while (i >= 0 && s.charAt(i) != ' ') {
            res++;
            i--;
        }
        return res;

=======

        int length = 0;
        for(int i = s.length() - 1; i >= 0; i--) {
            if(s.charAt(i) != ' ') {
                length++;
            } else {
                if(length != 0) {
                    break;
                }
            }
        }
        return length;

=======

        int n = s.length();
        int i = n - 1;
        while(i >= 0 && s.charAt(i) == ' ') {
            i--;
        }
        int count = 0;
        while(i >= 0 && s.charAt(i) != ' ') {
            count++;
            i--;
        }
        return count;

=======

        String[] words = s.split(" ");
        return words[words.length - 1].length();

=======

        int length = s.length();
        int lastWordLength = 0;
        boolean lastWordStarted = false;
        for (int i = length - 1; i >= 0; i--) {
            if (s.charAt(i) == ' ') {
                if (lastWordStarted) {
                    return lastWordLength;
                }
            } else {
                lastWordLength++;
                lastWordStarted = true;
            }
        }
        return lastWordLength;

=======

        int length = s.length();
        int last = length - 1;
        if (length == 0) {
            return 0;
        }
        while (last >= 0 && s.charAt(last) == ' ') {
            last--;
        }
        int first = last;
        while (first >= 0 && s.charAt(first) != ' ') {
            first--;
        }
        return last - first;

=======

        int len = s.length();
        int lastLen = 0;
        boolean flag = false;
        for(int i = len - 1; i >= 0; i--) {
            char c = s.charAt(i);
            if(c != ' ') {
                lastLen++;
                flag = true;
            } else {
                if(flag) {
                    break;
                }
            }
        }
        return lastLen;
