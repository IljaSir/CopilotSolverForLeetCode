Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int elementSum = 0;
        int digitSum = 0;
        for (int num : nums) {
            elementSum += num;
            while (num > 0) {
                digitSum += num % 10;
                num /= 10;
            }
        }
        return Math.abs(elementSum - digitSum);

=======

        int elementSum = 0;
        int digitSum = 0;
        for (int i = 0; i < nums.length; i++) {
            elementSum += nums[i];
            while (nums[i] != 0) {
                digitSum += nums[i] % 10;
                nums[i] /= 10;
            }
        }
        return Math.abs(elementSum - digitSum);
    }
}

=======

        int elementSum = 0;
        int digitSum = 0;
        for (int i = 0; i < nums.length; i++) {
            elementSum += nums[i];
            digitSum += getDigitSum(nums[i]);
        }
        return Math.abs(elementSum - digitSum);
    }
    
    public int getDigitSum(int num) {
        int sum = 0;
        while (num > 0) {
            sum += num % 10;
            num = num / 10;
        }
        return sum;

=======

        int sum1 = 0;
        int sum2 = 0;
        for (int i = 0; i < nums.length; i++) {
            sum1 += nums[i];
            while (nums[i] > 0) {
                sum2 += nums[i] % 10;
                nums[i] /= 10;
            }
        }
        return Math.abs(sum1 - sum2);

=======

        int sum = 0;
        int digitSum = 0;
        for (int i = 0; i < nums.length; i++) {
            sum += nums[i];
            while (nums[i] > 0) {
                digitSum += nums[i] % 10;
                nums[i] /= 10;
            }
        }
        return Math.abs(sum - digitSum);

=======

        int elementSum = 0;
        int digitSum = 0;
        for(int i = 0; i < nums.length; i++) {
            elementSum += nums[i];
            digitSum += getDigitSum(nums[i]);
        }
        return Math.abs(elementSum - digitSum);
    }
    
    public int getDigitSum(int num) {
        int sum = 0;
        while(num > 0) {
            sum += num % 10;
            num /= 10;
        }
        return sum;

=======

        int sum = 0;
        int digitSum = 0;
        for (int i = 0; i < nums.length; i++) {
            sum += nums[i];
            digitSum += getDigitSum(nums[i]);
        }
        return Math.abs(sum - digitSum);
    }

    private int getDigitSum(int num) {
        int sum = 0;
        while (num > 0) {
            sum += num % 10;
            num /= 10;
        }
        return sum;

=======

        int sum1 = 0;
        int sum2 = 0;
        for (int i = 0; i < nums.length; i++) {
            sum1 += nums[i];
            sum2 += getDigitSum(nums[i]);
        }
        return Math.abs(sum1 - sum2);
    }
    
    private int getDigitSum(int n) {
        int sum = 0;
        while (n > 0) {
            sum += n % 10;
            n /= 10;
        }
        return sum;
