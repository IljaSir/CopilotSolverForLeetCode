Synthesizing 10/10 solutions

=======

        int[] charCount = new int[26];
        for (int i = 0; i < chars.length(); i++) {
            charCount[chars.charAt(i) - 'a']++;
        }
        int sum = 0;
        for (int i = 0; i < words.length; i++) {
            if (isGoodWord(words[i], charCount)) {
                sum += words[i].length();
            }
        }
        return sum;
    }
    
    private boolean isGoodWord(String word, int[] charCount) {
        int[] wordCount = new int[26];
        for (int i = 0; i < word.length(); i++) {
            wordCount[word.charAt(i) - 'a']++;
        }
        for (int i = 0; i < 26; i++) {
            if (wordCount[i] > charCount[i]) {
                return false;
            }
        }
        return true;

=======

        int[] charCount = new int[26];
        for (int i = 0; i < chars.length(); i++) {
            charCount[chars.charAt(i) - 'a']++;
        }
        int sum = 0;
        for (String word : words) {
            int[] wordCount = new int[26];
            boolean good = true;
            for (int i = 0; i < word.length(); i++) {
                if (++wordCount[word.charAt(i) - 'a'] > charCount[word.charAt(i) - 'a']) {
                    good = false;
                    break;
                }
            }
            if (good) {
                sum += word.length();
            }
        }
        return sum;

=======

        int[] charCount = new int[26];
        for (int i = 0; i < chars.length(); i++) {
            charCount[chars.charAt(i) - 'a']++;
        }
        int sum = 0;
        for (String word : words) {
            int[] temp = Arrays.copyOf(charCount, charCount.length);
            boolean isGood = true;
            for (int i = 0; i < word.length(); i++) {
                int idx = word.charAt(i) - 'a';
                if (temp[idx] > 0) {
                    temp[idx]--;
                } else {
                    isGood = false;
                    break;
                }
            }
            if (isGood) {
                sum += word.length();
            }
        }
        return sum;

=======

        int[] charCount = new int[26];
        for (char c : chars.toCharArray()) {
            charCount[c - 'a']++;
        }
        int result = 0;
        for (String word : words) {
            if (canForm(word, charCount)) {
                result += word.length();
            }
        }
        return result;
    }
    
    public boolean canForm(String word, int[] charCount) {
        int[] wordCount = new int[26];
        for (char c : word.toCharArray()) {
            wordCount[c - 'a']++;
        }
        for (int i = 0; i < 26; i++) {
            if (wordCount[i] > charCount[i]) {
                return false;
            }
        }
        return true;

=======

        int[] charCount = new int[26];
        for (char c : chars.toCharArray()) {
            charCount[c - 'a']++;
        }
        int sum = 0;
        for (String word : words) {
            int[] wordCount = new int[26];
            for (char c : word.toCharArray()) {
                wordCount[c - 'a']++;
            }
            boolean isMatch = true;
            for (int i = 0; i < 26; i++) {
                if (charCount[i] < wordCount[i]) {
                    isMatch = false;
                    break;
                }
            }
            if (isMatch) {
                sum += word.length();
            }
        }
        return sum;

=======

        int[] charCount = new int[26];
        for (char c : chars.toCharArray()) {
            charCount[c - 'a']++;
        }
        int sum = 0;
        for (String word : words) {
            int[] temp = Arrays.copyOf(charCount, charCount.length);
            boolean valid = true;
            for (char c : word.toCharArray()) {
                if (temp[c - 'a'] == 0) {
                    valid = false;
                    break;
                }
                temp[c - 'a']--;
            }
            if (valid) {
                sum += word.length();
            }
        }
        return sum;

=======

        int[] count = new int[26];
        for (char c: chars.toCharArray()) {
            count[c - 'a']++;
        }
        int ans = 0;
        search:
        for (String word: words) {
            int[] count1 = new int[26];
            for (char c: word.toCharArray()) {
                count1[c - 'a']++;
            }
            for (int i = 0; i < 26; ++i) {
                if (count1[i] > count[i]) {
                    continue search;
                }
            }
            ans += word.length();
        }
        return ans;

=======

        int[] charCount = new int[26];
        for (char c : chars.toCharArray()) {
            charCount[c - 'a']++;
        }
        int ans = 0;
        for (String word : words) {
            int[] wordCount = new int[26];
            boolean good = true;
            for (char c : word.toCharArray()) {
                wordCount[c - 'a']++;
                if (wordCount[c - 'a'] > charCount[c - 'a']) {
                    good = false;
                    break;
                }
            }
            if (good) {
                ans += word.length();
            }
        }
        return ans;

=======

        int sum = 0;
        for (String word : words) {
            if (canForm(word, chars)) {
                sum += word.length();
            }
        }
        return sum;
    }
    
    private boolean canForm(String word, String chars) {
        int[] count = new int[26];
        for (char c : chars.toCharArray()) {
            count[c - 'a']++;
        }
        for (char c : word.toCharArray()) {
            if (count[c - 'a'] == 0) {
                return false;
            }
            count[c - 'a']--;
        }
        return true;

=======

        int[] charMap = new int[26];
        for (char ch : chars.toCharArray()) {
            charMap[ch - 'a']++;
        }
        int count = 0;
        for (String word : words) {
            int[] tempMap = Arrays.copyOf(charMap, charMap.length);
            boolean isGood = true;
            for (char ch : word.toCharArray()) {
                if (--tempMap[ch - 'a'] < 0) {
                    isGood = false;
                    break;
                }
            }
            if (isGood) {
                count += word.length();
            }
        }
        return count;
