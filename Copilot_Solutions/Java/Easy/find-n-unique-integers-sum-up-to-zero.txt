Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int[] res = new int[n];
        for (int i = 0; i < n; i++) {
            res[i] = i * 2 - n + 1;
        }
        return res;

=======

        int[] ans = new int[n];
        for (int i = 0; i < n; i++) {
            ans[i] = i * 2 - n + 1;
        }
        return ans;

=======

        int[] res = new int[n];
        for (int i = 0; i < n / 2; i++) {
            res[i] = i + 1;
            res[n - i - 1] = -(i + 1);
        }
        return res;

=======

        int[] result = new int[n];
        if (n % 2 == 1) {
            result[n / 2] = 0;
        }
        for (int i = 0; i < n / 2; i++) {
            result[i] = i + 1;
            result[n - 1 - i] = -result[i];
        }
        return result;

=======

        int[] result = new int[n];
        int i = 0;
        if (n % 2 == 1) {
            result[i++] = 0;
        }
        for (int j = 1; j <= n / 2; j++) {
            result[i++] = j;
            result[i++] = -j;
        }
        return result;

=======

        int[] ans = new int[n];
        int i = 0;
        if (n % 2 == 1) {
            ans[i++] = 0;
        }
        for (int j = 1; j <= n / 2; j++) {
            ans[i++] = j;
            ans[i++] = -j;
        }
        return ans;

=======

        int[] ans = new int[n];
        int i = 0;
        if (n % 2 != 0) {
            ans[i++] = 0;
        }
        for (int j = 1; j <= n / 2; j++) {
            ans[i++] = j;
            ans[i++] = -j;
        }
        return ans;

=======

        int[] ans = new int[n];
        int k = 0;
        if(n % 2 == 1) {
            ans[k++] = 0;
        }
        for(int i = 1; i <= n / 2; i++) {
            ans[k++] = i;
            ans[k++] = -i;
        }
        return ans;

=======

        int[] res = new int[n];
        int i = 0;
        int j = n-1;
        while(i < j) {
            res[i] = i+1;
            res[j] = -(i+1);
            i++;
            j--;
        }
        return res;
