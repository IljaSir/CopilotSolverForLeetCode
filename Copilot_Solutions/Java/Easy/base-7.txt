Synthesizing 10/10 solutions

=======

        if (num == 0) {
            return "0";
        }
        StringBuilder sb = new StringBuilder();
        int n = Math.abs(num);
        while (n > 0) {
            sb.append(n % 7);
            n /= 7;
        }
        if (num < 0) {
            sb.append("-");
        }
        return sb.reverse().toString();

=======

        if (num == 0) {
            return "0";
        }
        StringBuilder sb = new StringBuilder();
        boolean isNegative = false;
        if (num < 0) {
            isNegative = true;
            num = -num;
        }
        while (num > 0) {
            int digit = num % 7;
            sb.append(digit);
            num /= 7;
        }
        if (isNegative) {
            sb.append('-');
        }
        return sb.reverse().toString();

=======

        if (num == 0) {
            return "0";
        }
        boolean isNegative = num < 0;
        num = Math.abs(num);
        StringBuilder sb = new StringBuilder();
        while (num > 0) {
            sb.append(num % 7);
            num /= 7;
        }
        if (isNegative) {
            sb.append("-");
        }
        return sb.reverse().toString();

=======

        if (num == 0) {
            return "0";
        }
        boolean isNegative = num < 0;
        num = Math.abs(num);
        StringBuilder sb = new StringBuilder();
        while (num > 0) {
            sb.append(num % 7);
            num /= 7;
        }
        if (isNegative) {
            sb.append('-');
        }
        return sb.reverse().toString();

=======

        if (num == 0) return "0";
        StringBuilder sb = new StringBuilder();
        if (num < 0) {
            sb.append("-");
            num = -num;
        }
        while (num > 0) {
            sb.append(num % 7);
            num /= 7;
        }
        return sb.reverse().toString();

=======

        if (num == 0) return "0";
        StringBuilder sb = new StringBuilder();
        boolean isNegative = false;
        if (num < 0) {
            isNegative = true;
            num = -num;
        }
        while (num != 0) {
            sb.append(num % 7);
            num /= 7;
        }
        if (isNegative) sb.append("-");
        return sb.reverse().toString();

=======

        if (num == 0) return "0";
        boolean isNegative = num < 0;
        num = Math.abs(num);
        StringBuilder sb = new StringBuilder();
        while (num > 0) {
            sb.append(num % 7);
            num /= 7;
        }
        if (isNegative) sb.append('-');
        return sb.reverse().toString();

=======

        boolean negative = false;
        if (num < 0) {
            negative = true;
            num = -num;
        }
        StringBuilder sb = new StringBuilder();
        while (num > 0) {
            sb.append(num % 7);
            num /= 7;
        }
        if (negative) {
            sb.append('-');
        }
        sb.reverse();
        return sb.toString();

=======

        String result = "";
        int n = Math.abs(num);
        while (n >= 7) {
            result = (n % 7) + result;
            n /= 7;
        }
        result = n + result;
        return num < 0 ? "-" + result : result;

=======

        String result = "";
        boolean isNegative = false;
        if (num < 0) {
            isNegative = true;
            num = -num;
        }
        while (num >= 7) {
            int remainder = num % 7;
            result = remainder + result;
            num = num / 7;
        }
        result = num + result;
        return isNegative ? "-"+result : result;
