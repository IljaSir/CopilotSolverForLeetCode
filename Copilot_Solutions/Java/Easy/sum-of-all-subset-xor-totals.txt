Synthesizing 10/10 solutions

=======

        int n = nums.length;
        int sum = 0;
        for (int i = 0; i < (1 << n); i++) {
            int xor = 0;
            for (int j = 0; j < n; j++) {
                if ((i & (1 << j)) != 0) {
                    xor ^= nums[j];
                }
            }
            sum += xor;
        }
        return sum;

=======

        int sum = 0;
        for (int i = 1; i < (1 << nums.length); i++) {
            int xor = 0;
            for (int j = 0; j < nums.length; j++) {
                if ((i & (1 << j)) > 0) {
                    xor ^= nums[j];
                }
            }
            sum += xor;
        }
        return sum;

=======

        return subsetXORSum(nums, 0, 0);
    }
    
    public int subsetXORSum(int[] nums, int i, int xor) {
        if (i == nums.length) {
            return xor;
        }
        return subsetXORSum(nums, i + 1, xor) + subsetXORSum(nums, i + 1, xor ^ nums[i]);

=======

        int n = nums.length;
        int[] dp = new int[1 << n];
        for (int i = 0; i < 1 << n; i++) {
            for (int j = 0; j < n; j++) {
                if ((i & (1 << j)) > 0) {
                    dp[i] = dp[i ^ (1 << j)] ^ nums[j];
                    break;
                }
            }
        }
        int res = 0;
        for (int i = 0; i < 1 << n; i++) {
            res += dp[i];
        }
        return res;

=======

        int sum = 0;
        for (int i = 0; i < nums.length; i++) {
            sum = sum ^ nums[i];
        }
        return sum * (int) Math.pow(2, nums.length - 1);

=======

        int sum = 0;
        for (int i = 0; i < nums.length; i++) {
            sum += nums[i];
        }
        return sum * (1 << (nums.length - 1));

=======

        int sum = 0;
        for (int i = 0; i < nums.length; i++) {
            sum += subsetXORSum(nums, i, nums[i]);
        }
        return sum;
    }

    public int subsetXORSum(int[] nums, int index, int xor) {
        if (index == nums.length - 1) {
            return xor;
        }
        int sum = 0;
        for (int i = index + 1; i < nums.length; i++) {
            sum += subsetXORSum(nums, i, xor ^ nums[i]);
        }
        return sum + xor;

=======

        int n = nums.length;
        int[] dp = new int[1<<n];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < (1<<n); j++) {
                if ((j & (1<<i)) > 0) {
                    dp[j] = dp[j^(1<<i)] ^ nums[i];
                }
            }
        }
        int sum = 0;
        for (int i = 0; i < (1<<n); i++) {
            sum += dp[i];
        }
        return sum;

=======

        int sum = 0;
        for (int i = 0; i < nums.length; i++) {
            sum += nums[i];
        }
        int max = (int) Math.pow(2, nums.length) - 1;
        for (int i = 1; i <= max; i++) {
            int xor = 0;
            for (int j = 0; j < nums.length; j++) {
                if ((i & (1 << j)) != 0) {
                    xor ^= nums[j];
                }
            }
            sum += xor;
        }
        return sum;

=======

        int n = nums.length;
        int[] result = new int[n];
        for (int i = 0; i < n; i++) {
            result[i] = nums[i];
        }
        for (int i = 1; i < n; i++) {
            for (int j = 0; j < n - i; j++) {
                result[j] ^= result[j + 1];
            }
        }
        int sum = 0;
        for (int i = 0; i < n; i++) {
            sum += result[i];
        }
        return sum;
