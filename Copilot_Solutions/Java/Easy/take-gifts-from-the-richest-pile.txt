Synthesizing 10/10 solutions

=======

        PriorityQueue<Integer> pq = new PriorityQueue<>(Collections.reverseOrder());
        for (int i = 0; i < gifts.length; i++) {
            pq.add(gifts[i]);
        }
        for (int i = 0; i < k; i++) {
            int max = pq.poll();
            int left = (int) Math.floor(Math.sqrt(max));
            max -= left;
            pq.add(max);
        }
        long ans = 0;
        while (!pq.isEmpty()) {
            ans += pq.poll();
        }
        return ans;

=======

        PriorityQueue<Integer> pq = new PriorityQueue<>(Collections.reverseOrder());
        for (int gift : gifts) {
            pq.add(gift);
        }
        for (int i = 0; i < k; i++) {
            int gift = pq.poll();
            pq.add((int) Math.floor(Math.sqrt(gift)));
        }
        long ans = 0;
        for (int gift : pq) {
            ans += gift;
        }
        return ans;

=======

        PriorityQueue<Integer> pq = new PriorityQueue<>(Collections.reverseOrder());
        for(int i = 0; i < gifts.length; i++) {
            pq.add(gifts[i]);
        }
        for(int i = 0; i < k; i++) {
            int top = pq.poll();
            pq.add((int)Math.floor(Math.sqrt(top)));
        }
        long sum = 0;
        for(Integer i : pq) {
            sum += i;
        }
        return sum;

=======

        PriorityQueue<Integer> pq = new PriorityQueue<>((a, b) -> b - a);
        for (int gift : gifts) {
            pq.add(gift);
        }
        while (k-- > 0) {
            int gift = pq.remove();
            int sqrt = (int) Math.sqrt(gift);
            int rest = gift - sqrt;
            if (rest > 0) {
                pq.add(rest);
            }
        }
        long sum = 0;
        while (!pq.isEmpty()) {
            sum += pq.remove();
        }
        return sum;

=======

        PriorityQueue<Integer> q = new PriorityQueue<>(Collections.reverseOrder());
        for (int i = 0; i < gifts.length; i++) {
            q.add(gifts[i]);
        }
        while (k > 0) {
            int max = q.poll();
            q.add(max - (int)Math.floor(Math.sqrt(max)));
            k--;
        }
        long sum = 0;
        while (!q.isEmpty()) {
            sum += q.poll();
        }
        return sum;

=======

        PriorityQueue<Integer> pq = new PriorityQueue<Integer>(Collections.reverseOrder());
        for (int i = 0; i < gifts.length; i++) {
            pq.add(gifts[i]);
        }
        while (k-- > 0) {
            int max = pq.poll();
            pq.add((int) Math.floor(Math.sqrt(max)));
        }
        long res = 0;
        while (!pq.isEmpty()) {
            res += pq.poll();
        }
        return res;

=======

        long ans = 0;
        for (int i = 0; i < k; i++) {
            int max = 0;
            int index = 0;
            for (int j = 0; j < gifts.length; j++) {
                if (gifts[j] > max) {
                    max = gifts[j];
                    index = j;
                }
            }
            gifts[index] = (int) Math.floor(Math.sqrt(gifts[index]));
        }
        for (int i = 0; i < gifts.length; i++) {
            ans += gifts[i];
        }
        return ans;

=======

        PriorityQueue<Long> maxHeap = new PriorityQueue<Long>(Collections.reverseOrder());
        for(int i = 0; i < gifts.length; i++) {
            maxHeap.add((long)gifts[i]);
        }
        for(int i = 0; i < k; i++) {
            long max = maxHeap.poll();
            maxHeap.add(max - (long)Math.sqrt(max));
        }
        long ans = 0;
        for(Long l : maxHeap) {
            ans += l;
        }
        return ans;

=======

        PriorityQueue<Integer> pq = new PriorityQueue<>(Collections.reverseOrder());
        for(int i : gifts) pq.add(i);
        while(k-- > 0) {
            int x = (int) Math.sqrt(pq.poll());
            pq.add(x);
        }
        long ans = 0;
        for(int i : pq) ans += i;
        return ans;

=======

        long[] giftsCount = new long[1000001];
        for (int gift : gifts) {
            giftsCount[gift]++;
        }
        long sum = 0;
        for (int i = giftsCount.length - 1; i >= 0; i--) {
            if (giftsCount[i] == 0) {
                continue;
            }
            if (k >= giftsCount[i]) {
                sum += giftsCount[i] * i;
                k -= giftsCount[i];
            } else {
                sum += k * i;
                break;
            }
        }
        return sum;
