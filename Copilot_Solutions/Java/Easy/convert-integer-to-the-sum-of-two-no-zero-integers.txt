Synthesizing 10/10 solutions

=======

        for (int i = 1; i < n; i++) {
            if (noZero(i) && noZero(n - i)) {
                return new int[]{i, n - i};
            }
        }
        return new int[]{};
    }
    
    private boolean noZero(int n) {
        while (n > 0) {
            if (n % 10 == 0) {
                return false;
            }
            n /= 10;
        }
        return true;

=======

        for (int i = 1; i < n; i++) {
            if (noZero(i) && noZero(n - i)) {
                return new int[]{i, n - i};
            }
        }
        return null;
    }
    private boolean noZero(int n) {
        while (n != 0) {
            if (n % 10 == 0) {
                return false;
            }
            n /= 10;
        }
        return true;

=======

        int[] res = new int[2];
        for (int i = 1; i < n; i++) {
            if (!String.valueOf(i).contains("0") && !String.valueOf(n - i).contains("0")) {
                res[0] = i;
                res[1] = n - i;
                break;
            }
        }
        return res;

=======

        int[] result = new int[2];
        for (int i = 1; i < n; i++) {
            if (noZero(i) && noZero(n - i)) {
                result[0] = i;
                result[1] = n - i;
                break;
            }
        }
        return result;
    }
    public boolean noZero(int n) {
        while (n > 0) {
            if (n % 10 == 0) {
                return false;
            }
            n /= 10;
        }
        return true;

=======

        int[] result = new int[2];
        for (int i = 1; i < n; i++) {
            if (check(i) && check(n - i)) {
                result[0] = i;
                result[1] = n - i;
                break;
            }
        }
        return result;
    }
    
    private boolean check(int n) {
        while (n > 0) {
            if (n % 10 == 0) {
                return false;
            }
            n /= 10;
        }
        return true;

=======

        for (int i = 1; i < n; i++) {
            if (check(i) && check(n - i)) {
                return new int[] {i, n - i};
            }
        }
        return new int[0];
    }
    private boolean check(int n) {
        while (n > 0) {
            int digit = n % 10;
            if (digit == 0) {
                return false;
            }
            n /= 10;
        }
        return true;

=======

        int[] result = new int[2];
        for(int i = 1; i < n; i++){
            if(!String.valueOf(i).contains("0") && !String.valueOf(n - i).contains("0")){
                result[0] = i;
                result[1] = n - i;
                return result;
            }
        }
        return result;

=======

        int[] result = new int[2];
        for (int i = 1; i < n; i++) {
            if (Integer.toString(i).indexOf('0') == -1 && Integer.toString(n - i).indexOf('0') == -1) {
                result[0] = i;
                result[1] = n - i;
                break;
            }
        }
        return result;

=======

        int result[] = new int[2];
        for (int i = 1; i < n; i++) {
            if (noZero(i) && noZero(n - i)) {
                result[0] = i;
                result[1] = n - i;
                break;
            }
        }
        return result;
    }

    public boolean noZero(int n) {
        while (n > 0) {
            if (n % 10 == 0) {
                return false;
            }
            n /= 10;
        }
        return true;

=======

        int[] result = new int[2];
        for(int i = 1; i < n; i++){
            if(!isZero(i) && !isZero(n-i)){
                result[0] = i;
                result[1] = n - i;
                break;
            }
        }
        return result;
    }
    public boolean isZero(int n){
        while(n > 0){
            if(n%10 == 0){
                return true;
            }
            n /= 10;
        }
        return false;
