Synthesizing 10/10 solutions (Duplicates hidden)

=======

        PriorityQueue<Integer> pq = new PriorityQueue<>((a, b) -> b - a);
        for (int stone : stones) {
            pq.offer(stone);
        }
        while (pq.size() > 1) {
            int a = pq.poll();
            int b = pq.poll();
            if (a != b) {
                pq.offer(a - b);
            }
        }
        return pq.isEmpty() ? 0 : pq.poll();

=======

        PriorityQueue<Integer> pq = new PriorityQueue<>((a, b) -> b - a);
        for (int stone : stones) {
            pq.offer(stone);
        }
        while (pq.size() > 1) {
            int y = pq.poll();
            int x = pq.poll();
            if (x < y) {
                pq.offer(y - x);
            }
        }
        return pq.isEmpty() ? 0 : pq.poll();

=======

        PriorityQueue<Integer> pq = new PriorityQueue<>((a, b) -> b - a);
        for (int stone : stones) {
            pq.add(stone);
        }
        while (pq.size() > 1) {
            int a = pq.poll();
            int b = pq.poll();
            if (a != b) {
                pq.add(a - b);
            }
        }
        return pq.isEmpty() ? 0 : pq.poll();

=======

        PriorityQueue<Integer> pq = new PriorityQueue<>((a, b) -> b - a);
        for (int stone : stones) {
            pq.add(stone);
        }
        while (pq.size() > 1) {
            int x = pq.poll();
            int y = pq.poll();
            if (x != y) {
                pq.add(x - y);
            }
        }
        return pq.isEmpty() ? 0 : pq.poll();

=======

        PriorityQueue<Integer> pq = new PriorityQueue<>(Collections.reverseOrder());
        for (int stone : stones) {
            pq.add(stone);
        }
        while (pq.size() > 1) {
            int x = pq.poll();
            int y = pq.poll();
            if (x != y) {
                pq.add(x - y);
            }
        }
        return pq.isEmpty() ? 0 : pq.poll();

=======

        PriorityQueue<Integer> pq = new PriorityQueue<>(Collections.reverseOrder());
        for (int stone : stones) {
            pq.add(stone);
        }
        while (pq.size() > 1) {
            int x = pq.poll();
            int y = pq.poll();
            if (x > y) {
                pq.add(x - y);
            }
        }
        return pq.size() == 0 ? 0 : pq.poll();

=======

        PriorityQueue<Integer> pq = new PriorityQueue<>(Collections.reverseOrder());
        for (int stone : stones) {
            pq.offer(stone);
        }
        while (pq.size() > 1) {
            int x = pq.poll();
            int y = pq.poll();
            if (x != y) {
                pq.offer(x - y);
            }
        }
        return pq.isEmpty() ? 0 : pq.poll();

=======

        PriorityQueue<Integer> queue = new PriorityQueue<>(Collections.reverseOrder());
        for (int stone : stones) {
            queue.add(stone);
        }
        while (queue.size() > 1) {
            int y = queue.poll();
            int x = queue.poll();
            if (x != y) {
                queue.add(y - x);
            }
        }
        return queue.size() == 0 ? 0 : queue.poll();

=======

        if (stones.length == 1) {
            return stones[0];
        }
        Arrays.sort(stones);
        int i = stones.length - 1;
        while (stones[i] == 0) {
            i--;
        }
        int y = stones[i];
        stones[i] = 0;
        i--;
        while (stones[i] == 0) {
            i--;
        }
        int x = stones[i];
        stones[i] = 0;
        if (x == y) {
            return lastStoneWeight(stones);
        } else {
            stones[i] = y - x;
            return lastStoneWeight(stones);
        }
