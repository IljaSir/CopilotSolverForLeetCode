Synthesizing 10/10 solutions

=======

        int max = Integer.MIN_VALUE;
        int min = Integer.MAX_VALUE;
        String s = String.valueOf(num);
        for (int i = 0; i < 10; i++) {
            for (int j = 0; j < 10; j++) {
                String t = s.replace(String.valueOf(i), String.valueOf(j));
                if (t.length() > 1 && t.charAt(0) == '0') {
                    continue;
                }
                int n = Integer.parseInt(t);
                max = Math.max(max, n);
                min = Math.min(min, n);
            }
        }
        return max - min;

=======

        String s = String.valueOf(num);
        int[] a = new int[10];
        for (int i = 0; i < s.length(); i++) {
            a[s.charAt(i) - '0']++;
        }
        int max = 0;
        int min = 0;
        int p = 1;
        for (int i = 9; i >= 0; i--) {
            while (a[i] > 0) {
                max += i * p;
                p *= 10;
                a[i]--;
            }
        }
        p = 1;
        for (int i = 0; i < 10; i++) {
            while (a[i] > 0) {
                min += i * p;
                p *= 10;
                a[i]--;
            }
        }
        return max - min;

=======

        int[] digits = new int[10];
        int max = 0;
        int min = 0;
        int n = num;
        while (n > 0) {
            digits[n % 10]++;
            n /= 10;
        }
        int i = 0;
        while (digits[i] == 0) {
            i++;
        }
        int j = 9;
        while (digits[j] == 0) {
            j--;
        }
        int maxDigit = j;
        int minDigit = i;
        if (maxDigit == minDigit) {
            return 0;
        }
        int k = 0;
        while (k < 10) {
            if (k == maxDigit) {
                max = max * 10 + minDigit;
            } else if (k == minDigit) {
                min = min * 10 + maxDigit;
            } else {
                max = max * 10 + k;
                min = min * 10 + k;
            }
            k++;
        }
        return max - min;

=======

        int max = 0;
        int min = 0;
        int[] digits = new int[10];
        int i = 0;
        while (num > 0) {
            digits[i++] = num % 10;
            num /= 10;
        }
        int[] digits2 = new int[i];
        int[] digits3 = new int[i];
        int[] digits4 = new int[i];
        for (int j = 0; j < i; j++) {
            digits2[j] = digits[j];
            digits3[j] = digits[j];
            digits4[j] = digits[j];
        }
        for (int j = 0; j < i; j++) {
            if (digits[j] != 9) {
                digits2[j] = 9;
                break;
            }
        }
        for (int j = 0; j < i; j++) {
            if (digits[j] != 0) {
                digits3[j] = 0;
                break;
            }
        }
        for (int j = 0; j < i; j++) {
            if (digits[j] != 9) {
                digits4[j] = 9;
                break;
            }
        }
        for (int j = 0; j < i; j++) {
            if (digits[j] != 0) {
                digits4[j] = 0;
                break;
            }
        }
        for (int j = 0; j < i; j++) {
            max = max * 10 + digits2[j];
        }
        for (int j = 0; j < i; j++) {
            min = min * 10 + digits3[j];
        }
        return max - min;

=======

        int[] min = new int[10];
        int[] max = new int[10];
        Arrays.fill(min, 10);
        Arrays.fill(max, -1);
        int n = num;
        int i = 0;
        while (n > 0) {
            int d = n % 10;
            min[d] = Math.min(min[d], i);
            max[d] = Math.max(max[d], i);
            n /= 10;
            i++;
        }
        int res = 0;
        for (int d = 0; d < 10; d++) {
            if (min[d] == 10) {
                continue;
            }
            int m = num;
            int j = 0;
            int a = 0;
            while (m > 0) {
                int dd = m % 10;
                if (j == min[d]) {
                    dd = d;
                }
                a = a * 10 + dd;
                m /= 10;
                j++;
            }
            res = Math.max(res, a - num);
            for (int dd = 0; dd < 10; dd++) {
                if (max[dd] == -1 || dd == d) {
                    continue;
                }
                m = num;
                j = 0;
                a = 0;
                while (m > 0) {
                    int ddd = m % 10;
                    if (j == max[dd]) {
                        ddd = dd;
                    }
                    a = a * 10 + ddd;
                    m /= 10;
                    j++;
                }
                res = Math.max(res, num - a);
            }
        }
        return res;

=======

        int[] arr = new int[10];
        int[] arr2 = new int[10];
        int[] arr3 = new int[10];
        int[] arr4 = new int[10];
        int[] arr5 = new int[10];
        int[] arr6 = new int[10];
        int[] arr7 = new int[10];
        int[] arr8 = new int[10];
        int[] arr9 = new int[10];
        int[] arr10 = new int[10];
        int[] arr11 = new int[10];
        int[] arr12 = new int[10];
        int[] arr13 = new int[10];
        int[] arr14 = new int[10];
        int[] arr15 = new int[10];
        int[] arr16 = new int[10];
        int[] arr17 = new int[10];
        int[] arr18 = new int[10];
        int[] arr19 = new int[10];
        int[] arr20 = new int[10];
        int[] arr21 = new int[10];
        int[] arr22 = new int[10];
        int[] arr23 = new int[10];
        int[] arr24 = new int[10];
        int[] arr25 = new int[10];
        int[] arr26 = new int[10];
        int[] arr27 = new int[10];
        int[] arr28 = new int[10];
        int[] arr29 = new int[10];
        int[] arr30 = new int[10];
        int[] arr31 = new int[10];
        int[] arr32 = new int[10];
        int[] arr33 = new int[10];
        int[] arr34 = new int[10];
        int[] arr35 = new int[10];
        int[] arr36 = new int[10];
        int[] arr37 = new int[10];
        int[] arr38 = new int[10];
        int[] arr39 = new int[10];
        int[] arr40 = new int[10];
        int[] arr41 = new int[10];
        int[] arr42 = new int[10];
        int[] arr43 = new int[10];
        int[] arr44 = new int[10];
        int[] arr45 = new int[10];
        int[] arr46

=======

        int max = num, min = num;
        char[] numStr = String.valueOf(num).toCharArray();
        for (int i = 0; i < numStr.length; i++) {
            char[] maxStr = numStr.clone();
            char[] minStr = numStr.clone();
            for (char j = '0'; j <= '9'; j++) {
                if (numStr[i] == j) {
                    continue;
                }
                maxStr[i] = j;
                minStr[i] = j;
                max = Math.max(max, Integer.parseInt(String.valueOf(maxStr)));
                min = Math.min(min, Integer.parseInt(String.valueOf(minStr)));
            }
        }
        return max - min;

=======

        int max = num;
        int min = num;
        int[] maxDigits = new int[10];
        int[] minDigits = new int[10];
        int[] digits = new int[10];
        int i = 0;
        while (num > 0) {
            int d = num % 10;
            digits[i] = d;
            maxDigits[i] = d;
            minDigits[i] = d;
            num /= 10;
            i++;
        }
        int size = i;
        int maxDigit = 0;
        int minDigit = 9;
        for (i = 0; i < size; i++) {
            int d = digits[i];
            if (d > maxDigit) {
                maxDigit = d;
            }
            if (d < minDigit) {
                minDigit = d;
            }
        }
        int maxDiff = 0;
        int minDiff = 0;
        for (i = 0; i < size; i++) {
            if (digits[i] == maxDigit) {
                maxDigits[i] = minDigit;
            }
            if (digits[i] == minDigit) {
                minDigits[i] = maxDigit;
            }
            maxDiff = maxDiff * 10 + maxDigits[i];
            minDiff = minDiff * 10 + minDigits[i];
        }
        return maxDiff - minDiff;

=======

        int[] arr = new int[10];
        int min = 10, max = 0;
        int n = num;
        while (n > 0) {
            int d = n % 10;
            if (d < min)
                min = d;
            if (d > max)
                max = d;
            n /= 10;
        }
        if (min == max)
            return 0;
        n = num;
        while (n > 0) {
            int d = n % 10;
            if (d == min)
                arr[max] = 1;
            if (d == max)
                arr[min] = 1;
            n /= 10;
        }
        int m = 0, M = 0;
        for (int i = 0; i < 10; i++) {
            if (arr[i] == 1) {
                m = m * 10 + i;
                M = M * 10 + i;
            } else {
                m = m * 10 + min;
                M = M * 10 + max;
            }
        }
        return M - m;

=======

        int[] digits = new int[10];
        int max = 0;
        int min = 0;
        int maxDigit = 0;
        int minDigit = 0;
        int n = num;
        while (n > 0) {
            int digit = n % 10;
            digits[digit]++;
            maxDigit = Math.max(maxDigit, digit);
            minDigit = Math.min(minDigit, digit);
            n /= 10;
        }
        if (maxDigit == minDigit) {
            return 0;
        }
        int i = 0;
        while (digits[i] == 0) {
            i++;
        }
        if (i != minDigit) {
            min = num - digits[minDigit] * minDigit + digits[minDigit] * i;
        } else {
            i++;
            while (digits[i] == 0) {
                i++;
            }
            min = num - digits[minDigit] * minDigit + digits[minDigit] * i;
        }
        i = 9;
        while (digits[i] == 0) {
            i--;
        }
        if (i != maxDigit) {
            max = num - digits[maxDigit] * maxDigit + digits[maxDigit] * i;
        } else {
            i--;
            while (digits[i] == 0) {
                i--;
            }
            max = num - digits[maxDigit] * maxDigit + digits[maxDigit] * i;
        }
        return max - min;
