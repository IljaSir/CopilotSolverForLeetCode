Synthesizing 10/10 solutions

=======

        Map<Integer, Integer> map1 = new HashMap<>();
        Map<Integer, Integer> map2 = new HashMap<>();
        for (int[] item : items1) {
            map1.put(item[0], item[1]);
        }
        for (int[] item : items2) {
            map2.put(item[0], item[1]);
        }
        Map<Integer, Integer> map = new HashMap<>();
        for (int key : map1.keySet()) {
            map.put(key, map1.get(key));
        }
        for (int key : map2.keySet()) {
            if (map.containsKey(key)) {
                map.put(key, map.get(key) + map2.get(key));
            } else {
                map.put(key, map2.get(key));
            }
        }
        List<List<Integer>> res = new ArrayList<>();
        for (int key : map.keySet()) {
            List<Integer> list = new ArrayList<>();
            list.add(key);
            list.add(map.get(key));
            res.add(list);
        }
        res.sort((a, b) -> a.get(0) - b.get(0));
        return res;

=======

        Map<Integer, Integer> map1 = new HashMap<>();
        Map<Integer, Integer> map2 = new HashMap<>();
        for (int[] item : items1) {
            map1.put(item[0], item[1]);
        }
        for (int[] item : items2) {
            map2.put(item[0], item[1]);
        }
        List<List<Integer>> res = new ArrayList<>();
        for (int key : map1.keySet()) {
            if (map2.containsKey(key)) {
                res.add(Arrays.asList(key, map1.get(key) + map2.get(key)));
                map2.remove(key);
            }
        }
        for (int key : map1.keySet()) {
            res.add(Arrays.asList(key, map1.get(key)));
        }
        for (int key : map2.keySet()) {
            res.add(Arrays.asList(key, map2.get(key)));
        }
        Collections.sort(res, (a, b) -> a.get(0) - b.get(0));
        return res;

=======

        Map<Integer, Integer> map1 = new HashMap<>();
        Map<Integer, Integer> map2 = new HashMap<>();
        for (int[] item : items1) {
            map1.put(item[0], item[1]);
        }
        for (int[] item : items2) {
            map2.put(item[0], item[1]);
        }
        List<List<Integer>> ret = new ArrayList<>();
        for (Map.Entry<Integer, Integer> entry : map1.entrySet()) {
            int value = entry.getKey();
            int weight = entry.getValue();
            if (map2.containsKey(value)) {
                weight += map2.get(value);
                map2.remove(value);
            }
            ret.add(Arrays.asList(value, weight));
        }
        for (Map.Entry<Integer, Integer> entry : map2.entrySet()) {
            ret.add(Arrays.asList(entry.getKey(), entry.getValue()));
        }
        ret.sort((a, b) -> a.get(0) - b.get(0));
        return ret;

=======

        Map<Integer, Integer> map1 = new HashMap<>();
        Map<Integer, Integer> map2 = new HashMap<>();
        for (int[] item : items1) {
            map1.put(item[0], item[1]);
        }
        for (int[] item : items2) {
            map2.put(item[0], item[1]);
        }
        Map<Integer, Integer> map = new HashMap<>();
        for (int key : map1.keySet()) {
            if (map2.containsKey(key)) {
                map.put(key, map1.get(key) + map2.get(key));
            } else {
                map.put(key, map1.get(key));
            }
        }
        for (int key : map2.keySet()) {
            if (!map.containsKey(key)) {
                map.put(key, map2.get(key));
            }
        }
        List<List<Integer>> result = new ArrayList<>();
        for (int key : map.keySet()) {
            List<Integer> list = new ArrayList<>();
            list.add(key);
            list.add(map.get(key));
            result.add(list);
        }
        Collections.sort(result, new Comparator<List<Integer>>() {
            @Override
            public int compare(List<Integer> o1, List<Integer> o2) {
                return o1.get(0) - o2.get(0);
            }
        });
        return result;

=======

        Map<Integer, Integer> map = new HashMap<>();
        for (int[] item : items1) {
            map.put(item[0], map.getOrDefault(item[0], 0) + item[1]);
        }
        for (int[] item : items2) {
            map.put(item[0], map.getOrDefault(item[0], 0) + item[1]);
        }
        List<List<Integer>> ret = new ArrayList<>();
        for (int key : map.keySet()) {
            ret.add(Arrays.asList(key, map.get(key)));
        }
        ret.sort((a, b) -> a.get(0) - b.get(0));
        return ret;

=======

        Map<Integer, Integer> map1 = new HashMap<>();
        for (int[] item : items1) {
            map1.put(item[0], item[1]);
        }
        Map<Integer, Integer> map2 = new HashMap<>();
        for (int[] item : items2) {
            map2.put(item[0], item[1]);
        }
        Map<Integer, Integer> map = new HashMap<>();
        for (int key : map1.keySet()) {
            if (map2.containsKey(key)) {
                map.put(key, map1.get(key) + map2.get(key));
            } else {
                map.put(key, map1.get(key));
            }
        }
        for (int key : map2.keySet()) {
            if (!map1.containsKey(key)) {
                map.put(key, map2.get(key));
            }
        }
        List<List<Integer>> ret = new ArrayList<>();
        for (int key : map.keySet()) {
            ret.add(Arrays.asList(key, map.get(key)));
        }
        Collections.sort(ret, (a, b) -> a.get(0) - b.get(0));
        return ret;

=======

        Map<Integer, Integer> map1 = new HashMap<>();
        for (int[] item : items1) {
            map1.put(item[0], item[1]);
        }
        Map<Integer, Integer> map2 = new HashMap<>();
        for (int[] item : items2) {
            map2.put(item[0], item[1]);
        }
        List<List<Integer>> res = new ArrayList<>();
        for (Map.Entry<Integer, Integer> entry : map1.entrySet()) {
            int value = entry.getKey();
            int weight = entry.getValue();
            if (map2.containsKey(value)) {
                weight += map2.get(value);
                map2.remove(value);
            }
            res.add(Arrays.asList(value, weight));
        }
        for (Map.Entry<Integer, Integer> entry : map2.entrySet()) {
            res.add(Arrays.asList(entry.getKey(), entry.getValue()));
        }
        res.sort((a, b) -> a.get(0) - b.get(0));
        return res;

=======

        TreeMap<Integer, Integer> map = new TreeMap<>();
        for (int[] item : items1) {
            map.put(item[0], map.getOrDefault(item[0], 0) + item[1]);
        }
        for (int[] item : items2) {
            map.put(item[0], map.getOrDefault(item[0], 0) + item[1]);
        }
        List<List<Integer>> result = new ArrayList<>();
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            result.add(Arrays.asList(entry.getKey(), entry.getValue()));
        }
        return result;

=======

        List<List<Integer>> result = new ArrayList<>();
        Map<Integer, Integer> map1 = new HashMap<>();
        Map<Integer, Integer> map2 = new HashMap<>();
        for (int[] item : items1) {
            map1.put(item[0], item[1]);
        }
        for (int[] item : items2) {
            map2.put(item[0], item[1]);
        }
        for (int key : map1.keySet()) {
            if (map2.containsKey(key)) {
                map2.put(key, map2.get(key) + map1.get(key));
            } else {
                map2.put(key, map1.get(key));
            }
        }
        for (int key : map2.keySet()) {
            List<Integer> list = new ArrayList<>();
            list.add(key);
            list.add(map2.get(key));
            result.add(list);
        }
        Collections.sort(result, (a, b) -> a.get(0) - b.get(0));
        return result;

=======

        List<List<Integer>> result = new ArrayList<>();
        Map<Integer, Integer> map1 = new HashMap<>();
        Map<Integer, Integer> map2 = new HashMap<>();
        for (int i = 0; i < items1.length; i++) {
            map1.put(items1[i][0], items1[i][1]);
        }
        for (int i = 0; i < items2.length; i++) {
            map2.put(items2[i][0], items2[i][1]);
        }
        for (int key : map1.keySet()) {
            if (map2.containsKey(key)) {
                result.add(Arrays.asList(key, map1.get(key) + map2.get(key)));
                map2.remove(key);
            } else {
                result.add(Arrays.asList(key, map1.get(key)));
            }
        }
        for (int key : map2.keySet()) {
            result.add(Arrays.asList(key, map2.get(key)));
        }
        return result;
