Synthesizing 10/10 solutions

=======

        List<Integer> result = new ArrayList<>();
        for (int i = left; i <= right; i++) {
            if (isSelfDividing(i)) {
                result.add(i);
            }
        }
        return result;
    }
    
    private boolean isSelfDividing(int num) {
        int n = num;
        while (n > 0) {
            int digit = n % 10;
            if (digit == 0 || num % digit != 0) {
                return false;
            }
            n /= 10;
        }
        return true;
    }
}

=======

        List<Integer> result = new ArrayList<>();
        for (int i = left; i <= right; i++) {
            if (isSelfDividing(i)) {
                result.add(i);
            }
        }
        return result;
    }
    private boolean isSelfDividing(int num) {
        int temp = num;
        while (temp > 0) {
            int digit = temp % 10;
            if (digit == 0 || num % digit != 0) {
                return false;
            }
            temp /= 10;
        }
        return true;

=======

        List<Integer> result = new ArrayList<>();
        for (int i = left; i <= right; i++) {
            if (isSelfDividing(i)) {
                result.add(i);
            }
        }
        return result;
    }
    private boolean isSelfDividing(int num) {
        int n = num;
        while (n > 0) {
            int digit = n % 10;
            if (digit == 0 || num % digit != 0) {
                return false;
            }
            n /= 10;
        }
        return true;

=======

        List<Integer> result = new ArrayList<>();
        for (int i = left; i <= right; i++) {
            if (isSelfDividing(i)) {
                result.add(i);
            }
        }
        return result;
    }

    private boolean isSelfDividing(int num) {
        int temp = num;
        while (temp != 0) {
            int digit = temp % 10;
            if (digit == 0 || num % digit != 0) {
                return false;
            }
            temp /= 10;
        }
        return true;

=======

        List<Integer> result = new ArrayList<Integer>();
        for (int i = left; i <= right; i++) {
            if (isSelfDividingNumber(i)) {
                result.add(i);
            }
        }
        return result;
    }
    
    private boolean isSelfDividingNumber(int num) {
        int n = num;
        while (n > 0) {
            int digit = n % 10;
            if (digit == 0 || num % digit != 0) {
                return false;
            }
            n /= 10;
        }
        return true;

=======

        List<Integer> res = new ArrayList<>();
        for (int i = left; i <= right; i++) {
            if (isSelfDividing(i)) {
                res.add(i);
            }
        }
        return res;
    }

    private boolean isSelfDividing(int n) {
        int num = n;
        while (num > 0) {
            int digit = num % 10;
            if (digit == 0 || n % digit != 0) {
                return false;
            }
            num /= 10;
        }
        return true;

=======

        List<Integer> result = new ArrayList<>();
        for(int i = left; i <= right; i++) {
            if(isSelfDividing(i)) {
                result.add(i);
            }
        }
        return result;
    }
    
    private boolean isSelfDividing(int n) {
        int temp = n;
        while(temp > 0) {
            int digit = temp % 10;
            if(digit == 0 || n % digit != 0) {
                return false;
            }
            temp /= 10;
        }
        return true;

=======

        List<Integer> list = new ArrayList();
        for (int i = left; i <= right; i++) {
            if (isSelfDividing(i)) {
                list.add(i);
            }
        }
        return list;
    }
    public boolean isSelfDividing(int n) {
        int t = n;
        while (t != 0) {
            int d = t % 10;
            if (d == 0 || n % d != 0) {
                return false;
            }
            t /= 10;
        }
        return true;

=======

        List<Integer> result = new ArrayList<>();
        for(int i = left; i <= right; i++) {
            boolean isSelfDividingNumber = true;
            int temp = i;
            while(temp > 0) {
                int digit = temp % 10;
                if(digit == 0 || i % digit != 0) {
                    isSelfDividingNumber = false;
                    break;
                }
                temp /= 10;
            }
            if(isSelfDividingNumber) result.add(i);
        }
        return result;

=======

        List<Integer> list = new ArrayList<Integer>();
        for (int i = left; i <= right; i++) {
            int temp = i;
            boolean check = true;
            while (temp > 0) {
                int digit = temp % 10;
                if (digit == 0 || i % digit != 0) {
                    check = false;
                    break;
                }
                temp = temp / 10;
            }
            if (check) {
                list.add(i);
            }
        }
        return list;
