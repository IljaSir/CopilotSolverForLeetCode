Synthesizing 10/10 solutions

=======

        int count = 0;
        for (int i = 0; i < s1.length(); i++) {
            if (s1.charAt(i) != s2.charAt(i)) {
                count++;
            }
        }
        if (count > 2) {
            return false;
        }
        char[] s1Array = s1.toCharArray();
        char[] s2Array = s2.toCharArray();
        Arrays.sort(s1Array);
        Arrays.sort(s2Array);
        return Arrays.equals(s1Array, s2Array);

=======

        if (s1.equals(s2)) {
            return true;
        }
        int first = -1;
        int second = -1;
        for (int i = 0; i < s1.length(); i++) {
            if (s1.charAt(i) != s2.charAt(i)) {
                if (first == -1) {
                    first = i;
                } else if (second == -1) {
                    second = i;
                } else {
                    return false;
                }
            }
        }
        return second != -1 && s1.charAt(first) == s2.charAt(second) && s1.charAt(second) == s2.charAt(first);

=======

        int n = s1.length();
        if (s1.equals(s2)) {
            return true;
        }
        int count = 0;
        for (int i = 0; i < n; i++) {
            if (s1.charAt(i) != s2.charAt(i)) {
                count++;
            }
        }
        if (count > 2) {
            return false;
        }
        char[] s1Arr = s1.toCharArray();
        char[] s2Arr = s2.toCharArray();
        Arrays.sort(s1Arr);
        Arrays.sort(s2Arr);
        return Arrays.equals(s1Arr, s2Arr);

=======

        if (s1.equals(s2)) return true;
        int n = s1.length();
        int[] diff = new int[2];
        int diffCount = 0;
        for (int i = 0; i < n; i++) {
            if (s1.charAt(i) != s2.charAt(i)) {
                if (diffCount == 2) return false;
                diff[diffCount++] = i;
            }
        }
        if (diffCount == 1) return false;
        return s1.charAt(diff[0]) == s2.charAt(diff[1]) && s1.charAt(diff[1]) == s2.charAt(diff[0]);

=======

        if (s1.equals(s2)) return true;
        if (s1.length() != s2.length()) return false;
        int diff = 0;
        char[] s1Chars = s1.toCharArray();
        char[] s2Chars = s2.toCharArray();
        for (int i = 0; i < s1Chars.length; i++) {
            if (s1Chars[i] != s2Chars[i]) {
                diff++;
            }
        }
        if (diff != 2) return false;
        Arrays.sort(s1Chars);
        Arrays.sort(s2Chars);
        return Arrays.equals(s1Chars, s2Chars);

=======

        if (s1.length() != s2.length()) {
            return false;
        }
        int n = s1.length();
        int cnt = 0;
        int[] pos = new int[2];
        for (int i = 0; i < n; ++i) {
            if (s1.charAt(i) != s2.charAt(i)) {
                ++cnt;
                pos[cnt - 1] = i;
            }
        }
        if (cnt == 0) {
            return true;
        }
        if (cnt == 2) {
            return s1.charAt(pos[0]) == s2.charAt(pos[1]) && s1.charAt(pos[1]) == s2.charAt(pos[0]);
        }
        return false;

=======

        boolean f = true;
        int c = 0;
        for (int i = 0; i < s1.length(); i++) {
            if (s1.charAt(i) != s2.charAt(i)) {
                c++;
                if (c > 2) {
                    f = false;
                    break;
                }
            }
        }
        if (c == 1) {
            f = false;
        }
        if (c == 2) {
            char[] a = s1.toCharArray();
            char[] b = s2.toCharArray();
            char t = a[0];
            a[0] = a[1];
            a[1] = t;
            if (String.valueOf(a).equals(String.valueOf(b))) {
                f = true;
            }
        }
        return f;

=======

        int n = s1.length();
        if (s1.equals(s2)) return true;
        int count = 0;
        int idx1 = -1;
        int idx2 = -1;
        for (int i = 0; i < n; i++) {
            if (s1.charAt(i) != s2.charAt(i)) {
                count++;
                if (count > 2) return false;
                else if (count == 1) {
                    idx1 = i;
                } else {
                    idx2 = i;
                }
            }
        }
        if (count == 2) {
            return s1.charAt(idx1) == s2.charAt(idx2) && s1.charAt(idx2) == s2.charAt(idx1);
        } else {
            return false;
        }

=======

        if(s1.equals(s2)) return true;
        int n = s1.length();
        char[] c1 = s1.toCharArray();
        char[] c2 = s2.toCharArray();
        int[] diff = new int[2];
        int count = 0;
        for(int i = 0; i < n; i++) {
            if(c1[i] != c2[i]) {
                if(count == 2) return false;
                diff[count++] = i;
            }
        }
        if(count == 1) return false;
        return c1[diff[0]] == c2[diff[1]] && c1[diff[1]] == c2[diff[0]];

=======

        if(s1.equals(s2)) return true;
        int i = 0;
        int j = -1;
        int k = -1;
        while(i<s1.length()){
            if(s1.charAt(i) != s2.charAt(i)){
                if(j<0) j = i;
                else if(k<0) k = i;
                else return false;
            }
            i++;
        }
        if(j<0 || k<0) return false;
        return s1.charAt(j) == s2.charAt(k) && s1.charAt(k) == s2.charAt(j);
