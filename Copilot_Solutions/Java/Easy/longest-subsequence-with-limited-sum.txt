Synthesizing 10/10 solutions

=======

        Arrays.sort(nums);
        int[] answer = new int[queries.length];
        for (int i = 0; i < queries.length; i++) {
            answer[i] = binarySearch(nums, queries[i]);
        }
        return answer;
    }
    private int binarySearch(int[] nums, int target) {
        int left = 0, right = nums.length - 1;
        while (left <= right) {
            int mid = left + (right - left) / 2;
            if (nums[mid] <= target) {
                left = mid + 1;
            } else {
                right = mid - 1;
            }
        }
        return left;

=======

        int n = nums.length;
        int m = queries.length;
        int[] ans = new int[m];
        Arrays.sort(nums);
        for (int i = 0; i < m; i++) {
            ans[i] = bs(nums, queries[i]);
        }
        return ans;
    }
    public int bs(int[] a, int target) {
        int l = 0;
        int r = a.length - 1;
        while (l <= r) {
            int mid = l + (r - l) / 2;
            if (a[mid] <= target) {
                l = mid + 1;
            } else {
                r = mid - 1;
            }
        }
        return r + 1;

=======

        int[] answer = new int[queries.length];
        for (int i = 0; i < queries.length; i++) {
            int max = 0;
            for (int j = 0; j < nums.length; j++) {
                int sum = 0;
                for (int k = j; k < nums.length; k++) {
                    sum += nums[k];
                    if (sum <= queries[i]) {
                        max = Math.max(max, k - j + 1);
                    }
                }
            }
            answer[i] = max;
        }
        return answer;

=======

        int[] result = new int[queries.length];
        for (int i = 0; i < queries.length; i++) {
            int sum = 0;
            int count = 0;
            for (int j = 0; j < nums.length; j++) {
                if (sum + nums[j] <= queries[i]) {
                    sum += nums[j];
                    count++;
                }
            }
            result[i] = count;
        }
        return result;
    }
}

=======

        int n = nums.length;
        int m = queries.length;
        int[] ans = new int[m];
        int[][] q = new int[m][2];
        for (int i = 0; i < m; i++) {
            q[i][0] = queries[i];
            q[i][1] = i;
        }
        Arrays.sort(q, (a, b) -> a[0] - b[0]);
        Arrays.sort(nums);
        int j = 0;
        for (int i = 0; i < m; i++) {
            while (j < n && nums[j] <= q[i][0]) {
                j++;
            }
            ans[q[i][1]] = j;
        }
        return ans;

=======

        int[] answer = new int[queries.length];
        Arrays.sort(nums);
        for (int i = 0; i < queries.length; i++) {
            int query = queries[i];
            int left = 0;
            int right = nums.length - 1;
            while (left <= right) {
                int mid = (left + right) / 2;
                if (nums[mid] <= query) {
                    left = mid + 1;
                } else {
                    right = mid - 1;
                }
            }
            answer[i] = left;
        }
        return answer;

=======

        int[] answer = new int[queries.length];
        Arrays.sort(nums);
        int[] prefixSum = new int[nums.length + 1];
        for (int i = 0; i < nums.length; i++) {
            prefixSum[i + 1] = prefixSum[i] + nums[i];
        }
        for (int i = 0; i < queries.length; i++) {
            int start = 0;
            int end = nums.length - 1;
            int result = -1;
            while (start <= end) {
                int mid = start + (end - start) / 2;
                if (prefixSum[mid + 1] <= queries[i]) {
                    result = mid;
                    start = mid + 1;
                } else {
                    end = mid - 1;
                }
            }
            answer[i] = result + 1;
        }
        return answer;

=======

        int[] answer = new int[queries.length];
        int[] sum = new int[nums.length];
        sum[0] = nums[0];
        for (int i = 1; i < nums.length; i++)
            sum[i] = sum[i-1] + nums[i];
        for (int i = 0; i < queries.length; i++) {
            int left = 0;
            int right = nums.length - 1;
            int mid = 0;
            while (left <= right) {
                mid = left + (right - left) / 2;
                if (sum[mid] <= queries[i])
                    left = mid + 1;
                else
                    right = mid - 1;
            }
            if (sum[mid] > queries[i])
                mid--;
            answer[i] = mid + 1;
        }
        return answer;

=======

        int[] ans = new int[queries.length];
        for(int i=0;i<queries.length;i++){
            int sum = 0;
            int count = 0;
            for(int j=0;j<nums.length;j++){
                if(sum+nums[j]<=queries[i]){
                    sum+=nums[j];
                    count++;
                }
            }
            ans[i] = count;
        }
        return ans;

=======

        int[] answer = new int[queries.length];
        for(int i = 0; i < queries.length; i++){
            int count = 0;
            int sum = 0;
            int j = 0;
            while(j < nums.length && sum < queries[i]){
                if(sum + nums[j] <= queries[i]){
                    sum += nums[j];
                    count++;
                }
                j++;
            }
            answer[i] = count;
        }
        return answer;
