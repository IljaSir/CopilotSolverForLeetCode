Synthesizing 10/10 solutions

=======

        int spaces = 0;
        int words = 0;
        for (int i = 0; i < text.length(); i++) {
            if (text.charAt(i) == ' ') {
                spaces++;
            } else {
                words++;
            }
        }
        int spacesBetweenWords = words == 1 ? 0 : spaces / (words - 1);
        int extraSpaces = words == 1 ? spaces : spaces % (words - 1);
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < text.length(); i++) {
            if (text.charAt(i) != ' ') {
                sb.append(text.charAt(i));
            } else {
                if (words > 1) {
                    for (int j = 0; j < spacesBetweenWords; j++) {
                        sb.append(' ');
                    }
                }
                words--;
            }
        }
        for (int j = 0; j < extraSpaces; j++) {
            sb.append(' ');
        }
        return sb.toString();

=======

        int spaces = 0;
        int words = 0;
        for (int i = 0; i < text.length(); i++) {
            if (text.charAt(i) == ' ') {
                spaces++;
            }
        }
        String[] wordArray = text.trim().split("\\s+");
        words = wordArray.length;
        if (words == 1) {
            StringBuilder sb = new StringBuilder();
            sb.append(wordArray[0]);
            for (int i = 0; i < spaces; i++) {
                sb.append(' ');
            }
            return sb.toString();
        }
        int spacesBetween = spaces / (words - 1);
        int extraSpaces = spaces % (words - 1);
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < wordArray.length; i++) {
            sb.append(wordArray[i]);
            if (i < wordArray.length - 1) {
                for (int j = 0; j < spacesBetween; j++) {
                    sb.append(' ');
                }
            }
        }
        for (int i = 0; i < extraSpaces; i++) {
            sb.append(' ');
        }
        return sb.toString();

=======

        int spaces = 0;
        int words = 0;
        for (int i = 0; i < text.length(); i++) {
            if (text.charAt(i) == ' ') {
                spaces++;
            }
        }
        String[] wordsArr = text.trim().split(" ");
        words = wordsArr.length;
        if (words == 1) {
            return text.trim() + " ".repeat(spaces);
        }
        int spacesPerWord = spaces / (words - 1);
        int extraSpaces = spaces % (words - 1);
        String result = "";
        for (int i = 0; i < wordsArr.length - 1; i++) {
            result += wordsArr[i] + " ".repeat(spacesPerWord);
        }
        result += wordsArr[wordsArr.length - 1] + " ".repeat(extraSpaces);
        return result;

=======

        int spaces = 0;
        int words = 0;
        char[] arr = text.toCharArray();
        for (int i = 0; i < arr.length; i++) {
            if (arr[i] == ' ') {
                spaces++;
            }
        }
        String[] wordsArr = text.trim().split("\\s+");
        words = wordsArr.length;
        int spacesBetween = words > 1 ? spaces / (words - 1) : spaces;
        int spacesEnd = words > 1 ? spaces % (words - 1) : 0;
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < wordsArr.length; i++) {
            sb.append(wordsArr[i]);
            if (i < wordsArr.length - 1) {
                for (int j = 0; j < spacesBetween; j++) {
                    sb.append(' ');
                }
            }
        }
        for (int i = 0; i < spacesEnd; i++) {
            sb.append(' ');
        }
        return sb.toString();

=======

        int spaceCount = 0;
        List<String> words = new ArrayList<String>();
        String word = "";
        for (int i = 0; i < text.length(); i++) {
            if (text.charAt(i) == ' ') {
                spaceCount++;
                if (word.length() > 0) {
                    words.add(word);
                    word = "";
                }
            } else {
                word += text.charAt(i);
            }
        }
        if (word.length() > 0) {
            words.add(word);
        }
        String result = "";
        if (words.size() == 1) {
            result = words.get(0);
            for (int i = 0; i < spaceCount; i++) {
                result += " ";
            }
        } else {
            int spacesBetweenWords = spaceCount / (words.size() - 1);
            int remainingSpaces = spaceCount % (words.size() - 1);
            for (int i = 0; i < words.size(); i++) {
                result += words.get(i);
                if (i < words.size() - 1) {
                    for (int j = 0; j < spacesBetweenWords; j++) {
                        result += " ";
                    }
                }
            }
            for (int i = 0; i < remainingSpaces; i++) {
                result += " ";
            }
        }
        return result;

=======

        int spaces = 0;
        int words = 0;
        int i = 0;
        while (i < text.length()) {
            if (text.charAt(i) == ' ') {
                spaces++;
                while (i < text.length() && text.charAt(i) == ' ') {
                    i++;
                }
            } else {
                words++;
                while (i < text.length() && text.charAt(i) != ' ') {
                    i++;
                }
            }
        }
        if (words == 1) {
            return text.trim() + " ".repeat(spaces);
        }
        int spacesPerWord = spaces / (words - 1);
        int extraSpaces = spaces % (words - 1);
        StringBuilder sb = new StringBuilder();
        i = 0;
        while (i < text.length()) {
            if (text.charAt(i) == ' ') {
                while (i < text.length() && text.charAt(i) == ' ') {
                    i++;
                }
            } else {
                sb.append(text.charAt(i++));
                while (i < text.length() && text.charAt(i) != ' ') {
                    sb.append(text.charAt(i++));
                }
                if (words-- > 1) {
                    sb.append(" ".repeat(spacesPerWord));
                }
            }
        }
        sb.append(" ".repeat(extraSpaces));
        return sb.toString();

=======

        int spaceCount = 0;
        int wordCount = 0;
        int wordStart = -1;
        for (int i = 0; i < text.length(); i++) {
            if (text.charAt(i) == ' ') {
                spaceCount++;
                if (wordStart != -1) {
                    wordCount++;
                    wordStart = -1;
                }
            } else {
                if (wordStart == -1) {
                    wordStart = i;
                }
            }
        }
        if (wordStart != -1) {
            wordCount++;
        }
        StringBuilder sb = new StringBuilder();
        if (wordCount == 1) {
            sb.append(text.trim());
            for (int i = 0; i < spaceCount; i++) {
                sb.append(' ');
            }
        } else {
            int spaceCountPerWord = spaceCount / (wordCount - 1);
            int extraSpaceCount = spaceCount % (wordCount - 1);
            int wordStartIndex = -1;
            for (int i = 0; i < text.length(); i++) {
                if (text.charAt(i) == ' ') {
                    if (wordStartIndex != -1) {
                        sb.append(text.substring(wordStartIndex, i));
                        wordStartIndex = -1;
                        for (int j = 0; j < spaceCountPerWord; j++) {
                            sb.append(' ');
                        }
                    }
                } else {
                    if (wordStartIndex == -1) {
                        wordStartIndex = i;
                    }
                }
            }
            if (wordStartIndex != -1) {
                sb.append(text.substring(wordStartIndex));
            }
            for (int i = 0; i < extraSpaceCount; i++) {
                sb.append(' ');
            }
        }
        return sb.toString();

=======

        int spaces = 0;
        int words = 0;
        StringBuilder word = new StringBuilder();
        StringBuilder result = new StringBuilder();
        for (int i = 0; i < text.length(); i++) {
            char c = text.charAt(i);
            if (c == ' ') {
                spaces++;
                if (word.length() > 0) {
                    words++;
                    result.append(word);
                    word = new StringBuilder();
                }
            } else {
                word.append(c);
            }
        }
        if (word.length() > 0) {
            words++;
            result.append(word);
        }
        if (words > 1) {
            int spacesBetweenWords = spaces / (words - 1);
            int extraSpaces = spaces % (words - 1);
            String spacesBetweenWordsString = String.join("", Collections.nCopies(spacesBetweenWords, " "));
            String extraSpacesString = String.join("", Collections.nCopies(extraSpaces, " "));
            String[] wordsArray = result.toString().split(" ");
            result = new StringBuilder();
            for (int i = 0; i < wordsArray.length - 1; i++) {
                result.append(wordsArray[i]);
                result.append(spacesBetweenWordsString);
            }
            result.append(wordsArray[wordsArray.length - 1]);
            result.append(extraSpacesString);
        } else {
            result.append(String.join("", Collections.nCopies(spaces, " ")));
        }
        return result.toString();

=======

        int spaces = 0;
        int words = 0;
        String[] wordArray = text.split(" ");
        for (String word : wordArray) {
            if (word.length() > 0) {
                words++;
            }
        }
        for (char c : text.toCharArray()) {
            if (c == ' ') {
                spaces++;
            }
        }
        int numSpaces = 0;
        if (words > 1) {
            numSpaces = spaces / (words - 1);
        }
        StringBuilder sb = new StringBuilder();
        for (String word : wordArray) {
            if (word.length() > 0) {
                sb.append(word);
                for (int i = 0; i < numSpaces; i++) {
                    sb.append(' ');
                }
            }
        }
        for (int i = 0; i < (spaces - (words - 1) * numSpaces); i++) {
            sb.append(' ');
        }
        return sb.toString();

=======

        int count = 0;
        String[] words = text.split(" ");
        for (String word : words) {
            if (word.length() > 0) {
                count++;
            }
        }
        int n = words.length;
        int spaces = 0;
        for (int i = 0; i < text.length(); i++) {
            if (text.charAt(i) == ' ') {
                spaces++;
            }
        }
        if (count == 1) {
            return words[0] + " ".repeat(spaces);
        }
        int space = spaces / (count - 1);
        int extra = spaces % (count - 1);
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < n; i++) {
            if (words[i].length() > 0) {
                sb.append(words[i]);
                if (i < n - 1) {
                    sb.append(" ".repeat(space));
                }
            }
        }
        sb.append(" ".repeat(extra));
        return sb.toString();
