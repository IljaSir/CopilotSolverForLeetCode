Synthesizing 10/10 solutions

=======

        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < s.length(); i++) {
            sb.append(s.charAt(i) - 'a' + 1);
        }
        for (int i = 0; i < k; i++) {
            int sum = 0;
            for (int j = 0; j < sb.length(); j++) {
                sum += sb.charAt(j) - '0';
            }
            sb = new StringBuilder();
            sb.append(sum);
        }
        return Integer.parseInt(sb.toString());

=======

        StringBuilder sb = new StringBuilder();
        for (char c : s.toCharArray()) {
            sb.append(c - 'a' + 1);
        }
        String num = sb.toString();
        while (k-- > 0) {
            int sum = 0;
            for (char c : num.toCharArray()) {
                sum += c - '0';
            }
            num = String.valueOf(sum);
        }
        return Integer.parseInt(num);

=======

        int sum = 0;
        for (int i = 0; i < s.length(); i++) {
            int num = s.charAt(i) - 'a' + 1;
            while (num > 0) {
                sum += num % 10;
                num /= 10;
            }
        }

        while (--k > 0) {
            int temp = sum;
            sum = 0;
            while (temp > 0) {
                sum += temp % 10;
                temp /= 10;
            }
        }

        return sum;

=======

        String str = "";
        for (int i = 0; i < s.length(); i++) {
            str += (s.charAt(i) - 'a' + 1);
        }
        int sum = 0;
        for (int i = 0; i < k; i++) {
            for (int j = 0; j < str.length(); j++) {
                sum += str.charAt(j) - '0';
            }
            str = String.valueOf(sum);
            sum = 0;
        }
        return Integer.valueOf(str);

=======

        int[] num = new int[s.length()];
        for (int i = 0; i < s.length(); i++) {
            num[i] = s.charAt(i) - 'a' + 1;
        }
        int sum = 0;
        for (int i = 0; i < num.length; i++) {
            while (num[i] > 0) {
                sum += num[i] % 10;
                num[i] /= 10;
            }
        }
        for (int i = 1; i < k; i++) {
            int tmp = sum;
            sum = 0;
            while (tmp > 0) {
                sum += tmp % 10;
                tmp /= 10;
            }
        }
        return sum;

=======

        int[] nums = new int[s.length()];
        for (int i = 0; i < s.length(); i++) {
            nums[i] = s.charAt(i) - 'a' + 1;
        }
        String str = "";
        for (int n : nums) {
            str += n;
        }
        int sum = 0;
        while (k > 0) {
            sum = 0;
            for (int i = 0; i < str.length(); i++) {
                sum += Character.getNumericValue(str.charAt(i));
            }
            str = String.valueOf(sum);
            k--;
        }
        return sum;

=======

        String str = "";
        for (int i = 0; i < s.length(); i++) {
            str += (s.charAt(i) - 'a' + 1);
        }
        int ans = 0;
        for (int i = 0; i < k; i++) {
            ans = 0;
            for (int j = 0; j < str.length(); j++) {
                ans += str.charAt(j) - '0';
            }
            str = "" + ans;
        }
        return ans;

=======

        int sum = 0;
        for (char c : s.toCharArray()) {
            sum += c - 'a' + 1;
        }
        while (k-- > 0) {
            sum = digitSum(sum);
        }
        return sum;
    }

    private int digitSum(int n) {
        int sum = 0;
        while (n > 0) {
            sum += n % 10;
            n /= 10;
        }
        return sum;

=======

        String s1 = "";
        for (char c : s.toCharArray()) {
            s1 += (c - 'a' + 1);
        }
        int res = 0;
        for (int i = 0; i < k; i++) {
            res = 0;
            for (char c : s1.toCharArray()) {
                res += c - '0';
            }
            s1 = String.valueOf(res);
        }
        return res;

=======

        int sum = 0;
        for(char c: s.toCharArray()) {
            sum += c - 'a' + 1;
        }
        for(int i = 0; i < k; i++) {
            int sum1 = 0;
            while(sum > 0) {
                sum1 += sum % 10;
                sum /= 10;
            }
            sum = sum1;
        }
        return sum;
