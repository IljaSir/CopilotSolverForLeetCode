Synthesizing 10/10 solutions

=======

        Map<String, Integer> map1 = new HashMap<>();
        Map<String, Integer> map2 = new HashMap<>();
        for (String s : words1) {
            map1.put(s, map1.getOrDefault(s, 0) + 1);
        }
        for (String s : words2) {
            map2.put(s, map2.getOrDefault(s, 0) + 1);
        }
        int res = 0;
        for (String s : map1.keySet()) {
            if (map1.get(s) == 1 && map2.getOrDefault(s, 0) == 0) {
                res++;
            }
        }
        for (String s : map2.keySet()) {
            if (map2.get(s) == 1 && map1.getOrDefault(s, 0) == 0) {
                res++;
            }
        }
        return res;

=======

        Map<String, Integer> count1 = new HashMap<>();
        Map<String, Integer> count2 = new HashMap<>();
        for (String word : words1) {
            count1.put(word, count1.getOrDefault(word, 0) + 1);
        }
        for (String word : words2) {
            count2.put(word, count2.getOrDefault(word, 0) + 1);
        }
        int result = 0;
        for (String word : count1.keySet()) {
            if (count1.get(word) == 1 && count2.getOrDefault(word, 0) == 0) {
                result++;
            }
        }
        for (String word : count2.keySet()) {
            if (count2.get(word) == 1 && count1.getOrDefault(word, 0) == 0) {
                result++;
            }
        }
        return result;

=======

        int count = 0;
        Map<String, Integer> map1 = new HashMap<>();
        Map<String, Integer> map2 = new HashMap<>();
        for (String word : words1) {
            map1.put(word, map1.getOrDefault(word, 0) + 1);
        }
        for (String word : words2) {
            map2.put(word, map2.getOrDefault(word, 0) + 1);
        }
        for (Map.Entry<String, Integer> entry : map1.entrySet()) {
            if (entry.getValue() == 1 && map2.getOrDefault(entry.getKey(), 0) == 1) {
                count++;
            }
        }
        for (Map.Entry<String, Integer> entry : map2.entrySet()) {
            if (entry.getValue() == 1 && map1.getOrDefault(entry.getKey(), 0) == 1) {
                count++;
            }
        }
        return count;

=======

        Map<String, Integer> map = new HashMap<String, Integer>();
        for (String word : words1) {
            map.put(word, map.getOrDefault(word, 0) + 1);
        }
        for (String word : words2) {
            map.put(word, map.getOrDefault(word, 0) + 1);
        }
        int res = 0;
        for (String key : map.keySet()) {
            if (map.get(key) == 1) {
                res++;
            }
        }
        return res;

=======

        Map<String, Integer> wordCount1 = new HashMap<>();
        Map<String, Integer> wordCount2 = new HashMap<>();
        for (String word : words1) {
            wordCount1.put(word, wordCount1.getOrDefault(word, 0) + 1);
        }
        for (String word : words2) {
            wordCount2.put(word, wordCount2.getOrDefault(word, 0) + 1);
        }
        int ans = 0;
        for (String word : wordCount1.keySet()) {
            if (wordCount1.get(word) == 1 && wordCount2.containsKey(word) && wordCount2.get(word) == 1) {
                ans++;
            }
        }
        for (String word : wordCount2.keySet()) {
            if (wordCount2.get(word) == 1 && wordCount1.containsKey(word) && wordCount1.get(word) == 1) {
                ans++;
            }
        }
        return ans;

=======

        int count = 0;
        HashMap<String, Integer> map1 = new HashMap<>();
        HashMap<String, Integer> map2 = new HashMap<>();
        for (String word : words1) {
            map1.put(word, map1.getOrDefault(word, 0) + 1);
        }
        for (String word : words2) {
            map2.put(word, map2.getOrDefault(word, 0) + 1);
        }
        for (String key : map1.keySet()) {
            if (map1.get(key) == 1 && map2.containsKey(key) && map2.get(key) == 1) {
                count++;
            }
        }
        for (String key : map2.keySet()) {
            if (map2.get(key) == 1 && map1.containsKey(key) && map1.get(key) == 1) {
                count++;
            }
        }
        return count;

=======

        int count = 0;
        Map<String, Integer> map1 = new HashMap<>();
        Map<String, Integer> map2 = new HashMap<>();
        for (String word1 : words1) {
            map1.put(word1, map1.getOrDefault(word1, 0) + 1);
        }
        for (String word2 : words2) {
            map2.put(word2, map2.getOrDefault(word2, 0) + 1);
        }
        for (String key : map1.keySet()) {
            if (map1.get(key) == 1 && map2.containsKey(key) && map2.get(key) == 1) {
                count++;
            }
        }
        for (String key : map2.keySet()) {
            if (map2.get(key) == 1 && map1.containsKey(key) && map1.get(key) == 1) {
                count++;
            }
        }
        return count;

=======

        int count = 0;
        Map<String, Integer> map1 = new HashMap<String, Integer>();
        Map<String, Integer> map2 = new HashMap<String, Integer>();
        for(String word: words1){
            map1.put(word, map1.getOrDefault(word, 0) + 1);
        }
        for(String word: words2){
            map2.put(word, map2.getOrDefault(word, 0) + 1);
        }
        for(Map.Entry<String, Integer> entry: map1.entrySet()){
            if(entry.getValue() == 1 && map2.get(entry.getKey()) == null){
                count++;
            }
        }
        for(Map.Entry<String, Integer> entry: map2.entrySet()){
            if(entry.getValue() == 1 && map1.get(entry.getKey()) == null){
                count++;
            }
        }
        return count;

=======

        Set<String> set1 = new HashSet<>();
        Set<String> set2 = new HashSet<>();
        Set<String> set3 = new HashSet<>();
        Set<String> set4 = new HashSet<>();
        for (int i = 0; i < words1.length; i++) {
            if (!set1.contains(words1[i])) {
                set1.add(words1[i]);
            } else {
                set2.add(words1[i]);
            }
        }
        for (int i = 0; i < words2.length; i++) {
            if (!set3.contains(words2[i])) {
                set3.add(words2[i]);
            } else {
                set4.add(words2[i]);
            }
        }
        int count = 0;
        for (String s : set1) {
            if (!set3.contains(s) && !set4.contains(s)) {
                count++;
            }
        }
        for (String s : set3) {
            if (!set1.contains(s) && !set2.contains(s)) {
                count++;
            }
        }
        return count;

=======

        return count(words1, words2) + count(words2, words1);
    }

    private int count(String[] words1, String[] words2) {
        int count = 0;
        Map<String, Integer> map = new HashMap<>();
        for (String word : words1) {
            map.put(word, map.getOrDefault(word, 0) + 1);
        }
        for (String word : words2) {
            if (map.containsKey(word) && map.get(word) == 1) {
                count++;
                map.remove(word);
            }
        }
        return count;
