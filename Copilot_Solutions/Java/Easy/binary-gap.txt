Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int max = 0;
        int last = -1;
        for (int i = 0; i < 32; i++) {
            if (((n >> i) & 1) != 0) {
                if (last >= 0) {
                    max = Math.max(max, i - last);
                }
                last = i;
            }
        }
        return max;

=======

        int max = 0;
        int prev = -1;
        for (int i = 0; i < 32; i++) {
            if (((n >> i) & 1) == 1) {
                if (prev != -1) {
                    max = Math.max(max, i - prev);
                }
                prev = i;
            }
        }
        return max;

=======

        int result = 0;
        int last = -1;
        for (int i = 0; i < 32; i++) {
            if (((n >> i) & 1) == 1) {
                if (last >= 0) {
                    result = Math.max(result, i - last);
                }
                last = i;
            }
        }
        return result;

=======

        int max = 0;
        int prev = -1;
        int i = 0;
        while (n > 0) {
            if ((n & 1) == 1) {
                if (prev != -1) {
                    max = Math.max(max, i - prev);
                }
                prev = i;
            }
            n >>= 1;
            i++;
        }
        return max;

=======

        int max = 0;
        int last = -1;
        int bit = 0;
        while (n > 0) {
            if ((n & 1) == 1) {
                if (last >= 0) {
                    max = Math.max(max, bit-last);
                }
                last = bit;
            }
            bit++;
            n >>= 1;
        }
        return max;

=======

        int max = 0;
        int last = -1;
        int idx = 0;
        while (n > 0) {
            if ((n & 1) == 1) {
                if (last != -1) {
                    max = Math.max(max, idx - last);
                }
                last = idx;
            }
            n >>= 1;
            idx++;
        }
        return max;

=======

        int i = 0, j = 0, max = 0;
        while (n > 0) {
            if (n % 2 == 1) {
                if (j == 0) {
                    j = i;
                } else {
                    max = Math.max(max, i - j);
                    j = i;
                }
            }
            n = n / 2;
            i++;
        }
        return max;

=======

        int a = 0, b = 0, c = 0;
        while (n > 0) {
            if (n % 2 == 1) {
                a = b;
                b = c;
                if (a != 0) {
                    a = b - a;
                }
            }
            n /= 2;
            c++;
        }
        return a;

=======

        int max = 0;
        int count = 0;
        boolean started = false;
        while(n > 0){
            int last = n & 1;
            n = n >> 1;
            if(last == 1){
                if(started){
                    max = Math.max(max, count);
                }
                started = true;
                count = 1;
            }else{
                if(started){
                    count++;
                }
            }
        }
        return max;
