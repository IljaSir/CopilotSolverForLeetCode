Synthesizing 10/10 solutions

=======

        Set<String> set = new HashSet<>();
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < word.length(); i++) {
            char c = word.charAt(i);
            if (Character.isDigit(c)) {
                sb.append(c);
            } else {
                if (sb.length() > 0) {
                    set.add(sb.toString());
                    sb.setLength(0);
                }
            }
        }
        if (sb.length() > 0) {
            set.add(sb.toString());
        }
        return set.size();

=======

        Set<String> set = new HashSet<>();
        for (int i = 0; i < word.length(); i++) {
            if (Character.isDigit(word.charAt(i))) {
                int j = i;
                while (j < word.length() && Character.isDigit(word.charAt(j))) j++;
                set.add(word.substring(i, j));
                i = j;
            }
        }
        return set.size();

=======

        Set<String> set = new HashSet<>();
        for (int i = 0; i < word.length(); i++) {
            if (word.charAt(i) >= '0' && word.charAt(i) <= '9') {
                int j = i;
                while (j < word.length() && word.charAt(j) >= '0' && word.charAt(j) <= '9') {
                    j++;
                }
                set.add(word.substring(i, j));
                i = j;
            }
        }
        return set.size();

=======

        Set<String> set = new HashSet<>();
        StringBuilder sb = new StringBuilder();
        for (char c : word.toCharArray()) {
            if (Character.isDigit(c)) {
                sb.append(c);
            } else if (sb.length() > 0) {
                set.add(sb.toString());
                sb = new StringBuilder();
            }
        }
        if (sb.length() > 0) {
            set.add(sb.toString());
        }
        return set.size();

=======

        Set<String> set = new HashSet<>();
        int n = word.length();
        for (int i = 0; i < n; i++) {
            char c = word.charAt(i);
            if (Character.isDigit(c)) {
                int j = i;
                while (j < n && Character.isDigit(word.charAt(j))) {
                    j++;
                }
                set.add(word.substring(i, j));
                i = j;
            }
        }
        return set.size();

=======

        int n = word.length();
        Set<String> set = new HashSet<>();
        for (int i = 0; i < n; i++) {
            if (Character.isDigit(word.charAt(i))) {
                StringBuilder sb = new StringBuilder();
                while (i < n && Character.isDigit(word.charAt(i))) {
                    sb.append(word.charAt(i));
                    i++;
                }
                while (sb.length() > 1 && sb.charAt(0) == '0') {
                    sb.deleteCharAt(0);
                }
                set.add(sb.toString());
            }
        }
        return set.size();

=======

        Set<String> set = new HashSet<>();
        StringBuilder num = new StringBuilder();
        for(int i = 0; i < word.length(); i++) {
            if(Character.isDigit(word.charAt(i))) {
                num.append(word.charAt(i));
            } else {
                if(num.length() > 0) {
                    set.add(num.toString());
                    num = new StringBuilder();
                }
            }
        }
        if(num.length() > 0) {
            set.add(num.toString());
        }
        return set.size();

=======

        String[] words = word.split("[a-z]+");
        Set<String> set = new HashSet<>();
        for (String w : words) {
            if (w.length() == 0) continue;
            int i = 0;
            while (i < w.length() && w.charAt(i) == '0') i++;
            set.add(w.substring(i));
        }
        return set.size();

=======

        int i = 0;
        int j = 0;
        Set<String> set = new HashSet<>();
        while (i < word.length()) {
            if (Character.isDigit(word.charAt(i))) {
                j = i + 1;
                while (j < word.length() && Character.isDigit(word.charAt(j))) {
                    j++;
                }
                set.add(word.substring(i, j));
                i = j;
            } else {
                i++;
            }
        }
        return set.size();

=======

        Set<String> set = new HashSet<>();
        String[] arr = word.split("[a-z]+");
        for(String s : arr){
            if(s.length() == 0) continue;
            set.add(s.replaceFirst("^0+(?!$)", ""));
        }
        return set.size();
