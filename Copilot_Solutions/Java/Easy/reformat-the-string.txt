Synthesizing 10/10 solutions

=======

        String letters = "";
        String numbers = "";
        for (int i = 0; i < s.length(); i++) {
            if (Character.isDigit(s.charAt(i))) {
                numbers += s.charAt(i);
            } else {
                letters += s.charAt(i);
            }
        }
        if (Math.abs(numbers.length() - letters.length()) > 1) {
            return "";
        }
        if (numbers.length() > letters.length()) {
            return reformat(numbers, letters);
        } else {
            return reformat(letters, numbers);
        }
    }
    
    public String reformat(String s, String t) {
        String result = "";
        int i = 0;
        for (; i < t.length(); i++) {
            result += s.charAt(i);
            result += t.charAt(i);
        }
        if (i < s.length()) {
            result += s.charAt(i);
        }
        return result;

=======

        char[] chars = s.toCharArray();
        int digits = 0;
        int letters = 0;
        for (char c : chars) {
            if (Character.isDigit(c)) {
                digits++;
            } else {
                letters++;
            }
        }
        if (Math.abs(digits - letters) > 1) {
            return "";
        }
        char[] result = new char[chars.length];
        int j = 0;
        int k = 1;
        if (digits > letters) {
            for (int i = 0; i < chars.length; i++) {
                if (Character.isDigit(chars[i])) {
                    result[j] = chars[i];
                    j += 2;
                } else {
                    result[k] = chars[i];
                    k += 2;
                }
            }
        } else {
            for (int i = 0; i < chars.length; i++) {
                if (Character.isDigit(chars[i])) {
                    result[k] = chars[i];
                    k += 2;
                } else {
                    result[j] = chars[i];
                    j += 2;
                }
            }
        }
        return new String(result);

=======

        int n = s.length();
        List<Character> digits = new ArrayList<>();
        List<Character> letters = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            if (Character.isDigit(s.charAt(i))) {
                digits.add(s.charAt(i));
            } else {
                letters.add(s.charAt(i));
            }
        }
        if (Math.abs(digits.size() - letters.size()) > 1) {
            return "";
        }
        StringBuilder sb = new StringBuilder();
        if (digits.size() > letters.size()) {
            for (int i = 0; i < letters.size(); i++) {
                sb.append(digits.get(i));
                sb.append(letters.get(i));
            }
            sb.append(digits.get(digits.size() - 1));
        } else {
            for (int i = 0; i < digits.size(); i++) {
                sb.append(letters.get(i));
                sb.append(digits.get(i));
            }
            if (digits.size() < letters.size()) {
                sb.append(letters.get(letters.size() - 1));
            }
        }
        return sb.toString();

=======

        StringBuilder sb = new StringBuilder();
        List<Character> letters = new ArrayList<>();
        List<Character> digits = new ArrayList<>();
        for (int i = 0; i < s.length(); i++) {
            if (Character.isDigit(s.charAt(i))) {
                digits.add(s.charAt(i));
            } else {
                letters.add(s.charAt(i));
            }
        }
        if (Math.abs(digits.size() - letters.size()) > 1) {
            return "";
        }
        if (digits.size() > letters.size()) {
            for (int i = 0; i < digits.size(); i++) {
                sb.append(digits.get(i));
                if (i < letters.size()) {
                    sb.append(letters.get(i));
                }
            }
        } else {
            for (int i = 0; i < letters.size(); i++) {
                sb.append(letters.get(i));
                if (i < digits.size()) {
                    sb.append(digits.get(i));
                }
            }
        }
        return sb.toString();

=======

        int n = s.length();
        char[] chars = new char[n];
        char[] digits = new char[n];
        int charCount = 0;
        int digitCount = 0;
        for (int i = 0; i < n; i++) {
            char c = s.charAt(i);
            if (Character.isDigit(c)) {
                digits[digitCount++] = c;
            } else {
                chars[charCount++] = c;
            }
        }
        if (Math.abs(charCount - digitCount) > 1) {
            return "";
        }
        StringBuilder sb = new StringBuilder();
        if (charCount > digitCount) {
            for (int i = 0; i < charCount; i++) {
                sb.append(chars[i]);
                if (i < digitCount) {
                    sb.append(digits[i]);
                }
            }
        } else {
            for (int i = 0; i < digitCount; i++) {
                sb.append(digits[i]);
                if (i < charCount) {
                    sb.append(chars[i]);
                }
            }
        }
        return sb.toString();

=======

        int n = s.length();
        String alpha = "";
        String num = "";
        for (int i = 0; i < n; i++) {
            if (Character.isDigit(s.charAt(i))) {
                num += s.charAt(i);
            } else {
                alpha += s.charAt(i);
            }
        }
        if (Math.abs(alpha.length() - num.length()) > 1) {
            return "";
        }
        StringBuilder sb = new StringBuilder();
        if (alpha.length() > num.length()) {
            for (int i = 0; i < num.length(); i++) {
                sb.append(alpha.charAt(i));
                sb.append(num.charAt(i));
            }
            sb.append(alpha.charAt(alpha.length() - 1));
        } else {
            for (int i = 0; i < alpha.length(); i++) {
                sb.append(num.charAt(i));
                sb.append(alpha.charAt(i));
            }
            if (num.length() > alpha.length()) {
                sb.append(num.charAt(num.length() - 1));
            }
        }
        return sb.toString();

=======

        char[] ch = s.toCharArray();
        int len = ch.length;
        int letter = 0;
        int digit = 0;
        for (int i = 0; i < len; i++) {
            if (Character.isLetter(ch[i])) {
                letter++;
            } else {
                digit++;
            }
        }
        if (Math.abs(letter - digit) > 1) {
            return "";
        }
        char[] res = new char[len];
        int i = 0;
        int j = 0;
        if (letter > digit) {
            while (i < len) {
                res[i] = ch[j];
                i += 2;
                j++;
            }
            i = 1;
            while (j < len) {
                res[i] = ch[j];
                i += 2;
                j++;
            }
        } else {
            while (i < len) {
                res[i] = ch[j];
                i += 2;
                j++;
            }
            i = 1;
            while (j < len) {
                res[i] = ch[j];
                i += 2;
                j++;
            }
        }
        return new String(res);

=======

        int len = s.length();
        char[] chars = s.toCharArray();
        int numCount = 0;
        int alphaCount = 0;
        for (int i = 0; i < len; i++) {
            if (chars[i] >= '0' && chars[i] <= '9') {
                numCount++;
            } else {
                alphaCount++;
            }
        }
        if (Math.abs(numCount - alphaCount) > 1) {
            return "";
        }
        char[] result = new char[len];
        int numIndex = 0;
        int alphaIndex = 1;
        if (numCount > alphaCount) {
            numIndex = 1;
            alphaIndex = 0;
        }
        for (int i = 0; i < len; i++) {
            if (chars[i] >= '0' && chars[i] <= '9') {
                result[numIndex] = chars[i];
                numIndex += 2;
            } else {
                result[alphaIndex] = chars[i];
                alphaIndex += 2;
            }
        }
        return new String(result);

=======

        int n = s.length();
        char[] chars = s.toCharArray();
        int nDigit = 0;
        int nAlpha = 0;
        for (char c : chars) {
            if (Character.isDigit(c)) {
                nDigit++;
            } else {
                nAlpha++;
            }
        }
        if (Math.abs(nDigit - nAlpha) > 1) {
            return "";
        }
        char[] res = new char[n];
        int i = 0;
        int j = 0;
        if (nDigit > nAlpha) {
            while (i < n) {
                res[i] = chars[j];
                j += 2;
                i++;
            }
            j = 1;
            while (i < n) {
                res[i] = chars[j];
                j += 2;
                i++;
            }
        } else {
            while (i < n) {
                res[i] = chars[j];
                j += 2;
                i++;
            }
            j = 1;
            while (i < n) {
                res[i] = chars[j];
                j += 2;
                i++;
            }
        }
        return new String(res);

=======

        char[] chars = s.toCharArray();
        int n = s.length();
        int[] counts = new int[2];
        for (char c : chars) {
            counts[Character.isDigit(c) ? 1 : 0]++;
        }
        int max = Math.max(counts[0], counts[1]);
        int min = Math.min(counts[0], counts[1]);
        if (max - min > 1) {
            return "";
        }
        int i = 0;
        int j = 1;
        if (counts[0] < counts[1]) {
            i = 1;
            j = 0;
        }
        char[] result = new char[n];
        for (char c : chars) {
            if (Character.isDigit(c) == (i == 0)) {
                result[i] = c;
                i += 2;
            } else {
                result[j] = c;
                j += 2;
            }
        }
        return new String(result);
