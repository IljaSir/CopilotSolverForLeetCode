Synthesizing 10/10 solutions

=======

        if (num < 2) {
            return true;
        }
        long x = num / 2;
        while (x * x > num) {
            x = (x + num / x) / 2;
        }
        return (x * x == num);

=======

        int i = 1;
        while (num > 0) {
            num -= i;
            i += 2;
        }
        return num == 0;

=======

        long r = num;
        while (r * r > num) {
            r = (r + num / r) / 2;
        }
        return r * r == num;

=======

        long left = 1;
        long right = num;
        while (left <= right) {
            long mid = left + (right - left) / 2;
            if (mid * mid == num) {
                return true;
            } else if (mid * mid > num) {
                right = mid - 1;
            } else {
                left = mid + 1;
            }
        }
        return false;

=======

        long left = 1;
        long right = num;
        while (left <= right) {
            long mid = left + (right - left) / 2;
            long square = mid * mid;
            if (square == num) {
                return true;
            } else if (square > num) {
                right = mid - 1;
            } else {
                left = mid + 1;
            }
        }
        return false;

=======

        if (num == 1) return true;
        int left = 1, right = num / 2;
        while (left <= right) {
            int mid = left + (right - left) / 2;
            if (mid == num / mid) {
                if (mid * mid == num) return true;
                else left = mid + 1;
            } else if (mid > num / mid) {
                right = mid - 1;
            } else {
                left = mid + 1;
            }
        }
        return false;

=======

        if (num == 1) {
            return true;
        }
        long left = 0;
        long right = num / 2;
        while (left <= right) {
            long mid = left + (right - left) / 2;
            long square = mid * mid;
            if (square == num) {
                return true;
            } else if (square > num) {
                right = mid - 1;
            } else {
                left = mid + 1;
            }
        }
        return false;

=======

        int l = 1, r = num;
        while (l <= r) {
            int m = l + (r - l) / 2;
            if (m == num / m && num % m == 0) {
                return true;
            } else if (m > num / m) {
                r = m - 1;
            } else {
                l = m + 1;
            }
        }
        return false;

=======

        int l = 1;
        int r = num;
        while (l <= r) {
            int mid = l + (r - l) / 2;
            if (mid == num / mid && num % mid == 0) {
                return true;
            } else if (mid < num / mid) {
                l = mid + 1;
            } else {
                r = mid - 1;
            }
        }
        return false;

=======

        if (num == 1) return true;
        int left = 0;
        int right = num / 2;
        while (left <= right) {
            int mid = left + (right - left) / 2;
            if (mid == num / mid) {
                return num % mid == 0;
            } else if (mid < num / mid) {
                left = mid + 1;
            } else {
                right = mid - 1;
            }
        }
        return false;
