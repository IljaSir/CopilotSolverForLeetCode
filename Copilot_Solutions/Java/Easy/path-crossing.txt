Synthesizing 10/10 solutions

=======

        Set<String> set = new HashSet<>();
        set.add("0,0");
        int x = 0;
        int y = 0;
        for (char c : path.toCharArray()) {
            if (c == 'N') {
                y++;
            } else if (c == 'S') {
                y--;
            } else if (c == 'W') {
                x--;
            } else if (c == 'E') {
                x++;
            }
            String s = x + "," + y;
            if (set.contains(s)) {
                return true;
            }
            set.add(s);
        }
        return false;

=======

        int x = 0, y = 0;
        Set<String> set = new HashSet<>();
        set.add("0,0");
        for (char c : path.toCharArray()) {
            switch (c) {
                case 'N':
                    y++;
                    break;
                case 'E':
                    x++;
                    break;
                case 'S':
                    y--;
                    break;
                case 'W':
                    x--;
                    break;
            }
            if (set.contains(x + "," + y)) {
                return true;
            }
            set.add(x + "," + y);
        }
        return false;

=======

        int x = 0;
        int y = 0;
        Set<String> set = new HashSet<>();
        set.add("0,0");
        for (char c : path.toCharArray()) {
            if (c == 'N') {
                y++;
            } else if (c == 'S') {
                y--;
            } else if (c == 'E') {
                x++;
            } else if (c == 'W') {
                x--;
            }
            String s = x + "," + y;
            if (set.contains(s)) {
                return true;
            }
            set.add(s);
        }
        return false;

=======

        Set<String> set = new HashSet<>();
        int x = 0, y = 0;
        set.add(x + "," + y);
        for (char c : path.toCharArray()) {
            if (c == 'N') y++;
            if (c == 'S') y--;
            if (c == 'E') x++;
            if (c == 'W') x--;
            String s = x + "," + y;
            if (set.contains(s)) return true;
            set.add(s);
        }
        return false;

=======

        Set<String> visited = new HashSet<>();
        int x = 0;
        int y = 0;
        visited.add("0,0");
        for (int i = 0; i < path.length(); i++) {
            char c = path.charAt(i);
            if (c == 'N') {
                y++;
            } else if (c == 'S') {
                y--;
            } else if (c == 'E') {
                x++;
            } else if (c == 'W') {
                x--;
            }
            if (visited.contains(x + "," + y)) {
                return true;
            }
            visited.add(x + "," + y);
        }
        return false;

=======

        int x = 0, y = 0;
        Set<String> set = new HashSet<>();
        set.add(x + "," + y);
        for (char c : path.toCharArray()) {
            if (c == 'N') y++;
            if (c == 'S') y--;
            if (c == 'E') x++;
            if (c == 'W') x--;
            if (!set.add(x + "," + y)) return true;
        }
        return false;

=======

        int x = 0, y = 0;
        Set<String> set = new HashSet<>();
        set.add(x + "," + y);
        for (char c : path.toCharArray()) {
            if (c == 'N') y++;
            else if (c == 'S') y--;
            else if (c == 'E') x++;
            else x--;
            if (!set.add(x + "," + y)) return true;
        }
        return false;

=======

        int x = 0;
        int y = 0;
        Set<String> set = new HashSet<>();
        set.add(x + "," + y);
        for (char c : path.toCharArray()) {
            switch (c) {
                case 'N':
                    y++;
                    break;
                case 'S':
                    y--;
                    break;
                case 'E':
                    x++;
                    break;
                case 'W':
                    x--;
                    break;
            }
            if (set.contains(x + "," + y)) {
                return true;
            } else {
                set.add(x + "," + y);
            }
        }
        return false;

=======

        int x = 0, y = 0;
        Set<String> set = new HashSet<>();
        set.add("0,0");
        for (char c: path.toCharArray()) {
            switch (c) {
                case 'N':
                    y++;
                    break;
                case 'S':
                    y--;
                    break;
                case 'E':
                    x++;
                    break;
                case 'W':
                    x--;
                    break;
            }
            String s = x + "," + y;
            if (set.contains(s)) {
                return true;
            }
            set.add(s);
        }
        return false;

=======

        HashSet<String> visited = new HashSet<>();
        visited.add("0,0");
        int x = 0, y = 0;
        for (char c: path.toCharArray()) {
            if (c == 'N') {
                y++;
            } else if (c == 'S') {
                y--;
            } else if (c == 'E') {
                x++;
            } else {
                x--;
            }
            String point = Integer.toString(x) + "," + Integer.toString(y);
            if (visited.contains(point)) {
                return true;
            } else {
                visited.add(point);
            }
        }
        return false;
