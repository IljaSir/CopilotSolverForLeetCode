Synthesizing 10/10 solutions (Duplicates hidden)

=======

        for (int i = 0; i < nums.length; i++) {
            if (Math.abs(nums[i] - i) > 1) {
                return false;
            }
        }
        return true;

=======

        int n = nums.length;
        for (int i = 0; i < n; i++) {
            if (Math.abs(nums[i] - i) > 1) {
                return false;
            }
        }
        return true;

=======

        int n = nums.length;
        int max = -1;
        for (int i = 0; i < n - 2; i++) {
            max = Math.max(max, nums[i]);
            if (max > nums[i + 2]) {
                return false;
            }
        }
        return true;

=======

        int n = nums.length;
        int max = 0;
        for (int i = 0; i < n - 2; i++) {
            max = Math.max(max, nums[i]);
            if (max > nums[i + 2]) return false;
        }
        return true;

=======

        int n = nums.length;
        int max = 0;
        for (int i = 0; i < n - 2; i++) {
            max = Math.max(max, nums[i]);
            if (max > nums[i + 2]) {
                return false;
            }
        }
        return true;

=======

        int n = nums.length;
        int max = -1;
        for (int i = 0; i < n - 2; ++i) {
            max = Math.max(max, nums[i]);
            if (max > nums[i + 2]) return false;
        }
        return true;

=======

        int n = nums.length;
        int max = nums[0];
        for (int i = 2; i < n; i++) {
            max = Math.max(max, nums[i - 2]);
            if (max > nums[i]) {
                return false;
            }
        }
        return true;

=======

        int len = nums.length;
        int max = nums[0];
        for (int i = 2; i < len; i++) {
            if (max > nums[i]) {
                return false;
            }
            max = Math.max(max, nums[i - 1]);
        }
        return true;
