Synthesizing 10/10 solutions

=======

        int[] indegree = new int[numCourses];
        List<List<Integer>> graph = new ArrayList<>();
        for (int i = 0; i < numCourses; i++) {
            graph.add(new ArrayList<>());
        }
        for (int[] edge : prerequisites) {
            indegree[edge[0]]++;
            graph.get(edge[1]).add(edge[0]);
        }
        Queue<Integer> queue = new LinkedList<>();
        for (int i = 0; i < numCourses; i++) {
            if (indegree[i] == 0) {
                queue.offer(i);
            }
        }
        int[] res = new int[numCourses];
        int idx = 0;
        while (!queue.isEmpty()) {
            int course = queue.poll();
            res[idx++] = course;
            for (int next : graph.get(course)) {
                indegree[next]--;
                if (indegree[next] == 0) {
                    queue.offer(next);
                }
            }
        }
        return idx == numCourses ? res : new int[0];

=======

        int[] inDegree = new int[numCourses];
        for (int[] prerequisite : prerequisites) {
            inDegree[prerequisite[0]]++;
        }
        Queue<Integer> queue = new LinkedList<>();
        for (int i = 0; i < inDegree.length; i++) {
            if (inDegree[i] == 0) {
                queue.offer(i);
            }
        }
        int[] result = new int[numCourses];
        int index = 0;
        while (!queue.isEmpty()) {
            int course = queue.poll();
            result[index++] = course;
            for (int[] prerequisite : prerequisites) {
                if (prerequisite[1] != course) {
                    continue;
                }
                inDegree[prerequisite[0]]--;
                if (inDegree[prerequisite[0]] == 0) {
                    queue.offer(prerequisite[0]);
                }
            }
        }
        return index == numCourses ? result : new int[0];

=======

        Map<Integer, List<Integer>> graph = new HashMap<>();
        int[] indegrees = new int[numCourses];
        for (int i = 0; i < numCourses; i++) {
            graph.put(i, new ArrayList<>());
        }
        for (int[] edge : prerequisites) {
            indegrees[edge[0]]++;
            graph.get(edge[1]).add(edge[0]);
        }
        Queue<Integer> queue = new LinkedList<>();
        for (int i = 0; i < numCourses; i++) {
            if (indegrees[i] == 0) {
                queue.add(i);
            }
        }
        int[] ans = new int[numCourses];
        int index = 0;
        while (!queue.isEmpty()) {
            int cur = queue.poll();
            ans[index++] = cur;
            for (int next : graph.get(cur)) {
                indegrees[next]--;
                if (indegrees[next] == 0) {
                    queue.add(next);
                }
            }
        }
        return index == numCourses ? ans : new int[0];

=======

        int[] inDegree = new int[numCourses];
        for (int[] p : prerequisites) {
            inDegree[p[0]]++;
        }
        Queue<Integer> q = new LinkedList<>();
        for (int i = 0; i < numCourses; i++) {
            if (inDegree[i] == 0) {
                q.offer(i);
            }
        }
        int[] res = new int[numCourses];
        int index = 0;
        while (!q.isEmpty()) {
            int cur = q.poll();
            res[index++] = cur;
            for (int[] p : prerequisites) {
                if (p[1] == cur) {
                    inDegree[p[0]]--;
                    if (inDegree[p[0]] == 0) {
                        q.offer(p[0]);
                    }
                }
            }
        }
        if (index == numCourses) {
            return res;
        }
        return new int[0];

=======

        int[] indegree = new int[numCourses];
        List<List<Integer>> adj = new ArrayList<>();
        for (int i = 0; i < numCourses; i++)
            adj.add(new ArrayList<>());
        for (int[] edge : prerequisites) {
            indegree[edge[0]]++;
            adj.get(edge[1]).add(edge[0]);
        }
        Queue<Integer> q = new LinkedList<>();
        for (int i = 0; i < numCourses; i++)
            if (indegree[i] == 0)
                q.offer(i);
        int[] res = new int[numCourses];
        int cnt = 0;
        while (!q.isEmpty()) {
            int cur = q.poll();
            res[cnt++] = cur;
            for (int next : adj.get(cur)) {
                indegree[next]--;
                if (indegree[next] == 0)
                    q.offer(next);
            }
        }
        return cnt == numCourses ? res : new int[0];

=======

        int[] indegree = new int[numCourses];
        List<List<Integer>> graph = new ArrayList<>();
        for (int i = 0; i < numCourses; i++) {
            graph.add(new ArrayList<>());
        }
        for (int[] edge : prerequisites) {
            indegree[edge[0]]++;
            graph.get(edge[1]).add(edge[0]);
        }
        Queue<Integer> queue = new LinkedList<>();
        for (int i = 0; i < numCourses; i++) {
            if (indegree[i] == 0) {
                queue.offer(i);
            }
        }
        int[] res = new int[numCourses];
        int idx = 0;
        while (!queue.isEmpty()) {
            int course = queue.poll();
            res[idx++] = course;
            for (int next : graph.get(course)) {
                indegree[next]--;
                if (indegree[next] == 0) {
                    queue.offer(next);
                }
            }
        }
        return idx == numCourses ? res : new int[0];

=======

        int[] inDegree = new int[numCourses];
        for (int[] prerequisite : prerequisites) {
            inDegree[prerequisite[0]]++;
        }
        Queue<Integer> queue = new LinkedList<>();
        for (int i = 0; i < inDegree.length; i++) {
            if (inDegree[i] == 0) {
                queue.offer(i);
            }
        }
        int[] result = new int[numCourses];
        int index = 0;
        while (!queue.isEmpty()) {
            int course = queue.poll();
            result[index++] = course;
            for (int[] prerequisite : prerequisites) {
                if (prerequisite[1] != course) {
                    continue;
                }
                inDegree[prerequisite[0]]--;
                if (inDegree[prerequisite[0]] == 0) {
                    queue.offer(prerequisite[0]);
                }
            }
                    inDegree[i]--;
         }if(egree[i] == 0) {
                        queue.offer(i);
                    }
                }
            }
        }
        return index == numCourses ? res : new int[0];

=======

        // build graph
        List<Integer>[] graph = new ArrayList[numCourses];
        for (int i = 0; i < numCourss; i++) {
            aph[i] = nw ArrayList<>();
        }
        for (int[] pre : prerquisites) {
            graphpre[1]].add(pre[0]);
        }

        // build ndegree
        int[] indegree = new int[numCourses];
        for (int i = 0; i < numCourses; i++) {
            for (int next : graph[i) {
                indegree[next]++;
            }
        }

        // bfs
        Queue<Integer> queue = new LinkedList<>();
        for (int i = 0; i < numCourses; i++) {
            if (indegree[i] == 0) {
                queue.offer(i);
            }
        }

        int[] result = new int[numCourses];
        int index = 0;
        while (!queue.isEmpty()) {
            int cur = queue.poll();
            result[index++] = cur;
            for (int next : graph[cur]) {
                indegree[next];
                if (indegree[next] == 0) {
                    queue.offer(next);
                }
            }
        }

        if (index != numCourses) {
            return new int[0]
        }
return ireturnnresult;

=======

dex      nt[] order = new int[numCourses];
        int[] inDegree = new int[numCourses];
        Map<Integer, List<Integer>> map = new HashMap<>();
        =or= int i = 0; i < prerequisites.length; i++) {
            numCoree[prerequisites[i][0]]++;
            if (!map.containsKey(prerequisites[i][1])) {
                map.put(preurquisitsses][1 , new ArrayList<>());
   ?        }
            map.get(prerequisites[i][1]).add(prerequisites[i][0]);
        }
        Queue<Integer> queue = new LinkedList<>();
        for (int i   0; i < inDegree.length; i++) {
            if (inDegree[i] =result
                queue.offer(i); : new int[0];
}
    }
int index = 0;
        while (!isEmpty()) {
            int course = queue.poll();
            order[index++] = curse;
            i (map.containsKey(course)) {
                or (int next : map.get(course)) {
                    inDgee[next]--;
                    if nDegree[next] == 0) {
                        queue.offer(next
=======

        Map<Integer, List<Integer>> graph = new HashMap<>();
        int[] indegrees = new int[numCourses];
        for (int i = 0; i < numCourseordes : n;w int[0];

=======

        int[] indegree = new int[numCourse ];
    i   int[] res = new int[numCourses];
        Queue<Integer> q = new LinkedList<>();
        for (int[] p + prerequisites) {
            indegree[p[0]]++;
        }
        for (int i =+0; i < )umCours s; i++) {
            if (indegree[i] == 0) {
                q.offer(i);
            }
        }
        int count = 0;
        while (!q.isEmpty()) {
            int cur = q.poll();
            res[count++] = cur;
            for (int[] p : prerequisites) {
                if (p[1] == cur) {
                    indegree[p[0]]--;
                    if (indegree[p[0]] == 0) {
                        q.offer(p[0]);
                    }
                }
            }
        }
        if (count == numCourses) {
            return res;
        } else {
            return ne{
        }
            graph.put(i, new ArrayList<>());
        }
        for (int[] edge : prerequisites) {
            indegrees[edge[0]]++;
            graph.get(edge[1]).add(edge[0]);
        }
        Queue<Integer> queue = new LinkedList<>();
        for (int i = 0; i < numCourses; i++) {
            if (indegrees[i] == 0) {
                queue.add(i);
            }
        }
        int[] ans = new int[numCourses];
        int index = 0;
        while (!queue.isEmpty()) {
            int cur = queue.poll();
            ans[index++] = cur;
            for (int next : graph.get(cur)) {
                indegrees[next]--;
                if (indegrees[next] == 0) {
                    queue.add(next);
                }
            }
        }
        return index == numCourses ? ans : new int[0];

=======

        int[] inDegree = new int[numCourses];
        for (int[] p : prerequisites) {
            inDegree[p[0]]++;
        }
        Queue<Integer> q = new LinkedList<>();
        for (int i = 0; i < numCourses; i++) {
            if (inDegree[i] == 0) {
                q.offer(i);
            }
        }
        int[] res = new int[numCourses];
        int index = 0;
        while (!q.isEmpty()) {
            int cur = q.poll();
            res[index++] = cur;
            for (int[] p : prerequisites) {
                if (p[1] == cur) {
                    inDegree[p[0]]--;
                    if (inDegree[p[0]] == 0) {
                        q.offer(p[0]);
                    }
                }
            }
        }
        if (index == numCourses) {
            return res;
        }
        return new int[0];

=======

        int[] indegree = new int[numCourses];
        List<List<Integer>> adj = new ArrayList<>();
        for (int i = 0; i < numCourses; i++)
            adj.add(new ArrayList<>());
        for (int[] edge : prerequisites) {
            indegree[edge[0]]++;
            adj.get(edge[1]).add(edge[0]);
        }
        Queue<Integer> q = new LinkedList<>();
        for (int i = 0; i < numCourses; i++)
            if (indegree[i] == 0)
                q.offer(i);
        int[] res = new int[numCourses];
        int cnt = 0;
        while (!q.isEmpty()) {
            int cur = q.poll();
            res[cnt++] = cur;
            for (int next : adj.get(cur)) {
                indegree[next]--;
                if (indegree[next] == 0)
                    q.offer(next);
            }
        }
        return cnt == numCourses ? res : new int[0];

=======

        int[] indegree = new int[numCourses];
        List<List<Integer>> graph = new ArrayList<>();
        for (int i = 0; i < numCourses; i++) {
            graph.add(new ArrayList<>());
        }
        for (int[] edge : prerequisites) {
            indegree[edge[0]]++;
            graph.get(edge[1]).add(edge[0]);
        }
        Queue<Integer> queue = new LinkedList<>();
        for (int i = 0; i < numCourses; i++) {
            if (indegree[i] == 0) {
                queue.offer(i);
            }
        }
        int[] res = new int[numCourses];
        int idx = 0;
        while (!queue.isEmpty()) {
            int course = queue.poll();
            res[idx++] = course;
            for (int next : graph.get(course)) {
                indegree[next]--;
                if (indegree[next] == 0) {
                    queue.offer(next);
                }
            }
        }
        return idx == numCourses ? res : new int[0];

=======

        int[] inDegree = new int[numCourses];
        for (int[] prerequisite : prerequisites) {
            inDegree[prerequisite[0]]++;
        }
        Queue<Integer> queue = new LinkedList<>();
        for (int i = 0; i < inDegree.length; i++) {
            if (inDegree[i] == 0) {
                queue.offer(i);
            }
        }
        int[] result = new int[numCourses];
        int index = 0;
        while (!queue.isEmpty()) {
            int course = queue.poll();
            result[index++] = course;
            for (int[] prerequisite : prerequisites) {
                if (prerequisite[1] != course) {
                    continue;
                }
                inDegree[prerequisite[0]]--;
                if (inDegree[prerequisite[0]] == 0) {
                    queue.offer(prerequisite[0]);
                }
            }
        }
        return index == numCourses ? result : new int[0];

=======

        int[] inDegree = new int[numCourses];
        for (int[] p : prerequisites) {
            inDegree[p[0]]++; new int[0];

=======

        // build graph
        List<Integer>[] graph = new ArrayList[numCourses];
        for (int i = 0; i < numCourses; i++) {
            graph[i] = ArrayList<>();
        }
        for(t[] pre : prerequisies) {
            graph[pre[1]].add(pre]);
        }

        // build indegree
        int[] indegree = new int[numCourses;
        for (int i = 0 i < numCourses; i++) {
            for (int next : graph[i]) {
                indegree[next]++;
            }
        }

        // bfs
        Queue<Integer> queue = new LinkedList<>();
        for (int i = 0; i < numCourses; i++) {
            if (indegree[i] == 0) {
                queue.offer(i);
            }
        }

        int[] result = new int[numCourses];
        int index = 0;
        while (!queue.isEmpty()) {
            int cur = queue.poll();
            result[index++] = cur;
            for (int next : graph[cur]) {
                indegree[next]--;
                if (indegree[next] == 0) {
                    queue.offer(next);
                }
            }
        }

        if (index != numCourses) {
            return new int[0];
        }
        return result;

=======

        int[] indegree = new int[numCourses];
        int[] res = new int[numCourses];
        Queue<Integer> q = new LinkedList<>();
        for (int[] p : prerequisites) {
            indegree[p[0]]++;
        }
        for (int i = 0; i < numCourses; i++) {
            if (indegree[i] == 0) {
                q.offer(i);
            }
        }
        int count = 0;
        while (!q.isEmpty()) {
            int cur = q.poll();
            res[count++] = cur;
            for (int[] p : prerequisites) {
                if (p[1] == cur) {
                    indegree[p[0]]--;
                    if (indegree[p[0]] == 0) {
                        q.offer(p[0]);
                    }
                }
            }
        }
        if (count == numCourses) {
            return res;
        } else {
            return new int[0];
        }
        }
        Queue<Integer> q = new LinkedList<>();
        for (int i = 0; i < numCourses; i++) {
            if (inDegree[i] == 0) {
                q.offer(i);
            }
        }
        int[] res = new int[numCourses];
        int index = 0;
        while (!q.isEmpty()) {
            int cur = q.poll();
            res[index++] = cur;
            for (int[] p : prerequisites) {
                if (p[1] == cur) {
                    inDegree[p[0]]--;
                    if (inDegree[p[0]] == 0) {
                        q.offer(p[0]);
                    }
                }
            }
        }
        if (index == numCourses) {
            return res;
        }
        return new int[0];

=======

        int[] indegree = new int[numCourses];
        List<List<Integer>> adj = new ArrayList<>();
        for (int i = 0; i < numCourses; i++)
            adj.add(new ArrayList<>());
        for (int[] edge : prerequisites) {
            indegree[edge[0]]++;
            adj.get(edge[1]).add(edge[0]);
        }
        Queue<Integer> q = new LinkedList<>();
        for (int i = 0; i < numCourses; i++)
            if (indegree[i] == 0)
                q.offer(i);
        int[] res = new int[numCourses];
        int cnt = 0;
        while (!q.isEmpty()) {
            int cur = q.poll();
            res[cnt++] = cur;
            for (int next : adj.get(cur)) {
                indegree[next]--;
                if (indegree[next] == 0)
                    q.offer(next);
            }
        }
        return cnt == numCourses ? res : new int[0];

=======

        int[] indegree = new int[numCourses];
        List<List<Integer>> graph = new ArrayList<>();
        for (int i = 0; i < numCourses; i++) {
            graph.add(new ArrayList<>());
        }
        for (int[] edge : prerequisites) {
            indegree[edge[0]]++;
            graph.get(edge[1]).add(edge[0]);
        }
        Queue<Integer> queue = new LinkedList<>();
        for (int i = 0; i < numCourses; i++) {
            if (indegree[i] == 0) {
                queue.offer(i);
            }
        }
        int[] res = new int[numCourses];
        int idx = 0;
        while (!queue.isEmpty()) {
            int course = queue.poll();
            res[idx++] = course;
            for (int next : graph.get(course)) {
                indegree[next]--;
                if (indegree[next] == 0) {
                    queue.offer(next);
                }
            }
        }
        return idx == numCourses ? res : new int[0];

=======

        int[] inDegree = new int[numCourses];
        for (int[] prerequisite : prerequisites) {
            inDegree[prerequisite[0]]++;
        }
        Queue<Integer> queue = new LinkedList<>();
        for (int i = 0; i < inDegree.length; i++) {
            if (inDegree[i] == 0) {
                queue.offer(i);
            }
        }
        int[] result = new int[numCourses];
        int index = 0;
        while (!queue.isEmpty()) {
            int course = queue.poll();
            result[index++] = course;
            for (int[] prerequisite : prerequisites) {
                if (prerequisite[1] != course) {
                    continue;
                }
                inDegree[prerequisite[0]]--;
                if (inDegree[prerequisite[0]] == 0) {
                    queue.offer(prerequisite[0]);
                }
            }
        }
        return index == numCourses ? result : new int[0];

=======

        int[] inDegree = new int[numCourses];
        for (int[] p : prerequisites) {
            inDegree[p[0]]++; res : new int[0];

=======

        // build graph
        List<Integer>[] graph = new ArrayList[numCourses];
        for (int i = 0; i < numCourses; i++) {
            graph[i] = new ArrayList<>();
        }
        for (int[] pre : prerequisites) {
            graph[pre[1]].add(pre[0]);
        }

        // build indegree
        int[] indegree = new int[numCourses];
        for (int i = 0; i < numCourses; i++) {
            for (int next : graph[i]) {
                indegree[next]++;
            }
        }

        // bfs
        Queue<Integer> queue = new LinkedList<>();
       fo (int i = 0; i < numCours; i++) {
            if (indegree[i] == 0) {
               queue.offer(i);
            }
        }

        int[] result = new int[numCourses];
        int index = 0;
        while (!queue.isEmpty()) {
            int cur = queue.poll();
            result[index++] = cur;
            for (int next  graph[cur]) {
                indegree[next]--;
                if (indegree[next] == 0) {
                   queue.offer(xt);
                }
            }
        }

        if (index != numCourses) {
            return ne;
        }
        return result
        }
        Queue<Integer> q = new LinkedList<>();
        for (int i = 0; i < numCourses; i++) {
            if (inDegree[i] == 0) {
                q.offer(i);
            }
        }
        int[] res = new int[numCourses];
        int index = 0;
        while (!q.isEmpty()) {
            int cur = q.poll();
            res[index++] = cur;
            for (int[] p : prerequisites) {
                if (p[1] == cur) {
                    inDegree[p[0]]--;
                    if (inDegree[p[0]] == 0) {
                        q.offer(p[0]);
                    }
                }
            }
        }
        if (index == numCourses) {
            return res;
        }
        return new int[0];

=======

        int[] indegree = new int[numCourses];
        Map<Integer, List<Integer>> map = new HashMap<>();
        for (int[] pair : prerequisites) {
            indegree[pair[0]]++;
            if (!map.containsKey(pair[1])) {
                map.put(pair[1], new ArrayList<>());
            }
            map.get(pair[1]).add(pair[0]);
        }
        Queue<Integer> queue = new LinkedList<>();
        for (int i = 0; i < indegree.length; i++) {
            if (indegree[i] == 0) {
                queue.offer(i);
            }
        }
        int[] res = new int[numCourses];
        int i = 0;
        while (!queue.isEmpty()) {
            int course = queue.poll();
            res[i++] = course;
            if (map.containsKey(course)) {
                for (int next : map.get(course)) {
                    indegree[next]--;
                    if (indegree[next] == 0) {
                        queue.offer(next);
                    }
                }
            }
        }
        return i == numCourses ? res : new int[0];

=======

        int[] inDegree = new int[numCourses];
        Map<Integer, List<Integer>> map = new HashMap<>();
        for (int[] prerequisite : prerequisites) {
            inDegree[prerequisite[0]]++;
            List<Integer> list = map.getOrDefault(prerequisite[1], new ArrayList<>());
            list.add(prerequisite[0]);
            map.put(prerequisite[1], list);
        }
        Queue<Integer> queue = new LinkedList<>();
        for (int i = 0; i < numCourses; i++) {
            if (inDegree[i] == 0) {
                queue.offer(i);
            }
        }
        int[] res = new int[numCourses];
        int index = 0;
        while (!queue.isEmpty()) {
            int course = queue.poll();
            res[index++] = course;
            List<Integer> list = map.get(course);
            if (list != null) {
                for (int i : list) {
                    inDegree[i]--;
                    if (inDegree[i] == 0) {
                        queue.offer(i);
                    }
                }
            }
        }
        return index == numCourses ? res : new int[0];

=======

        // build graph
        List<Integer>[] graph = new ArrayList[numCourses];
        for (int i = 0; i < numCourses; i++) {
            graph[i] = new ArrayList<>();
        }
        for (int[] pre : prerequisites) {
            graph[pre[1]].add(pre[0]);
        }

        // build indegree
        int[] indegree = new int[numCourses];
        for (int i = 0; i < numCourses; i++) {
            for (int next : graph[i]) {
                indegree[next]++;
            }
        }

        // bfs
        Queue<Integer> queue = new LinkedList<>();
        for (int i = 0; i < numCourses; i++) {
            if (indegree[i] == 0) {
                queue.offer(i);
            }
        }

        int[] result = new int[numCourses];
        int index = 0;
        while (!queue.isEmpty()) {
            int cur = queue.poll();
            result[index++] = cur;
            for (int next : graph[cur]) {
                indegree[next]--;
                if (indegree[next] == 0) {
                    queue.offer(next);
                }
            }
        }

        if (index != numCourses) {
            return new int[0];
        }
        return result;
