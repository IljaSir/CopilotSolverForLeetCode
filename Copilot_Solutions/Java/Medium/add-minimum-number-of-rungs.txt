Synthesizing 10/10 solutions

=======

        int ans = 0;
        int prev = 0;
        for (int i = 0; i < rungs.length; i++) {
            ans += (rungs[i] - prev - 1) / dist;
            prev = rungs[i];
        }
        return ans;

=======

        int ans = 0;
        int pre = 0;
        for (int rung : rungs) {
            ans += (rung - pre - 1) / dist;
            pre = rung;
        }
        return ans;

=======

        int ans = 0;
        int prev = 0;
        for (int i = 0; i < rungs.length; i++) {
            int diff = rungs[i] - prev;
            if (diff > dist) {
                ans += (diff - 1) / dist;
            }
            prev = rungs[i];
        }
        return ans;

=======

        int result = 0;
        int prev = 0;
        for (int i = 0; i < rungs.length; i++) {
            int diff = rungs[i] - prev;
            if (diff <= dist) {
                prev = rungs[i];
            } else {
                int count = diff / dist;
                if (diff % dist == 0) {
                    count--;
                }
                result += count;
                prev = rungs[i];
            }
        }
        return result;

=======

        int count = 0;
        int prev = 0;
        for (int rung : rungs) {
            int diff = rung - prev;
            if (diff > dist) {
                count += (diff - 1) / dist;
            }
            prev = rung;
        }
        return count;

=======

        int n = rungs.length;
        int ans = 0;
        for (int i = 0; i < n; i++) {
            int cur = rungs[i];
            if (i > 0) {
                cur -= rungs[i - 1];
            }
            ans += (cur - 1) / dist;
        }
        return ans;

=======

        int i = 0;
        int count = 0;
        while (i < rungs.length) {
            if (i == 0) {
                if (rungs[i] > dist) {
                    count += (rungs[i] - 1) / dist;
                }
            } else {
                if (rungs[i] - rungs[i - 1] > dist) {
                    count += (rungs[i] - rungs[i - 1] - 1) / dist;
                }
            }
            i++;
        }
        return count;

=======

        int n = rungs.length;
        int ans = 0;
        for (int i = 0; i < n; ++i) {
            int pre = i == 0 ? 0 : rungs[i - 1];
            int cur = rungs[i];
            int d = cur - pre;
            if (d <= dist) {
                continue;
            }
            if (d % dist == 0) {
                ans += d / dist - 1;
            } else {
                ans += d / dist;
            }
        }
        return ans;

=======

        int n = rungs.length;
        int ret = 0;
        int cur = 0;
        for (int i = 0; i < n; i++) {
            int d = rungs[i] - cur;
            if (d > dist) {
                ret += (d + dist - 1) / dist - 1;
            }
            cur = rungs[i];
        }
        return ret;

=======

        int n = rungs.length;
        int count = 0;
        for (int i = 0; i < n; i++) {
            int height = rungs[i];
            if (i > 0) {
                height -= rungs[i - 1];
            }
            count += (height - 1) / dist;
        }
        return count;
