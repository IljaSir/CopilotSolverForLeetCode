Synthesizing 10/10 solutions

=======

        int sum = 0;
        for (int num : nums) {
            sum += num;
        }
        int target = sum - x;
        if (target < 0) {
            return -1;
        }
        if (target == 0) {
            return nums.length;
        }
        int left = 0;
        int right = 0;
        int max = -1;
        sum = 0;
        while (right < nums.length) {
            sum += nums[right];
            right++;
            while (sum > target) {
                sum -= nums[left];
                left++;
            }
            if (sum == target) {
                max = Math.max(max, right - left);
            }
        }
        return max == -1 ? -1 : nums.length - max;

=======

        int n = nums.length;
        int[] prefix = new int[n + 1];
        for (int i = 0; i < n; i++) {
            prefix[i + 1] = prefix[i] + nums[i];
        }
        int ans = Integer.MAX_VALUE;
        int target = prefix[n] - x;
        Map<Integer, Integer> map = new HashMap<>();
        map.put(0, -1);
        for (int i = 0; i < n; i++) {
            int cur = prefix[i + 1];
            if (map.containsKey(cur - target)) {
                ans = Math.min(ans, i - map.get(cur - target));
            }
            map.put(cur, i);
        }
        return ans == Integer.MAX_VALUE ? -1 : n - ans;

=======

        int n = nums.length;
        int[] prefix = new int[n + 1];
        for (int i = 0; i < n; i++) {
            prefix[i + 1] = prefix[i] + nums[i];
        }
        Map<Integer, Integer> map = new HashMap<>();
        int res = n + 1;
        for (int i = 0; i <= n; i++) {
            int target = x - prefix[i];
            if (map.containsKey(target)) {
                res = Math.min(res, i - map.get(target));
            }
            map.put(prefix[i], i);
        }
        return res == n + 1 ? -1 : res;

=======

        int n = nums.length;
        int sum = 0;
        for (int i = 0; i < n; i++) {
            sum += nums[i];
        }
        int target = sum - x;
        if (target == 0) return n;
        int max = -1;
        int i = 0;
        int j = 0;
        int curr = 0;
        while (j < n) {
            curr += nums[j];
            while (curr > target && i <= j) {
                curr -= nums[i];
                i++;
            }
            if (curr == target) {
                max = Math.max(max, j - i + 1);
            }
            j++;
        }
        if (max == -1) return -1;
        return n - max;

=======

        int n = nums.length;
        int[] preSum = new int[n + 1];
        for (int i = 0; i < n; i++) {
            preSum[i + 1] = preSum[i] + nums[i];
        }
        int ans = Integer.MAX_VALUE;
        for (int i = 0; i <= n; i++) {
            int target = x - preSum[i];
            int lo = i;
            int hi = n;
            while (lo < hi) {
                int mid = (lo + hi) / 2;
                if (preSum[mid + 1] - preSum[i] >= target) {
                    hi = mid;
                } else {
                    lo = mid + 1;
                }
            }
            if (preSum[lo + 1] - preSum[i] == target) {
                ans = Math.min(ans, n - (lo - i + 1));
            }
        }
        return ans == Integer.MAX_VALUE ? -1 : ans;

=======

        int n = nums.length;
        int[] left = new int[n + 1];
        int[] right = new int[n + 1];
        for (int i = 0; i < n; i++) {
            left[i + 1] = left[i] + nums[i];
            right[i + 1] = right[i] + nums[n - 1 - i];
        }
        int ans = Integer.MAX_VALUE;
        for (int i = 0; i <= n; i++) {
            if (left[i] > x) {
                break;
            }
            int target = x - left[i];
            int bound = Arrays.binarySearch(right, target);
            if (bound < 0) {
                bound = -bound - 1;
            }
            if (bound <= n && right[bound] == target) {
                int total = i + bound;
                if (total <= n) {
                    ans = Math.min(ans, total);
                }
            }
        }
        return ans == Integer.MAX_VALUE ? -1 : ans;

=======

        int n = nums.length;
        int[] psum = new int[n+1];
        for (int i = 0; i < n; i++) {
            psum[i+1] = psum[i] + nums[i];
        }
        int target = psum[n] - x;
        if (target < 0) return -1;
        if (target == 0) return n;
        int res = -1;
        int left = 0;
        for (int right = 0; right < n; right++) {
            while (left <= right && psum[right+1] - psum[left] > target) {
                left++;
            }
            if (psum[right+1] - psum[left] == target) {
                res = Math.max(res, right - left + 1);
            }
        }
        return res == -1 ? -1 : n - res;

=======

        int n = nums.length;
        int[] preSum = new int[n+1];
        for(int i = 1; i <= n; i++) {
            preSum[i] = preSum[i-1] + nums[i-1];
        }
        int ans = Integer.MAX_VALUE;
        for(int i = 0; i <= n; i++) {
            int target = preSum[n] - x + preSum[i];
            int index = Arrays.binarySearch(preSum, target);
            if(index >= 0) {
                ans = Math.min(ans, i + n - index);
            }
        }
        return ans == Integer.MAX_VALUE ? -1 : ans;

=======

        int n = nums.length;
        int s = 0;
        for (int i = 0; i < n; ++i) {
            s += nums[i];
        }
        int t = s - x;
        if (t < 0) {
            return -1;
        }
        if (t == 0) {
            return n;
        }
        int ans = Integer.MIN_VALUE;
        int sum = 0;
        Map<Integer, Integer> m = new HashMap<>();
        m.put(0, -1);
        for (int i = 0; i < n; ++i) {
            sum += nums[i];
            m.put(sum, i);
            if (m.containsKey(sum - t)) {
                ans = Math.max(ans, i - m.get(sum - t));
            }
        }
        return ans == Integer.MIN_VALUE ? -1 : n - ans;

=======

        int result = Integer.MAX_VALUE;
        int sum = 0;
        int n = nums.length;
        int i = 0;
        int j = 0;
        while (i < n) {
            sum += nums[i];
            while (sum > x && j <= i) {
                sum -= nums[j];
                j++;
            }
            if (sum == x) {
                result = Math.min(result, n - i + j - 1);
            }
            i++;
        }
        return result == Integer.MAX_VALUE ? -1 : result;
