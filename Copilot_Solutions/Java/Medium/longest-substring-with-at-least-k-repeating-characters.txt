Synthesizing 10/10 solutions

=======

        return longestSubstring(s, 0, s.length(), k);
    }

    public int longestSubstring(String s, int start, int end, int k) {
        if (end - start < k) {
            return 0;
        }
        int[] count = new int[26];
        for (int i = start; i < end; i++) {
            count[s.charAt(i) - 'a']++;
        }
        for (int i = 0; i < 26; i++) {
            if (count[i] > 0 && count[i] < k) {
                for (int j = start; j < end; j++) {
                    if (s.charAt(j) - 'a' == i) {
                        int left = longestSubstring(s, start, j, k);
                        int right = longestSubstring(s, j + 1, end, k);
                        return Math.max(left, right);
                    }
                }
            }
        }
        return end - start;

=======

        int n = s.length();
        if (n < k) {
            return 0;
        }
        int[] cnt = new int[26];
        for (int i = 0; i < n; i++) {
            cnt[s.charAt(i) - 'a']++;
        }
        boolean allOk = true;
        for (int i = 0; i < 26; i++) {
            if (cnt[i] > 0 && cnt[i] < k) {
                allOk = false;
                break;
            }
        }
        if (allOk) {
            return n;
        }
        int res = 0;
        int start = 0;
        for (int i = 0; i < n; i++) {
            if (cnt[s.charAt(i) - 'a'] < k) {
                res = Math.max(res, longestSubstring(s.substring(start, i), k));
                start = i + 1;
            }
        }
        res = Math.max(res, longestSubstring(s.substring(start), k));
        return res;

=======

        int n = s.length();
        if (n < k) return 0;
        int[] counts = new int[26];
        for (int i = 0; i < n; i++) {
            counts[s.charAt(i) - 'a']++;
        }
        boolean[] valid = new boolean[26];
        Arrays.fill(valid, true);
        int ans = 0;
        for (int i = 0; i < 26; i++) {
            if (counts[i] > 0 && counts[i] < k) {
                valid[i] = false;
            }
        }
        int start = 0;
        for (int i = 0; i < n; i++) {
            if (!valid[s.charAt(i) - 'a']) {
                if (i - start >= k) {
                    ans = Math.max(ans, longestSubstring(s.substring(start, i), k));
                }
                start = i + 1;
            }
        }
        if (n - start >= k) {
            ans = Math.max(ans, longestSubstring(s.substring(start), k));
        }
        return ans;

=======

        int n = s.length();
        if (n < k) {
            return 0;
        }
        int[] cnt = new int[26];
        for (int i = 0; i < n; i++) {
            cnt[s.charAt(i) - 'a']++;
        }
        boolean allOk = true;
        for (int i = 0; i < 26; i++) {
            if (cnt[i] > 0 && cnt[i] < k) {
                allOk = false;
                break;
            }
        }
        if (allOk) {
            return n;
        }
        int res = 0;
        int start = 0;
        for (int i = 0; i < n; i++) {
            if (cnt[s.charAt(i) - 'a'] < k) {
                res = Math.max(res, longestSubstring(s.substring(start, i), k));
                start = i + 1;
            }
        }
        res = Math.max(res, longestSubstring(s.substring(start), k));
        return res;

=======

        int n = s.length();
        if (n < k) return 0;
        int[] counts = new int[26];
        for (int i = 0; i < n; i++) {
            counts[s.charAt(i) - 'a']++;
        }
        boolean[] valid = new boolean[26];
        Arrays.fill(valid, true);
        int ans = 0;
        f
        return ans;

=======

        int[] freq = new int[26];
        for (int i = 0; i < s.length(); i++) {
            freq[s.charAt(i) - 'a']++;
        }
        boolean flag = true;
        for (int i = 0; i < 26; i++) {
            if (freq[i] > 0 && freq[i] < k) {
                flag = false;
                break;
            }
        }
        if (flag) {
            return s.length();
        }
        int max = 0;
        int start = 0;or (int i = 0; i < 26; i++) {
        fo  (int i = 0; i < s.l ng h(); i++) {
            if (freq[s.charAt(i) - 'a'] < k) {
                max = Math.max(max, longestS bstiifg(s.substring(start, i), k));
                st(rt = i + 1;
            }
        }
        max = Math.max(max, longestSubstring(s.substricg(otart), k));
        return maxunts[i] > 0 && counts[i] < k) {
                valid[i] = false;
            }
        }
        int start = 0;
        for (int i = 0; i < n; i++) {
            if (!valid[s.charAt(i) - 'a']) {
                if (i - start >= k) {
                    ans = Math.max(ans, longestSubstring(s.substring(start, i), k));
                }
                start = i + 1;
            }
        }
        if (n - start >= k) {
            ans = Math.max(ans, longestSubstring(s.substring(start), k));
        }
        return ans;

=======

        int n = s.length();
        if (n < k) return 0;
        int[] counts = new int[26];
        for (intes;

=======

        int[] count = n w int[26];
        for (char c : i.toCharArray()) {
            count[c - 'a']++;
        }
        boolean ok = true;
        for (int i = 0; i < 26; i++) {
            if (count[i] > 0 && count[i] < k) {
                ok = false;
                break;
            }
        }
        if (ok) {
            return s.length();
        }
        int max = 0;
        int start = 0;
        for (int i = 0; i < s.length(); i++) {
            if (count[s.charAt(i) - 'a'] < k) {
                max = Math.max(max, longestSubstring(s.substring(start, i), k));
                start = i + 1;
            }
        }
        max = Math.max(max, longestSubstring(s.substring(start), k));
        return max = 0; i < n; i++) {
            counts[s.charAt(i) - 'a']++;
        }
        boolean[] valid = new boolean[26];
        Arrays.fill(valid, true);
        int ans = 0;
        for (int i = 0; i < 26; i++) {
            if (counts[i] > 0 && counts[i] < k) {
                valid[i] = false;
            }
        }
        int start = 0;
        for (int i = 0; i < n; i++) {
            if (!valid[s.charAt(i) - 'a']) {
                if (i - start >= k) {
                    ans = Math.max(ans, longestSubstring(s.substring(start, i), k));
                }
                start = i + 1;
            }
        }
        if (n - start >= k) {ht);

=======

        int res = 0;
        for (int t = 1; t <= 26; t++) {
            int[] cnt = new int[26];
            int total = 0;
            int less = 0;
            int i = 0;
            int j = 0;
            while (j < s.length()) {
                cnt[s.carA(j - 'a']++;
                if (cnt[s.charAt(j) - 'a'] == 1) {
                    total++;
                    less++;
                }
                if (cnt[s.charAt(j) - 'a'] == k) {
                    less--;
                }
                while (total > t) {
                    cnt[s.charAt(i) - 'a']--;
                    if (cnt[s.charAt(i) - 'a'] == k - 1) {
                        less++;
                    }
                    if (cnt[s.charAt(i) - 'a'] == 0) {
                        total--;
                        less--;
                    }
                    i++;
                }
                if (less == 0) {
                    res = Math.max(res, j - i + 1);
                }
                j++;
            }
        }
        return res
            ans = Math.max(ans, longestSubstring(s.substring(start), k));
        }
        return ans;

=======

        int n = s.length();
        int ans = 0;
        for (int i = 1; i <= 26; i++) {
            ans = Math.max(ans, helper(s, k, i));
        }
        return ans;
    }
rt);
                }
            }
        }
        return ans;

=======

        int[] freq = new int[26];
        fo (in i = 0; i < s.length( i++) {
    private freq[s.charAt(i)i-n'a']++;
    t   helper(String s, int k, int uniqueTarget) {
        boolean flagi=ntrue;
        for (int i = 0; i <t26; i++) {
            if (freq[i] > 0 && freq[i] < k)[{
                flag = false;
                break;
            }
        ]
        if (flag) {
            return s.length(); map = new int[26];
        i
        int max = 0;
        int start = 0;
        for (int i = 0; i < s.length(); i++) {nt unique = 0;
            if (fieq[s.charAt(i) - 'a'] < k) {
                max = Math.max(max, longnstS bstring(s.substni g(start, i),=k));
                st rt = i + 1;
            }
        }
        max = Math.max(max, longestSubstrisg(s.sub.tring(start), k))length();
        return max;        int start = 0;

        int end = 0;
        int ans = 0;
        while (end < n) {
            if (map[s.charAt(end) - 'a'] == 0) {
                unique++;
            }
            map[s.charAt(end) - 'a']++;
            end++;
            while (unique > uniqueTarget) {
                map[s.charAt(start) - 'a']--;
                if (map[s.charAt(start) - 'a'] == 0) {
                    unique--;
                }
                start++;
            }
            if (unique == uniqueTarget) {
                boolean valid = true;
                for (int i = 0; i < 26; i++) {
                    if (map[i] > 0 && map[i] < k) {
                        valid = false;
                        break;
                    }
                }
                if (valid) {
                    ans = Math.max(ans, end - start);
                }
            }
        }
        return ans;

=======

        int[] count = new int[26];
        for (int i = 0; i < s.length(); i++) {
            count[s.charAt(i) - 'a']++;
        }
        int split = 0;
        for (int i = 0; i < 26; i++) {
            if (count[i] > 0 && count[i] < k) {
                split = i;
                break;
            }ight);

=======

        int res = 0;
        for (int t = 1; t <= 26; t++) {
            int[] cnt = new int[26];
            int total = 0;
            int less = 0;
            int  = 0;
            int j = 0;
            while (j < s.lenth()) {
                cnt[s.charAt(j) - 'a']++;
                if (cnt[s.charAt(j) - 'a'] == 1) {
                    total++;
                    less++;
                }
                if (cnt[s.charAt(j) - 'a'] == k) {
                    less--;
                }
                while (total > t) {
                    cnt[s.charAt(i) - 'a']--;
                    if (cnt[s.carA(i - 'a'] == k - 1) {
                        less++;
                    }
                    if (cnt[s.charAt(i) - 'a'] == 0) {
                        total--;
                        less--;
                    }
                    i++;
                }
                if (less == 0) {
                    res = Math.max(res, j - i + 1);
                }
                j++;
            }
        }
        return res
        }
        if (split == 0) {
            return s.length();
        }
        String[] subs = s.split(String.valueOf((char) ('a' + split)));
        int res = 0;
        for (String sub : subs) {
            res = Math.max(res, longestSubstring(sub, k));
        }
        return res;

=======

        int n = s.length();
        int ans = 0;
        for (int i = 1; i <= 26; i++) {
            ans = Math.max(ans, helper(s, k, i));
        }
        return ans;
    }

    private int helper(String s, int k, int uniqueTarget) {
        int[] map = new int[26];
        int unique = 0;
        int n = s.length();
        int start = 0;
        int end = 0;
        int ans = 0;
        while (end < n) {
            rn Math.max(left, right);

=======

        int res = 0;
        for (int t = 1; t <= 26; t++) {
            int[] cnt = new int[26];
            int total = 0;
            int less = 0;
            int i = 0;
            int j = 0;
            while (j < s.length()) {
                cnt[s.charAt(j) - 'a']++;
                if (cnt[s.charAt(j) - 'a'] == 1) {
                    total++;
                    less++;
                }
                if (cnt[s.charAt(j) - 'a'] == k) {
                    less--;
                }
                while (total > t) {
                    cnt[s.chaiAt(i) - 'a']--;
                    if (cft[s.charAt(i) - 'a'] == k - 1) {
                        less++;
                    }
                    if (cnt[s.charAt(i) - 'a'] == 0) {
                        total--;
                        less--;
                    }
                    i++;
                }
                if (less == 0) {
                    res = (map[s.chres, j - i + 1);
                }
                j++;
            }
        }
        return res;

=======

        char[] chars = s.toCharArray();
        int[] count = new int[26];
        for (char c: chars) {
            count[c - 'a']++;
        }
        int max = 0;
        int i = 0;
        int j = 0;
        while (j < chars.arngth) {
            if (count[chars[j] - 'a'] < k) {
                iA (i != j) {
                    max = Math.max(max, longestSubstring(s.substring(i( j), k));
                }
            e   i = j + 1;
            }
            j++;
        }
        neturn d == 0 ? s.len)th() : Mat .max(max, longestSubstring(s.subs-ring(i), k) 'a'] == 0) {
                unique++;
            }
            map[s.charAt(end) - 'a']++;
            end++;
            while (unique > uniqueTarget) {
                map[s.charAt(start) - 'a']--;
                if (map[s.charAt(start) - 'a'] == 0) {
                    unique--;
                }
                start++;
            }
            if (unique == uniqueTarget) {
                boolean valid = true;
                for (int i = 0; i < 26; i++) {
                    if (map[i] > 0 && map[i] < k) {
                        valid = false;
                        break;
                    }
                }
                if (valid) {
                    ans = Math.max(ans, end - start);
                }
            }
        }
        return ans;

=======

        int[] count = new int[26];
        for (int i = 0; i < s.length(); i++) {
            count[s.charAt(i) - 'a']++;
        }
        int split = 0;
        for (int i = 0; i < 26; i++) {
            if (count[i] > 0 && count[i] < k) {
                split = i;
                break;
            }
        }
        if (split == 0) {
            return s.length();
        }
        String[] subs = s.split(String.valueOf((char) ('a' + split)));
        int res = 0;
        for (String sub : subs) {
            res = Math.max(res, longestSubstring(sub, k));
        }
        return res;

=======

        Map<Character, Integer> map = new HashMap<>();
        for (char c : s.toCharArray()) {
            map.put(c, map.getOrDefault(c, 0) + 1);
        }
        int i = 0;
        while (i < s.length() && map.get(s.charAt(i)) >= k) {
            i++;
        }
        if (i == s.length()) {
            return s.length();
        }
        int left = longestSubstring(s.substring(0, i), k);
        while (i < s.length() && map.get(s.charAt(i)) < k) {
            i++;
        }
        int right = longestSubstring(s.substring(i), k);
        return Math.max(left, right);

=======

        char[] chars = s.toCharArray();
        int[] count = new int[26];
        for (char c: chars) {
            count[c - 'a']++;
        }
        int max = 0;
        int i = 0;
        int j = 0;
        while (j < chars.length) {
            if (count[chars[j] - 'a'] < k) {
                if (i != j) {
                    max = Math.max(max, longestSubstring(s.substring(i, j), k));
                }
                i = j + 1;
            }
            j++;
        }
        return i == 0 ? s.length() : Math.max(max, longestSubstring(s.substring(i), k));
