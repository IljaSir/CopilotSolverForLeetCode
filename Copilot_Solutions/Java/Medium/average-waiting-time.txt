Synthesizing 10/10 solutions

=======

        int n = customers.length;
        int start = customers[0][0];
        int end = start + customers[0][1];
        int total = end - start;
        for (int i = 1; i < n; i++) {
            int[] c = customers[i];
            start = Math.max(start, c[0]);
            end = start + c[1];
            total += end - c[0];
            start = end;
        }
        return (double) total / n;

=======

        long time = 0;
        long total = 0;
        for (int i = 0; i < customers.length; i++) {
            if (customers[i][0] > time) {
                time = customers[i][0] + customers[i][1];
            } else {
                time += customers[i][1];
            }
            total += time - customers[i][0];
        }
        return (double) total / customers.length;

=======

        double sum = 0;
        int curTime = 0;
        for(int[] customer : customers) {
            curTime = Math.max(curTime, customer[0]) + customer[1];
            sum += curTime - customer[0];
        }
        return sum / customers.length;

=======

        int n = customers.length;
        double waitingTime = 0;
        int currentTime = 0;
        for (int i = 0; i < n; i++) {
            if (currentTime < customers[i][0]) {
                currentTime = customers[i][0];
            }
            waitingTime += currentTime - customers[i][0] + customers[i][1];
            currentTime += customers[i][1];
        }
        return waitingTime / n;

=======

        double totalWaitingTime = 0;
        int time = 0;
        for(int[] customer : customers){
            time = Math.max(time, customer[0]);
            time += customer[1];
            totalWaitingTime += time - customer[0];
        }
        return totalWaitingTime / customers.length;

=======

        double total = 0;
        int last = 0;
        for (int[] c : customers) {
            int start = Math.max(last, c[0]);
            last = start + c[1];
            total += last - c[0];
        }
        return total / customers.length;

=======

        double totalWaitingTime = 0;
        int endTime = 0;
        for (int[] customer : customers) {
            int arrivalTime = customer[0];
            int time = customer[1];
            if (arrivalTime > endTime) {
                endTime = arrivalTime;
            }
            endTime += time;
            totalWaitingTime += endTime - arrivalTime;
        }
        return totalWaitingTime / customers.length;

=======

        int n = customers.length;
        int time = 0;
        double ans = 0;
        for (int i = 0; i < n; i++) {
            int arrive = customers[i][0];
            int cost = customers[i][1];
            if (arrive > time) {
                time = arrive;
            }
            time += cost;
            ans += time - arrive;
        }
        return ans / n;

=======

        int n = customers.length;
        double ans = 0;
        int t = 0;
        int i = 0;
        while (i < n) {
            int a = customers[i][0];
            int b = customers[i][1];
            if (a > t) {
                ans += a - t;
                t = a + b;
            } else {
                ans += b;
                t += b;
            }
            i++;
        }
        return ans / n;

=======

        double avgWaitingTime = 0;
        int chefTime = 0;
        for(int i=0;i<customers.length;i++){
            int arrivalTime = customers[i][0];
            int preparationTime = customers[i][1];
            if(arrivalTime>chefTime){
                chefTime = arrivalTime;
            }
            chefTime += preparationTime;
            avgWaitingTime += chefTime - arrivalTime;
        }
        return avgWaitingTime/customers.length;
