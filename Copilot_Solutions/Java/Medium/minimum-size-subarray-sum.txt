Synthesizing 10/10 solutions

=======

        int n = nums.length;
        int[] sums = new int[n + 1];
        for (int i = 0; i < n; i++) {
            sums[i + 1] = sums[i] + nums[i];
        }
        int res = n + 1;
        for (int i = 0; i < n; i++) {
            int j = Arrays.binarySearch(sums, i + 1, n + 1, sums[i] + target);
            if (j < 0) {
                j = -j - 1;
            }
            if (j <= n) {
                res = Math.min(res, j - i);
            }
        }
        return res == n + 1 ? 0 : res;

=======

        int n = nums.length;
        int[] sums = new int[n + 1];
        for (int i = 1; i <= n; i++) {
            sums[i] = sums[i - 1] + nums[i - 1];
        }
        int ans = n + 1;
        for (int i = 1; i <= n; i++) {
            int toFind = target + sums[i - 1];
            int bound = Arrays.binarySearch(sums, toFind);
            if (bound < 0) {
                bound = -bound - 1;
            }
            if (bound <= n) {
                ans = Math.min(ans, bound - (i - 1));
            }
        }
        return ans == n + 1 ? 0 : ans;

=======

        int n = nums.length;
        int[] sum = new int[n + 1];
        for (int i = 1; i <= n; i++) {
            sum[i] = sum[i - 1] + nums[i - 1];
        }
        int res = Integer.MAX_VALUE;
        for (int i = 1; i <= n; i++) {
            int s = target + sum[i - 1];
            int bound = Arrays.binarySearch(sum, s);
            if (bound < 0) {
                bound = -bound - 1;
            }
            if (bound <= n) {
                res = Math.min(res, bound - (i - 1));
            }
        }
        return res == Integer.MAX_VALUE ? 0 : res;

=======

        int i = 0, j = 0, sum = 0, min = Integer.MAX_VALUE;
        while (j < nums.length) {
            sum += nums[j];
            while (sum >= target) {
                min = Math.min(min, j - i + 1);
                sum -= nums[i++];
            }
            j++;
        }
        return min == Integer.MAX_VALUE ? 0 : min;

=======

        int min = Integer.MAX_VALUE;
        int sum = 0;
        int left = 0;
        for (int i = 0; i < nums.length; i++) {
            sum += nums[i];
            while (sum >= target) {
                min = Math.min(min, i + 1 - left);
                sum -= nums[left];
                left++;
            }
        }
        return min == Integer.MAX_VALUE ? 0 : min;

=======

        int l = 0, r = 0, sum = 0, res = Integer.MAX_VALUE;
        while (r < nums.length) {
            sum += nums[r++];
            while (sum >= target) {
                res = Math.min(res, r - l);
                sum -= nums[l++];
            }
        }
        return res == Integer.MAX_VALUE ? 0 : res;

=======

        int min = Integer.MAX_VALUE;
        int left = 0;
        int right = 0;
        int sum = 0;
        while (right < nums.length) {
            sum += nums[right];
            while (sum >= target) {
                min = Math.min(min, right - left + 1);
                sum -= nums[left];
                left++;
            }
            right++;
        }
        return min == Integer.MAX_VALUE ? 0 : min;

=======

        int min = Integer.MAX_VALUE;
        int sum = 0;
        int j = 0;
        for(int i = 0; i < nums.length; i++) {
            sum += nums[i];
            while(sum >= target) {
                min = Math.min(min, i - j + 1);
                sum -= nums[j++];
            }
        }
        return min == Integer.MAX_VALUE ? 0 : min;

=======

        int sum = 0;
        int min = Integer.MAX_VALUE;
        int start = 0;
        for(int i = 0; i < nums.length; i++){
            sum += nums[i];
            while(sum >= target){
                min = Math.min(min, i - start + 1);
                sum -= nums[start++];
            }
        }
        return min == Integer.MAX_VALUE ? 0 : min;

=======

        int ans = Integer.MAX_VALUE;
        int sum = 0;
        int i = 0;
        int j = 0;
        while (i < nums.length) {
            sum += nums[i];
            while (sum >= target) {
                ans = Math.min(ans, i - j + 1);
                sum -= nums[j];
                j++;
            }
            i++;
        }
        return ans == Integer.MAX_VALUE ? 0 : ans;
