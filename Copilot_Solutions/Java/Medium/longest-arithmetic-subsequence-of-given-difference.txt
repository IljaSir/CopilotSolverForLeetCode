Synthesizing 10/10 solutions

=======

        int n = arr.length;
        int[] dp = new int[n];
        Arrays.fill(dp, 1);
        Map<Integer, Integer> map = new HashMap<>();
        for (int i = 0; i < n; i++) {
            if (map.containsKey(arr[i] - difference)) {
                dp[i] = dp[map.get(arr[i] - difference)] + 1;
            }
            map.put(arr[i], i);
        }
        int res = 1;
        for (int i = 0; i < n; i++) {
            res = Math.max(res, dp[i]);
        }
        return res;

=======

        Map<Integer, Integer> dp = new HashMap();
        int ans = 0;
        for (int x : arr) {
            dp.put(x, dp.getOrDefault(x - difference, 0) + 1);
            ans = Math.max(ans, dp.get(x));
        }
        return ans;

=======

        int n = arr.length;
        int[] dp = new int[n];
        Arrays.fill(dp, 1);
        int ans = 0;
        Map<Integer, Integer> map = new HashMap<>();
        for (int i = 0; i < n; ++i) {
            if (map.containsKey(arr[i] - difference)) {
                dp[i] = dp[map.get(arr[i] - difference)] + 1;
            }
            map.put(arr[i], i);
            ans = Math.max(ans, dp[i]);
        }
        return ans;

=======

        HashMap<Integer, Integer> map = new HashMap<>();
        int max = 1;
        for (int i = 0; i < arr.length; i++) {
            int key = arr[i] - difference;
            if (map.containsKey(key)) {
                map.put(arr[i], map.get(key) + 1);
            } else {
                map.put(arr[i], 1);
            }
            max = Math.max(max, map.get(arr[i]));
        }
        return max;

=======

        Map<Integer, Integer> map = new HashMap<>();
        int max = 0;
        for (int i = 0; i < arr.length; i++) {
            int num = arr[i];
            int prev = num - difference;
            int prevCount = map.getOrDefault(prev, 0);
            int curCount = prevCount + 1;
            map.put(num, curCount);
            max = Math.max(max, curCount);
        }
        return max;

=======

        int[] dp = new int[20001];
        int ans = 0;
        for (int a: arr) {
            dp[a + 10000] = dp[a - difference + 10000] + 1;
            ans = Math.max(ans, dp[a + 10000]);
        }
        return ans;

=======

        int n = arr.length;
        int[] dp = new int[n];
        Map<Integer, Integer> map = new HashMap<Integer, Integer>();
        int max = 0;
        for(int i = 0; i < n; i++) {
            if(map.containsKey(arr[i] - difference)) {
                dp[i] = dp[map.get(arr[i] - difference)] + 1;
            } else {
                dp[i] = 1;
            }
            map.put(arr[i], i);
            max = Math.max(max, dp[i]);
        }
        return max;

=======

        Map<Integer, Integer> map = new HashMap<>();
        int n = arr.length;
        int ans = 0;
        for (int i = 0; i < n; i++) {
            int val = arr[i];
            int prev = val - difference;
            if (map.containsKey(prev)) {
                map.put(val, map.get(prev) + 1);
            } else {
                map.put(val, 1);
            }
            ans = Math.max(ans, map.get(val));
        }
        return ans;

=======

        HashMap<Integer, Integer> map = new HashMap<>();
        int result = 1;
        for (int i = 0; i < arr.length; i++) {
            int prev = arr[i] - difference;
            if (map.containsKey(prev)) {
                map.put(arr[i], map.get(prev) + 1);
            } else {
                map.put(arr[i], 1);
            }
            result = Math.max(result, map.get(arr[i]));
        }
        return result;

=======

        int n = arr.length;
        int ans = 0;
        Map<Integer, Integer> dp = new HashMap<>();
        for (int i = 0; i < n; i++) {
            int x = arr[i];
            int y = x - difference;
            int count = dp.getOrDefault(y, 0) + 1;
            dp.put(x, count);
            ans = Math.max(ans, count);
        }
        return ans;
