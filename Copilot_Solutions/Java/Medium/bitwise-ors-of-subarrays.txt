Synthesizing 10/10 solutions

=======

        Set<Integer> ans = new HashSet<>();
        Set<Integer> cur = new HashSet<>();
        cur.add(0);
        for (int x: arr) {
            Set<Integer> cur2 = new HashSet<>();
            for (int y: cur)
                cur2.add(x | y);
            cur2.add(x);
            cur = cur2;
            ans.addAll(cur);
        }
        return ans.size();

=======

        Set<Integer> ans = new HashSet(), cur = new HashSet(), cur2;
        for (int x: arr) {
            cur2 = new HashSet();
            cur2.add(x);
            for (int y: cur) cur2.add(x | y);
            ans.addAll(cur = cur2);
        }
        return ans.size();

=======

        Set<Integer> ans = new HashSet<Integer>();
        Set<Integer> cur = new HashSet<Integer>();
        cur.add(0);
        for (int x: arr) {
            Set<Integer> cur2 = new HashSet<Integer>();
            for (int y: cur)
                cur2.add(x | y);
            cur2.add(x);
            cur = cur2;
            ans.addAll(cur);
        }

        return ans.size();

=======

        Set<Integer> ans = new HashSet<>();
        Set<Integer> cur = new HashSet<>();
        cur.add(0);
        for (int i : arr) {
            Set<Integer> cur2 = new HashSet<>();
            for (int j : cur)
                cur2.add(i | j);
            cur2.add(i);
            cur = cur2;
            ans.addAll(cur);
        }
        return ans.size();

=======

        Set<Integer> ans = new HashSet<>();
        Set<Integer> cur = new HashSet<>();
        for (int x: arr) {
            Set<Integer> cur2 = new HashSet<>();
            for (int y: cur)
                cur2.add(x | y);
            cur2.add(x);
            ans.addAll(cur = cur2);
        }

        return ans.size();

=======

        Set<Integer> res = new HashSet<>();
        Set<Integer> cur = new HashSet<>();
        for (int i = 0; i < arr.length; i++) {
            Set<Integer> cur2 = new HashSet<>();
            cur2.add(arr[i]);
            for (int y : cur) cur2.add(arr[i] | y);
            res.addAll(cur = cur2);
        }
        return res.size();

=======

        Set<Integer> result = new HashSet<>();
        Set<Integer> prev = new HashSet<>();
        for (int i = 0; i < arr.length; i++) {
            Set<Integer> curr = new HashSet<>();
            curr.add(arr[i]);
            for (int j : prev) {
                curr.add(j | arr[i]);
            }
            result.addAll(curr);
            prev = curr;
        }
        return result.size();

=======

        int n = arr.length;
        Set<Integer> ans = new HashSet<>();
        Set<Integer> cur = new HashSet<>();
        for (int i = 0; i < n; i++) {
            Set<Integer> cur2 = new HashSet<>();
            cur2.add(arr[i]);
            for (int x: cur) cur2.add(x | arr[i]);
            ans.addAll(cur = cur2);
        }
        return ans.size();

=======

        Set<Integer> set = new HashSet<>();
        Set<Integer> res = new HashSet<>();
        for(int i = 0; i < arr.length; i++){
            Set<Integer> temp = new HashSet<>();
            temp.add(arr[i]);
            for(int s : set){
                temp.add(s | arr[i]);
            }
            set = temp;
            res.addAll(set);
        }
        return res.size();

=======

        Set<Integer> result = new HashSet<>();
        Set<Integer> next = new HashSet<>();
        Set<Integer> prev = new HashSet<>();
        for (int i = 0; i < arr.length; i++) {
            next.add(arr[i]);
            for (int j : prev) {
                next.add(j | arr[i]);
            }
            result.addAll(next);
            prev = next;
            next = new HashSet<>();
        }
        return result.size();
