Synthesizing 8/10 solutions

=======

        int[] dp = new int[target + 1];
        Arrays.fill(dp, Integer.MAX_VALUE);
        dp[1] = 1;
        for (int i = 2; i <= target; i++) {
            dp[i] = dp[i - 1] + 1;
            for (int j = 1; j <= maxDoubles && i - (1 << j) >= 0; j++) {
                dp[i] = Math.min(dp[i], dp[i - (1 << j)] + 1);
            }
        }
        return dp[target];

=======

        int[] dp = new int[target + 1];
        Arrays.fill(dp, Integer.MAX_VALUE);
        dp[1] = 0;
        for (int i = 2; i <= target; i++) {
            dp[i] = dp[i - 1] + 1;
            for (int j = 1; j <= maxDoubles; j++) {
                int next = 1 << j;
                if (i - next < 0) {
                    break;
                }
                dp[i] = Math.min(dp[i], dp[i - next] + 1);
            }
        }
        return dp[target];

=======

        int[] dp = new int[target + 1];
        Arrays.fill(dp, Integer.MAX_VALUE);
        dp[1] = 1;
        for (int i = 1; i < target; i++) {
            for (int j = 1; j <= maxDoubles && i + j <= target; j++) {
                dp[i + j] = Math.min(dp[i + j], dp[i] + 1);
            }
            for (int j = 2; i * j <= target; j++) {
                dp[i * j] = Math.min(dp[i * j], dp[i] + 1);
            }
        }
        return dp[target];

=======

        if (target == 1) {
            return 0;
        }
        int[] dp = new int[target + 1];
        for (int i = 2; i <= target; i++) {
            dp[i] = i - 1;
        }
        for (int i = 1; i <= maxDoubles; i++) {
            for (int j = target; j >= 1; j--) {
                for (int k = 2; j - k >= 0; k *= 2) {
                    dp[j] = Math.min(dp[j], dp[j - k] + k - 1);
                }
            }
        }
        return dp[target];

=======

        int[] dp = new int[target + 1];
        Arrays.fill(dp, Integer.MAX_VALUE);
        dp[1] = 0;
        for (int i = 1; i < target; i++) {
            for (int j = 1; j <= maxDoubles && i * 2 <= target; j++) {
                dp[i * 2] = Math.min(dp[i * 2], dp[i] + 1);
                i *= 2;
            }
            dp[i + 1] = Math.min(dp[i + 1], dp[i] + 1);
        }
        return dp[target];

=======

        int[] dp = new int[target + 1];
        Arrays.fill(dp, Integer.MAX_VALUE);
        dp[1] = 1;
        for (int i = 1; i < target; i++) {
            dp[i + 1] = Math.min(dp[i + 1], dp[i] + 1);
            for (int j = 1; j <= maxDoubles && i + (1 << j) <= target; j++) {
                dp[i + (1 << j)] = Math.min(dp[i + (1 << j)], dp[i] + j + 1);
            }
        }
        return dp[target];

=======

        int[] dp = new int[target + 1];
        int move = 0;
        for (int i = 1; i <= target; i++) {
            dp[i] = dp[i - 1] + 1;
            for (int j = 1; j <= maxDoubles && i - (1 << j) >= 0; j++) {
                dp[i] = Math.min(dp[i], dp[i - (1 << j)] + 1);
            }
        }
        return dp[target];

=======

        return 0;
