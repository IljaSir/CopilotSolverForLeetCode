Synthesizing 10/10 solutions

=======

        int n = s.length();
        int[] count = new int[2];
        for (int i = 0; i < n; i++) {
            if (locked.charAt(i) == '1') {
                count[s.charAt(i) - '0']++;
            }
        }
        int balance = 0;
        for (int i = 0; i < n; i++) {
            if (locked.charAt(i) == '0') {
                if (s.charAt(i) == '(') {
                    balance++;
                } else {
                    balance--;
                }
            }
        }
        if (balance < 0) {
            balance = -balance;
            if (count[0] < balance) {
                return false;
            }
            count[0] -= balance;
            balance = 0;
        } else {
            if (count[1] < balance) {
                return false;
            }
            count[1] -= balance;
            balance = 0;
        }
        return count[0] % 2 == 0 && count[1] % 2 == 0;

=======

        int n = s.length();
        int[] count = new int[2];
        for (int i = 0; i < n; i++) {
            if (locked.charAt(i) == '1') {
                count[s.charAt(i) - '(']++;
            }
        }
        int[] stack = new int[n];
        int top = -1;
        for (int i = 0; i < n; i++) {
            if (locked.charAt(i) == '0') {
                if (s.charAt(i) == '(') {
                    stack[++top] = i;
                } else if (top >= 0) {
                    top--;
                } else {
                    count[0]++;
                }
            }
        }
        return count[0] == count[1] && top == -1;
    }
}

=======

        int n = s.length();
        int[] a = new int[n];
        int[] b = new int[n];
        int[] c = new int[n];
        int[] d = new int[n];
        for (int i = 0; i < n; i++) {
            if (s.charAt(i) == '(') {
                a[i] = 1;
            } else {
                b[i] = 1;
            }
            if (locked.charAt(i) == '1') {
                c[i] = 1;
            } else {
                d[i] = 1;
            }
        }
        for (int i = 1; i < n; i++) {
            a[i] += a[i - 1];
            b[i] += b[i - 1];
            c[i] += c[i - 1];
            d[i] += d[i - 1];
        }
        for (int i = 0; i < n; i++) {
            int x = a[i] - (i > 0 ? a[i - 1] : 0);
            int y = b[i] - (i > 0 ? b[i - 1] : 0);
            int z = c[i] - (i > 0 ? c[i - 1] : 0);
            int w = d[i] - (i > 0 ? d[i - 1] : 0);
            if (x >= z && y >= z && x - z <= w && y - z <= w) {
                return true;
            }
        }
        return false;

=======

        int n = s.length();
        int left = 0, right = 0;
        int lockedLeft = 0, lockedRight = 0;
        for (int i = 0; i < n; i++) {
            if (s.charAt(i) == '(') {
                if (locked.charAt(i) == '0') {
                    left++;
                } else {
                    lockedLeft++;
                }
            } else {
                if (locked.charAt(i) == '0') {
                    right++;
                } else {
                    lockedRight++;
                }
            }
        }
        return left + lockedLeft >= right + lockedRight;

=======

        int n = s.length();
        int[] cnt = new int[2];
        int[] lockedCnt = new int[2];
        for (int i = 0; i < n; ++i) {
            ++cnt[s.charAt(i) - '('];
            lockedCnt[locked.charAt(i) - '0']++;
        }
        if (cnt[0] < lockedCnt[1] || cnt[1] < lockedCnt[1]) {
            return false;
        }

        cnt[0] -= lockedCnt[1];
        cnt[1] -= lockedCnt[1];
        int unlockedLeft = cnt[0] - lockedCnt[0];
        int unlockedRight = cnt[1] - lockedCnt[0];
        return unlockedLeft == unlockedRight;

=======

        int n = s.length();
        char[] cs = s.toCharArray();
        char[] cl = locked.toCharArray();
        int[] count = new int[2];
        for (int i = 0; i < n; i++) {
            count[cs[i] - '0']++;
            if (cl[i] == '1') {
                count[cs[i] - '0']--;
            }
        }
        return count[0] == count[1] && check(cs, cl);
    }

    private boolean check(char[] cs, char[] cl) {
        int n = cs.length;
        int[] count = new int[2];
        for (int i = 0; i < n; i++) {
            count[cs[i] - '0']++;
            if (cl[i] == '1') {
                count[cs[i] - '0']--;
            }
            if (count[0] < count[1]) {
                return false;
            }
        }
        return count[0] == count[1];

=======

        int n = s.length();
        int[] diff = new int[n];
        int open = 0;
        int close = 0;
        for (int i = 0; i < n; i++) {
            if (s.charAt(i) == '(') {
                open++;
            } else {
                close++;
            }
            diff[i] = open - close;
        }
        int min = 0;
        int max = 0;
        for (int i = n - 1; i >= 0; i--) {
            if (locked.charAt(i) == '1') {
                if (s.charAt(i) == '(') {
                    min++;
                } else {
                    max--;
                }
            } else {
                if (s.charAt(i) == '(') {
                    min++;
                    max++;
                } else {
                    max--;
                }
            }
            if (min > 0) {
                min = 0;
            }
            if (max < 0) {
                return false;
            }
        }
        return diff[0] == 0;

=======

        int n = s.length();
        int[] stack = new int[n];
        int top = -1;
        char[] sChars = s.toCharArray();
        char[] lChars = locked.toCharArray();
        for (int i = 0; i < n; i++) {
            if (lChars[i] == '1') {
                continue;
            }
            if (sChars[i] == '(') {
                stack[++top] = i;
            } else {
                if (top == -1) {
                    sChars[i] = '(';
                } else {
                    top--;
                }
            }
        }
        top = -1;
        for (int i = n - 1; i >= 0; i--) {
            if (lChars[i] == '1') {
                continue;
            }
            if (sChars[i] == ')') {
                stack[++top] = i;
            } else {
                if (top == -1) {
                    sChars[i] = ')';
                } else {
                    top--;
                }
            }
        }
        for (int i = 0; i < n; i++) {
            if (lChars[i] == '0') {
                continue;
            }
            if (sChars[i] == '(') {
                if (top == -1) {
                    return false;
                }
                if (stack[top--] != i) {
                    return false;
                }
            }
        }
        return true;

=======

        int n = s.length();
        int[] open = new int[n];
        int[] close = new int[n];
        int[] lock = new int[n];
        int sum = 0;
        for (int i = 0; i < n; i++) {
            if (s.charAt(i) == '(') {
                sum++;
            } else {
                sum--;
            }
            if (locked.charAt(i) == '0') {
                lock[i] = 1;
            }
            open[i] = sum;
        }
        sum = 0;
        for (int i = n - 1; i >= 0; i--) {
            if (s.charAt(i) == ')') {
                sum++;
            } else {
                sum--;
            }
            close[i] = sum;
        }
        for (int i = 0; i < n; i++) {
            if (open[i] < 0) {
                if (i + open[i] < 0) {
                    return false;
                }
                if (lock[i + open[i]] == 0) {
                    return false;
                }
                lock[i + open[i]] = 0;
            }
            if (close[i] < 0) {
                if (i + close[i] < 0) {
                    return false;
                }
                if (lock[i + close[i]] == 0) {
                    return false;
                }
                lock[i + close[i]] = 0;
            }
        }
        return true;

=======

        int n = s.length();
        int m = locked.length();
        if (n != m) {
            return false;
        }
        int[] balance = new int[n];
        int[] lockedInt = new int[n];
        for (int i = 0; i < n; i++) {
            lockedInt[i] = locked.charAt(i) - '0';
        }
        for (int i = 0; i < n; i++) {
            if (i == 0) {
                balance[i] = s.charAt(i) == '(' ? 1 : -1;
            } else {
                balance[i] = balance[i - 1] + (s.charAt(i) == '(' ? 1 : -1);
            }
        }
        int min = Integer.MAX_VALUE;
        for (int i = 0; i < n; i++) {
            if (lockedInt[i] == 1) {
                min = Math.min(min, balance[i]);
            }
        }
        if (min < 0) {
            return false;
        }
        int max = Integer.MIN_VALUE;
        for (int i = n - 1; i >= 0; i--) {
            if (lockedInt[i] == 1) {
                max = Math.max(max, balance[i]);
            }
        }
        return max >= 0;
