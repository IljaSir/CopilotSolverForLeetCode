Synthesizing 10/10 solutions

=======

        List<Integer> res = new ArrayList<>();
        for (int i = 0; i < expression.length(); i++) {
            char c = expression.charAt(i);
            if (c == '+' || c == '-' || c == '*') {
                String exp1 = expression.substring(0, i);
                String exp2 = expression.substring(i + 1);
                List<Integer> res1 = diffWaysToCompute(exp1);
                List<Integer> res2 = diffWaysToCompute(exp2);
                for (int r1 : res1) {
                    for (int r2 : res2) {
                        if (c == '+') {
                            res.add(r1 + r2);
                        } else if (c == '-') {
                            res.add(r1 - r2);
                        } else if (c == '*') {
                            res.add(r1 * r2);
                        }
                    }
                }
            }
        }
        if (res.size() == 0) {
            res.add(Integer.valueOf(expression));
        }
        return res;

=======

        List<Integer> res = new ArrayList<>();
        for (int i = 0; i < expression.length(); i++) {
            char c = expression.charAt(i);
            if (c == '+' || c == '-' || c == '*') {
                String a = expression.substring(0, i);
                String b = expression.substring(i + 1);
                List<Integer> aRes = diffWaysToCompute(a);
                List<Integer> bRes = diffWaysToCompute(b);
                for (Integer x : aRes) {
                    for (Integer y : bRes) {
                        switch (c) {
                            case '+':
                                res.add(x + y);
                                break;
                            case '-':
                                res.add(x - y);
                                break;
                            case '*':
                                res.add(x * y);
                                break;
                        }
                    }
                }
            }
        }
        if (res.isEmpty()) {
            res.add(Integer.valueOf(expression));
        }
        return res;

=======

        List<Integer> result = new ArrayList<>();
        for (int i = 0; i < expression.length(); i++) {
            char c = expression.charAt(i);
            if (c == '+' || c == '-' || c == '*') {
                String part1 = expression.substring(0, i);
                String part2 = expression.substring(i + 1);
                List<Integer> part1Result = diffWaysToCompute(part1);
                List<Integer> part2Result = diffWaysToCompute(part2);
                for (Integer p1 : part1Result) {
                    for (Integer p2 : part2Result) {
                        int r = 0;
                        switch (c) {
                            case '+':
                                r = p1 + p2;
                                break;
                            case '-':
                                r = p1 - p2;
                                break;
                            case '*':
                                r = p1 * p2;
                                break;
                        }
                        result.add(r);
                    }
                }
            }
        }
        if (result.size() == 0) {
            result.add(Integer.valueOf(expression));
        }
        return result;

=======

        List<Integer> result = new ArrayList<>();
        for (int i = 0; i < expression.length(); i++) {
            char c = expression.charAt(i);
            if (c == '+' || c == '-' || c == '*') {
                String a = expression.substring(0, i);
                String b = expression.substring(i + 1);
                List<Integer> resultA = diffWaysToCompute(a);
                List<Integer> resultB = diffWaysToCompute(b);
                for (int x : resultA) {
                    for (int y : resultB) {
                        if (c == '+') {
                            result.add(x + y);
                        } else if (c == '-') {
                            result.add(x - y);
                        } else if (c == '*') {
                            result.add(x * y);
                        }
                    }
                }
            }
        }
        if (result.size() == 0) {
            result.add(Integer.valueOf(expression));
        }
        return result;

=======

        List<Integer> result = new ArrayList<>();
        for (int i = 0; i < expression.length(); i++) {
            char c = expression.charAt(i);
            if (c == '+' || c == '-' || c == '*') {
                String part1 = expression.substring(0, i);
                String part2 = expression.substring(i + 1);
                List<Integer> result1 = diffWaysToCompute(part1);
                List<Integer> result2 = diffWaysToCompute(part2);
                for (Integer r1 : result1) {
                    for (Integer r2 : result2) {
                        int r = 0;
                        switch (c) {
                            case '+':
                                r = r1 + r2;
                                break;
                            case '-':
                                r = r1 - r2;
                                break;
                            case '*':
                                r = r1 * r2;
                                break;
                        }
                        result.add(r);
                    }
                }
            }
        }
        if (result.size() == 0) {
            result.add(Integer.valueOf(expression));
        }
        return result;

=======

        List<Integer> result = new ArrayList<>();
        for (int i = 0; i < expression.length(); i++) {
            char c = expression.charAt(i);
            if (c == '+' || c == '-' || c == '*') {
                List<Integer> left = diffWaysToCompute(expression.substring(0, i));
                List<Integer> right = diffWaysToCompute(expression.substring(i + 1));
                for (int l : left) {
                    for (int r : right) {
                        switch (c) {
                            case '+':
                                result.add(l + r);
                                break;
                            case '-':
                                result.add(l - r);
                                break;
                            case '*':
                                result.add(l * r);
                                break;
                        }
                    }
                }
            }
        }
        if (result.size() == 0) {
            result.add(Integer.valueOf(expression));
        }
        return result;

=======

        List<Integer> result = new ArrayList<Integer>();
        for (int i = 0; i < expression.length(); i++) {
            char c = expression.charAt(i);
            if (c == '+' || c == '-' || c == '*') {
                String part1 = expression.substring(0, i);
                String part2 = expression.substring(i + 1);
                List<Integer> result1 = diffWaysToCompute(part1);
                List<Integer> result2 = diffWaysToCompute(part2);
                for (Integer r1 : result1) {
                    for (Integer r2 : result2) {
                        if (c == '+') {
                            result.add(r1 + r2);
                        } else if (c == '-') {
                            result.add(r1 - r2);
                        } else if (c == '*') {
                            result.add(r1 * r2);
                        }
                    }
                }
            }
        }
        if (result.size() == 0) {
            result.add(Integer.valueOf(expression));
        }
        return result;

=======

        List<Integer> res = new ArrayList<>();
        for (int i = 0; i < expression.length(); ++i) {
            char c = expression.charAt(i);
            if (c == '+' || c == '-' || c == '*') {
                String left = expression.substring(0, i);
                String right = expression.substring(i + 1);
                List<Integer> leftRes = diffWaysToCompute(left);
                List<Integer> rightRes = diffWaysToCompute(right);
                for (int l : leftRes) {
                    for (int r : rightRes) {
                        if (c == '+') {
                            res.add(l + r);
                        } else if (c == '-') {
                            res.add(l - r);
                        } else {
                            res.add(l * r);
                        }
                    }
                }
            }
        }
        if (res.isEmpty()) {
            res.add(Integer.parseInt(expression));
        }
        return res;

=======

        List<Integer> ans = new ArrayList<>();
        for (int i = 0; i < expression.length(); i++) {
            char c = expression.charAt(i);
            if (!Character.isDigit(c)) {
                List<Integer> left = diffWaysToCompute(expression.substring(0, i));
                List<Integer> right = diffWaysToCompute(expression.substring(i + 1));
                for (int l : left) {
                    for (int r : right) {
                        ans.add(c == '+' ? l + r : c == '-' ? l - r : l * r);
                    }
                }
            }
        }
        if (ans.isEmpty()) {
            ans.add(Integer.valueOf(expression));
        }
        return ans;

=======

        List<Integer> res = new ArrayList<>();
        if(expression == null || expression.length() == 0) return res;
        int len = expression.length();
        for(int i = 0; i < len; i++) {
            char c = expression.charAt(i);
            if(c == '+' || c == '-' || c == '*') {
                List<Integer> left = diffWaysToCompute(expression.substring(0, i));
                List<Integer> right = diffWaysToCompute(expression.substring(i + 1));
                for(int l : left) {
                    for(int r : right) {
                        if(c == '+') {
                            res.add(l + r);
                        } else if(c == '-') {
                            res.add(l - r);
                        } else {
                            res.add(l * r);
                        }
                    }
                }
            }
        }
        if(res.size() == 0) {
            res.add(Integer.valueOf(expression));
        }
        return res;
