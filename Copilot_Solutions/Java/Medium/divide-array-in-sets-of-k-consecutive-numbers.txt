Synthesizing 10/10 solutions

=======

        if (nums.length % k != 0) {
            return false;
        }
        TreeMap<Integer, Integer> map = new TreeMap<>();
        for (int num : nums) {
            map.put(num, map.getOrDefault(num, 0) + 1);
        }
        while (map.size() > 0) {
            int first = map.firstKey();
            for (int i = 0; i < k; i++) {
                if (!map.containsKey(first + i)) {
                    return false;
                }
                int count = map.get(first + i);
                if (count == 1) {
                    map.remove(first + i);
                } else {
                    map.put(first + i, count - 1);
                }
            }
        }
        return true;

=======

        if (nums.length % k != 0) {
            return false;
        }
        TreeMap<Integer, Integer> map = new TreeMap<>();
        for (int num : nums) {
            map.put(num, map.getOrDefault(num, 0) + 1);
        }
        while (map.size() > 0) {
            int start = map.firstKey();
            for (int i = start; i < start + k; i++) {
                if (!map.containsKey(i)) {
                    return false;
                }
                int count = map.get(i);
                if (count == 1) {
                    map.remove(i);
                } else {
                    map.put(i, count - 1);
                }
            }
        }
        return true;

=======

        if (nums.length % k != 0) return false;
        TreeMap<Integer, Integer> map = new TreeMap<>();
        for (int num : nums) {
            map.put(num, map.getOrDefault(num, 0) + 1);
        }
        while (map.size() > 0) {
            int start = map.firstKey();
            for (int i = start; i < start + k; i++) {
                if (!map.containsKey(i)) return false;
                if (map.get(i) == 1) map.remove(i);
                else map.put(i, map.get(i) - 1);
            }
        }
        return true;

=======

        if (nums.length % k != 0) return false;
        TreeMap<Integer, Integer> map = new TreeMap<>();
        for (int num : nums) {
            map.put(num, map.getOrDefault(num, 0) + 1);
        }
        while (!map.isEmpty()) {
            int start = map.firstKey();
            for (int i = start; i < start + k; i++) {
                if (!map.containsKey(i)) return false;
                int count = map.get(i);
                if (count == 1) {
                    map.remove(i);
                } else {
                    map.put(i, count - 1);
                }
            }
        }
        return true;

=======

        if (nums.length % k != 0) return false;
        TreeMap<Integer, Integer> map = new TreeMap<>();
        for (int num : nums) {
            map.put(num, map.getOrDefault(num, 0) + 1);
        }
        while (map.size() > 0) {
            int key = map.firstKey();
            int value = map.get(key);
            for (int i = 0; i < k; i++) {
                if (map.getOrDefault(key + i, 0) < value) return false;
                if (map.get(key + i) == value) map.remove(key + i);
                else map.put(key + i, map.get(key + i) - value);
            }
        }
        return true;

=======

        if (nums.length % k != 0) return false;
        TreeMap<Integer, Integer> map = new TreeMap<>();
        for (int num : nums) {
            map.put(num, map.getOrDefault(num, 0) + 1);
        }
        while (!map.isEmpty()) {
            int first = map.firstKey();
            for (int i = 0; i < k; i++) {
                int next = first + i;
                if (!map.containsKey(next)) return false;
                int count = map.get(next);
                if (count == 1) map.remove(next);
                else map.put(next, count - 1);
            }
        }
        return true;

=======

        if (nums.length % k != 0) {
            return false;
        }
        Arrays.sort(nums);
        Map<Integer, Integer> map = new HashMap<>();
        for (int num : nums) {
            map.put(num, map.getOrDefault(num, 0) + 1);
        }
        for (int num : nums) {
            if (map.get(num) == 0) {
                continue;
            }
            for (int i = 0; i < k; i++) {
                if (map.getOrDefault(num + i, 0) == 0) {
                    return false;
                }
                map.put(num + i, map.get(num + i) - 1);
            }
        }
        return true;

=======

        if (nums.length % k != 0) return false;
        TreeMap<Integer, Integer> map = new TreeMap<>();
        for (int i = 0; i < nums.length; i++) {
            map.put(nums[i], map.getOrDefault(nums[i], 0) + 1);
        }
        while (!map.isEmpty()) {
            int start = map.firstKey();
            for (int i = start; i < start + k; i++) {
                if (!map.containsKey(i)) return false;
                int count = map.get(i);
                if (count == 1) {
                    map.remove(i);
                } else {
                    map.put(i, count - 1);
                }
            }
        }
        return true;

=======

        if (nums.length % k != 0) {
            return false;
        }
        Map<Integer, Integer> count = new HashMap<>();
        for (int num : nums) {
            count.put(num, count.getOrDefault(num, 0) + 1);
        }
        List<Integer> keys = new ArrayList<>(count.keySet());
        Collections.sort(keys);
        for (int num : keys) {
            if (count.get(num) > 0) {
                for (int i = k - 1; i >= 0; i--) {
                    int current = num + i;
                    if (count.get(current) == null || count.get(current) < count.get(num)) {
                        return false;
                    }
                    count.put(current, count.get(current) - count.get(num));
                }
            }
        }
        return true;

=======

        if (nums.length % k != 0) {
            return false;
        }
        int[] count = new int[100001];
        for (int num : nums) {
            count[num]++;
        }
        for (int i = 0; i < count.length; i++) {
            if (count[i] > 0) {
                for (int j = i + 1; j < i + k; j++) {
                    if (count[j] < count[i]) {
                        return false;
                    } else {
                        count[j] -= count[i];
                    }
                }
            }
        }
        return true;
