Synthesizing 10/10 solutions

=======

        int[] count = new int[26];
        int maxLength = 0;
        for (int i = 0; i < s.length(); i++) {
            if (i > 0 && (s.charAt(i) - s.charAt(i - 1) == 1 || s.charAt(i - 1) - s.charAt(i) == 25)) {
                maxLength++;
            } else {
                maxLength = 1;
            }
            int index = s.charAt(i) - 'a';
            count[index] = Math.max(count[index], maxLength);
        }
        int result = 0;
        for (int i = 0; i < 26; i++) {
            result += count[i];
        }
        return result;

=======

        int[] count = new int[26];
        int maxLen = 0;
        for (int i = 0; i < s.length(); i++) {
            if (i > 0 && (s.charAt(i) - s.charAt(i - 1) == 1 || s.charAt(i) - s.charAt(i - 1) == -25)) {
                maxLen++;
            } else {
                maxLen = 1;
            }
            int index = s.charAt(i) - 'a';
            count[index] = Math.max(count[index], maxLen);
        }
        int res = 0;
        for (int i = 0; i < 26; i++) {
            res += count[i];
        }
        return res;

=======

        int[] dp = new int[26];
        int len = 0;
        for (int i = 0; i < s.length(); i++) {
            if (i > 0 && (s.charAt(i) - s.charAt(i - 1) == 1 || s.charAt(i - 1) - s.charAt(i) == 25)) {
                len++;
            } else {
                len = 1;
            }
            int index = s.charAt(i) - 'a';
            dp[index] = Math.max(dp[index], len);
        }
        int sum = 0;
        for (int i = 0; i < 26; i++) {
            sum += dp[i];
        }
        return sum;

=======

        int[] dp = new int[26];
        int len = 0;
        for (int i = 0; i < s.length(); i++) {
            if (i > 0 && (s.charAt(i) - s.charAt(i - 1) == 1 || s.charAt(i - 1) - s.charAt(i) == 25)) {
                len++;
            } else {
                len = 1;
            }
            int index = s.charAt(i) - 'a';
            dp[index] = Math.max(dp[index], len);
        }
        int res = 0;
        for (int i = 0; i < dp.length; i++) {
            res += dp[i];
        }
        return res;

=======

        int[] dp = new int[26];
        int len = 0;
        for (int i = 0; i < s.length(); i++) {
            if (i > 0 && (s.charAt(i) - s.charAt(i - 1) == 1 || s.charAt(i - 1) - s.charAt(i) == 25)) {
                len++;
            } else {
                len = 1;
            }
            int index = s.charAt(i) - 'a';
            dp[index] = Math.max(dp[index], len);
        }
        int result = 0;
        for (int i = 0; i < 26; i++) {
            result += dp[i];
        }
        return result;

=======

        int[] count = new int[26];
        int max = 0;
        for (int i = 0; i < s.length(); i++) {
            if (i > 0 && (s.charAt(i) - s.charAt(i - 1) == 1 || s.charAt(i - 1) - s.charAt(i) == 25)) {
                max++;
            } else {
                max = 1;
            }
            int index = s.charAt(i) - 'a';
            count[index] = Math.max(count[index], max);
        }
        int res = 0;
        for (int c : count) {
            res += c;
        }
        return res;

=======

        int[] cnt = new int[26];
        int max = 0;
        for (int i = 0; i < s.length(); i++) {
            if (i > 0 && (s.charAt(i) - s.charAt(i - 1) == 1 || s.charAt(i - 1) - s.charAt(i) == 25)) {
                max++;
            } else {
                max = 1;
            }
            int index = s.charAt(i) - 'a';
            cnt[index] = Math.max(cnt[index], max);
        }
        int res = 0;
        for (int i : cnt) {
            res += i;
        }
        return res;

=======

        int[] dp = new int[26];
        int curLen = 0;
        for (int i = 0; i < s.length(); i++) {
            if (i > 0 && (s.charAt(i) - s.charAt(i - 1) == 1 || s.charAt(i - 1) - s.charAt(i) == 25)) {
                curLen++;
            } else {
                curLen = 1;
            }
            int index = s.charAt(i) - 'a';
            dp[index] = Math.max(dp[index], curLen);
        }
        int res = 0;
        for (int i = 0; i < 26; i++) {
            res += dp[i];
        }
        return res;

=======

        int[] maxLen = new int[26];
        int len = 0;
        for (int i = 0; i < s.length(); i++) {
            if (i > 0 && (s.charAt(i) - s.charAt(i - 1) == 1 || s.charAt(i - 1) - s.charAt(i) == 25)) {
                len++;
            } else {
                len = 1;
            }
            int index = s.charAt(i) - 'a';
            maxLen[index] = Math.max(maxLen[index], len);
        }
        int res = 0;
        for (int i = 0; i < 26; i++) {
            res += maxLen[i];
        }
        return res;

=======

        int[] counts = new int[26];
        int length = 0;
        for (int i = 0; i < s.length(); i++) {
            if (i > 0 && (s.charAt(i) - s.charAt(i - 1) == 1 || s.charAt(i - 1) - s.charAt(i) == 25)) {
                length++;
            } else {
                length = 1;
            }
            counts[s.charAt(i) - 'a'] = Math.max(counts[s.charAt(i) - 'a'], length);
        }
        int sum = 0;
        for (int count : counts) {
            sum += count;
        }
        return sum;
