Synthesizing 10/10 solutions

=======

        int[] res = new int[points.length];
        for (int i = 0; i < points.length; i++) {
            for (int j = 0; j < rectangles.length; j++) {
                if (points[i][0] <= rectangles[j][0] && points[i][1] <= rectangles[j][1]) {
                    res[i]++;
                }
            }
        }
        return res;

=======

        int[] ans = new int[points.length];
        for (int i = 0; i < points.length; i++) {
            for (int j = 0; j < rectangles.length; j++) {
                if (points[i][0] <= rectangles[j][0] && points[i][1] <= rectangles[j][1]) {
                    ans[i]++;
                }
            }
        }
        return ans;

=======

        int[] res = new int[points.length];
        for (int i = 0; i < points.length; i++) {
            int x = points[i][0];
            int y = points[i][1];
            for (int j = 0; j < rectangles.length; j++) {
                if (x <= rectangles[j][0] && y <= rectangles[j][1]) {
                    res[i]++;
                }
            }
        }
        return res;

=======

        int[] result = new int[points.length];
        for (int i = 0; i < rectangles.length; i++) {
            for (int j = 0; j < points.length; j++) {
                if (points[j][0] <= rectangles[i][0] && points[j][1] <= rectangles[i][1]) {
                    result[j]++;
                }
            }
        }
        return result;

=======

        int[] count = new int[points.length];
        for (int i = 0; i < rectangles.length; i++) {
            int[] rect = rectangles[i];
            for (int j = 0; j < points.length; j++) {
                int[] point = points[j];
                if (point[0] <= rect[0] && point[1] <= rect[1]) {
                    count[j]++;
                }
            }
        }
        return count;

=======

        int[] res = new int[points.length];
        int[] x = new int[rectangles.length];
        int[] y = new int[rectangles.length];
        for (int i = 0; i < rectangles.length; i++) {
            x[i] = rectangles[i][0];
            y[i] = rectangles[i][1];
        }
        Arrays.sort(x);
        Arrays.sort(y);
        for (int i = 0; i < points.length; i++) {
            int left = 0;
            int right = rectangles.length - 1;
            int mid = 0;
            while (left < right) {
                mid = (left + right) / 2;
                if (x[mid] < points[i][0]) {
                    left = mid + 1;
                } else {
                    right = mid;
                }
            }
            int indexX = left;
            if (x[indexX] < points[i][0]) {
                indexX++;
            }
            left = 0;
            right = rectangles.length - 1;
            while (left < right) {
                mid = (left + right) / 2;
                if (y[mid] < points[i][1]) {
                    left = mid + 1;
                } else {
                    right = mid;
                }
            }
            int indexY = left;
            if (y[indexY] < points[i][1]) {
                indexY++;
            }
            res[i] = indexX * indexY;
        }
        return res;

=======

        int[] res = new int[points.length];
        for (int i = 0; i < points.length; i++) {
            int[] point = points[i];
            int x = point[0];
            int y = point[1];
            for (int[] rect : rectangles) {
                if (x <= rect[0] && y <= rect[1]) {
                    res[i]++;
                }
            }
        }
        return res;

=======

        int[] count = new int[points.length];
        int[] x = new int[rectangles.length];
        int[] y = new int[rectangles.length];
        for(int i = 0; i < rectangles.length; i++) {
            x[i] = rectangles[i][0];
            y[i] = rectangles[i][1];
        }
        Arrays.sort(x);
        Arrays.sort(y);
        for(int i = 0; i < points.length; i++) {
            int[] point = points[i];
            int xIndex = Arrays.binarySearch(x, point[0]);
            if(xIndex < 0) {
                xIndex = -xIndex - 1;
            }
            int yIndex = Arrays.binarySearch(y, point[1]);
            if(yIndex < 0) {
                yIndex = -yIndex - 1;
            }
            count[i] = xIndex * yIndex;
        }
        return count;

=======

        int[] result = new int[points.length];
        TreeMap<Integer, Integer> map = new TreeMap();
        for (int[] rec : rectangles) {
            map.put(rec[0], map.getOrDefault(rec[0], 0) + 1);
            map.put(rec[1], map.getOrDefault(rec[1], 0) - 1);
        }
        int count = 0;
        int[] heights = new int[map.size()];
        int i = 0;
        for (int key : map.keySet()) {
            heights[i++] = count += map.get(key);
        }
        for (i = 0; i < points.length; i++) {
            int[] p = points[i];
            int left = 0, right = heights.length - 1;
            while (left < right) {
                int mid = left + (right - left) / 2;
                if (map.keySet().toArray()[mid] < p[0]) {
                    left = mid + 1;
                } else {
                    right = mid;
                }
            }
            if (left > 0 && map.keySet().toArray()[left] > p[0]) {
                left--;
            }
            if (map.keySet().toArray()[left] <= p[0]) {
                result[i] = heights[left];
            }
        }
        return result;

=======

        int[] ans = new int[points.length];
        int k = 0;
        for(int[] point: points){
            int x = point[0];
            int y = point[1];
            for(int[] rectangle: rectangles){
                int lx = rectangle[0];
                int ly = rectangle[1];
                if(x <= lx && y <= ly){
                    ans[k]++;
                }
            }
            k++;
        }
        return ans;
