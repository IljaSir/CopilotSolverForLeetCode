Synthesizing 8/10 solutions

=======

        int max1 = Integer.MIN_VALUE;
        int min1 = Integer.MAX_VALUE;
        int max2 = Integer.MIN_VALUE;
        int min2 = Integer.MAX_VALUE;
        int max3 = Integer.MIN_VALUE;
        int min3 = Integer.MAX_VALUE;
        int max4 = Integer.MIN_VALUE;
        int min4 = Integer.MAX_VALUE;
        for (int i = 0; i < arr1.length; i++) {
            max1 = Math.max(max1, arr1[i] + arr2[i] + i);
            min1 = Math.min(min1, arr1[i] + arr2[i] + i);
            max2 = Math.max(max2, arr1[i] + arr2[i] - i);
            min2 = Math.min(min2, arr1[i] + arr2[i] - i);
            max3 = Math.max(max3, arr1[i] - arr2[i] + i);
            min3 = Math.min(min3, arr1[i] - arr2[i] + i);
            max4 = Math.max(max4, arr1[i] - arr2[i] - i);
            min4 = Math.min(min4, arr1[i] - arr2[i] - i);
        }
        return Math.max(max1 - min1, Math.max(max2 - min2, Math.max(max3 - min3, max4 - min4)));

=======

        int[] a = new int[arr1.length];
        int[] b = new int[arr1.length];
        int[] c = new int[arr1.length];
        int[] d = new int[arr1.length];
        for (int i = 0; i < arr1.length; i++) {
            a[i] = arr1[i] + arr2[i] + i;
            b[i] = arr1[i] + arr2[i] - i;
            c[i] = arr1[i] - arr2[i] + i;
            d[i] = arr1[i] - arr2[i] - i;
        }
        return Math.max(Math.max(max(a) - min(a), max(b) - min(b)), Math.max(max(c) - min(c), max(d) - min(d)));
    }
    private int max(int[] arr) {
        int max = Integer.MIN_VALUE;
        for (int i = 0; i < arr.length; i++) {
            if (arr[i] > max) {
                max = arr[i];
            }
        }
        return max;
    }
    private int min(int[] arr) {
        int min = Integer.MAX_VALUE;
        for (int i = 0; i < arr.length; i++) {
            if (arr[i] < min) {
                min = arr[i];
            }
        }
        return min;

=======

        int n = arr1.length;
        int[] p = new int[n];
        int[] q = new int[n];
        int[] r = new int[n];
        int[] s = new int[n];
        for (int i = 0; i < n; i++) {
            p[i] = arr1[i] + arr2[i] + i;
            q[i] = arr1[i] + arr2[i] - i;
            r[i] = arr1[i] - arr2[i] + i;
            s[i] = arr1[i] - arr2[i] - i;
        }
        int ans = 0;
        ans = Math.max(ans, max(p) - min(p));
        ans = Math.max(ans, max(q) - min(q));
        ans = Math.max(ans, max(r) - min(r));
        ans = Math.max(ans, max(s) - min(s));
        return ans;
    }
    int max(int[] a) {
        int ans = a[0];
        for (int i = 1; i < a.length; i++) {
            ans = Math.max(ans, a[i]);
        }
        return ans;
    }
    int min(int[] a) {
        int ans = a[0];
        for (int i = 1; i < a.length; i++) {
            ans = Math.min(ans, a[i]);
        }
        return ans;

=======

        int n = arr1.length;
        int[][] dp = new int[n][4];
        dp[0][0] = arr1[0] + arr2[0];
        dp[0][1] = arr1[0] - arr2[0];
        dp[0][2] = -arr1[0] + arr2[0];
        dp[0][3] = -arr1[0] - arr2[0];
        int max = 0;
        for (int i = 1; i < n; i++) {
            int[] cur = new int[4];
            cur[0] = arr1[i] + arr2[i];
            cur[1] = arr1[i] - arr2[i];
            cur[2] = -arr1[i] + arr2[i];
            cur[3] = -arr1[i] - arr2[i];
            for (int j = 0; j < 4; j++) {
                int diff = Math.abs(i - 0);
                dp[i][j] = Math.max(dp[i][j], dp[0][j] + diff);
                dp[i][j] = Math.max(dp[i][j], cur[j] + diff);
                max = Math.max(max, dp[i][j]);
            }
            for (int j = 0; j < 4; j++) {
                int diff = Math.abs(i - (i - 1));
                dp[i][j] = Math.max(dp[i][j], dp[i - 1][j] + diff);
                dp[i][j] = Math.max(dp[i][j], cur[j] + diff);
                max = Math.max(max, dp[i][j]);
            }
        }
        return max;

=======

        int len = arr1.length;
        int max1 = Integer.MIN_VALUE;
        int max2 = Integer.MIN_VALUE;
        int max3 = Integer.MIN_VALUE;
        int max4 = Integer.MIN_VALUE;
        int min1 = Integer.MAX_VALUE;
        int min2 = Integer.MAX_VALUE;
        int min3 = Integer.MAX_VALUE;
        int min4 = Integer.MAX_VALUE;
        for (int i = 0; i < len; i++) {
            int x = arr1[i];
            int y = arr2[i];
            max1 = Math.max(max1, x + y + i);
            min1 = Math.min(min1, x + y + i);
            max2 = Math.max(max2, x + y - i);
            min2 = Math.min(min2, x + y - i);
            max3 = Math.max(max3, x - y + i);
            min3 = Math.min(min3, x - y + i);
            max4 = Math.max(max4, x - y - i);
            min4 = Math.min(min4, x - y - i);
        }
        return Math.max(Math.max(max1 - min1, max2 - min2), Math.max(max3 - min3, max4 - min4));

=======

        int n = arr1.length;
        int[][] dp = new int[n][4];
        for (int i = 0; i < n; i++) {
            dp[i][0] = arr1[i] + arr2[i] + i;
            dp[i][1] = arr1[i] + arr2[i] - i;
            dp[i][2] = -arr1[i] + arr2[i] + i;
            dp[i][3] = -arr1[i] + arr2[i] - i;
        }
        int[] min = new int[4];
        int[] max = new int[4];
        Arrays.fill(min, Integer.MAX_VALUE);
        Arrays.fill(max, Integer.MIN_VALUE);
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < 4; j++) {
                min[j] = Math.min(min[j], dp[i][j]);
                max[j] = Math.max(max[j], dp[i][j]);
            }
        }
        int res = 0;
        for (int i = 0; i < 4; i++) {
            res = Math.max(res, max[i] - min[i]);
        }
        return res;

=======

        int n = arr1.length;
        int[][] dp = new int[n][4];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < 4; j++) {
                dp[i][j] = Integer.MIN_VALUE;
            }
        }
        dp[0][0] = arr1[0] + arr2[0];
        dp[0][1] = arr1[0] - arr2[0];
        dp[0][2] = -arr1[0] + arr2[0];
        dp[0][3] = -arr1[0] - arr2[0];
        int ans = Integer.MIN_VALUE;
        for (int i = 1; i < n; i++) {
            int a = arr1[i] + arr2[i];
            int b = arr1[i] - arr2[i];
            int c = -arr1[i] + arr2[i];
            int d = -arr1[i] - arr2[i];
            dp[i][0] = Math.max(dp[i][0], Math.max(dp[i - 1][0], a) + i);
            dp[i][1] = Math.max(dp[i][1], Math.max(dp[i - 1][1], b) + i);
            dp[i][2] = Math.max(dp[i][2], Math.max(dp[i - 1][2], c) + i);
            dp[i][3] = Math.max(dp[i][3], Math.max(dp[i - 1][3], d) + i);
            ans = Math.max(ans, dp[i][0]);
            ans = Math.max(ans, dp[i][1]);
            ans = Math.max(ans, dp[i][2]);
            ans = Math.max(ans, dp[i][3]);
        }
        return ans;

=======

        int n = arr1.length;
        int[][] max = new int[4][n];
        int[][] min = new int[4][n];
        for (int i = 0; i < n; i++) {
            max[0][i] = arr1[i] + arr2[i] + i;
            min[0][i] = arr1[i] + arr2[i] + i;
            max[1][i] = arr1[i] + arr2[i] - i;
            min[1][i] = arr1[i] + arr2[i] - i;
            max[2][i] = arr1[i] - arr2[i] + i;
            min[2][i] = arr1[i] - arr2[i] + i;
            max[3][i] = arr1[i] - arr2[i] - i;
            min[3][i] = arr1[i] - arr2[i] - i;
        }
        int res = 0;
        for (int i = 0; i < 4; i++) {
            int m = max[i][0];
            int mi = min[i][0];
            for (int j = 1; j < n; j++) {
                res = Math.max(res, Math.max(m - min[i][j], max[i][j] - mi));
                m = Math.max(m, max[i][j]);
                mi = Math.min(mi, min[i][j]);
            }
        }
        return res;
