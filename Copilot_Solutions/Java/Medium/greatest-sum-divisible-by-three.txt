Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int[] dp = new int[3];
        for (int num : nums) {
            int[] ndp = new int[3];
            for (int i = 0; i < 3; i++) {
                ndp[(num + i) % 3] = Math.max(dp[(num + i) % 3], dp[i] + num);
            }
            dp = ndp;
        }
        return dp[0];

=======

        int[] dp = new int[3];
        for (int num : nums) {
            int[] dp2 = new int[3];
            for (int i = 0; i < 3; i++) {
                dp2[(num + dp[i]) % 3] = Math.max(dp2[(num + dp[i]) % 3], num + dp[i]);
            }
            dp = dp2;
        }
        return dp[0];

=======

        int[] dp = new int[3];
        for (int num : nums) {
            int[] tmp = new int[3];
            for (int i = 0; i < 3; i++) {
                tmp[(num + dp[i]) % 3] = Math.max(tmp[(num + dp[i]) % 3], num + dp[i]);
            }
            dp = tmp;
        }
        return dp[0];

=======

        int sum = 0;
        int min1 = 10001;
        int min2 = 10001;
        for (int num : nums) {
            sum += num;
            if (num % 3 == 1) {
                min2 = Math.min(min2, min1 + num);
                min1 = Math.min(min1, num);
            } else if (num % 3 == 2) {
                min1 = Math.min(min1, min2 + num);
                min2 = Math.min(min2, num);
            }
        }
        if (sum % 3 == 0) {
            return sum;
        } else if (sum % 3 == 1) {
            return sum - min1;
        } else {
            return sum - min2;
        }

=======

        int[] dp = new int[3];
        for (int i = 0; i < nums.length; i++) {
            int[] temp = dp.clone();
            for (int j = 0; j < 3; j++) {
                dp[(temp[j] + nums[i]) % 3] = Math.max(dp[(temp[j] + nums[i]) % 3], temp[j] + nums[i]);
            }
        }
        return dp[0];

=======

        int[] dp = new int[3];
        for (int num : nums) {
            int[] dp2 = new int[3];
            for (int i = 0; i < 3; ++i)
                dp2[(num + dp[i]) % 3] = Math.max(dp2[(num + dp[i]) % 3], dp[i] + num);
            dp = dp2;
        }
        return dp[0];

=======

        int[] dp = new int[3];
        for (int n : nums) {
            int[] dp2 = new int[3];
            for (int i = 0; i < 3; i++) {
                dp2[(dp[i] + n) % 3] = Math.max(dp2[(dp[i] + n) % 3], dp[i] + n);
            }
            dp = dp2;
        }
        return dp[0];

=======

        int dp[] = new int[3];
        for (int n : nums) {
            int dp2[] = new int[3];
            for (int i = 0; i < 3; i++) {
                dp2[(n + dp[i]) % 3] = Math.max(dp2[(n + dp[i]) % 3], n + dp[i]);
            }
            dp = dp2;
        }
        return dp[0];
