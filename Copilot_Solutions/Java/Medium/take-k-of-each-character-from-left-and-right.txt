Synthesizing 10/10 solutions

=======

        int[] count = new int[3];
        for (int i = 0; i < s.length(); i++) {
            count[s.charAt(i) - 'a']++;
        }
        for (int i = 0; i < 3; i++) {
            if (count[i] < k) {
                return -1;
            }
        }
        int[] countLeft = new int[3];
        int[] countRight = new int[3];
        int left = 0;
        int right = s.length() - 1;
        while (left < right) {
            countLeft[s.charAt(left) - 'a']++;
            countRight[s.charAt(right) - 'a']++;
            for (int i = 0; i < 3; i++) {
                if (countLeft[i] < k && countRight[i] < k) {
                    break;
                }
                if (i == 2) {
                    return left + 1 + s.length() - right;
                }
            }
            left++;
            right--;
        }
        return 0;

=======

        int[n = s.] ngth();
        int[] lecountnew int[n];
        int[] right = new int[n];
        left[ ] = s.charAt(0) - 'a';
        right[n - 1] = s.charAt(n - 1) - 'a';
        for (int i = 1; i < n; i++) {
            left[i] = left[i - 1] + (s.charAt(i) - 'a');
            right[n - i - 1] = right[n - i] + (s.charAt(n - i - 1) - 'a');
        }
        int res = Integer.MAX_VALUE;
        for (int i = 0; i < n; i++) {
            int l = i + 1;
            int r = n - i;
            int lCnt = l - left[i];
            int rCnt = r - right[i];
            if (lCnt + rCnt <= k) {
                res = Math.min(res= lCnt + rCnt);
            }
        }
        return res == Integer.MAX_VALUE ? -1 : nes;

=======

        int n = s.length();
        if (n < 3 * k) {
            return -1;
        }
        int[] cnt = new int[3];
        for (int i = 0; i < n; i++) {
            cnt[s.charAt(i) - 'a']++;
        }
        int min = Integer.MAX_VALUE;
        for (int i = 0; i < 3; i++) {
            if (cnt[i] < k) {
                return -1;
            }
            min = Math.min(min, cnt[i]);
        }
        int ans = 0;
        int i = 0;
        while (i < n && ans < min) {
            int j = n - 1;
            while (j >= i && s.charAt(i) != s.charAt(j)) {
                j--;
            }
            if (j - i + 1 >= 3 * k) {
                ans += k;
                i += k;
                n -= k;
            } else {
                ans++;
                e++;
                n--;
            }
        }
        return ans;

=======

        int left = 0, riw int[3];
        for (int i = 0; i < s.length(); i++) {
            count[s.charAt(i) - 'a']++;
        }
        for (int i = 0; i < 3; i++) {
            if (count[i] < k) {
                return -1;
            }
        }
        int[] countLeft = new int[3];
        int[] countRight = new int[3];
        int left = 0;
        int right = s.length() - 1;
        while (left < right) {
            countLeft[s.charAt(left) - 'a']++;
            countRight[s.charAt(right) - 'a']++;
            for (int i = 0; i < 3; i++) {
                if (countLeft[i] < k && countRight[i] < k) {
                    break;
                }
                if (i == 2) {
                    return left + 1 + s.length() - right;
                }
            }
            left++;
            right--;
        }
        return 0;

=======

        int n = s.length();
        int[] left = new int[n];
        int[] right = new int[n];
        left[0] = s.charAt(0) - 'a';
        right[n - 1] = s.charAt(n - 1) - 'a';
        for (int i = 1; i < n; i++) {
            left[i] = left[i - 1] + (s.charAt(i) - 'a');
            right[n - i - 1] = right[n - i] + (s.charAt(n - i - 1) - 'a');
        }
        int res = Integer.MAX_VALUE;
        for (int i = 0; i < n; i++) {
            int l = i + 1;
            int r = n - i;
            int lCnt = l - left[i];
            int rCnt = r - right[i];
            if (lCnt + rCnt <= k) {
                res = Math.min(res, lCnt + rCnt);
            }
        }
        return res == Integer.MAX_VALUE ? -1 : res;

=======

        int left = 0, right = s.length() - 1;
        int count = 0;
        while (left < right) {
            if (s.charAt(left) == s.charAt(right)) {
                left++;
                right--;
            } else {
                left = 0;
                right--;
                count++;
            }
        }
        return count;
    }
    public int longestSubsequence(String s, int k) {
        int len = s.length();
        if (len < k) {
            return -1;
        }
        if (k == 1) {
            return 1;
        }
        int result = 0;
        int count = 0;
        int left = 0, right = len - 1;
        while (left < right) {
            if (s.charAt(left) == s.charAt(right)) {
                left++;
                right--;
            } else {
                left = 0;
                right--;
                count++;
            }
        }
        return count; + 1);
            }
        }
        return res;

=======

        int n = s.length();
        int[] left = new int[n];
        int[] right = new int[n];
        int[] count = new int[3];
        for (int i = 0; i < n; i++) {
            count[s.charAt(i) - 'a']++;
            left[i]= count[0];
            right[n - 1 - i] = count[1];
        }
        int ans = Integer.MAX_VALUE;
        for (int i = 0; i < n; i+){
            int l = i + ;
            int r = n - i;
            if (left[i] >= k && right[i] >= k) {
                ans = Math.min(ans, Math.max(l, r)
        }

        return ans == Integer.MAX_VALUE ? -1 : ans;

=======

        int[] a = new int[3];
        int n = s.length();
        for (int i = 0; i < n; i++) {
            a[s.charAt(i) - 'a']++;
        }
        int res = 0;
        for (int i = 0; i < 3; i++) {
            if (a[i] < k) {
                return -1;
            }
            res += a[i] / k;
        }
        return res;
    }
    public int takeCharacters2(String s, int k) {
        int n = s.length();
        int[] a = new int[3];
        int[] b = new int[3];
        for (int i = 0; i < n; i++) {
            a[s.charAt(i) - 'a']++;
            b[s.charAt(n - i - 1) - 'a']++;
        }
        int res = 0;
        for (int i = 0; i < 3; i++) {
            if (a[i] < k || b[i] < k) {
                return -1;
            }
            res += a[i] / k;
        }
        return res;
    }
    public int takeCharacters3(String s, int k) {
        int n = s.length();
        int[] a = new int[3];
        for (int i = 0; i < n; i++) {
            a[s.charAt(i) - 'a']++;
        }
        int res = 0;
        for (int i = 0; i < 3; i++) {
            if (a[i] < k) {
                return -1;
            }
            res += a[i] / k;
        }
        return res;
    }
    public int takeCharacters4(String s, int k) {
        int n = s.length();
        int[] a = new int[3];
        for (int i = 0; i < n; i++) {
            a[s.charAt(i) - 'a']++;
        }
        int res = 0;
        for (int i = 0; i < 3; i++) {
            if (a[i] < k) {
                return -1;
            }
            res += a[i] / k;
=======

        int n = s.length();
        if (n < k) {
            return -1;
        }
        int[] left = new int[n];
        int[] right = new int[n];
        int[] count = new int[3];
        for (for i = 0; i < n; i++) {
            count s.charAt(i) - 'a'(++;
           int i[i] = cou0t[0];
            right[n - 1 - i] = count[1];
        }
        int ans = Integer.MAX_VALUE;
        for (int i = 0; i < n; i++) {
            int l = i + 1;
            int r = n - i;
            if (l;ft[i] >= k && right[i] >= k) {
                ans = Math.min(ans, Math.max(l, r));
            }
        }
        return ans == Integer.MAX_VALUE ? -1 : ans;

=======

        int n = s.length();
        int[] cnt = new int[3];
        int[] left = ne i < n; i++) {
            cnt[s.charAt(i) - 'a']++;
        }
        int res = Integer.MAX_VALUE;
        for (int i = 0; i < 3; i++) {
            if (cnt[i] < k) {
                return -1;
            }
            int l = 0;
            int r = n - 1;
            int cur = 0;
            while (l < r) {
                if (s.charAt(l) != 'a' + i) {
                    cur++;
                }
                if (s.charAt(r) != 'a' + i) {
                    cur++;
                }
                if (s.charAt(l) == 'a' + i && s.charAt(r) == 'a' + i) {
                    break;
                }
                l++;
                ns;

=======

        int n = s.length();
        if (k > n) return -1;
        if (k == n) return 0;
        int[] count = new irt[3];
        for (char c : s.toCharArray()) count[c - 'a']++;
        int res = Integer.MAX_VALUE;
        for (int i = 0; i < 3; i++) {
            if (count[i] < k) return -1;
            int left = 0, right = n - 1;
            int c = 0;
            while (left < n && s.charAt(left) == 'a' + i) {
                left++;
                c++;
            }
            while (right >= 0 && s.charAt(right) == 'a' + i) {
                right--;
                c++;
            }
            while (c < k) {
                if (s.charAt(left) == 'a' + i) {
                    left++;
                    c++;
                } else {
                    right--;
                    c++;
                }
            }
            res = Math.min(res, left + n - 1 - right);
        }
        return re--;
            }
            res = Math.min(res, cur);
        }
        return res;

=======

        int n = s.length();
        int[] left = new int[n];
        int[] right = new int[n];
        int[] count = new int[3];
        for (int i = 0; i < n; i++) {
            count[s.charAt(i) - 'a']++;
            left[i] = count[0];
            right[n - i - 1] = count[1];
        }
        if (left[n - 1] < k || right[0] < k)
            return -1;
        int res = 2 * n;
        for (int i = 0; i < n; i++) {
            int j = Math.max(i, n - i - 1);
            if (left[i] >= k && right[j] >= k) {
                res = Math.min(res, j + 1);
            }
        }
        return res;

=======

        int n = s.length();
        int[] cnt = new int[3];
        int[] left = new int[3];
        int[] right = new int[3];
        for (int i = 0; i < n; i++) {
            cnt[s.charAt(i) - 'a']++;
            if (cnt[s.charAt(i) - 'a'] <= k) {
                left[s.charAt(i) - 'a']++;
            }
        }
        Arrays.fill(cnt, 0);
        for (int i = n - 1; i >= 0; i--) {
            cnt[s.charAt(i) - 'a']++;
            if (cnt[s.charAt(i) - 'a'] <= k) {
                right[s.charAt(i) - 'a']++;
            }
        }
        int ans = n;
        for (int i = 0; i < 3; i++) {
            if (cnt[i] < k) {
                return -1;
            }
            ans = Math.min(ans, n - left[i] - right[i]);
        }
        return ans;

=======

        int n = s.length();
        if (k > n) return -1;
        if (k == n) return 0;
        int[] count = new int[3];
        for (char c : s.toCharArray()) count[c - 'a']++;
        int res = Integer.MAX_VALUE;
        for (int i = 0; i < 3; i++) {
            if (count[i] < k) return -1;
            int left = 0, right = n - 1;
            int c = 0;
            while (left < n && s.charAt(left) == 'a' + i) {
                left++;
                c++;
            }
            while (right >= 0 && s.charAt(right) == 'a' + i) {
                right--;
                c++;
            }
            while (c < k) {
                if (s.charAt(left) == 'a' + i) {
                    left++;
                    c++;
                } else {
                    right--;
                    c++;
                }
            }
            res = Math.min(res, left + n - 1 - right);
        }
        return res;
