Synthesizing 10/10 solutions (Duplicates hidden)

=======

        Arrays.sort(score, new Comparator<int[]>() {
            @Override
            public int compare(int[] a, int[] b) {
                return b[k] - a[k];
            }
        });
        return score;

=======

        Arrays.sort(score, (a, b) -> b[k] - a[k]);
        return score;

=======

        int n = score.length;
        int m = score[0].length;
        for (int i = 0; i < n - 1; i++) {
            for (int j = 0; j < n - i - 1; j++) {
                if (score[j][k] < score[j + 1][k]) {
                    int[] temp = score[j];
                    score[j] = score[j + 1];
                    score[j + 1] = temp;
                }
            }
        }
        return score;

=======

        Arrays.sort(score, (a, b) -> a[k] - b[k]);
        return score;

=======

        int[][] result = new int[score.length][score[0].length];
        int[] temp = new int[score.length];
        for (int i = 0; i < score.length; i++) {
            temp[i] = score[i][k];
        }
        Arrays.sort(temp);
        for (int i = 0; i < score.length; i++) {
            for (int j = 0; j < score[0].length; j++) {
                result[i][j] = score[findIndex(score, temp[i])][j];
            }
        }
        return result;
    }
    
    public int findIndex(int[][] score, int target) {
        int result = -1;
        for (int i = 0; i < score.length; i++) {
            if (score[i][0] == target) {
                result = i;
                break;
            }
        }
        return result;

=======

        int n = score.length;
        int m = score[0].length;
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < n - i - 1; ++j) {
                if (score[j][k] < score[j + 1][k]) {
                    int[] tmp = score[j];
                    score[j] = score[j + 1];
                    score[j + 1] = tmp;
                }
            }
        }
        return score;

=======

        int n = score.length;
        int m = score[0].length;
        int[] scoreList = new int[n];
        for (int i = 0; i < n; i++) {
            scoreList[i] = score[i][k];
        }
        Arrays.sort(scoreList);
        int[][] result = new int[n][m];
        for (int i = 0; i < n; i++) {
            int[] student = new int[m];
            int index = 0;
            for (int j = 0; j < n; j++) {
                if (score[j][k] == scoreList[i]) {
                    student = score[j];
                    index = j;
                    break;
                }
            }
            result[i] = student;
            score[index][k] = -1;
        }
        return result;
