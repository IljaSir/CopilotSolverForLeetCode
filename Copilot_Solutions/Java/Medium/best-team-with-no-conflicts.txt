Synthesizing 10/10 solutions

=======

        int n = scores.length;
        int[][] arr = new int[n][2];
        for (int i = 0; i < n; i++) {
            arr[i][0] = ages[i];
            arr[i][1] = scores[i];
        }
        Arrays.sort(arr, (a, b) -> a[0] == b[0] ? b[1] - a[1] : a[0] - b[0]);
        int[] dp = new int[n];
        int res = 0;
        for (int i = 0; i < n; i++) {
            dp[i] = arr[i][1];
            for (int j = 0; j < i; j++) {
                if (arr[j][1] <= arr[i][1]) {
                    dp[i] = Math.max(dp[i], dp[j] + arr[i][1]);
                }
            }
            res = Math.max(res, dp[i]);
        }
        return res;

=======

        int n = scores.length;
        int[][] players = new int[n][2];
        for (int i = 0; i < n; i++) {
            players[i][0] = ages[i];
            players[i][1] = scores[i];
        }
        Arrays.sort(players, (a, b) -> a[0] != b[0] ? a[0] - b[0] : a[1] - b[1]);
        int[] dp = new int[n];
        for (int i = 0; i < n; i++) {
            dp[i] = players[i][1];
        }
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < i; j++) {
                if (players[i][1] >= players[j][1]) {
                    dp[i] = Math.max(dp[i], dp[j] + players[i][1]);
                }
            }
        }
        int ans = 0;
        for (int i = 0; i < n; i++) {
            ans = Math.max(ans, dp[i]);
        }
        return ans;

=======

        int n = scores.length;
        int[][] players = new int[n][2];
        for (int i = 0; i < n; i++) {
            players[i][0] = ages[i];
            players[i][1] = scores[i];
        }
        Arrays.sort(players, (a, b) -> a[0] != b[0] ? a[0] - b[0] : a[1] - b[1]);
        int[] dp = new int[n];
        int ans = 0;
        for (int i = 0; i < n; i++) {
            dp[i] = players[i][1];
            for (int j = 0; j < i; j++) {
                if (players[j][1] <= players[i][1]) {
                    dp[i] = Math.max(dp[i], dp[j] + players[i][1]);
                }
            }
            ans = Math.max(ans, dp[i]);
        }
        return ans;

=======

        int n = scores.length;
        int[][] players = new int[n][2];
        for (int i = 0; i < n; i++) {
            players[i][0] = ages[i];
            players[i][1] = scores[i];
        }
        Arrays.sort(players, (a, b) -> (a[0] == b[0] ? a[1] - b[1] : a[0] - b[0]));
        int[] dp = new int[n];
        int ans = 0;
        for (int i = 0; i < n; i++) {
            dp[i] = players[i][1];
            for (int j = 0; j < i; j++) {
                if (players[j][1] <= players[i][1]) {
                    dp[i] = Math.max(dp[i], dp[j] + players[i][1]);
                }
            }
            ans = Math.max(ans, dp[i]);
        }
        return ans;

=======

        int n = scores.length;
        int[][] players = new int[n][2];
        for (int i = 0; i < n; i++) {
            players[i] = new int[]{ages[i], scores[i]};
        }
        Arrays.sort(players, (a, b) -> {
            if (a[0] == b[0]) {
                return a[1] - b[1];
            }
            return a[0] - b[0];
        });
        int[] dp = new int[n];
        int res = 0;
        for (int i = 0; i < n; i++) {
            dp[i] = players[i][1];
            for (int j = 0; j < i; j++) {
                if (players[j][1] <= players[i][1]) {
                    dp[i] = Math.max(dp[i], dp[j] + players[i][1]);
                }
            }
            res = Math.max(res, dp[i]);
        }
        return res;

=======

        int n = scores.length;
        int[][] data = new int[n][2];
        for (int i = 0; i < n; i++) {
            data[i][0] = ages[i];
            data[i][1] = scores[i];
        }
        Arrays.sort(data, (a, b) -> {
            if (a[0] == b[0]) {
                return a[1] - b[1];
            }
            return a[0] - b[0];
        });
        int[] dp = new int[n];
        for (int i = 0; i < n; i++) {
            dp[i] = data[i][1];
            for (int j = 0; j < i; j++) {
                if (data[i][1] >= data[j][1]) {
                    dp[i] = Math.max(dp[i], dp[j] + data[i][1]);
                }
            }
        }
        int ret = 0;
        for (int i = 0; i < n; i++) {
            ret = Math.max(ret, dp[i]);
        }
        return ret;

=======

        int n = scores.length;
        int[][] arr = new int[n][2];
        for (int i = 0; i < n; ++i) {
            arr[i][0] = ages[i];
            arr[i][1] = scores[i];
        }
        Arrays.sort(arr, (a, b) -> {
            if (a[0] != b[0]) {
                return a[0] - b[0];
            }
            return a[1] - b[1];
        });
        int[] dp = new int[n];
        int ans = 0;
        for (int i = 0; i < n; ++i) {
            dp[i] = arr[i][1];
            for (int j = 0; j < i; ++j) {
                if (arr[j][1] <= arr[i][1]) {
                    dp[i] = Math.max(dp[i], dp[j] + arr[i][1]);
                }
            }
            ans = Math.max(ans, dp[i]);
        }
        return ans;

=======

        int n = scores.length;
        int[][] arr = new int[n][2];
        for (int i = 0; i < n; i++) {
            arr[i] = new int[] {ages[i], scores[i]};
        }
        Arrays.sort(arr, (a, b) -> {
            if (a[0] == b[0]) {
                return a[1] - b[1];
            } else {
                return a[0] - b[0];
            }
        });
        int[] dp = new int[n];
        int res = 0;
        for (int i = 0; i < n; i++) {
            dp[i] = arr[i][1];
            for (int j = 0; j < i; j++) {
                if (arr[i][1] >= arr[j][1]) {
                    dp[i] = Math.max(dp[i], dp[j] + arr[i][1]);
                }
            }
            res = Math.max(res, dp[i]);
        }
        return res;

=======

        int n = ages.length;
        int[][] players = new int[n][2];
        for (int i = 0; i < n; i++) {
            players[i] = new int[]{ages[i], scores[i]};
        }
        Arrays.sort(players, (a, b) -> a[0] == b[0] ? b[1] - a[1] : a[0] - b[0]);
        int[] dp = new int[n];
        int ans = 0;
        for (int i = 0; i < n; i++) {
            dp[i] = players[i][1];
            for (int j = 0; j < i; j++) {
                if (players[j][1] <= players[i][1]) {
                    dp[i] = Math.max(dp[i], dp[j] + players[i][1]);
                }
            }
            ans = Math.max(ans, dp[i]);
        }
        return ans;

=======

        int n = scores.length;
        int[][] dp = new int[n][n];
        for (int i = 0; i < n; i++) {
            dp[i][i] = scores[i];
        }
        int ans = dp[0][0];
        for (int i = 1; i < n; i++) {
            int[] cur = new int[] {ages[i], scores[i]};
            for (int j = 0; j < i; j++) {
                int[] prev = new int[] {ages[j], scores[j]};
                if (cur[0] >= prev[0] && cur[1] >= prev[1]) {
                    dp[i][j] = Math.max(dp[i][j], cur[1] + dp[j][j]);
                }
                if (cur[0] >= prev[0] && cur[1] <= prev[1]) {
                    dp[i][j] = Math.max(dp[i][j], prev[1] + dp[j][j]);
                }
                if (cur[0] <= prev[0] && cur[1] >= prev[1]) {
                    dp[i][j] = Math.max(dp[i][j], cur[1] + dp[j][j]);
                }
                if (cur[0] <= prev[0] && cur[1] <= prev[1]) {
                    dp[i][j] = Math.max(dp[i][j], prev[1] + dp[j][j]);
                }
                dp[i][i] = Math.max(dp[i][i], dp[i][j]);
            }
            ans = Math.max(ans, dp[i][i]);
        }
        return ans;
