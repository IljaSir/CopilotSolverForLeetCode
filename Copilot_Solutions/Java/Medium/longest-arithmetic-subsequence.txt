Synthesizing 10/10 solutions

=======

        int n = nums.length;
        int[][] dp = new int[n][n];
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                dp[i][j] = 2;
            }
        }
        int ans = 2;
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                for (int k = j + 1; k < n; k++) {
                    if (nums[j] - nums[i] == nums[k] - nums[j]) {
                        dp[j][k] = Math.max(dp[j][k], dp[i][j] + 1);
                        ans = Math.max(ans, dp[j][k]);
                    }
                }
            }
        }
        return ans;

=======

        int n = nums.length;
        int[][] dp = new int[n][1001];
        int ans = 2;
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                int diff = nums[j] - nums[i] + 500;
                dp[j][diff] = Math.max(dp[j][diff], dp[i][diff] + 1);
                ans = Math.max(ans, dp[j][diff]);
            }
        }
        return ans + 1;

=======

        int n = nums.length;
        int[][] dp = new int[n][n];
        int res = 0;
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                dp[i][j] = 2;
                for (int k = 0; k < i; k++) {
                    if (nums[i] - nums[k] == nums[j] - nums[i]) {
                        dp[i][j] = Math.max(dp[i][j], dp[k][i] + 1);
                    }
                }
                res = Math.max(res, dp[i][j]);
            }
        }
        return res;

=======

        int n = nums.length;
        int[][] dp = new int[n][n];
        int res = 0;
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                int diff = nums[j] - nums[i];
                dp[i][j] = 2;
                for (int k = i - 1; k >= 0; k--) {
                    if (nums[k] + diff == nums[i]) {
                        dp[i][j] = Math.max(dp[i][j], dp[k][i] + 1);
                    }
                }
                res = Math.max(res, dp[i][j]);
            }
        }
        return res;

=======

        int n = nums.length;
        int[][] dp = new int[n][n];
        int max = 0;
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                dp[i][j] = 2;
                for (int k = i - 1; k >= 0; k--) {
                    if (nums[i] - nums[k] == nums[j] - nums[i]) {
                        dp[i][j] = Math.max(dp[i][j], dp[k][i] + 1);
                    }
                }
                max = Math.max(max, dp[i][j]);
            }
        }
        return max;

=======

        int n = nums.length;
        int[][] dp = new int[n][n];
        int max = 0;
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                int diff = nums[i] - nums[j];
                for (int k = 0; k < i; k++) {
                    if (nums[i] - nums[k] == diff) {
                        dp[i][j] = Math.max(dp[i][j], dp[k][i] + 1);
                    }
                }
                max = Math.max(max, dp[i][j]);
            }
        }
        return max + 2;

=======

        int n = nums.length;
        int[][] dp = new int[n][5001];
        int res = 2;
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                int diff = nums[j] - nums[i] + 2500;
                dp[j][diff] = Math.max(dp[j][diff], dp[i][diff] + 1);
                res = Math.max(res, dp[j][diff] + 1);
            }
        }
        return res;

=======

        int len = nums.length;
        int[][] dp = new int[len][5001];
        int res = 2;
        for (int i = 0; i < len; i++) {
            for (int j = i + 1; j < len; j++) {
                int diff = 2500 + nums[j] - nums[i];
                dp[j][diff] = dp[i][diff] + 1;
                res = Math.max(res, dp[j][diff] + 1);
            }
        }
        return res;

=======

        int n = nums.length;
        int[][] dp = new int[n][501];
        int res = 2;
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                int diff = nums[j] - nums[i] + 250;
                dp[j][diff] = Math.max(dp[j][diff], dp[i][diff] + 1);
                res = Math.max(res, dp[j][diff] + 1);
            }
        }
        return res;

=======

        int[][] dp = new int[nums.length][nums.length];
        int max = 0;
        for(int i = 0; i < nums.length; i++) {
            for(int j = i + 1; j < nums.length; j++) {
                dp[i][j] = 2;
                for(int k = i - 1; k >= 0; k--) {
                    if(nums[i] - nums[k] == nums[j] - nums[i]) {
                        dp[i][j] = Math.max(dp[i][j], dp[k][i] + 1);
                    }
                }
                max = Math.max(max, dp[i][j]);
            }
        }
        return max;
