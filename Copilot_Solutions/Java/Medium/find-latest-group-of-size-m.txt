Synthesizing 10/10 solutions

=======

        int n = arr.length;
        int[] len = new int[n + 2];
        int[] cnt = new int[n + 1];
        int res = -1;
        for (int i = 0; i < n; i++) {
            int a = arr[i];
            int left = len[a - 1];
            int right = len[a + 1];
            len[a - left] = len[a + right] = left + right + 1;
            cnt[left]--;
            cnt[right]--;
            cnt[left + right + 1]++;
            if (cnt[m] > 0) {
                res = i + 1;
            }
        }
        return res;

=======

        int n = arr.length;
        int[] len = new int[n + 2];
        int res = -1;
        for (int i = 0; i < n; ++i) {
            int a = arr[i];
            int left = len[a - 1], right = len[a + 1];
            len[a] = len[a - left] = len[a + right] = left + right + 1;
            if (left == m || right == m) {
                res = i;
            }
        }
        return res;

=======

        int n = arr.length;
        int[] left = new int[n + 2];
        int[] right = new int[n + 2];
        int[] len = new int[n + 2];
        int res = -1;
        for (int i = 0; i < n; i++) {
            int a = arr[i];
            left[a] = a - 1;
            right[a] = a + 1;
            len[a] = 1;
            len[left[a]] = len[a] + len[left[a]];
            len[right[a]] = len[a] + len[right[a]];
            left[right[a]] = left[a];
            right[left[a]] = right[a];
            if (len[left[a]] == m || len[right[a]] == m) {
                res = i + 1;
            }
        }
        return res;

=======

        int n = arr.length;
        int[] count = new int[n + 2];
        int res = -1;
        for (int i = 0; i < n; i++) {
            int a = arr[i];
            count[a] = count[a - 1] + count[a + 1] + 1;
            if (count[a - count[a - 1]] == m || count[a + count[a + 1]] == m) {
                res = i;
            }
        }
        return res;

=======

        int n = arr.length;
        int[] len = new int[n+2];
        int[] cnt = new int[n+1];
        int res = -1;
        for (int i = 0; i < n; i++) {
            int a = arr[i];
            int l = len[a-1], r = len[a+1];
            len[a] = len[a-l] = len[a+r] = l+r+1;
            cnt[l]--; cnt[r]--; cnt[len[a]]++;
            if (cnt[m] > 0) {
                res = i+1;
            }
        }
        return res;

=======

        int n = arr.length;
        int[] left = new int[n+2];
        int[] right = new int[n+2];
        int[] len = new int[n+2];
        int res = -1;
        for (int i = 0; i < n; i++) {
            int a = arr[i];
            left[a] = a - 1;
            right[a] = a + 1;
            len[a] = 1;
            len[left[a]] += len[a];
            len[right[a]] += len[a];
            left[right[a]] = left[a];
            right[left[a]] = right[a];
            if (len[left[a]] == m || len[right[a]] == m) {
                res = i;
            }
        }
        return res;

=======

        int n = arr.length;
        int[] length = new int[n + 2];
        int[] cnt = new int[n + 1];
        int res = -1;
        for (int i = 0; i < n; i++) {
            int a = arr[i];
            int left = length[a - 1];
            int right = length[a + 1];
            cnt[left]--;
            cnt[right]--;
            int sum = left + right + 1;
            cnt[sum]++;
            length[a - left] = sum;
            length[a + right] = sum;
            if (cnt[m] > 0) {
                res = i + 1;
            }
        }
        return res;

=======

        int n = arr.length;
        int[] count = new int[n + 2];
        int[] len = new int[n + 2];
        int res = -1;
        for (int i = 0; i < n; i++) {
            int a = arr[i];
            count[a] = 1;
            len[count[a - 1]]--;
            len[count[a + 1]]--;
            len[count[a - 1] + count[a + 1] + 1]++;
            if (len[m] > 0) {
                res = i + 1;
            }
        }
        return res;

=======

        int n = arr.length;
        int[] groups = new int[n + 2];
        int res = -1;
        for (int i = 0; i < n; i++) {
            int index = arr[i];
            int left = groups[index - 1];
            int right = groups[index + 1];
            if (left == m || right == m) {
                res = i;
            }
            groups[index] = groups[index - left] = groups[index + right] = left + right + 1;
        }
        return res;

=======

        int n = arr.length;
        int[] left = new int[n+2], right = new int[n+2];
        int[] group = new int[n+2];
        for(int i=0; i<=n+1; i++) {
            left[i] = i-1;
            right[i] = i+1;
        }
        int ans = -1;
        for(int i=0; i<n; i++) {
            int a = arr[i];
            int len = right[a] - left[a] - 1;
            if(len == m) ans = i;
            group[len]--;
            group[right[a]-left[a]-1]++;
            left[right[a]] = left[a];
            right[left[a]] = right[a];
        }
        return ans;
