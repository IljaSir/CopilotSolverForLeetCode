Synthesizing 10/10 solutions

=======

        Map<Integer, PriorityQueue<Integer>> map = new HashMap<>();
        for (int num : nums) {
            if (!map.containsKey(num)) {
                map.put(num, new PriorityQueue<>());
            }
            if (map.containsKey(num - 1)) {
                int prevLength = map.get(num - 1).poll();
                if (map.get(num - 1).isEmpty()) {
                    map.remove(num - 1);
                }
                map.get(num).offer(prevLength + 1);
            } else {
                map.get(num).offer(1);
            }
        }
        for (int key : map.keySet()) {
            PriorityQueue<Integer> queue = map.get(key);
            if (queue.peek() < 3) {
                return false;
            }
        }
        return true;

=======

        Map<Integer, Integer> countMap = new HashMap<>();
        Map<Integer, Integer> endMap = new HashMap<>();
        for (int num : nums) {
            countMap.put(num, countMap.getOrDefault(num, 0) + 1);
        }
        for (int num : nums) {
            if (countMap.get(num) == 0) {
                continue;
            }
            if (endMap.getOrDefault(num - 1, 0) > 0) {
                endMap.put(num - 1, endMap.get(num - 1) - 1);
                endMap.put(num, endMap.getOrDefault(num, 0) + 1);
            } else if (countMap.getOrDefault(num + 1, 0) > 0 && countMap.getOrDefault(num + 2, 0) > 0) {
                countMap.put(num + 1, countMap.get(num + 1) - 1);
                countMap.put(num + 2, countMap.get(num + 2) - 1);
                endMap.put(num + 2, endMap.getOrDefault(num + 2, 0) + 1);
            } else {
                return false;
            }
            countMap.put(num, countMap.get(num) - 1);
        }
        return true;

=======

        Map<Integer, Integer> freq = new HashMap<>();
        Map<Integer, Integer> need = new HashMap<>();
        for (int num : nums) {
            freq.put(num, freq.getOrDefault(num, 0) + 1);
        }
        for (int num : nums) {
            if (freq.get(num) == 0) {
                continue;
            } else if (need.getOrDefault(num, 0) > 0) {
                freq.put(num, freq.get(num) - 1);
                need.put(num, need.get(num) - 1);
                need.put(num + 1, need.getOrDefault(num + 1, 0) + 1);
            } else if (freq.getOrDefault(num + 1, 0) > 0 && freq.getOrDefault(num + 2, 0) > 0) {
                freq.put(num, freq.get(num) - 1);
                freq.put(num + 1, freq.get(num + 1) - 1);
                freq.put(num + 2, freq.get(num + 2) - 1);
                need.put(num + 3, need.getOrDefault(num + 3, 0) + 1);
            } else {
                return false;
            }
        }
        return true;

=======

        Map<Integer, Integer> freq = new HashMap<>();
        Map<Integer, Integer> need = new HashMap<>();
        for (int num : nums) {
            freq.put(num, freq.getOrDefault(num, 0) + 1);
        }
        for (int num : nums) {
            if (freq.get(num) == 0) continue;
            if (need.getOrDefault(num, 0) > 0) {
                need.put(num, need.get(num) - 1);
                need.put(num + 1, need.getOrDefault(num + 1, 0) + 1);
            } else if (freq.getOrDefault(num + 1, 0) > 0 && freq.getOrDefault(num + 2, 0) > 0) {
                freq.put(num + 1, freq.get(num + 1) - 1);
                freq.put(num + 2, freq.get(num + 2) - 1);
                need.put(num + 3, need.getOrDefault(num + 3, 0) + 1);
            } else {
                return false;
            }
            freq.put(num, freq.get(num) - 1);
        }
        return true;

=======

        Map<Integer, Integer> freq = new HashMap<>(), appendfreq = new HashMap<>();
        for (int x: nums) freq.put(x, freq.getOrDefault(x, 0) + 1);
        for (int x: nums) {
            if (freq.get(x) == 0) continue;
            else if (appendfreq.getOrDefault(x, 0) > 0) {
                appendfreq.put(x, appendfreq.get(x) - 1);
                appendfreq.put(x+1, appendfreq.getOrDefault(x+1, 0) + 1);
            }
            else if (freq.getOrDefault(x+1, 0) > 0 && freq.getOrDefault(x+2, 0) > 0) {
                freq.put(x+1, freq.get(x+1) - 1);
                freq.put(x+2, freq.get(x+2) - 1);
                appendfreq.put(x+3, appendfreq.getOrDefault(x+3, 0) + 1);
            }
            else return false;
            freq.put(x, freq.get(x) - 1);
        }
        return true;

=======

        Map<Integer, Integer> freq = new HashMap<>();
        Map<Integer, Integer> need = new HashMap<>();
        for (int n : nums) {
            freq.put(n, freq.getOrDefault(n, 0) + 1);
        }
        for (int n : nums) {
            if (freq.get(n) == 0) {
                continue;
            }
            if (need.getOrDefault(n, 0) > 0) {
                need.put(n, need.get(n) - 1);
                need.put(n + 1, need.getOrDefault(n + 1, 0) + 1);
            } else if (freq.getOrDefault(n + 1, 0) > 0 && freq.getOrDefault(n + 2, 0) > 0) {
                freq.put(n + 1, freq.get(n + 1) - 1);
                freq.put(n + 2, freq.get(n + 2) - 1);
                need.put(n + 3, need.getOrDefault(n + 3, 0) + 1);
            } else {
                return false;
            }
            freq.put(n, freq.get(n) - 1);
        }
        return true;

=======

        Map<Integer, Integer> count = new HashMap<>();
        Map<Integer, Integer> end = new HashMap<>();
        for (int x: nums) count.put(x, count.getOrDefault(x, 0) + 1);
        for (int x: nums) {
            if (count.get(x) == 0) continue;
            else if (end.getOrDefault(x, 0) > 0) {
                end.put(x, end.get(x) - 1);
                end.put(x+1, end.getOrDefault(x+1, 0) + 1);
            } else if (count.getOrDefault(x+1, 0) > 0 && count.getOrDefault(x+2, 0) > 0) {
                count.put(x+1, count.get(x+1) - 1);
                count.put(x+2, count.get(x+2) - 1);
                end.put(x+3, end.getOrDefault(x+3, 0) + 1);
            } else {
                return false;
            }
            count.put(x, count.get(x) - 1);
        }
        return true;

=======

        int n = nums.length;
        Map<Integer, Integer> freq = new HashMap<>();
        Map<Integer, Integer> need = new HashMap<>();
        for (int num: nums) {
            freq.put(num, freq.getOrDefault(num, 0) + 1);
        }
        for (int num: nums) {
            if (freq.get(num) == 0) {
                continue;
            } else if (need.getOrDefault(num, 0) > 0) {
                need.put(num, need.get(num) - 1);
                need.put(num + 1, need.getOrDefault(num + 1, 0) + 1);
            } else if (freq.getOrDefault(num + 1, 0) > 0 && freq.getOrDefault(num + 2, 0) > 0) {
                freq.put(num + 1, freq.get(num + 1) - 1);
                freq.put(num + 2, freq.get(num + 2) - 1);
                need.put(num + 3, need.getOrDefault(num + 3, 0) + 1);
            } else {
                return false;
            }
            freq.put(num, freq.get(num) - 1);
        }
        return true;

=======

        int n = nums.length;
        if (n < 3) {
            return false;
        }
        Map<Integer, Integer> count = new HashMap<>();
        Map<Integer, Integer> tails = new HashMap<>();
        for (int num : nums) {
            count.put(num, count.getOrDefault(num, 0) + 1);
        }
        for (int num : nums) {
            if (count.get(num) == 0) {
                continue;
            }
            if (tails.getOrDefault(num - 1, 0) > 0) {
                tails.put(num - 1, tails.get(num - 1) - 1);
                tails.put(num, tails.getOrDefault(num, 0) + 1);
                count.put(num, count.get(num) - 1);
            } else if (count.getOrDefault(num + 1, 0) > 0 && count.getOrDefault(num + 2, 0) > 0) {
                count.put(num, count.get(num) - 1);
                count.put(num + 1, count.get(num + 1) - 1);
                count.put(num + 2, count.get(num + 2) - 1);
                tails.put(num + 2, tails.getOrDefault(num + 2, 0) + 1);
            } else {
                return false;
            }
        }
        return true;

=======

        int n = nums.length;
        if (n < 3) return false;
        int cnt = 1, i = 1;
        while (i < n && nums[i] == nums[i - 1]) {
            cnt++;
            i++;
        }
        if (cnt < 3) return false;
        int[] dp = new int[n];
        dp[0] = cnt;
        for (int j = 1; j < n; j++) {
            dp[j] = 1;
            int k = j - 1;
            while (k >= 0 && nums[k] == nums[j]) {
                k--;
            }
            if (k >= 0) {
                if (nums[k] == nums[j] - 1) {
                    if (dp[k] == 1) return false;
                    dp[j] = dp[k] - 1;
                } else {
                    if (dp[k] < 3) return false;
                }
            }
        }
        return true;
