Synthesizing 10/10 solutions

=======

        int xCount = 0;
        int oCount = 0;
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                if (board[i].charAt(j) == 'X') {
                    xCount++;
                }
                if (board[i].charAt(j) == 'O') {
                    oCount++;
                }
            }
        }
        if (oCount > xCount || xCount - oCount > 1) {
            return false;
        }
        boolean xWin = win(board, 'X');
        boolean oWin = win(board, 'O');
        if (xWin && oWin) {
            return false;
        }
        if (oWin && oCount != xCount) {
            return false;
        }
        if (xWin && oCount == xCount) {
            return false;
        }
        return true;
    }

    public boolean win(String[] board, char ch) {
        for (int i = 0; i < 3; i++) {
            if (board[i].charAt(0) == ch && board[i].charAt(1) == ch && board[i].charAt(2) == ch) {
                return true;
            }
            if (board[0].charAt(i) == ch && board[1].charAt(i) == ch && board[2].charAt(i) == ch) {
                return true;
            }
        }
        if (board[0].charAt(0) == ch && board[1].charAt(1) == ch && board[2].charAt(2) == ch) {
            return true;
        }
        if (board[0].charAt(2) == ch && board[1].charAt(1) == ch && board[2].charAt(0) == ch) {
            return true;
        }
        return false;

=======

        int xCount = 0, oCount = 0;
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                if (board[i].charAt(j) == 'X') xCount++;
                else if (board[i].charAt(j) == 'O') oCount++;
            }
        }
        if (oCount > xCount || xCount > oCount + 1) return false;
        if (win(board, 'X') && xCount == oCount) return false;
        if (win(board, 'O') && xCount > oCount) return false;
        return true;
    }
    private boolean win(String[] B, char P) {
        for (int i = 0; i < 3; i++) {
            if (B[i].charAt(0) == P && B[i].charAt(1) == P && B[i].charAt(2) == P) return true;
            if (B[0].charAt(i) == P && B[1].charAt(i) == P && B[2].charAt(i) == P) return true;
        }
        if (B[0].charAt(0) == P && B[1].charAt(1) == P && B[2].charAt(2) == P) return true;
        if (B[0].charAt(2) == P && B[1].charAt(1) == P && B[2].charAt(0) == P) return true;
        return false;

=======

        int countX = 0;
        int countO = 0;
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                if (board[i].charAt(j) == 'X') {
                    countX++;
                } else if (board[i].charAt(j) == 'O') {
                    countO++;
                }
            }
        }
        if (countO > countX || countX - countO > 1) {
            return false;
        }
        boolean xWin = checkWin(board, 'X');
        boolean oWin = checkWin(board, 'O');
        if (xWin && oWin) {
            return false;
        }
        if (xWin && countX == countO) {
            return false;
        }
        if (oWin && countX > countO) {
            return false;
        }
        return true;
    }

    private boolean checkWin(String[] board, char c) {
        for (int i = 0; i < 3; i++) {
            if (board[i].charAt(0) == c && board[i].charAt(1) == c && board[i].charAt(2) == c) {
                return true;
            }
            if (board[0].charAt(i) == c && board[1].charAt(i) == c && board[2].charAt(i) == c) {
                return true;
            }
        }
        if (board[0].charAt(0) == c && board[1].charAt(1) == c && board[2].charAt(2) == c) {
            return true;
        }
        if (board[0].charAt(2) == c && board[1].charAt(1) == c && board[2].charAt(0) == c) {
            return true;
        }
        return false;

=======

        int xCount = 0;
        int oCount = 0;
        for (String row : board) {
            for (char c : row.toCharArray()) {
                if (c == 'X') {
                    xCount++;
                } else if (c == 'O') {
                    oCount++;
                }
            }
        }
        if (xCount != oCount && xCount != oCount + 1) {
            return false;
        }
        if (win(board, 'X') && xCount != oCount + 1) {
            return false;
        }
        if (win(board, 'O') && xCount != oCount) {
            return false;
        }
        return true;
    }
    public boolean win(String[] B, char P) {
        // B: board, P: player
        // Check all rows
        for (int i = 0; i < 3; ++i) {
            int count = 0;
            for (int j = 0; j < 3; ++j) {
                if (B[i].charAt(j) == P) {
                    count++;
                }
            }
            if (count == 3) {
                return true;
            }
        }
        // Check all columns
        for (int j = 0; j < 3; ++j) {
            int count = 0;
            for (int i = 0; i < 3; ++i) {
                if (B[i].charAt(j) == P) {
                    count++;
                }
            }
            if (count == 3) {
                return true;
            }
        }
        // Check diagonals
        if (B[0].charAt(0) == P && B[1].charAt(1) == P && B[2].charAt(2) == P) {
            return true;
        }
        if (B[0].charAt(2) == P && B[1].charAt(1) == P && B[2].charAt(0) == P) {
            return true;
        }
        return false;

=======

        int xCount = 0;
        int oCount = 0;
        for (String row : board) {
            for (char c : row.toCharArray()) {
                if (c == 'X') {
                    xCount++;
                } else if (c == 'O') {
                    oCount++;
                }
            }
        }
        if (oCount != xCount && oCount != xCount - 1) {
            return false;
        }
        if (win(board, 'X') && xCount != oCount + 1) {
            return false;
        }
        if (win(board, 'O') && xCount != oCount) {
            return false;
        }
        return true;
    }
    
    public boolean win(String[] B, char P) {
        // Check rows
        for (int i = 0; i < 3; i++) {
            if (B[i].charAt(0) == P && B[i].charAt(1) == P && B[i].charAt(2) == P) {
                return true;
            }
        }
        // Check columns
        for (int j = 0; j < 3; j++) {
            if (B[0].charAt(j) == P && B[1].charAt(j) == P && B[2].charAt(j) == P) {
                return true;
            }
        }
        // Check diagonals
        if (B[0].charAt(0) == P && B[1].charAt(1) == P && B[2].charAt(2) == P) {
            return true;
        }
        if (B[0].charAt(2) == P && B[1].charAt(1) == P && B[2].charAt(0) == P) {
            return true;
        }
        return false;

=======

        int xCount = 0;
        int oCount = 0;
        for (String row : board) {
            for (char c : row.toCharArray()) {
                if (c == 'X') {
                    xCount++;
                } else if (c == 'O') {
                    oCount++;
                }
            }
        }
        if (xCount != oCount && xCount != oCount + 1) {
            return false;
        }
        if (win(board, 'X') && xCount != oCount + 1) {
            return false;
        }
        if (win(board, 'O') && xCount != oCount) {
            return false;
        }
        return true;
    }
    
    private boolean win(String[] B, char P) {
        // Check rows, columns, and diagonals.
        for (int i = 0; i < 3; ++i) {
            if (P == B[0].charAt(i) && P == B[1].charAt(i) && P == B[2].charAt(i))
                return true;
            if (P == B[i].charAt(0) && P == B[i].charAt(1) && P == B[i].charAt(2))
                return true;
        }
        if (P == B[0].charAt(0) && P == B[1].charAt(1) && P == B[2].charAt(2))
            return true;
        if (P == B[0].charAt(2) && P == B[1].charAt(1) && P == B[2].charAt(0))
            return true;
        return false;

=======

        int xCount = 0;
        int oCount = 0;
        for (String row : board) {
            for (char c : row.toCharArray()) {
                if (c == 'X') {
                    xCount++;
                } else if (c == 'O') {
                    oCount++;
                }
            }
        }
        if (oCount != xCount && oCount != xCount - 1) {
            return false;
        }
        if (win(board, 'X') && oCount != xCount - 1) {
            return false;
        }
        if (win(board, 'O') && oCount != xCount) {
            return false;
        }
        return true;
    }

    private boolean win(String[] board, char player) {
        for (int i = 0; i < 3; i++) {
            if ((board[0].charAt(i) == player) && (board[1].charAt(i) == player) && (board[2].charAt(i) == player)) {
                return true;
            }
        }
        for (int i = 0; i < 3; i++) {
            if ((board[i].charAt(0) == player) && (board[i].charAt(1) == player) && (board[i].charAt(2) == player)) {
                return true;
            }
        }
        if ((board[0].charAt(0) == player) && (board[1].charAt(1) == player) && (board[2].charAt(2) == player)) {
            return true;
        }
        if ((board[0].charAt(2) == player) && (board[1].charAt(1) == player) && (board[2].charAt(0) == player)) {
            return true;
        }
        return false;

=======

        int xCount = 0;
        int oCount = 0;
        for (String row : board) {
            for (char c : row.toCharArray()) {
                if (c == 'X') {
                    xCount++;
                } else if (c == 'O') {
                    oCount++;
                }
            }
        }
        if (oCount > xCount || xCount - oCount > 1) {
            return false;
        }
        if (win(board, 'X') && oCount == xCount) {
            return false;
        }
        if (win(board, 'O') && oCount != xCount) {
            return false;
        }
        return true;
    }
    private boolean win(String[] board, char p) {
        for (int i = 0; i < 3; i++) {
            if (board[i].charAt(0) == p && board[i].charAt(1) == p && board[i].charAt(2) == p) {
                return true;
            }
            if (board[0].charAt(i) == p && board[1].charAt(i) == p && board[2].charAt(i) == p) {
                return true;
            }
        }
        if (board[0].charAt(0) == p && board[1].charAt(1) == p && board[2].charAt(2) == p) {
            return true;
        }
        if (board[0].charAt(2) == p && board[1].charAt(1) == p && board[2].charAt(0) == p) {
            return true;
        }
        return false;

=======

        int[] count = new int[2];
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                if (board[i].charAt(j) == 'X') {
                    count[0]++;
                } else if (board[i].charAt(j) == 'O') {
                    count[1]++;
                }
            }
        }
        if (count[0] < count[1] || count[0] > count[1] + 1) {
            return false;
        }
        if (win(board, 'X') && count[0] != count[1] + 1) {
            return false;
        }
        if (win(board, 'O') && count[0] != count[1]) {
            return false;
        }
        return true;
    }

    private boolean win(String[] board, char player) {
        for (int i = 0; i < 3; i++) {
            if (board[i].charAt(0) == player && board[i].charAt(1) == player && board[i].charAt(2) == player) {
                return true;
            }
            if (board[0].charAt(i) == player && board[1].charAt(i) == player && board[2].charAt(i) == player) {
                return true;
            }
        }
        if (board[0].charAt(0) == player && board[1].charAt(1) == player && board[2].charAt(2) == player) {
            return true;
        }
        if (board[0].charAt(2) == player && board[1].charAt(1) == player && board[2].charAt(0) == player) {
            return true;
        }
        return false;

=======

        int[] count = new int[2];
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[i].length(); j++) {
                if (board[i].charAt(j) == 'X') {
                    count[0]++;
                }
                if (board[i].charAt(j) == 'O') {
                    count[1]++;
                }
            }
        }
        if (count[0] != count[1] && count[0] != count[1] + 1) {
            return false;
        }
        if (win(board, 'X') && count[0] != count[1] + 1) {
            return false;
        }
        if (win(board, 'O') && count[0] != count[1]) {
            return false;
        }
        return true;
    }

    private boolean win(String[] board, char player) {
        for (int i = 0; i < board.length; i++) {
            if (board[i].charAt(0) == player && board[i].charAt(0) == board[i].charAt(1) && board[i].charAt(1) == board[i].charAt(2)) {
                return true;
            }
        }
        for (int i = 0; i < board.length; i++) {
            if (board[0].charAt(i) == player && board[0].charAt(i) == board[1].charAt(i) && board[1].charAt(i) == board[2].charAt(i)) {
                return true;
            }
        }
        if (board[0].charAt(0) == player && board[0].charAt(0) == board[1].charAt(1) && board[1].charAt(1) == board[2].charAt(2)) {
            return true;
        }
        if (board[0].charAt(2) == player && board[0].charAt(2) == board[1].charAt(1) && board[1].charAt(1) == board[2].charAt(0)) {
            return true;
        }
        return false;
