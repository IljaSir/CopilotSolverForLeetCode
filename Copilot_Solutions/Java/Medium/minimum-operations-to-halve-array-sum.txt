Synthesizing 10/10 solutions

=======

        int sum = 0;
        for (int num : nums) {
            sum += num;
        }
        Arrays.sort(nums);
        int count = 0;
        for (int i = nums.length - 1; i >= 0; i--) {
            sum -= nums[i];
            count++;
            if (sum < nums[i]) {
                break;
            }
        }
        return count;

=======

        int sum = 0;
        for (int i = 0; i < nums.length; i++) {
            sum += nums[i];
        }
        Arrays.sort(nums);
        int count = 0;
        for (int i = nums.length - 1; i >= 0; i--) {
            sum -= nums[i];
            count++;
            if (sum < nums[i]) {
                break;
            }
        }
        return count;

=======

        int sum = 0;
        for (int num : nums) {
            sum += num;
        }
        int target = sum / 2;
        if (sum % 2 == 1) {
            target++;
        }
        Arrays.sort(nums);
        int count = 0;
        int i = nums.length - 1;
        while (sum > target) {
            sum -= nums[i];
            i--;
            count++;
        }
        return count;

=======

        PriorityQueue<Integer> pq = new PriorityQueue<>((a, b) -> b - a);
        long sum = 0;
        for (int num : nums) {
            sum += num;
            pq.offer(num);
        }
        int count = 0;
        while (sum >= 0) {
            int num = pq.poll();
            sum -= num;
            sum += num / 2;
            pq.offer(num / 2);
            count++;
        }
        return count;

=======

        int n = nums.length;
        int sum = 0;
        for(int i = 0; i < n; i++) {
            sum += nums[i];
        }
        Arrays.sort(nums);
        int count = 0;
        int total = 0;
        for(int i = n - 1; i >= 0; i--) {
            total += nums[i];
            count++;
            if(total >= sum / 2) {
                break;
            }
        }
        return count;

=======

        int sum = Arrays.stream(nums).sum();
        int target = (sum + 1) / 2;
        Arrays.sort(nums);
        int count = 0;
        for (int i = nums.length - 1; i >= 0; i--) {
            sum -= nums[i];
            count++;
            if (sum < target) {
                return count;
            }
        }
        return count;

=======

        int sum = 0;
        for (int i = 0; i < nums.length; i++) {
            sum += nums[i];
        }
        int half = sum / 2;
        int res = 0;
        Arrays.sort(nums);
        for (int i = nums.length - 1; i >= 0; i--) {
            sum -= nums[i];
            res++;
            if (sum <= half) {
                break;
            }
        }
        return res;

=======

        int sum = 0;
        for (int i = 0; i < nums.length; i++) {
            sum += nums[i];
        }
        Arrays.sort(nums);
        int half = sum / 2;
        int ops = 0;
        for (int i = nums.length - 1; i >= 0; i--) {
            if (sum <= half) {
                break;
            }
            sum -= nums[i];
            ops++;
        }
        return ops;

=======

        int sum = 0;
        int length = nums.length;
        for (int i = 0; i < length; i++) {
            sum += nums[i];
        }
        Arrays.sort(nums);
        int half = sum / 2;
        int count = 0;
        for (int i = length - 1; i >= 0; i--) {
            sum -= nums[i];
            count += 1;
            if (sum <= half) {
                break;
            }
        }
        return count;

=======

        int n = nums.length;
        int sum = 0;
        for(int i = 0; i < n; i++){
            sum += nums[i];
        }
        int target = sum / 2;
        int[] dp = new int[target + 1];
        for(int i = 0; i < n; i++){
            for(int j = target; j >= 0; j--){
                if(j >= nums[i]){
                    dp[j] = Math.max(dp[j], dp[j - nums[i]] + nums[i]);
                }
            }
        }
        int half = dp[target];
        return (int)Math.ceil((sum - half) / (double)half);
