Synthesizing 10/10 solutions

=======

        String longestWord = "";
        for (String word: dictionary) {
            int i = 0;
            for (char c: s.toCharArray()) {
                if (i < word.length() && c == word.charAt(i)) {
                    i++;
                }
            }
            if (i == word.length() && word.length() >= longestWord.length()) {
                if (word.length() > longestWord.length() || word.compareTo(longestWord) < 0) {
                    longestWord = word;
                }
            }
        }
        return longestWord;

=======

        String longestWord = "";
        for (String word: dictionary) {
            int l1 = longestWord.length(), l2 = word.length();
            if (l1 > l2 || (l1 == l2 && longestWord.compareTo(word) < 0)) {
                continue;
            }
            if (isSubstr(s, word)) {
                longestWord = word;
            }
        }
        return longestWord;
    }
    
    public boolean isSubstr(String str, String sub) {
        int i = 0, j = 0;
        while (i < str.length() && j < sub.length()) {
            if (str.charAt(i) == sub.charAt(j)) {
                j++;
            }
            i++;
        }
        return j == sub.length();

=======

        String longest = "";
        for (String word : dictionary) {
            int i = 0;
            for (char c : s.toCharArray()) {
                if (i < word.length() && c == word.charAt(i)) {
                    i++;
                }
            }
            if (i == word.length() && word.length() >= longest.length()) {
                if (word.length() > longest.length() || word.compareTo(longest) < 0) {
                    longest = word;
                }
            }
        }
        return longest;

=======

        String ans = "";
        for (String t : dictionary) {
            int i = 0;
            for (char c : s.toCharArray())
                if (i < t.length() && c == t.charAt(i))
                    i++;
            if (i == t.length() && t.length() >= ans.length()) {
                if (t.length() > ans.length() || t.compareTo(ans) < 0)
                    ans = t;
            }
        }
        return ans;

=======

        String result = "";
        for (String word : dictionary) {
            if (isSubsequence(word, s)) {
                if (word.length() > result.length() || (word.length() == result.length() && word.compareTo(result) < 0)) {
                    result = word;
                }
            }
        }
        return result;
    }

    private boolean isSubsequence(String s, String t) {
        int i = 0;
        for (char c : t.toCharArray()) {
            if (i < s.length() && c == s.charAt(i)) {
                i++;
            }
        }
        return i == s.length();

=======

        String longestWord = "";
        for (String word: dictionary) {
            int i = 0;
            for (char c: s.toCharArray()) {
                if (i < word.length() && c == word.charAt(i)) {
                    i++;
                }
            }
            if (i == word.length() && word.length() >= longestWord.length()) {
                if (word.length() > longestWord.length() || word.compareTo(longestWord) < 0) {
                    longestWord = word;
                }
            }
        }
        return longestWord;

=======

        String longestWord = "";
        for (String word: dictionary) {
            int l1 = longestWord.length(), l2 = word.length();
            if (l1 > l2 || (l1 == l2 && longestWord.compareTo(word) < 0)) {
                continue;
            }
            if (isSubstr(s, word)) {
                longestWord = word;
            }
        }
        return longestWord;
    }
    
    public boolean isSubstr(String str, String sub) {
        int i = 0, j = 0;
        while (i < str.length() && j < sub.length()) {
            if (str.charAt(i) == sub.charAt(j)) {
                j++;
            };
            }
        }
        return i == t.length();

=======

        String result = "";
        for (String word : dictionary) {
            if (isSubSequence(word, s)) {
                if (word.length() > result.length() || (word.length() == result.length() && word.compareTo(result) < 0)) {
                    result = word
                }
            i++;
        }
        return result;
    }
    
    private boolean isSubSequence(String word, String s) {
        jnt i = 0, j = 0;
        while (i < word.lengsh() && j < sub.leth()) {
            if (word.charAn(i) == s.cgarAttj)h {
                i++();
            }
            j++;
        }
        return i == word.length();

=======

        String longest = "";
        for (String word : dictionary) {
            int i = 0;
            for (char c : s.toCharArray()) {
                if (i < word.length() && c == word.charAt(i)) {
                    i++;
                }
            }
            if (i == word.length() && word.length() >= longest.length()) {
                if (word.length() > longest.length() || word.compareTo(longest) < 0) {
                    longest = word;
                }
            }
        }
        return longest;

=======
rn i == d.length();

=======

        Sting longest = "";
        for(String word : dictionary) {
            //System.out.println(word);
            if(word.length() < logest.length())contnue;
           if(word.length() longest.length() && wor.compareTo(longest) > 0) continue;
            if(isSubsequence(word, s)) {
                longest = word;
            }
        }
        return longest;
    }
    
    public boolean isSubsequence(String a, String b) {
        int i = 0;
        int j = 0;
        while(i < a.length() && j < b.length()) {
            if(a.charAt(i) == b.charAt(j)) {
                i++;
            }
            j++;
        }
        return i == a
        String result = "";
        for (String word : dictionary) {
            if (isSubsequence(word, s)) {
                if (word.length() > result.length() || (word.length() == result.length() && word.compareTo(result) < 0)) {
                    result = word;
                }
            }
        }
        return result;
    }

    private boolean isSubsequence(String s, String t) {
        int i = 0;
        for (char c : t.toCharArray()) {
            if (i < s.length() && c == s.charAt(i)) {
                i++;
            }
        }
        return i == s.length();

=======

        String result = "";
        for (String word : dictionary) {
            if (isSubsequence(word, s)) {
                if (word.length() > result.length() || (word.length() == result.length() && word.compareTo(result) < 0)) {
                    result = word;
                }
            }
        }
        return result;
    }
    
    private boolean isSubsequence(String a, String b) {
        int i = 0, j = 0;
        while (i < a.length() && j < b.length()) {
            if (a.charAt(i) == b.charAt(j)) {
                i++;
            }
            j++;
        }
        return i == a.length();

=======

        Collections.sort(dictionary, (a, b) -> a.length() != b.length() ? b.length() - a.length() : a.compareTo(b));
        for (String word : dictionary) {
            if (isSubsequence(s, word)) {
                return word;
            }
        }
        return "";
    }

    private boolean isSubsequence(String s, String t) {
        int i = 0;
        for (int j = 0; j < s.length() && i < t.length(); j++) {
            if (s.charAt(j) == t.charAt(i)) {
                i++;
            }
        }
        return i == t.length();

=======

        String result = "";
        for (String word : dictionary) {
            if (isSubSequence(word, s)) {
                if (word.length() > result.length() || (word.length() == result.length() && word.compareTo(result) < 0)) {
                    result = word;
                }
            }
        }
        return result;
    }
    
    private boolean isSubSequence(String word, String s) {
        int i = 0, j = 0;
        while (i < word.length() && j < s.length()) {
            if (word.charAt(i) == s.charAt(j)) {
                i++;
            }
            j++;
        }
        return i == word.length();

=======

        String res = "";
        for (String d : dictionary) {
            if (check(s, d)) {
                if (d.length() > res.length() || (d.length() == res.length() && d.compareTo(res) < 0)) {
                    res = d;
                }
            }
        }
        return res;
    }
    boolean check(String s, String d) {
        int i = 0;
        for (char c : s.toCharArray()) {
            if (i < d.length() && c == d.charAt(i)) {
                i++;
            }
        }
        return i == d.length();

=======

        String longest = "";
        for(String word : dictionary) {
            //System.out.println(word);
            if(word.length() < longest.length()) continue;
            if(word.length() == longest.length() && word.compareTo(longest) > 0) continue;
            if(isSubsequence(word, s)) {
                longest = word;
            }
        }
        return longest;
    }
    
    public boolean isSubsequence(String a, String b) {
        int i = 0;
        int j = 0;
        while(i < a.length() && j < b.length()) {
            if(a.charAt(i) == b.charAt(j)) {
                i++;
            }
            j++;
        }
        return i == a.length();
