Synthesizing 10/10 solutions (Duplicates hidden)

=======

        Arrays.sort(nums);
        int[] res = new int[nums.length];
        int index = 0;
        for (int i = 0; i < nums.length; i += 2) {
            res[i] = nums[index++];
        }
        for (int i = 1; i < nums.length; i += 2) {
            res[i] = nums[index++];
        }
        return res;

=======

        Arrays.sort(nums);
        int[] result = new int[nums.length];
        int i = 0;
        int j = nums.length - 1;
        for (int k = 0; k < nums.length; k++) {
            if (k % 2 == 0) {
                result[k] = nums[i];
                i++;
            } else {
                result[k] = nums[j];
                j--;
            }
        }
        return result;

=======

        Arrays.sort(nums);
        int[] result = new int[nums.length];
        int i = 0;
        int j = nums.length - 1;
        int k = 0;
        while (i < j) {
            result[k++] = nums[i++];
            result[k++] = nums[j--];
        }
        if (i == j) {
            result[k] = nums[i];
        }
        return result;

=======

        Arrays.sort(nums);
        int[] res = new int[nums.length];
        int i = 0;
        int j = nums.length - 1;
        int k = 0;
        while (i <= j) {
            res[k++] = nums[i++];
            if (i <= j) {
                res[k++] = nums[j--];
            }
        }
        return res;

=======

        int n = nums.length;
        Arrays.sort(nums);
        int[] ans = new int[n];
        int i = 0, j = n - 1;
        for (int k = 0; k < n; k++) {
            if (k % 2 == 0) {
                ans[k] = nums[i++];
            } else {
                ans[k] = nums[j--];
            }
        }
        return ans;

=======

        int n = nums.length;
        Arrays.sort(nums);
        int[] res = new int[n];
        int i = 0;
        int j = n - 1;
        int k = 0;
        while (i < j) {
            res[k++] = nums[i++];
            res[k++] = nums[j--];
        }
        if (i == j) {
            res[k] = nums[i];
        }
        return res;

=======

        Arrays.sort(nums);
        int n = nums.length;
        int[] res = new int[n];
        int i = 0;
        int j = n - 1;
        int k = 0;
        while (i <= j) {
            res[k++] = nums[i++];
            if (i <= j) {
                res[k++] = nums[j--];
            }
        }
        return res;

=======

        Arrays.sort(nums);
        int[] res = new int[nums.length];
        int i = 0, j = 0;
        while (i < nums.length) {
            res[j] = nums[i];
            j += 2;
            i++;
        }
        j = 1;
        while (i > 0) {
            res[j] = nums[i-1];
            j += 2;
            i--;
        }
        return res;

=======

        Arrays.sort(nums);
        int mid = nums.length / 2;
        int[] ans = new int[nums.length];
        int i = 0, j = 0;
        while (i < nums.length) {
            ans[i] = nums[j];
            i += 2;
            j++;
        }
        i = 1;
        while (i < nums.length) {
            ans[i] = nums[j];
            i += 2;
            j++;
        }
        return ans;
