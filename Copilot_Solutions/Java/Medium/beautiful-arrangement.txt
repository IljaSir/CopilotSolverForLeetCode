Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int[] count = new int[1];
        countArrangement(n, 1, new boolean[n + 1], count);
        return count[0];
    }
    
    private void countArrangement(int n, int pos, boolean[] used, int[] count) {
        if (pos > n) {
            count[0]++;
            return;
        }
        for (int i = 1; i <= n; i++) {
            if (!used[i] && (i % pos == 0 || pos % i == 0)) {
                used[i] = true;
                countArrangement(n, pos + 1, used, count);
                used[i] = false;
            }
        }

=======

        int[] count = new int[1];
        boolean[] visited = new boolean[n + 1];
        backtrack(n, 1, count, visited);
        return count[0];
    }
    
    private void backtrack(int n, int pos, int[] count, boolean[] visited) {
        if (pos > n) {
            count[0]++;
            return;
        }
        for (int i = 1; i <= n; i++) {
            if (!visited[i] && (i % pos == 0 || pos % i == 0)) {
                visited[i] = true;
                backtrack(n, pos + 1, count, visited);
                visited[i] = false;
            }
        }

=======

        int[] count = new int[1];
        boolean[] visited = new boolean[n+1];
        helper(n, 1, count, visited);
        return count[0];
    }
    
    private void helper(int n, int pos, int[] count, boolean[] visited) {
        if (pos > n) {
            count[0]++;
            return;
        }
        for (int i = 1; i <= n; i++) {
            if (!visited[i] && (i % pos == 0 || pos % i == 0)) {
                visited[i] = true;
                helper(n, pos + 1, count, visited);
                visited[i] = false;
            }
        }

=======

        boolean[] visited = new boolean[n + 1];
        return countArrangement(n, visited, 1);
    }
    
    private int countArrangement(int n, boolean[] visited, int pos) {
        if (pos > n) {
            return 1;
        }
        int count = 0;
        for (int i = 1; i <= n; i++) {
            if (!visited[i] && (i % pos == 0 || pos % i == 0)) {
                visited[i] = true;
                count += countArrangement(n, visited, pos + 1);
                visited[i] = false;
            }
        }
        return count;

=======

        int[] count = new int[1];
        count[0] = 0;
        boolean[] visited = new boolean[n + 1];
        helper(n, 1, count, visited);
        return count[0];
    }
    
    private void helper(int n, int pos, int[] count, boolean[] visited) {
        if (pos > n) {
            count[0]++;
            return;
        }
        for (int i = 1; i <= n; i++) {
            if (!visited[i] && (i % pos == 0 || pos % i == 0)) {
                visited[i] = true;
                helper(n, pos + 1, count, visited);
                visited[i] = false;
            }
        }

=======

        int[] result = new int[1];
        boolean[] visited = new boolean[n + 1];
        dfs(n, 1, result, visited);
        return result[0];
    }
    
    private void dfs(int n, int index, int[] result, boolean[] visited) {
        if (index > n) {
            result[0]++;
            return;
        }
        for (int i = 1; i <= n; i++) {
            if (!visited[i] && (i % index == 0 || index % i == 0)) {
                visited[i] = true;
                dfs(n, index + 1, result, visited);
                visited[i] = false;
            }
        }

=======

        int[] count = new int[]{0};
        boolean[] used = new boolean[n + 1];
        dfs(n, 1, count, used);
        return count[0];
    }
    private void dfs(int n, int pos, int[] count, boolean[] used) {
        if (pos > n) {
            count[0]++;
            return;
        }
        for (int i = 1; i <= n; i++) {
            if (!used[i] && (i % pos == 0 || pos % i == 0)) {
                used[i] = true;
                dfs(n, pos + 1, count, used);
                used[i] = false;
            }
        }

=======

        int[] arr = new int[n+1];
        for (int i = 0; i <= n; i++) {
            arr[i] = i;
        }
        return countArrangement(arr, 1);
    }
    
    private int countArrangement(int[] arr, int index) {
        if (index == arr.length) {
            return 1;
        }
        int count = 0;
        for (int i = index; i < arr.length; i++) {
            if (arr[i] % index == 0 || index % arr[i] == 0) {
                swap(arr, index, i);
                count += countArrangement(arr, index+1);
                swap(arr, index, i);
            }
        }
        return count;

=======

        return countArrangement(n, 1, new int[n]);
    }
    public int countArrangement(int n, int pos, int[] visited) {
        if (pos > n) {
            return 1;
        }
        int count = 0;
        for (int i = 1; i <= n; i++) {
            if (visited[i - 1] == 0 && (i % pos == 0 || pos % i == 0)) {
                visited[i - 1] = pos;
                count += countArrangement(n, pos + 1, visited);
                visited[i - 1] = 0;
            }
        }
        return count;
