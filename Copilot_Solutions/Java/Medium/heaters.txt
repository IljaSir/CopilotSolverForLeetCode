Synthesizing 10/10 solutions

=======

        Arrays.sort(heaters);
        int radius = 0;
        for (int house : houses) {
            int index = Arrays.binarySearch(heaters, house);
            if (index < 0) {
                index = -(index + 1);
            }
            int dist1 = index - 1 >= 0 ? house - heaters[index - 1] : Integer.MAX_VALUE;
            int dist2 = index < heaters.length ? heaters[index] - house : Integer.MAX_VALUE;
            radius = Math.max(radius, Math.min(dist1, dist2));
        }
        return radius;

=======

        Arrays.sort(heaters);
        int res = 0;
        for (int house: houses) {
            int index = Arrays.binarySearch(heaters, house);
            if (index < 0) {
                index = -(index + 1);
            }
            int dist1 = index - 1 >= 0 ? house - heaters[index - 1] : Integer.MAX_VALUE;
            int dist2 = index < heaters.length ? heaters[index] - house : Integer.MAX_VALUE;
            res = Math.max(res, Math.min(dist1, dist2));
        }
        return res;

=======

        Arrays.sort(heaters);
        int max = 0;
        for (int house : houses) {
            int index = Arrays.binarySearch(heaters, house);
            if (index < 0) {
                index = -(index + 1);
            }
            int dist1 = index - 1 >= 0 ? house - heaters[index - 1] : Integer.MAX_VALUE;
            int dist2 = index < heaters.length ? heaters[index] - house : Integer.MAX_VALUE;
            max = Math.max(max, Math.min(dist1, dist2));
        }
        return max;

=======

        Arrays.sort(heaters);
        int max = 0;
        for (int house : houses) {
            int index = Arrays.binarySearch(heaters, house);
            if (index < 0) {
                index = -(index + 1);
            }
            int left = index - 1 >= 0 ? house - heaters[index - 1] : Integer.MAX_VALUE;
            int right = index < heaters.length ? heaters[index] - house : Integer.MAX_VALUE;
            max = Math.max(max, Math.min(left, right));
        }
        return max;

=======

        Arrays.sort(houses);
        Arrays.sort(heaters);
        int i = 0, res = 0;
        for (int house : houses) {
            while (i < heaters.length - 1 && heaters[i] + heaters[i + 1] <= house * 2) {
                i++;
            }
            res = Math.max(res, Math.abs(heaters[i] - house));
        }
        return res;

=======

        Arrays.sort(houses);
        Arrays.sort(heaters);
        int result = 0;
        int i = 0;
        for (int house : houses) {
            while (i < heaters.length - 1 && heaters[i] + heaters[i + 1] <= house * 2) {
                i++;
            }
            result = Math.max(result, Math.abs(heaters[i] - house));
        }
        return result;

=======

        Arrays.sort(houses);
        Arrays.sort(heaters);
        int i = 0, j = 0;
        int res = 0;
        while (i < houses.length) {
            while (j < heaters.length - 1 && Math.abs(heaters[j + 1] - houses[i]) <= Math.abs(heaters[j] - houses[i])) {
                j++;
            }
            res = Math.max(res, Math.abs(heaters[j] - houses[i]));
            i++;
        }
        return res;

=======

        Arrays.sort(houses);
        Arrays.sort(heaters);
        int max = 0;
        int i = 0;
        for (int house: houses) {
            while (i < heaters.length - 1 && heaters[i] + heaters[i + 1] <= house * 2) {
                i++;
            }
            max = Math.max(max, Math.abs(heaters[i] - house));
        }
        return max;

=======

        Arrays.sort(heaters);
        int max = 0;
        for (int house: houses) {
            int idx = Arrays.binarySearch(heaters, house);
            if (idx < 0) idx = -(idx + 1);
            int dist1 = idx - 1 >= 0 ? house - heaters[idx - 1] : Integer.MAX_VALUE;
            int dist2 = idx < heaters.length ? heaters[idx] - house : Integer.MAX_VALUE;
            max = Math.max(max, Math.min(dist1, dist2));
        }
        return max;

=======

        Arrays.sort(houses);
        Arrays.sort(heaters);
        int i = 0;
        int j = 0;
        int max = 0;
        while(i < houses.length){
            if(j < heaters.length - 1 && Math.abs(heaters[j + 1] - houses[i]) <= Math.abs(heaters[j] - houses[i])){
                j++;
            } else {
                max = Math.max(max, Math.abs(heaters[j] - houses[i]));
                i++;
            }
        }
        return max;
