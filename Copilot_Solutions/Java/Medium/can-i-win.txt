Synthesizing 10/10 solutions

=======

        if (desiredTotal == 0) {
            return true;
        }
        if (maxChoosableInteger * (maxChoosableInteger + 1) / 2 < desiredTotal) {
            return false;
        }
        int[] visited = new int[maxChoosableInteger + 1];
        Map<Integer, Boolean> map = new HashMap<>();
        return dfs(visited, desiredTotal, map);
    }

    private boolean dfs(int[] visited, int desiredTotal, Map<Integer, Boolean> map) {
        if (desiredTotal <= 0) {
            return false;
        }
        int key = format(visited);
        if (map.containsKey(key)) {
            return map.get(key);
        }
        for (int i = 1; i < visited.length; i++) {
            if (visited[i] == 0) {
                visited[i] = 1;
                if (!dfs(visited, desiredTotal - i, map)) {
                    visited[i] = 0;
                    map.put(key, true);
                    return true;
                }
                visited[i] = 0;
            }
        }
        map.put(key, false);
        return false;
    }

    private int format(int[] visited) {
        int num = 0;
        for (int i = 0; i < visited.length; i++) {
            num |= visited[i] << i;
        }
        return num;

=======

        if (desiredTotal <= maxChoosableInteger) {
            return true;
        }
        if ((1 + maxChoosableInteger) * maxChoosableInteger / 2 < desiredTotal) {
            return false;
        }
        Map<Integer, Boolean> map = new HashMap<>();
        return canIWin(maxChoosableInteger, desiredTotal, 0, map);
    }
    private boolean canIWin(int maxChoosableInteger, int desiredTotal, int used, Map<Integer, Boolean> map) {
        if (map.containsKey(used)) {
            return map.get(used);
        }
        for (int i = 1; i <= maxChoosableInteger; i++) {
            int cur = 1 << i;
            if ((used & cur) == 0) {
                if (i >= desiredTotal || !canIWin(maxChoosableInteger, desiredTotal - i, used | cur, map)) {
                    map.put(used, true);
                    return true;
                }
            }
        }
        map.put(used, false);
        return false;

=======

        if (desiredTotal <= maxChoosableInteger) {
            return true;
        }
        if (maxChoosableInteger * (maxChoosableInteger + 1) / 2 < desiredTotal) {
            return false;
        }
        return canIWin(maxChoosableInteger, desiredTotal, 0, new HashMap<>());
    }

    private boolean canIWin(int length, int total, int used, Map<Integer, Boolean> map) {
        if (map.containsKey(used)) {
            return map.get(used);
        }
        for (int i = 0; i < length; i++) {
            int cur = 1 << i;
            if ((used & cur) == 0) {
                if (total <= i + 1 || !canIWin(length, total - (i + 1), used | cur, map)) {
                    map.put(used, true);
                    return true;
                }
            }
        }
        map.put(used, false);
        return false;

=======

        if (desiredTotal <= 0) {
            return true;
        }
        if (maxChoosableInteger * (maxChoosableInteger + 1) / 2 < desiredTotal) {
            return false;
        }
        return canIWin(maxChoosableInteger, desiredTotal, 0, new HashMap<Integer, Boolean>());
    }

    private boolean canIWin(int length, int total, int used, HashMap<Integer, Boolean> map) {
        if (map.containsKey(used)) {
            return map.get(used);
        }
        for (int i = 0; i < length; i++) {
            int cur = (1 << i);
            if ((cur & used) == 0) {
                if (total <= i + 1 || !canIWin(length, total - (i + 1), cur | used, map)) {
                    map.put(used, true);
                    return true;
                }
            }
        }
        map.put(used, false);
        return false;

=======

        if (desiredTotal <= 0) {
            return true;
        }
        if (maxChoosableInteger * (maxChoosableInteger + 1) / 2 < desiredTotal) {
            return false;
        }
        return canIWin(new HashMap<>(), maxChoosableInteger, desiredTotal, 0);
    }
    private boolean canIWin(Map<Integer, Boolean> map, int maxChoosableInteger, int desiredTotal, int state) {
        if (map.containsKey(state)) {
            return map.get(state);
        }
        for (int i = maxChoosableInteger; i > 0; i--) {
            int cur = 1 << (i - 1);
            if ((cur & state) == 0) {
                if (desiredTotal <= i || !canIWin(map, maxChoosableInteger, desiredTotal - i, cur | state)) {
                    map.put(state, true);
                    return true;
                }
            }
        }
        map.put(state, false);
        return false;

=======

        if (desiredTotal <= maxChoosableInteger) {
            return true;
        }
        if ((maxChoosableInteger + 1) * maxChoosableInteger / 2 < desiredTotal) {
            return false;
        }
        Map<Integer, Boolean> memo = new HashMap<>();
        return canIWin(maxChoosableInteger, desiredTotal, 0, memo);
    }

    private boolean canIWin(int maxChoosableInteger, int desiredTotal, int state, Map<Integer, Boolean> memo) {
        if (memo.containsKey(state)) {
            return memo.get(state);
        }
        for (int i = 1; i <= maxChoosableInteger; i++) {
            int cur = 1 << (i - 1);
            if ((state & cur) == 0) {
                if (desiredTotal - i <= 0 || !canIWin(maxChoosableInteger, desiredTotal - i, state | cur, memo)) {
                    memo.put(state, true);
                    return true;
                }
            }
        }
        memo.put(state, false);
        return false;

=======

        if (desiredTotal <= maxChoosableInteger) {
            return true;
        }
        if ((maxChoosableInteger + 1) * maxChoosableInteger / 2 < desiredTotal) {
            return false;
        }
        return canWin(maxChoosableInteger, desiredTotal, 0, new HashMap<>());
    }

    private boolean canWin(int length, int total, int used, Map<Integer, Boolean> memo) {
        if (memo.containsKey(used)) {
            return memo.get(used);
        }
        for (int i = 0; i < length; i++) {
            int cur = (1 << i);
            if ((cur & used) == 0) {
                if (total <= i + 1 || !canWin(length, total - (i + 1), cur | used, memo)) {
                    memo.put(used, true);
                    return true;
                }
            }
        }
        memo.put(used, false);
        return false;

=======

        if (desiredTotal <= maxChoosableInteger) {
            return true;
        }
        if (desiredTotal > maxChoosableInteger * (maxChoosableInteger + 1) / 2) {
            return false;
        }
        return canIWin(maxChoosableInteger, desiredTotal, 0, new HashMap<>());
    }

    private boolean canIWin(int maxChoosableInteger, int desiredTotal, int used, Map<Integer, Boolean> memo) {
        if (memo.containsKey(used)) {
            return memo.get(used);
        }
        for (int i = 1; i <= maxChoosableInteger; i++) {
            int mask = 1 << (i - 1);
            if ((used & mask) == 0) {
                if (desiredTotal <= i || !canIWin(maxChoosableInteger, desiredTotal - i, used | mask, memo)) {
                    memo.put(used, true);
                    return true;
                }
            }
        }
        memo.put(used, false);
        return false;

=======

        if (desiredTotal <= 0) {
            return true;
        }
        if ((1 + maxChoosableInteger) * maxChoosableInteger / 2 < desiredTotal) {
            return false;
        }
        return canIWin(maxChoosableInteger, desiredTotal, 0, new HashMap<Integer, Boolean>());
    }

    private boolean canIWin(int length, int total, int used, Map<Integer, Boolean> map) {
        if (map.containsKey(used)) {
            return map.get(used);
        }
        for (int i = 0; i < length; i++) {
            int cur = (1 << i);
            if ((cur & used) == 0) {
                if (total <= i + 1 || !canIWin(length, total - (i + 1), cur | used, map)) {
                    map.put(used, true);
                    return true;
                }
            }
        }
        map.put(used, false);
        return false;

=======

        if (desiredTotal == 0) return true;
        if (desiredTotal > maxChoosableInteger * (maxChoosableInteger + 1) / 2) return false;
        return canIWin(maxChoosableInteger, desiredTotal, 0, new HashMap<>());
    }

    private boolean canIWin(int length, int total, int used, Map<Integer, Boolean> memo) {
        if (memo.containsKey(used)) return memo.get(used);
        for (int i = 0; i < length; i++) {
            int cur = 1 << i;
            if ((cur & used) == 0) {
                if (total <= i + 1 || !canIWin(length, total - (i + 1), cur | used, memo)) {
                    memo.put(used, true);
                    return true;
                }
            }
        }
        memo.put(used, false);
        return false;
