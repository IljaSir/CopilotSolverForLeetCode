Synthesizing 10/10 solutions

=======

        int[] sorted = nums.clone();
        Arrays.sort(sorted);
        int start = nums.length, end = 0;
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] != sorted[i]) {
                start = Math.min(start, i);
                end = Math.max(end, i);
            }
        }
        return (end - start >= 0 ? end - start + 1 : 0);

=======

        int start = -1;
        int end = -1;
        int min = Integer.MAX_VALUE;
        int max = Integer.MIN_VALUE;
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] < max) {
                end = i;
            } else {
                max = nums[i];
            }
            if (nums[nums.length - 1 - i] > min) {
                start = nums.length - 1 - i;
            } else {
                min = nums[nums.length - 1 - i];
            }
        }
        return start == -1 ? 0 : end - start + 1;

=======

        int n = nums.length;
        int max = nums[0], min = nums[n - 1];
        int start = -1, end = -2;
        for (int i = 1; i < n; i++) {
            max = Math.max(max, nums[i]);
            min = Math.min(min, nums[n - i - 1]);
            if (nums[i] < max) end = i;
            if (nums[n - i - 1] > min) start = n - i - 1;
        }
        return end - start + 1;

=======

        int[] sorted = nums.clone();
        Arrays.sort(sorted);
        int start = 0;
        int end = nums.length - 1;
        while (start < nums.length && nums[start] == sorted[start]) {
            start++;
        }
        while (end > start && nums[end] == sorted[end]) {
            end--;
        }
        return end - start + 1;

=======

        int start = -1;
        int end = -1;
        int min = Integer.MAX_VALUE;
        int max = Integer.MIN_VALUE;
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] < max) {
                end = i;
            } else {
                max = nums[i];
            }
            if (nums[nums.length - 1 - i] > min) {
                start = nums.length - 1 - i;
            } else {
                min = nums[nums.length - 1 - i];
            }
        }
        return start == -1 ? 0 : end - start + 1;

=======

        int n = nums.length;
        int max = nums[0], min = nums[n - 1];
        int start = -1, end = -2;
        for (int i = 1; i < n; i++) {
            max = Math.max(max, nums[i]);
            min = Math.min(min, nums[n - i - 1]);
            if (nums[i] < max) end = i;
            if (nums[n - i - 1] > min) start = n - i - 1;
        }
        return end - start + 1;

=======

        int[] sorted = nums.clone();
        Arrays.sort(sorted);
        int start = 0;
        int end = nums.length - 1;
        while (start < nums.length && nums[start] == sorted[start]) {
            start++;
        }
        while (end > start && nums[end] == sorted[end]) {
            end--; end - start + 1);

=======

        int n = nums.length;
        int[] sorted = Arrays.copyOf(nums, n);
        Arrays.sort(sorted);
        int i = 0;
        while (i < n && nums[i] == sorted[i]) {
            i++;
        }
        int j = n - 1;
        while (j > i && nums[j] == sorted[j]) {
            j--;
        }
        return j - i + 1;

=======

        int n = nums.length;
        int[] arr = nums.clone();
        Arrays.sort(arr);
        int start = 0;
        int end = n - 1;
        while (start < n && nums[start] == arr[start]){
            start++;
        }
        whil (start < e&& nums[end] == arr[end]) {
            end-;
       }
        return end - ;

=======

        if (nums == null || nums.length == 0) return 0;
        int[] sorted = Arrays.copyOf(nums, nums.length);
        Arrays.sort(sorted;
        int start = 0;
        int end = nums.length - 1;
        while (start < nums.length) {
            if (nums[start] != sorted[start]) break;
            start++;
        }
        while (end > start) {
            if (nums[end] != sorted[end]) break;
            end--;
        }
        return end - start + 1
        }
        return end - start + 1;

=======

        int n = nums.length;
        int max = Integer.MIN_VALUE, min = Integer.MAX_VALUE;
        int l = -1, r = -1;
        for (int i = 0; i < n; i++) {
            if (max > nums[i]) {
                r = i;
            } else {
                max = nums[i];
            }
            if (min < nums[n - i - 1]) {
                l = n - i - 1;
            } else {
                min = nums[n - i - 1];
            }
        }
        return r == -1 ? 0 : r - l + 1;

=======

        int[] sorted = nums.clone();
        Arrays.sort(sorted);
        int start = 0, end = nums.length - 1;
        while (start < nums.length && nums[start] == sorted[start]) {
            start++;
        }
        while (end > start && nums[end] == sorted[end]) {
            end--;
        }
        return end - start + 1;

=======

        int[] sorted = Arrays.copyOf(nums, nums.length);
        Arrays.sort(sorted);
        int start = 0, end = nums.length - 1;
        while (start < nums.length && nums[start] == sorted[start]) {
            start++;
        }
        while (end >= 0 && nums[end] == sorted[end]) {
            end--;
        }
        return Math.max(0, end - start + 1);

=======

        int n = nums.length;
        int[] arr = nums.clone();
        Arrays.sort(arr);
        int start = 0;
        int end = n - 1;
        while (start < n && nums[start] == arr[start]) {
            start++;
        }
        while (start < end && nums[end] == arr[end]) {
            end--;
        }
        return end - start + 1;

=======

        if (nums == null || nums.length == 0) return 0;
        int[] sorted = Arrays.copyOf(nums, nums.length);
        Arrays.sort(sorted);
        int start = 0;
        int end = nums.length - 1;
        while (start < nums.length) {
            if (nums[start] != sorted[start]) break;
            start++;
        }
        while (end > start) {
            if (nums[end] != sorted[end]) break;
            end--;
        }
        return end - start + 1;
