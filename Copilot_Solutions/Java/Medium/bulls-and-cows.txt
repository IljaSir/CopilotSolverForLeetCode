Synthesizing 10/10 solutions

=======

        int bulls = 0;
        int cows = 0;
        int[] secretCount = new int[10];
        int[] guessCount = new int[10];
        for (int i = 0; i < secret.length(); i++) {
            char s = secret.charAt(i);
            char g = guess.charAt(i);
            if (s == g) {
                bulls++;
            } else {
                secretCount[s - '0']++;
                guessCount[g - '0']++;
            }
        }
        for (int i = 0; i < 10; i++) {
            cows += Math.min(secretCount[i], guessCount[i]);
        }
        return bulls + "A" + cows + "B";

=======

        int bulls = 0;
        int cows = 0;
        int[] count = new int[10];
        for (int i = 0; i < secret.length(); i++) {
            if (secret.charAt(i) == guess.charAt(i)) {
                bulls++;
            } else {
                if (count[secret.charAt(i) - '0']++ < 0) {
                    cows++;
                }
                if (count[guess.charAt(i) - '0']-- > 0) {
                    cows++;
                }
            }
        }
        return bulls + "A" + cows + "B";

=======

        int a = 0, b = 0;
        int[] s = new int[10];
        int[] g = new int[10];
        for (int i = 0; i < secret.length(); i++) {
            char c1 = secret.charAt(i);
            char c2 = guess.charAt(i);
            if (c1 == c2) {
                a++;
            } else {
                s[c1 - '0']++;
                g[c2 - '0']++;
            }
        }
        for (int i = 0; i < 10; i++) {
            b += Math.min(s[i], g[i]);
        }
        return a + "A" + b + "B";

=======

        int[] count = new int[10];
        int bull = 0;
        int cow = 0;
        for (int i = 0; i < secret.length(); i++) {
            if (secret.charAt(i) == guess.charAt(i)) {
                bull++;
            } else {
                if (count[secret.charAt(i) - '0']++ < 0) {
                    cow++;
                }
                if (count[guess.charAt(i) - '0']-- > 0) {
                    cow++;
                }
            }
        }
        return bull + "A" + cow + "B";

=======

        int[] count = new int[10];
        int bull = 0;
        int cow = 0;
        for (int i = 0; i < secret.length(); i++) {
            if (secret.charAt(i) == guess.charAt(i)) {
                bull++;
            } else {
                if (count[secret.charAt(i) - '0']++ < 0) {
                    cow++;
                }
                if (count[guess.charAt(i) - '0']-- > 0) {
                    cow++;
                }
            }
        }
        return bull + "A" + cow + "B";

=======

        int[] secretDigits = new int[10];
        int[] guessDigits = new int[10];
        int bulls = 0;
        int cows = 0;
        for (int i = 0; i < secret.length(); i++) {
            int secretDigit = secret.charAt(i) - '0';
            int guessDigit = guess.charAt(i) - '0';
            if (secretDigit == guessDigit) {
                bulls++;
            } else {
                secretDigits[secretDigit]++;
                guessDigits[guessDigit]++;
            }
        }
        for (int i = 0; i < 10; i++) {
            cows += Math.min(secretDigits[i], guessDigits[i]);
        }
        }
        return bulls + "A" + (secret.length() - bulls - cows) + "B";

=======

        int bulls = 0;
        int cows = 0;
        int[] s = new int[10];
        int[] g = new int[10];
        for(int i = 0; i < secret.length(); i++){
            if(secret.charAt(i) == guess.charAt(i)){
                bulls++;
            }else{
                s[secret.charAt(i) - '0']++;
                g[guess.charAt(i) - '0']++;
            }
        }
        for(int i = 0; i < 10; i++){
            cows += Math.min(s[i], g[i]);
        return bulls + "A" + cows + "B";
 cows + "B";

=======

        int bulls = 0;
        int cows = 0;
        int[] counts = new int[10];
       for int i = 0; i < th(); i++) {
            char c = secret.charA(i);
            char g = guess.carAti;
           if (c == g) {
                bulls++;
            } else {
                if (counts[c - '0']++ < 0) {
                    cows++;
                }
                if (counts[g - '0']- > 0) {
                   cows++;
                }
            }
        }
        return bulls + "A" + cows + "B";

=======

        int ls = 0, cows = 0;
        int[] digits = new int[10];
        for(int i = 0; i < secret.ength(); i++){
            int s = secret.charAt(i) - '0';
            int g = gues.charAt(i) '0';
           if(s == g){
                bulls++;
            }else{
                if(digits[s] < 0) ++;
                if(digits[g] > 0 cows++;
                digits[s]++;
                digits[g]--;
            }
        }
        return bulls + "A" + cows
=======

        int bulls = 0;
        int cows = 0;
        int[] cnt = new int[10];
        for (int i = 0; i < secret.length(); i++) {
            if (secret.charAt(i) == guess.charAt(i)) {
                bulls++;
            } else {
                cnt[secret.charAt(i) - '0']++;
                cnt[guess.charAt(i) - '0']--;
            }
        }
        for (int i = 0; i < 10; i++) {
            if (cnt[i] > 0) {
                cows += cnt[i];
            }
        }
        return bulls + "A" + (secret.length() - bulls - cows) + "B";

=======

        int bulls = 0;
        int cows = 0;
        int[] s = new int[10];
        int[] g = new int[10];
        for(int i = 0; i < secret.length(); i++){
            if(secret.charAt(i) == guess.charAt(i)){
                bulls++;
            }else{
                s[secret.charAt(i) - '0']++;
                g[guess.charAt(i) - '0']++;
            }
        }
        for(int i = 0; i < 10; i++){
            cows += Math.min(s[i], g[i]);
        }
        return bulls + "A" + cows + "B";

=======

        int bulls = 0;
        int cows = 0;
        int[] counts = new int[10];
        for (int i = 0; i < secret.length(); i++) {
            char c = secret.charAt(i);
            char g = guess.charAt(i);
            if (c == g) {
                bulls++;
            } else {
                if (counts[c - '0']++ < 0) {
                    cows++;
                }
                if (counts[g - '0']-- > 0) {
                    cows++;
                }
            }
        }
        return bulls + "A" + cows + "B";

=======

        int[] num = new int[10];
        int bull = 0;
        int cow = 0;
        for (int i = 0; i < secret.length(); i++) {
            char c1 = secret.charAt(i);
            char c2 = guess.charAt(i);
            if (c1 == c2) {
                bull++;
            } else {
                if (num[c1 - '0'] < 0) {
                    cow++;
                }
                if (num[c2 - '0'] > 0) {
                    cow++;
                }
                num[c1 - '0']++;
                num[c2 - '0']--;
            }
        }
        return bull + "A" + cow + "B";
