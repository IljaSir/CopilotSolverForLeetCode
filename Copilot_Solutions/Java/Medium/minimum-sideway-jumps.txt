Synthesizing 10/10 solutions

=======

        int n = obstacles.length;
        int[][] dp = new int[n][3];
        dp[0][0] = 1;
        dp[0][1] = 0;
        dp[0][2] = 1;
        for (int i = 1; i < n; i++) {
            for (int j = 0; j < 3; j++) {
                if (obstacles[i] == j + 1) {
                    dp[i][j] = Integer.MAX_VALUE;
                } else {
                    dp[i][j] = dp[i - 1][j];
                    for (int k = 0; k < 3; k++) {
                        if (k != j && obstacles[i] != k + 1) {
                            dp[i][j] = Math.min(dp[i][j], dp[i][k] + 1);
                        }
                    }
                }
            }
        }
        return Math.min(dp[n - 1][0], Math.min(dp[n - 1][1], dp[n - 1][2]));

=======

        int n = obstacles.length;
        int[][] dp = new int[n][3];
        for (int i = 1; i < n; i++) {
            for (int j = 0; j < 3; j++) {
                dp[i][j] = Integer.MAX_VALUE;
                if (obstacles[i] == j + 1) {
                    continue;
                }
                dp[i][j] = dp[i - 1][j];
                for (int k = 0; k < 3; k++) {
                    if (k != j && obstacles[i] != k + 1) {
                        dp[i][j] = Math.min(dp[i][j], dp[i][k] + 1);
                    }
                }
            }
        }
        return Math.min(dp[n - 1][0], Math.min(dp[n - 1][1], dp[n - 1][2]));

=======

        int n = obstacles.length;
        int[][] dp = new int[n][3];
        for (int i = 0; i < n; i++) {
            Arrays.fill(dp[i], Integer.MAX_VALUE);
        }
        dp[0][1] = 0;
        for (int i = 1; i < n; i++) {
            for (int j = 0; j < 3; j++) {
                if (obstacles[i] == j + 1) {
                    continue;
                }
                dp[i][j] = dp[i - 1][j];
                for (int k = 0; k < 3; k++) {
                    if (k == j) {
                        continue;
                    }
                    if (obstacles[i] == k + 1) {
                        continue;
                    }
                    dp[i][j] = Math.min(dp[i][j], dp[i - 1][k] + 1);
                }
            }
        }
        return Math.min(dp[n - 1][0], Math.min(dp[n - 1][1], dp[n - 1][2]));

=======

        int n = obstacles.length;
        int[] dp = new int[]{1, 0, 1};
        for (int i = 1; i < n; ++i) {
            if (obstacles[i] > 0) {
                dp[obstacles[i] - 1] = 1000000;
            }
            for (int j = 0; j < 3; ++j) {
                if (j + 1 != obstacles[i]) {
                    dp[j] = Math.min(dp[j], Math.min(dp[(j + 1) % 3], dp[(j + 2) % 3]) + 1);
                }
            }
        }
        return Math.min(dp[0], Math.min(dp[1], dp[2]));

=======

        int n = obstacles.length;
        int[] dp = {1, 0, 1};
        for (int i = 1; i < n; ++i) {
            int[] ndp = new int[3];
            for (int j = 0; j < 3; ++j)
                ndp[j] = 1 + Math.min(dp[0] + (j == 0 ? 1 : 0), Math.min(dp[1] + (j == 1 ? 1 : 0), dp[2] + (j == 2 ? 1 : 0)));
            if (obstacles[i] > 0)
                ndp[obstacles[i] - 1] = Integer.MAX_VALUE;
            if (i + 1 < n && obstacles[i + 1] > 0)
                ndp[obstacles[i + 1] - 1] = Integer.MAX_VALUE;
            dp = ndp;
        }
        return Math.min(dp[0], Math.min(dp[1], dp[2]));

=======

        int[] dp = new int[]{1, 0, 1};
        for (int i = 1; i < obstacles.length; i++) {
            if (obstacles[i] > 0) {
                dp[obstacles[i] - 1] = 1000000;
            }
            for (int j = 0; j < 3; j++) {
                if (obstacles[i] != j + 1) {
                    dp[j] = Math.min(dp[j], Math.min(dp[(j + 1) % 3], dp[(j + 2) % 3]) + 1);
                }
            }
        }
        return Math.min(dp[0], Math.min(dp[1], dp[2]));

=======

        int n = obstacles.length;
        int[][] dp = new int[n][3];
        
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < 3; j++) {
                dp[i][j] = Integer.MAX_VALUE;
            }
        }
        
        dp[0][0] = 1;
        dp[0][1] = 0;
        dp[0][2] = 1;
        
        for (int i = 1; i < n; i++) {
            for (int j = 0; j < 3; j++) {
                if (obstacles[i] == j + 1) {
                    dp[i][j] = Integer.MAX_VALUE;
                } else {
                    dp[i][j] = dp[i - 1][j];
                }
            }
            
            for (int j = 0; j < 3; j++) {
                for (int k = 0; k < 3; k++) {
                    if (j != k) {
                        if (obstacles[i] != k + 1) {
                            dp[i][k] = Math.min(dp[i][k], dp[i][j] + 1);
                        }
                    }
                }
            }
        }
        
        return Math.min(dp[n - 1][0], Math.min(dp[n - 1][1], dp[n - 1][2]));

=======

        int[] dp = new int[]{1, 0, 1};
        for (int i = 1; i < obstacles.length; i++) {
            int[] next = new int[3];
            Arrays.fill(next, Integer.MAX_VALUE);
            for (int j = 0; j < 3; j++) {
                if (obstacles[i] == j + 1) continue;
                next[j] = dp[j];
                for (int k = 0; k < 3; k++) {
                    if (k == j || obstacles[i] == k + 1) continue;
                    next[j] = Math.min(next[j], dp[k] + 1);
                }
            }
            dp = next;
        }
        return Math.min(dp[0], Math.min(dp[1], dp[2]));

=======

        int n = obstacles.length;
        int[][] dp = new int[n][3];
        for (int i = 0; i < n; i++) {
            Arrays.fill(dp[i], 10000000);
        }
        dp[0][1] = 0;
        for (int i = 1; i < n; i++) {
            for (int j = 0; j < 3; j++) {
                if (obstacles[i] == j + 1) {
                    continue;
                }
                dp[i][j] = dp[i - 1][j];
                for (int k = 0; k < 3; k++) {
                    if (k == j) {
                        continue;
                    }
                    if (obstacles[i] == k + 1) {
                        continue;
                    }
                    dp[i][j] = Math.min(dp[i][j], dp[i - 1][k] + 1);
                }
            }
        }
        return Math.min(dp[n - 1][0], Math.min(dp[n - 1][1], dp[n - 1][2]));

=======

        int[] dp = new int[3];
        for (int i = 0; i < obstacles.length - 1; i++) {
            if (obstacles[i + 1] == 0) {
                dp[0] = Math.min(dp[0], Math.min(dp[1], dp[2]) + 1);
                dp[1] = Math.min(dp[1], Math.min(dp[0], dp[2]) + 1);
                dp[2] = Math.min(dp[2], Math.min(dp[0], dp[1]) + 1);
            } else {
                dp[obstacles[i + 1] - 1] = Integer.MAX_VALUE;
            }
        }
        return Math.min(dp[0], Math.min(dp[1], dp[2]));
