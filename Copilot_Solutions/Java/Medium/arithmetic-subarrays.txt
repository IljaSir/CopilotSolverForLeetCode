Synthesizing 10/10 solutions

=======

        List<Boolean> res = new ArrayList<>();
        for (int i = 0; i < l.length; i++) {
            int[] sub = Arrays.copyOfRange(nums, l[i], r[i] + 1);
            Arrays.sort(sub);
            boolean flag = true;
            for (int j = 0; j < sub.length - 1; j++) {
                if (sub[j + 1] - sub[j] != sub[1] - sub[0]) {
                    flag = false;
                    break;
                }
            }
            res.add(flag);
        }
        return res;

=======

        List<Boolean> res = new ArrayList<>();
        for (int i = 0; i < l.length; i++) {
            res.add(isArithmetic(nums, l[i], r[i]));
        }
        return res;
    }
    
    private boolean isArithmetic(int[] nums, int l, int r) {
        int[] arr = Arrays.copyOfRange(nums, l, r + 1);
        Arrays.sort(arr);
        int diff = arr[1] - arr[0];
        for (int i = 1; i < arr.length - 1; i++) {
            if (arr[i + 1] - arr[i] != diff) {
                return false;
            }
        }
        return true;

=======

        List<Boolean> result = new ArrayList<Boolean>();
        for (int i = 0; i < l.length; i++) {
            int[] subArray = Arrays.copyOfRange(nums, l[i], r[i] + 1);
            Arrays.sort(subArray);
            int diff = subArray[1] - subArray[0];
            boolean isArithmetic = true;
            for (int j = 1; j < subArray.length - 1; j++) {
                if (subArray[j + 1] - subArray[j] != diff) {
                    isArithmetic = false;
                    break;
                }
            }
            result.add(isArithmetic);
        }
        return result;

=======

        List<Boolean> res = new ArrayList<Boolean>();
        for (int i = 0; i < l.length; i++) {
            res.add(isArithmetic(nums, l[i], r[i]));
        }
        return res;
    }
    private boolean isArithmetic(int[] nums, int l, int r) {
        if (l == r) {
            return true;
        }
        int[] arr = new int[r - l + 1];
        for (int i = l; i <= r; i++) {
            arr[i - l] = nums[i];
        }
        Arrays.sort(arr);
        int d = arr[1] - arr[0];
        for (int i = 2; i < arr.length; i++) {
            if (arr[i] - arr[i - 1] != d) {
                return false;
            }
        }
        return true;

=======

        List<Boolean> result = new ArrayList<>();
        for (int i = 0; i < l.length; i++) {
            int[] subArr = Arrays.copyOfRange(nums, l[i], r[i] + 1);
            Arrays.sort(subArr);
            int diff = subArr[1] - subArr[0];
            boolean isArithmetic = true;
            for (int j = 2; j < subArr.length; j++) {
                if (subArr[j] - subArr[j - 1] != diff) {
                    isArithmetic = false;
                    break;
                }
            }
            result.add(isArithmetic);
        }
        return result;

=======

        List<Boolean> result = new ArrayList<Boolean>();
        for (int i = 0; i < l.length; i++) {
            int[] sub = Arrays.copyOfRange(nums, l[i], r[i] + 1);
            Arrays.sort(sub);
            int diff = sub[1] - sub[0];
            boolean isArith = true;
            for (int j = 1; j < sub.length - 1; j++) {
                if (sub[j + 1] - sub[j] != diff) {
                    isArith = false;
                    break;
                }
            }
            result.add(isArith);
        }
        return result;

=======

        List<Boolean> result = new ArrayList<Boolean>();
        for (int i = 0; i < l.length; i++) {
            result.add(check(nums, l[i], r[i]));
        }
        return result;
    }
    public boolean check(int[] nums, int l, int r) {
        int[] sub = new int[r - l + 1];
        for (int i = l; i <= r; i++) {
            sub[i - l] = nums[i];
        }
        Arrays.sort(sub);
        for (int i = 0; i < sub.length - 1; i++) {
            if (sub[i + 1] - sub[i] != sub[1] - sub[0]) {
                return false;
            }
        }
        return true;

=======

        List<Boolean> ans = new ArrayList<Boolean>();
        for(int i = 0; i < l.length; i++){
            int[] tmp = Arrays.copyOfRange(nums, l[i], r[i]+1);
            Arrays.sort(tmp);
            boolean flag = true;
            for(int j = 1; j < tmp.length-1; j++){
                if(tmp[j] - tmp[j-1] != tmp[j+1] - tmp[j]){
                    flag = false;
                    break;
                }
            }
            ans.add(flag);
        }
        return ans;

=======

        List<Boolean> result = new ArrayList<Boolean>();
        for(int i = 0; i < l.length; i++){
            int[] subArr = Arrays.copyOfRange(nums, l[i], r[i] + 1);
            Arrays.sort(subArr);
            boolean isArithmetic = true;
            for(int j = 1; j < subArr.length - 1; j++){
                if(subArr[j + 1] - subArr[j] != subArr[j] - subArr[j - 1]){
                    isArithmetic = false;
                    break;
                }
            }
            result.add(isArithmetic);
        }
        return result;

=======

        List<Boolean> ans = new ArrayList<Boolean>();
        int len = l.length;
        for (int i = 0; i < len; i++) {
            int[] sub = new int[r[i] - l[i] + 1];
            System.arraycopy(nums, l[i], sub, 0, sub.length);
            Arrays.sort(sub);
            int d = sub[1] - sub[0];
            boolean isArithmetic = true;
            for (int j = 2; j < sub.length; j++) {
                if (sub[j] - sub[j - 1] != d) {
                    isArithmetic = false;
                    break;
                }
            }
            ans.add(isArithmetic);
        }
        return ans;
