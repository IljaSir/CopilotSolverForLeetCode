Synthesizing 10/10 solutions

=======

        int count = 0;
        for (int i = 0; i < nums.length; i++) {
            int lcm = nums[i];
            for (int j = i; j < nums.length; j++) {
                lcm = lcm(lcm, nums[j]);
                if (lcm == k) {
                    count++;
                }
            }
        }
        return count;
    }

    private int lcm(int a, int b) {
        return a * b / gcd(a, b);
    }

    private int gcd(int a, int b) {
        if (b == 0) {
            return a;
        }
        return gcd(b, a % b);

=======

        int count = 0;
        for (int i = 0; i < nums.length; i++) {
            int lcm = nums[i];
            if (lcm == k) {
                count++;
            }
            for (int j = i + 1; j < nums.length; j++) {
                lcm = lcm(lcm, nums[j]);
                if (lcm == k) {
                    count++;
                }
            }
        }
        return count;
    }
    
    private int lcm(int a, int b) {
        return a * b / gcd(a, b);

=======

        int n = nums.length;
        int[] pre = new int[n + 1];
        for (int i = 0; i < n; i++) {
            pre[i + 1] = gcd(pre[i], nums[i]);
        }
        int[] count = new int[k];
        for (int i = 1; i <= n; i++) {
            int g = pre[i];
            if (g > 1) {
                count[g]++;
            }
            for (int j = 2; j * j <= g; j++) {
                if (g % j == 0) {
                    count[j]++;
                    if (j * j != g) {
                        count[g / j]++;
                    }
                }
            }
        }
        int ans = 0;
        for (int i = 1; i < k; i++) {
            if (k % i == 0) {
                ans += count[i];
            }
        }
        return ans;

=======

        int n = nums.length;
        int ans = 0;
        for (int i = 0; i < n; i++) {
            int lcm = nums[i];
            if (lcm == k) ans++;
            for (int j = i + 1; j < n; j++) {
                lcm = lcm(lcm, nums[j]);
                if (lcm > k) break;
                if (lcm == k) ans++;
            }
        }
        return ans;
    }
    private int lcm(int a, int b) {
        return a * b / gcd(a, b);

=======

        int n = nums.length;
        int[] prefix = new int[n+1];
        for (int i = 0; i < n; i++) {
            prefix[i+1] = gcd(prefix[i], nums[i]);
        }
        int[] count = new int[k+1];
        for (int i = 1; i <= n; i++) {
            if (prefix[i] > 1) {
                count[prefix[i]]++;
            }
        }
        int ans = 0;
        for (int i = 1; i <= k; i++) {
            if (k % i == 0) {
                ans += count[i];
            }
        }
        return ans;
    }
    private int gcd(int a, int b) {
        while (b > 0) {
            int t = a % b;
            a = b;
            b = t;
        }
        return a;

=======

        int n = nums.length;
        int[] prefix = new int[n+1];
        for (int i = 0; i < n; i++) {
            prefix[i+1] = gcd(prefix[i], nums[i]);
        }
        Map<Integer, Integer> map = new HashMap<>();
        int res = 0;
        for (int i = n; i >= 0; i--) {
            int g = gcd(prefix[i], k);
            res += map.getOrDefault(g, 0);
            map.put(prefix[i], map.getOrDefault(prefix[i], 0) + 1);
        }
        return res;

=======

        int n = nums.length;
        int[] dp = new int[n + 1];
        dp[0] = 1;
        int res = 0;
        for (int i = 0; i < n; i++) {
            if (nums[i] % k == 0) {
                dp[i + 1] = 1;
                res++;
            } else {
                for (int j = i; j >= 0; j--) {
                    if (dp[j] == 1) {
                        int gcd = gcd(nums[i], nums[j]);
                        if (gcd % k == 0) {
                            dp[i + 1] = 1;
                            res++;
                            break;
                        }
                    }
                }
            }
        }
        return res;
    }

    private int gcd(int a, int b) {
        if (a == 0) {
            return b;
        } else {
            return gcd(b % a, a);
        }

=======

        int n = nums.length;
        int[] pre = new int[n+1];
        for (int i = 0; i < n; i++) {
            pre[i+1] = pre[i] + nums[i];
        }
        int ans = 0;
        for (int i = 0; i < n; i++) {
            for (int j = i+1; j <= n; j++) {
                int sum = pre[j] - pre[i];
                if (sum % k == 0) {
                    ans++;
                }
            }
        }
        return ans;

=======

        int count = 0;
        for(int i=0; i<nums.length; i++){
            int lcm = nums[i];
            if(lcm%k == 0){
                count++;
            }
            for(int j=i+1; j<nums.length; j++){
                lcm = lcm(lcm, nums[j]);
                if(lcm%k == 0){
                    count++;
                }
            }
        }
        return count;
    }
    private int lcm(int a, int b){
        return a*b/gcd(a, b);
    }
    private int gcd(int a, int b){
        if(a==0){
            return b;
        }
        return gcd(b%a, a);

=======

        int n = nums.length;
        int[] dp = new int[n];
        dp[0] = nums[0] % k == 0 ? 1 : 0;
        int ans = dp[0];
        for (int i = 1; i < n; i++) {
            dp[i] = nums[i] % k == 0 ? 1 : 0;
            for (int j = i - 1; j >= 0; j--) {
                int g = gcd(nums[j], nums[i]);
                if (g % k == 0) {
                    dp[i] += dp[j] + 1;
                }
            }
            ans += dp[i];
        }
        return ans;
    }
    private int gcd(int a, int b) {
        return a == 0 ? b : gcd(b % a, a);
    }
}
