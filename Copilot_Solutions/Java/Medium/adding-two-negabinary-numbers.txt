Synthesizing 10/10 solutions

=======

        int i = arr1.length - 1;
        int j = arr2.length - 1;
        int carry = 0;
        List<Integer> list = new ArrayList<>();
        while (i >= 0 || j >= 0 || carry != 0) {
            int sum = carry;
            if (i >= 0) {
                sum += arr1[i--];
            }
            if (j >= 0) {
                sum += arr2[j--];
            }
            list.add(sum & 1);
            carry = -(sum >> 1);
        }
        int k = list.size() - 1;
        while (k >= 0 && list.get(k) == 0) {
            k--;
        }
        if (k == -1) {
            return new int[]{0};
        }
        int[] res = new int[k + 1];
        for (int p = 0; p < res.length; p++) {
            res[p] = list.get(k--);
        }
        return res;

=======

        int i = arr1.length - 1;
        int j = arr2.length - 1;
        int carry = 0;
        List<Integer> list = new ArrayList<>();
        while (i >= 0 || j >= 0 || carry != 0) {
            int sum = carry;
            if (i >= 0) {
                sum += arr1[i--];
            }
            if (j >= 0) {
                sum += arr2[j--];
            }
            list.add(sum & 1);
            carry = -(sum >> 1);
        }
        while (list.size() > 1 && list.get(list.size() - 1) == 0) {
            list.remove(list.size() - 1);
        }
        int[] ans = new int[list.size()];
        for (int k = 0; k < list.size(); k++) {
            ans[k] = list.get(list.size() - 1 - k);
        }
        return ans;

=======

        int i = arr1.length - 1;
        int j = arr2.length - 1;
        int carry = 0;
        List<Integer> res = new ArrayList<>();
        while (i >= 0 || j >= 0 || carry != 0) {
            int sum = carry;
            if (i >= 0) {
                sum += arr1[i--];
            }
            if (j >= 0) {
                sum += arr2[j--];
            }
            res.add(sum % 2);
            carry = -(sum / 2);
        }
        Collections.reverse(res);
        while (res.size() > 1 && res.get(0) == 0) {
            res.remove(0);
        }
        int[] result = new int[res.size()];
        for (int k = 0; k < res.size(); k++) {
            result[k] = res.get(k);
        }
        return result;

=======

        int i = arr1.length - 1;
        int j = arr2.length - 1;
        int carry = 0;
        List<Integer> ans = new ArrayList<>();
        while (i >= 0 || j >= 0 || carry != 0) {
            if (i >= 0) {
                carry += arr1[i--];
            }
            if (j >= 0) {
                carry += arr2[j--];
            }
            ans.add(carry & 1);
            carry = -(carry >> 1);
        }
        while (ans.size() > 1 && ans.get(ans.size() - 1) == 0) {
            ans.remove(ans.size() - 1);
        }
        Collections.reverse(ans);
        int[] res = new int[ans.size()];
        for (int k = 0; k < ans.size(); k++) {
            res[k] = ans.get(k);
        }
        return res;

=======

        int[] res = new int[Math.max(arr1.length, arr2.length) + 2];
        int i = arr1.length - 1, j = arr2.length - 1, k = res.length - 1;
        while (i >= 0 || j >= 0 || res[k] != 0) {
            if (i >= 0) res[k] += arr1[i--];
            if (j >= 0) res[k] += arr2[j--];
            if (res[k] > 1) {
                res[k - 1] += res[k] / 2;
                res[k] %= 2;
            }
            k--;
        }
        return Arrays.copyOfRange(res, k + 1, res.length);

=======

        int len1 = arr1.length;
        int len2 = arr2.length;
        int len = Math.max(len1, len2);
        int[] res = new int[len + 2];
        int carry = 0;
        for (int i = 0; i < len; i++) {
            int digit1 = i < len1 ? arr1[len1 - i - 1] : 0;
            int digit2 = i < len2 ? arr2[len2 - i - 1] : 0;
            int sum = digit1 + digit2 + carry;
            carry = sum / 2;
            res[len + 1 - i] = sum % 2;
        }
        if (carry == 1) {
            res[0] = 1;
        }
        int start = 0;
        while (start < len + 2 && res[start] == 0) {
            start++;
        }
        return Arrays.copyOfRange(res, start, len + 2);

=======

        int n = arr1.length;
        int m = arr2.length;
        int max = Math.max(n, m);
        int[] ans = new int[max + 2];
        int carry = 0;
        for (int i = 0; i < max; i++) {
            int a = i < n ? arr1[n - 1 - i] : 0;
            int b = i < m ? arr2[m - 1 - i] : 0;
            ans[i] += a + b + carry;
            carry = ans[i] >> 1;
            ans[i] &= 1;
        }
        ans[max] = carry;
        int i = max + 1;
        while (i > 0 && ans[i] == 0) {
            i--;
        }
        return Arrays.copyOfRange(ans, 0, i + 1);

=======

        int n = arr1.length;
        int m = arr2.length;
        int max = Math.max(n, m);
        int[] res = new int[max + 2];
        int carry = 0;
        for (int i = 0; i < max; i++) {
            int a = i < n ? arr1[n - 1 - i] : 0;
            int b = i < m ? arr2[m - 1 - i] : 0;
            int sum = a + b + carry;
            res[max - i] = sum & 1;
            carry = -(sum >> 1);
        }
        res[0] = carry;
        int i = 0;
        while (i < res.length && res[i] == 0) {
            i++;
        }
        return Arrays.copyOfRange(res, i, res.length);

=======

        int n1 = arr1.length;
        int n2 = arr2.length;
        int n = Math.max(n1, n2);
        int[] result = new int[n + 1];
        int carry = 0;
        for (int i = 0; i < n; i++) {
            int v1 = i < n1 ? arr1[n1 - i - 1] : 0;
            int v2 = i < n2 ? arr2[n2 - i - 1] : 0;
            int v = v1 + v2 + carry;
            if (v == 2) {
                v = 0;
                carry = 1;
            } else if (v == 3) {
                v = 1;
                carry = 1;
            } else {
                carry = 0;
            }
            result[n - i] = v;
        }
        if (carry == 1) {
            result[0] = 1;
        }
        int i = 0;
        while (i < result.length && result[i] == 0) {
            i++;
        }
        if (i == result.length) {
            return new int[]{0};
        }
        int[] res = new int[result.length - i];
        System.arraycopy(result, i, res, 0, result.length - i);
        return res;

=======

        int l1 = arr1.length;
        int l2 = arr2.length;
        int l = Math.max(l1, l2);
        int[] res = new int[l + 2];
        int i = l1 - 1, j = l2 - 1, k = l + 1;
        while (i >= 0 || j >= 0) {
            res[k] += (i >= 0 ? arr1[i] : 0) + (j >= 0 ? arr2[j] : 0);
            if (res[k] > 1) {
                res[k - 1]++;
                res[k] -= 2;
            }
            i--;
            j--;
            k--;
        }
        while (k > 1) {
            if (res[k] > 1) {
                res[k - 1]++;
                res[k] -= 2;
            }
            k--;
        }
        k = 0;
        while (k < l + 2 && res[k] == 0) {
            k++;
        }
        return Arrays.copyOfRange(res, k, l + 2);
