Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int[] dp = new int[books.length + 1];
        Arrays.fill(dp, Integer.MAX_VALUE);
        dp[0] = 0;
        for (int i = 0; i < books.length; i++) {
            int height = 0;
            int width = 0;
            for (int j = i; j < books.length; j++) {
                height = Math.max(height, books[j][1]);
                width += books[j][0];
                if (width > shelfWidth) {
                    break;
                }
                dp[j + 1] = Math.min(dp[j + 1], dp[i] + height);
            }
        }
        return dp[books.length];

=======

        int[] dp = new int[books.length + 1];
        Arrays.fill(dp, Integer.MAX_VALUE);
        dp[0] = 0;
        for (int i = 0; i < books.length; i++) {
            int width = 0, height = 0;
            for (int j = i; j < books.length; j++) {
                width += books[j][0];
                height = Math.max(height, books[j][1]);
                if (width > shelfWidth) {
                    break;
                }
                dp[j + 1] = Math.min(dp[j + 1], dp[i] + height);
            }
        }
        return dp[books.length];

=======

        int[] dp = new int[books.length + 1];
        Arrays.fill(dp, Integer.MAX_VALUE);
        dp[0] = 0;
        for (int i = 1; i <= books.length; i++) {
            int width = 0;
            int height = 0;
            for (int j = i - 1; j >= 0; j--) {
                width += books[j][0];
                if (width > shelfWidth) {
                    break;
                }
                height = Math.max(height, books[j][1]);
                dp[i] = Math.min(dp[i], dp[j] + height);
            }
        }
        return dp[books.length];

=======

        int n = books.length;
        int[] dp = new int[n + 1];
        Arrays.fill(dp, Integer.MAX_VALUE);
        dp[0] = 0;
        for (int i = 1; i <= n; i++) {
            int width = 0;
            int height = 0;
            for (int j = i; j >= 1; j--) {
                width += books[j - 1][0];
                if (width > shelfWidth) {
                    break;
                }
                height = Math.max(height, books[j - 1][1]);
                dp[i] = Math.min(dp[i], dp[j - 1] + height);
            }
        }
        return dp[n];

=======

        int n = books.length;
        int[] dp = new int[n+1];
        Arrays.fill(dp, Integer.MAX_VALUE);
        dp[0] = 0;
        for (int i = 0; i < n; i++) {
            int width = 0, height = 0;
            for (int j = i; j < n; j++) {
                width += books[j][0];
                if (width > shelfWidth) break;
                height = Math.max(height, books[j][1]);
                dp[j+1] = Math.min(dp[j+1], dp[i] + height);
            }
        }
        return dp[n];

=======

        int[] dp = new int[books.length + 1];
        dp[0] = 0;
        for (int i = 1; i <= books.length; i++) {
            int width = books[i - 1][0];
            int height = books[i - 1][1];
            dp[i] = dp[i - 1] + height;
            for (int j = i - 1; j > 0 && width + books[j - 1][0] <= shelfWidth; j--) {
                height = Math.max(height, books[j - 1][1]);
                width += books[j - 1][0];
                dp[i] = Math.min(dp[i], dp[j - 1] + height);
            }
        }
        return dp[books.length];

=======

        int n = books.length;
        int[] dp = new int[n + 1];
        dp[0] = 0;
        for (int i = 1; i <= n; i++) {
            int width = books[i - 1][0];
            int height = books[i - 1][1];
            dp[i] = dp[i - 1] + height;
            for (int j = i - 1; j > 0 && width + books[j - 1][0] <= shelfWidth; j--) {
                height = Math.max(height, books[j - 1][1]);
                width += books[j - 1][0];
                dp[i] = Math.min(dp[i], dp[j - 1] + height);
            }
        }
        return dp[n];

=======

        int n = books.length;
        int[] dp = new int[n + 1];
        for (int i = 1; i <= n; i++) {
            dp[i] = Integer.MAX_VALUE;
        }
        for (int i = 1; i <= n; i++) {
            int w = books[i - 1][0];
            int h = books[i - 1][1];
            dp[i] = dp[i - 1] + h;
            for (int j = i - 1; j >= 1; j--) {
                w += books[j - 1][0];
                h = Math.max(h, books[j - 1][1]);
                if (w > shelfWidth) {
                    break;
                }
                dp[i] = Math.min(dp[i], dp[j - 1] + h);
            }
        }
        return dp[n];

=======

        int n = books.length;
        int[] dp = new int[n+1];
        dp[0] = 0;
        for (int i = 1; i <= n; i++) {
            int w = books[i-1][0];
            int h = books[i-1][1];
            dp[i] = dp[i-1] + h;
            for (int j = i-1; j > 0 && w + books[j-1][0] <= shelfWidth; j--) {
                h = Math.max(h, books[j-1][1]);
                w += books[j-1][0];
                dp[i] = Math.min(dp[i], dp[j-1] + h);
            }
        }
        return dp[n];
