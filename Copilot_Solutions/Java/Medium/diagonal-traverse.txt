Synthesizing 10/10 solutions

=======

        int m = mat.length;
        int n = mat[0].length;
        int[] res = new int[m * n];
        int r = 0, c = 0;
        for (int i = 0; i < m * n; i++) {
            res[i] = mat[r][c];
            if ((r + c) % 2 == 0) {
                if (c == n - 1) {
                    r++;
                } else if (r == 0) {
                    c++;
                } else {
                    r--;
                    c++;
                }
            } else {
                if (r == m - 1) {
                    c++;
                } else if (c == 0) {
                    r++;
                } else {
                    r++;
                    c--;
                }
            }
        }
        return res;

=======

        int m = mat.length;
        int n = mat[0].length;
        int[] res = new int[m * n];
        int row = 0, col = 0;
        for (int i = 0; i < m * n; i++) {
            res[i] = mat[row][col];
            if ((row + col) % 2 == 0) { // moving up
                if (col == n - 1) row++;
                else if (row == 0) col++;
                else { row--; col++; }
            } else { // moving down
                if (row == m - 1) col++;
                else if (col == 0) row++;
                else { row++; col--; }
            }
        }
        return res;

=======

        int m = mat.length;
        int n = mat[0].length;
        int[] ans = new int[m * n];
        int r = 0;
        int c = 0;
        for (int i = 0; i < ans.length; i++) {
            ans[i] = mat[r][c];
            if ((r + c) % 2 == 0) {
                if (c == n - 1) {
                    r++;
                } else if (r == 0) {
                    c++;
                } else {
                    r--;
                    c++;
                }
            } else {
                if (r == m - 1) {
                    c++;
                } else if (c == 0) {
                    r++;
                } else {
                    r++;
                    c--;
                }
            }
        }
        return ans;

=======

        int m = mat.length;
        int n = mat[0].length;
        int[] result = new int[m * n];
        int i = 0;
        int j = 0;
        int k = 0;
        boolean up = true;
        while (i < m && j < n) {
            result[k++] = mat[i][j];
            if (up) {
                if (i == 0) {
                    up = false;
                    if (j == n - 1) {
                        i++;
                    } else {
                        j++;
                    }
                } else if (j == n - 1) {
                    up = false;
                    i++;
                } else {
                    i--;
                    j++;
                }
            } else {
                if (j == 0) {
                    up = true;
                    if (i == m - 1) {
                        j++;
                    } else {
                        i++;
                    }
                } else if (i == m - 1) {
                    up = true;
                    j++;
                } else {
                    i++;
                    j--;
                }
            }
        }
        return result;

=======

        int m = mat.length;
        int n = mat[0].length;
        int[] ans = new int[m * n];
        int i = 0;
        int j = 0;
        int k = 0;
        boolean up = true;
        while (k < m * n) {
            ans[k++] = mat[i][j];
            if (up) {
                if (j == n - 1) {
                    i++;
                    up = false;
                } else if (i == 0) {
                    j++;
                    up = false;
                } else {
                    i--;
                    j++;
                }
            } else {
                if (i == m - 1) {
                    j++;
                    up = true;
                } else if (j == 0) {
                    i++;
                    up = true;
                } else {
                    i++;
                    j--;
                }
            }
        }
        return ans;

=======

        int m = mat.length;
        int n = mat[0].length;
        int[] ans = new int[m * n];
        int k = 0;
        for (int i = 0; i < m + n - 1; i++) {
            if (i % 2 == 0) {
                for (int j = Math.min(i, n - 1); j >= Math.max(0, i - m + 1); j--) {
                    ans[k++] = mat[i - j][j];
                }
            }
            else {
                for (int j = Math.max(0, i - m + 1); j <= Math.min(i, n - 1); j++) {
                    ans[k++] = mat[i - j][j];
                }
            }
        }
        return ans;

=======

        int m = mat.length;
        int n = mat[0].length;
        int[] result = new int[m*n];
        int i = 0;
        int j = 0;
        int k = 0;
        while (k < m*n) {
            result[k] = mat[i][j];
            k++;
            if ((i+j) % 2 == 0) {
                if (j == n-1) {
                    i++;
                } else if (i == 0) {
                    j++;
                } else {
                    i--;
                    j++;
                }
            } else {
                if (i == m-1) {
                    j++;
                } else if (j == 0) {
                    i++;
                } else {
                    i++;
                    j--;
                }
            }
        }
        return result;

=======

        int m = mat.length;
        int n = mat[0].length;
        int[] ans = new int[m * n];
        int i = 0;
        int j = 0;
        boolean up = true;
        for (int k = 0; k < m * n; k++) {
            ans[k] = mat[i][j];
            if (up) {
                if (i == 0) {
                    up = false;
                    if (j == n - 1) {
                        i++;
                    } else {
                        j++;
                    }
                } else if (j == n - 1) {
                    up = false;
                    i++;
                } else {
                    i--;
                    j++;
                }
            } else {
                if (j == 0) {
                    up = true;
                    if (i == m - 1) {
                        j++;
                    } else {
                        i++;
                    }
                } else if (i == m - 1) {
                    up = true;
                    j++;
                } else {
                    i++;
                    j--;
                }
            }
        }
        return ans;

=======

        int m = mat.length;
        int n = mat[0].length;
        int[] ans = new int[m * n];
        int i = 0;
        int j = 0;
        int index = 0;
        boolean up = true;
        while (index < m * n) {
            ans[index] = mat[i][j];
            if (up) {
                if (j == n - 1) {
                    i++;
                    up = false;
                } else if (i == 0) {
                    j++;
                    up = false;
                } else {
                    i--;
                    j++;
                }
            } else {
                if (i == m - 1) {
                    j++;
                    up = true;
                } else if (j == 0) {
                    i++;
                    up = true;
                } else {
                    i++;
                    j--;
                }
            }
            index++;
        }
        return ans;

=======

        int m = mat.length;
        int n = mat[0].length;
        int[] ans = new int[m * n];
        int row = 0;
        int col = 0;
        int dir = 1;
        for (int i = 0; i < m * n; i++) {
            ans[i] = mat[row][col];
            row -= dir;
            col += dir;
            if (row >= m) {
                row = m - 1;
                col += 2;
                dir = -dir;
            }
            if (col >= n) {
                col = n - 1;
                row += 2;
                dir = -dir;
            }
            if (row < 0) {
                row = 0;
                dir = -dir;
            }
            if (col < 0) {
                col = 0;
                dir = -dir;
            }
        }
        return ans;
