Synthesizing 10/10 solutions

=======

        int n = cardPoints.length;
        int[] preSum = new int[n + 1];
        for (int i = 0; i < n; i++) {
            preSum[i + 1] = preSum[i] + cardPoints[i];
        }
        int ans = 0;
        for (int i = 0; i <= k; i++) {
            ans = Math.max(ans, preSum[i] + preSum[n] - preSum[n - k + i]);
        }
        return ans;

=======

        int n = cardPoints.length;
        int[] left = new int[n];
        int[] right = new int[n];
        left[0] = cardPoints[0];
        right[n-1] = cardPoints[n-1];
        for(int i=1; i<n; i++){
            left[i] = left[i-1] + cardPoints[i];
            right[n-1-i] = right[n-i] + cardPoints[n-1-i];
        }
        int max = 0;
        for(int i=0; i<=k; i++){
            int l = i-1 >= 0 ? left[i-1] : 0;
            int r = n-i-1 >= 0 ? right[n-i-1] : 0;
            max = Math.max(max, l+r);
        }
        return max;

=======

        int n = cardPoints.length;
        int[] left = new int[n + 1];
        int[] right = new int[n + 1];
        for (int i = 0; i < n; i++) {
            left[i + 1] = left[i] + cardPoints[i];
        }
        for (int i = n - 1; i >= 0; i--) {
            right[i] = right[i + 1] + cardPoints[i];
        }
        int ans = 0;
        for (int i = 0; i <= k; i++) {
            ans = Math.max(ans, left[i] + right[n - k + i]);
        }
        return ans;

=======

        int n = cardPoints.length;
        int[] left = new int[n];
        left[0] = cardPoints[0];
        for (int i = 1; i < n; i++) {
            left[i] = left[i - 1] + cardPoints[i];
        }
        int[] right = new int[n];
        right[n - 1] = cardPoints[n - 1];
        for (int i = n - 2; i >= 0; i--) {
            right[i] = right[i + 1] + cardPoints[i];
        }
        int max = 0;
        for (int i = 0; i <= k; i++) {
            int score = 0;
            if (i > 0) {
                score += left[i - 1];
            }
            if (i < k) {
                score += right[n - k + i];
            }
            max = Math.max(max, score);
        }
        return max;

=======

        int n = cardPoints.length;
        int[] dp = new int[n + 1];
        for (int i = 1; i <= n; i++) {
            dp[i] = dp[i - 1] + cardPoints[i - 1];
        }
        int ans = 0;
        for (int i = 0; i <= k; i++) {
            ans = Math.max(ans, dp[i] + dp[n] - dp[n - k + i]);
        }
        return ans;

=======

        int n = cardPoints.length;
        int[] dp = new int[n + 1];
        for (int i = 1; i <= n; i++) {
            dp[i] = dp[i - 1] + cardPoints[i - 1];
        }
        int ans = dp[k];
        for (int i = 1; i <= k; i++) {
            ans = Math.max(ans, dp[n] - dp[n - i] + dp[i - 1]);
        }
        return ans;

=======

        int len = cardPoints.length;
        int[] left = new int[k + 1];
        int[] right = new int[k + 1];
        for (int i = 0; i < k; i++) {
            left[i + 1] = left[i] + cardPoints[i];
            right[i + 1] = right[i] + cardPoints[len - i - 1];
        }
        int ans = 0;
        for (int i = 0; i <= k; i++) {
            ans = Math.max(ans, left[i] + right[k - i]);
        }
        return ans;

=======

        int sum = 0;
        for (int i = 0; i < cardPoints.length; i++) {
            sum += cardPoints[i];
        }
        int left = 0;
        int right = cardPoints.length - k;
        int min = Integer.MAX_VALUE;
        int cur = 0;
        while (right < cardPoints.length) {
            cur += cardPoints[left++];
            cur += cardPoints[right++];
            min = Math.min(min, cur);
            cur = 0;
        }
        return sum - min;

=======

        int sum = 0, left = 0, n = cardPoints.length;
        for (int i = 0; i < k; i++) {
            sum += cardPoints[i];
        }
        int max = sum;
        for (int i = 0; i < k; i++) {
            sum -= cardPoints[k - i - 1];
            sum += cardPoints[n - i - 1];
            max = Math.max(max, sum);
        }
        return max;

=======

        int max = 0;
        int j = cardPoints.length - 1;
        int temp = 0;
        for (int i = 0; i < k; i++) {
            temp += cardPoints[i];
        }
        max = temp;
        for (int i = 0; i < k; i++) {
            temp -= cardPoints[k - 1 - i];
            temp += cardPoints[j - i];
            max = Math.max(max, temp);
        }
        return max;
