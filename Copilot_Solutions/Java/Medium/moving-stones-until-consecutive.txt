Synthesizing 10/10 solutions

=======

        int[] stones = new int[]{a, b, c};
        Arrays.sort(stones);
        if (stones[1] - stones[0] == 1 && stones[2] - stones[1] == 1) {
            return new int[]{0, 0};
        }
        int min = 2;
        if (stones[1] - stones[0] <= 2 || stones[2] - stones[1] <= 2) {
            min = 1;
        }
        return new int[]{min, stones[2] - stones[0] - 2};

=======

        int[] ret = new int[2];
        int max = Math.max(a, Math.max(b, c));
        int min = Math.min(a, Math.min(b, c));
        int mid = a + b + c - max - min;
        if (max - min == 2) {
            ret[0] = 0;
        } else if (max - min == 1) {
            ret[0] = 1;
        } else if (max - min == 3) {
            ret[0] = 1;
        } else {
            ret[0] = 2;
        }
        ret[1] = max - mid - 1 + mid - min - 1;
        return ret;

=======

        int[] arr = new int[] {a, b, c};
        Arrays.sort(arr);
        a = arr[0];
        b = arr[1];
        c = arr[2];
        int min = 0;
        int max = 0;
        if (b - a == 1 && c - b == 1) {
            return new int[] {min, max};
        }
        if (b - a == 1 || c - b == 1 || b - a == 2 || c - b == 2) {
            min = 1;
        } else {
            min = 2;
        }
        max = c - a - 2;
        return new int[] {min, max};

=======

        int[] arr = new int[]{a, b, c};
        Arrays.sort(arr);
        int min = 0;
        if (arr[1] - arr[0] == 2 || arr[2] - arr[1] == 2) {
            min = 1;
        } else if (arr[1] - arr[0] > 2 && arr[2] - arr[1] > 2) {
            min = 2;
        }
        int max = arr[2] - arr[0] - 2;
        return new int[]{min, max};

=======

        int[] arr = {a, b, c};
        Arrays.sort(arr);
        int min = 2;
        if (arr[2] - arr[0] == 2) {
            min = 0;
        } else if (arr[1] - arr[0] <= 2 || arr[2] - arr[1] <= 2) {
            min = 1;
        }
        return new int[] {min, arr[2] - arr[0] - 2};

=======

        int[] arr = {a, b, c};
        Arrays.sort(arr);
        int min = 0;
        int max = 0;
        if (arr[1] - arr[0] == 1 && arr[2] - arr[1] == 1) {
            min = 0;
            max = 0;
        } else if (arr[1] - arr[0] == 1 || arr[2] - arr[1] == 1) {
            min = 1;
            max = arr[2] - arr[0] - 2;
        } else if (arr[1] - arr[0] == 2 || arr[2] - arr[1] == 2) {
            min = 1;
            max = arr[2] - arr[0] - 2;
        } else {
            min = 2;
            max = arr[2] - arr[0] - 2;
        }
        return new int[]{min, max};

=======

        int min, max;
        int[] arr = new int[3];
        arr[0] = a;
        arr[1] = b;
        arr[2] = c;
        Arrays.sort(arr);
        if(arr[0] + 1 == arr[1] && arr[1] + 1 == arr[2]){
            min = 0;
        }else if(arr[0] + 1 == arr[1] || arr[1] + 1 == arr[2]){
            min = 1;
        }else if(arr[0] + 2 == arr[1] || arr[1] + 2 == arr[2]){
            min = 1;
        }else{
            min = 2;
        }
        max = arr[2] - arr[0] - 2;
        return new int[]{min, max};

=======

        int[] arr = new int[]{a, b, c};
        Arrays.sort(arr);
        int min = 0, max = 0;
        if (arr[1] - arr[0] > 1) {
            min++;
            max += arr[1] - arr[0] - 1;
        }
        if (arr[2] - arr[1] > 1) {
            min++;
            max += arr[2] - arr[1] - 1;
        }
        if (min == 2 && max == 2) {
            min = 1;
        }
        return new int[]{min, max};

=======

        int[] arr = {a, b, c};
        Arrays.sort(arr);
        int min = 0, max = 0;
        if (arr[1] - arr[0] > 1) {
            min++;
            max += arr[1] - arr[0] - 1;
        }
        if (arr[2] - arr[1] > 1) {
            min++;
            max += arr[2] - arr[1] - 1;
        }
        if (arr[1] - arr[0] == 2 || arr[2] - arr[1] == 2) {
            min = 1;
        }
        return new int[]{min, max};

=======

        int[] arr = new int[]{a,b,c};
        Arrays.sort(arr);
        int min = 0;
        int max = 0;
        if (arr[1] - arr[0] == 1 && arr[2] - arr[1] == 1) {
            return new int[]{min, max};
        }
        if (arr[1] - arr[0] == 1 || arr[2] - arr[1] == 1) {
            min = 1;
        } else if (arr[1] - arr[0] == 2 || arr[2] - arr[1] == 2) {
            min = 1;
        } else {
            min = 2;
        }
        max = arr[2] - arr[0] - 2;
        return new int[]{min, max};
