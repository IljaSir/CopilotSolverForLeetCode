Synthesizing 10/10 solutions

=======

        int collision = 0;
        int left = 0;
        int right = 0;
        for (int i = 0; i < directions.length(); i++) {
            if (directions.charAt(i) == 'L') {
                left++;
            } else if (directions.charAt(i) == 'R') {
                right++;
            } else {
                collision += Math.min(left, right);
            }
        }
        return collision;

=======

        int n = directions.length();
        int[] left = new int[n];
        int[] right = new int[n];
        int l = 0, r = 0;
        for (int i = 0; i < n; i++) {
            if (directions.charAt(i) == 'L') {
                l++;
            }
            left[i] = l;
        }
        
        for (int i = n - 1; i >= 0; i--) {
            if (directions.charAt(i) == 'R') {
                r++;
            }
            right[i] = r;
        }
        
        int cnt = 0;
        for (int i = 0; i < n; i++) {
            if (directions.charAt(i) == 'S') {
                cnt += left[i] + right[i];
            }
        }
        return cnt;

=======

        int n = directions.length();
        int[] left = new int[n];
        int[] right = new int[n];
        int l = 0;
        int r = 0;
        for (int i = 0; i < n; i++) {
            if (directions.charAt(i) == 'L') {
                l++;
            } else if (directions.charAt(i) == 'R') {
                r++;
            }
            left[i] = l;
            right[i] = r;
        }
        int res = 0;
        for (int i = 0; i < n; i++) {
            if (directions.charAt(i) == 'L') {
                res += right[i];
            } else if (directions.charAt(i) == 'R') {
                res += left[i];
            }
        }
        return res;

=======

        int n = directions.length();
        int count = 0;
        int left = 0, right = 0;
        for (int i = 0; i < n; i++) {
            if (directions.charAt(i) == 'L') {
                left++;
            } else if (directions.charAt(i) == 'R') {
                right++;
            } else {
                count += Math.min(left, right);
            }
        }
        return count;

=======

        int n = directions.length();
        int[] left = new int[n];
        int[] right = new int[n];
        int ans = 0;
        for (int i = 0; i < n; i++) {
            if (directions.charAt(i) == 'L') {
                left[i] = 1;
            }
            if (i > 0) {
                left[i] += left[i - 1];
            }
        }
        for (int i = n - 1; i >= 0; i--) {
            if (directions.charAt(i) == 'R') {
                right[i] = 1;
            }
            if (i < n - 1) {
                right[i] += right[i + 1];
            }
        }
        for (int i = 0; i < n; i++) {
            if (directions.charAt(i) == 'S') {
                ans += left[i] + right[i];
            }
        }
        return ans;

=======

        int collisions = 0;
        int carCount = 0;
        for (int i = 0; i < directions.length(); i++) {
            if (directions.charAt(i) == 'L') {
                carCount++;
            } else if (directions.charAt(i) == 'R') {
                collisions += carCount;
            }
        }
        return collisions;

=======

        int n = directions.length();
        int ans = 0;
        int left = 0;
        int right = 0;
        for(int i = 0; i < n; i++) {
            char c = directions.charAt(i);
            if(c == 'L') {
                left++;
            } else if(c == 'R') {
                right++;
            } else {
                ans += Math.min(left, right);
                left = 0;
                right = 0;
            }
        }
        ans += Math.min(left, right);
        return ans;

=======

        int count = 0;
        int left = 0;
        int right = 0;
        int stationary = 0;
        for (char c : directions.toCharArray()) {
            if (c == 'L') {
                left++;
                count += right;
            } else if (c == 'R') {
                right++;
                count += stationary;
            } else {
                stationary++;
                count += right;
            }
        }
        return count;

=======

        int n = directions.length();
        int[] left = new int[n];
        int[] right = new int[n];
        int num = 0;
        for(int i = 0; i < n; i++) {
            char c = directions.charAt(i);
            if(c == 'L') {
                num += right[i];
            } else if(c == 'R') {
                num += left[i];
            }
            if(i > 0) {
                left[i] = left[i - 1];
                right[i] = right[i - 1];
            }
            if(c == 'L') {
                left[i]++;
            } else if(c == 'R') {
                right[i]++;
            }
        }
        return num;

=======

        int n = directions.length();
        int[] next = new int[n];
        Arrays.fill(next, -1);
        int count = 0;
        int i = 0;
        while (i < n) {
            if (directions.charAt(i) == 'S') {
                i++;
            } else {
                int j = i + 1;
                while (j < n && directions.charAt(j) == 'S') {
                    j++;
                }
                if (j == n) {
                    break;
                }
                if (directions.charAt(i) == directions.charAt(j)) {
                    i = j;
                } else {
                    count += 2;
                    i = j + 1;
                }
            }
        }
        return count;
