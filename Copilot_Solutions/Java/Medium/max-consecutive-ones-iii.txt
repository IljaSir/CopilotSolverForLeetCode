Synthesizing 10/10 solutions

=======

        int left = 0;
        int right = 0;
        int max = 0;
        int zeroCount = 0;
        while (right < nums.length) {
            if (nums[right] == 0) {
                zeroCount++;
            }
            while (zeroCount > k) {
                if (nums[left] == 0) {
                    zeroCount--;
                }
                left++;
            }
            max = Math.max(max, right - left + 1);
            right++;
        }
        return max;

=======

        int left = 0;
        int right = 0;
        int zeroCount = 0;
        int max = 0;
        while (right < nums.length) {
            if (nums[right] == 0) {
                zeroCount++;
            }
            if (zeroCount > k) {
                if (nums[left] == 0) {
                    zeroCount--;
                }
                left++;
            }
            max = Math.max(max, right - left + 1);
            right++;
        }
        return max;

=======

        int i = 0;
        int j = 0;
        int count = 0;
        int max = 0;
        while (j < nums.length) {
            if (nums[j] == 0) {
                count++;
            }
            while (count > k) {
                if (nums[i] == 0) {
                    count--;
                }
                i++;
            }
            max = Math.max(max, j - i + 1);
            j++;
        }
        return max;

=======

        int n = nums.length;
        int l = 0, r = 0;
        int max = 0;
        while (r < n) {
            if (nums[r] == 0) {
                k--;
            }
            while (k < 0) {
                if (nums[l] == 0) {
                    k++;
                }
                l++;
            }
            max = Math.max(max, r - l + 1);
            r++;
        }
        return max;

=======

        int left = 0, right = 0;
        int max = 0;
        int count = 0;
        while (right < nums.length) {
            if (nums[right] == 0) {
                count++;
            }
            right++;
            while (count > k) {
                if (nums[left] == 0) {
                    count--;
                }
                left++;
            }
            max = Math.max(max, right - left);
        }
        return max;

=======

        int n = nums.length;
        int left = 0;
        int right = 0;
        int zeroCount = 0;
        int max = 0;
        while (right < n) {
            if (nums[right] == 0) {
                zeroCount++;
            }
            while (zeroCount > k) {
                if (nums[left] == 0) {
                    zeroCount--;
                }
                left++;
            }
            max = Math.max(max, right - left + 1);
            right++;
        }
        return max;

=======

        int n = nums.length;
        int ans = 0;
        int left = 0, right = 0;
        int zeroCount = 0;
        while (right < n) {
            if (nums[right] == 0) {
                zeroCount++;
            }
            while (zeroCount > k) {
                if (nums[left] == 0) {
                    zeroCount--;
                }
                left++;
            }
            ans = Math.max(ans, right - left + 1);
            right++;
        }
        return ans;

=======

        int i = 0;
        int j = 0;
        int res = 0;
        int n = nums.length;
        while (j < n) {
            if (nums[j] == 0) {
                k--;
            }
            while (k < 0) {
                if (nums[i] == 0) {
                    k++;
                }
                i++;
            }
            res = Math.max(res, j - i + 1);
            j++;
        }
        return res;

=======

        int i = 0, j = 0, n = nums.length, max = 0, z = 0;
        while (j < n) {
            if (nums[j] == 0) {
                z++;
            }
            while (z > k) {
                if (nums[i] == 0) {
                    z--;
                }
                i++;
            }
            max = Math.max(max, j - i + 1);
            j++;
        }
        return max;

=======

        int n = nums.length;
        int[] count = new int[n];
        int i = 0;
        int j = 0;
        int max = 0;
        int sum = 0;
        while (j < n) {
            if (nums[j] == 0) {
                count[i] = j - i;
                i = j + 1;
                sum++;
            }
            j++;
            if (sum > k) {
                max = Math.max(max, j - i);
                i += count[i];
                sum--;
            }
        }
        max = Math.max(max, j - i);
        return max;
