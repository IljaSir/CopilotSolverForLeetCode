Synthesizing 10/10 solutions

=======

        long[] result = new long[3];
        if (num < 3) {
            return new long[0];
        }
        if (num % 3 == 0) {
            result[0] = num / 3 - 1;
            result[1] = num / 3;
            result[2] = num / 3 + 1;
        } else if (num % 3 == 1) {
            result[0] = num / 3 - 1;
            result[1] = num / 3;
            result[2] = num / 3 + 1;
        } else {
            result[0] = num / 3;
            result[1] = num / 3 + 1;
            result[2] = num / 3 + 2;
        }
        return result;

=======

        long[] result = new long[3];
        long sum = 0;
        for (int i = 0; i < 3; i++) {
            result[i] = num - i;
            sum += result[i];
        }
        if (sum == num) {
            return result;
        }
        return new long[0];

=======

        long[] result = new long[3];
        long a = num / 3;
        if (num % 3 == 0) {
            result[0] = a - 1;
            result[1] = a;
            result[2] = a + 1;
        } else if (num % 3 == 1) {
            result[0] = a - 1;
            result[1] = a;
            result[2] = a + 2;
        } else {
            result[0] = a;
            result[1] = a + 1;
            result[2] = a + 2;
        }
        return result;

=======

        long[] result = new long[3];
        long sum = 0;
        for (int i = 0; i < 3; i++) {
            result[i] = num - (2 - i);
            sum += result[i];
        }
        return sum == num ? result : new long[0];

=======

        long[] res = new long[3];
        long a = (num - 1) / 3;
        long b = (num - 2) / 3;
        long c = (num - 3) / 3;
        if (a * 3 + 1 == num) {
            res[0] = a;
            res[1] = a + 1;
            res[2] = a + 2;
            return res;
        }
        if (b * 3 + 2 == num) {
            res[0] = b;
            res[1] = b + 1;
            res[2] = b + 2;
            return res;
        }
        if (c * 3 + 3 == num) {
            res[0] = c;
            res[1] = c + 1;
            res[2] = c + 2;
            return res;
        }
        return new long[0];

=======

        if (num < 3) {
            return new long[0];
        }
        long[] result = new long[3];
        long a = num / 3;
        long b = a + 1;
        long c = b + 1;
        if (a + b + c == num) {
            result[0] = a;
            result[1] = b;
            result[2] = c;
        }
        return result;

=======

        long[] res = new long[3];
        long n = num - 6;
        if (n > 0 && n % 3 == 0) {
            res[0] = n / 3;
            res[1] = res[0] + 1;
            res[2] = res[1] + 1;
        }
        return res;

=======

        
        long[] res = new long[3];
        for (int i = 0; i < 3; i++) {
            res[i] = num - i;
        }
        return res;

=======

        long[] result = new long[3];
        if (num < 3) {
            return new long[0];
        }
        long sum = num - 3;
        long i = 1;
        while (sum > 0) {
            sum -= i;
            i++;
        }
        if (sum == 0) {
            result[0] = i - 1;
            result[1] = i;
            result[2] = i + 1;
        } else {
            result[0] = i - 2;
            result[1] = i - 1;
            result[2] = i;
        }
        return result;

=======

        long [] result = new long[3];
        if (num < 3) {
            return new long[0];
        }
        long sum = 0;
        long start = num / 3;
        long end = num / 3 + 3;
        long mid = (start + end) / 2;
        while (start <= end) {
            sum = mid * (mid + 1) * (mid + 2) / 6;
            if (sum == num) {
                result[0] = mid;
                result[1] = mid + 1;
                result[2] = mid + 2;
                return result;
            } else if (sum > num) {
                end = mid - 1;
                mid = (start + end) / 2;
            } else {
                start = mid + 1;
                mid = (start + end) / 2;
            }
        }
        return new long[0];
