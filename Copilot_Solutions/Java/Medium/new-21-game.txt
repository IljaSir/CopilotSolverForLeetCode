Synthesizing 10/10 solutions

=======

        if (k == 0 || n >= k + maxPts) {
            return 1.0;
        }
        double[] dp = new double[n + 1];
        dp[0] = 1.0;
        double W = 0.0;
        for (int i = 1; i <= n; ++i) {
            dp[i] = W / maxPts;
            if (i < k) {
                W += dp[i];
            }
            if (i - maxPts >= 0) {
                W -= dp[i - maxPts];
            }
        }
        double ans = 0.0;
        for (int i = k; i <= n; ++i) {
            ans += dp[i];
        }
        return ans;

=======

        if (k == 0 || n >= k + maxPts) {
            return 1.0;
        }
        double[] dp = new double[n + 1];
        dp[0] = 1.0;
        double W = 1.0;
        for (int i = 1; i <= n; i++) {
            dp[i] = W / maxPts;
            if (i < k) {
                W += dp[i];
            }
            if (i - maxPts >= 0) {
                W -= dp[i - maxPts];
            }
        }
        double ans = 0.0;
        for (int i = k; i <= n; i++) {
            ans += dp[i];
        }
        return ans;

=======

        if (k == 0 || n >= k + maxPts) {
            return 1.0;
        }
        double[] dp = new double[n + 1];
        dp[0] = 1.0;
        double W = Math.min(n - k + 1, maxPts);
        double sum = 1.0;
        for (int i = 1; i <= n; i++) {
            dp[i] = sum / W;
            if (i < k) {
                sum += dp[i];
            } else {
                sum += dp[i] - dp[i - maxPts];
            }
        }
        return dp[n];

=======

        if (k == 0 || n >= k + maxPts) {
            return 1.0;
        }
        double[] dp = new double[n + 1];
        dp[0] = 1.0;
        double sum = 1.0;
        for (int i = 1; i <= n; i++) {
            dp[i] = sum / maxPts;
            if (i < k) {
                sum += dp[i];
            } else {
                sum += dp[i] - dp[i - maxPts];
            }
        }
        return sum;

=======

        if (k == 0 || n >= k + maxPts) {
            return 1.0;
        }
        double[] dp = new double[n + 1];
        dp[0] = 1.0;
        double W = Math.min(n - k + 1, maxPts);
        double sum = 1.0;
        for (int i = 1; i <= n; i++) {
            dp[i] = sum / W;
            if (i < k) {
                sum += dp[i];
            } else {
                sum += dp[i] - dp[i - maxPts];
            }
        }
        return dp[n];

=======

        if (k == 0 || n >= k + maxPts) {
            return 1.0;
        }
        double[] dp = new double[n + 1];
        dp[0] = 1.0;
        double sum = 1.0;
        for (int i = 1; i <= n; i++) {
            dp[i] = sum / maxPts;
            if (i < k) {
                sum += dp[i];
            } else {
                sum += dp[i] - dp[i - maxPts];
            }
        }
        return sum;

=======

        if (k == 0 || n >= k + maxPts) {
            return 1.0;
        };

=======

        if (k == 0 || n >= k + maxPts) {
            return 1;
        }
        double[] dp = new double[n + 1];
        dp[0] = 1;
        double sum = 1;
        for (int i = 1; i <= n; i++) {
            dp[i] = sum / maxPts;
            if (i < k) {
                sum += dp[i];
            }
            if (i - maxPts >= 0) {
                sum -= dp[i - maxPts];
            }
        }
        double res = 0;
        for (int i = k; i <= n; i++) {
            res += dp[i];
        }
        return res;

=======

        if (k == 0 || n >= k + maxPts) return 1;
        double[] dp = new double[n + 1];
        dp[0] = 1;
        double W = Math.min(n - k + 1, maxPts);
        for (int i = 1; i <= n; i++) {
            dp[i] = dp[i - 1] / W;
            if (i < k) dp[i] += dp[i - 1];
            else dp[i] += dp[i - 1] - dp[i - maxPts - 1] / W;
        }
        return dp[n];

=======

        if (k == 0) {
            return 1;
        }
        double[] dp = new double[n + 1];
        dp[0] = 1;
        double sum = 1;
        for (int i = 1; i <= n; i++) {
            dp[i] = sum / maxPts;
            if (i < k) {
                sum += dp[i];
            } else {
                sum += dp[i] - dp[i - maxPts];
            }
        }
        double result = 0;
        for (int i = k; i <= n; i++) {
            result += dp[i];
        }
        return result
        double[] dp = new double[n + 1];
        dp[0] = 1.0;
        double W = 1.0;
        for (int i = 1; i <= n; ++i) {
            dp[i] = W / maxPts;
            if (i < k) {
                W += dp[i];
            } else {
                W += dp[i] - dp[i - maxPts];
            }
        }
        double ans = 0.0;
        for (int i = k; i <= n; ++i) {
            ans += dp[i];
        }
        return ans;

=======

        if (k == 0 || n >= k + maxPts) {
            return 1;
        }
        double[] dp = new double[n + 1];
        dp[0] = 1;
        double W = 1, res = 0;
        for (int i = 1; i <= n; i++) {
            dp[i] = W / maxPts;
            if (i < k) {
                W += dp[i];
            } else {
                res += dp[i];
            }
            if (i - maxPts >= 0) {
                W -= dp[i - maxPts];
            }
        }
        return res;

=======

        if (k == 0 || n >= k + maxPts) {
            return 1;
        }
        double[] dp = new double[n + 1];
        dp[0] = 1;
        double sum = 1;
        for (int i = 1; i <= n; i++) {
            dp[i] = sum / maxPts;
            if (i < k) {
                sum += dp[i];
            }
            if (i - maxPts >= 0) {
                sum -= dp[i - maxPts];
            }
        }
        double res = 0;
        for (int i = k; i <= n; i++) {
            res += dp[i];
        }
        return res;

=======

        if (k == 0 || n >= k + maxPts) return 1;
        double[] dp = new double[n + 1];
        dp[0] = 1;
        double W = Math.min(n - k + 1, maxPts);
        for (int i = 1; i <= n; i++) {
            dp[i] = dp[i - 1] / W;
            if (i < k) dp[i] += dp[i - 1];
            else dp[i] += dp[i - 1] - dp[i - maxPts - 1] / W;
        }
        return dp[n];

=======

        if (k == 0) {
            return 1;
        }
        double[] dp = new double[n + 1];
        dp[0] = 1;
        double sum = 1;
        for (int i = 1; i <= n; i++) {
            dp[i] = sum / maxPts;
            if (i < k) {
                sum += dp[i];
            } else {
                sum += dp[i] - dp[i - maxPts];
            }
        }
        double result = 0;
        for (int i = k; i <= n; i++) {
            result += dp[i];
        }
        return result;

=======

        if (k==0 || n>=k+maxPts) return 1.0;
        double[] dp = new double[n+1];
        dp[0] = 1.0;
        double W = 1.0;
        for (int i=1; i<=n; i++) {
            dp[i] = W/maxPts;
            if (i<k) W += dp[i];
            else W += dp[i] - dp[i-maxPts];
        }
        double res = 0.0;
        for (int i=k; i<=n; i++) res += dp[i];
        return res;
