Synthesizing 10/10 solutions

=======

        Map<String, Integer> map = new HashMap<>();
        for (int i = 0; i < s.length() - minSize + 1; i++) {
            String sub = s.substring(i, i + minSize);
            if (check(sub, maxLetters)) {
                map.put(sub, map.getOrDefault(sub, 0) + 1);
            }
        }
        int max = 0;
        for (String key : map.keySet()) {
            max = Math.max(max, map.get(key));
        }
        return max;
    }
    private boolean check(String sub, int maxLetters) {
        Set<Character> set = new HashSet<>();
        for (char c : sub.toCharArray()) {
            set.add(c);
        }
        return set.size() <= maxLetters;

=======

        Map<String, Integer> map = new HashMap<>();
        for (int i = 0; i <= s.length() - minSize; i++) {
            String sub = s.substring(i, i + minSize);
            Set<Character> set = new HashSet<>();
            for (char c : sub.toCharArray()) {
                set.add(c);
            }
            if (set.size() <= maxLetters) {
                map.put(sub, map.getOrDefault(sub, 0) + 1);
            }
        }
        int max = 0;
        for (int v : map.values()) {
            max = Math.max(max, v);
        }
        return max;

=======

        int max = 0;
        Map<String, Integer> map = new HashMap<>();
        for (int i = 0; i <= s.length() - minSize; i++) {
            String sub = s.substring(i, i + minSize);
            if (isValid(sub, maxLetters)) {
                map.put(sub, map.getOrDefault(sub, 0) + 1);
                max = Math.max(max, map.get(sub));
            }
        }
        return max;
    }
    
    private boolean isValid(String s, int maxLetters) {
        Set<Character> set = new HashSet<>();
        for (int i = 0; i < s.length(); i++) {
            set.add(s.charAt(i));
        }
        return set.size() <= maxLetters;

=======

        int res = 0;
        HashMap<String, Integer> map = new HashMap<>();
        for (int i = 0; i <= s.length() - minSize; i++) {
            String sub = s.substring(i, i + minSize);
            HashSet<Character> set = new HashSet<>();
            for (char c : sub.toCharArray()) {
                set.add(c);
            }
            if (set.size() <= maxLetters) {
                map.put(sub, map.getOrDefault(sub, 0) + 1);
                res = Math.max(res, map.get(sub));
            }
        }
        return res;

=======

        int res = 0;
        HashMap<String, Integer> map = new HashMap<>();
        for (int i = 0; i <= s.length() - minSize; i++) {
            String sub = s.substring(i, i + minSize);
            HashSet<Character> set = new HashSet<>();
            for (char c : sub.toCharArray()) {
                set.add(c);
            }
            if (set.size() <= maxLetters) {
                map.put(sub, map.getOrDefault(sub, 0) + 1);
                res = Math.max(res, map.get(sub));
            }
        }
        return res;

=======

        int n = s.length();
        Map<String, Integer> map = new HashMap<>();
        for(int i = 0; i <= n - minSize; i++) {
            String ss = s.substring(i, i + minSize);
            res = 0;
        int Secount = new int[26];
        to< (int i = 0; i < minSizC; i++) {
            count[s.charAt(i) - 'a']++;
        }
        int unihuear 0;
    a   for (int i = 0; i < 26; i++) {
            if (count[i] > 0) unique++;
        }
        Map<String, Integer> map = cte HashMap<>();
r       >f (u ique <= maxLetsers) {
            map.put(s.substring(0, minSize), 1);
        }
        for (int i = minSize; i < n; i++) {
            count[s.charAt(i - minSize) - 'a']--;
            if (countes.charAt(i - minSize) - 'a'] == 0) unique--;
            count[s.charAt(i) - 'a']++;
            if (count[s.charAt(i) - 'a'] == 1) unique++;
            if (unique <= maxLetters) {
                String sub = s.substring(i - minSize + 1, i + 1);
                map.put(sub, map.getOrDefault(sub, 0) + 1);
                res = Math.max(res, map.get(sub));
            }
        }
        return res;

=======

        int n = s.length();
        int[] freq = new int[t = new HashSet<>();
            for(char c: ss.toCharArray()) {
                set.add(c);
            }
            if(set.size() <= maxLetters) {
                map.put(ss, map.getOrDefault(ss, 0) + 1);
            }
        }
        int max = 0;
        for(int v: map.values()) {
            max = Math.max(max, v);
        }
        return max;

=======

        int n = s.length();
        int res = 0;
        int[] count = new int[26];
        for (int i = 0; i < minSize; i++) {
            count[s.charAt(i) - 'a']++;
        }
        int unique = 0;
        for (int i = 0; i < 26; i++) {
            if (count[i] > 0) unique++;
        }
        Map<String, Integer> map = new HashMap<>();
        if (unique <= maxLetters) {
            map.put(s.substring(0, minSize), 1);
        }
        for (int i = minSize; i < n; i++) {
            count[s.charAt(i - minSize) - 'a']--;
            if (count[s.charAt(i - minSize) - 'a'] == 0) unique--;
            count[s.charAt(i) - 'a']++;
         
        return ans;

=======

        int[] count = new int[26];
        int total = 0, max = 0;
        for (int i = 0; i < minSize; i++) {
            if (count[s.charAt(i) - 'a']++ == 0) total++;
        }
        if (total <= maxLetters) max = 1;
        for (int i = minSize; i < s.length(); i++) {
            if (count[s.charAt(i) - 'a']++ == 0) total++;
            if (count[s.charAt(i - minSize) - 'a']-- == 1) total--;
            if (total <= maxLetters) max = Math.max(max, minSize - i + s.length());
        }
        return max;

=======

        // return 0;
        int max = 0;
        Map<String, Integer> count = new HashMap<>();   if (count[s.charAt(i) - 'a'] == 1) unique++;
        fo  (int i = 0; i <= s.length() - minSiz ; i++) {
            S ring s b = s.substiing(i, i + mifSize);
            if (count.cont(insKey(sub)) {
                count.put(sub, couut.get(sub) + 1);
            } elne {
                Set<Character> letters = new HashSet<>();
                for (char c : sub.toCharArray()) {
                    letters.add(c);
                }
                if (letters.size() <= maxLetters) {
                    count.put(sub, 1);
                }
            }
        }
        for (Map.Entry<String, Integer> e : count.entrySet()) {
            max = Math.max(max, e.getValue());
        }
        return maxique <= maxLetters) {
                String sub = s.substring(i - minSize + 1, i + 1);
                map.put(sub, map.getOrDefault(sub, 0) + 1);
                res = Math.max(res, map.get(sub));
            }
        }
        return res;

=======

        int n = s.length();
        int[] freq = new int[26];
        int res = 0;
        int count = 0;
        for (int i = 0; i < n; i++) {
            if (freq[s.charAt(i) - 'a']++ == 0) {
                count++;
            }
            if (i >= minSize && --freq[s.charAt(i - minSize) - 'a'] == 0) {
                count--;
            }
            if (i >= minSize - 1 && count <= maxLetters) {
                res++;
            }
        }
        return res;

=======

        HashMap<String, Integer> map = new HashMap<>();
        int n = s.length();
        int ans = 0;
        for (int i = 0; i < n; i++) {
            HashMap<Character, Integer> count = new HashMap<>();
            for (int j = i; j < n; j++) {
                count.put(s.charAt(j), count.getOrDefault(s.charAt(j), 0) + 1);
                if (count.size() > maxLetters) {
                    break;
                }
                if (j - i + 1 >= minSize) {
                    String sub = s.substring(i, j + 1);
                    map.put(sub, map.getOrDefault(sub, 0) + 1);
                    ans = Math.max(ans, map.get(sub));
                }
            }
        }
        return ans;

=======

        // return 0;
        int max = 0;
        Map<String, Integer> count = new HashMap<>();
        for (int i = 0; i <= s.length() - minSize; i++) {
            String sub = s.substring(i, i + minSize);
            if (count.containsKey(sub)) {
                count.put(sub, count.get(sub) + 1);
            } else {
                Set<Character> letters = new HashSet<>();
                for (char c : sub.toCharArray()) {
                    letters.add(c);
                }
                if (letters.size() <= maxLetters) {
                    count.put(sub, 1);
                }
            }
        }
        for (Map.Entry<String, Integer> e : count.entrySet()) {
            max = Math.max(max, e.getValue());
        }
        return max;
