Synthesizing 9/10 solutions

=======

        int[] dp = new int[n + 1];
        dp[1] = 1;
        for (int i = 2; i <= n; i++) {
            dp[i] = dp[i - 1] + dp[i - delay];
            if (i > forget) {
                dp[i] -= dp[i - forget - 1];
            }
            dp[i] = (dp[i] + 1000000007) % 1000000007;
        }
        return dp[n];

=======

        int[] dp = new int[n + 1];
        dp[1] = 1;
        for (int i = 2; i <= n; i++) {
            dp[i] = dp[i - 1];
            if (i - delay - forget >= 0) {
                dp[i] = (dp[i] + dp[i - delay - forget]) % 1000000007;
            } else {
                dp[i] = (dp[i] + 1) % 1000000007;
            }
        }
        return dp[n];

=======

        int[] dp = new int[n + 1];
        dp[1] = 1;
        for (int i = 2; i <= n; i++) {
            dp[i] = dp[i - 1] + dp[i - delay];
            if (i > forget) {
                dp[i] -= dp[i - forget - 1];
            }
            dp[i] = dp[i] % (int) (Math.pow(10, 9) + 7);
        }
        return dp[n];

=======

        int[] dp = new int[n + 1];
        dp[1] = 1;
        for (int i = 2; i <= n; i++) {
            dp[i] = (dp[i - 1] + dp[i - delay]) % 1000000007;
            if (i > forget) {
                dp[i] = (dp[i] - dp[i - forget - 1] + 1000000007) % 1000000007;
            }
        }
        return dp[n];

=======

        int mod = 1000000007;
        long[] dp = new long[n + 1];
        dp[1] = 1;
        for (int i = 2; i <= n; i++) {
            dp[i] = (dp[i - 1] + dp[i - 1] - ((i - forget - 1 >= 0) ? dp[i - forget - 1] : 0) + mod) % mod;
            if (i > delay) {
                dp[i] = (dp[i] + dp[i - delay]) % mod;
            }
        }
        return (int) dp[n];

=======

        int mod = (int)1e9 + 7;
        int[] dp = new int[n + 1];
        dp[1] = 1;
        for (int i = 2; i <= n; i++) {
            if (i <= delay) {
                dp[i] = (dp[i - 1] + 1) % mod;
            } else {
                dp[i] = (dp[i - 1] + dp[i - delay] - (i - forget - 1 >= 0 ? dp[i - forget - 1] : 0) + mod) % mod;
            }
        }
        return dp[n];

=======

        long mod = (long)1e9 + 7;
        long[] dp = new long[n + 1];
        dp[1] = 1;
        for (int i = 2; i <= n; i++) {
            dp[i] = (dp[i - 1] + dp[i - delay]) % mod;
            if (i > forget) {
                dp[i] = (dp[i] - dp[i - forget - 1] + mod) % mod;
            }
        }
        return (int)dp[n];

=======

        int[] dp = new int[n + 1];
        int mod = 1000000007;
        dp[1] = 1;
        for (int i = 2; i <= n; i++) {
            dp[i] = (dp[i - 1] + dp[i - delay]) % mod;
            if (i - delay - forget > 0) {
                dp[i] = (dp[i] - dp[i - delay - forget] + mod) % mod;
            }
        }
        return dp[n];

=======

        int[] dp = new int[n];
        dp[0] = 1;
        for (int i = 1; i < n; i++) {
            int j = i - delay;
            if (j < 0) {
                dp[i] = dp[i - 1];
            } else {
                dp[i] = dp[i - 1] * 2 - dp[j];
                if (j - forget >= 0) {
                    dp[i] -= dp[j - forget];
                }
                dp[i] = (dp[i] + 1000000007) % 1000000007;
            }
        }
        return dp[n - 1];
