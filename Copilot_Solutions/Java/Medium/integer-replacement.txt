Synthesizing 10/10 solutions

=======

        if (n == 1) {
            return 0;
        }
        if (n % 2 == 0) {
            return integerReplacement(n / 2) + 1;
        } else {
            return Math.min(integerReplacement(n + 1), integerReplacement(n - 1)) + 1;
        }

=======

        if (n == 1) {
            return 0;
        }
        if (n == Integer.MAX_VALUE) {
            return 32;
        }
        if (n % 2 == 0) {
            return 1 + integerReplacement(n / 2);
        } else {
            return 1 + Math.min(integerReplacement(n + 1), integerReplacement(n - 1));
        }

=======

        if (n == 1) {
            return 0;
        }
        if (n % 2 == 0) {
            return 1 + integerReplacement(n / 2);
        }
        return 1 + Math.min(integerReplacement(n - 1), integerReplacement(n + 1));

=======

        if (n == Integer.MAX_VALUE) return 32;
        int count = 0;
        while (n != 1) {
            if (n % 2 == 0) {
                n /= 2;
            } else {
                if ((n + 1) % 4 == 0 && n != 3) {
                    n += 1;
                } else {
                    n -= 1;
                }
            }
            count++;
        }
        return count;

=======

        if (n == 1) return 0;
        if (n % 2 == 0) {
            return 1 + integerReplacement(n / 2);
        } else {
            return 2 + Math.min(integerReplacement((n + 1) / 2), integerReplacement((n - 1) / 2));
        }

=======

        int count = 0;
        while (n > 1) {
            if ((n & 1) == 0) {
                n >>= 1;
            } else if (n == 3 || ((n >> 1) & 1) == 0) {
                n--;
            } else {
                n++;
            }
            count++;
        }
        return count;

=======

        int res = 0;
        while (n != 1) {
            if (n % 2 == 0) {
                n /= 2;
            } else if (n == 3 || Integer.bitCount(n + 1) > Integer.bitCount(n - 1)) {
                n -= 1;
            } else {
                n += 1;
            }
            res++;
        }
        return res;

=======

        int count = 0;
        while (n != 1) {
            if (n % 2 == 0) {
                n >>= 1;
            } else if (n == 3 || Integer.bitCount(n + 1) > Integer.bitCount(n - 1)) {
                --n;
            } else {
                ++n;
            }
            ++count;
        }
        return count;

=======

        int count = 0;
        while (n > 1) {
            if (n % 2 == 0) {
                n = n / 2;
            } else {
                if (n == 3 || (n + 1) % 4 == 0) {
                    n = n - 1;
                } else {
                    n = n + 1;
                }
            }
            count++;
        }
        return count;

=======

        int count = 0;
        long N = n;
        while (N != 1) {
            if (N % 2 == 0) {
                N /= 2;
            } else {
                if ((N + 1) % 4 == 0 && N != 3) {
                    N += 1;
                } else {
                    N -= 1;
                }
            }
            count++;
        }
        return count;
