Synthesizing 10/10 solutions

=======

        int[] degree = new int[n];
        boolean[][] connected = new boolean[n][n];
        for (int[] road : roads) {
            degree[road[0]]++;
            degree[road[1]]++;
            connected[road[0]][road[1]] = true;
            connected[road[1]][road[0]] = true;
        }
        int max = 0;
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                int share = connected[i][j] ? 1 : 0;
                max = Math.max(max, degree[i] + degree[j] - share);
            }
        }
        return max;

=======

        int[] degree = new int[n];
        boolean[][] connected = new boolean[n][n];
        for (int[] road : roads) {
            degree[road[0]]++;
            degree[road[1]]++;
            connected[road[0]][road[1]] = true;
            connected[road[1]][road[0]] = true;
        }
        int max = 0;
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                max = Math.max(max, degree[i] + degree[j] - (connected[i][j] ? 1 : 0));
            }
        }
        return max;

=======

        int[] count = new int[n];
        boolean[][] connected = new boolean[n][n];
        for (int[] road : roads) {
            count[road[0]]++;
            count[road[1]]++;
            connected[road[0]][road[1]] = true;
            connected[road[1]][road[0]] = true;
        }
        int res = 0;
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                int tmp = count[i] + count[j];
                if (connected[i][j]) tmp--;
                res = Math.max(res, tmp);
            }
        }
        return res;

=======

        int[] count = new int[n];
        boolean[][] connected = new boolean[n][n];
        for (int[] road : roads) {
            count[road[0]]++;
            count[road[1]]++;
            connected[road[0]][road[1]] = true;
            connected[road[1]][road[0]] = true;
        }
        int max = 0;
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                max = Math.max(max, count[i] + count[j] - (connected[i][j] ? 1 : 0));
            }
        }
        return max;

=======

        int[] degree = new int[n];
        int[][] connected = new int[n][n];
        for (int[] road : roads) {
            degree[road[0]]++;
            degree[road[1]]++;
            connected[road[0]][road[1]] = 1;
            connected[road[1]][road[0]] = 1;
        }
        int max = 0;
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                max = Math.max(max, degree[i] + degree[j] - connected[i][j]);
            }
        }
        return max;

=======

        int[] rank = new int[n];
        int[][] connected = new int[n][n];
        for (int[] road : roads) {
            rank[road[0]]++;
            rank[road[1]]++;
            connected[road[0]][road[1]] = 1;
            connected[road[1]][road[0]] = 1;
        }
        int max = 0;
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                int sum = rank[i] + rank[j];
                if (connected[i][j] == 1) {
                    sum--;
                }
                max = Math.max(max, sum);
            }
        }
        return max;

=======

        int[] count = new int[n];
        int[][] connect = new int[n][n];
        for (int[] road : roads) {
            count[road[0]]++;
            count[road[1]]++;
            connect[road[0]][road[1]] = 1;
            connect[road[1]][road[0]] = 1;
        }
        int max = 0;
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                max = Math.max(max, count[i] + count[j] - connect[i][j]);
            }
        }
        return max;

=======

        int[] degree = new int[n];
        boolean[][] connected = new boolean[n][n];
        for (int i = 0; i < roads.length; i++) {
            int[] road = roads[i];
            degree[road[0]]++;
            degree[road[1]]++;
            connected[road[0]][road[1]] = true;
            connected[road[1]][road[0]] = true;
        }
        int max = 0;
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                int rank = degree[i] + degree[j];
                if (connected[i][j]) {
                    rank--;
                }
                max = Math.max(max, rank);
            }
        }
        return max;

=======

        int[] count = new int[n];
        int[][] connect = new int[n][n];
        int max = 0;
        for (int[] road : roads) {
            count[road[0]]++;
            count[road[1]]++;
            connect[road[0]][road[1]] = 1;
            connect[road[1]][road[0]] = 1;
        }
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                max = Math.max(max, count[i] + count[j] - connect[i][j]);
            }
        }
        return max;

=======

        int[] roadCount = new int[n];
        boolean[][] road = new boolean[n][n];
        for (int[] r : roads) {
            roadCount[r[0]]++;
            roadCount[r[1]]++;
            road[r[0]][r[1]] = true;
            road[r[1]][r[0]] = true;
        }
        int max = 0;
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                int count = roadCount[i] + roadCount[j];
                if (road[i][j]) {
                    count--;
                }
                max = Math.max(max, count);
            }
        }
        return max;
