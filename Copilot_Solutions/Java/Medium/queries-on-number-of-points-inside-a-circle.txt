Synthesizing 10/10 solutions

=======

        int[] result = new int[queries.length];
        for (int i = 0; i < queries.length; i++) {
            int count = 0;
            for (int j = 0; j < points.length; j++) {
                int distance = (int) Math.sqrt(Math.pow(points[j][0] - queries[i][0], 2) + Math.pow(points[j][1] - queries[i][1], 2));
                if (distance <= queries[i][2]) {
                    count++;
                }
            }
            result[i] = count;
        }
        return result;

=======

        int[] res = new int[queries.length];
        for (int i = 0; i < queries.length; i++) {
            int x = queries[i][0];
            int y = queries[i][1];
            int r = queries[i][2];
            int count = 0;
            for (int j = 0; j < points.length; j++) {
                int x1 = points[j][0];
                int y1 = points[j][1];
                if ((x1 - x) * (x1 - x) + (y1 - y) * (y1 - y) <= r * r) {
                    count++;
                }
            }
            res[i] = count;
        }
        return res;

=======

        int[] res = new int[queries.length];
        for (int i = 0; i < queries.length; i++) {
            int count = 0;
            for (int j = 0; j < points.length; j++) {
                if (Math.pow(points[j][0] - queries[i][0], 2) + Math.pow(points[j][1] - queries[i][1], 2) <= Math.pow(queries[i][2], 2)) {
                    count++;
                }
            }
            res[i] = count;
        }
        return res;

=======

        int[] ans = new int[queries.length];
        for (int i = 0; i < queries.length; i++) {
            int count = 0;
            for (int j = 0; j < points.length; j++) {
                int x = points[j][0];
                int y = points[j][1];
                int x0 = queries[i][0];
                int y0 = queries[i][1];
                int r = queries[i][2];
                int dist = (x - x0) * (x - x0) + (y - y0) * (y - y0);
                if (dist <= r * r) {
                    count++;
                }
            }
            ans[i] = count;
        }
        return ans;

=======

        int[] ans = new int[queries.length];
        for (int i = 0; i < queries.length; i++) {
            int count = 0;
            for (int j = 0; j < points.length; j++) {
                if (Math.pow(points[j][0] - queries[i][0], 2) + Math.pow(points[j][1] - queries[i][1], 2) <= Math.pow(queries[i][2], 2)) {
                    count++;
                }
            }
            ans[i] = count;
        }
        return ans;

=======

        int[] res = new int[queries.length];
        for (int i = 0; i < queries.length; i++) {
            int x = queries[i][0], y = queries[i][1], r = queries[i][2];
            int cnt = 0;
            for (int[] point : points) {
                if (Math.pow(point[0] - x, 2) + Math.pow(point[1] - y, 2) <= Math.pow(r, 2)) {
                    cnt++;
                }
            }
            res[i] = cnt;
        }
        return res;

=======

        int[] ans = new int[queries.length];
        for (int i = 0; i < queries.length; i++) {
            int count = 0;
            for (int[] point : points) {
                if (Math.sqrt(Math.pow(point[0] - queries[i][0], 2) + Math.pow(point[1] - queries[i][1], 2)) <= queries[i][2]) {
                    count++;
                }
            }
            ans[i] = count;
        }
        return ans;

=======

        int[] result = new int[queries.length];
        
        for(int i = 0; i < queries.length; i++) {
            int[] query = queries[i];
            int x = query[0];
            int y = query[1];
            int r = query[2];
            int count = 0;
            for(int j = 0; j < points.length; j++) {
                int[] point = points[j];
                int x1 = point[0];
                int y1 = point[1];
                double distance = Math.sqrt(Math.pow((x1 - x), 2) + Math.pow((y1 - y), 2));
                if(distance <= r) {
                    count++;
                }
            }
            result[i] = count;
        }
        
        return result;

=======

        int[] result = new int[queries.length];
        for(int i=0; i<queries.length; i++){
            for(int j=0; j<points.length; j++){
                int x = points[j][0] - queries[i][0];
                int y = points[j][1] - queries[i][1];
                if(x*x + y*y <= queries[i][2]*queries[i][2]){
                    result[i]++;
                }
            }
        }
        return result;

=======

        int[] result = new int[queries.length];
        int index = 0;
        for(int[] query: queries){
            int count = 0;
            for(int[] point: points){
                if(Math.sqrt(Math.pow(point[0]-query[0], 2) + Math.pow(point[1]-query[1], 2)) <= query[2]){
                    count++;
                }
            }
            result[index++] = count;
        }
        return result;
