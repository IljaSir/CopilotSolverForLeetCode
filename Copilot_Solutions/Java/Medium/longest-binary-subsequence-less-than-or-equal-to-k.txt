Synthesizing 10/10 solutions

=======

        int n = s.length();
        int[] dp = new int[n];
        int ans = 0;
        for (int i = 0; i < n; ++i) {
            if (s.charAt(i) == '0') {
                dp[i] = 1;
            } else {
                dp[i] = 0;
            }
            if (i > 0) {
                dp[i] += dp[i - 1];
            }
        }
        for (int i = 0; i < n; ++i) {
            int len = 0;
            int cnt = 0;
            for (int j = i; j < n; ++j) {
                if (s.charAt(j) == '1') {
                    ++cnt;
                }
                if (cnt > k) {
                    break;
                }
                ++len;
            }
            int zero = dp[i + len - 1];
            if (i > 0) {
                zero -= dp[i - 1];
            }
            ans = Math.max(ans, len - zero);
        }
        return ans;

=======

        int n = s.length();
        int[] dp = new int[n];
        int res = 0;
        for (int i = 0; i < n; i++) {
            dp[i] = s.charAt(i) - '0';
            if (dp[i] <= k) {
                res = Math.max(res, 1);
            }
            for (int j = i - 1; j >= 0; j--) {
                dp[j] = dp[j] * 2 + s.charAt(i) - '0';
                if (dp[j] <= k) {
                    res = Math.max(res, i - j + 1);
                }
            }
        }
        return res;

=======

        int n = s.length();
        int[] dp = new int[n];
        int[] last = new int[32];
        Arrays.fill(last, -1);
        for (int i = 0; i < n; i++) {
            int x = s.charAt(i) - '0';
            if (x <= k) {
                dp[i] = 1;
            }
            for (int j = 0; j < 32; j++) {
                if (last[j] >= 0 && (x | (1 << j)) <= k) {
                    dp[i] = Math.max(dp[i], dp[last[j]] + 1);
                }
            }
            last[x] = i;
        }
        int ans = 0;
        for (int x : dp) {
            ans = Math.max(ans, x);
        }
        return ans;

=======

        int[] dp = new int[k + 1];
        int max = 0;
        for (char c : s.toCharArray()) {
            if (c == '0') {
                dp[0]++;
                max = Math.max(max, dp[0]);
            } else {
                for (int i = k; i >= 1; i--) {
                    dp[i] = dp[i - 1] + 1;
                }
            }
        }
        return max;

=======

        int n = s.length();
        int[] dp = new int[n];
        int[] cnt = new int[n];
        int ans = 0;
        for (int i = 0; i < n; i++) {
            dp[i] = s.charAt(i) == '0' ? 1 : 0;
            cnt[i] = s.charAt(i) == '1' ? 1 : 0;
            if (cnt[i] <= k) {
                ans = Math.max(ans, cnt[i]);
            }
            for (int j = 0; j < i; j++) {
                if (cnt[j] + cnt[i] <= k) {
                    dp[i] = Math.max(dp[i], dp[j] + 1);
                    cnt[i] = cnt[j] + cnt[i];
                    ans = Math.max(ans, dp[i]);
                }
            }
        }
        return ans;

=======

        int n = s.length();
        int[] dp = new int[n];
        int[] last = new int[32];
        Arrays.fill(last, -1);
        int ans = 0;
        for (int i = 0; i < n; i++) {
            int c = s.charAt(i) - '0';
            int m = 0;
            for (int j = 1; j <= 30; j++) {
                if (j > c) {
                    if (j - c <= k) {
                        m = Math.max(m, dp[last[j - c]] + 1);
                    }
                } else if (j == c) {
                    m = Math.max(m, 1);
                }
            }
            if (c <= k) {
                m = Math.max(m, 1);
            }
            dp[i] = m;
            ans = Math.max(ans, m);
            last[c] = i;
        }
        return ans;

=======

        int n = s.length();
        int[] dp = new int[n];
        int[] next = new int[n];
        int[] prev = new int[n];
        for (int i = 0; i < n; i++) {
            next[i] = i + 1;
            prev[i] = i - 1;
        }
        for (int i = 0; i < n; i++) {
            if (s.charAt(i) == '0') {
                dp[i] = 1;
                if (i > 0) {
                    dp[i] += dp[prev[i]];
                    next[prev[i]] = next[i];
                    prev[next[i]] = prev[i];
                }
            }
        }
        int max = 0;
        int pos = 0;
        for (int i = 0; i < n; i++) {
            if (dp[i] > max) {
                max = dp[i];
                pos = i;
            }
        }
        int ans = 0;
        while (pos >= 0 && k > 0) {
            if (s.charAt(pos) == '0') {
                ans++;
                k--;
            } else {
                ans++;
            }
            pos = prev[pos];
        }
        return ans;

=======

        int n = s.length();
        int[] dp = new int[n + 1];
        int[] sum = new int[n + 1];
        int[] pos = new int[n + 1];
        Arrays.fill(pos, -1);
        for (int i = 0; i < n; i++) {
            dp[i + 1] = dp[i] + (s.charAt(i) - '0');
            sum[i + 1] = sum[i] + (s.charAt(i) - '0') * (1 << (n - i - 1));
            if (pos[dp[i + 1]] == -1) {
                pos[dp[i + 1]] = i;
            }
        }
        int ans = 0;
        for (int i = 0; i < n; i++) {
            if (sum[i + 1] <= k) {
                ans = Math.max(ans, i + 1);
            }
            for (int j = 0; j <= i; j++) {
                int x = dp[i + 1] - dp[j];
                int y = sum[i + 1] - sum[j];
                if (y <= k && pos[x] >= j) {
                    ans = Math.max(ans, i - j);
                }
            }
        }
        return ans;

=======

        int n = s.length();
        int[] dp = new int[n];
        int[] last = new int[n];
        int[] first = new int[n];
        int[] next = new int[n];
        int[] prev = new int[n];
        int[] cnt = new int[n];
        Arrays.fill(next, n);
        Arrays.fill(prev, -1);
        for (int i = 0; i < n; i++) {
            if (s.charAt(i) == '0') {
                cnt[i] = 1;
                if (i > 0) {
                    cnt[i] += cnt[i - 1];
                }
            }
            if (i > 0 && s.charAt(i - 1) == '0') {
                prev[i] = i - 1;
            } else {
                prev[i] = prev[i - 1];
            }
        }
        for (int i = n - 1; i >= 0; i--) {
            if (i < n - 1 && s.charAt(i + 1) == '0') {
                next[i] = i + 1;
            } else {
                next[i] = next[i + 1];
            }
        }
        for (int i = 0; i < n; i++) {
            if (s.charAt(i) == '1') {
                first[i] = i;
                if (i > 0) {
                    first[i] = first[i - 1];
                }
            }
        }
        for (int i = n - 1; i >= 0; i--) {
            if (s.charAt(i) == '1') {
                last[i] = i;
                if (i < n - 1) {
                    last[i] = last[i + 1];
                }
            }
        }
        int ans = 0;
        for (int i = 0; i < n; i++) {
            if (s.charAt(i) == '1') {
                int j = i;
                int sum = 0;
                while (j < n) {
                    sum = sum * 2 + s.charAt(j) - '0';
                    if (sum > k) {
                        break;
                    }
                    int len = j - i + 1;
                    if (i > 0) {
                        len += dp[i - 1];
                    }

=======

        int n = s.length();
        int[] dp = new int[n];
        int[] next = new int[n];
        int[] pre = new int[n];
        int[] cnt = new int[n];
        int[] digits = new int[n];
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = s.charAt(i) - '0';
        }
        int res = 0;
        for (int i = 0; i < n; i++) {
            if (a[i] == 0) {
                dp[i] = 1;
                next[i] = i + 1;
                pre[i] = i - 1;
                cnt[i] = 1;
                digits[i] = 0;
                res = Math.max(res, dp[i]);
            } else {
                dp[i] = 0;
                next[i] = -1;
                pre[i] = -1;
                cnt[i] = 0;
                digits[i] = 0;
            }
        }
        for (int i = n - 1; i >= 0; i--) {
            if (a[i] == 0) {
                continue;
            }
            int j = i + 1;
            int cur = 0;
            int c = 0;
            while (j < n && cur + (1 << c) <= k) {
                cur += (1 << c);
                c++;
                if (a[j] == 1) {
                    if (dp[j] + cnt[j] > dp[i]) {
                        dp[i] = dp[j] + cnt[j];
                        next[i] = next[j];
                        pre[i] = j;
                        cnt[i] = cnt[j] + 1;
                        digits[i] = c - 1;
                    }
                }
                j = next[j];
            }
            res = Math.max(res, dp[i]);
        }
        return res;
