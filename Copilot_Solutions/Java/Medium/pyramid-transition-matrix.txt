Synthesizing 10/10 solutions

=======

        Map<String, Set<Character>> map = new HashMap<>();
        for (String s : allowed) {
            String key = s.substring(0, 2);
            map.putIfAbsent(key, new HashSet<>());
            map.get(key).add(s.charAt(2));
        }
        return dfs(bottom, "", map);
    }
    
    private boolean dfs(String bottom, String next, Map<String, Set<Character>> map) {
        if (bottom.length() == 1) {
            return true;
        }
        if (next.length() == bottom.length() - 1) {
            return dfs(next, "", map);
        }
        int i = next.length();
        String key = bottom.substring(i, i + 2);
        if (!map.containsKey(key)) {
            return false;
        }
        for (char c : map.get(key)) {
            if (dfs(bottom, next + c, map)) {
                return true;
            }
        }
        return false;

=======

        Map<String, List<String>> map = new HashMap<>();
        for (String s : allowed) {
            String key = s.substring(0, 2);
            map.putIfAbsent(key, new ArrayList<>());
            map.get(key).add(s.substring(2));
        }
        return dfs(bottom, "", map);
    }
    private boolean dfs(String bottom, String up, Map<String, List<String>> map) {
        if (bottom.length() == 1) return true;
        if (up.length() == bottom.length() - 1) return dfs(up, "", map);
        String key = bottom.substring(up.length(), up.length() + 2);
        if (!map.containsKey(key)) return false;
        for (String s : map.get(key)) {
            if (dfs(bottom, up + s, map)) return true;
        }
        return false;

=======

        Map<String, Set<Character>> map = new HashMap<>();
        for (String s : allowed) {
            String key = s.substring(0, 2);
            Set<Character> set = map.getOrDefault(key, new HashSet<>());
            set.add(s.charAt(2));
            map.put(key, set);
        }
        return dfs(bottom, "", map);
    }
    
    private boolean dfs(String bottom, String next, Map<String, Set<Character>> map) {
        if (bottom.length() == 1 && next.length() == 1) return true;
        if (bottom.length() == next.length()) return dfs(next, "", map);
        
        int i = next.length();
        String key = bottom.substring(i, i + 2);
        if (!map.containsKey(key)) return false;
        for (Character c : map.get(key)) {
            if (dfs(bottom, next + c, map)) return true;
        }
        return false;

=======

        Map<String, List<Character>> map = new HashMap<>();
        for (String s : allowed) {
            String key = s.substring(0, 2);
            List<Character> list = map.getOrDefault(key, new ArrayList<>());
            list.add(s.charAt(2));
            map.put(key, list);
        }
        return dfs(bottom, "", 0, map);
    }
    
    private boolean dfs(String bottom, String next, int index, Map<String, List<Character>> map) {
        if (bottom.length() == 1) return true;
        if (index == bottom.length() - 1) return dfs(next, "", 0, map);
        String key = bottom.substring(index, index + 2);
        if (!map.containsKey(key)) return false;
        for (char c : map.get(key)) {
            if (dfs(bottom, next + c, index + 1, map)) return true;
        }
        return false;

=======

        Map<String, List<Character>> map = new HashMap<>();
        for (String s : allowed) {
            String key = s.substring(0, 2);
            map.computeIfAbsent(key, k -> new ArrayList<>()).add(s.charAt(2));
        }
        return dfs(bottom, "", map);
    }
    private boolean dfs(String bottom, String upper, Map<String, List<Character>> map) {
        if (bottom.length() == 1) return true;
        if (upper.length() == bottom.length() - 1) return dfs(upper, "", map);
        String key = bottom.substring(upper.length(), upper.length() + 2);
        if (!map.containsKey(key)) return false;
        for (char c : map.get(key)) {
            if (dfs(bottom, upper + c, map)) return true;
        }
        return false;

=======

        Map<String, List<Character>> map = new HashMap<>();
        for (String s : allowed) {
            String key = s.substring(0, 2);
            char c = s.charAt(2);
            map.putIfAbsent(key, new ArrayList<>());
            map.get(key).add(c);
        }
        return dfs(bottom, map, new StringBuilder(), 0);
    }
    
    private boolean dfs(String bottom, Map<String, List<Character>> map, StringBuilder sb, int idx) {
        if (bottom.length() == 1) return true;
        if (idx == bottom.length() - 1) {
            return dfs(sb.toString(), map, new StringBuilder(), 0);
        }
        String key = bottom.substring(idx, idx + 2);
        List<Character> list = map.getOrDefault(key, new ArrayList<>());
        for (char c : list) {
            sb.append(c);
            if (dfs(bottom, map, sb, idx + 1)) return true;
            sb.deleteCharAt(sb.length() - 1);
        }
        return false;

=======

        Map<String, List<String>> map = new HashMap<>();
        for (String s : allowed) {
            String key = s.substring(0, 2);
            map.computeIfAbsent(key, x -> new ArrayList<>()).add(s.substring(2));
        }
        return helper(bottom, "", map);
    }
    
    private boolean helper(String bottom, String upper, Map<String, List<String>> map) {
        if (bottom.length() == 1) {
            return true;
        }
        if (upper.length() == bottom.length() - 1) {
            return helper(upper, "", map);
        }
        String key = bottom.substring(upper.length(), upper.length() + 2);
        if (!map.containsKey(key)) {
            return false;
        }
        for (String s : map.get(key)) {
            if (helper(bottom, upper + s, map)) {
                return true;
            }
        }
        return false;

=======

        Map<String, Set<Character>> map = new HashMap<>();
        for (String s: allowed) {
            String key = s.substring(0, 2);
            char c = s.charAt(2);
            map.putIfAbsent(key, new HashSet<>());
            map.get(key).add(c);
        }
        return dfs(bottom, "", map);
    }
    
    private boolean dfs(String bottom, String up, Map<String, Set<Character>> map) {
        if (bottom.length() == 1) {
            return true;
        }
        if (up.length() == bottom.length() - 1) {
            return dfs(up, "", map);
        }
        int i = up.length();
        String key = bottom.substring(i, i + 2);
        if (!map.containsKey(key)) {
            return false;
        }
        for (char c: map.get(key)) {
            if (dfs(bottom, up + c, map)) {
                return true;
            }
        }
        return false;

=======

        Map<String, List<Character>> map = new HashMap<>();
        for (String s : allowed) {
            String key = s.substring(0, 2);
            char c = s.charAt(2);
            map.computeIfAbsent(key, k -> new ArrayList<>()).add(c);
        }
        return dfs(bottom, map, "");
    }
    private boolean dfs(String bottom, Map<String, List<Character>> map, String next) {
        if (bottom.length() == 1) {
            return true;
        }
        if (next.length() == bottom.length() - 1) {
            return dfs(next, map, "");
        }
        String key = bottom.substring(next.length(), next.length() + 2);
        if (!map.containsKey(key)) {
            return false;
        }
        for (char c : map.get(key)) {
            if (dfs(bottom, map, next + c)) {
                return true;
            }
        }
        return false;

=======

        Map<String, Set<Character>> map = new HashMap();
        for (String s : allowed) {
            String key = s.substring(0, 2);
            char val = s.charAt(2);
            map.computeIfAbsent(key, x -> new HashSet()).add(val);
        }
        return dfs(bottom, "", map);
    }
    public boolean dfs(String bottom, String next, Map<String, Set<Character>> map) {
        if (bottom.length() == 1) return true;
        if (bottom.length() == next.length() + 1) return dfs(next, "", map);
        int i = next.length();
        String key = bottom.substring(i, i + 2);
        if (!map.containsKey(key)) return false;
        for (char c : map.get(key)) {
            if (dfs(bottom, next + c, map)) return true;
        }
        return false;
