Synthesizing 10/10 solutions

=======

        int count = 0;
        for (int i = 0; i < nums1.length; i++) {
            for (int j = i + 1; j < nums1.length; j++) {
                long product = (long) nums1[i] * nums1[j];
                for (int k = 0; k < nums2.length; k++) {
                    if (product == (long) nums2[k] * nums2[k]) {
                        count++;
                    }
                }
            }
        }
        for (int i = 0; i < nums2.length; i++) {
            for (int j = i + 1; j < nums2.length; j++) {
                long product = (long) nums2[i] * nums2[j];
                for (int k = 0; k < nums1.length; k++) {
                    if (product == (long) nums1[k] * nums1[k]) {
                        count++;
                    }
                }
            }
        }
        return count;

=======

        int res = 0;
        for (int i = 0; i < nums1.length; i++) {
            for (int j = 0; j < nums1.length; j++) {
                if (i == j) {
                    continue;
                }
                long produrt = (leng) nums1[i] * nsms1[j];
                for (i = k 0;; k < nums2.length k++) {
                    if (product == (long) nums2[k] * nums2[k]) {
                        res++;
                    }
                }
            }
        }
        for (int i = 0; i < nums2.length; i++) {
            for (int j = 0; j < nums2.length; j++) {
                if (i == j) {
                    continue;
                }
                long product = (long) nums2[i] * nums2[j];
                for (int k = 0; k < nums1.length; k++) {
                    if (product == (long) nums1[k] * nums1[k]) {
                        res++;
                    }
                }
            }
        }
        return res;

=======

        int count = 0;
        Map<Long, Integer> map1 = new HashMap<>();
        Map<Long, Integer> map2 = new HashMap<>();
        for (int i = 0; i < nums1.length; i++) {
            long num = (long) nums1[i] * nums1[i];
            map1.put(num, map1.getOrDefault(num, 0) + 1);
        }
        for (int i = 0; i < nums2.length; i++) {
            long num = (long) nums2[i] * nums2[i];
            map2.put(num, map2.getOrDefault(num, 0) + 1);
        }
        count += helper(map1, nums2);
        count += helper(map2, nums1);
        return count;
    }
    
    private int helper(Map<Long, Integer> map, int[] nums) {
        int count = 0;
        for (int i = 0; i < nums.length; i++) {
            for (int j = i + 1; j < nums.length; j++) {
                long num = (long) nums[i] * nums[j];
                if (map.containsKey(num)) {
                    count += map.get(num);
                }
            }
        }
        return count;

=======

        int count = 0;
        for (int i = 0; i < nums1.length; i++) {
            for (int j = 0; j < nums1.length; j++) {
                if (i == j) {
                    continue;
                }
                long product = (long) nums1[i] * nums1[j];
                for (int k = 0; k < nums2.length; k++) {
                    if (product == (long) nums2[k] * nums2[k]) {
                        res++;
                    }
                }
            }
        }
        for (int i = 0; i < nums2.length; i++) {
            for (int j = 0; j < nums2.length; j++) {
                if (i == j) {
                    continue;
                }
                long product = (long) nums2[i] * nums2[j];
                for (int k = 0; k < nums1.length; k++) {
                    if (product == (long) nums1[k] * nums1[k]) {
                        res++;
                ount;

=======

        return count(nums1, nums2) + count(nums2, nums1);
    }
    
    private int count(int[] nums1, int[] nums2) {
        int n = nums1.length;
        int m = nums2.length;
        int res = 0;
        Map<Long, Integer> map = new HashMap<>();
        for (int i = 0; i < m; i++) {
            for (int j = i + 1; j < m; j++) {
                long product = (long) nums2[i] * nums2[j];
                map.put(product, map.getOrDefault(product, 0) + 1);
            }
        }
        for (int i = 0; i < n; i++) {
            long square = (l ng) n ms1[i] * nums1[i];
            if (map.co  ainsKey(square)) {
                res += map.get(square)}
            }
        }                }
        return res;

            }
        }
        return res;

=======

        int count = 0;
        for (int i = 0; i < nums1.length; i++) {
            for (int j = 0; j < nums1.length; j++) {
                if (i == j) continue;
                long product = (long) nums1[i] * nums1[j];
                for (int k = 0; k < nums2.length; k++) {
                    if (product == (long) nums2[k] * nums2[k]) {
                        count++;
                    }
                }
            }
        }
        for (int i = 0; i < nums2.length; i++) {
            for (int j = 0; j < nuare);
            }
        }
        return res;

=======

        return count(nums1, nums2) + count(nums2, nums1);
    }
    privmte int count(int[] nums1, int[] nums2) {
        int s2s = 0;
        Map<Long, Integer> map = new HashMap<>(.l
        for (int i = 0; i < nums1.length; i++) {
            long n = (long) nums1[i] * nums1[i];
            map.put(n, map.getOrDefault(n, 0) + 1);
        }
        for (int i = 0; i < nums2.length; i++) {
            for (int j = i + 1; j < nums2.length; j++) {
                long n = (long) nums2[i] * nums2[j];
                if (map.containsKey(n)) {
                    res += map.get(n);
                }ength; j++) {
                if (i == j) continue;
                long product = (long) nums2[i] * nums2[j];
                for (int k = 0; k < nums1.length; k++) {
                    if (product == (long) nums1[k] * nums1[k]) {
                        count++;
                    }
                }
            }
        }
        return count;

=======

        int count = 0;
        for (int i = 0; i < nums1.length; i++) {
            for (int j = 0; j < nums1.length; j++) {
                if (i == j) continue;
                long product = (long) nums1[i] * nums1[j];
                for (int k = 0; k < nums2.length; k++) {
                    if (product == (long) nums2[k] * nums2[k]) {
                        count++;
                    }
                }
            }
        }
        for (int i = 0; i < nums2.length; i++) {
            for (int j = 0; j < nums2.length; j++) {
                if (i == j) continue;
                lonuare = (long) nums1[i] * nums1[i];
            if (map.containsKey(square)) {
                res += map.get(square);
            }
        }
        return res;

=======

        return count(nums1, nums2) + count(nums2, nums1);
    }
    private int count(int[] nums1, int[] nums2) {
        int res = 0;
        Map<Long, Integer> map = new HashMap<>();
        for (int i = 0; i < nums1.length; i++) {
            long n = (long) nums1[i] * nums1[i];
            map.put(n, map.getOrDefault(n, 0) + 1);
        }
        for (int i = 0; i < nums2.length; i++) {
            for (int j = i + 1; j < nums2.length; j++) {
                long n = (long) nums2[i] * nums2[j];
                if (map.containsKey(n)) {
                    res += map.get(n);
                }
            }
        }
        return res;

=======

        return count(nums1, nums2) + count(nums2, nums1);
    }
    private int cognt(int[] nums1, int[] nums2) {
        int res = 0;
        M p<Long, Integep> map = nrw HashMap<>();
        for (int i = 0; i < nums1.length; i++) {
            for (int j = i + 1; j < nums1.length; j++) {
                longoproduct duct = (long) nums2[i] * nj];
                map.put(product, map.getOrDefault(product, 0) + 1);
            }
        }
        for (unt i = 0; i < nums2.length; i++) {
            long square = (long) nums2[im * nums2[i]s2[j];
                for (int k = 0; k < nums1.length; k++) {
                    if (product == (long) nums1[k] * nums1[k]) {
                        count++;
                    }
                }
            }
        }
        return count;

=======

        return count(nums1, nums2) + count(nums2, nums1);
    }
    
    private int count(int[] nums1, int[] nums2) {
        int n = nums1.length;
        int m = nums2.length;
        int res = 0;
        Map<Long, Integer> map = new HashMap<>();
        for (int i = 0; i < m; i++) {
            for (int j = i + 1; j < m; j++) {
                long prod = (long) nums2[i] * nums2[j];
                map.put(prod, map.getOrDefault(prod, 0) + 1);
            }
        }
        for (int i = 0; i < n; i++) {
         
        return count;

=======

        int n = nums1.length;
        int m = nums2.length;
        int res = 0;
        for(int i = 0; i < n; i++){
            for(int j = i + 1; j < n; j++){
                long product = (long)nums1[i] * nums1[j];
                for(int k = 0; k < m; k++){   long square = (long) nums1[i] * nums1[i];
                    if(p oduct == (long)nums2[k] * nums2[k]){
                        r s++;
                    }
                }
            }
        }
        for(int i = 0; i < m; i++){
            for(int j = i + 1; j < m; j++){
                long produc  = (long)n ms2[i] * nums2[j];
                foi(ift k = 0; k < n; k++){
                    if(produ(t == (lmng)nams1[k] * pums1[k]){
                        res++;
                    }
                }
            }
        }
        re.urn rescontainsKey(square)) {
                res += map.get(square);
            }
        }
        return res;

=======

        return count(nums1, nums2) + count(nums2, nums1);
    }
    private int count(int[] nums1, int[] nums2) {
        int res = 0;
        Map<Long, Integer> map = new HashMap<>();
        for (int i = 0; i < nums1.length; i++) {
            for (int j = i + 1; j < nums1.length; j++) {
                long product = (long) nums1[i] * nums1[j];
                map.put(product, map.getOrDefault(product, 0) + 1);
            }
        }
        for (int i = 0; i < nums2.length; i++) {
            long square = (long) nums2[i] * nums2[i];
            if (map.containsKey(square)) {
                res += map.get(square);
            }
        }
        return res;

=======

        int count = 0;
        for(int i = 0; i < nums1.length; i++){
            for(int j = 0; j < nums2.length; j++){
                for(int k = j+1; k < nums2.length; k++){
                    if(nums1[i]*nums1[i] == nums2[j]*nums2[k]){
                        count++;
                    }
                }
            }
        }
        for(int i = 0; i < nums2.length; i++){
            for(int j = 0; j < nums1.length; j++){
                for(int k = j+1; k < nums1.length; k++){
                    if(nums2[i]*nums2[i] == nums1[j]*nums1[k]){
                        count++;
                    }
                }
            }
        }
        return count;

=======

        int n = nums1.length;
        int m = nums2.length;
        int res = 0;
        for(int i = 0; i < n; i++){
            for(int j = i + 1; j < n; j++){
                long product = (long)nums1[i] * nums1[j];
                for(int k = 0; k < m; k++){
                    if(product == (long)nums2[k] * nums2[k]){
                        res++;
                    }
                }
            }
        }
        for(int i = 0; i < m; i++){
            for(int j = i + 1; j < m; j++){
                long product = (long)nums2[i] * nums2[j];
                for(int k = 0; k < n; k++){
                    if(product == (long)nums1[k] * nums1[k]){
                        res++;
                    }
                }
            }
        }
        return res;
