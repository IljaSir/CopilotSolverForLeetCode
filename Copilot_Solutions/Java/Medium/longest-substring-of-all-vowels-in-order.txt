Synthesizing 10/10 solutions

=======

        int max = 0;
        int count = 0;
        char prev = 'a';
        for (int i = 0; i < word.length(); i++) {
            char c = word.charAt(i);
            if (c < prev) {
                prev = 'a';
                count = 0;
            }
            count++;
            if (c == 'u') {
                max = Math.max(max, count);
            }
            prev = c;
        }
        return max;

=======

        int max = 0;
        int count = 0;
        int i = 0;
        while (i < word.length()) {
            char c = word.charAt(i);
            if (c == 'a') {
                count = 1;
                while (i < word.length() - 1 && word.charAt(i + 1) >= c) {
                    if (word.charAt(i + 1) > c) {
                        count++;
                        c = word.charAt(i + 1);
                    }
                    i++;
                }
                if (count == 5) {
                    max = Math.max(max, i - count + 2);
                }
            }
            i++;
        }
        return max;

=======

        int max = 0;
        int count = 0;
        char prev = ' ';
        for (char c : word.toCharArray()) {
            if (c < prev) {
                count = 0;
            }
            if (c == 'a') {
                count = 1;
            } else if (count > 0 && c == prev + 1) {
                count++;
            }
            if (c == 'u' && count > max) {
                max = count;
            }
            prev = c;
        }
        return max;

=======

        int maxLen = 0;
        int len = 0;
        int lastChar = 0;
        for (int i = 0; i < word.length(); i++) {
            char ch = word.charAt(i);
            if (ch == 'a') {
                if (lastChar == 0) {
                    len++;
                } else {
                    len = 1;
                }
            } else if (ch == 'e') {
                if (lastChar == 1) {
                    len++;
                } else if (lastChar == 0) {
                    len = 0;
                } else {
                    maxLen = Math.max(maxLen, len);
                    len = 2;
                }
            } else if (ch == 'i') {
                if (lastChar == 2) {
                    len++;
                } else if (lastChar == 1) {
                    len = 0;
                } else {
                    maxLen = Math.max(maxLen, len);
                    len = 3;
                }
            } else if (ch == 'o') {
                if (lastChar == 3) {
                    len++;
                } else if (lastChar == 2) {
                    len = 0;
                } else {
                    maxLen = Math.max(maxLen, len);
                    len = 4;
                }
            } else if (ch == 'u') {
                if (lastChar == 4) {
                    len++;
                } else if (lastChar == 3) {
                    len = 0;
                } else {
                    maxLen = Math.max(maxLen, len);
                    len = 5;
                }
            } else {
                len = 0;
            }
            if (len > 0) {
                lastChar = len - 1;
            }
        }
        if (lastChar == 4) {
            maxLen = Math.max(maxLen, len);
        }
        return maxLen;

=======

        int max = 0;
        int count = 0;
        int prev = 0;
        char prevChar = 'a';
        for (int i = 0; i < word.length(); i++) {
            char c = word.charAt(i);
            if (c >= prevChar) {
                if (c > prevChar) {
                    if (prevChar == 'a') {
                        count++;
                    } else {
                        count = 1;
                    }
                } else {
                    count++;
                }
                if (c == 'u') {
                    max = Math.max(max, count);
                }
            } else {
                count = 0;
            }
            prevChar = c;
        }
        return max;

=======

        int ans = 0, count = 0, max = 0;
        char prev = 'a';
        for (int i = 0; i < word.length(); i++) {
            char c = word.charAt(i);
            if (c >= prev) {
                count++;
                if (c != prev) {
                    max = 1;
                    prev = c;
                } else {
                    max++;
                }
            } else {
                if (c == 'a' && max == 5) {
                    ans = Math.max(ans, count);
                }
                count = 1;
                max = 1;
                prev = c;
            }
        }
        if (max == 5) {
            ans = Math.max(ans, count);
        }
        return ans;

=======

        char[] vowels = {'a', 'e', 'i', 'o', 'u'};
        int[] last = new int[5];
        int[] count = new int[5];
        int max = 0;
        for (int i = 0; i < word.length(); i++) {
            char ch = word.charAt(i);
            int pos = Arrays.binarySearch(vowels, ch);
            if (pos == -1) {
                Arrays.fill(count, 0);
                continue;
            }
            if (pos > 0) {
                if (last[pos - 1] >= last[pos]) {
                    Arrays.fill(count, 0);
                }
            }
            last[pos] = i;
            count[pos] = count[pos] + 1;
            if (pos == 4) {
                max = Math.max(max, i - last[0] + 1);
            }
        }
        return max;

=======

        int[] count = new int[26];
        int ans = 0;
        int i = 0;
        int j = 0;
        while (i < word.length() && j < word.length()) {
            if (j == 0 || word.charAt(j) >= word.charAt(j - 1)) {
                count[word.charAt(j) - 'a']++;
                j++;
            } else {
                i = j;
                count = new int[26];
            }
            if (count['a' - 'a'] >= 1 && count['e' - 'a'] >= 1 && count['i' - 'a'] >= 1 && count['o' - 'a'] >= 1 && count['u' - 'a'] >= 1) {
                ans = Math.max(ans, j - i);
            }
        }
        return ans;

=======

        int max = 0;
        int count = 0;
        int prev = 0;
        for(int i = 0; i < word.length(); i ++) {
            char c = word.charAt(i);
            if (i == 0) {
                prev = c;
                count ++;
                continue;
            }
            if (c == prev) {
                count ++;
            } else if (c > prev) {
                count ++;
                if (prev == 'a' && c == 'e') {
                    prev = c;
                } else if (prev == 'e' && c == 'i') {
                    prev = c;
                } else if (prev == 'i' && c == 'o') {
                    prev = c;
                } else if (prev == 'o' && c == 'u') {
                    prev = c;
                } else {
                    count = 0;
                    prev = 0;
                }
            } else {
                if (prev == 'u') {
                    max = Math.max(max, count);
                    count = 0;
                    prev = 0;
                } else {
                    count = 0;
                    prev = 0;
                }
            }
        }
        if (prev == 'u') {
            max = Math.max(max, count);
        }
        return max;

=======

        int n = word.length();
        int max = 0;
        int start = 0;
        int end = 0;
        int count = 0;
        while(end < n){
            if(end == n - 1){
                if(word.charAt(end) >= word.charAt(end - 1)){
                    count++;
                }
                if(count == 5){
                    max = Math.max(max, end - start + 1);
                }
                break;
            }
            if(word.charAt(end) < word.charAt(end + 1)){
                end++;
                count++;
            }else if(word.charAt(end) > word.charAt(end + 1)){
                if(count == 5){
                    max = Math.max(max, end - start + 1);
                }
                end++;
                start = end;
                count = 0;
            }else{
                end++;
            }
        }
        return max;
