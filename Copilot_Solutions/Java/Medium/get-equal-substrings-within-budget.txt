Synthesizing 10/10 solutions

=======

        int n = s.length();
        int[] cost = new int[n];
        for (int i = 0; i < n; i++) {
            cost[i] = Math.abs(s.charAt(i) - t.charAt(i));
        }
        int left = 0;
        int right = 0;
        int sum = 0;
        int res = 0;
        while (right < n) {
            sum += cost[right];
            while (sum > maxCost) {
                sum -= cost[left];
                left++;
            }
            res = Math.max(res, right - left + 1);
            right++;
        }
        return res;

=======

        int n = s.length();
        int[] diff = new int[n];
        for (int i = 0; i < n; i++) {
            diff[i] = Math.abs(s.charAt(i) - t.charAt(i));
        }
        int start = 0, end = 0, cost = 0, res = 0;
        while (end < n) {
            cost += diff[end];
            while (cost > maxCost) {
                cost -= diff[start];
                start++;
            }
            res = Math.max(res, end - start + 1);
            end++;
        }
        return res;

=======

        int n = s.length();
        int[] diff = new int[n];
        for (int i = 0; i < n; i++) {
            diff[i] = Math.abs(s.charAt(i) - t.charAt(i));
        }
        int left = 0, right = 0;
        int sum = 0;
        int maxLength = 0;
        while (right < n) {
            sum += diff[right];
            while (sum > maxCost) {
                sum -= diff[left];
                left++;
            }
            maxLength = Math.max(maxLength, right - left + 1);
            right++;
        }
        return maxLength;

=======

        int n = s.length();
        int[] costs = new int[n];
        for (int i = 0; i < n; i++) {
            costs[i] = Math.abs(s.charAt(i) - t.charAt(i));
        }
        int left = 0, right = 0;
        int max = 0;
        int sum = 0;
        while (right < n) {
            sum += costs[right];
            while (sum > maxCost) {
                sum -= costs[left];
                left++;
            }
            max = Math.max(max, right - left + 1);
            right++;
        }
        return max;

=======

        int n = s.length();
        int[] costs = new int[n];
        for (int i = 0; i < n; i++) {
            costs[i] = Math.abs(s.charAt(i) - t.charAt(i));
        }
        int start = 0, end = 0, cost = 0, max = 0;
        while (end < n) {
            cost += costs[end++];
            while (cost > maxCost) {
                cost -= costs[start++];
            }
            max = Math.max(max, end - start);
        }
        return max;

=======

        int[] cost = new int[s.length()];
        for (int i = 0; i < s.length(); i++) {
            cost[i] = Math.abs(s.charAt(i) - t.charAt(i));
        }
        int left = 0;
        int right = 0;
        int sum = 0;
        int max = 0;
        while (right < s.length()) {
            sum += cost[right];
            while (sum > maxCost) {
                sum -= cost[left];
                left++;
            }
            max = Math.max(max, right - left + 1);
            right++;
        }
        return max;

=======

        int[] diff = new int[s.length()];
        for (int i = 0; i < s.length(); i++) {
            diff[i] = Math.abs(s.charAt(i) - t.charAt(i));
        }
        int start = 0, end = 0, sum = 0, max = 0;
        while (end < s.length()) {
            sum += diff[end];
            while (sum > maxCost) {
                sum -= diff[start];
                start++;
            }
            max = Math.max(max, end - start + 1);
            end++;
        }
        return max;

=======

        int[] diff = new int[s.length()];
        for (int i = 0; i < s.length(); i++) {
            diff[i] = Math.abs(s.charAt(i) - t.charAt(i));
        }
        int l = 0;
        int r = 0;
        int sum = 0;
        int max = 0;
        while (r < s.length()) {
            sum += diff[r];
            while (sum > maxCost) {
                sum -= diff[l];
                l++;
            }
            max = Math.max(max, r - l + 1);
            r++;
        }
        return max;

=======

        int n = s.length(), l = 0, r = 0, cost = 0;
        while (r < n) {
            cost += Math.abs(s.charAt(r) - t.charAt(r++));
            if (cost > maxCost)
                cost -= Math.abs(s.charAt(l) - t.charAt(l++));
        }
        return r - l;

=======

        int[] arr = new int[s.length()];
        for(int i = 0; i < s.length(); i++){
            arr[i] = Math.abs(s.charAt(i) - t.charAt(i));
        }
        int max = 0;
        int sum = 0;
        int l = 0;
        int r = 0;
        while(r < arr.length){
            sum += arr[r];
            if(sum <= maxCost){
                max = Math.max(max, r - l + 1);
            }
            while(sum > maxCost){
                sum -= arr[l];
                l++;
            }
            r++;
        }
        return max;
