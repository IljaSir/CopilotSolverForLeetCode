Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int[] stops = new int[1001];
        for (int[] trip : trips) {
            stops[trip[1]] += trip[0];
            stops[trip[2]] -= trip[0];
        }
        for (int stop : stops) {
            capacity -= stop;
            if (capacity < 0) {
                return false;
            }
        }
        return true;

=======

        int[] delta = new int[1001];
        for (int[] trip : trips) {
            delta[trip[1]] += trip[0];
            delta[trip[2]] -= trip[0];
        }
        for (int i = 0; i < delta.length; i++) {
            capacity -= delta[i];
            if (capacity < 0) {
                return false;
            }
        }
        return true;

=======

        int[] delta = new int[1001];
        for (int[] trip : trips) {
            delta[trip[1]] += trip[0];
            delta[trip[2]] -= trip[0];
        }
        for (int i = 1; i <= 1000; i++) {
            delta[i] += delta[i - 1];
            if (delta[i] > capacity) {
                return false;
            }
        }
        return true;

=======

        int[] delta = new int[1001];
        for (int[] trip : trips) {
            delta[trip[1]] += trip[0];
            delta[trip[2]] -= trip[0];
        }
        for (int d : delta) {
            capacity -= d;
            if (capacity < 0) {
                return false;
            }
        }
        return true;

=======

        int[] road = new int[1001];
        for (int[] trip : trips) {
            road[trip[1]] += trip[0];
            road[trip[2]] -= trip[0];
        }
        for (int i : road) {
            capacity -= i;
            if (capacity < 0) return false;
        }
        return true;

=======

        int[] time = new int[1001];
        for (int i = 0; i < trips.length; i++) {
            time[trips[i][1]] += trips[i][0];
            time[trips[i][2]] -= trips[i][0];
        }
        for (int i = 0; i < 1001; i++) {
            capacity -= time[i];
            if (capacity < 0) return false;
        }
        return true;

=======

        int[] path = new int[1001];
        for (int[] trip : trips) {
            path[trip[1]] += trip[0];
            path[trip[2]] -= trip[0];
        }
        int cur = 0;
        for (int i = 0; i < 1001; i++) {
            cur += path[i];
            if (cur > capacity) return false;
        }
        return true;

=======

        int[] d = new int[1001];
        for (int[] trip : trips) {
            d[trip[1]] += trip[0];
            d[trip[2]] -= trip[0];
        }
        for (int i = 0; i < 1001; i++) {
            capacity -= d[i];
            if (capacity < 0) {
                return false;
            }
        }
        return true;
