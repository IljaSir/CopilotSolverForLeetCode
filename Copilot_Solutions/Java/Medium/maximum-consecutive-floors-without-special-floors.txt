Synthesizing 10/10 solutions

=======

        Arrays.sort(special);
        int max = 0;
        for (int i = 0; i < special.length; i++) {
            if (i == 0) {
                max = Math.max(max, special[i] - bottom);
            } else {
                max = Math.max(max, special[i] - special[i - 1] - 1);
            }
        }
        if (special.length > 0) {
            max = Math.max(max, top - special[special.length - 1]);
        } else {
            max = Math.max(max, top - bottom + 1);
        }
        return max;

=======

        Arrays.sort(special);
        int max = 0;
        int prev = bottom - 1;
        for (int i = 0; i < special.length; i++) {
            max = Math.max(max, special[i] - prev - 1);
            prev = special[i];
        }
        max = Math.max(max, top - prev);
        return max;

=======

        int max = 0;
        int count = 0;
        Arrays.sort(special);
        for (int i = 0; i < special.length; i++) {
            if (special[i] == bottom) {
                bottom++;
            } else {
                count = special[i] - bottom;
                max = Math.max(max, count);
                bottom = special[i] + 1;
            }
        }
        count = top - bottom + 1;
        max = Math.max(max, count);
        return max;

=======

        Arrays.sort(special);
        int max = 0;
        int prev = bottom - 1;
        for (int i = 0; i < special.length; i++) {
            int cur = special[i];
            max = Math.max(max, cur - prev - 1);
            prev = cur;
        }
        max = Math.max(max, top - prev);
        return max;

=======

        Arrays.sort(special);
        int max = 0;
        int pre = bottom - 1;
        for (int i = 0; i < special.length; i++) {
            if (special[i] == pre + 1) {
                pre = special[i];
                continue;
            }
            max = Math.max(max, special[i] - pre - 1);
            pre = special[i];
        }
        max = Math.max(max, top - pre);
        return max;

=======

        int max = 0;
        int prev = bottom - 1;
        for (int n : special) {
            max = Math.max(max, n - prev - 1);
            prev = n;
        }
        return Math.max(max, top - prev);

=======

        Arrays.sort(special);
        int max = 0;
        int current = 0;
        int i = 0;
        while (i < special.length && special[i] < bottom) {
            i++;
        }
        if (i == special.length) {
            return top - bottom + 1;
        }
        for (; i < special.length; i++) {
            if (special[i] > top) {
                break;
            }
            if (bottom == special[i]) {
                current = 0;
                bottom++;
            } else {
                current++;
                max = Math.max(max, current);
            }
        }
        if (bottom <= top) {
            max = Math.max(max, top - bottom + 1);
        }
        return max;

=======

        Arrays.sort(special);
        int ans = 0;
        int last = -1;
        for (int i = 0; i < special.length; i++) {
            if (i == 0) {
                ans = Math.max(ans, special[i] - bottom);
            } else {
                ans = Math.max(ans, special[i] - last - 1);
            }
            last = special[i];
        }
        ans = Math.max(ans, top - last);
        return ans;

=======

        Arrays.sort(special);
        int max = 0;
        int len = special.length;
        int last = bottom;
        if (len == 0) {
            return top - bottom + 1;
        }
        for (int i = 0; i < len; i++) {
            int cur = special[i];
            if (cur == last) {
                last = cur + 1;
            } else {
                max = Math.max(max, cur - last);
                last = cur + 1;
            }
        }
        max = Math.max(max, top - last + 1);
        return max;

=======

        int n = special.length;
        int max = 0;
        int prev = bottom - 1;
        for(int i = 0; i <= n; i++){
            int curr = i == n ? top + 1 : special[i];
            max = Math.max(max, curr - prev - 1);
            prev = curr;
        }
        return max;
