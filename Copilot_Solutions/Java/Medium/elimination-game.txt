Synthesizing 10/10 solutions (Duplicates hidden)

=======

        boolean left = true;
        int remaining = n;
        int step = 1;
        int head = 1;
        while (remaining > 1) {
            if (left || remaining % 2 == 1) {
                head += step;
            }
            remaining /= 2;
            step *= 2;
            left = !left;
        }
        return head;

=======

        return n == 1 ? 1 : 2 * (1 + n / 2 - lastRemaining(n / 2));

=======

        int head = 1;
        int step = 1;
        boolean left = true;
        while (n > 1) {
            if (left || n % 2 == 1) {
                head += step;
            }
            n /= 2;
            step *= 2;
            left = !left;
        }
        return head;

=======

        return n == 1 ? 1 : 2 * (n / 2 + 1 - lastRemaining(n / 2));

=======

        int head = 1;
        int step = 1;
        int remain = n;
        boolean left = true;
        while (remain > 1) {
            if (left || remain % 2 == 1) {
                head += step;
            }
            step *= 2;
            remain /= 2;
            left = !left;
        }
        return head;

=======

        return (n == 1) ? 1 : 2 * (n / 2 + 1 - lastRemaining(n / 2));

=======

        return 2 * (1 + n / 2 - lastRemaining(n / 2));

=======

        return helper(1, n, true);
    }
    private int helper(int left, int right, boolean isLeft) {
        if (left == right) {
            return left;
        }
        int mid = left + (right - left) / 2;
        if (isLeft) {
            return helper(mid + 1, right, !isLeft);
        } else {
            return helper(left, mid, !isLeft);
        }

=======

        return Integer.bitCount(n-1) & 1;
