Synthesizing 10/10 solutions

=======

        PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> Double.compare((double) (b[0] + 1) / (b[1] + 1) - (double) b[0] / b[1], (double) (a[0] + 1) / (a[1] + 1) - (double) a[0] / a[1]));
        for (int[] c : classes) {
            pq.offer(c);
        }
        while (extraStudents-- > 0) {
            int[] cur = pq.poll();
            cur[0]++;
            cur[1]++;
            pq.offer(cur);
        }
        double ans = 0;
        while (!pq.isEmpty()) {
            int[] cur = pq.poll();
            ans += (double) cur[0] / cur[1];
        }
        return ans / classes.length;

=======

        PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> {
            double r1 = (double)(a[0] + 1) / (a[1] + 1) - (double)a[0] / a[1];
            double r2 = (double)(b[0] + 1) / (b[1] + 1) - (double)b[0] / b[1];
            return r2 > r1 ? 1 : -1;
        });
        for (int[] c : classes) {
            pq.add(c);
        }
        while (extraStudents-- > 0) {
            int[] c = pq.poll();
            c[0]++;
            c[1]++;
            pq.add(c);
        }
        double res = 0;
        while (!pq.isEmpty()) {
            int[] c = pq.poll();
            res += (double)c[0] / c[1];
        }
        return res / classes.length;

=======

        PriorityQueue<double[]> pq = new PriorityQueue<>((a, b) -> Double.compare(b[0], a[0]));
        for (int[] c : classes) {
            double pass = c[0];
            double total = c[1];
            double gain = (pass + 1) / (total + 1) - pass / total;
            pq.add(new double[]{gain, pass, total});
        }
        for (int i = 0; i < extraStudents; i++) {
            double[] c = pq.poll();
            c[1]++;
            c[2]++;
            c[0] = (c[1] + 1) / (c[2] + 1) - c[1] / c[2];
            pq.add(c);
        }
        double res = 0;
        while (!pq.isEmpty()) {
            double[] c = pq.poll();
            res += c[1] / c[2];
        }
        return res / classes.length;

=======

        PriorityQueue<int[]> pq = new PriorityQueue<int[]>((a, b) -> {
            double x = (double)(a[0] + 1) / (a[1] + 1) - (double)a[0] / a[1];
            double y = (double)(b[0] + 1) / (b[1] + 1) - (double)b[0] / b[1];
            return Double.compare(y, x);
        });
        
        for (int[] c: classes) {
            pq.add(c);
        }
        
        for (int i = 0; i < extraStudents; i++) {
            int[] c = pq.poll();
            c[0]++;
            c[1]++;
            pq.add(c);
        }
        
        double res = 0;
        while (!pq.isEmpty()) {
            int[] c = pq.poll();
            res += (double)c[0] / c[1];
        }
        
        return res / classes.length;

=======

        PriorityQueue<double[]> pq = new PriorityQueue<>((a, b) -> Double.compare(b[0], a[0]));
        for (int[] c : classes) {
            pq.offer(new double[]{(double) (c[0] + 1) / (c[1] + 1) - (double) c[0] / c[1], c[0], c[1]});
        }
        while (extraStudents-- > 0) {
            double[] c = pq.poll();
            c[1]++;
            c[2]++;
            pq.offer(new double[]{(double) (c[1] + 1) / (c[2] + 1) - (double) c[1] / c[2], c[1], c[2]});
        }
        double res = 0;
        while (!pq.isEmpty()) {
            double[] c = pq.poll();
            res += (double) c[1] / c[2];
        }
        return res / classes.length;

=======

        PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> {
            double diff1 = (double)(a[0] + 1) / (a[1] + 1) - (double)a[0] / a[1];
            double diff2 = (double)(b[0] + 1) / (b[1] + 1) - (double)b[0] / b[1];
            return Double.compare(diff2, diff1);
        });
        for (int[] c : classes) {
            pq.offer(c);
        }
        while (extraStudents > 0) {
            int[] c = pq.poll();
            c[0]++;
            c[1]++;
            pq.offer(c);
            extraStudents--;
        }
        double res = 0;
        while (!pq.isEmpty()) {
            int[] c = pq.poll();
            res += (double)c[0] / c[1];
        }
        return res / classes.length;

=======

        PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> Double.compare(b[0] / (double)b[1] - (b[0] + 1) / (double)(b[1] + 1), a[0] / (double)a[1] - (a[0] + 1) / (double)(a[1] + 1)));
        for (int[] c : classes) {
            pq.offer(c);
        }
        while (extraStudents-- > 0) {
            int[] c = pq.poll();
            c[0]++;
            c[1]++;
            pq.offer(c);
        }
        double res = 0.0;
        while (!pq.isEmpty()) {
            int[] c = pq.poll();
            res += c[0] / (double)c[1];
        }
        return res / classes.length;

=======

        PriorityQueue<double[]> pq = new PriorityQueue<>((a,b) -> Double.compare(b[0], a[0]));
        for (int[] c : classes) {
            double pass = c[0];
            double total = c[1];
            double ratio = (pass + 1) / (total + 1) - pass / total;
            pq.offer(new double[]{ratio, pass, total});
        }
        for (int i = 0; i < extraStudents; i++) {
            double[] c = pq.poll();
            c[1]++;
            c[2]++;
            double ratio = (c[1] + 1) / (c[2] + 1) - c[1] / c[2];
            pq.offer(new double[]{ratio, c[1], c[2]});
        }
        double sum = 0;
        while (!pq.isEmpty()) {
            double[] c = pq.poll();
            sum += c[1] / c[2];
        }
        return sum / classes.length;

=======

        PriorityQueue<int[]> pq = new PriorityQueue<int[]>((a,b)->{
            double x = (a[0]+1.0)/(a[1]+1.0) - a[0]*1.0/a[1];
            double y = (b[0]+1.0)/(b[1]+1.0) - b[0]*1.0/b[1];
            return y-x>0?1:-1;
        });
        for(int[] c:classes){
            pq.offer(c);
        }
        while(extraStudents-->0){
            int[] c = pq.poll();
            c[0]++;
            c[1]++;
            pq.offer(c);
        }
        double sum = 0;
        while(!pq.isEmpty()){
            int[] c = pq.poll();
            sum += c[0]*1.0/c[1];
        }
        return sum/classes.length;

=======

        PriorityQueue<double[]> pq = new PriorityQueue<>((a, b) -> Double.compare(b[1], a[1]));
        double sum = 0;
        for (int[] cl : classes) {
            double pass = cl[0];
            double total = cl[1];
            double ratio = pass / total;
            double ratioDiff = (pass + 1) / (total + 1) - ratio;
            sum += ratio;
            pq.add(new double[]{total, ratioDiff});
        }
        while (extraStudents-- > 0) {
            double[] top = pq.poll();
            sum += top[1];
            double total = top[0];
            pq.add(new double[]{total, (top[0] + 2) / (top[0] + 1) - (top[0] + 1) / (top[0] + 1)});
        }
        return sum / classes.length;
