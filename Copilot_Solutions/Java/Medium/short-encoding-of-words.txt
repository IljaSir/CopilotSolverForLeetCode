Synthesizing 10/10 solutions (Duplicates hidden)

=======

        Set<String> good = new HashSet(Arrays.asList(words));
        for (String word: words) {
            for (int k = 1; k < word.length(); ++k)
                good.remove(word.substring(k));
        }

        int ans = 0;
        for (String word: good)
            ans += word.length() + 1;
        return ans;

=======

        Set<String> set = new HashSet<>(Arrays.asList(words));
        for (String word : words) {
            for (int i = 1; i < word.length(); i++) {
                set.remove(word.substring(i));
            }
        }
        int ans = 0;
        for (String word : set) {
            ans += word.length() + 1;
        }
        return ans;

=======

        Trie trie = new Trie();
        for (String word : words) {
            trie.insert(word);
        }
        return trie.count();
    }
}

=======

        int result = 0;
        Set<String> s = new HashSet<>(Arrays.asList(words));
        for (String word : words) {
            for (int i = 1; i < word.length(); i++) {
                s.remove(word.substring(i));
            }
        }
        for (String word : s) {
            result += word.length() + 1;
        }
        return result;

=======

        int n = words.length;
        int[] lens = new int[n];
        for (int i = 0; i < n; i++) {
            lens[i] = words[i].length();
        }
        Arrays.sort(lens);
        int ans = 0;
        for (int i = n - 1; i >= 0; i--) {
            int len = lens[i];
            if (i == n - 1 || lens[i + 1] != len) {
                ans += len + 1;
            } else {
                i--;
            }
        }
        return ans;

=======

        Trie trie = new Trie();
        for (int i = 0; i < words.length; i++) {
            trie.insert(words[i], i);
        }
        int[] dp = new int[words.length];
        return trie.dfs(dp);
    }
}

=======

        HashSet<String> set = new HashSet<String>();
        for (String word: words) {
            set.add(word);
        }
        
        for (String word: words) {
            for (int i=1; i<word.length(); i++) {
                set.remove(word.substring(i));
            }
        }
        
        int result = 0;
        for (String word: set) {
            result += word.length() + 1;
        }
        
        return result;

=======

        Trie trie = new Trie();
        for (String w : words) {
            trie.insert(w);
        }
        return trie.count();
    }
}
