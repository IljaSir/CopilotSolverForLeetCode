Synthesizing 10/10 solutions

=======

        if (n == 1) {
            if (k == 1) {
                return "a";
            } else if (k == 2) {
                return "b";
            } else if (k == 3) {
                return "c";
            } else {
                return "";
            }
        }
        int[] dp = new int[n];
        dp[0] = 3;
        dp[1] = 9;
        for (int i = 2; i < n; i++) {
            dp[i] = dp[i - 1] * 2;
        }
        if (k > dp[n - 1]) {
            return "";
        }
        char[] chars = new char[]{'a', 'b', 'c'};
        StringBuilder sb = new StringBuilder();
        int index = n - 1;
        while (index >= 0) {
            if (k <= dp[index]) {
                if (index == n - 1) {
                    sb.append(chars[(k - 1) % 3]);
                } else {
                    sb.append(chars[(k - 1) % 3 == 0 ? 2 : (k - 1) % 3 - 1]);
                }
                index--;
            } else {
                k -= dp[index];
            }
        }
        return sb.toString();

=======

        if (n == 1) {
            if (k == 1) return "a";
            if (k == 2) return "b";
            if (k == 3) return "c";
            return "";
        }
        int[] count = new int[3];
        count[0] = count[1] = count[2] = (int) Math.pow(2, n - 1);
        int i = 0;
        while (i < 3) {
            if (k <= count[i]) {
                StringBuilder sb = new StringBuilder();
                sb.append((char) (i + 'a'));
                while (sb.length() < n) {
                    int j = 0;
                    while (j < 3) {
                        if (j != i && j != sb.charAt(sb.length() - 1) - 'a') {
                            if (k > count[j]) {
                                k -= count[j];
                            } else {
                                sb.append((char) (j + 'a'));
                                break;
                            }
                        }
                        j++;
                    }
                }
                return sb.toString();
            } else {
                k -= count[i];
                i++;
            }
        }
        return "";

=======

        char[] chars = new char[]{'a', 'b', 'c'};
        StringBuilder sb = new StringBuilder();
        return dfs(chars, sb, n, k);
    }
    
    private String dfs(char[] chars, StringBuilder sb, int n, int k) {
        if (sb.length() == n) {
            k--;
            return k == 0 ? sb.toString() : "";
        }
        for (int i = 0; i < chars.length; i++) {
            if (sb.length() == 0 || sb.charAt(sb.length() - 1) != chars[i]) {
                sb.append(chars[i]);
                String res = dfs(chars, sb, n, k);
                if (!"".equals(res)) {
                    return res;
                }
                sb.deleteCharAt(sb.length() - 1);
            }
        }
        return "";

=======

        List<String> list = new ArrayList<>();
        char[] chars = new char[]{'a', 'b', 'c'};
        for (int i = 0; i < chars.length; i++) {
            list.add(String.valueOf(chars[i]));
        }
        for (int i = 1; i < n; i++) {
            List<String> nextList = new ArrayList<>();
            for (String s : list) {
                for (int j = 0; j < chars.length; j++) {
                    if (s.charAt(s.length() - 1) != chars[j]) {
                        nextList.add(s + chars[j]);
                    }
                }
            }
            list = nextList;
        }
        if (list.size() < k) {
            return "";
        }
        Collections.sort(list);
        return list.get(k - 1);

=======

        if (n == 1) {
            if (k > 3) {
                return "";
            }
            return String.valueOf((char) ('a' + k - 1));
        }
        int total = 1;
        for (int i = 1; i < n; i++) {
            total *= 2;
        }
        if (k > 3 * total) {
            return "";
        }
        int start = 1;
        for (int i = 1; i < n; i++) {
            start *= 2;
        }
        if (k <= total) {
            return String.valueOf((char) ('a')) + getHappyString(n - 1, k);
        }
        if (k <= 2 * total) {
            return String.valueOf((char) ('b')) + getHappyString(n - 1, k - total);
        }
        return String.valueOf((char) ('c')) + getHappyString(n - 1, k - 2 * total);

=======

        int total = (int) Math.pow(2, n - 1);
        if (k > 3 * total) return "";
        int idx = k % total;
        if (idx == 0) idx = total;
        String str = "";
        for (int i = 0; i < n; i++) {
            int bit = (idx - 1) % 2;
            idx = (idx - 1) / 2;
            if (i == 0) {
                if (bit == 0) str += "a";
                else if (bit == 1) str += "b";
                else str += "c";
            } else {
                if (bit == 0) {
                    if (str.charAt(i - 1) == 'a') str += "b";
                    else str += "a";
                } else if (bit == 1) {
                    if (str.charAt(i - 1) == 'b') str += "c";
                    else str += "b";
                } else {
                    if (str.charAt(i - 1) == 'c') str += "a";
                    else str += "c";
                }
            }
        }
        return str;

=======

        return getHappyString(n, k, "a");
    }
    
    public String getHappyString(int n, int k, String s) {
        if (n == 0) {
            return s;
        }
        if (k > 3 * Math.pow(2, n - 1)) {
            return "";
        }
        char[] letters = {'a', 'b', 'c'};
        for (char c : letters) {
            if (c != s.charAt(s.length() - 1)) {
                String str = getHappyString(n - 1, k, s + c);
                if (!str.isEmpty()) {
                    return str;
                }
                k -= Math.pow(2, n - 1);
            }
        }
        return "";

=======

        int[] count = new int[3];
        Arrays.fill(count, n);
        int total = 3 * (int)Math.pow(2, n - 1);
        if (k > total) {
            return "";
        }
        int[] pos = new int[3];
        Arrays.fill(pos, 1);
        while (true) {
            int index = 0;
            int min = Integer.MAX_VALUE;
            for (int i = 0; i < 3; i++) {
                if (pos[i] == 1 && count[i] < min) {
                    min = count[i];
                    index = i;
                }
            }
            if (k <= total / 3) {
                return getString(index, n);
            }
            k -= total / 3;
            total /= 3;
            count[index]--;
            pos[index] = 0;
            for (int i = 0; i < 3; i++) {
                if (i != index) {
                    pos[i] = 1;
                }
            }
        }
    }

    private String getString(int index, int n) {
        StringBuilder sb = new StringBuilder();
        sb.append((char)('a' + index));
        while (sb.length() < n) {
            sb.append((char)('a' + 3 - index - sb.charAt(sb.length() - 1) + 'a'));
        }
        return sb.toString();

=======

        int count = 0;
        String res = "";
        for (int i = 0; i < 3; i++) {
            res += (char)('a' + i);
            count = helper(n, k, count, res);
            if (count >= k) {
                return res;
            }
            res = res.substring(0, res.length() - 1);
        }
        return "";
    }
    private int helper(int n, int k, int count, String res) {
        if (res.length() == n) {
            return count + 1;
        }
        for (int i = 0; i < 3; i++) {
            if ((char)('a' + i) != res.charAt(res.length() - 1)) {
                res += (char)('a' + i);
                count = helper(n, k, count, res);
                if (count >= k) {
                    return count;
                }
                res = res.substring(0, res.length() - 1);
            }
        }
        return count;

=======

        List<String> happyStrings = new ArrayList<>();
        char[] letters = new char[] {'a', 'b', 'c'};
        StringBuilder sb = new StringBuilder();
        dfs(n, k, 0, letters, sb, happyStrings);
        return happyStrings.size() < k ? "" : happyStrings.get(k - 1);
    }
    
    private void dfs(int n, int k, int idx, char[] letters, StringBuilder sb, List<String> happyStrings) {
        if (sb.length() == n) {
            happyStrings.add(sb.toString());
            return;
        }
        for (int i = 0; i < letters.length; i++) {
            if (sb.length() > 0 && sb.charAt(sb.length() - 1) == letters[i]) {
                continue;
            }
            sb.append(letters[i]);
            dfs(n, k, idx + 1, letters, sb, happyStrings);
            sb.deleteCharAt(sb.length() - 1);
        }
