Synthesizing 10/10 solutions

=======

        int n = nums.length;
        int[] prefix = new int[n];
        prefix[0] = nums[0];
        for (int i = 1; i < n; i++) {
            prefix[i] = prefix[i - 1] + nums[i];
        }
        int[] suffix = new int[n];
        suffix[n - 1] = nums[n - 1];
        for (int i = n - 2; i >= 0; i--) {
            suffix[i] = suffix[i + 1] + nums[i];
        }
        for (int i = 1; i < n - 1; i++) {
            if (prefix[i] % 2 == 0 && prefix[i] == prefix[i - 1] * 2) {
                return true;
            }
            if (suffix[i] % 2 == 0 && suffix[i] == suffix[i + 1] * 2) {
                return true;
            }
        }
        return false;

=======

        int n = nums.length;
        int[] left = new int[n];
        int[] right = new int[n];
        left[0] = nums[0];
        for (int i = 1; i < n; i++) {
            left[i] = left[i - 1] ^ nums[i];
        }
        right[n - 1] = nums[n - 1];
        for (int i = n - 2; i >= 0; i--) {
            right[i] = right[i + 1] ^ nums[i];
        }
        for (int i = 1; i < n - 1; i++) {
            if (left[i - 1] == right[i + 1]) {
                return true;
            }
        }
        return false;

=======

        int n = nums.length;
        int[] prefix = new int[n];
        prefix[0] = nums[0];
        for (int i = 1; i < n; ++i) {
            prefix[i] = prefix[i - 1] ^ nums[i];
        }
        int[] suffix = new int[n];
        suffix[n - 1] = nums[n - 1];
        for (int i = n - 2; i >= 0; --i) {
            suffix[i] = suffix[i + 1] ^ nums[i];
        }
        for (int i = 0; i < n - 1; ++i) {
            if (prefix[i] == 0) {
                for (int j = i + 1; j < n - 1; ++j) {
                    if (prefix[j] == 0 && suffix[j + 1] == 0) {
                        return true;
                    }
                }
            }
        }
        return false;

=======

        int[] count = new int[1000001];
        for (int i = 0; i < nums.length; i++) {
            count[nums[i]]++;
        }
        int[] left = new int[1000001];
        int[] right = new int[1000001];
        for (int i = 1; i < 1000001; i++) {
            left[i] = left[i - 1] + count[i];
            right[i] = right[i - 1] + (left[i] == 0 ? 0 : count[i]);
        }
        for (int i = 1; i < 1000001; i++) {
            if (left[i] == 0) {
                continue;
            }
            if (count[i] == left[i]) {
                return true;
            }
            if (count[i] == left[i] - 1) {
                if (i < 1000000 && count[i + 1] > 0) {
                    return true;
                }
                if (i > 1 && count[i - 1] > 0) {
                    return true;
                }
            }
        }
        return false;

=======

        int n = nums.length;
        int[] count = new int[1000001];
        for (int i = 0; i < n; ++i) {
            ++count[nums[i]];
        }
        int i = 0;
        while (i < n && count[nums[i]] == 1) {
            ++i;
        }
        int j = n - 1;
        while (j >= i && count[nums[j]] == 1) {
            --j;
        }
        if (i == j) {
            return false;
        }
        int x = nums[i];
        while (i < n && nums[i] == x) {
            ++i;
        }
        while (i < n && count[nums[i]] == 1) {
            ++i;
        }
        int y = nums[j];
        while (j >= 0 && nums[j] == y) {
            --j;
        }
        while (j >= 0 && count[nums[j]] == 1) {
            --j;
        }
        if (i == j) {
            return true;
        }
        if (x + 1 == y && count[x] >= 2 && count[y] >= 2) {
            return true;
        }
        return false;

=======

        int n = nums.length;
        int[] count = new int[1000001];
        for (int num : nums) {
            count[num]++;
        }
        int a = -1, b = -1, c = -1;
        for (int num : nums) {
            if (count[num] >= 2) {
                a = num;
                break;
            }
        }
        for (int num : nums) {
            if (count[num] >= 3) {
                b = num;
                break;
            }
        }
        for (int i = 0; i < n - 2; i++) {
            if (nums[i] == nums[i + 1] - 1 && nums[i + 1] == nums[i + 2] - 1) {
                c = nums[i];
                break;
            }
        }
        return a != -1 || b != -1 || c != -1;

=======

        int len = nums.length;
        int[] count = new int[1000001];
        int[] less = new int[1000001];
        int[] more = new int[1000001];
        for (int n : nums) {
            count[n]++;
        }
        for (int i = 1; i <= 1000000; i++) {
            less[i] = less[i - 1] + count[i - 1];
        }
        for (int i = 1000000; i >= 1; i--) {
            more[i] = more[i + 1] + count[i + 1];
        }
        for (int i = 1; i <= 1000000; i++) {
            if (count[i] >= 2 && less[i] >= 1) {
                return true;
            }
            if (count[i] >= 3) {
                return true;
            }
            if (count[i] >= 1 && i <= 1000000 - 2 && more[i + 2] >= 1) {
                return true;
            }
        }
        return false;

=======

        int len = nums.length;
        int[] counts = new int[1000001];
        int[] maxes = new int[1000001];
        int[] mins = new int[1000001];
        Arrays.fill(mins, Integer.MAX_VALUE);
        for (int num : nums) {
            counts[num]++;
            maxes[num] = Math.max(maxes[num], num);
            mins[num] = Math.min(mins[num], num);
        }
        int[] freq = new int[4];
        for (int i = 0; i < counts.length; i++) {
            if (counts[i] > 0) {
                freq[counts[i]]++;
                if (freq[2] > 0 && freq[3] > 0) {
                    return true;
                }
                if (freq[3] > 0 && i - mins[i] == 2) {
                    return true;
                }
                if (freq[2] > 0 && maxes[i] - mins[i] == 2) {
                    return true;
                }
            }
        }
        return false;

=======

        int[] cnt = new int[1000001];
        for (int n : nums) {
            cnt[n]++;
        }
        int prev = -1, prevCnt = 0;
        for (int i = 1; i <= 1000000; i++) {
            if (cnt[i] == 0) {
                continue;
            }
            if (prev == i - 1) {
                if (cnt[i] == 1) {
                    if (prevCnt > 1) {
                        prev = i;
                        prevCnt = cnt[i];
                    } else {
                        return false;
                    }
                } else if (cnt[i] == 2) {
                    prev = i;
                    prevCnt = cnt[i];
                } else {
                    return false;
                }
            } else {
                if (cnt[i] > 2) {
                    return false;
                } else {
                    prev = i;
                    prevCnt = cnt[i];
                }
            }
        }
        return true;

=======

        int len = nums.length;
        int[] cnt = new int[1000001];
        for (int x : nums) {
            cnt[x]++;
        }
        int[] right = new int[1000001];
        for (int i = 1; i <= 1000000; i++) {
            right[i] = right[i - 1] + cnt[i];
        }
        int[] left = new int[1000001];
        for (int i = 1000000; i >= 1; i--) {
            left[i] = left[i + 1] + cnt[i];
        }
        for (int i = 2; i <= 1000000; i++) {
            if (cnt[i] > 0) {
                if (cnt[i] >= 2) {
                    return true;
                }
                if (i > 1 && cnt[i - 1] > 0) {
                    return true;
                }
                if (i < 1000000 && cnt[i + 1] > 0) {
                    return true;
                }
                if (i > 2 && right[i - 2] > 0) {
                    return true;
                }
                if (i < 1000000 && left[i + 2] > 0) {
                    return true;
                }
            }
        }
        return false;
