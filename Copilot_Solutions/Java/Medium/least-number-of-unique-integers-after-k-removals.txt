Synthesizing 10/10 solutions

=======

        Map<Integer, Integer> map = new HashMap<>();
        for (int i = 0; i < arr.length; i++) {
            map.put(arr[i], map.getOrDefault(arr[i], 0) + 1);
        }
        PriorityQueue<Integer> pq = new PriorityQueue<>(new Comparator<Integer>() {
            @Override
            public int compare(Integer o1, Integer o2) {
                return map.get(o1) - map.get(o2);
            }
        });
        for (int key : map.keySet()) {
            pq.offer(key);
        }
        while (k > 0) {
            int key = pq.poll();
            int value = map.get(key);
            if (value <= k) {
                k -= value;
                map.remove(key);
            } else {
                map.put(key, value - k);
                k = 0;
            }
        }
        return map.size();

=======

        Map<Integer, Integer> map = new HashMap<>();
        for (int i = 0; i < arr.length; i++) {
            map.put(arr[i], map.getOrDefault(arr[i], 0) + 1);
        }
        List<Integer> list = new ArrayList<>(map.values());
        Collections.sort(list);
        int count = 0;
        for (int i = 0; i < list.size(); i++) {
            if (k >= list.get(i)) {
                k -= list.get(i);
                count++;
            } else {
                break;
            }
        }
        return list.size() - count;

=======

        Map<Integer, Integer> map = new HashMap<>();
        for (int i : arr) {
            map.put(i, map.getOrDefault(i, 0) + 1);
        }
        List<Integer> list = new ArrayList<>(map.values());
        Collections.sort(list);
        int i = 0;
        while (i < list.size() && k > 0) {
            k -= list.get(i);
            i++;
        }
        return k >= 0 ? list.size() - i : list.size() - i + 1;

=======

        Map<Integer, Integer> map = new HashMap<>();
        for (int i : arr) {
            map.put(i, map.getOrDefault(i, 0) + 1);
        }
        PriorityQueue<Map.Entry<Integer, Integer>> pq = new PriorityQueue<>(map.size(), (a, b) -> a.getValue() - b.getValue());
        for (Map.Entry<Integer, Integer> e : map.entrySet()) {
            pq.offer(e);
        }
        while (k > 0) {
            Map.Entry<Integer, Integer> e = pq.poll();
            e.setValue(e.getValue() - 1);
            if (e.getValue() > 0) {
                pq.offer(e);
            }
            k--;
        }
        return pq.size();

=======

        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (int i = 0; i < arr.length; i++) {
            if (map.containsKey(arr[i])) {
                map.put(arr[i], map.get(arr[i]) + 1);
            } else {
                map.put(arr[i], 1);
            }
        }
        List<Integer> list = new ArrayList<Integer>(map.values());
        Collections.sort(list);
        int index = 0;
        while (k > 0) {
            k -= list.get(index);
            index++;
        }
        return k == 0 ? list.size() - index : list.size() - index + 1;

=======

        HashMap<Integer, Integer> map = new HashMap<>();
        for (int i : arr) {
            map.put(i, map.getOrDefault(i, 0) + 1);
        }
        PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> a[1] - b[1]);
        for (int i : map.keySet()) {
            pq.add(new int[] {i, map.get(i)});
        }
        while (k > 0) {
            int[] temp = pq.poll();
            if (temp[1] <= k) {
                k -= temp[1];
            } else {
                pq.add(new int[] {temp[0], temp[1] - k});
                k = 0;
            }
        }
        return pq.size();

=======

        var map = new HashMap<Integer, Integer>();
        for (var a : arr) {
            map.put(a, map.getOrDefault(a, 0) + 1);
        }
        var list = new ArrayList<Integer>(map.values());
        Collections.sort(list);
        var count = 0;
        for (var i = 0; i < list.size(); i++) {
            if (k >= list.get(i)) {
                k -= list.get(i);
                count++;
            }
        }
        return list.size() - count;

=======

        int[] count = new int[100001];
        for (int n : arr) {
            count[n]++;
        }
        Arrays.sort(count);
        int i = 0;
        while (k > 0) {
            k -= count[i++];
        }
        return k == 0 ? 100000 - i : 100000 - i + 1;

=======

        int[] freq = new int[100001];
        for (int i : arr) {
            freq[i]++;
        }
        Arrays.sort(freq);
        int i = 0;
        while (k > 0) {
            k -= freq[i];
            i++;
        }
        if (k < 0) {
            i--;
        }
        return 100001 - i;

=======

        int[] counts = new int[100001];
        for (int x : arr) {
            counts[x]++;
        }
        Arrays.sort(counts);
        int i = 0;
        while (k > 0) {
            k -= counts[i];
            i++;
        }
        return k == 0 ? counts.length - i : counts.length - i + 1;
