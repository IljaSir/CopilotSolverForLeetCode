Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int count = 0;
        for (int i = 0; i < nums.length; i++) {
            for (int j = 0; j < nums.length; j++) {
                if (i != j) {
                    if (nums[i].concat(nums[j]).equals(target)) {
                        count++;
                    }
                }
            }
        }
        return count;

=======

        int count = 0;
        for (int i = 0; i < nums.length; i++) {
            for (int j = 0; j < nums.length; j++) {
                if (i != j && nums[i].concat(nums[j]).equals(target)) {
                    count++;
                }
            }
        }
        return count;

=======

        int count = 0;
        for (int i = 0; i < nums.length; i++) {
            for (int j = 0; j < nums.length; j++) {
                if (i == j) {
                    continue;
                }
                if (nums[i].length() + nums[j].length() != target.length()) {
                    continue;
                }
                String c = nums[i] + nums[j];
                if (c.equals(target)) {
                    count++;
                }
            }
        }
        return count;

=======

        int result = 0;
        for (int i = 0; i < nums.length; i++) {
            for (int j = 0; j < nums.length; j++) {
                if (i == j) {
                    continue;
                }
                if (nums[i].length() + nums[j].length() != target.length()) {
                    continue;
                }
                if (target.equals(nums[i] + nums[j])) {
                    result++;
                }
            }
        }
        return result;

=======

        int res = 0;
        for (int i = 0; i < nums.length; i++) {
            for (int j = 0; j < nums.length; j++) {
                if (i != j && nums[i].concat(nums[j]).equals(target)) {
                    res++;
                }
            }
        }
        return res;

=======

        int result = 0;
        for (int i = 0; i < nums.length; i++) {
            for (int j = 0; j < nums.length; j++) {
                if (i == j) {
                    continue;
                }
                if (nums[i].length() + nums[j].length() != target.length()) {
                    continue;
                }
                if (nums[i].equals(target.substring(0, nums[i].length())) && nums[j].equals(target.substring(nums[i].length()))) {
                    result++;
                }
                if (nums[j].equals(target.substring(0, nums[j].length())) && nums[i].equals(target.substring(nums[j].length()))) {
                    result++;
                }
            }
        }
        return result;

=======

        int res = 0;
        for (int i = 0; i < nums.length; i++) {
            for (int j = 0; j < nums.length; j++) {
                if (i != j && nums[i].length() + nums[j].length() == target.length()) {
                    if (target.equals(nums[i] + nums[j])) {
                        res++;
                    }
                }
            }
        }
        return res;

=======

        int result = 0;
        for (int i = 0; i < nums.length; i++) {
            for (int j = 0; j < nums.length; j++) {
                if (i != j) {
                    if (nums[i].concat(nums[j]).equals(target)) {
                        result++;
                    }
                }
            }
        }
        return result;

=======

        int count = 0;
        for (int i = 0; i < nums.length; i++) {
            for (int j = 0; j < nums.length; j++) {
                if (i != j && target.equals(nums[i] + nums[j])) {
                    count++;
                }
            }
        }
        return count;
