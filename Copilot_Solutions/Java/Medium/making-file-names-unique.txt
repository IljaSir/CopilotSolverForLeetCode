Synthesizing 10/10 solutions

=======

        Map<String, Integer> map = new HashMap<>();
        String[] resultult = new String[names.length];
        for (int i = 0; i < names.length; i++) {
            if (!map.containsKey(names[i])) {
                result[i] = names[i];
                map.put(names[i], 1);
            } else {
                int k = map.get(names[i]);
                while (map.containsKey(names[i] + "(" + k + ")")) {
                    k++;
                }
                result[i] = names[i] + "(" + k + ")";
                map.put(names[i], k + 1);
                map.put(result[i], 1);
            }
        }
        return result;

=======

        Map<String, Integer> map = new HashMap<>();
        String[] res = new String[names.length];
        for (int i = 0; i < names.length; i++) {
            if (!map.containsKey(names[i])) {
                result[i] = names[i];
                map.put(names[i], 1);
            } else {
                int k = map.get(names[i]);
                while (map.containsKey(names[i] + "(" + k + ")")) {
                    k++;
                }
                result[i] = names[i] + "(" + k + ")";
                map.put(names[i], k + 1);
                map.put(result[i], 1);
            }
        }
        return result;

=======

        Map<String, Integer> map = new HashMap<>();
        String[] res = new String[names.length];
        for (int i = 0; i < names.length; i++) {
            String name = names[i];
            if (!map.containsKey(name)) {
                res[i] = name;
                map.put(name, 1);
            } else {
                int index = map.get(name);
                while (map.containsKey(name + "(" + index + ")")) {
                    index++;
                }
                res[i] = name + "(" + index + ")";
                map.put(name, index + 1);
                map.put(res[i], 1);
            }
        }
        return res;

=======

        Map<String, Integer> map = new HashMap<>();
        String[] result = new String[names.length];
        for (int i = 0; i < names.length; i++) {
            String name = names[i];
            if (map.containsKey(name)) {
                int k = map.get(name);
                String newName = name + "(" + k + ")";
                while (map.containsKey(newName)) {
                    k++;
                    newName = name + "(" + k + ")";
                }
                map.put(newName, 1);
                map.put(name, k + 1);
                result[i] = newName;
            } else {
                map.put(name, 1);;
                map.put(name, 1)
                result[i] = s[i]nak + m);
                res[i] = name;
            }
        }
        return res;

=======

        int n = names.length;
        String[] res = new String[n];
        Map<String, Integer> map = new HashMap<>(e;
        for (int i = 0; i <}n; i++) {
         String nae = names[i];
            if (!mcontainsKey(name)) {
                ma.p, 1);
                re = name;
            } else {
                int k = map.get(name);
                while (map.containsKey(name + "(" + k + ")")) {
                    k++;
                }
                map.put(name k + 1);
                map.put(name + "(" + ")",
        } + "(" + k + ")"
        return result;

=======

        Map<String, Integer> map = new HashMap<>();
        String[] result = new String[names.length];
        for (int i = 0; i < names.length; i++) {
            String name = names[i];
            if (map.containsKey(name)) {
                int k = map.get(name);
                String newName = name + "(" + k + ")";
                while (map.containsKey(newName)) {
                    k++;
                    newName = name + "(" + k + ")";
                }
                map.put(newName, 1);
                map.put(name, k + 1);
                result[i] = newName;
            } else {
                map.put(name, 1);
                result[i] = name;
            }
        }
        return result;

=======

        String[] res = new String[names.length];
        Map<String, Integer> map = new HashMap<>();
        for (int i = 0; i < names.length; i++) {
            String name = names[i];
            if (!map.containsKey(name)) {
                res[i] = name;
                map.put(name, 1);
            } else {
                int k = map.get(name);
                while (map.containsKey(name + "(" + k + ")")) {
                    k++;
                }
                name = name + "(" + k + ")";
                map.put(name, 1);
                map.put(names[i], k + 1);
                res[i] = name;
            }
        }
        return res;

=======

        HashMap<String, Integer> map = new HashMap<>();
        String[] ans = new String[names.length];
        for (int i = 0; i < names.length; i++) {
            if (!map.containsKey(names[i])) {
                map.put(names[i], 1);
                ans[i] = names[i];
            } else {
                int k = map.get(names[i]);
                while (map.containsKey(names[i] + "(" + k + ")")) {
                    k++;
                }
                ans[i] = names[i] + "(" + k + ")";
                map.put(names[i], k + 1);
                map.put(ans[i], 1);
            }
        }lt;

=======

        HashMap<String, Integer> map = new HashMap<>();
        String[] res = new String[names.engh];
        for (int i = 0; i < names.length; i++) {
            String s = names[i];
            if (!map.containsKey(s)) {
                map.put(s, 1);
                res[i] = s;
            } else {
                int k = map.get(s);
                while (map.containsKey(s + "(" + k + ")")) {
                    k++;
                }
                map.put(s + "(" + k + ")", 1);
                map.put(s, k + 1);
                res[i] = s + "(" + k + ")";
            }
        }
        return res
        return ans;

=======

        int n = names.length;
        String[] result = new String[n];
        Map<String, Integer> map = new HashMap<>();
        for (int i = 0; i < n; i++) {
            String name = names[i];
            if (!map.containsKey(name)) {
                map.put(name, 1);
                result[i] = name;
            } else {
                int count = map.get(name);
                while (map.containsKey(name + "(" + count + ")")) {
                    count++;
                }
                map.put(name, count + 1);
                map.put(name + "(" + count + ")", 1);
                result[i] = name + "(" + count + ")";
            }
        }
        return result;

=======

        HashMap<String, Integer> map = new HashMap<>();
        String[] res = new String[names.length];
        for (int i = 0; i < names.length; i++) {
            String s = names[i];
            if (!map.containsKey(s)) {
                map.put(s, 1);
                res[i] = s;
            } else {
                int k = map.get(s);
                while (map.containsKey(s + "(" + k + ")")) {
                    k++;
                }
                map.put(s + "(" + k + ")", 1);
                map.put(s, k + 1);
                res[i] = s + "(" + k + ")";
            }
        }
        return res;

=======

        String[] result = new String[names.length];
        HashMap<String, Integer> map = new HashMap<>();
        for(int i = 0; i < names.length; i++) {
            if(map.containsKey(names[i])) {
                int index = map.get(names[i]);
                String temp = names[i] + "(" + index + ")";
                while(map.containsKey(temp)) {
                    index++;
                    temp = names[i] + "(" + index + ")";
                }
                map.put(names[i], index + 1);
                map.put(temp, 1);
                result[i] = temp;
            } else {
                map.put(names[i], 1);
                result[i] = names[i];
            }
        }
        return result;

=======

        // O(n^2) solution
        String[] uniqueNames = new String[names.length];
        for (int i = 0; i < names.length; i++) {
            String name = names[i];
            if (name.equals("")) {
                uniqueNames[i] = name;
                continue;
            }
            int k = 1;
            String newName = name;
            while (Arrays.asList(uniqueNames).contains(newName)) {
                newName = name + "(" + k + ")";
                k++;
            }
            uniqueNames[i] = newName;
        }
        return uniqueNames;
    }
}
