Synthesizing 10/10 solutions

=======

        int n = nums.length;
        int[] odd = new int[n];
        int[] even = new int[n];
        for (int i = 0; i < n; i++) {
            if (i % 2 == 0) {
                even[i] = nums[i];
            } else {
                odd[i] = nums[i];
            }
        }
        int[] sumOdd = new int[n];
        int[] sumEven = new int[n];
        sumOdd[0] = odd[0];
        sumEven[0] = even[0];
        for (int i = 1; i < n; i++) {
            sumOdd[i] = sumOdd[i - 1] + odd[i];
            sumEven[i] = sumEven[i - 1] + even[i];
        }
        int result = 0;
        for (int i = 0; i < n; i++) {
            int oddSum = 0;
            int evenSum = 0;
            if (i > 0) {
                oddSum += sumOdd[i - 1];
                evenSum += sumEven[i - 1];
            }
            if (i + 1 < n) {
                oddSum += sumEven[n - 1] - sumEven[i];
                evenSum += sumOdd[n - 1] - sumOdd[i];
            }
            if (oddSum == evenSum) {
                result++;
            }
        }
        return result;

=======

        int n = nums.length;
        int[] odd = new int[n];
        int[] even = new int[n];
        int oddSum = 0;
        int evenSum = 0;
        for (int i = 0; i < n; i++) {
            if (i % 2 == 0) {
                evenSum += nums[i];
                even[i] = evenSum;
                odd[i] = oddSum;
            } else {
                oddSum += nums[i];
                odd[i] = oddSum;
                even[i] = evenSum;
            }
        }
        int cnt = 0;
        for (int i = 0; i < n; i++) {
            int leftOdd = i == 0 ? 0 : odd[i - 1];
            int leftEven = i == 0 ? 0 : even[i - 1];
            int rightOdd = i == n - 1 ? 0 : odd[n - 1] - odd[i];
            int rightEven = i == n - 1 ? 0 : even[n - 1] - even[i];
            if (leftOdd + rightEven == leftEven + rightOdd) {
                cnt++;
            }
        }
        return cnt;

=======

        int oddSum = 0;
        int evenSum = 0;
        int[] oddSums = new int[nums.length];
        int[] evenSums = new int[nums.length];
        for (int i = 0; i < nums.length; i++) {
            if (i % 2 == 0) {
                evenSum += nums[i];
                evenSums[i] = evenSum;
            } else {
                oddSum += nums[i];
                oddSums[i] = oddSum;
            }
        }
        int count = 0;
        for (int i = 0; i < nums.length; i++) {
            int leftOdd = i == 0 ? 0 : oddSums[i - 1];
            int rightOdd = oddSum - oddSums[i];
            int leftEven = i == 0 ? 0 : evenSums[i - 1];
            int rightEven = evenSum - evenSums[i];
            if (leftOdd + rightEven == leftEven + rightOdd) {
                count++;
            }
        }
        return count;

=======

        int[] odd = new int[nums.length];
        int[] even = new int[nums.length];
        int oddSum = 0;
        int evenSum = 0;
        for(int i = 0; i < nums.length; i++) {
            if(i % 2 == 0) {
                evenSum += nums[i];
                even[i] = evenSum;
                odd[i] = oddSum;
            } else {
                oddSum += nums[i];
                odd[i] = oddSum;
                even[i] = evenSum;
            }
        }
        int result = 0;
        for(int i = 0; i < nums.length; i++) {
            int oddSum1 = 0;
            int evenSum1 = 0;
            if(i > 0) {
                oddSum1 = odd[i - 1];
                evenSum1 = even[i - 1];
            }
            int oddSum2 = odd[odd.length - 1] - odd[i];
            int evenSum2 = even[even.length - 1] - even[i];
            if(oddSum1 + oddSum2 == evenSum1 + evenSum2) {
                result++;
            }
        }
        return result;

=======

        int n = nums.length;
        int[] odd = new int[n];
        int[] even = new int[n];
        int sumOdd = 0;
        int sumEven = 0;
        for (int i = 0; i < n; i++) {
            if (i % 2 == 0) {
                even[i] = nums[i] + sumEven;
                sumEven = even[i];
                odd[i] = sumOdd;
            } else {
                odd[i] = nums[i] + sumOdd;
                sumOdd = odd[i];
                even[i] = sumEven;
            }
        }
        int res = 0;
        for (int i = 0; i < n; i++) {
            int leftOdd = i - 1 >= 0 ? odd[i - 1] : 0;
            int leftEven = i - 1 >= 0 ? even[i - 1] : 0;
            int rightOdd = i + 1 < n ? odd[n - 1] - odd[i] : 0;
            int rightEven = i + 1 < n ? even[n - 1] - even[i] : 0;
            if (leftOdd + rightEven == leftEven + rightOdd) {
                res++;
            }
        }
        return res;

=======

        int n = nums.length;
        int[] preEven = new int[n];
        int[] preOdd = new int[n];
        for (int i = 0; i < n; i++) {
            if (i % 2 == 0) {
                preEven[i] = nums[i];
                if (i > 0) {
                    preEven[i] += preEven[i - 1];
                }
            } else {
                preOdd[i] = nums[i];
                if (i > 0) {
                    preOdd[i] += preOdd[i - 1];
                }
            }
        }
        int[] sufEven = new int[n];
        int[] sufOdd = new int[n];
        for (int i = n - 1; i >= 0; i--) {
            if (i % 2 == 0) {
                sufEven[i] = nums[i];
                if (i < n - 1) {
                    sufEven[i] += sufEven[i + 1];
                }
            } else {
                sufOdd[i] = nums[i];
                if (i < n - 1) {
                    sufOdd[i] += sufOdd[i + 1];
                }
            }
        }
        int ans = 0;
        for (int i = 0; i < n; i++) {
            int even = 0;
            int odd = 0;
            if (i > 0) {
                even += preEven[i - 1];
                odd += preOdd[i - 1];
            }
            if (i < n - 1) {
                even += sufOdd[i + 1];
                odd += sufEven[i + 1];
            }
            if (even == odd) {
                ans++;
            }
        }
        return ans;

=======

        int oddSum = 0;
        int evenSum = 0;
        int oddSum1 = 0;
        int evenSum1 = 0;
        for (int i = 0; i < nums.length; i++) {
            if (i % 2 == 0) {
                oddSum += nums[i];
            } else {
                evenSum += nums[i];
            }
        }
        int count = 0;
        for (int i = 0; i < nums.length; i++) {
            if (i % 2 == 0) {
                oddSum -= nums[i];
            } else {
                evenSum -= nums[i];
            }
            if (oddSum + evenSum1 == evenSum + oddSum1) {
                count++;
            }
            if (i % 2 == 0) {
                oddSum1 += nums[i];
            } else {
                evenSum1 += nums[i];
            }
        }
        return count;

=======

        int n = nums.length;
        int[] even = new int[n];
        int[] odd = new int[n];
        int sumEven = 0, sumOdd = 0;
        for (int i = 0; i < n; i++) {
            if (i % 2 == 0) {
                sumEven += nums[i];
            } else {
                sumOdd += nums[i];
            }
            even[i] = sumEven;
            odd[i] = sumOdd;
        }
        int res = 0;
        for (int i = 0; i < n; i++) {
            int leftEven = 0, leftOdd = 0;
            if (i - 1 >= 0) {
                leftEven = even[i - 1];
                leftOdd = odd[i - 1];
            }
            int rightEven = sumEven - even[i];
            int rightOdd = sumOdd - odd[i];
            if (leftEven + rightOdd == leftOdd + rightEven) {
                res++;
            }
        }
        return res;

=======

        int n = nums.length;
        int[][] dp = new int[n][2];
        int res = 0;
        for(int i = 0; i < n; i++){
            dp[i][0] += nums[i];
            if(i > 0){
                dp[i][0] += dp[i - 1][1];
            }
            dp[i][1] += dp[i][0];
            if(i > 0){
                dp[i][1] -= nums[i - 1];
            }
        }
        for(int i = 0; i < n; i++){
            int even = 0, odd = 0;
            if(i - 1 >= 0){
                even += dp[i - 1][1];
                odd += dp[i - 1][0];
            }
            if(i + 1 < n){
                even += dp[n - 1][1] - dp[i][1];
                odd += dp[n - 1][0] - dp[i][0];
            }
            if(even == odd){
                res++;
            }
        }
        return res;

=======

        // 1. get sum of odd and even
        // 2. remove one by one
        int evenSum = 0, oddSum = 0;
        for (int i = 0; i < nums.length; i++) {
            if (i % 2 == 0) {
                evenSum += nums[i];
            } else {
                oddSum += nums[i];
            }
        }
        int result = 0;
        for (int i = 0; i < nums.length; i++) {
            if (i % 2 == 0) {
                evenSum -= nums[i];
            } else {
                oddSum -= nums[i];
            }
            if (evenSum == oddSum) {
                result++;
            }
            if (i % 2 == 0) {
                evenSum += nums[i];
            } else {
                oddSum += nums[i];
            }
        }
        return result;
