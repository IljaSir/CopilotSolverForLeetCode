Synthesizing 10/10 solutions

=======

        int m = grid.length, n = grid[0].length;
        int[][] rowSum = new int[m + 1][n + 1];
        int[][] colSum = new int[m + 1][n + 1];
        int[][] diagSum = new int[m + 1][n + 1];
        int[][] antiDiagSum = new int[m + 1][n + 1];
        for (int i = 1; i <= m; ++i) {
            for (int j = 1; j <= n; ++j) {
                rowSum[i][j] = rowSum[i][j - 1] + grid[i - 1][j - 1];
                colSum[i][j] = colSum[i - 1][j] + grid[i - 1][j - 1];
                diagSum[i][j] = diagSum[i - 1][j - 1] + grid[i - 1][j - 1];
                antiDiagSum[i][j] = antiDiagSum[i - 1][j + 1] + grid[i - 1][j - 1];
            }
        }
        int ans = 1;
        for (int i = 1; i <= m; ++i) {
            for (int j = 1; j <= n; ++j) {
                int k = Math.min(m - i + 1, n - j + 1);
                for (; k > ans; --k) {
                    if (rowSum[i][j + k - 1] - rowSum[i][j - 1] != colSum[i + k - 1][j] - colSum[i - 1][j]) {
                        continue;
                    }
                    if (rowSum[i][j + k - 1] - rowSum[i][j - 1] != diagSum[i + k - 1][j + k - 1] - diagSum[i - 1][j - 1]) {
                        continue;
                    }
                    if (rowSum[i][j + k - 1] - rowSum[i][j - 1] != antiDiagSum[i + k - 1][j] - antiDiagSum[i - 1][j + k]) {
                        continue;
                    }
                    ans = k

=======

        int m = grid.length, n = grid[0].length;
        int[][] row = new int[m][n + 1];
        int[][] col = new int[m + 1][n];
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                row[i][j + 1] = row[i][j] + grid[i][j];
                col[i + 1][j] = col[i][j] + grid[i][j];
            }
        }
        for (int len = Math.min(m, n); len >= 1; len--) {
            for (int i = 0; i <= m - len; i++) {
                for (int j = 0; j <= n - len; j++) {
                    int sum = row[i][j + len] - row[i][j];
                    if (check(row, i, j, j + len, sum) && check(col, j, i, i + len, sum)) {
                        if (check(grid, i, j, len, sum)) {
                            return len;
                        }
                    }
                }
            }
        }
        return 1;
    }

    private boolean check(int[][] grid, int row, int col, int len, int sum) {
        int diag1 = 0, diag2 = 0;
        for (int i = 0; i < len; i++) {
            diag1 += grid[row + i][col + i];
            diag2 += grid[row + i][col + len - 1 - i];
            if (grid[row + i][col + i] != grid[row + i][col + len - 1 - i]) {
                return false;
            }
        }
        return diag1 == sum && diag2 == sum;
    }

    private boolean check(int[][] grid, int row, int col, int len, int sum) {
        for (int i = 0; i < len; i++) {
            int r = 0, c = 0;
            for (int j = 0; j < len; j++) {
                r += grid[row + i][col + j];
                c += grid[row + j][col + i];
            }
            if (r != sum || c != sum) {
                return false

=======

        int m = grid.length;
        int n = grid[0].length;
        int[][] rowSum = new int[m][n];
        int[][] colSum = new int[m][n];
        int[][] diagSum = new int[m][n];
        int[][] antiDiagSum = new int[m][n];
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                rowSum[i][j] = grid[i][j];
                if (j > 0) {
                    rowSum[i][j] += rowSum[i][j - 1];
                }
                colSum[i][j] = grid[i][j];
                if (i > 0) {
                    colSum[i][j] += colSum[i - 1][j];
                }
                diagSum[i][j] = grid[i][j];
                if (i > 0 && j > 0) {
                    diagSum[i][j] += diagSum[i - 1][j - 1];
                }
                antiDiagSum[i][j] = grid[i][j];
                if (i > 0 && j < n - 1) {
                    antiDiagSum[i][j] += antiDiagSum[i - 1][j + 1];
                }
            }
        }
        int k = Math.min(m, n);
        for (; k >= 2; k--) {
            for (int i = 0; i + k <= m; i++) {
                for (int j = 0; j + k <= n; j++) {
                    if (check(rowSum, colSum, diagSum, antiDiagSum, i, j, k)) {
                        return k;
                    }
                }
            }
        }
        return k;
    }
    private boolean check(int[][] rowSum, int[][] colSum, int[][] diagSum, int[][] antiDiagSum, int x, int y, int k) {
        int sum = rowSum[x][y + k - 1];
        if (y > 0) {
            sum -= rowSum[x][y - 1];
        }
        for (int i = x; i < x + k; i++) {
            int cur = rowSum[i][y + k - 1];
            if

=======

        int m = grid.length;
        int n = grid[0].length;
        int[][] rowSum = new int[m][n];
        int[][] colSum = new int[m][n];
        int[][] diagSum = new int[m][n];
        int[][] antiDiagSum = new int[m][n];
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                rowSum[i][j] = grid[i][j];
                colSum[i][j] = grid[i][j];
                diagSum[i][j] = grid[i][j];
                antiDiagSum[i][j] = grid[i][j];
                if (i > 0) {
                    rowSum[i][j] += rowSum[i - 1][j];
                }
                if (j > 0) {
                    colSum[i][j] += colSum[i][j - 1];
                }
                if (i > 0 && j > 0) {
                    diagSum[i][j] += diagSum[i - 1][j - 1];
                }
                if (i > 0 && j < n - 1) {
                    antiDiagSum[i][j] += antiDiagSum[i - 1][j + 1];
                }
            }
        }
        int max = 1;
        for (int k = 2; k <= Math.min(m, n); k++) {
            for (int i = 0; i + k - 1 < m; i++) {
                for (int j = 0; j + k - 1 < n; j++) {
                    int row = rowSum[i + k - 1][j];
                    if (i > 0) {
                        row -= rowSum[i - 1][j];
                    }
                    int col = colSum[i][j + k - 1];
                    if (j > 0) {
                        col -= colSum[i][j - 1];
                    }
                    int diag = diagSum[i + k - 1][j + k - 1];
                    if (i > 0 && j > 0) {
                        diag -= diagSum[i - 1][j - 1];
                    }
                    int antiDiag = antiDiagSum[i +

=======

        int m = grid.length;
        int n = grid[0].length;
        int[][] row = new int[m][n];
        int[][] col = new int[m][n];
        int[][] diag = new int[m][n];
        int[][] antiDiag = new int[m][n];
        for (int i = 0; i < m; i++) {
            int sum = 0;
            for (int j = 0; j < n; j++) {
                sum += grid[i][j];
                row[i][j] = sum;
            }
        }
        for (int j = 0; j < n; j++) {
            int sum = 0;
            for (int i = 0; i < m; i++) {
                sum += grid[i][j];
                col[i][j] = sum;
            }
        }
        for (int i = 0; i < m; i++) {
            int sum = 0;
            for (int j = 0; j < n; j++) {
                if (i == 0 || j == 0) {
                    diag[i][j] = grid[i][j];
                } else {
                    diag[i][j] = diag[i - 1][j - 1] + grid[i][j];
                }
            }
        }
        for (int i = 0; i < m; i++) {
            int sum = 0;
            for (int j = n - 1; j >= 0; j--) {
                if (i == 0 || j == n - 1) {
                    antiDiag[i][j] = grid[i][j];
                } else {
                    antiDiag[i][j] = antiDiag[i - 1][j + 1] + grid[i][j];
                }
            }
        }
        int result = 1;
        for (int k = 2; k <= Math.min(m, n); k++) {
            for (int i = k - 1; i < m; i++) {
                for (int j = k - 1; j < n; j++) {
                    int sum = row[i][j];
                    if (j - k >= 0) {
                        sum -= row[i][j - k];
                    }
                    int flag = 0;
                    for (int l

=======

        int m = grid.length;
        int n = grid[0].length;
        int[][] row = new int[m][n];
        int[][] col = new int[m][n];
        int[][] diag = new int[m][n];
        int[][] antiDiag = new int[m][n];
        for (int i = 0; i < m; i++) {
            row[i][0] = grid[i][0];
            for (int j = 1; j < n; j++) {
                row[i][j] = row[i][j - 1] + grid[i][j];
            }
        }
        for (int j = 0; j < n; j++) {
            col[0][j] = grid[0][j];
            for (int i = 1; i < m; i++) {
                col[i][j] = col[i - 1][j] + grid[i][j];
            }
        }
        for (int i = 0; i < m; i++) {
            diag[i][0] = grid[i][0];
            for (int j = 1; j < n; j++) {
                if (i + j < m) {
                    diag[i][j] = diag[i][j - 1] + grid[i + j][j];
                }
            }
        }
        for (int j = 1; j < n; j++) {
            diag[0][j] = grid[0][j];
            for (int i = 1; i < m; i++) {
                if (j + i < n) {
                    diag[i][j] = diag[i - 1][j] + grid[i][j + i];
                }
            }
        }
        for (int i = 0; i < m; i++) {
            antiDiag[i][0] = grid[i][0];
            for (int j = 1; j < n; j++) {
                if (i - j >= 0) {
                    antiDiag[i][j] = antiDiag[i][j - 1] + grid[i - j][j];
                }
            }
        }
        for (int j = 1; j < n; j++) {
            antiDiag[m - 1][j] = grid[m - 1][j];
            for

=======

        int m = grid.length, n = grid[0].length;
        int[][] rowSum = new int[m][n+1];
        int[][] colSum = new int[m+1][n];
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                rowSum[i][j+1] = rowSum[i][j] + grid[i][j];
                colSum[i+1][j] = colSum[i][j] + grid[i][j];
            }
        }
        int len = Math.min(m, n);
        for (int k = len; k >= 1; k--) {
            for (int i = 0; i <= m - k; i++) {
                for (int j = 0; j <= n - k; j++) {
                    if (check(rowSum, colSum, i, j, k)) {
                        return k;
                    }
                }
            }
        }
        return 1;
    }
    private boolean check(int[][] rowSum, int[][] colSum, int i, int j, int k) {
        int sum = rowSum[i][j+k] - rowSum[i][j];
        for (int x = 1; x < k; x++) {
            if (rowSum[i+x][j+k] - rowSum[i+x][j] != sum) {
                return false;
            }
        }
        for (int y = 0; y < k; y++) {
            if (colSum[i+k][j+y] - colSum[i][j+y] != sum) {
                return false;
            }
        }
        int diag1 = 0, diag2 = 0;
        for (int x = 0; x < k; x++) {
            diag1 += grid[i+x][j+x];
            diag2 += grid[i+x][j+k-1-x];
        }
        return diag1 == sum && diag2 == sum;

=======

        int m = grid.length, n = grid[0].length;
        int[][] rowSums = new int[m][n + 1];
        int[][] colSums = new int[m + 1][n];
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                rowSums[i][j + 1] = rowSums[i][j] + grid[i][j];
                colSums[i + 1][j] = colSums[i][j] + grid[i][j];
            }
        }
        int ans = 1;
        for (int k = Math.min(m, n); k >= 2; k--) {
            for (int i = 0; i + k <= m; i++) {
                for (int j = 0; j + k <= n; j++) {
                    if (isMagic(rowSums, colSums, i, j, k)) {
                        ans = Math.max(ans, k);
                    }
                }
            }
        }
        return ans;
    }
    public boolean isMagic(int[][] rowSums, int[][] colSums, int i, int j, int k) {
        int d1 = 0, d2 = 0;
        for (int x = 0; x < k; x++) {
            d1 += rowSums[i + x][j + x + 1] - rowSums[i + x][j + x];
            d2 += rowSums[i + x][j + k] - rowSums[i + x][j + k - x - 1];
        }
        if (d1 != d2) {
            return false;
        }
        for (int x = 0; x < k; x++) {
            int r = rowSums[i + x][j + k] - rowSums[i + x][j];
            int c = colSums[i + k][j + x] - colSums[i][j + x];
            if (r != c || r != d1) {
                return false;
            }
        }
        return true;

=======

        int m = grid.length, n = grid[0].length;
        int[][] rowSum = new int[m][n];
        int[][] colSum = new int[m][n];
        int[][] diagSum = new int[m][n];
        int[][] antiDiagSum = new int[m][n];
        int[][][] dp = new int[m][n][Math.min(m, n)];
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                rowSum[i][j] = grid[i][j] + (j > 0 ? rowSum[i][j - 1] : 0);
                colSum[i][j] = grid[i][j] + (i > 0 ? colSum[i - 1][j] : 0);
                diagSum[i][j] = grid[i][j] + (i > 0 && j > 0 ? diagSum[i - 1][j - 1] : 0);
                antiDiagSum[i][j] = grid[i][j] + (i > 0 && j < n - 1 ? antiDiagSum[i - 1][j + 1] : 0);
            }
        }
        int res = 1;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                for (int k = 0; k < Math.min(m, n); k++) {
                    if (i + k < m && j + k < n) {
                        if (i > 0) {
                            dp[i][j][k] = Math.min(dp[i][j][k], dp[i - 1][j][k]);
                        }
                        if (j > 0) {
                            dp[i][j][k] = Math.min(dp[i][j][k], dp[i][j - 1][k]);
                        }
                        if (rowSum[i][j + k] - (j > 0 ? rowSum[i][j - 1] : 0) != colSum[i + k][j] - (i > 0 ? colSum[i - 1][j] : 0)) {
                            break;
                        }
                        if (diagSum[i +

=======

        int m = grid.length, n = grid[0].length;
        int[][] rsum = new int[m + 1][n + 1], csum = new int[m + 1][n + 1];
        for (int i = 1; i <= m; i++) {
            for (int j = 1; j <= n; j++) {
                rsum[i][j] = rsum[i][j - 1] + grid[i - 1][j - 1];
                csum[i][j] = csum[i - 1][j] + grid[i - 1][j - 1];
            }
        }
        int ans = 1;
        for (int i = 1; i <= m; i++) {
            for (int j = 1; j <= n; j++) {
                for (int k = Math.min(m - i, n - j) + 1; k > ans; k--) {
                    if (check(rsum, csum, i, j, k)) {
                        ans = k;
                    }
                }
            }
        }
        return ans;
    }
    
    private boolean check(int[][] rsum, int[][] csum, int i, int j, int k) {
        int sum = rsum[i][j + k - 1] - rsum[i][j - 1];
        for (int p = i; p < i + k; p++) {
            if (rsum[p][j + k - 1] - rsum[p][j - 1] != sum) {
                return false;
            }
        }
        for (int p = j; p < j + k; p++) {
            if (csum[i + k - 1][p] - csum[i - 1][p] != sum) {
                return false;
            }
        }
        if (csum[i + k - 1][j + k - 1] - csum[i - 1][j - 1] != sum) {
            return false;
        }
        if (csum[i + k - 1][j - 1] - csum[i - 1][j + k - 1] != sum) {
            return false;
        }
        return true;
