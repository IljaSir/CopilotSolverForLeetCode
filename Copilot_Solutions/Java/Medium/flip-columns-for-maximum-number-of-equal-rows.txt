Synthesizing 10/10 solutions

=======

        int max = 0;
        for (int i = 0; i < matrix.length; i++) {
            int count = 1;
            for (int j = i + 1; j < matrix.length; j++) {
                if (matrix[i][0] == matrix[j][0]) {
                    for (int k = 0; k < matrix[0].length; k++) {
                        if (matrix[i][k] != matrix[j][k]) {
                            count = 0;
                            break;
                        }
                    }
                } else {
                    for (int k = 0; k < matrix[0].length; k++) {
                        if (matrix[i][k] == matrix[j][k]) {
                            count = 0;
                            break;
                        }
                    }
                }
                if (count == 1) {
                    count++;
                }
                max = Math.max(max, count);
            }
        }
        return max;

=======

        Map<String, Integer> map = new HashMap<>();
        int max = 0;
        for (int[] row : matrix) {
            StringBuilder sb1 = new StringBuilder();
            StringBuilder sb2 = new StringBuilder();
            for (int i : row) {
                sb1.append(i);
                sb2.append(1 - i);
            }
            String key1 = sb1.toString();
            String key2 = sb2.toString();
            map.put(key1, map.getOrDefault(key1, 0) + 1);
            map.put(key2, map.getOrDefault(key2, 0) + 1);
            max = Math.max(max, Math.max(map.get(key1), map.get(key2)));
        }
        return max;

=======

        HashMap<String, Integer> map = new HashMap<>();
        for (int i = 0; i < matrix.length; i++) {
            StringBuilder sb = new StringBuilder();
            for (int j = 0; j < matrix[0].length; j++) {
                sb.append(matrix[i][j] ^ matrix[i][0]);
            }
            String s = sb.toString();
            map.put(s, map.getOrDefault(s, 0) + 1);
        }
        int max = 0;
        for (Map.Entry<String, Integer> entry : map.entrySet()) {
            max = Math.max(max, entry.getValue());
        }
        return max;

=======

        Map<String, Integer> map = new HashMap<>();
        for (int[] row : matrix) {
            int n = row.length;
            StringBuilder sb1 = new StringBuilder();
            StringBuilder sb2 = new StringBuilder();
            for (int i = 0; i < n; i++) {
                sb1.append(row[i]);
                sb2.append(1 - row[i]);
            }
            String s1 = sb1.toString();
            String s2 = sb2.toString();
            map.put(s1, map.getOrDefault(s1, 0) + 1);
            map.put(s2, map.getOrDefault(s2, 0) + 1);
        }
        int max = 0;
        for (String key : map.keySet()) {
            max = Math.max(max, map.get(key));
        }
        return max;

=======

        int m = matrix.length;
        int n = matrix[0].length;
        int max = 0;
        for (int i = 0; i < m; i++) {
            int count = 1;
            for (int j = i + 1; j < m; j++) {
                int k = 0;
                while (k < n && (matrix[i][k] == matrix[j][k] || matrix[i][k] == 1 - matrix[j][k])) {
                    k++;
                }
                if (k == n) {
                    count++;
                }
            }
            max = Math.max(max, count);
        }
        return max;

=======

        Map<String, Integer> map = new HashMap<>();
        int max = 0;
        for(int i=0; i<matrix.length; i++) {
            StringBuilder sb = new StringBuilder();
            for(int j=0; j<matrix[0].length; j++) {
                if(matrix[i][0] == 0) {
                    sb.append(matrix[i][j]);
                } else {
                    sb.append(matrix[i][j] == 0 ? 1 : 0);
                }
            }
            String key = sb.toString();
            map.put(key, map.getOrDefault(key, 0) + 1);
            max = Math.max(max, map.get(key));
        }
        return max;

=======

        Map<String, Integer> map = new HashMap<>();
        int max = 0;
        for (int[] row : matrix) {
            String s = "";
            for (int i = 0; i < row.length; i++) {
                if (i == 0) {
                    s += row[i];
                } else {
                    s += row[i] ^ row[0];
                }
            }
            map.put(s, map.getOrDefault(s, 0) + 1);
            max = Math.max(max, map.get(s));
        }
        return max;

=======

        int m = matrix.length, n = matrix[0].length;
        Map<String, Integer> map = new HashMap<>();
        for (int[] row : matrix) {
            String key = "";
            for (int i = 0; i < n; i++) {
                key += row[i] ^ row[0];
            }
            map.put(key, map.getOrDefault(key, 0) + 1);
        }
        int ans = 0;
        for (int val : map.values()) {
            ans = Math.max(ans, val);
        }
        return ans;

=======

        int m = matrix.length;
        int n = matrix[0].length;
        int[] rows = new int[m];
        for (int i = 0; i < m; ++i) {
            int code = 0;
            for (int j = 0; j < n; ++j) {
                code = code * 2 + matrix[i][j];
            }
            rows[i] = code;
        }
        int max = 0;
        for (int i = 0; i < m; ++i) {
            int count = 0;
            for (int j = 0; j < m; ++j) {
                if (rows[i] == rows[j]) {
                    ++count;
                } else if (rows[i] == flip(rows[j])) {
                    ++count;
                }
            }
            max = Math.max(max, count);
        }
        return max;
    }
    
    public int flip(int x) {
        int res = 0;
        while (x > 0) {
            res = res * 2 + x % 2 ^ 1;
            x /= 2;
        }
        return res;

=======

        int max = 0;
        int n = matrix.length;
        int m = matrix[0].length;
        int[] counts = new int[n];
        Map<String, Integer> map = new HashMap<>();
        for (int i = 0; i < n; i++) {
            StringBuilder sb = new StringBuilder();
            for (int j = 0; j < m; j++) {
                sb.append(matrix[i][j]);
            }
            String s = sb.toString();
            map.put(s, map.getOrDefault(s, 0) + 1);
            max = Math.max(max, map.get(s));
        }
        return max;
