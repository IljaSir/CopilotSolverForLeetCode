Synthesizing 10/10 solutions (Duplicates hidden)

=======

        if (n == 0) return 1;
        int res = 10;
        int uniqueDigits = 9;
        int availableNumber = 9;
        while (n-- > 1 && availableNumber > 0) {
            uniqueDigits = uniqueDigits * availableNumber;
            res += uniqueDigits;
            availableNumber--;
        }
        return res;

=======

        if (n == 0) {
            return 1;
        }
        int res = 10;
        int uniqueDigits = 9;
        int availableNumber = 9;
        while (n-- > 1 && availableNumber > 0) {
            uniqueDigits = uniqueDigits * availableNumber;
            res += uniqueDigits;
            availableNumber--;
        }
        return res;

=======

        if (n == 0) return 1;
        int ans = 10;
        int uniqueDigits = 9;
        int availableNumber = 9;
        while (n-- > 1 && availableNumber > 0) {
            uniqueDigits = uniqueDigits * availableNumber;
            ans += uniqueDigits;
            availableNumber--;
        }
        return ans;

=======

        if (n == 0) {
            return 1;
        }
        if (n == 1) {
            return 10;
        }
        int[] dp = new int[n + 1];
        dp[0] = 1;
        dp[1] = 10;
        int uniqueDigits = 9;
        int availableNumber = 9;
        for (int i = 2; i <= n; i++) {
            uniqueDigits = uniqueDigits * availableNumber;
            dp[i] = dp[i - 1] + uniqueDigits;
            availableNumber--;
        }
        return dp[n];

=======

        if (n == 0) return 1;
        int res = 10, uniqueDigits = 9, availableNumber = 9;
        while (n-- > 1 && availableNumber > 0) {
            uniqueDigits = uniqueDigits * availableNumber;
            res += uniqueDigits;
            availableNumber--;
        }
        return res;

=======

        if (n == 0) {
            return 1;
        }
        int result = 10;
        int uniqueDigits = 9;
        int availableNumber = 9;
        while (n-- > 1 && availableNumber > 0) {
            uniqueDigits = uniqueDigits * availableNumber;
            result += uniqueDigits;
            availableNumber--;
        }
        return result;

=======

        if (n == 0) return 1;
        int[] dp = new int[n + 1];
        dp[0] = 1;
        dp[1] = 9;
        for (int i = 2; i <= n; i++) {
            dp[i] = dp[i - 1] * (10 - i + 1);
        }
        int sum = 0;
        for (int i = 0; i <= n; i++) {
            sum += dp[i];
        }
        return sum;

=======

        if (n == 0) {
            return 1;
        }

        int count = 10;
        int uniqueDigits = 9;
        int availableNumber = 9;
        while (n-- > 1 && availableNumber > 0) {
            uniqueDigits = uniqueDigits * availableNumber;
            count += uniqueDigits;
            availableNumber--;
        }
        return count;

=======

        if (n == 0) return 1;
        if (n == 1) return 10;
        int ans = 10;
        int product = 9;
        for (int i = 2; i <= n; i++) {
            product *= (11 - i);
            ans += product;
        }
        return ans;
