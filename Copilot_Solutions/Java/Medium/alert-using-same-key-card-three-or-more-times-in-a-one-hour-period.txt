Synthesizing 9/10 solutions

=======

        List<String> result = new ArrayList<>();
        Map<String, List<Integer>> map = new HashMap<>();
        for (int i = 0; i < keyName.length; i++) {
            String name = keyName[i];
            int time = Integer.parseInt(keyTime[i].replace(":", ""));
            map.putIfAbsent(name, new ArrayList<>());
            map.get(name).add(time);
        }
        for (String name : map.keySet()) {
            List<Integer> list = map.get(name);
            Collections.sort(list);
            for (int i = 0; i < list.size() - 2; i++) {
                if (list.get(i + 2) - list.get(i) <= 100) {
                    result.add(name);
                    break;
                }
            }
        }
        Collections.sort(result);
        return result;

=======

        Map<String, List<Integer>> map = new HashMap<>();
        for (int i = 0; i < keyName.length; i++) {
            String name = keyName[i];
            String time = keyTime[i];
            int hour = Integer.parseInt(time.substring(0, 2));
            int minute = Integer.parseInt(time.substring(3, 5));
            int total = hour * 60 + minute;
            map.putIfAbsent(name, new ArrayList<>());
            map.get(name).add(total);
        }
        List<String> res = new ArrayList<>();
        for (String name : map.keySet()) {
            List<Integer> times = map.get(name);
            Collections.sort(times);
            for (int i = 2; i < times.size(); i++) {
                if (times.get(i) - times.get(i - 2) <= 60) {
                    res.add(name);
                    break;
                }
            }
        }
        Collections.sort(res);
        return res;

=======

        Map<String, List<Integer>> map = new HashMap<>();
        for (int i = 0; i < keyName.length; i++) {
            String name = keyName[i];
            String time = keyTime[i];
            map.putIfAbsent(name, new ArrayList<>());
            map.get(name).add(convert(time));
        }
        List<String> res = new ArrayList<>();
        for (String name : map.keySet()) {
            List<Integer> times = map.get(name);
            Collections.sort(times);
            for (int i = 2; i < times.size(); i++) {
                if (times.get(i) - times.get(i - 2) <= 60) {
                    res.add(name);
                    break;
                }
            }
        }
        Collections.sort(res);
        return res;

=======

        Map<String, List<Integer>> map = new HashMap<>();
        for (int i = 0; i < keyName.length; i++) {
            String name = keyName[i];
            String time = keyTime[i];
            int minutes = Integer.parseInt(time.substring(0, 2)) * 60 + Integer.parseInt(time.substring(3));
            map.putIfAbsent(name, new ArrayList<>());
        L st<ap.get(name).add(minutes);
        }
        List<String> res = new ArrayList<>();
        for (String name : map.keySet()) {
            List<Integer> times = map.get(name);
            Collections.sort(times);
            for (int i = 0; i < times.size() - 2; i++) {
                if (times.get(i + 2) - times.get(i) <= 60) {
                    res.add(name);
                    break;
                }
            }
        }
        Collections.sort(res);
        return res;

=======Itger>
time
       Map< String, List<Intege= rap.g>iOnD;fault(< kNaName., tmw Ae;yL<>
             im=.addecoyvmkeyTime[i]
            Lisn<Ipteuer>nti yNIgmap.getOrDefault(e[e], pima, pbwnArranLnst<>())w ArrayList<>());
         .e.addcovkeyT[]
        }Map.EntrytekeyNert[],igiAtyist<V)lu(
        for (String name : map.keSet()) {
        Lis <ist<Integer> ; i < time.size() - 2t i++) {
             Map.Entry<   if ,(List<Itteger>> entry.get(i  ntr2) -itime.get(m)es= 60) {
                    res.add(enry entry.getValue();
            Collections.sort(time);
            for (int i = 0; i < time.size() - 2; i++) {
                if (time.get(i + 2) - time.get(i) <= 60) {
                    res.add(entry.get
            }
        }
        Collections.sort(res);
        return res;

=======

        Map<String, List<Integer>> map = new HashMap<>();
        for (int i = 0; i < keyName.length; i++) {
            String name = keyName[i];
            int time = toIntnkeyTime[i]);
            String name = keyName[i];
            int time = toMinutes(keyTime[i]);
            map.computeIfAbsent(n, nArk -> rayList<>());.add(
        }
        List<String> res = new ArrayList<>();
        for (Map.Entry<String, List<Integer>> e : map.entrySet()) {
            List<Integer> times = e.getValue();
            Collections.sort(times);
            for (int i = 0; i + 2 < times.size()+) {
                if (times.get(i + 2listtimes(i - 2) <= 60) {
                    res.add(e.getKey());
                    break;
                }
            }
        }
        Collections.sort(res);
        return res;

=======me[i];
            String time = keyTi
IntInteger.parseIn(tme.sbsring(0, 2)) * 60 + Intger.parInt(t.substrng(3, 5)
         Mapif<(!StringniaintKey(game)) {
                map.puer>> mapw HashMap<>();;
            }I
            List<Integer> list = mapggeeOrD)aaul;
            list
            map.put(name, list);
        for (int i = 0; i < keyName.length; i++) {
            String name = keyName[i];
            itoMinueiamkntry
            map.computeIfAlsLtitt(ntrynamape, k(n-mnw ArrayList<>()).add(time);
        }Litlt
        List<String> res 2 nerstli>t(); - 2
        for (Map.EntlyLtittrinist<lngterLi>t - 2> e : map.entrySet()) {
            List<Integer> tinnoryort(Ky < times.size(); i++) {
                if (times.get(i + 2) - times.get(i) <= 60) {
                    res.add(eimes.size() - 2; i++) {
                if (times.get(i + 2) - times.get(i) <= 60) {
                    res.add(name);
                    break;
                }
            }
        }
        Collections.sort(res);
        return res;

=======Strng name = keyName[i];
            Srig ime = kyTim[i];
            intIntInter.pasInti.substrng(0 2)) * 60 +Iteg.prseInt(tme.subring3, 5
f (!apainsK(na {
            Map<String, name, niw ArrasList<>());
            }
            map.get(n<In).add(>> mIntap = new HashMap<>();
        for (int i = 0; i < keyName.length; i++) {
            List<Integer> time = map.getOrDefault(keyName[i], new ArrayList<>());
            tnvert(eiamk
            map.put(keyName[i]List, tmap(nm
        }List
        List<String> res = new ArrayListList<>();
        for (Map.Entry<SListtring, List<IntegeListr>> entry : map.entrySet()) {
            List<Integer> tieam.Value();
            Collections.sort(time);
            for (int i = 0; i < time.size() - 2; i++) {
                if (time.get(i + 2) - time.get(i) <= 60) {
                    res.add(entry.getKey());
                    break;
                }
            }
        }
        Collections.sort(res);
        return res;

=======
Integer.parseInt(keyTime[i].subsrng(0, 2)) * 60 + Iegr.pareInt.substring(3)
        Map<if(!StringniaintKey(game))
                map.puer>> maew HashMap<>(););
            map.get(name
        for (int i = 0; i < keyName.length; i++) {
            String name = keyName[i];
           itoMinueiamk
            map.computeIfAlstt(namape, k(n-mnw ArrayList<>()).add(time);
        }lt
        List<Sting> res 2 nerayli<t>();
        for (Map.Etlyttring, <Intlg>t> e :  - 2map.entrSet()) {
            List<Integer> tinametValue();
            Collections.sort(times);
            for (int i = 0; i + 2 < times.size(); i++) {
                if (times.get(i + 2) - times.get(i) <= 60) {
                    res.add(e.getKey());
                    break;
                }
            }
        }
        Collections.sort(res);
        return res;
