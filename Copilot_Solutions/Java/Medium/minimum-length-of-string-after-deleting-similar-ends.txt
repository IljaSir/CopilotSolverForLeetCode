Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int i = 0, j = s.length() - 1;
        while (i < j && s.charAt(i) == s.charAt(j)) {
            char c = s.charAt(i);
            while (i <= j && s.charAt(i) == c) i++;
            while (i <= j && s.charAt(j) == c) j--;
        }
        return j - i + 1;

=======

        int i = 0, j = s.length() - 1;
        while (i < j && s.charAt(i) == s.charAt(j)) {
            char c = s.charAt(i);
            while (i <= j && s.charAt(i) == c) {
                i++;
            }
            while (i <= j && s.charAt(j) == c) {
                j--;
            }
        }
        return j - i + 1;

=======

        int l = 0;
        int r = s.length() - 1;
        while (l < r && s.charAt(l) == s.charAt(r)) {
            char c = s.charAt(l);
            while (l <= r && s.charAt(l) == c) {
                l++;
            }
            while (l <= r && s.charAt(r) == c) {
                r--;
            }
        }
        return r - l + 1;

=======

        int left = 0;
        int right = s.length() - 1;
        while (left < right && s.charAt(left) == s.charAt(right)) {
            char c = s.charAt(left);
            while (left <= right && s.charAt(left) == c) {
                left++;
            }
            while (left <= right && s.charAt(right) == c) {
                right--;
            }
        }
        return right - left + 1;

=======

        int i = 0;
        int j = s.length() - 1;
        while (i < j && s.charAt(i) == s.charAt(j)) {
            char ch = s.charAt(i);
            while (i <= j && s.charAt(i) == ch) {
                i++;
            }
            while (i <= j && s.charAt(j) == ch) {
                j--;
            }
        }
        return j - i + 1;

=======

        int left = 0;
        int right = s.length() - 1;
        while (left < right) {
            if (s.charAt(left) != s.charAt(right)) {
                break;
            }
            char c = s.charAt(left);
            while (left <= right && s.charAt(left) == c) {
                left++;
            }
            while (left <= right && s.charAt(right) == c) {
                right--;
            }
        }
        return right - left + 1;

=======

        int len = s.length();
        int i = 0;
        int j = len - 1;
        while (i < j && s.charAt(i) == s.charAt(j)) {
            char c = s.charAt(i);
            while (i <= j && s.charAt(i) == c) {
                i++;
            }
            while (i <= j && s.charAt(j) == c) {
                j--;
            }
        }
        return j - i + 1;

=======

        int n = s.length();
        int l = 0;
        int r = n-1;
        while(l < r && s.charAt(l) == s.charAt(r)){
            char c = s.charAt(l);
            while(l <= r && s.charAt(l) == c){
                l++;
            }
            while(l <= r && s.charAt(r) == c){
                r--;
            }
        }
        return r-l+1;

=======

        int i = 0;
        int j = s.length() - 1;

        while (i < j) {
            char c = s.charAt(i);
            if (s.charAt(j) == c) {
                while (i < j && s.charAt(i) == c) {
                    i++;
                }
                while (i < j && s.charAt(j) == c) {
                    j--;
                }
            } else {
                break;
            }
        }

        return j - i + 1;
