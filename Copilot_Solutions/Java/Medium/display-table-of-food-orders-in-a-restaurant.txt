Synthesizing 10/10 solutions

=======

        List<List<String>> result = new ArrayList<>();
        if (orders == null || orders.size() == 0) {
            return result;
        }
        Map<Integer, Map<String, Integer>> map = new HashMap<>();
        Set<String> foodSet = new HashSet<>();
        for (List<String> order : orders) {
            int table = Integer.parseInt(order.get(1));
            String food = order.get(2);
            foodSet.add(food);
            Map<String, Integer> foodCountMap = map.getOrDefault(table, new HashMap<>());
            foodCountMap.put(food, foodCountMap.getOrDefault(food, 0) + 1);
            map.put(table, foodCountMap);
        }
        List<String> foodList = new ArrayList<>(foodSet);
        Collections.sort(foodList);
        List<String> header = new ArrayList<>();
        header.add("Table");
        header.addAll(foodList);
        result.add(header);
        List<Integer> tableList = new ArrayList<>(map.keySet());
        Collections.sort(tableList);
        for (int table : tableList) {
            List<String> list = new ArrayList<>();
            list.add(String.valueOf(table));
            for (String food : foodList) {
                list.add(String.valueOf(map.get(table).getOrDefault(food, 0)));
            }
            result.add(list);
        }
        return result;

=======

        Set<String> items = new HashSet<>();
        Map<Integer, Map<String, Integer>> map = new TreeMap<>();
        for (List<String> order : orders) {
            int table = Integer.parseInt(order.get(1));
            String food = order.get(2);
            items.add(food);
            Map<String, Integer> tableMap = map.getOrDefault(table, new HashMap<>());
            tableMap.put(food, tableMap.getOrDefault(food, 0) + 1);
            map.put(table, tableMap);
        }
        List<List<String>> res = new ArrayList<>();
        List<String> header = new ArrayList<>();
        header.add("Table");
        List<String> itemsList = new ArrayList<>(items);
        Collections.sort(itemsList);
        header.addAll(itemsList);
        res.add(header);
        for (int table : map.keySet()) {
            List<String> row = new ArrayList<>();
            row.add(String.valueOf(table));
            for (String item : itemsList) {
                row.add(String.valueOf(map.get(table).getOrDefault(item, 0)));
            }
            res.add(row);
        }
        return res;

=======

        List<List<String>> result = new ArrayList<List<String>>();
        Set<String> foodSet = new HashSet<String>();
        for (List<String> order : orders) {
            foodSet.add(order.get(2));
        }
        List<String> foodList = new ArrayList<String>();
        for (String food : foodSet) {
            foodList.add(food);
        }
        Collections.sort(foodList);
        Map<Integer, Map<String, Integer>> tableMap = new HashMap<Integer, Map<String, Integer>>();
        for (List<String> order : orders) {
            int tableNumber = Integer.parseInt(order.get(1));
            String food = order.get(2);
            if (!tableMap.containsKey(tableNumber)) {
                tableMap.put(tableNumber, new HashMap<String, Integer>());
            }
            Map<String, Integer> foodMap = tableMap.get(tableNumber);
            if (!foodMap.containsKey(food)) {
                foodMap.put(food, 0);
            }
            foodMap.put(food, foodMap.get(food) + 1);
        }
        List<Integer> tableList = new ArrayList<Integer>();
        for (Integer tableNumber : tableMap.keySet()) {
            tableList.add(tableNumber);
        }
        Collections.sort(tableList);
        List<String> header = new ArrayList<String>();
        header.add("Table");
        header.addAll(foodList);
        result.add(header);
        for (Integer tableNumber : tableList) {
            List<String> row = new ArrayList<String>();
            row.add(tableNumber.toString());
            Map<String, Integer> foodMap = tableMap.get(tableNumber);
            for (String food : foodList) {
                if (!foodMap.containsKey(food)) {
                    row.add("0");
                } else {
                    row.add(foodMap.get(food).toString());
                }
            }
            result.add(row);
        }
        return result;

=======

        List<List<String>> result = new ArrayList<>();
        Map<Integer, Map<String, Integer>> tableMap = new HashMap<>();
        Set<String> foodSet = new HashSet<>();
        for (List<String> order : orders) {
            int table = Integer.parseInt(order.get(1));
            String food = order.get(2);
            Map<String, Integer> foodMap = tableMap.getOrDefault(table, new HashMap<>());
            foodMap.put(food, foodMap.getOrDefault(food, 0) + 1);
            tableMap.put(table, foodMap);
            foodSet.add(food);
        }
        List<Integer> tableList = new ArrayList<>(tableMap.keySet());
        Collections.sort(tableList);
        List<String> foodList = new ArrayList<>(foodSet);
        Collections.sort(foodList);
        List<String> header = new ArrayList<>();
        header.add("Table");
        header.addAll(foodList);
        result.add(header);
        for (int table : tableList) {
            List<String> row = new ArrayList<>();
            row.add(String.valueOf(table));
            for (String food : foodList) {
                row.add(String.valueOf(tableMap.get(table).getOrDefault(food, 0)));
            }
            result.add(row);
        }
        return result;

=======

        List<List<String>> res = new ArrayList<>();
        Map<Integer, Map<String, Integer>> map = new HashMap<>();
        Set<String> foodSet = new HashSet<>();
        for (List<String> order : orders) {
            int table = Integer.parseInt(order.get(1));
            String food = order.get(2);
            foodSet.add(food);
            Map<String, Integer> foodMap = map.getOrDefault(table, new HashMap<>());
            foodMap.put(food, foodMap.getOrDefault(food, 0) + 1);
            map.put(table, foodMap);
        }
        List<String> foodList = new ArrayList<>(foodSet);
        Collections.sort(foodList);
        List<String> header = new ArrayList<>();
        header.add("Table");
        header.addAll(foodList);
        res.add(header);
        List<Integer> tables = new ArrayList<>(map.keySet());
        Collections.sort(tables);
        for (int table : tables) {
            List<String> row = new ArrayList<>();
            row.add(String.valueOf(table));
            Map<String, Integer> foodMap = map.get(table);
            for (String food : foodList) {
                row.add(String.valueOf(foodMap.getOrDefault(food, 0)));
            }
            res.add(row);
        }
        return res;

=======

        List<List<String>> result = new ArrayList<>();
        Map<Integer, Map<String, Integer>> map = new HashMap<>();
        Set<String> set = new HashSet<>();
        for (List<String> order : orders) {
            int tableNumber = Integer.parseInt(order.get(1));
            String foodItem = order.get(2);
            set.add(foodItem);
            Map<String, Integer> foodMap = map.getOrDefault(tableNumber, new HashMap<>());
            foodMap.put(foodItem, foodMap.getOrDefault(foodItem, 0) + 1);
            map.put(tableNumber, foodMap);
        }
        List<String> header = new ArrayList<>();
        header.add("Table");
        for (String foodItem : set) {
            header.add(foodItem);
        }
        Collections.sort(header.subList(1, header.size()));
        result.add(header);
        for (int tableNumber : map.keySet()) {
            List<String> row = new ArrayList<>();
            row.add(tableNumber + "");
            Map<String, Integer> foodMap = map.get(tableNumber);
            for (int i = 1; i < header.size(); i++) {
                row.add(foodMap.getOrDefault(header.get(i), 0) + "");
            }
            result.add(row);
        }
        Collections.sort(result.subList(1, result.size()), (a, b) -> Integer.parseInt(a.get(0)) - Integer.parseInt(b.get(0)));
        return result;

=======

        List<List<String>> result = new ArrayList<>();
        TreeSet<String> foodSet = new TreeSet<>();
        TreeMap<Integer, Map<String, Integer>> tableMap = new TreeMap<>();
        for (List<String> order : orders) {
            String food = order.get(2);
            foodSet.add(food);
            int table = Integer.parseInt(order.get(1));
            Map<String, Integer> foodMap = tableMap.getOrDefault(table, new HashMap<String, Integer>());
            foodMap.put(food, foodMap.getOrDefault(food, 0) + 1);
            tableMap.put(table, foodMap);
        }
        List<String> header = new ArrayList<>();
        header.add("Table");
        header.addAll(foodSet);
        result.add(header);
        for (Map.Entry<Integer, Map<String, Integer>> entry : tableMap.entrySet()) {
            List<String> row = new ArrayList<>();
            row.add(String.valueOf(entry.getKey()));
            for (String food : foodSet) {
                row.add(String.valueOf(entry.getValue().getOrDefault(food, 0)));
            }
            result.add(row);
        }
        return result;

=======

        List<List<String>> result = new ArrayList<>();
        Set<String> foodItems = new HashSet<>();
        Map<Integer, Map<String, Integer>> tableMap = new TreeMap<>();
        for (List<String> order : orders) {
            int table = Integer.parseInt(order.get(1));
            String food = order.get(2);
            foodItems.add(food);
            tableMap.computeIfAbsent(table, k -> new HashMap<>()).merge(food, 1, Integer::sum);
        }
        List<String> header = new ArrayList<>(foodItems);
        Collections.sort(header);
        header.add(0, "Table");
        result.add(header);
        for (Map.Entry<Integer, Map<String, Integer>> entry : tableMap.entrySet()) {
            List<String> row = new ArrayList<>();
            row.add(entry.getKey().toString());
            for (String food : header) {
                if (food.equals("Table")) {
                    continue;
                }
                row.add(entry.getValue().getOrDefault(food, 0).toString());
            }
            result.add(row);
        }
        return result;

=======

        List<List<String>> result = new ArrayList<>();
        Set<String> foodNames = new HashSet<>();
        Map<Integer, Map<String, Integer>> tableMap = new TreeMap<>();
        for (List<String> order : orders) {
            String foodName = order.get(2);
            foodNames.add(foodName);
            int tableNumber = Integer.parseInt(order.get(1));
            Map<String, Integer> foodMap = tableMap.getOrDefault(tableNumber, new HashMap<>());
            foodMap.put(foodName, foodMap.getOrDefault(foodName, 0) + 1);
            tableMap.put(tableNumber, foodMap);
        }
        List<String> foodList = new ArrayList<>(foodNames);
        Collections.sort(foodList);
        List<String> header = new ArrayList<>();
        header.add("Table");
        header.addAll(foodList);
        result.add(header);
        for (int tableNumber : tableMap.keySet()) {
            List<String> row = new ArrayList<>();
            row.add(String.valueOf(tableNumber));
            Map<String, Integer> foodMap = tableMap.get(tableNumber);
            for (String foodName : foodList) {
                row.add(String.valueOf(foodMap.getOrDefault(foodName, 0)));
            }
            result.add(row);
        }
        return result;

=======

        List<List<String>> ans = new ArrayList<List<String>>();
        String[] food = new String[200];
        int[] count = new int[200];
        int foodCount = 0;
        int tableCount = 0;
        int[] table = new int[500];
        for (List<String> order : orders) {
            int tableNo = Integer.parseInt(order.get(1));
            String foodItem = order.get(2);
            int i = 0;
            while (i < foodCount && !food[i].equals(foodItem)) {
                i++;
            }
            if (i == foodCount) {
                food[foodCount++] = foodItem;
            }
            if (table[tableNo] == 0) {
                table[tableNo] = 1;
                tableCount++;
            }
            count[i]++;
        }
        List<String> header = new ArrayList<String>();
        header.add("Table");
        for (int i = 0; i < foodCount; i++) {
            header.add(food[i]);
        }
        ans.add(header);
        for (int i = 1; i <= 500; i++) {
            if (table[i] == 0) {
                continue;
            }
            List<String> row = new ArrayList<String>();
            row.add("" + i);
            for (int j = 0; j < foodCount; j++) {
                int k = 0;
                while (k < orders.size() && !orders.get(k).get(1).equals("" + i)) {
                    k++;
                }
                int l = k;
                while (l < orders.size() && orders.get(l).get(1).equals("" + i) && !orders.get(l).get(2).equals(food[j])) {
                    l++;
                }
                row.add("" + (l - k));
            }
            ans.add(row);
        }
        return ans;
