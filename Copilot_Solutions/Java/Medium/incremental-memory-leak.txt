Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int time = 1;
        while (memory1 >= time || memory2 >= time) {
            if (memory1 >= memory2) {
                memory1 -= time;
            } else {
                memory2 -= time;
            }
            time++;
        }
        return new int[]{time, memory1, memory2};

=======

        int i = 1;
        while (memory1 >= i || memory2 >= i) {
            if (memory1 >= memory2) {
                memory1 -= i;
            } else {
                memory2 -= i;
            }
            i++;
        }
        return new int[] {i, memory1, memory2};

=======

        int t = 1;
        while (memory1 >= t || memory2 >= t) {
            if (memory1 >= memory2) {
                memory1 -= t;
            } else {
                memory2 -= t;
            }
            t++;
        }
        return new int[]{t, memory1, memory2};

=======

        int i = 1;
        while(i <= memory1 || i <= memory2) {
            if(memory1 >= memory2) {
                memory1 -= i;
            } else {
                memory2 -= i;
            }
            i++;
        }
        return new int[] {i, memory1, memory2};

=======

        int[] res = new int[3];
        int i = 1;
        while (memory1 >= i || memory2 >= i) {
            if (memory1 >= memory2) {
                memory1 -= i;
            } else {
                memory2 -= i;
            }
            i++;
        }
        res[0] = i;
        res[1] = memory1;
        res[2] = memory2;
        return res;

=======

        int i = 1;
        while (true) {
            if (memory1 >= memory2) {
                if (memory1 >= i) {
                    memory1 -= i;
                } else {
                    return new int[] {i, memory1, memory2};
                }
            } else {
                if (memory2 >= i) {
                    memory2 -= i;
                } else {
                    return new int[] {i, memory1, memory2};
                }
            }
            i++;
        }
