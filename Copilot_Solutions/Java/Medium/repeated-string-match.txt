Synthesizing 10/10 solutions

=======

        int count = 1;
        StringBuilder sb = new StringBuilder(a);
        while (sb.length() < b.length()) {
            sb.append(a);
            count++;
        }
        if (sb.indexOf(b) != -1) return count;
        if (sb.append(a).indexOf(b) != -1) return ++count;
        return -1;

=======

        int count = 1;
        String temp = a;
        while (temp.length() < b.length()) {
            temp += a;
            count++;
        }
        if (temp.contains(b)) {
            return count;
        }
        temp += a;
        count++;
        if (temp.contains(b)) {
            return count;
        }
        return -1;

=======

        int count = 1;
        String temp = a;
        while (temp.length() < b.length()) {
            temp += a;
            count++;
        }
        if (temp.contains(b)) {
            return count;
        }
        temp += a;
        if (temp.contains(b)) {
            return count + 1;
        }
        return -1;

=======

        int count = 1;
        String temp = a;
        while (temp.length() < b.length()) {
            temp += a;
            count++;
        }
        if (temp.indexOf(b) != -1) return count;
        temp += a;
        count++;
        if (temp.indexOf(b) != -1) return count;
        return -1;

=======

        int i = 0;
        StringBuilder sb = new StringBuilder();
        while (sb.length() < b.length()) {
            sb.append(a);
            i++;
        }
        if (sb.toString().contains(b)) {
            return i;
        }
        if (sb.append(a).toString().contains(b)) {
            return i + 1;
        }
        return -1;

=======

        int count = 0;
        String temp = "";
        while (temp.length() < b.length()) {
            temp += a;
            count++;
        }
        if (temp.contains(b)) return count;
        if ((temp + a).contains(b)) return count + 1;
        return -1;

=======

        int count = 0;
        String temp = "";
        while (temp.length() < b.length()) {
            temp += a;
            count++;
        }
        if (temp.indexOf(b) >= 0) {
            return count;
        }
        if ((temp + a).indexOf(b) >= 0) {
            return count + 1;
        }
        return -1;

=======

        int count = 0;
        String temp = "";
        while (temp.length() < b.length()) {
            temp += a;
            count++;
        }
        if (temp.contains(b)) {
            return count;
        } else if ((temp + a).contains(b)) {
            return count + 1;
        } else {
            return -1;
        }

=======

        int lenA = a.length();
        int lenB = b.length();
        StringBuilder sb = new StringBuilder();
        int count = 0;
        while(sb.length() < lenB) {
            sb.append(a);
            count++;
        }
        if(sb.toString().contains(b)) {
            return count;
        }
        sb.append(a);
        count++;
        if(sb.toString().contains(b)) {
            return count;
        }
        return -1;

=======

        int n = a.length();
        int m = b.length();
        int q = m/n;
        if (m%n!=0) q++;
        String c = "";
        for (int i=0; i<q; i++) {
            c += a;
            if (c.contains(b)) return i+1;
        }
        c += a;
        if (c.contains(b)) return q+1;
        return -1;
