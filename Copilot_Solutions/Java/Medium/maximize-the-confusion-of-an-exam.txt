Synthesizing 10/10 solutions

=======

        return Math.max(maxConsecutiveAnswers(answerKey, k, 'T'), maxConsecutiveAnswers(answerKey, k, 'F'));
    }
    
    public int maxConsecutiveAnswers(String answerKey, int k, char c) {
        int i = 0;
        int j = 0;
        int n = answerKey.length();
        int ans = 0;
        int count = 0;
        while (j < n) {
            if (answerKey.charAt(j) == c) {
                count++;
            }
            while (j - i + 1 - count > k) {
                if (answerKey.charAt(i) == c) {
                    count--;
                }
                i++;
            }
            ans = Math.max(ans, j - i + 1);
            j++;
        }
        return ans;

=======

        int n = answerKey.length();
        int[] t = new int[n];
        int[] f = new int[n];
        t[0] = answerKey.charAt(0) == 'T' ? 1 : 0;
        f[0] = answerKey.charAt(0) == 'F' ? 1 : 0;
        for (int i = 1; i < n; i++) {
            t[i] = answerKey.charAt(i) == 'T' ? t[i - 1] + 1 : 0;
            f[i] = answerKey.charAt(i) == 'F' ? f[i - 1] + 1 : 0;
        }
        int ans = 0;
        for (int i = 0; i < n; i++) {
            int j = i + k - 1;
            if (j >= n) {
                break;
            }
            int tt = t[j] - (i == 0 ? 0 : t[i - 1]);
            int ff = f[j] - (i == 0 ? 0 : f[i - 1]);
            ans = Math.max(ans, Math.max(tt, ff));
        }
        return ans + k;

=======

        int n = answerKey.length();
        int max = 0;
        int count = 0;
        int i = 0;
        int j = 0;
        while (j < n) {
            if (answerKey.charAt(j) == 'F') {
                count++;
            }
            if (count > k) {
                if (answerKey.charAt(i) == 'F') {
                    count--;
                }
                i++;
            }
            max = Math.max(max, j - i + 1);
            j++;
        }
        count = 0;
        i = 0;
        j = 0;
        while (j < n) {
            if (answerKey.charAt(j) == 'T') {
                count++;
            }
            if (count > k) {
                if (answerKey.charAt(i) == 'T') {
                    count--;
                }
                i++;
            }
            max = Math.max(max, j - i + 1);
            j++;
        }
        return max;

=======

        int n = answerKey.length();
        int[] a = new int[n];
        int[] b = new int[n];
        int[] c = new int[n];
        int[] d = new int[n];
        int max = 0;
        for(int i = 0; i < n; i++){
            if(i == 0){
                a[i] = answerKey.charAt(i) == 'T' ? 1 : 0;
                b[i] = answerKey.charAt(i) == 'F' ? 1 : 0;
            } else {
                a[i] = answerKey.charAt(i) == 'T' ? a[i - 1] + 1 : 0;
                b[i] = answerKey.charAt(i) == 'F' ? b[i - 1] + 1 : 0;
            }
            max = Math.max(max, a[i]);
            max = Math.max(max, b[i]);
        }
        for(int i = n - 1; i >= 0; i--){
            if(i == n - 1){
                c[i] = answerKey.charAt(i) == 'T' ? 1 : 0;
                d[i] = answerKey.charAt(i) == 'F' ? 1 : 0;
            } else {
                c[i] = answerKey.charAt(i) == 'T' ? c[i + 1] + 1 : 0;
                d[i] = answerKey.charAt(i) == 'F' ? d[i + 1] + 1 : 0;
            }
            max = Math.max(max, c[i]);
            max = Math.max(max, d[i]);
        }
        for(int i = 0; i < n; i++){
            int t = a[i] + c[i];
            int f = b[i] + d[i];
            int t1 = a[i] + k;
            int f1 = b[i] + k;
            if(t1 >= n || answerKey.charAt(t1) == 'F'){
                max = Math.max(max, t1);
            }
            if(f1 >= n || answerKey.charAt(f1) == 'T'){
                max = Math.max(max, f1);
            }
            if(t >= n || answerKey.charAt(t) == 'F'){
                max = Math.max(max, t);
            }
            if(f >= n || answer

=======

        int n = answerKey.length();
        int[] count = new int[n];
        int[] count2 = new int[n];
        if (answerKey.charAt(0) == 'T') {
            count[0] = 1;
            count2[0] = 0;
        } else {
            count[0] = 0;
            count2[0] = 1;
        }
        for (int i = 1; i < n; i++) {
            if (answerKey.charAt(i) == 'T') {
                count[i] = count[i - 1] + 1;
                count2[i] = count2[i - 1];
            } else {
                count[i] = count[i - 1];
                count2[i] = count2[i - 1] + 1;
            }
        }
        int max = 0;
        for (int i = 0; i < n; i++) {
            int l = i;
            int r = n;
            while (l < r) {
                int mid = (l + r + 1) >> 1;
                if (count[mid] - count[i] <= k) {
                    l = mid;
                } else {
                    r = mid - 1;
                }
            }
            max = Math.max(max, l - i + 1);
        }
        for (int i = 0; i < n; i++) {
            int l = i;
            int r = n;
            while (l < r) {
                int mid = (l + r + 1) >> 1;
                if (count2[mid] - count2[i] <= k) {
                    l = mid;
                } else {
                    r = mid - 1;
                }
            }
            max = Math.max(max, l - i + 1);
        }
        return max;

=======

        int n = answerKey.length();
        int[] f = new int[n];
        int[] t = new int[n];
        int[] g = new int[n];
        int[] h = new int[n];
        f[0] = answerKey.charAt(0) == 'F' ? 1 : 0;
        t[0] = answerKey.charAt(0) == 'T' ? 1 : 0;
        for (int i = 1; i < n; i++) {
            f[i] = answerKey.charAt(i) == 'F' ? f[i - 1] + 1 : 0;
            t[i] = answerKey.charAt(i) == 'T' ? t[i - 1] + 1 : 0;
        }
        g[n - 1] = answerKey.charAt(n - 1) == 'F' ? 1 : 0;
        h[n - 1] = answerKey.charAt(n - 1) == 'T' ? 1 : 0;
        for (int i = n - 2; i >= 0; i--) {
            g[i] = answerKey.charAt(i) == 'F' ? g[i + 1] + 1 : 0;
            h[i] = answerKey.charAt(i) == 'T' ? h[i + 1] + 1 : 0;
        }
        int ans = 0;
        for (int i = 0; i < n; i++) {
            int cur = 0;
            if (i - k - 1 >= 0) {
                cur = Math.max(cur, f[i - k - 1]);
            }
            if (i + k + 1 < n) {
                cur = Math.max(cur, g[i + k + 1]);
            }
            if (i - k >= 0) {
                cur = Math.max(cur, t[i - k] + k);
            }
            if (i + k < n) {
                cur = Math.max(cur, h[i + k] + k);
            }
            ans = Math.max(ans, cur);
        }
        return ans;

=======

        int n = answerKey.length();
        int[] dp = new int[n];
        int[] dp2 = new int[n];
        
        dp[0] = 1;
        dp2[0] = 1;
        
        for (int i = 1; i < n; i++) {
            if (answerKey.charAt(i) == answerKey.charAt(i - 1)) {
                dp[i] = dp[i - 1] + 1;
            } else {
                dp[i] = 1;
            }
            
            if (answerKey.charAt(i) == (answerKey.charAt(i - 1) == 'T' ? 'F' : 'T')) {
                dp2[i] = dp2[i - 1] + 1;
            } else {
                dp2[i] = 1;
            }
        }
        
        int max = 0;
        for (int i = 0; i < n; i++) {
            max = Math.max(max, dp[i]);
            max = Math.max(max, dp2[i]);
        }
        
        int ans = 0;
        for (int i = 0; i < n; i++) {
            if (dp[i] == max) {
                ans++;
            }
            if (dp2[i] == max) {
                ans++;
            }
        }
        return ans;

=======

        int[] count = new int[2];
        int[] index = new int[2];
        int max = 0;
        for (int i = 0; i < answerKey.length(); ++i) {
            int c = answerKey.charAt(i) == 'T' ? 0 : 1;
            count[c]++;
            if (count[c] > k) {
                count[answerKey.charAt(index[c]) == 'T' ? 0 : 1]--;
                index[c]++;
            }
            max = Math.max(max, i - index[c] + 1);
        }
        return max;

=======

        int max = 0;
        int n = answerKey.length();
        int[] count = new int[2];
        int[] count2 = new int[2];
        for (int i = 0, j = 0; i < n; i++) {
            while (j < n && (count[0] < k || count[1] < k || (count[0] == k && count[1] == k && (answerKey.charAt(j) == 'T' || answerKey.charAt(j) == 'F')))) {
                if (answerKey.charAt(j) == 'T') {
                    count[0]++;
                } else {
                    count[1]++;
                }
                j++;
            }
            max = Math.max(max, j - i);
            if (answerKey.charAt(i) == 'T') {
                count[0]--;
            } else {
                count[1]--;
            }
        }
        for (int i = 0, j = 0; i < n; i++) {
            while (j < n && (count2[0] < k || count2[1] < k || (count2[0] == k && count2[1] == k && (answerKey.charAt(j) == 'F' || answerKey.charAt(j) == 'T')))) {
                if (answerKey.charAt(j) == 'F') {
                    count2[0]++;
                } else {
                    count2[1]++;
                }
                j++;
            }
            max = Math.max(max, j - i);
            if (answerKey.charAt(i) == 'F') {
                count2[0]--;
            } else {
                count2[1]--;
            }
        }
        return max;

=======

        int n = answerKey.length();
        int[] prefix = new int[n];
        int[] suffix = new int[n];
        int[] prefixF = new int[n];
        int[] suffixF = new int[n];
        int[] prefixT = new int[n];
        int[] suffixT = new int[n];
        int res = 0;
        for (int i = 0; i < n; i++) {
            if (i > 0) {
                prefix[i] = prefix[i - 1];
                prefixF[i] = prefixF[i - 1];
                prefixT[i] = prefixT[i - 1];
            }
            if (answerKey.charAt(i) == 'F') {
                prefix[i]++;
                prefixF[i]++;
            } else {
                prefixT[i]++;
            }
            res = Math.max(res, prefix[i]);
        }
        for (int i = n - 1; i >= 0; i--) {
            if (i < n - 1) {
                suffix[i] = suffix[i + 1];
                suffixF[i] = suffixF[i + 1];
                suffixT[i] = suffixT[i + 1];
            }
            if (answerKey.charAt(i) == 'F') {
                suffix[i]++;
                suffixF[i]++;
            } else {
                suffixT[i]++;
            }
            res = Math.max(res, suffix[i]);
        }
        for (int i = 0; i < n; i++) {
            int cur = 0;
            int curF = 0;
            int curT = 0;
            if (i > 0) {
                cur = prefix[i - 1];
                curF = prefixF[i - 1];
                curT = prefixT[i - 1];
            }
            if (i < n - 1) {
                cur += suffix[i + 1];
                curF += suffixF[i + 1];
                curT += suffixT[i + 1];
            }
            if (answerKey.charAt(i) == 'F') {
                curF++;
            } else {
                curT++;
            }
            if (answerKey.charAt(i) == 'F') {
                cur += Math.min(k, curT);
            } else {
                cur += Math.min(k, curF);
            }
            res = Math.max(res, cur);
        }
