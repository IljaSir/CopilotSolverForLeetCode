Synthesizing 10/10 solutions

=======

        int m = grid.length;
        int n = grid[0].length;
        int max = 0;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] != 0) {
                    max = Math.max(max, dfs(grid, i, j));
                }
            }
        }
        return max;
    }
    
    private int dfs(int[][] grid, int i, int j) {
        int m = grid.length;
        int n = grid[0].length;
        if (i < 0 || i >= m || j < 0 || j >= n || grid[i][j] == 0) {
            return 0;
        }
        int temp = grid[i][j];
        grid[i][j] = 0;
        int max = 0;
        max = Math.max(max, dfs(grid, i + 1, j));
        max = Math.max(max, dfs(grid, i - 1, j));
        max = Math.max(max, dfs(grid, i, j + 1));
        max = Math.max(max, dfs(grid, i, j - 1));
        grid[i][j] = temp;
        return max + temp;

=======

        int max = 0;
        for (int i = 0; i < grid.length; i++) {
            for (int j = 0; j < grid[i].length; j++) {
                if (grid[i][j] != 0) {
                    max = Math.max(max, dfs(grid, i, j));
                }
            }
        }
        return max;
    }
    
    private int dfs(int[][] grid, int i, int j) {
        int val = grid[i][j];
        grid[i][j] = 0;
        int max = 0;
        if (i > 0 && grid[i-1][j] != 0) {
            max = Math.max(max, dfs(grid, i-1, j));
        }
        if (j > 0 && grid[i][j-1] != 0) {
            max = Math.max(max, dfs(grid, i, j-1));
        }
        if (i < grid.length-1 && grid[i+1][j] != 0) {
            max = Math.max(max, dfs(grid, i+1, j));
        }
        if (j < grid[i].length-1 && grid[i][j+1] != 0) {
            max = Math.max(max, dfs(grid, i, j+1));
        }
        grid[i][j] = val;
        return val + max;

=======

        int max = 0;
        for (int i = 0; i < grid.length; i++) {
            for (int j = 0; j < grid[i].length; j++) {
                if (grid[i][j] > 0) {
                    max = Math.max(max, dfs(grid, i, j));
                }
            }
        }
        return max;
    }
    
    private int dfs(int[][] grid, int i, int j) {
        if (i < 0 || i >= grid.length || j < 0 || j >= grid[i].length || grid[i][j] == 0) {
            return 0;
        }
        int gold = grid[i][j];
        grid[i][j] = 0;
        int left = dfs(grid, i, j - 1);
        int right = dfs(grid, i, j + 1);
        int top = dfs(grid, i - 1, j);
        int bottom = dfs(grid, i + 1, j);
        grid[i][j] = gold;
        return gold + Math.max(left, Math.max(right, Math.max(top, bottom)));

=======

        int max = 0;
        for (int i = 0; i < grid.length; i++) {
            for (int j = 0; j < grid[i].length; j++) {
                if (grid[i][j] != 0) {
                    max = Math.max(max, dfs(grid, i, j));
                }
            }
        }
        return max;
    }

    public int dfs(int[][] grid, int i, int j) {
        if (i < 0 || i >= grid.length || j < 0 || j >= grid[i].length || grid[i][j] == 0) {
            return 0;
        }
        int gold = grid[i][j];
        grid[i][j] = 0;
        int max = 0;
        max = Math.max(max, dfs(grid, i + 1, j));
        max = Math.max(max, dfs(grid, i - 1, j));
        max = Math.max(max, dfs(grid, i, j + 1));
        max = Math.max(max, dfs(grid, i, j - 1));
        grid[i][j] = gold;
        return max + gold;

=======

        int maxGold = 0;
        for (int i = 0; i < grid.length; i++) {
            for (int j = 0; j < grid[0].length; j++) {
                if (grid[i][j] != 0) {
                    maxGold = Math.max(maxGold, dfs(grid, i, j));
                }
            }
        }
        return maxGold;
    }
    
    private int dfs(int[][] grid, int i, int j) {
        int maxGold = 0;
        int temp = grid[i][j];
        grid[i][j] = 0;
        if (i > 0 && grid[i - 1][j] != 0) {
            maxGold = Math.max(maxGold, dfs(grid, i - 1, j));
        }
        if (i < grid.length - 1 && grid[i + 1][j] != 0) {
            maxGold = Math.max(maxGold, dfs(grid, i + 1, j));
        }
        if (j > 0 && grid[i][j - 1] != 0) {
            maxGold = Math.max(maxGold, dfs(grid, i, j - 1));
        }
        if (j < grid[0].length - 1 && grid[i][j + 1] != 0) {
            maxGold = Math.max(maxGold, dfs(grid, i, j + 1));
        }
        grid[i][j] = temp;
        return maxGold + temp;

=======

        int m = grid.length;
        int n = grid[0].length;
        int max = 0;
        for(int i = 0; i < m; i++){
            for(int j = 0; j < n; j++){
                if(grid[i][j] != 0){
                    int temp = dfs(grid, i, j);
                    max = Math.max(max, temp);
                }
            }
        }
        return max;
    }
    public int dfs(int[][] grid, int i, int j){
        int m = grid.length;
        int n = grid[0].length;
        if(i < 0 || i >= m || j < 0 || j >= n || grid[i][j] == 0){
            return 0;
        }
        int temp = grid[i][j];
        grid[i][j] = 0;
        int max = 0;
        max = Math.max(max, dfs(grid, i - 1, j));
        max = Math.max(max, dfs(grid, i + 1, j));
        max = Math.max(max, dfs(grid, i, j - 1));
        max = Math.max(max, dfs(grid, i, j + 1));
        grid[i][j] = temp;
        return max + temp;

=======

        int m = grid.length;
        int n = grid[0].length;
        int max = 0;
        for (int i=0; i<m; i++) {
            for (int j=0; j<n; j++) {
                if (grid[i][j] == 0) continue;
                max = Math.max(max, dfs(grid, i, j));
            }
        }
        return max;

=======

        int rows = grid.length;
        int cols = grid[0].length;
        int maxGold = 0;
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                if (grid[i][j] != 0) {
                    maxGold = Math.max(maxGold, dfs(grid, i, j));
                }
            }
        }
        return maxGold;
    }

    private int dfs(int[][] grid, int row, int col) {
        int rows = grid.length;
        int cols = grid[0].length;
        if (row < 0 || row >= rows || col < 0 || col >= cols || grid[row][col] == 0) {
            return 0;
        }
        int gold = grid[row][col];
        grid[row][col] = 0;
        int max = Math.max(dfs(grid, row - 1, col), dfs(grid, row + 1, col));
        max = Math.max(max, dfs(grid, row, col - 1));
        max = Math.max(max, dfs(grid, row, col + 1));
        grid[row][col] = gold;
        return max + gold;

=======

        int m = grid.length;
        int n = grid[0].length;
        int max = 0;
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(grid[i][j]!=0){
                    max = Math.max(max,dfs(grid,i,j));
                }
            }
        }
        return max;
    }
    public int dfs(int[][] grid,int i,int j){
        if(i<0 || j<0 || i>=grid.length || j>=grid[0].length || grid[i][j]==0){
            return 0;
        }
        int temp = grid[i][j];
        grid[i][j]=0;
        int left = dfs(grid,i,j-1);
        int right = dfs(grid,i,j+1);
        int top = dfs(grid,i-1,j);
        int bottom = dfs(grid,i+1,j);
        grid[i][j]=temp;
        return grid[i][j]+Math.max(left,Math.max(right,Math.max(top,bottom)));

=======

        int m = grid.length;
        int n = grid[0].length;
        boolean[][] visited = new boolean[m][n];
        int max = 0;
        for(int i = 0; i < m; i++) {
            for(int j = 0; j < n; j++) {
                if(grid[i][j] != 0) {
                    max = Math.max(max, dfs(grid, visited, i, j, 0));
                }
            }
        }
        return max;
    }
    
    private int dfs(int[][] grid, boolean[][] visited, int i, int j, int count) {
        if(i < 0 || j < 0 || i >= grid.length || j >= grid[0].length || visited[i][j] || grid[i][j] == 0) {
            return count;
        }
        visited[i][j] = true;
        int max = 0;
        max = Math.max(max, dfs(grid, visited, i - 1, j, count + grid[i][j]));
        max = Math.max(max, dfs(grid, visited, i + 1, j, count + grid[i][j]));
        max = Math.max(max, dfs(grid, visited, i, j - 1, count + grid[i][j]));
        max = Math.max(max, dfs(grid, visited, i, j + 1, count + grid[i][j]));
        visited[i][j] = false;
        return max;
