Synthesizing 10/10 solutions

=======

        int[] left = new int[26];
        int[] right = new int[26];
        for (int i = 0; i < s.length(); i++) {
            right[s.charAt(i) - 'a']++;
        }
        int count = 0;
        for (int i = 0; i < s.length(); i++) {
            left[s.charAt(i) - 'a']++;
            right[s.charAt(i) - 'a']--;
            if (check(left, right)) {
                count++;
            }
        }
        return count;
    }
    
    private boolean check(int[] left, int[] right) {
        int leftCount = 0;
        int rightCount = 0;
        for (int i = 0; i < 26; i++) {
            if (left[i] > 0) {
                leftCount++;
            }
            if (right[i] > 0) {
                rightCount++;
            }
        }
        return leftCount == rightCount;

=======

        Map<Character, Integer> left = new HashMap<>();
        Map<Character, Integer> right = new HashMap<>();
        for (char c : s.toCharArray()) {
            right.put(c, right.getOrDefault(c, 0) + 1);
        }
        int count = 0;
        for (char c : s.toCharArray()) {
            right.put(c, right.getOrDefault(c, 0) - 1);
            if (right.get(c) == 0) {
                right.remove(c);
            }
            left.put(c, left.getOrDefault(c, 0) + 1);
            if (left.size() == right.size()) {
                count++;
            }
        }
        return count;

=======

        int[] left = new int[26];
        int[] right = new int[26];
        int leftCount = 0;
        int rightCount = 0;
        for (int i = 0; i < s.length(); i++) {
            int c = s.charAt(i) - 'a';
            if (right[c] == 0) {
                rightCount++;
            }
            right[c]++;
        }
        int result = 0;
        for (int i = 0; i < s.length(); i++) {
            int c = s.charAt(i) - 'a';
            left[c]++;
            if (left[c] == 1) {
                leftCount++;
            }
            right[c]--;
            if (right[c] == 0) {
                rightCount--;
            }
            if (leftCount == rightCount) {
                result++;
            }
        }
        return result;

=======

        int[] left = new int[26];
        int[] right = new int[26];
        int leftCount = 0;
        int rightCount = 0;
        for (char c : s.toCharArray()) {
            if (right[c - 'a'] == 0) {
                rightCount++;
            }
            right[c - 'a']++;
        }
        int result = 0;
        for (char c : s.toCharArray()) {
            left[c - 'a']++;
            if (left[c - 'a'] == 1) {
                leftCount++;
            }
            right[c - 'a']--;
            if (right[c - 'a'] == 0) {
                rightCount--;
            }
            if (leftCount == rightCount) {
                result++;
            }
        }
        return result;

=======

        int[] left = new int[26];
        int[] right = new int[26];
        int l = 0;
        int r = 0;
        for (char c : s.toCharArray()) {
            if (right[c - 'a'] == 0) {
                r++;
            }
            right[c - 'a']++;
        }
        int res = 0;
        for (char c : s.toCharArray()) {
            left[c - 'a']++;
            right[c - 'a']--;
            if (left[c - 'a'] == 1) {
                l++;
            }
            if (right[c - 'a'] == 0) {
                r--;
            }
            if (l == r) {
                res++;
            }
        }
        return res;

=======

        int[] left = new int[26];
        int[] right = new int[26];
        int leftCount = 0;
        int rightCount = 0;
        int result = 0;
        for (int i = 0; i < s.length(); i++) {
            int index = s.charAt(i) - 'a';
            if (right[index] == 0) {
                rightCount++;
            }
            right[index]++;
        }
        for (int i = 0; i < s.length(); i++) {
            int index = s.charAt(i) - 'a';
            if (left[index] == 0) {
                leftCount++;
            }
            left[index]++;
            right[index]--;
            if (right[index] == 0) {
                rightCount--;
            }
            if (leftCount == rightCount) {
                result++;
            }
        }
        return result;

=======

        int[] left = new int[26];
        int[] right = new int[26];
        int leftCount = 0;
        int rightCount = 0;
        for (char c : s.toCharArray()) {
            right[c - 'a']++;
            if (right[c - 'a'] == 1) {
                rightCount++;
            }
        }
        int result = 0;
        for (char c : s.toCharArray()) {
            left[c - 'a']++;
            if (left[c - 'a'] == 1) {
                leftCount++;
            }
            right[c - 'a']--;
            if (right[c - 'a'] == 0) {
                rightCount--;
            }
            if (leftCount == rightCount) {
                result++;
            }
        }
        return result;

=======

        int[] left = new int[26];
        int[] right = new int[26];
        int count = 0;
        for (char c : s.toCharArray()) {
            right[c - 'a']++;
        }
        for (char c : s.toCharArray()) {
            left[c - 'a']++;
            right[c - 'a']--;
            if (right[c - 'a'] == 0) {
                count++;
            }
        }
        int res = 0;
        for (int i = 0; i < 26; i++) {
            if (left[i] > 0) {
                res++;
            }
            if (right[i] > 0) {
                count--;
            }
            if (count == 0) {
                break;
            }
        }
        return res;

=======

        int[] left = new int[26], right = new int[26];
        int leftUnique = 0, rightUnique = 0;
        for (char c : s.toCharArray()) {
            if (right[c - 'a'] == 0) {
                rightUnique++;
            }
            right[c - 'a']++;
        }
        int ans = 0;
        for (char c : s.toCharArray()) {
            left[c - 'a']++;
            right[c - 'a']--;
            if (left[c - 'a'] == 1) {
                leftUnique++;
            }
            if (right[c - 'a'] == 0) {
                rightUnique--;
            }
            if (leftUnique == rightUnique) {
                ans++;
            }
        }
        return ans;

=======

        int n = s.length();
        int[] left = new int[n];
        int[] right = new int[n];
        int[] count = new int[26];
        int ans = 0;
        for (int i = 0; i < n; ++i) {
            count[s.charAt(i) - 'a']++;
            left[i] = count[s.charAt(i) - 'a'];
        }
        count = new int[26];
        for (int i = n - 1; i >= 0; --i) {
            count[s.charAt(i) - 'a']++;
            right[i] = count[s.charAt(i) - 'a'];
        }
        for (int i = 1; i < n; ++i) {
            if (left[i - 1] == right[i]) ans++;
        }
        return ans;
