Synthesizing 10/10 solutions

=======

        String s = "1";
        for (int i = 1; i < n; i++) {
            s = countAndSay(s);
        }
        return s;
    }
    private String countAndSay(String s) {
        StringBuilder sb = new StringBuilder();
        int i = 0;
        while (i < s.length()) {
            char c = s.charAt(i);
            int count = 1;
            i++;
            while (i < s.length() && s.charAt(i) == c) {
                count++;
                i++;
            }
            sb.append(count).append(c);
        }
        return sb.toString();

=======

        String s = "1";
        for (int i = 1; i < n; i++) {
            s = countAndSay(s);
        }
        return s;
    }
    public String countAndSay(String s) {
        StringBuilder sb = new StringBuilder();
        int count = 1;
        for (int i = 0; i < s.length(); i++) {
            if (i == s.length() - 1 || s.charAt(i) != s.charAt(i + 1)) {
                sb.append(count).append(s.charAt(i));
                count = 1;
            } else {
                count++;
            }
        }
        return sb.toString();

=======

        if (n == 1) {
            return "1";
        }
        String prev = countAndSay(n - 1);
        StringBuilder sb = new StringBuilder();
        int count = 1;
        for (int i = 1; i < prev.length(); i++) {
            if (prev.charAt(i) == prev.charAt(i - 1)) {
                count++;
            } else {
                sb.append(count);
                sb.append(prev.charAt(i - 1));
                count = 1;
            }
        }
        sb.append(count);
        sb.append(prev.charAt(prev.length() - 1));
        return sb.toString();

=======

        if (n == 1) {
            return "1";
        }
        String prev = countAndSay(n - 1);
        int count = 1;
        StringBuilder sb = new StringBuilder();
        for (int i = 1; i < prev.length(); i++) {
            if (prev.charAt(i) == prev.charAt(i - 1)) {
                count++;
            } else {
                sb.append(count).append(prev.charAt(i - 1));
                count = 1;
            }
        }
        sb.append(count).append(prev.charAt(prev.length() - 1));
        return sb.toString();

=======

        String s = "1";
        for (int i = 1; i < n; i++) {
            s = next(s);
        }
        return s;
    }
    
    private String next(String s) {
        StringBuilder sb = new StringBuilder();
        int i = 0;
        while (i < s.length()) {
            int j = i;
            while (j < s.length() && s.charAt(j) == s.charAt(i)) {
                j++;
            }
            sb.append(j - i).append(s.charAt(i));
            i = j;
        }
        return sb.toString();

=======

        String s = "1";
        for (int i = 1; i < n; i++) {
            s = next(s);
        }
        return s;
    }
    private String next(String s) {
        StringBuilder sb = new StringBuilder();
        int count = 1;
        char c = s.charAt(0);
        for (int i = 1; i < s.length(); i++) {
            if (s.charAt(i) == c) {
                count++;
            } else {
                sb.append(count).append(c);
                count = 1;
                c = s.charAt(i);
            }
        }
        sb.append(count).append(c);
        return sb.toString();

=======

        if (n == 1) return "1";
        String prev = countAndSay(n - 1);
        StringBuilder sb = new StringBuilder();
        int i = 0;
        while (i < prev.length()) {
            int j = i + 1;
            while (j < prev.length() && prev.charAt(j) == prev.charAt(i)) j++;
            sb.append(j - i).append(prev.charAt(i));
            i = j;
        }
        return sb.toString();

=======

        String s = "1";
        for (int i = 1; i < n; i++) {
            s = countAndSay(s);
        }
        return s;
    }
    
    String countAndSay(String s) {
        StringBuilder sb = new StringBuilder();
        int i = 0;
        int j = 1;
        while (j < s.length()) {
            if (s.charAt(i) == s.charAt(j)) {
                j++;
            } else {
                sb.append(j - i);
                sb.append(s.charAt(i));
                i = j;
                j++;
            }
        }
        sb.append(j - i);
        sb.append(s.charAt(i));
        return sb.toString();

=======

        String result = "1";
        for (int i = 2; i <= n; i++) {
            result = countAndSay(result);
        }
        return result;
    }

    private String countAndSay(String s) {
        StringBuilder sb = new StringBuilder();
        int count = 1;
        for (int i = 1; i < s.length(); i++) {
            if (s.charAt(i) == s.charAt(i - 1)) {
                count++;
            } else {
                sb.append(count).append(s.charAt(i - 1));
                count = 1;
            }
        }
        sb.append(count).append(s.charAt(s.length() - 1));
        return sb.toString();

=======

        String s = "1";
        for(int i=2; i<=n; i++){
            s = countAndSay(s);
        }
        return s;
    }
    public String countAndSay(String s){
        StringBuilder sb = new StringBuilder();
        int i=0;
        while(i<s.length()){
            int j=i+1;
            while(j<s.length() && s.charAt(j)==s.charAt(i)){
                j++;
            }
            sb.append(j-i);
            sb.append(s.charAt(i));
            i = j;
        }
        return sb.toString();
