Synthesizing 10/10 solutions

=======

        int n = grid.length;
        UnionFind uf = new UnionFind(4 * n * n);
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                int index = 4 * (i * n + j);
                char c = grid[i].charAt(j);
                if (c == '/') {
                    uf.union(index, index + 3);
                    uf.union(index + 1, index + 2);
                } else if (c == '\\') {
                    uf.union(index, index + 1);
                    uf.union(index + 2, index + 3);
                } else {
                    uf.union(index, index + 1);
                    uf.union(index + 1, index + 2);
                    uf.union(index + 2, index + 3);
                }
                if (i < n - 1) {
                    uf.union(index + 2, index + 4 * n);
                }
                if (i > 0) {
                    uf.union(index, index - 4 * n + 2);
                }
                if (j < n - 1) {
                    uf.union(index + 1, index + 4 + 3);
                }
                if (j > 0) {
                    uf.union(index + 3, index - 4 + 1);
                }
            }
        }
        return uf.getCount();
    }
}

=======

        int n = grid.length;
        int[][] g = new int[n * 3][n * 3];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i].charAt(j) == '/') {
                    g[i * 3][j * 3 + 2] = 1;
                    g[i * 3 + 1][j * 3 + 1] = 1;
                    g[i * 3 + 2][j * 3] = 1;
                } else if (grid[i].charAt(j) == '\\') {
                    g[i * 3][j * 3] = 1;
                    g[i * 3 + 1][j * 3 + 1] = 1;
                    g[i * 3 + 2][j * 3 + 2] = 1;
                }
            }
        }
        int ans = 0;
        for (int i = 0; i < n * 3; i++) {
            for (int j = 0; j < n * 3; j++) {
                if (g[i][j] == 0) {
                    dfs(g, i, j);
                    ans++;
                }
            }
        }
        return ans;
    }
    void dfs(int[][] g, int i, int j) {
        int n = g.length;
        if (i < 0 || i >= n || j < 0 || j >= n || g[i][j] == 1) {
            return;
        }
        g[i][j] = 1;
        dfs(g, i + 1, j);
        dfs(g, i - 1, j);
        dfs(g, i, j + 1);
        dfs(g, i, j - 1);

=======

        int n = grid.length;
        int[][] g = new int[n * 3][n * 3];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i].charAt(j) == '/') {
                    g[i * 3][j * 3 + 2] = g[i * 3 + 1][j * 3 + 1] = g[i * 3 + 2][j * 3] = 1;
                } else if (grid[i].charAt(j) == '\\') {
                    g[i * 3][j * 3] = g[i * 3 + 1][j * 3 + 1] = g[i * 3 + 2][j * 3 + 2] = 1;
                }
            }
        }
        int res = 0;
        for (int i = 0; i < g.length; i++) {
            for (int j = 0; j < g.length; j++) {
                if (g[i][j] == 0) {
                    dfs(g, i, j);
                    res++;
                }
            }
        }
        return res;

=======

        int n = grid.length;
        int[][] g = new int[n * 3][n * 3];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                char c = grid[i].charAt(j);
                if (c == '/') {
                    g[i * 3][j * 3 + 2] = 1;
                    g[i * 3 + 1][j * 3 + 1] = 1;
                    g[i * 3 + 2][j * 3] = 1;
                } else if (c == '\\') {
                    g[i * 3][j * 3] = 1;
                    g[i * 3 + 1][j * 3 + 1] = 1;
                    g[i * 3 + 2][j * 3 + 2] = 1;
                }
            }
        }
        int res = 0;
        for (int i = 0; i < n * 3; i++) {
            for (int j = 0; j < n * 3; j++) {
                if (g[i][j] == 0) {
                    res++;
                    dfs(g, i, j);
                }
            }
        }
        return res;
    }

    private void dfs(int[][] g, int i, int j) {
        if (i < 0 || i >= g.length || j < 0 || j >= g.length || g[i][j] == 1) {
            return;
        }
        g[i][j] = 1;
        dfs(g, i - 1, j);
        dfs(g, i + 1, j);
        dfs(g, i, j - 1);
        dfs(g, i, j + 1);

=======

        int n = grid.length;
        int[][] g = new int[n * 3][n * 3];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i].charAt(j) == '/') {
                    g[i * 3][j * 3 + 2] = 1;
                    g[i * 3 + 1][j * 3 + 1] = 1;
                    g[i * 3 + 2][j * 3] = 1;
                } else if (grid[i].charAt(j) == '\\') {
                    g[i * 3][j * 3] = 1;
                    g[i * 3 + 1][j * 3 + 1] = 1;
                    g[i * 3 + 2][j * 3 + 2] = 1;
                }
            }
        }
        int res = 0;
        for (int i = 0; i < n * 3; i++) {
            for (int j = 0; j < n * 3; j++) {
                if (g[i][j] == 0) {
                    dfs(g, i, j);
                    res++;
                }
            }
        }
        return res;
    }

    public void dfs(int[][] g, int i, int j) {
        if (i < 0 || i >= g.length || j < 0 || j >= g.length || g[i][j] == 1) {
            return;
        }
        g[i][j] = 1;
        dfs(g, i + 1, j);
        dfs(g, i - 1, j);
        dfs(g, i, j + 1);
        dfs(g, i, j - 1);

=======

        int n = grid.length;
        int[][] g = new int[n * 3][n * 3];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i].charAt(j) == '/') {
                    g[i * 3][j * 3 + 2] = 1;
                    g[i * 3 + 1][j * 3 + 1] = 1;
                    g[i * 3 + 2][j * 3] = 1;
                } else if (grid[i].charAt(j) == '\\') {
                    g[i * 3][j * 3] = 1;
                    g[i * 3 + 1][j * 3 + 1] = 1;
                    g[i * 3 + 2][j * 3 + 2] = 1;
                }
            }
        }
        int res = 0;
        for (int i = 0; i < n * 3; i++) {
            for (int j = 0; j < n * 3; j++) {
                if (g[i][j] == 0) {
                    dfs(g, i, j);
                    res++;
                }
            }
        }
        return res;
    }
    private void dfs(int[][] g, int i, int j) {
        if (i < 0 || j < 0 || i >= g.length || j >= g[0].length || g[i][j] == 1) {
            return;
        }
        g[i][j] = 1;
        dfs(g, i + 1, j);
        dfs(g, i - 1, j);
        dfs(g, i, j + 1);
        dfs(g, i, j - 1);

=======

        int n = grid.length;
        int[][] matrix = new int[n * 3][n * 3];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i].charAt(j) == '/') {
                    matrix[i * 3][j * 3 + 2] = 1;
                    matrix[i * 3 + 1][j * 3 + 1] = 1;
                    matrix[i * 3 + 2][j * 3] = 1;
                } else if (grid[i].charAt(j) == '\\') {
                    matrix[i * 3][j * 3] = 1;
                    matrix[i * 3 + 1][j * 3 + 1] = 1;
                    matrix[i * 3 + 2][j * 3 + 2] = 1;
                }
            }
        }
        int count = 0;
        for (int i = 0; i < n * 3; i++) {
            for (int j = 0; j < n * 3; j++) {
                if (matrix[i][j] == 0) {
                    dfs(matrix, i, j);
                    count++;
                }
            }
        }
        return count;
    }

    private void dfs(int[][] matrix, int i, int j) {
        if (i < 0 || i >= matrix.length || j < 0 || j >= matrix.length || matrix[i][j] != 0) {
            return;
        }
        matrix[i][j] = 1;
        dfs(matrix, i + 1, j);
        dfs(matrix, i - 1, j);
        dfs(matrix, i, j + 1);
        dfs(matrix, i, j - 1);

=======

        int n = grid.length;
        int[][] graph = new int[n * n * 4][n * n * 4];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                int index = (i * n + j) * 4;
                if (i > 0) {
                    graph[index][index - n * 4] = 1;
                    graph[index - n * 4][index] = 1;
                }
                if (j > 0) {
                    graph[index + 1][index + 3 - 4] = 1;
                    graph[index + 3 - 4][index + 1] = 1;
                }
                if (grid[i].charAt(j) == '/') {
                    graph[index][index + 3] = 1;
                    graph[index + 3][index] = 1;
                } else if (grid[i].charAt(j) == '\\') {
                    graph[index + 1][index + 2] = 1;
                    graph[index + 2][index + 1] = 1;
                } else {
                    graph[index][index + 3] = 1;
                    graph[index + 3][index] = 1;
                    graph[index + 1][index + 2] = 1;
                    graph[index + 2][index + 1] = 1;
                }
            }
        }
        int ans = 0;
        boolean[] visited = new boolean[n * n * 4];
        for (int i = 0; i < n * n * 4; i++) {
            if (!visited[i]) {
                dfs(graph, visited, i);
                ans++;
            }
        }
        return ans;
    }

    public void dfs(int[][] graph, boolean[] visited, int i) {
        visited[i] = true;
        for (int j = 0; j < graph.length; j++) {
            if (graph[i][j] == 1 && !visited[j]) {
                dfs(graph, visited, j);
            }
        }

=======

        int n = grid.length;
        int[][] arr = new int[n*3][n*3];
        for(int i=0; i<n; i++){
            for(int j=0; j<n; j++){
                if(grid[i].charAt(j) == '/'){
                    arr[i*3][j*3+2] = 1;
                    arr[i*3+1][j*3+1] = 1;
                    arr[i*3+2][j*3] = 1;
                }else if(grid[i].charAt(j) == '\\'){
                    arr[i*3][j*3] = 1;
                    arr[i*3+1][j*3+1] = 1;
                    arr[i*3+2][j*3+2] = 1;
                }
            }
        }
        boolean[][] visited = new boolean[n*3][n*3];
        int count = 0;
        for(int i=0; i<n*3; i++){
            for(int j=0; j<n*3; j++){
                if(arr[i][j] == 0 && !visited[i][j]){
                    dfs(arr, visited, i, j);
                    count++;
                }
            }
        }
        return count;
    }
    public void dfs(int[][] arr, boolean[][] visited, int i, int j){
        if(i<0 || i>=arr.length || j<0 || j>=arr.length || visited[i][j] || arr[i][j] != 0){
            return;
        }
        visited[i][j] = true;
        dfs(arr, visited, i+1, j);
        dfs(arr, visited, i-1, j);
        dfs(arr, visited, i, j+1);
        dfs(arr, visited, i, j-1);

=======

        int n = grid.length;
        int[][] grid2 = new int[n*3][n*3];
        for(int i = 0; i < n; i++){
            String s = grid[i];
            for(int j = 0; j < n; j++){
                if(s.charAt(j) == ' '){
                    grid2[i*3][j*3] = 1;
                    grid2[i*3+1][j*3+1] = 1;
                    grid2[i*3+2][j*3+2] = 1;
                }
                else if(s.charAt(j) == '/'){
                    grid2[i*3][j*3+2] = 1;
                    grid2[i*3+1][j*3+1] = 1;
                    grid2[i*3+2][j*3] = 1;
                }
                else{
                    grid2[i*3][j*3] = 1;
                    grid2[i*3+1][j*3+1] = 1;
                    grid2[i*3+2][j*3+2] = 1;
                }
            }
        }
        int ans = 0;
        for(int i = 0; i < n*3; i++){
            for(int j = 0; j < n*3; j++){
                if(grid2[i][j] == 0){
                    ans++;
                    dfs(i, j, grid2);
                }
            }
        }
        return ans;
    }
    
    public void dfs(int i, int j, int[][] grid){
        if(i < 0 || j < 0 || i >= grid.length || j >= grid.length || grid[i][j] == 1){
            return;
        }
        grid[i][j] = 1;
        dfs(i-1, j, grid);
        dfs(i+1, j, grid);
        dfs(i, j-1, grid);
        dfs(i, j+1, grid);
