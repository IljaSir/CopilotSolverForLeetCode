Synthesizing 10/10 solutions

=======

        Arrays.sort(stones);
        int n = stones.length;
        int max = Math.max(stones[n - 1] - stones[1] - n + 2, stones[n - 2] - stones[0] - n + 2);
        int min = max;
        int i = 0;
        for (int j = 0; j < n; ++j) {
            while (stones[j] - stones[i] >= n) ++i;
            if (j - i + 1 == n - 1 && stones[j] - stones[i] == n - 2) min = Math.min(min, 2);
            else min = Math.min(min, n - (j - i + 1));
        }
        return new int[]{min, max};

=======

        Arrays.sort(stones);
        int n = stones.length;
        int max = Math.max(stones[n-1] - stones[1] - n + 2, stones[n-2] - stones[0] - n + 2);
        int min = max;
        int i = 0, j = 0;
        while (j < n) {
            while (stones[j] - stones[i] + 1 > n) {
                i++;
            }
            if (j - i + 1 == n - 1 && stones[j] - stones[i] + 1 == n - 1) {
                min = Math.min(min, 2);
            } else {
                min = Math.min(min, n - (j - i + 1));
            }
            j++;
        }
        return new int[]{min, max};

=======

        Arrays.sort(stones);
        int n = stones.length;
        int max = Math.max(stones[n - 1] - stones[1] + 1 - (n - 2), stones[n - 2] - stones[0] + 1 - (n - 2));
        int min = Integer.MAX_VALUE;
        for (int i = 0, j = 0; i < n; i++) {
            while (j + 1 < n && stones[j + 1] - stones[i] + 1 <= n) {
                j++;
            }
            int cost = n - (j - i + 1);
            if (j - i + 1 == n - 1 && stones[j] - stones[i] + 1 == n - 1) {
                cost = 2;
            }
            min = Math.min(min, cost);
        }
        return new int[]{min, max};

=======

        Arrays.sort(stones);
        int n = stones.length;
        int min = Integer.MAX_VALUE;
        int max = stones[n - 1] - stones[0] + 1 - n;
        int i = 0;
        int j = 0;
        while (j < n) {
            while (stones[j] - stones[i] + 1 > n) {
                i++;
            }
            int cost = n - (j - i + 1);
            if (j - i + 1 == n - 1 && stones[j] - stones[i] + 1 == n - 1) {
                cost = 2;
            }
            min = Math.min(min, cost);
            j++;
        }
        return new int[]{min, max};

=======

        Arrays.sort(stones);
        int n = stones.length;
        int min = Integer.MAX_VALUE;
        int max = stones[n - 1] - stones[0] + 1 - n;
        int i = 0;
        int j = 0;
        for (; i < n; i++) {
            while (j + 1 < n && stones[j + 1] - stones[i] + 1 <= n) j++;
            int cost = n - (j - i + 1);
            if (j - i + 1 == n - 1 && stones[j] - stones[i] + 1 == n - 1) cost = 2;
            min = Math.min(min, cost);
        }
        return new int[] {min, max};

=======

        Arrays.sort(stones);
        int n = stones.length;
        int min = Integer.MAX_VALUE;
        int max = stones[n - 1] - stones[0] + 1 - n;
        int j = 0;
        for (int i = 0; i < n; i++) {
            while (stones[i] - stones[j] >= n) {
                j++;
            }
            if (i - j + 1 == n - 1 && stones[i] - stones[j] == n - 2) {
                min = Math.min(min, 2);
            } else {
                min = Math.min(min, n - (i - j + 1));
            }
        }
        return new int[] {min, max};

=======

        Arrays.sort(stones);
        int n = stones.length;
        int max = stones[n - 1] - stones[0] + 1 - n;
        int min = max;
        int i = 0, j = 0;
        while (j < n) {
            while (stones[j] - stones[i] + 1 > n) {
                i++;
            }
            int cost = n - (j - i + 1);
            if (j - i + 1 == n - 1 && stones[j] - stones[i] + 1 == n - 1) {
                cost = 2;
            }
            min = Math.min(min, cost);
            j++;
        }
        return new int[]{min, max};

=======

        Arrays.sort(stones);
        int n = stones.length;
        int min = Integer.MAX_VALUE;
        int max = stones[n - 1] - stones[0] - n + 1;
        int i = 0, j = 0;
        for (i = 0; i < n; i++) {
            while (j + 1 < n && stones[j + 1] - stones[i] + 1 <= n) {
                j++;
            }
            int cost = n - (j - i + 1);
            if (j - i + 1 == n - 1 && stones[j] - stones[i] + 1 == n - 1) {
                cost = 2;
            }
            min = Math.min(min, cost);
        }
        return new int[]{min, max};

=======

        Arrays.sort(stones);
        int n = stones.length;
        int low = Integer.MAX_VALUE;
        int high = Math.max(stones[n - 1] - stones[1] + 1 - n + 2, stones[n - 2] - stones[0] + 1 - n + 2);
        for (int i = 0, j = 0; i < n; i++) {
            while (stones[i] - stones[j] + 1 > n) {
                j++;
            }
            if (stones[i] - stones[j] + 1 == n - 1 && stones[i] - stones[j] + 1 > 2) {
                low = Math.min(low, 2);
            } else {
                low = Math.min(low, n - (i - j + 1));
            }
        }
        return new int[] {low, high};

=======

        int n = stones.length;
        Arrays.sort(stones);
        int max = stones[n-1] - stones[0] + 1 - n;
        int min = max;
        int i = 0, j = 0;
        while (j < n) {
            while (stones[j] - stones[i] + 1 > n) {
                i++;
            }
            int cost = n - (j - i + 1);
            if (j - i + 1 == n - 1 && stones[j] - stones[i] + 1 == n - 1) {
                cost = 2;
            }
            min = Math.min(min, cost);
            j++;
        }
        return new int[]{min, max};
