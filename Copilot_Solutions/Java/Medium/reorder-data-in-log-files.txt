Synthesizing 10/10 solutions (Duplicates hidden)

=======

        Arrays.sort(logs, (log1, log2) -> {
            String[] split1 = log1.split(" ", 2);
            String[] split2 = log2.split(" ", 2);
            boolean isDigit1 = Character.isDigit(split1[1].charAt(0));
            boolean isDigit2 = Character.isDigit(split2[1].charAt(0));
            if (!isDigit1 && !isDigit2) {
                int cmp = split1[1].compareTo(split2[1]);
                if (cmp != 0) {
                    return cmp;
                }
                return split1[0].compareTo(split2[0]);
            }
            return isDigit1 ? (isDigit2 ? 0 : 1) : -1;
        });
        return logs;

=======

        Arrays.sort(logs, (log1, log2) -> {
            String[] split1 = log1.split(" ", 2);
            String[] split2 = log2.split(" ", 2);
            boolean isDigit1 = Character.isDigit(split1[1].charAt(0));
            boolean isDigit2 = Character.isDigit(split2[1].charAt(0));
            if (!isDigit1 && !isDigit2) {
                int cmp = split1[1].compareTo(split2[1]);
                if (cmp != 0) return cmp;
                return split1[0].compareTo(split2[0]);
            }
            return isDigit1 ? (isDigit2 ? 0 : 1) : -1;
        });
        return logs;

=======

        Comparator<String> myComp = new Comparator<String>() {
            @Override
            public int compare(String s1, String s2) {
                int s1Space = s1.indexOf(' ');
                int s2Space = s2.indexOf(' ');
                char s1First = s1.charAt(s1Space + 1);
                char s2First = s2.charAt(s2Space + 1);
                if (s1First <= '9') {
                    if (s2First <= '9') {
                        return 0;
                    } else {
                        return 1;
                    }
                }
                if (s2First <= '9') {
                    return -1;
                }
                int preCompute = s1.substring(s1Space + 1).compareTo(s2.substring(s2Space + 1));
                if (preCompute == 0) {
                    return s1.substring(0, s1Space).compareTo(s2.substring(0, s2Space));
                }
                return preCompute;
            }
        };
        Arrays.sort(logs, myComp);
        return logs;

=======

        Arrays.sort(logs, new Comparator<String>() {
            @Override
            public int compare(String s1, String s2) {
                String[] ss1 = s1.split(" ", 2);
                String[] ss2 = s2.split(" ", 2);
                boolean isDigit1 = Character.isDigit(ss1[1].charAt(0));
                boolean isDigit2 = Character.isDigit(ss2[1].charAt(0));
                if (!isDigit1 && !isDigit2) {
                    int cmp = ss1[1].compareTo(ss2[1]);
                    if (cmp != 0) {
                        return cmp;
                    }
                    return ss1[0].compareTo(ss2[0]);
                }
                return isDigit1 ? (isDigit2 ? 0 : 1) : -1;
            }
        });
        return logs;

=======

        Arrays.sort(logs, new Comparator<String>() {
            @Override
            public int compare(String s1, String s2) {
                int s1Index = s1.indexOf(" ");
                int s2Index = s2.indexOf(" ");
                char s1FirstChar = s1.charAt(s1Index + 1);
                char s2FirstChar = s2.charAt(s2Index + 1);
                if (s1FirstChar <= '9') {
                    if (s2FirstChar <= '9') {
                        return 0;
                    } else {
                        return 1;
                    }
                }
                if (s2FirstChar <= '9') {
                    return -1;
                }
                int cmp = s1.substring(s1Index + 1).compareTo(s2.substring(s2Index + 1));
                if (cmp != 0) {
                    return cmp;
                }
                return s1.substring(0, s1Index).compareTo(s2.substring(0, s2Index));
            }
        });
        return logs;

=======

        Arrays.sort(logs, new Comparator<String>() {
            public int compare(String a, String b) {
                String[] aSplit = a.split(" ", 2);
                String[] bSplit = b.split(" ", 2);
                boolean isDigitA = Character.isDigit(aSplit[1].charAt(0));
                boolean isDigitB = Character.isDigit(bSplit[1].charAt(0));
                if (!isDigitA && !isDigitB) {
                    int cmp = aSplit[1].compareTo(bSplit[1]);
                    if (cmp != 0) {
                        return cmp;
                    }
                    return aSplit[0].compareTo(bSplit[0]);
                }
                return isDigitA ? (isDigitB ? 0 : 1) : -1;
            }
        });
        return logs;

=======

        List<String> digitLogs = new ArrayList<>();
        List<String> letterLogs = new ArrayList<>();
        for (String log : logs) {
            int i = log.indexOf(' ');
            if (Character.isDigit(log.charAt(i + 1))) {
                digitLogs.add(log);
            } else {
                letterLogs.add(log);
            }
        }
        Collections.sort(letterLogs, (a, b) -> {
            int i = a.indexOf(' ');
            int j = b.indexOf(' ');
            String s1 = a.substring(i + 1);
            String s2 = b.substring(j + 1);
            int cmp = s1.compareTo(s2);
            if (cmp == 0) {
                return a.substring(0, i).compareTo(b.substring(0, j));
            }
            return cmp;
        });
        String[] ans = new String[logs.length];
        int i = 0;
        for (String log : letterLogs) {
            ans[i++] = log;
        }
        for (String log : digitLogs) {
            ans[i++] = log;
        }
        return ans;
