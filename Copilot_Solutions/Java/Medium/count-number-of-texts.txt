Synthesizing 9/10 solutions

=======

        int MOD = 1000000007;
        int n = pressedKeys.length();
        int[] dp = new int[n + 1];
        dp[0] = 1;
        for (int i = 1; i <= n; i++) {
            int x = pressedKeys.charAt(i - 1) - '0';
            if (x == 0 || x == 1) {
                return 0;
            }
            if (x == 7 || x == 9) {
                dp[i] = ((dp[i - 1] * 4) % MOD + dp[i - 2]) % MOD;
            } else {
                dp[i] = ((dp[i - 1] * 3) % MOD + dp[i - 2]) % MOD;
            }
        }
        return dp[n];

=======

        int[] dp = new int[pressedKeys.length()];
        int mod = 1000000007;
        dp[0] = 1;
        for (int i = 1; i < pressedKeys.length(); i++) {
            dp[i] = dp[i - 1];
            if (pressedKeys.charAt(i) == pressedKeys.charAt(i - 1)) {
                dp[i] = (dp[i] + dp[Math.max(0, i - 2)]) % mod;
            }
        }
        return dp[pressedKeys.length() - 1];

=======

        if (pressedKeys == null || pressedKeys.length() == 0) {
            return 0;
        }
        int[] dp = new int[pressedKeys.length()];
        dp[0] = 1;
        for (int i = 1; i < pressedKeys.length(); i++) {
            int cur = pressedKeys.charAt(i) - '0';
            int pre = pressedKeys.charAt(i - 1) - '0';
            if (cur == pre) {
                dp[i] = dp[i - 1];
            } else if (cur > pre) {
                dp[i] = dp[i - 1] * (cur - pre + 1);
            } else {
                dp[i] = dp[i - 1] * (cur + 10 - pre + 1);
            }
        }
        return dp[pressedKeys.length() - 1];

=======

        int mod = 1000000007;
        int len = pressedKeys.length();
        int[] dp = new int[len+1];
        dp[0] = 1;
        for (int i = 1; i <= len; i++) {
            int cur = pressedKeys.charAt(i-1) - '0';
            dp[i] = dp[i-1];
            if (i > 1 && cur != pressedKeys.charAt(i-2) - '0') {
                dp[i] = (dp[i] + dp[i-2]) % mod;
            }
        }
        return dp[len];

=======

        int n = pressedKeys.length();
        int mod = 1000000007;
        int[] dp = new int[n+1];
        dp[0] = 1;
        for (int i=1; i<=n; i++) {
            int c = pressedKeys.charAt(i-1) - '0';
            if (c == 0 || c == 1) {
                return 0;
            }
            dp[i] = dp[i-1];
            if (i > 1) {
                int p = pressedKeys.charAt(i-2) - '0';
                if (p == 7 || p == 9) {
                    if (c == p) {
                        dp[i] = (dp[i] + dp[i-2]) % mod;
                    }
                } else {
                    if (c == p) {
                        dp[i] = (dp[i] + dp[i-2]) % mod;
                    } else if (c == p + 1) {
                        dp[i] = (dp[i] + dp[i-2]) % mod;
                    }
                }
            }
        }
        return dp[n];

=======

        int n = pressedKeys.length();
        int[] count = new int[n];
        int[] dp = new int[n];
        count[0] = 1;
        dp[0] = 1;
        for (int i = 1; i < n; i++) {
            if (pressedKeys.charAt(i) == pressedKeys.charAt(i - 1)) {
                count[i] = count[i - 1] + 1;
            } else {
                count[i] = 1;
            }
            if (pressedKeys.charAt(i) == pressedKeys.charAt(i - 1) && count[i] < 3) {
                dp[i] = dp[i - 1] + 1;
            } else if (pressedKeys.charAt(i) == pressedKeys.charAt(i - 1) && count[i] == 3) {
                dp[i] = dp[i - 1];
            } else {
                dp[i] = dp[i - 1] + 2;
            }
        }
        return dp[n - 1];

=======

        int[] dp = new int[pressedKeys.length()];
        dp[0] = 1;
        int mod = (int)Math.pow(10,9)+7;
        for(int i = 1; i < pressedKeys.length(); i++){
            int count = 1;
            while(i-count >= 0 && pressedKeys.charAt(i) == pressedKeys.charAt(i-count)){
                count++;
            }
            if(pressedKeys.charAt(i) == pressedKeys.charAt(i-1)){
                if(i-count >= 0){
                    dp[i] = (dp[i-1] + dp[i-count]) % mod;
                }else{
                    dp[i] = (dp[i-1] + 1) % mod;
                }
            }else{
                dp[i] = dp[i-1];
            }
        }
        return dp[pressedKeys.length()-1];

=======

        int m = 1000000007;
        int n = pressedKeys.length();
        int[] dp = new int[n];
        int[] count = new int[10];
        count[2] = 3;
        count[3] = 3;
        count[4] = 3;
        count[5] = 3;
        count[6] = 3;
        count[7] = 4;
        count[8] = 3;
        count[9] = 4;
        dp[0] = count[pressedKeys.charAt(0) - '0'];
        for (int i = 1; i < n; i++) {
            int c = pressedKeys.charAt(i) - '0';
            int d = pressedKeys.charAt(i - 1) - '0';
            dp[i] = (dp[i - 1] * count[c]) % m;
            if (d == c) {
                dp[i] = (dp[i] + (i >= 2 ? dp[i - 2] : 1)) % m;
            }
        }
        return dp[n - 1];

=======

        int n = pressedKeys.length();
        int[] dp = new int[n];
        int mod = 1000000007;
        int[] counts = new int[10];
        for (int i = 0; i < n; i++) {
            int c = pressedKeys.charAt(i) - '0';
            if (c == 7 || c == 9) {
                counts[c] = counts[c] + 1;
                dp[i] = (dp[i] + counts[c]) % mod;
            } else {
                counts[c] = counts[c] + 1;
                dp[i] = (dp[i] + counts[c]) % mod;
            }
            if (i > 0) {
                int prev = pressedKeys.charAt(i - 1) - '0';
                if (c == prev) {
                    dp[i] = (dp[i] + dp[i - 1]) % mod;
                } else if (prev == 7 && c == 9 || prev == 9 && c == 7) {
                    dp[i] = (dp[i] + dp[i - 1]) % mod;
                }
            }
        }
        return dp[n - 1];
