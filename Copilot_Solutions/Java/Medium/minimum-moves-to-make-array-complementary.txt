Synthesizing 10/10 solutions

=======

        int n = nums.length;
        int[] diff = new int[2 * limit + 2];
        for (int i = 0; i < n / 2; i++) {
            int a = nums[i], b = nums[n - 1 - i];
            diff[2] += 2;
            diff[Math.min(a, b) + 1] -= 1;
            diff[a + b] -= 1;
            diff[a + b + 1] += 1;
            diff[Math.max(a, b) + limit + 1] += 1;
        }
        int res = n, cur = 0;
        for (int d : diff) {
            cur += d;
            res = Math.min(res, cur);
        }
        return res;

=======

        int n = nums.length;
        int[] diff = new int[2 * limit + 2];
        for (int i = 0; i < n / 2; ++i) {
            int a = nums[i], b = nums[n - 1 - i];
            --diff[2];
            ++diff[Math.min(a, b) + 1];
            ++diff[a + b];
            --diff[a + b + 1];
            ++diff[Math.max(a, b) + limit + 1];
            ++diff[2 * limit + 1];
        }
        int ans = n, cur = 0;
        for (int i = 2; i <= 2 * limit; ++i) {
            cur += diff[i];
            ans = Math.min(ans, cur);
        }
        return ans;

=======

        int n = nums.length;
        int[] d = new int[2 * limit + 2];
        for (int i = 0; i < n / 2; ++i) {
            int a = nums[i], b = nums[n - i - 1];
            --d[2];
            ++d[Math.min(a, b) + 1];
            ++d[a + b];
            --d[a + b + 1];
            ++d[Math.max(a, b) + limit + 1];
            ++d[2 * limit + 1];
        }

        int res = n;
        for (int i = 2; i <= 2 * limit; ++i) {
            d[i] += d[i - 1];
            res = Math.min(res, d[i]);
        }
        return res;

=======

        int n = nums.length;
        int[] diff = new int[2 * limit + 2];
        for (int i = 0; i < n / 2; i++) {
            int a = nums[i], b = nums[n - 1 - i];
            diff[2] += 2;
            diff[Math.min(a, b) + 1]--;
            diff[a + b]--;
            diff[a + b + 1]++;
            diff[Math.max(a, b) + limit + 1]++;
        }
        int res = n, cur = 0;
        for (int i = 2; i <= 2 * limit; i++) {
            cur += diff[i];
            res = Math.min(res, cur);
        }
        return res;

=======

        int n = nums.length;
        int[] diff = new int[2 * limit + 2];
        for (int i = 0; i < n / 2; i++) {
            int a = nums[i];
            int b = nums[n - 1 - i];
            int l = Math.min(a, b) + 1;
            int r = Math.max(a, b) + limit;
            diff[l]--;
            diff[a + b]--;
            diff[a + b + 1]++;
            diff[r + 1]++;
        }
        int res = n;
        int cur = 0;
        for (int i = 2; i <= 2 * limit; i++) {
            cur += diff[i];
            res = Math.min(res, cur);
        }
        return res;

=======

        int n = nums.length;
        int[] diff = new int[2 * limit + 2];
        for (int i = 0; i < n / 2; i++) {
            int sum = nums[i] + nums[n - 1 - i];
            diff[2] += 2;
            diff[sum]--;
            diff[sum + 1]++;
            diff[sum + limit + 1]--;
            diff[2 * limit + 1]++;
        }
        int ans = n;
        int cur = 0;
        for (int i = 2; i <= 2 * limit; i++) {
            cur += diff[i];
            ans = Math.min(ans, cur);
        }
        return ans;

=======

        int n = nums.length;
        int[] delta = new int[2 * limit + 2];
        for (int i = 0; i < n / 2; i++) {
            int a = nums[i], b = nums[n - 1 - i];
            delta[2] += 2;
            delta[Math.min(a, b) + 1] -= 1;
            delta[a + b] -= 1;
            delta[a + b + 1] += 1;
            delta[Math.max(a, b) + limit + 1] += 1;
        }
        int res = n, cur = 0;
        for (int i = 2; i <= 2 * limit; i++) {
            cur += delta[i];
            res = Math.min(res, cur);
        }
        return res;

=======

        int[] diff = new int[2 * limit + 2];
        int n = nums.length;
        for (int i = 0; i < n / 2; i++) {
            int sum = nums[i] + nums[n - 1 - i];
            diff[2] += 2;
            diff[Math.min(nums[i], nums[n - 1 - i]) + 1]--;
            diff[sum]--;
            diff[sum + 1]++;
            diff[Math.max(nums[i], nums[n - 1 - i]) + limit + 1]++;
        }
        int res = n, cur = 0;
        for (int i = 2; i <= 2 * limit; i++) {
            cur += diff[i];
            res = Math.min(res, cur);
        }
        return res;

=======

        int n = nums.length;
        int[] diff = new int[2 * limit + 2];
        for (int i = 0; i < n / 2; ++i) {
            int lo = Math.min(nums[i], nums[n - 1 - i]) + 1;
            int hi = Math.max(nums[i], nums[n - 1 - i]) + limit;
            diff[lo]--;
            diff[hi + 1]++;
            diff[nums[i] + nums[n - 1 - i]] += 2;
        }
        int ans = n;
        int cur = 0;
        for (int i = 2; i <= 2 * limit; ++i) {
            cur += diff[i];
            ans = Math.min(ans, cur);
        }
        return ans;

=======

        int n = nums.length;
        int[] moves = new int[2 * limit + 2];
        for (int i = 0, j = n - 1; i < j; i++, j--) {
            int min = Math.min(nums[i], nums[j]) + 1;
            int max = Math.max(nums[i], nums[j]) + limit;
            moves[min]--;
            moves[nums[i] + nums[j]]--;
            moves[nums[i] + nums[j] + 1]++;
            moves[max + 1]++;
        }
        int minMoves = n;
        int currMoves = 0;
        for (int i = 2; i <= 2 * limit; i++) {
            currMoves += moves[i];
            minMoves = Math.min(minMoves, currMoves);
        }
        return minMoves;
