Synthesizing 10/10 solutions

=======

        int n = strs.length;
        int m = strs[0].length();
        int[] dp = new int[m];
        Arrays.fill(dp, 1);
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < i; j++) {
                boolean flag = true;
                for (int k = 0; k < n; k++) {
                    if (strs[k].charAt(j) > strs[k].charAt(i)) {
                        flag = false;
                        break;
                    }
                }
                if (flag) {
                    dp[i] = Math.max(dp[i], dp[j] + 1);
                }
            }
        }
        return m - Arrays.stream(dp).max().getAsInt();

=======

        int n = strs.length;
        int m = strs[0].length();
        int[] dp = new int[m];
        Arrays.fill(dp, 1);
        for (int i = 1; i < m; i++) {
            for (int j = 0; j < i; j++) {
                boolean flag = true;
                for (int k = 0; k < n; k++) {
                    if (strs[k].charAt(j) > strs[k].charAt(i)) {
                        flag = false;
                        break;
                    }
                }
                if (flag) {
                    dp[i] = Math.max(dp[i], dp[j] + 1);
                }
            }
        }
        return m - Arrays.stream(dp).max().getAsInt();

=======

        int n = strs.length;
        int m = strs[0].length();
        int[] dp = new int[m];
        Arrays.fill(dp, 1);
        int res = 0;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < i; j++) {
                if (isSorted(strs, j, i)) {
                    dp[i] = Math.max(dp[i], dp[j] + 1);
                }
            }
            res = Math.max(res, dp[i]);
        }
        return m - res;
    }

    private boolean isSorted(String[] strs, int start, int end) {
        for (String str : strs) {
            for (int i = start; i < end; i++) {
                if (str.charAt(i) > str.charAt(i + 1)) {
                    return false;
                }
            }
        }
        return true;

=======

        int n = strs.length;
        int m = strs[0].length();
        int[] dp = new int[m];
        Arrays.fill(dp, 1);
        int ans = 0;
        for (int j = 0; j < m; j++) {
            for (int i = 0; i < j; i++) {
                if (dp[i] == j - i && check(strs, i, j)) {
                    dp[j] = Math.max(dp[j], dp[i] + 1);
                }
            }
            ans = Math.max(ans, dp[j]);
        }
        return m - ans;
    }
    
    private boolean check(String[] strs, int i, int j) {
        for (String str : strs) {
            if (str.charAt(i) > str.charAt(j)) {
                return false;
            }
        }
        return true;

=======

        int n = strs.length;
        int m = strs[0].length();
        int[] dp = new int[n];
        Arrays.fill(dp, 1);
        int res = 0;
        for (int j = 0; j < m; j++) {
            int[] ndp = new int[n];
            for (int i = 0; i < n; i++) {
                ndp[i] = dp[i];
                if (ndp[i] == 0) continue;
                for (int k = i + 1; k < n; k++) {
                    if (strs[i].charAt(j) > strs[k].charAt(j)) {
                        ndp[i] = 0;
                        break;
                    }
                }
                for (int k = 0; k < i; k++) {
                    if (strs[i].charAt(j) < strs[k].charAt(j)) {
                        ndp[i] = 0;
                        break;
                    }
                }
            }
            if (Arrays.stream(ndp).sum() == 0) {
                res++;
            } else {
                dp = ndp;
            }
        }
        return res;

=======

        int n = strs.length;
        int m = strs[0].length();
        int[] dp = new int[m];
        Arrays.fill(dp, 1);
        for (int i = 1; i < m; ++i) {
            for (int j = 0; j < i; ++j) {
                boolean isSorted = true;
                for (int k = 0; k < n; ++k) {
                    if (strs[k].charAt(j) > strs[k].charAt(i)) {
                        isSorted = false;
                        break;
                    }
                }
                if (isSorted) {
                    dp[i] = Math.max(dp[i], dp[j] + 1);
                }
            }
        }
        return m - Arrays.stream(dp).max().getAsInt();

=======

        int n = strs.length;
        int m = strs[0].length();
        int[] dp = new int[m];
        int res = 0;
        for (int i = 0; i < m; i++) {
            dp[i] = 1;
            for (int j = 0; j < i; j++) {
                boolean isSorted = true;
                for (int k = 0; k < n; k++) {
                    if (strs[k].charAt(j) > strs[k].charAt(i)) {
                        isSorted = false;
                        break;
                    }
                }
                if (isSorted) {
                    dp[i] = Math.max(dp[i], dp[j] + 1);
                }
            }
            res = Math.max(res, dp[i]);
        }
        return m - res;

=======

        int n = strs.length;
        int m = strs[0].length();
        int[] dp = new int[n];
        int res = 0;
        for (int i = 0; i < m; i++) {
            int[] ndp = new int[n];
            for (int j = 0; j < n; j++) {
                ndp[j] = dp[j] + 1;
                for (int k = 0; k < j; k++) {
                    if (strs[k].charAt(i) <= strs[j].charAt(i)) {
                        ndp[j] = Math.min(ndp[j], dp[k]);
                    }
                }
            }
            dp = ndp;
            int min = Integer.MAX_VALUE;
            for (int j = 0; j < n; j++) {
                min = Math.min(min, dp[j]);
            }
            if (min == n) {
                res++;
            }
        }
        return res;

=======

        int n = strs.length;
        int m = strs[0].length();
        boolean[] isSorted = new boolean[n - 1];
        int count = 0;
        for (int j = 0; j < m; j++) {
            boolean isSortedCol = true;
            for (int i = 0; i < n - 1; i++) {
                if (!isSorted[i] && strs[i].charAt(j) > strs[i + 1].charAt(j)) {
                    count++;
                    isSortedCol = false;
                    break;
                }
            }
            if (isSortedCol) {
                for (int i = 0; i < n - 1; i++) {
                    if (strs[i].charAt(j) < strs[i + 1].charAt(j)) {
                        isSorted[i] = true;
                    }
                }
            }
        }
        return count;

=======

        int n = strs.length;
        int m = strs[0].length();
        boolean[] deleted = new boolean[n];
        int ans = 0;
        for (int i = 0; i < m; ++i) {
            boolean ok = true;
            for (int j = 1; j < n; ++j) {
                if (!deleted[j] && strs[j].charAt(i) < strs[j-1].charAt(i)) {
                    ok = false;
                    break;
                }
            }
            if (ok) {
                for (int j = 1; j < n; ++j) {
                    if (strs[j].charAt(i) > strs[j-1].charAt(i)) {
                        deleted[j] = true;
                    }
                }
            } else {
                ans++;
            }
        }
        return ans;
