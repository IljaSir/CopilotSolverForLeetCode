Synthesizing 10/10 solutions

=======

        Map<Character, Integer> map = new HashMap<>();
        map.put('Q', 0);
        map.put('W', 0);
        map.put('E', 0);
        map.put('R', 0);
        for (char c : s.toCharArray()) {
            map.put(c, map.get(c) + 1);
        }
        int n = s.length();
        int res = n;
        int i = 0;
        for (int j = 0; j < n; j++) {
            map.put(s.charAt(j), map.get(s.charAt(j)) - 1);
            while (i < n && map.get('Q') <= n / 4 && map.get('W') <= n / 4 && map.get('E') <= n / 4 && map.get('R') <= n / 4) {
                res = Math.min(res, j - i + 1);
                map.put(s.charAt(i), map.get(s.charAt(i)) + 1);
                i++;
            }
        }
        return res;

=======

        int n = s.length();
        int k = n / 4;
        int[] count = new int[26];
        for (int i = 0; i < n; i++) {
            count[s.charAt(i) - 'A']++;
        }
        int l = 0;
        int r = 0;
        int ans = n;
        while (r < n) {
            count[s.charAt(r) - 'A']--;
            while (l < n && count['Q' - 'A'] <= k && count['W' - 'A'] <= k && count['E' - 'A'] <= k && count['R' - 'A'] <= k) {
                ans = Math.min(ans, r - l + 1);
                count[s.charAt(l) - 'A']++;
                l++;
            }
            r++;
        }
        return ans;

=======

        int n = s.length();
        int[] count = new int[26];
        for (int i = 0; i < n; i++) {
            count[s.charAt(i) - 'A']++;
        }
        int[] target = new int[26];
        for (int i = 0; i < 26; i++) {
            target[i] = n / 4;
        }
        int ans = n;
        int l = 0;
        for (int r = 0; r < n; r++) {
            count[s.charAt(r) - 'A']--;
            while (l < n && check(count, target)) {
                ans = Math.min(ans, r - l + 1);
                count[s.charAt(l) - 'A']++;
                l++;
            }
        }
        return ans;
    }
    public boolean check(int[] count, int[] target) {
        for (int i = 0; i < 26; i++) {
            if (count[i] > target[i]) {
                return false;
            }
        }
        return true;

=======

        int n = s.length();
        int k = n / 4;
        int[] count = new int[128];
        for (char c : s.toCharArray()) {
            count[c]++;
        }
        int i = 0, j = 0, ans = n;
        while (j < n) {
            count[s.charAt(j)]--;
            while (i < n && count['Q'] <= k && count['W'] <= k && count['E'] <= k && count['R'] <= k) {
                ans = Math.min(ans, j - i + 1);
                count[s.charAt(i)]++;
                i++;
            }
            j++;
        }
        return ans;

=======

        int n = s.length();
        int[] count = new int[26];
        for (char c: s.toCharArray()) {
            count[c - 'A']++;
        }
        int k = n / 4;
        if (count['Q' - 'A'] == k && count['W' - 'A'] == k && count['E' - 'A'] == k && count['R' - 'A'] == k) {
            return 0;
        }
        int ans = n;
        int left = 0;
        for (int right = 0; right < n; right++) {
            count[s.charAt(right) - 'A']--;
            while (left < n && count['Q' - 'A'] <= k && count['W' - 'A'] <= k && count['E' - 'A'] <= k && count['R' - 'A'] <= k) {
                ans = Math.min(ans, right - left + 1);
                count[s.charAt(left) - 'A']++;
                left++;
            }
        }
        return ans;

=======

        int[] count = new int[128];
        for (char c : s.toCharArray()) {
            count[c]++;
        }
        int n = s.length(), res = n;
        for (int i = 0, j = 0; j < n; j++) {
            count[s.charAt(j)]--;
            while (i < n && count['Q'] <= n / 4 && count['W'] <= n / 4 && count['E'] <= n / 4 && count['R'] <= n / 4) {
                res = Math.min(res, j - i + 1);
                count[s.charAt(i)]++;
                i++;
            }
        }
        return res;

=======

        int n = s.length();
        int[] cnt = new int[26];
        for (char c : s.toCharArray()) {
            cnt[c - 'A']++;
        }
        int i = 0;
        for (i = 0; i < n; i++) {
            if (cnt[s.charAt(i) - 'A'] > n / 4) {
                break;
            }
        }
        if (i == n) {
            return 0;
        }
        int j = 0;
        int res = n;
        for (; i < n; i++) {
            cnt[s.charAt(i) - 'A']--;
            while (j <= i && cnt['Q' - 'A'] <= n / 4 && cnt['W' - 'A'] <= n / 4 && cnt['E' - 'A'] <= n / 4 && cnt['R' - 'A'] <= n / 4) {
                res = Math.min(res, i - j + 1);
                cnt[s.charAt(j++) - 'A']++;
            }
        }
        return res;

=======

        int[] map = new int[26];
        for (char c : s.toCharArray()) {
            map[c - 'A']++;
        }
        int result = 0;
        for (int i = 0; i < 26; i++) {
            if (map[i] > s.length() / 4) {
                result += map[i] - s.length() / 4;
            }
        }
        return result;

=======

        int n = s.length();
        int[] count = new int[256];
        for (char c : s.toCharArray()) {
            count[c]++;
        }
        int result = n;
        for (int i = 0, j = 0; j < n; j++) {
            count[s.charAt(j)]--;
            while (i < n && count['Q'] <= n / 4 && count['W'] <= n / 4 && count['E'] <= n / 4 && count['R'] <= n / 4) {
                result = Math.min(result, j - i + 1);
                count[s.charAt(i)]++;
                i++;
            }
        }
        return result;

=======

        int n = s.length();
        int[] map = new int[26];
        for (char c : s.toCharArray()) {
            map[c - 'A']++;
        }
        int k = n / 4;
        int lo = 0;
        int hi = 0;
        int res = n;
        while (hi < n) {
            map[s.charAt(hi) - 'A']--;
            while (lo <= hi && map['Q' - 'A'] <= k && map['W' - 'A'] <= k && map['E' - 'A'] <= k && map['R' - 'A'] <= k) {
                res = Math.min(res, hi - lo + 1);
                map[s.charAt(lo) - 'A']++;
                lo++;
            }
            hi++;
        }
        return res;
