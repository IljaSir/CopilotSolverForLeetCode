Synthesizing 10/10 solutions

=======

        String s = String.valueOf(num);
        char[] a = s.toCharArray();
        char[] b = s.toCharArray();
        char x = 'a';
        char y = 'b';
        for (int i = 0; i < a.length; i++) {
            if (a[i] != '9') {
                x = a[i];
                break;
            }
        }
        for (int i = 0; i < a.length; i++) {
            if (a[i] == x) {
                a[i] = '9';
            }
        }
        if (b[0] != '1') {
            y = b[0];
            for (int i = 0; i < b.length; i++) {
                if (b[i] == y) {
                    b[i] = '1';
                }
            }
        } else {
            for (int i = 1; i < b.length; i++) {
                if (b[i] != '0' && b[i] != '1') {
                    y = b[i];
                    break;
                }
            }
            for (int i = 0; i < b.length; i++) {
                if (b[i] == y) {
                    b[i] = '0';
                }
            }
        }
        return Integer.valueOf(String.valueOf(a)) - Integer.valueOf(String.valueOf(b));

=======

        String s = String.valueOf(num);
        char[] c = s.toCharArray();
        int n = c.length;
        int a = num;
        int b = num;
        for (int i = 0; i < n; i++) {
            if (c[i] != '9') {
                a = Math.max(a, Integer.parseInt(s.replace(c[i], '9')));
                break;
            }
        }
        if (c[0] != '1') {
            b = Math.min(b, Integer.parseInt(s.replace(c[0], '1')));
        } else {
            for (int i = 1; i < n; i++) {
                if (c[i] != '0' && c[i] != '1') {
                    b = Math.min(b, Integer.parseInt(s.replace(c[i], '0')));
                    break;
                }
            }
        }
        return a - b;

=======

        String s = String.valueOf(num);
        char[] c = s.toCharArray();
        int[] a = new int[s.length()];
        int[] b = new int[s.length()];
        int[] c1 = new int[s.length()];
        int[] c2 = new int[s.length()];
        int i = 0;
        int j = 0;
        int x = 0;
        int y = 0;
        for (char cc : c) {
            int n = cc - '0';
            if (n == 9) {
                a[i++] = n;
                b[j++] = n;
            } else if (n == 1) {
                a[i++] = n;
                b[j++] = n;
            } else {
                a[i++] = 9;
                b[j++] = 1;
                x = n;
                y = n;
            }
        }
        i = 0;
        j = 0;
        for (char cc : c) {
            int n = cc - '0';
            if (n == x) {
                c1[i++] = y;
                c2[j++] = 9;
            } else if (n == y) {
                c1[i++] = x;
                c2[j++] = 1;
            } else {
                c1[i++] = n;
                c2[j++] = n;
            }
        }
        int aa = 0;
        for (int m : a) {
            aa = aa * 10 + m;
        }
        int bb = 0;
        for (int m : b) {
            bb = bb * 10 + m;
        }
        int cc1 = 0;
        for (int m : c1) {
            cc1 = cc1 * 10 + m;
        }
        int cc2 = 0;
        for (int m : c2) {
            cc2 = cc2 * 10 + m;
        }
        return Math.max(Math.abs(aa - bb), Math.abs(cc1 - cc2));

=======

        char[] digits = String.valueOf(num).toCharArray();
        int a = 0;
        int b = 0;
        int i = 0;
        while (digits[i] == '9') {
            i++;
        }
        while (i < digits.length) {
            a = a * 10 + (digits[i] - '0');
            i++;
        }
        int j = 0;
        while (digits[j] == '1' || digits[j] == '0') {
            j++;
        }
        if (j == digits.length) {
            j--;
        }
        while (j < digits.length) {
            b = b * 10 + (digits[j] - '0');
            j++;
        }
        return a - b;

=======

        int a = num, b = num;
        String str = String.valueOf(num);
        int[] digits = new int[str.length()];
        for (int i = 0; i < str.length(); i++) {
            digits[i] = str.charAt(i) - '0';
        }
        int min = 10;
        int max = 0;
        for (int i = 0; i < digits.length; i++) {
            if (digits[i] < min) {
                min = digits[i];
            }
            if (digits[i] > max) {
                max = digits[i];
            }
        }
        int[] minDigits = new int[digits.length];
        int[] maxDigits = new int[digits.length];
        for (int i = 0; i < digits.length; i++) {
            if (digits[i] == min) {
                minDigits[i] = 1;
            }
            if (digits[i] == max) {
                maxDigits[i] = 1;
            }
        }
        int minA = a, minB = b;
        for (int i = 0; i < minDigits.length; i++) {
            if (minDigits[i] == 1) {
                minA = minA - min * (int)Math.pow(10, minDigits.length - i - 1) + 1 * (int)Math.pow(10, minDigits.length - i - 1);
            }
        }
        for (int i = 0; i < minDigits.length; i++) {
            if (minDigits[i] == 1) {
                minB = minB - min * (int)Math.pow(10, minDigits.length - i - 1) + 9 * (int)Math.pow(10, minDigits.length - i - 1);
            }
        }
        int maxA = a, maxB = b;
        for (int i = 0; i < maxDigits.length; i++) {
            if (maxDigits[i] == 1) {
                maxA = maxA - max * (int)Math.pow(10, maxDigits.length - i - 1) + 9 * (int)Math.pow(10, maxDigits.length - i - 1);
            }
        }
        for (int i = 0; i < maxDigits.length; i++) {
            if (maxDigits[i

=======

        String s = Integer.toString(num);
        int a = 0;
        int b = 0;
        int c = 0;
        int d = 0;
        int x = 0;
        int y = 0;
        int z = 0;
        int w = 0;
        for (int i = 0; i < s.length(); i++) {
            if (i == 0) {
                if (s.charAt(i) == '1') {
                    x = 1;
                    y = 9;
                } else {
                    x = 9;
                    y = 1;
                }
                if (s.charAt(i) == '0') {
                    z = 1;
                    w = 0;
                } else {
                    z = 0;
                    w = 1;
                }
            }
            if (s.charAt(i) == '1') {
                a = a * 10 + x;
                b = b * 10 + y;
            } else {
                a = a * 10 + s.charAt(i) - '0';
                b = b * 10 + s.charAt(i) - '0';
            }
            if (s.charAt(i) == '0') {
                c = c * 10 + z;
                d = d * 10 + w;
            } else {
                c = c * 10 + s.charAt(i) - '0';
                d = d * 10 + s.charAt(i) - '0';
            }
        }
        return Math.max(a - c, b - d);

=======

        int min = num, max = num;
        char[] c = String.valueOf(num).toCharArray();
        for (int i = 0; i < c.length; i++) {
            char x = c[i];
            if (x != '9') {
                max = Math.max(max, Integer.parseInt(String.valueOf(c).replace(x, '9')));
            }
            if (x != '1' && i > 0 || x > '1' && i == 0) {
                min = Math.min(min, Integer.parseInt(String.valueOf(c).replace(x, '1')));
            }
        }
        return max - min;

=======

        int a = -1, b = -1;
        int[] digits = new int[8];
        int n = num;
        int i = 0;
        while (n > 0) {
            digits[i++] = n % 10;
            n /= 10;
        }
        for (int j = 0; j < i; j++) {
            int x = digits[j];
            if (a == -1 && x != 9) {
                a = num + (9 - x) * (int)Math.pow(10, j);
            }
            if (x != 1) {
                if (b == -1) {
                    b = num + (1 - x) * (int)Math.pow(10, j);
                }
            } else {
                if (b == -1) {
                    int k = j + 1;
                    while (k < i && digits[k] == 1) {
                        k++;
                    }
                    if (k < i) {
                        b = num + (1 - digits[k]) * (int)Math.pow(10, k);
                    }
                }
            }
        }
        return a - b;

=======

        int a = num, b = num;
        int[] digits = new int[10];
        int[] digits2 = new int[10];
        while (num > 0) {
            digits[num % 10]++;
            digits2[num % 10]++;
            num /= 10;
        }
        int x = 0, y = 0;
        for (int i = 0; i < 10; i++) {
            if (digits[i] > 0) {
                x = i;
                break;
            }
        }
        for (int i = 9; i >= 0; i--) {
            if (digits2[i] > 0) {
                y = i;
                break;
            }
        }
        int a1 = 0, b1 = 0;
        int i = 0;
        while (a > 0) {
            if (a % 10 == x) {
                a1 += y * Math.pow(10, i);
            } else {
                a1 += a % 10 * Math.pow(10, i);
            }
            a /= 10;
            i++;
        }
        i = 0;
        while (b > 0) {
            if (b % 10 == y) {
                b1 += x * Math.pow(10, i);
            } else {
                b1 += b % 10 * Math.pow(10, i);
            }
            b /= 10;
            i++;
        }
        return a1 - b1;

=======

        int a = 0, b = 0;
        int x = 0, y = 0;
        int i = 0;
        int[] digits = new int[8];
        while (num > 0) {
            digits[i++] = num % 10;
            num /= 10;
        }
        for (int j = 0; j < i; j++) {
            if (digits[j] < 9) {
                x = digits[j];
                break;
            }
        }
        for (int j = 0; j < i; j++) {
            if (digits[j] > 1) {
                y = digits[j];
                break;
            }
        }
        for (int j = i - 1; j >= 0; j--) {
            if (digits[j] == x) {
                digits[j] = 9;
            }
            a = a * 10 + digits[j];
        }
        for (int j = i - 1; j >= 0; j--) {
            if (digits[j] == y) {
                digits[j] = 1;
            }
            b = b * 10 + digits[j];
        }
        return a - b;
