Synthesizing 10/10 solutions

=======

        char[] chars = new char[n];
        for (int i = 0; i < n; i++) {
            chars[i] = 'a';
        }
        k -= n;
        for (int i = n - 1; i >= 0; i--) {
            if (k == 0) {
                break;
            }
            int x = Math.min(k, 25);
            chars[i] += x;
            k -= x;
        }
        return new String(chars);

=======

        char[] str = new char[n];
        for (int i = 0; i < n; i++) {
            str[i] = 'a';
        }
        k -= n;
        for (int i = n - 1; i >= 0; i--) {
            int x = Math.min(25, k);
            str[i] += x;
            k -= x;
        }
        return new String(str);

=======

        char[] chars = new char[n];
        for (int i = 0; i < n; i++) {
            chars[i] = 'a';
        }
        for (int i = n - 1; i >= 0; i--) {
            int num = Math.min(26, k - i);
            chars[i] = (char) (chars[i] + num - 1);
            k -= num;
        }
        return new String(chars);

=======

        char[] chars = new char[n];
        for (int i = 0; i < n; i++) {
            chars[i] = 'a';
            k--;
        }
        int i = n - 1;
        while (k > 0) {
            if (k >= 25) {
                chars[i--] = 'z';
                k -= 25;
            } else {
                chars[i--] = (char) ('a' + k);
                k = 0;
            }
        }
        return new String(chars);

=======

        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < n; i++) {
            sb.append('a');
        }
        k -= n;
        int index = n - 1;
        while (k > 0) {
            int diff = Math.min(25, k);
            char c = sb.charAt(index);
            sb.setCharAt(index, (char) (c + diff));
            k -= diff;
            index--;
        }
        return sb.toString();

=======

        char[] res = new char[n];
        Arrays.fill(res, 'a');
        k -= n;
        int i = n - 1;
        while (k > 0) {
            int delta = Math.min(k, 25);
            res[i--] += delta;
            k -= delta;
        }
        return new String(res);

=======

        char[] s = new char[n];
        Arrays.fill(s, 'a');
        k -= n;
        for (int i = s.length - 1; i >= 0; i--) {
            int d = Math.min(25, k);
            s[i] = (char) (s[i] + d);
            k -= d;
        }
        return new String(s);

=======

        char[] ch = new char[n];
        int sum = 0;
        for (int i = 0; i < ch.length; i++) {
            ch[i] = 'a';
            sum += 1;
        }
        int i = ch.length - 1;
        while (sum < k) {
            int diff = k - sum;
            if (diff > 25) {
                ch[i] = 'z';
                sum += 25;
            } else {
                ch[i] = (char) (ch[i] + diff);
                sum += diff;
            }
            i--;
        }
        return new String(ch);

=======

        char[] s = new char[n];
        Arrays.fill(s, 'a');
        int i = n - 1;
        while (k > n) {
            s[i] = (char) ('a' + Math.min(25, k - n));
            k -= s[i] - 'a' + 1;
            i--;
        }
        s[i] = (char) ('a' + k - 1);
        return new String(s);

=======

        char[] str = new char[n];
        int i = 0;
        int z = 0;
        while (k > 0) {
            if (k > 26) {
                str[i] = 'a';
                k -= 1;
            } else {
                str[i] = (char) (k + 96);
                k = 0;
            }
            i++;
        }
        z = n - i;
        while (z > 0) {
            str[i] = 'z';
            z--;
            i++;
        }
        return new String(str);
