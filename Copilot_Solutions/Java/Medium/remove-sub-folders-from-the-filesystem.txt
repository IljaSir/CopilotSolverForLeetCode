Synthesizing 10/10 solutions

=======

        List<String> result = new ArrayList<>();
        Arrays.sort(folder);
        String prev = "";
        for (String f : folder) {
            if (!f.startsWith(prev + "/")) {
                result.add(f);
                prev = f;
            }
        }
        return result;

=======

        List<String> result = new ArrayList<>();
        Arrays.sort(folder);
        String prev = null;
        for (String f : folder) {
            if (prev == null || !f.startsWith(prev + "/")) {
                result.add(f);
                prev = f;
            }
        }
        return result;

=======

        List<String> ans = new ArrayList<>();
        Arrays.sort(folder);
        for (String f : folder) {
            if (ans.size() == 0 || !f.startsWith(ans.get(ans.size() - 1) + "/")) {
                ans.add(f);
            }
        }
        return ans;

=======

        Arrays.sort(folder);
        List<String> result = new ArrayList<>();
        for (int i = 0; i < folder.length; i++) {
            if (i < folder.length - 1 && folder[i + 1].startsWith(folder[i] + "/")) {
                continue;
            }
            result.add(folder[i]);
        }
        return result;

=======

        Arrays.sort(folder);
        List<String> result = new ArrayList<>();
        String prev = "";
        for (String s : folder) {
            if (!s.startsWith(prev + "/")) {
                result.add(s);
                prev = s;
            }
        }
        return result;

=======

        Arrays.sort(folder);
        List<String> result = new ArrayList<>();
        result.add(folder[0]);
        String last = folder[0];
        for (int i = 1; i < folder.length; i++) {
            if (folder[i].indexOf(last + "/") != 0) {
                result.add(folder[i]);
                last = folder[i];
            }
        }
        return result;

=======

        Arrays.sort(folder);
        List<String> ans = new ArrayList<>();
        String last = "";
        for (String f : folder) {
            if (!f.startsWith(last + "/")) {
                ans.add(f);
                last = f;
            }
        }
        return ans;

=======

        List<String> result = new ArrayList<>();
        Arrays.sort(folder);
        String root = folder[0];
        result.add(root);
        for (int i = 1; i < folder.length; i++) {
            if (!folder[i].startsWith(root + "/")) {
                root = folder[i];
                result.add(root);
            }
        }
        return result;

=======

        List<String> ans = new LinkedList<String>();
        Arrays.sort(folder);
        for (String f : folder) {
            if (ans.isEmpty() || !f.startsWith(ans.get(ans.size() - 1) + "/")) {
                ans.add(f);
            }
        }
        return ans;

=======

        List<String> list = new ArrayList<>();
        Arrays.sort(folder);
        String currentPath = folder[0];
        list.add(currentPath);
        for (int i = 1; i < folder.length; i++) {
            if (!folder[i].startsWith(currentPath + "/")) {
                currentPath = folder[i];
                list.add(currentPath);
            }
        }
        return list;
