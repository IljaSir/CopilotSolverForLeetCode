Synthesizing 10/10 solutions

=======

        int[] res = new int[s.length()];
        int[] dx = new int[]{0, 1, 0, -1};
        int[] dy = new int[]{1, 0, -1, 0};
        int x = startPos[0];
        int y = startPos[1];
        int[][] memo = new int[n][n];
        for (int i = 0; i < n; i++) {
            Arrays.fill(memo[i], -1);
        }
        memo[x][y] = 0;
        for (int i = 0; i < s.length(); i++) {
            if (s.charAt(i) == 'L') {
                y--;
            } else if (s.charAt(i) == 'R') {
                y++;
            } else if (s.charAt(i) == 'U') {
                x--;
            } else {
                x++;
            }
            if (x >= 0 && x < n && y >= 0 && y < n) {
                memo[x][y] = i + 1;
            }
        }
        x = startPos[0];
        y = startPos[1];
        for (int i = 0; i < s.length(); i++) {
            if (s.charAt(i) == 'L') {
                y--;
            } else if (s.charAt(i) == 'R') {
                y++;
            } else if (s.charAt(i) == 'U') {
                x--;
            } else {
                x++;
            }
            res[i] = i + 1;
            if (x >= 0 && x < n && y >= 0 && y < n) {
                res[i] = Math.max(res[i], memo[x][y]);
            }
        }
        return res;

=======

        int[] res = new int[s.length()];
        int[] dx = {0, 0, 1, -1};
        int[] dy = {1, -1, 0, 0};
        int x = startPos[0], y = startPos[1];
        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            if (c == 'R') {
                res[i] = Math.min(n - 1 - y, res[i]);
                y += res[i];
            } else if (c == 'L') {
                res[i] = Math.min(y, res[i]);
                y -= res[i];
            } else if (c == 'U') {
                res[i] = Math.min(x, res[i]);
                x -= res[i];
            } else {
                res[i] = Math.min(n - 1 - x, res[i]);
                x += res[i];
            }
        }
        for (int i = s.length() - 2; i >= 0; i--) {
            res[i] += res[i + 1];
        }
        return res;

=======

        int[] res = new int[s.length()];
        int[] x = new int[] {0, 0, 1, -1};
        int[] y = new int[] {1, -1, 0, 0};
        int[] count = new int[4];
        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            int index = 0;
            if (c == 'R') {
                index = 0;
            } else if (c == 'L') {
                index = 1;
            } else if (c == 'D') {
                index = 2;
            } else if (c == 'U') {
                index = 3;
            }
            count[index]++;
        }
        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            if (c == 'R') {
                res[i] = count[0] - 1;
                res[i] += Math.min(startPos[1] + count[0], n - 1 - startPos[1]);
            } else if (c == 'L') {
                res[i] = count[1] - 1;
                res[i] += Math.min(startPos[1] + count[1], n - 1 - startPos[1]);
            } else if (c == 'D') {
                res[i] = count[2] - 1;
                res[i] += Math.min(startPos[0] + count[2], n - 1 - startPos[0]);
            } else if (c == 'U') {
                res[i] = count[3] - 1;
                res[i] += Math.min(startPos[0] + count[3], n - 1 - startPos[0]);
            }
        }
        return res;

=======

        int[] res = new int[s.length()];
        int[] dirX = {0, 1, 0, -1};
        int[] dirY = {1, 0, -1, 0};
        int x = startPos[0], y = startPos[1];
        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            int dir = c == 'R' ? 0 : c == 'D' ? 1 : c == 'L' ? 2 : 3;
            int nx = x + dirX[dir];
            int ny = y + dirY[dir];
            if (nx >= 0 && nx < n && ny >= 0 && ny < n) {
                x = nx;
                y = ny;
            }
            res[i] = x * n + y;
        }
        int[] min = new int[n * n];
        Arrays.fill(min, -1);
        for (int i = s.length() - 1; i >= 0; i--) {
            if (min[res[i]] == -1) {
                min[res[i]] = i;
            }
        }
        for (int i = 0; i < s.length(); i++) {
            res[i] = min[res[i]] - i;
        }
        return res;

=======

        int m = s.length();
        int[] ans = new int[m];
        for (int i = 0; i < m; i++) {
            int x = startPos[0], y = startPos[1];
            int j = i;
            while (j < m && x >= 0 && x < n && y >= 0 && y < n) {
                if (s.charAt(j) == 'L') {
                    y--;
                } else if (s.charAt(j) == 'R') {
                    y++;
                } else if (s.charAt(j) == 'U') {
                    x--;
                } else {
                    x++;
                }
                j++;
            }
            ans[i] = j - i;
        }
        return ans;

=======

        int[] result = new int[s.length()];
        int[] dir = new int[]{0, 1, 0, -1, 0};
        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            int index = 0;
            if (c == 'L') {
                index = 3;
            } else if (c == 'R') {
                index = 1;
            } else if (c == 'U') {
                index = 0;
            } else {
                index = 2;
            }
            int x = startPos[0] + dir[index];
            int y = startPos[1] + dir[index + 1];
            if (x >= 0 && x < n && y >= 0 && y < n) {
                result[i] = 1;
                startPos[0] = x;
                startPos[1] = y;
            }
        }
        for (int i = s.length() - 2; i >= 0; i--) {
            result[i] += result[i + 1];
        }
        return result;

=======

        int[] res = new int[s.length()];
        int[][] grid = new int[n][n];
        int row = startPos[0];
        int col = startPos[1];
        int count = 0;
        for (int i = 0; i < s.length(); i++) {
            if (s.charAt(i) == 'R' && col < n - 1) {
                col++;
            }
            if (s.charAt(i) == 'L' && col > 0) {
                col--;
            }
            if (s.charAt(i) == 'U' && row > 0) {
                row--;
            }
            if (s.charAt(i) == 'D' && row < n - 1) {
                row++;
            }
            grid[row][col] = 1;
        }
        for (int i = s.length() - 1; i >= 0; i--) {
            if (grid[row][col] == 1) {
                count++;
            }
            res[i] = count;
            if (s.charAt(i) == 'R' && col > 0) {
                col--;
            }
            if (s.charAt(i) == 'L' && col < n - 1) {
                col++;
            }
            if (s.charAt(i) == 'U' && row < n - 1) {
                row++;
            }
            if (s.charAt(i) == 'D' && row > 0) {
                row--;
            }
        }
        return res;

=======

        int[] ans = new int[s.length()];
        int[] nextPos = new int[2];
        for (int i = 0; i < s.length(); i++) {
            nextPos[0] = startPos[0];
            nextPos[1] = startPos[1];
            switch (s.charAt(i)) {
                case 'L':
                    nextPos[1]--;
                    break;
                case 'R':
                    nextPos[1]++;
                    break;
                case 'U':
                    nextPos[0]--;
                    break;
                case 'D':
                    nextPos[0]++;
                    break;
            }
            if (nextPos[0] < 0 || nextPos[0] >= n || nextPos[1] < 0 || nextPos[1] >= n) {
                ans[i] = 0;
            } else {
                ans[i] = s.length() - i;
            }
        }
        return ans;

=======

        int[] res = new int[s.length()];
        int[] d = new int[] {0, 1, 0, -1, 0};
        int x = startPos[0], y = startPos[1];
        int dir = 0;
        int[][] grid = new int[n][n];
        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            if (c == 'L') {
                dir = (dir + 3) % 4;
            } else if (c == 'R') {
                dir = (dir + 1) % 4;
            } else {
                int nx = x + d[dir], ny = y + d[dir + 1];
                if (nx >= 0 && nx < n && ny >= 0 && ny < n) {
                    x = nx;
                    y = ny;
                }
            }
            grid[x][y] = i + 1;
        }
        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            if (c == 'L') {
                dir = (dir + 1) % 4;
            } else if (c == 'R') {
                dir = (dir + 3) % 4;
            } else {
                int nx = x + d[dir + 2], ny = y + d[dir + 3];
                if (nx >= 0 && nx < n && ny >= 0 && ny < n) {
                    x = nx;
                    y = ny;
                }
            }
            res[i] = grid[x][y] - i - 1;
        }
        return res;

=======

        int[] res = new int[s.length()];
        int x = startPos[0];
        int y = startPos[1];
        int[] dir = {0, 1, 0, -1, 0};
        int[][] dp = new int[n][n];
        for (int i = 0; i < n; i++) {
            Arrays.fill(dp[i], -1);
        }
        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            if (c == 'L') {
                if (y - 1 >= 0) {
                    y--;
                }
            } else if (c == 'R') {
                if (y + 1 < n) {
                    y++;
                }
            } else if (c == 'U') {
                if (x - 1 >= 0) {
                    x--;
                }
            } else {
                if (x + 1 < n) {
                    x++;
                }
            }
            dp[x][y] = i;
        }
        for (int i = 0; i < s.length(); i++) {
            int j = i;
            int count = 0;
            int x1 = startPos[0];
            int y1 = startPos[1];
            while (true) {
                char c = s.charAt(j);
                if (c == 'L') {
                    if (y1 - 1 >= 0) {
                        y1--;
                    }
                } else if (c == 'R') {
                    if (y1 + 1 < n) {
                        y1++;
                    }
                } else if (c == 'U') {
                    if (x1 - 1 >= 0) {
                        x1--;
                    }
                } else {
                    if (x1 + 1 < n) {
                        x1++;
                    }
                }
                if (dp[x1][y1] == -1) {
                    break;
                }
                j = (j + 1) % s.length();
                count++;
                if (j == i) {
                    break;
                }
            }
            res[i] = count;
        }
        return res;
