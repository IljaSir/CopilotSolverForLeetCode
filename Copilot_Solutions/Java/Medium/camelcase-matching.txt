Synthesizing 10/10 solutions

=======

        List<Boolean> result = new ArrayList<>();
        for (String query : queries) {
            result.add(isMatch(query, pattern));
        }
        return result;
    }

    private boolean isMatch(String query, String pattern) {
        int i = 0;
        int j = 0;
        while (i < query.length() && j < pattern.length()) {
            if (query.charAt(i) == pattern.charAt(j)) {
                i++;
                j++;
            } else if (Character.isUpperCase(query.charAt(i))) {
                return false;
            } else {
                i++;
            }
        }

        while (i < query.length()) {
            if (Character.isUpperCase(query.charAt(i))) {
                return false;
            }
            i++;
        }

        return j == pattern.length();

=======

        List<Boolean> result = new ArrayList<>();
        for (String query : queries) {
            result.add(isMatch(query, pattern));
        }
        return result;
    }
    
    private boolean isMatch(String query, String pattern) {
        int i = 0;
        for (char c : query.toCharArray()) {
            if (i < pattern.length() && c == pattern.charAt(i)) {
                i++;
            } else if (c >= 'A' && c <= 'Z') {
                return false;
            }
        }
        return i == pattern.length();

=======

        List<Boolean> res = new ArrayList<>();
        for (String query : queries) {
            res.add(isMatch(query, pattern));
        }
        return res;
    }
    
    private boolean isMatch(String query, String pattern) {
        int i = 0;
        int j = 0;
        while (i < query.length() && j < pattern.length()) {
            if (query.charAt(i) == pattern.charAt(j)) {
                i++;
                j++;
            } else if (Character.isUpperCase(query.charAt(i))) {
                return false;
            } else {
                i++;
            }
        }
        while (i < query.length()) {
            if (Character.isUpperCase(query.charAt(i))) {
                return false;
            }
            i++;
        }
        return j == pattern.length();

=======

        List<Boolean> result = new ArrayList<>();
        for (String query : queries) {
            result.add(match(query, pattern));
        }
        return result;
    }
    
    private boolean match(String query, String pattern) {
        int i = 0;
        for (char c : query.toCharArray()) {
            if (i < pattern.length() && c == pattern.charAt(i)) {
                i++;
            } else if (c < 'a') {
                return false;
            }
        }
        return i == pattern.length();

=======

        List<Boolean> ans = new ArrayList<>();
        for (String query : queries) {
            ans.add(isMatch(query, pattern));
        }
        return ans;
    }

    private boolean isMatch(String query, String pattern) {
        int i = 0, j = 0;
        while (i < query.length()) {
            if (j < pattern.length() && query.charAt(i) == pattern.charAt(j)) {
                j++;
            } else if (query.charAt(i) >= 'A' && query.charAt(i) <= 'Z') {
                return false;
            }
            i++;
        }
        return j == pattern.length();

=======

        List<Boolean> result = new ArrayList<Boolean>();
        for (String query : queries) {
            result.add(isMatch(query, pattern));
        }
        return result;
    }

    private boolean isMatch(String query, String pattern) {
        int i = 0, j = 0;
        while (i < query.length() && j < pattern.length()) {
            if (query.charAt(i) == pattern.charAt(j)) {
                i++;
                j++;
            } else if (Character.isUpperCase(query.charAt(i))) {
                return false;
            } else {
                i++;
            }
        }
        while (i < query.length()) {
            if (Character.isUpperCase(query.charAt(i))) {
                return false;
            }
            i++;
        }
        return j == pattern.length();

=======

        List<Boolean> res = new ArrayList<>();
        for (String s : queries) {
            int i = 0;
            for (char c : s.toCharArray()) {
                if (i < pattern.length() && c == pattern.charAt(i)) {
                    i++;
                } else if (Character.isUpperCase(c)) {
                    i = -1;
                    break;
                }
            }
            res.add(i == pattern.length());
        }
        return res;

=======

        List<Boolean> res = new ArrayList<>();
        for (String q : queries) {
            res.add(isMatch(q, pattern));
        }
        return res;
    }
    private boolean isMatch(String q, String p) {
        int i = 0, j = 0;
        while (i < q.length()) {
            if (j < p.length() && q.charAt(i) == p.charAt(j)) {
                j++;
            } else if (q.charAt(i) < 'a') {
                return false;
            }
            i++;
        }
        return j == p.length();

=======

        List<Boolean> result = new ArrayList<Boolean>();
        for (String query : queries) {
            result.add(match(query, pattern));
        }
        return result;
    }

    private boolean match(String query, String pattern) {
        int i = 0, j = 0;
        while (i < query.length() && j < pattern.length()) {
            if (Character.isUpperCase(query.charAt(i))) {
                if (query.charAt(i) != pattern.charAt(j)) {
                    return false;
                }
                j++;
            }
            i++;
        }
        while (i < query.length()) {
            if (Character.isUpperCase(query.charAt(i))) {
                return false;
            }
            i++;
        }
        return j == pattern.length();

=======

        List<Boolean> res = new ArrayList<>();
        for (String query : queries) {
            int index = 0;
            boolean match = true;
            for (int i = 0; i < query.length(); i++) {
                if (index < pattern.length() && query.charAt(i) == pattern.charAt(index)) {
                    index++;
                } else if (Character.isUpperCase(query.charAt(i))) {
                    match = false;
                    break;
                }
            }
            if (index != pattern.length()) {
                match = false;
            }
            res.add(match);
        }
        return res;
