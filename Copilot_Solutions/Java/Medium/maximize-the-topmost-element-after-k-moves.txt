Synthesizing 10/10 solutions

=======

        int n = nums.length;
        int[] max = new int[n];
        max[n-1] = nums[n-1];
        for (int i = n - 2; i >= 0; i--) {
            max[i] = Math.max(max[i+1], nums[i]);
        }
        int ans = -1;
        for (int i = 0; i < n; i++) {
            int moves = k - (n - i - 1);
            if (moves < 0) continue;
            if (moves <= i) {
                ans = Math.max(ans, max[i - moves]);
            }
        }
        return ans;

=======

        PriorityQueue<Integer> pq = new PriorityQueue<>(Collections.reverseOrder());
        for (int num : nums) {
            pq.add(num);
        }
        while (k-- > 0) {
            if (pq.size() == 0) {
                return -1;
            }
            int cur = pq.poll();
            if (cur == 0) {
                return pq.peek();
            } else {
                pq.add(cur - 1);
            }
        }
        return pq.peek();

=======

        PriorityQueue<Integer> pq = new PriorityQueue<>((a, b) -> b - a);
        for (int num : nums) {
            pq.add(num);
        }
        int max = -1;
        for (int i = 0; i <= k; i++) {
            max = Math.max(max, pq.peek());
            if (pq.isEmpty()) {
                break;
            }
            pq.add(pq.poll() - 1);
        }
        return max;

=======

        int n = nums.length;
        int[] arr = new int[n];
        for (int i = 0; i < n; i++) {
            arr[i] = nums[i];
        }
        PriorityQueue<Integer> pq = new PriorityQueue<Integer>(n);
        for (int i = 0; i < n; i++) {
            pq.add(arr[i]);
        }
        int ans = pq.peek();
        for (int i = 0; i < k; i++) {
            ans = pq.poll();
            ans--;
            pq.add(ans);
        }
        return ans;

=======

        PriorityQueue<Integer> pq = new PriorityQueue<>(Collections.reverseOrder());
        for(int i = 0; i < nums.length; i++){
            pq.add(nums[i]);
        }
        int ans = 0;
        while(k > 0 && !pq.isEmpty()){
            int top = pq.poll();
            if(top > 0){
                pq.add(top - 1);
                k--;
            }
        }
        if(pq.isEmpty()){
            return -1;
        }
        return pq.peek();

=======

        int n = nums.length;
        int[] cnt = new int[n + 1];
        for (int x : nums) {
            cnt[x]++;
        }
        for (int i = n; i >= 1; i--) {
            if (cnt[i] > k) {
                return i;
            }
            k -= cnt[i];
        }
        return -1;

=======

        PriorityQueue<Integer> pq = new PriorityQueue<Integer>(Collections.reverseOrder());
        for(int i : nums) pq.add(i);
        for(int i = 0; i < k; i++){
            int top = pq.poll();
            if(top == 0) return -1;
            pq.add(top - 1);
        }
        return pq.peek();

=======

        PriorityQueue<Integer> pq = new PriorityQueue<Integer>(Collections.reverseOrder());
        for(int i=0; i<nums.length; i++) {
            pq.add(nums[i]);
        }
        int top = 0;
        while(k>0) {
            top = pq.poll();
            pq.add(top-1);
            k--;
        }
        return top;

=======

        int n = nums.length;
        if (n == 1) {
            return k > 0 ? -1 : nums[0];
        }
        int ans = nums[0];
        PriorityQueue<Integer> pq = new PriorityQueue<Integer>();
        for (int i = 1; i < n; i++) {
            pq.offer(nums[i]);
        }
        for (int i = 0; i < k; i++) {
            int top = pq.poll();
            ans = Math.max(ans, top);
            top--;
            if (top > 0) {
                pq.offer(top);
            }
        }
        return ans;

=======

        PriorityQueue<Integer> pq = new PriorityQueue<Integer>((a,b)->b-a);
        for(int x: nums) pq.add(x);
        while(k>0){
            int x = pq.poll();
            pq.add(x/2);
            k--;
        }
        return pq.peek();
