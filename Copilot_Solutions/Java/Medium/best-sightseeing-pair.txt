Synthesizing 10/10 solutions

=======

        int max = values[0];
        int res = 0;
        for (int j = 1; j < values.length; j++) {
            res = Math.max(res, max + values[j] - j);
            max = Math.max(max, values[j] + j);
        }
        return res;

=======

        int n = values.length;
        int max = values[0] + 0;
        int ans = 0;
        for (int j = 1; j < n; j++) {
            ans = Math.max(ans, max + values[j] - j);
            max = Math.max(max, values[j] + j);
        }
        return ans;

=======

        int max = 0;
        int cur = 0;
        for (int i = 0; i < values.length; i++) {
            max = Math.max(max, cur + values[i] - i);
            cur = Math.max(cur, values[i] + i);
        }
        return max;

=======

        int max = values[0] + 0;
        int maxScore = 0;
        for (int i = 1; i < values.length; i++) {
            maxScore = Math.max(maxScore, max + values[i] - i);
            max = Math.max(max, values[i] + i);
        }
        return maxScore;

=======

        int max = 0;
        int best = values[0];
        for (int i = 1; i < values.length; i++) {
            max = Math.max(max, values[i] - i + best);
            best = Math.max(best, values[i] + i);
        }
        return max;

=======

        int max = values[0];
        int res = 0;
        for(int i = 1; i < values.length; i++){
            res = Math.max(res, values[i] - i + max);
            max = Math.max(max, values[i] + i);
        }
        return res;

=======

        int maxScore = 0;
        int maxVal = values[0];
        for(int i = 1; i < values.length; i++) {
            maxScore = Math.max(maxScore, maxVal + values[i] - i);
            maxVal = Math.max(maxVal, values[i] + i);
        }
        return maxScore;

=======

        int max = 0;
        int cur = 0;
        for (int i = 0; i < values.length; i++) {
            cur = Math.max(cur, values[i] - i);
            max = Math.max(max, cur + values[i] + i);
        }
        return max;

=======

        int max = 0;
        int maxSoFar = values[0];
        for (int i = 1; i < values.length; i++) {
            max = Math.max(maxSoFar + values[i] - i, max);
            maxSoFar = Math.max(maxSoFar, values[i] + i);
        }
        return max;

=======

        int n = values.length;
        int max = 0;
        int max_i = values[0];
        for (int j = 1; j < n; j++) {
            max = Math.max(max, max_i + values[j] - j);
            max_i = Math.max(max_i, values[j] + j);
        }
        return max;
