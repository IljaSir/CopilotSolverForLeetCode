Synthesizing 10/10 solutions

=======

        int[][] points = new int[4][2];
        points[0] = p1;
        points[1] = p2;
        points[2] = p3;
        points[3] = p4;
        Arrays.sort(points, (a, b) -> {
            if (a[0] == b[0]) {
                return a[1] - b[1];
            }
            return a[0] - b[0];
        });
        int[] p0 = points[0];
        int[] p1 = points[1];
        int[] p2 = points[2];
        int[] p3 = points[3];
        if (p0[0] == p1[0] && p0[1] == p1[1]) {
            return false;
        }
        if (p0[0] == p2[0] && p0[1] == p2[1]) {
            return false;
        }
        if (p0[0] == p3[0] && p0[1] == p3[1]) {
            return false;
        }
        if (p1[0] == p2[0] && p1[1] == p2[1]) {
            return false;
        }
        if (p1[0] == p3[0] && p1[1] == p3[1]) {
            return false;
        }
        if (p2[0] == p3[0] && p2[1] == p3[1]) {
            return false;
        }
        int[] v1 = new int[] {p1[0] - p0[0], p1[1] - p0[1]};
        int[] v2 = new int[] {p2[0] - p0[0], p2[1] - p0[1]};
        int[] v3 = new int[] {p3[0] - p0[0], p3[1] - p0[1]};
        if (v1[0] * v1[0] + v1[1] * v1[1] != v2[0] * v2[0] + v2[1] * v2[1]) {
            return false;
        }
        if (v1[0] *

=======

        int d12 = dist(p1, p2);
        int d13 = dist(p1, p3);
        int d14 = dist(p1, p4);
        int d23 = dist(p2, p3);
        int d24 = dist(p2, p4);
        int d34 = dist(p3, p4);
        if (d12 == 0 || d13 == 0 || d14 == 0 || d23 == 0 || d24 == 0 || d34 == 0) return false;
        int[] d = new int[]{d12, d13, d14, d23, d24, d34};
        Arrays.sort(d);
        return d[0] == d[1] && d[1] == d[2] && d[2] == d[3] && d[4] == d[5] && d[4] == 2 * d[0];

=======

        int[] d = new int[6];
        d[0] = dist(p1, p2);
        d[1] = dist(p1, p3);
        d[2] = dist(p1, p4);
        d[3] = dist(p2, p3);
        d[4] = dist(p2, p4);
        d[5] = dist(p3, p4);
        Arrays.sort(d);
        return d[0] > 0 && d[0] == d[1] && d[0] == d[2] && d[0] == d[3] && d[4] == d[5];

=======

        int[] dist = new int[6];
        dist[0] = dist(p1, p2);
        dist[1] = dist(p1, p3);
        dist[2] = dist(p1, p4);
        dist[3] = dist(p2, p3);
        dist[4] = dist(p2, p4);
        dist[5] = dist(p3, p4);
        Arrays.sort(dist);
        return dist[0] > 0 && dist[0] == dist[1] && dist[1] == dist[2] && dist[2] == dist[3] && dist[4] == dist[5];

=======

        int[] dist = new int[6];
        dist[0] = getDistance(p1, p2);
        dist[1] = getDistance(p1, p3);
        dist[2] = getDistance(p1, p4);
        dist[3] = getDistance(p2, p3);
        dist[4] = getDistance(p2, p4);
        dist[5] = getDistance(p3, p4);
        Arrays.sort(dist);
        return dist[0] > 0 && dist[0] == dist[1] && dist[1] == dist[2] && dist[2] == dist[3] && dist[4] == dist[5] && dist[0] * 2 == dist[4];

=======

        int[] d = new int[6];
        d[0] = getDistance(p1, p2);
        d[1] = getDistance(p1, p3);
        d[2] = getDistance(p1, p4);
        d[3] = getDistance(p2, p3);
        d[4] = getDistance(p2, p4);
        d[5] = getDistance(p3, p4);
        Arrays.sort(d);
        return d[0] > 0 && d[0] == d[1] && d[1] == d[2] && d[2] == d[3] && d[4] == d[5];

=======

        int[] a = new int[]{p1[0], p1[1]};
        int[] b = new int[]{p2[0], p2[1]};
        int[] c = new int[]{p3[0], p3[1]};
        int[] d = new int[]{p4[0], p4[1]};
        int[][] points = new int[][]{a, b, c, d};
        Arrays.sort(points, new Comparator<int[]>() {
            @Override
            public int compare(int[] o1, int[] o2) {
                if (o1[0] != o2[0]) return o1[0] - o2[0];
                return o1[1] - o2[1];
            }
        });
        int[] x = new int[]{points[0][0], points[1][0], points[2][0], points[3][0]};
        int[] y = new int[]{points[0][1], points[1][1], points[2][1], points[3][1]};
        if (x[0] == x[1] && x[2] == x[3] && y[0] == y[3] && y[1] == y[2] && x[0] != x[2] && y[0] != y[1]) {
            int d1 = (x[0] - x[2]) * (x[0] - x[2]) + (y[0] - y[2]) * (y[0] - y[2]);
            int d2 = (x[1] - x[3]) * (x[1] - x[3]) + (y[1] - y[3]) * (y[1] - y[3]);
            return d1 == d2;
        }
        return false;
    }
}

=======

        int[][] points = new int[][] {p1, p2, p3, p4};
        Arrays.sort(points, (a, b) -> {
            if (a[0] == b[0]) {
                return a[1] - b[1];
            } else {
                return a[0] - b[0];
            }
        });
        boolean isSquare = true;
        if (points[0][0] == points[1][0] && points[1][0] == points[2][0] && points[2][0] == points[3][0]) {
            isSquare = false;
        } else if (points[0][1] == points[1][1] && points[1][1] == points[2][1] && points[2][1] == points[3][1]) {
            isSquare = false;
        } else if (points[0][0] == points[1][0] && points[2][0] == points[3][0] && points[1][1] == points[2][1] && points[0][1] == points[3][1]) {
            isSquare = true;
        } else if (points[0][0] == points[2][0] && points[1][0] == points[3][0] && points[0][1] == points[2][1] && points[1][1] == points[3][1]) {
            isSquare = true;
        } else {
            isSquare = false;
        }
        return isSquare;

=======

        int[][] ps = new int[][]{p1, p2, p3, p4};
        Arrays.sort(ps, (a, b) -> {
            if (a[0] != b[0]) {
                return a[0] - b[0];
            }
            return a[1] - b[1];
        });
        int[] p1_ = ps[0];
        int[] p2_ = ps[1];
        int[] p3_ = ps[2];
        int[] p4_ = ps[3];
        int[] d1 = new int[]{p1_[0] - p2_[0], p1_[1] - p2_[1]};
        int[] d2 = new int[]{p1_[0] - p3_[0], p1_[1] - p3_[1]};
        int[] d3 = new int[]{p1_[0] - p4_[0], p1_[1] - p4_[1]};
        if (d1[0] * d2[0] + d1[1] * d2[1] != 0) {
            return false;
        }
        if (d1[0] * d3[0] + d1[1] * d3[1] != 0) {
            return false;
        }
        int d1_ = d1[0] * d1[0] + d1[1] * d1[1];
        int d2_ = d2[0] * d2[0] + d2[1] * d2[1];
        int d3_ = d3[0] * d3[0] + d3[1] * d3[1];
        if (d1_ == 0 || d2_ == 0 || d3_ == 0) {
            return false;
        }
        return d1_ == d2_ && d2_ == d3_;

=======

        int[][] points = new int[][]{p1, p2, p3, p4};
        int[] lengths = new int[6];
        int index = 0;
        for (int i = 0; i < points.length; i++) {
            for (int j = i + 1; j < points.length; j++) {
                lengths[index++] = (int) (Math.pow(points[i][0] - points[j][0], 2) + Math.pow(points[i][1] - points[j][1], 2));
            }
        }
        Arrays.sort(lengths);
        return lengths[0] == lengths[1] && lengths[1] == lengths[2] && lengths[2] == lengths[3] && lengths[4] == lengths[5] && lengths[0] != lengths[4];
