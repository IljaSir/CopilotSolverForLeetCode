Synthesizing 10/10 solutions

=======

        int n = s.length();
        int i = 0, j = n - 1;
        StringBuilder sb = new StringBuilder();
        while (i <= j) {
            boolean left = false;
            for (int k = 0; i + k <= j; k++) {
                if (s.charAt(i + k) < s.charAt(j - k)) {
                    left = true;
                    break;
                } else if (s.charAt(i + k) > s.charAt(j - k)) {
                    left = false;
                    break;
                }
            }
            if (left) sb.append(s.charAt(i++));
            else sb.append(s.charAt(j--));
        }
        return sb.toString();

=======

        int n = s.length();
        StringBuilder sb = new StringBuilder();
        int l = 0, r = n - 1;
        while (l <= r) {
            boolean left = false;
            for (int i = 0; l + i <= r; i++) {
                if (s.charAt(l + i) < s.charAt(r - i)) {
                    left = true;
                    break;
                } else if (s.charAt(l + i) > s.charAt(r - i)) {
                    left = false;
                    break;
                }
            }
            if (left) sb.append(s.charAt(l++));
            else sb.append(s.charAt(r--));
        }
        return sb.toString();

=======

        int n = s.length();
        char[] t = new char[n];
        int l = 0, r = n - 1;
        for (int i = n - 1; i >= 0; i--) {
            if (s.charAt(l) < s.charAt(r)) {
                t[i] = s.charAt(l++);
            } else if (s.charAt(l) > s.charAt(r)) {
                t[i] = s.charAt(r--);
            } else {
                int j = 1;
                while (l + j <= r && s.charAt(l + j) == s.charAt(r - j)) {
                    j++;
                }
                if (l + j > r || s.charAt(l + j) < s.charAt(r - j)) {
                    t[i] = s.charAt(l++);
                } else {
                    t[i] = s.charAt(r--);
                }
            }
        }
        return new String(t);

=======

        int n = s.length();
        char[] t = new char[n];
        int l = 0, r = n - 1;
        for (int i = 0; i < n; i++) {
            if (s.charAt(i) < s.charAt(n - i - 1)) {
                t[l++] = s.charAt(i);
            } else {
                t[r--] = s.charAt(i);
            }
        }
        return new String(t);

=======

        int n = s.length();
        char[] ans = new char[n];
        int i = 0;
        int j = n - 1;
        int k = n - 1;
        while (i <= j) {
            boolean left = false;
            for (int p = 0; i + p <= j; p++) {
                if (s.charAt(i + p) < s.charAt(j - p)) {
                    left = true;
                    break;
                } else if (s.charAt(i + p) > s.charAt(j - p)) {
                    left = false;
                    break;
                }
            }
            if (left) {
                ans[k--] = s.charAt(i++);
            } else {
                ans[k--] = s.charAt(j--);
            }
        }
        return new String(ans);

=======

        int n = s.length();
        int[] next = new int[n];
        int i = 0, j = -1;
        next[0] = -1;
        while (i < n - 1) {
            if (j == -1 || s.charAt(i) == s.charAt(j)) {
                i++;
                j++;
                next[i] = j;
            } else {
                j = next[j];
            }
        }
        i = 0;
        j = 0;
        StringBuilder sb = new StringBuilder();
        while (i < n && j < n) {
            if (s.charAt(i) < s.charAt(j)) {
                sb.append(s.charAt(i++));
            } else if (s.charAt(i) > s.charAt(j)) {
                sb.append(s.charAt(j++));
            } else {
                int k = 0;
                while (i + k < n && j + k < n && s.charAt(i + k) == s.charAt(j + k)) {
                    k++;
                }
                if (i + k == n) {
                    sb.append(s.charAt(j++));
                } else if (j + k == n) {
                    sb.append(s.charAt(i++));
                } else if (s.charAt(i + k) < s.charAt(j + k)) {
                    sb.append(s.charAt(i++));
                } else {
                    sb.append(s.charAt(j++));
                }
            }
        }
        while (i < n) {
            sb.append(s.charAt(i++));
        }
        while (j < n) {
            sb.append(s.charAt(j++));
        }
        return sb.toString();

=======

        int n = s.length();
        int[] next = new int[n];
        int i = 0, j = -1;
        next[0] = -1;
        while (i < n - 1) {
            if (j == -1 || s.charAt(i) == s.charAt(j)) {
                i++;
                j++;
                next[i] = j;
            } else {
                j = next[j];
            }
        }
        StringBuilder sb = new StringBuilder();
        int t = 0;
        while (t < n) {
            if (sb.length() == 0 || s.charAt(t) <= sb.charAt(sb.length() - 1)) {
                sb.append(s.charAt(t++));
            } else {
                sb.deleteCharAt(sb.length() - 1);
            }
        }
        return sb.toString();

=======

        char[] chars = s.toCharArray();
        int n = s.length();
        int i = 0, j = n - 1;
        StringBuilder sb = new StringBuilder();
        while (i <= j) {
            boolean left = false;
            for (int k = 0; i + k <= j; k++) {
                if (chars[i + k] < chars[j - k]) {
                    left = true;
                    break;
                } else if (chars[i + k] > chars[j - k]) {
                    left = false;
                    break;
                }
            }
            if (left) {
                sb.append(chars[i++]);
            } else {
                sb.append(chars[j--]);
            }
        }
        return sb.toString();

=======

        int n = s.length();
        int l = 0, r = n - 1;
        boolean left = true;
        char[] res = new char[n];
        for (int i = 0; i < n; i++) {
            if (left) {
                if (s.charAt(l) < s.charAt(r)) {
                    res[i] = s.charAt(l++);
                } else {
                    res[i] = s.charAt(r--);
                }
            } else {
                if (s.charAt(l) > s.charAt(r)) {
                    res[i] = s.charAt(l++);
                } else {
                    res[i] = s.charAt(r--);
                }
            }
            left = !left;
        }
        return new String(res);

=======

        int n = s.length();
        char[] arr = s.toCharArray();
        char[] ans = new char[n];
        int left = 0, right = n-1;
        int index = 0;
        while(left <= right) {
            boolean leftIsSmaller = false;
            for(int i=0; left+i <= right; i++) {
                if(arr[left+i] < arr[right-i]) {
                    leftIsSmaller = true;
                    break;
                } else if(arr[left+i] > arr[right-i]) {
                    break;
                }
            }
            if(leftIsSmaller) {
                ans[index++] = arr[left++];
            } else {
                ans[index++] = arr[right--];
            }
        }
        return new String(ans);
