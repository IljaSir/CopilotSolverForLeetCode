Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int[] max = new int[arr.length];
        max[0] = arr[0];
        for (int i = 1; i < arr.length; i++) {
            max[i] = Math.max(max[i - 1], arr[i]);
        }
        int res = 0;
        for (int i = 0; i < arr.length; i++) {
            if (max[i] == i) {
                res++;
            }
        }
        return res;

=======

        int n = arr.length;
        int[] max = new int[n];
        max[0] = arr[0];
        for (int i = 1; i < n; i++) {
            max[i] = Math.max(max[i - 1], arr[i]);
        }
        int[] min = new int[n];
        min[n - 1] = arr[n - 1];
        for (int i = n - 2; i >= 0; i--) {
            min[i] = Math.min(min[i + 1], arr[i]);
        }
        int ans = 0;
        for (int i = 0; i < n - 1; i++) {
            if (max[i] <= min[i + 1]) {
                ans++;
            }
        }
        return ans + 1;

=======

        int ans = 0;
        int max = 0;
        for (int i = 0; i < arr.length; i++) {
            max = Math.max(max, arr[i]);
            if (max == i) {
                ans++;
            }
        }
        return ans;

=======

        int max = 0;
        int res = 0;
        for (int i = 0; i < arr.length; i++) {
            max = Math.max(max, arr[i]);
            if (max == i) {
                res++;
            }
        }
        return res;

=======

        int[] min = new int[arr.length];
        min[arr.length - 1] = arr[arr.length - 1];
        for (int i = arr.length - 2; i >= 0; i--) {
            min[i] = Math.min(arr[i], min[i + 1]);
        }
        int max = 0;
        int count = 0;
        for (int i = 0; i < arr.length; i++) {
            max = Math.max(max, arr[i]);
            if (max <= min[i]) {
                count++;
            }
        }
        return count;

=======

        int max = 0;
        int chunks = 0;
        for (int i = 0; i < arr.length; i++) {
            max = Math.max(max, arr[i]);
            if (max == i) {
                chunks++;
            }
        }
        return chunks;

=======

        int n = arr.length;
        int[] max = new int[n];
        int[] min = new int[n];
        max[0] = arr[0];
        min[n - 1] = arr[n - 1];
        for (int i = 1; i < n; i++) {
            max[i] = Math.max(max[i - 1], arr[i]);
            min[n - 1 - i] = Math.min(min[n - i], arr[n - 1 - i]);
        }
        int ans = 1;
        for (int i = 0; i < n - 1; i++) {
            if (max[i] <= min[i + 1]) {
                ans++;
            }
        }
        return ans;

=======

        int n = arr.length;
        int[] max = new int[n];
        int[] min = new int[n];
        max[0] = arr[0];
        min[n-1] = arr[n-1];
        for (int i = 1; i < n; i++) {
            max[i] = Math.max(arr[i], max[i-1]);
            min[n-i-1] = Math.min(arr[n-i-1], min[n-i]);
        }
        int ans = 1;
        for (int i = 0; i < n-1; i++) {
            if (max[i] <= min[i+1]) {
                ans++;
            }
        }
        return ans;

=======

        int n = arr.length;
        int[] max = new int[n];
        int[] min = new int[n];
        max[0] = arr[0];
        for(int i = 1; i < n; i++) {
            max[i] = Math.max(max[i-1], arr[i]);
        }
        min[n-1] = arr[n-1];
        for(int i = n-2; i >= 0; i--) {
            min[i] = Math.min(min[i+1], arr[i]);
        }
        int ans = 1;
        for(int i = 0; i < n-1; i++) {
            if(max[i] <= min[i+1]) {
                ans++;
            }
        }
        return ans;
