Synthesizing 10/10 solutions

=======

        Stack<Character> stack = new Stack<>();
        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            if (c == '*') {
                if (!stack.isEmpty() && stack.peek() != '*') {
                    stack.pop();
                }
            } else {
                stack.push(c);
            }
        }
        StringBuilder sb = new StringBuilder();
        while (!stack.isEmpty()) {
            sb.append(stack.pop());
        }
        return sb.reverse().toString();

=======

        int n = s.length();
        Stack<Character> stack = new Stack<>();
        for (int i = 0; i < n; i++) {
            char c = s.charAt(i);
            if (c == '*') {
                if (!stack.isEmpty() && stack.peek() != '*') {
                    stack.pop();
                }
            } else {
                stack.push(c);
            }
        }
        StringBuilder sb = new StringBuilder();
        while (!stack.isEmpty()) {
            sb.append(stack.pop());
        }
        return sb.reverse().toString();

=======

        char[] chars = s.toCharArray();
        List<Integer> starIndexes = new ArrayList<>();
        for (int i = 0; i < chars.length; i++) {
            if (chars[i] == '*') {
                starIndexes.add(i);
            }
        }
        int starCount = starIndexes.size();
        int[] lefts = new int[starCount];
        int[] rights = new int[starCount];
        lefts[0] = starIndexes.get(0) - 1;
        for (int i = 1; i < starCount; i++) {
            lefts[i] = starIndexes.get(i) - starIndexes.get(i - 1) - 2;
        }
        rights[starCount - 1] = chars.length - starIndexes.get(starCount - 1) - 1;
        for (int i = starCount - 2; i >= 0; i--) {
            rights[i] = starIndexes.get(i + 1) - starIndexes.get(i) - 2;
        }
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < starCount; i++) {
            int left = lefts[i];
            int right = rights[i];
            if (left >= right) {
                sb.append(chars[starIndexes.get(i) - left - 1]);
            }
            else {
                sb.append(chars[starIndexes.get(i) + right + 1]);
            }
        }
        return sb.toString();

=======

        StringBuilder sb = new StringBuilder();
        int n = s.length();
        for (int i = 0; i < n; i++) {
            char c = s.charAt(i);
            if (c == '*') {
                sb.deleteCharAt(sb.length() - 1);
            } else {
                sb.append(c);
            }
        }
        return sb.toString();

=======

        int n = s.length();
        int[] left = new int[n];
        int[] right = new int[n];
        int prev = -1;
        for (int i = 0; i < n; i++) {
            if (s.charAt(i) == '*') {
                left[i] = prev;
            } else {
                prev = i;
                left[i] = prev;
            }
        }
        prev = -1;
        for (int i = n - 1; i >= 0; i--) {
            if (s.charAt(i) == '*') {
                right[i] = prev;
            } else {
                prev = i;
                right[i] = prev;
            }
        }
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < n; i++) {
            if (s.charAt(i) == '*') {
                int l = left[i];
                int r = right[i];
                if (l != -1) {
                    sb.setCharAt(l, ' ');
                }
                if (r != -1) {
                    sb.setCharAt(r, ' ');
                }
            } else {
                sb.append(s.charAt(i));
            }
        }
        return sb.toString().replaceAll(" ", "");

=======

        int n = s.length();
        ArrayList<Integer> stars = new ArrayList<>();
        for(int i = 0; i < n; i++) {
            if(s.charAt(i) == '*') {
                stars.add(i);
            }
        }
        StringBuilder sb = new StringBuilder();
        int j = 0;
        for(int i = 0; i < n; i++) {
            if(j < stars.size() && i == stars.get(j)) {
                j++;
            } else {
                sb.append(s.charAt(i));
            }
        }
        return sb.toString();

=======

        int n = s.length();
        char[] ch = s.toCharArray();
        Stack<Integer> st = new Stack<>();
        for(int i=0; i<n; i++){
            if(ch[i] == '*'){
                st.push(i);
            }
            else{
                if(!st.isEmpty()){
                    int pos = st.pop();
                    ch[pos] = ch[i];
                    ch[i] = '*';
                }
            }
        }
        StringBuilder sb = new StringBuilder();
        for(int i=0; i<n; i++){
            if(ch[i] != '*'){
                sb.append(ch[i]);
            }
        }
        return sb.toString();

=======

        int[] a = new int[s.length()];
        int[] b = new int[s.length()];
        int m = 0;
        int n = 0;
        for (int i = 0; i < s.length(); i++) {
            if (s.charAt(i) == '*') {
                a[m++] = i;
            } else {
                b[n++] = i;
            }
        }
        int j = 0;
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < n; i++) {
            while (j < m && b[i] > a[j]) {
                j++;
            }
            if (j == m || b[i] < a[j]) {
                sb.append(s.charAt(b[i]));
            }
        }
        return sb.toString();

=======

        int n = s.length();
        char[] sArr = s.toCharArray();
        int[] left = new int[n];
        int[] right = new int[n];
        int cnt = 0;
        for (int i = 0; i < n; i++) {
            if (sArr[i] == '*') {
                cnt++;
            }
            left[i] = cnt;
        }
        cnt = 0;
        for (int i = n - 1; i >= 0; i--) {
            if (sArr[i] == '*') {
                cnt++;
            }
            right[i] = cnt;
        }
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < n; i++) {
            if (sArr[i] == '*') {
                continue;
            }
            if (i - left[i] >= 0 && sArr[i - left[i]] == '*') {
                continue;
            }
            if (i + right[i] < n && sArr[i + right[i]] == '*') {
                continue;
            }
            sb.append(sArr[i]);
        }
        return sb.toString();

=======

        char[] ch = s.toCharArray();
        int len = ch.length;
        int[] index = new int[len];
        int l = 0;
        int r = 0;
        for(int i = 0; i < len; i++) {
            if(ch[i] == '*') {
                index[r++] = i;
            }
        }
        int i = 0;
        int j = 0;
        while(i < len && j < r) {
            if(ch[i] == '*') {
                i++;
            } else {
                if(i < index[j]) {
                    ch[i] = ch[index[j]];
                    ch[index[j]] = '*';
                    j++;
                }
                i++;
            }
        }
        return new String(ch).substring(0, len - r);
