Synthesizing 10/10 solutions

=======

        int n = s.length();
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = s.charAt(i) - '0';
        }
        int[] b = new int[n];
        for (int i = 0; i < n; i++) {
            b[i] = a[i] ^ (i & 1);
        }
        int res = Integer.MAX_VALUE;
        for (int i = 0; i < 2; i++) {
            int cnt = 0;
            for (int j = 0; j < n; j++) {
                if (a[j] != i) {
                    cnt++;
                }
                if (b[j] != i) {
                    cnt--;
                }
                if (j >= n - 1) {
                    break;
                }
                if (cnt < 0) {
                    cnt = 0;
                }
            }
            if (cnt == 0) {
                res = Math.min(res, cnt);
            }
        }
        return res == Integer.MAX_VALUE ? -1 : res;

=======

        int n = s.length();
        int c0 = 0, c1 = 0;
        for (int i = 0; i < n; i++) {
            if (s.charAt(i) == '0') {
                c0++;
            } else {
                c1++;
            }
        }
        if (Math.abs(c0 - c1) > 1) {
            return -1;
        }
        if (c0 > c1) {
            return minSwaps(s, '0');
        } else if (c0 < c1) {
            return minSwaps(s, '1');
        } else {
            return Math.min(minSwaps(s, '0'), minSwaps(s, '1'));
        }
    }

    private int minSwaps(String s, char c) {
        int n = s.length();
        int ans = 0;
        for (int i = 0; i < n; i++) {
            if (s.charAt(i) != c) {
                ans++;
            }
            c = c == '0' ? '1' : '0';
        }
        return ans / 2;

=======

        int n = s.length();
        int c0 = 0, c1 = 0;
        for (int i = 0; i < n; i++) {
            if (s.charAt(i) == '0') {
                c0++;
            } else {
                c1++;
            }
        }
        if (Math.abs(c0 - c1) > 1) {
            return -1;
        }
        int res = 0;
        if (c0 == c1) {
            int count0 = 0, count1 = 0;
            for (int i = 0; i < n; i++) {
                if (i % 2 == 0) {
                    if (s.charAt(i) == '1') {
                        count0++;
                    } else {
                        count1++;
                    }
                } else {
                    if (s.charAt(i) == '0') {
                        count0++;
                    } else {
                        count1++;
                    }
                }
            }
            res = Math.min(count0, count1);
        } else if (c0 > c1) {
            int count = 0;
            for (int i = 0; i < n; i++) {
                if (i % 2 == 0) {
                    if (s.charAt(i) == '1') {
                        count++;
                    }
                } else {
                    if (s.charAt(i) == '0') {
                        count++;
                    }
                }
            }
            res = count;
        } else {
            int count = 0;
            for (int i = 0; i < n; i++) {
                if (i % 2 == 0) {
                    if (s.charAt(i) == '0') {
                        count++;
                    }
                } else {
                    if (s.charAt(i) == '1') {
                        count++;
                    }
                }
            }
            res = count;
        }
        return res;

=======

        int n = s.length();
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = s.charAt(i) - '0';
        }
        int[] b = new int[n];
        for (int i = 0; i < n; i++) {
            b[i] = i % 2;
        }
        int[] c = new int[n];
        for (int i = 0; i < n; i++) {
            c[i] = 1 - i % 2;
        }
        int[] d = new int[n];
        for (int i = 0; i < n; i++) {
            d[i] = i % 2;
        }
        int ans = Integer.MAX_VALUE;
        for (int i = 0; i < 2; i++) {
            int cnt = 0;
            for (int j = 0; j < n; j++) {
                if (i % 2 == 0) {
                    if (a[j] != b[j]) {
                        cnt++;
                    }
                } else {
                    if (a[j] != c[j]) {
                        cnt++;
                    }
                }
            }
            ans = Math.min(ans, cnt / 2);
            int[] t = b;
            b = c;
            c = t;
        }
        return ans == Integer.MAX_VALUE ? -1 : ans;

=======

        int n = s.length();
        int count = 0;
        for (int i = 0; i < n; i++) {
            if (s.charAt(i) == '1') {
                count++;
            }
        }
        if (Math.abs(count - (n - count)) > 1) {
            return -1;
        }
        int zero = 0, one = 0;
        for (int i = 0; i < n; i++) {
            if (i % 2 == 0) {
                if (s.charAt(i) != '0') {
                    zero++;
                }
                if (s.charAt(i) != '1') {
                    one++;
                }
            } else {
                if (s.charAt(i) != '1') {
                    zero++;
                }
                if (s.charAt(i) != '0') {
                    one++;
                }
            }
        }
        if (count > n - count) {
            return zero / 2;
        } else {
            return one / 2;
        }

=======

        int n = s.length();
        int cnt1 = 0;
        int cnt2 = 0;
        for (int i = 0; i < n; i++) {
            if (i % 2 == 0) {
                if (s.charAt(i) == '1') cnt1++;
            } else {
                if (s.charAt(i) == '0') cnt1++;
            }
        }
        for (int i = 0; i < n; i++) {
            if (i % 2 == 0) {
                if (s.charAt(i) == '0') cnt2++;
            } else {
                if (s.charAt(i) == '1') cnt2++;
            }
        }
        if (n % 2 == 0) {
            if (cnt1 == cnt2) {
                return cnt1 / 2;
            } else {
                return -1;
            }
        } else {
            if (cnt1 == cnt2 + 1) {
                return cnt1 / 2;
            } else if (cnt1 + 1 == cnt2) {
                return cnt2 / 2;
            } else {
                return -1;
            }
        }

=======

        int n = s.length();
        int count0 = 0;
        int count1 = 0;
        for(int i = 0; i < n; i++){
            if(s.charAt(i) == '0'){
                count0++;
            }else{
                count1++;
            }
        }
        if(Math.abs(count0 - count1) > 1){
            return -1;
        }
        if(count0 > count1){
            return getSwap(s, '0');
        }else if(count0 < count1){
            return getSwap(s, '1');
        }else{
            return Math.min(getSwap(s, '0'), getSwap(s, '1'));
        }
    }
    public int getSwap(String s, char c){
        int n = s.length();
        int ans = 0;
        for(int i = 0; i < n; i++){
            if(s.charAt(i) != c){
                ans++;
            }
            c = c == '0' ? '1' : '0';
        }
        return ans/2;

=======

        int n = s.length();
        int one = 0, zero = 0;
        for (int i = 0; i < n; i++) {
            if (s.charAt(i) == '1') one++;
            else zero++;
        }
        if (Math.abs(one - zero) > 1) return -1;
        if (one == zero) {
            int res1 = 0, res2 = 0;
            for (int i = 0; i < n; i++) {
                if (i % 2 == 0) {
                    if (s.charAt(i) == '1') res1++;
                    else res2++;
                } else {
                    if (s.charAt(i) == '0') res1++;
                    else res2++;
                }
            }
            return Math.min(res1, res2);
        } else {
            int res = 0;
            char c = one > zero ? '1' : '0';
            for (int i = 0; i < n; i++) {
                if (i % 2 == 0) {
                    if (s.charAt(i) != c) res++;
                } else {
                    if (s.charAt(i) == c) res++;
                }
            }
            return res / 2;
        }

=======

        int n = s.length();
        int count0 = 0, count1 = 0;
        for(int i = 0; i < n; i++) {
            if(s.charAt(i) == '0') count0++;
            else count1++;
        }
        if(Math.abs(count0 - count1) > 1) return -1;
        if(count0 > count1) return solve(s, '0');
        else if(count1 > count0) return solve(s, '1');
        else return Math.min(solve(s, '0'), solve(s, '1'));
    }

    private int solve(String s, char c) {
        int n = s.length();
        int res = 0;
        for(int i = 0; i < n; i++) {
            if(s.charAt(i) != c) res++;
            c = c == '0' ? '1' : '0';
        }
        return res / 2;

=======

        int n = s.length();
        int[] ones = new int[n];
        int[] zeros = new int[n];
        int sum = 0;
        for (int i = 0; i < n; i++) {
            sum += s.charAt(i) - '0';
            ones[i] = sum;
            zeros[i] = i - ones[i];
        }
        int min = Integer.MAX_VALUE;
        for (int i = 0; i < n; i++) {
            int onesCount = i == 0 ? ones[n - 1] : ones[n - 1] - ones[i - 1];
            int zerosCount = i == 0 ? zeros[n - 1] : zeros[n - 1] - zeros[i - 1];
            if (onesCount == zerosCount) {
                min = Math.min(min, onesCount);
            }
        }
        return min == Integer.MAX_VALUE ? -1 : min;
