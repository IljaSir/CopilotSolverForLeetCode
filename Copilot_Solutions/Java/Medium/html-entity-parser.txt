Synthesizing 10/10 solutions (Duplicates hidden)

=======

        text = text.replaceAll("&quot;", "\"");
        text = text.replaceAll("&apos;", "'");
        text = text.replaceAll("&gt;", ">");
        text = text.replaceAll("&lt;", "<");
        text = text.replaceAll("&frasl;", "/");
        text = text.replaceAll("&amp;", "&");
        return text;

=======

        HashMap<String, Character> map = new HashMap<String, Character>();
        map.put("&quot;", '"');
        map.put("&apos;", '\'');
        map.put("&amp;", '&');
        map.put("&gt;", '>');
        map.put("&lt;", '<');
        map.put("&frasl;", '/');
        
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < text.length(); i++) {
            if (text.charAt(i) == '&') {
                int j = i + 1;
                while (j < text.length() && text.charAt(j) != ';') {
                    j++;
                }
                if (map.containsKey(text.substring(i, j + 1))) {
                    sb.append(map.get(text.substring(i, j + 1)));
                    i = j;
                } else {
                    sb.append(text.charAt(i));
                }
            } else {
                sb.append(text.charAt(i));
            }
        }
        return sb.toString();

=======

        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < text.length(); i++) {
            if (text.charAt(i) == '&') {
                if (i + 5 < text.length() && text.substring(i, i + 6).equals("&frasl;")) {
                    sb.append("/");
                    i += 5;
                } else if (i + 4 < text.length() && text.substring(i, i + 5).equals("&gt;")) {
                    sb.append(">");
                    i += 4;
                } else if (i + 4 < text.length() && text.substring(i, i + 5).equals("&lt;")) {
                    sb.append("<");
                    i += 4;
                } else if (i + 4 < text.length() && text.substring(i, i + 5).equals("&amp;")) {
                    sb.append("&");
                    i += 4;
                } else if (i + 5 < text.length() && text.substring(i, i + 6).equals("&quot;")) {
                    sb.append("\"");
                    i += 5;
                } else if (i + 5 < text.length() && text.substring(i, i + 6).equals("&apos;")) {
                    sb.append("'");
                    i += 5;
                } else {
                    sb.append(text.charAt(i));
                }
            } else {
                sb.append(text.charAt(i));
            }
        }
        return sb.toString();

=======

        String[] entities = {"&quot;", "&apos;", "&amp;", "&gt;", "&lt;", "&frasl;"};
        String[] chars = {"\"", "'", "&", ">", "<", "/"};
        for (int i = 0; i < entities.length; i++) {
            text = text.replace(entities[i], chars[i]);
        }
        return text;

=======

        String[] entities = {"&quot;", "&apos;", "&amp;", "&gt;", "&lt;", "&frasl;"};
        String[] symbols = {"\"", "'", "&", ">", "<", "/"};
        for (int i = 0; i < entities.length; i++) {
            text = text.replace(entities[i], symbols[i]);
        }
        return text;

=======

        String[] entities = new String[]{"&quot;", "&apos;", "&amp;", "&gt;", "&lt;", "&frasl;"};
        String[] chars = new String[]{"\"", "'", "&", ">", "<", "/"};
        for (int i = 0; i < entities.length; i++) {
            text = text.replace(entities[i], chars[i]);
        }
        return text;

=======

        String[] entities = new String[]{"&quot;", "&apos;", "&amp;", "&gt;", "&lt;", "&frasl;"};
        String[] symbols = new String[]{"\"", "'", "&", ">", "<", "/"};
        
        for (int i = 0; i < entities.length; i++) {
            text = text.replaceAll(entities[i], symbols[i]);
        }
        
        return text;

=======

        // "&quot;": '"',
        // "&apos;": "'",
        // "&amp;": "&",
        // "&gt;": ">",
        // "&lt;": "<",
        // "&frasl;": "/"
        Map<String, String> map = new HashMap<>();
        map.put("&quot;", "\"");
        map.put("&apos;", "'");
        map.put("&amp;", "&");
        map.put("&gt;", ">");
        map.put("&lt;", "<");
        map.put("&frasl;", "/");
        StringBuilder sb = new StringBuilder();
        int i = 0;
        while (i < text.length()) {
            if (text.charAt(i) == '&') {
                int j = i;
                while (j < text.length() && text.charAt(j) != ';') {
                    j++;
                }
                String key = text.substring(i, j + 1);
                if (map.containsKey(key)) {
                    sb.append(map.get(key));
                } else {
                    sb.append(key);
                }
                i = j + 1;
            } else {
                sb.append(text.charAt(i));
                i++;
            }
        }
        return sb.toString();
