Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int n = aliceValues.length;
        int[][] sum = new int[n][3];
        for (int i = 0; i < n; i++) {
            sum[i][0] = aliceValues[i] + bobValues[i];
            sum[i][1] = aliceValues[i];
            sum[i][2] = i;
        }
        Arrays.sort(sum, (a, b) -> b[0] - a[0]);
        int alice = 0, bob = 0;
        for (int i = 0; i < n; i++) {
            if (i % 2 == 0) {
                alice += sum[i][1];
            } else {
                bob += sum[i][0] - sum[i][1];
            }
        }
        return alice == bob ? 0 : alice > bob ? 1 : -1;

=======

        int n = aliceValues.length;
        int[][] sum = new int[n][3];
        for (int i = 0; i < n; i++) {
            sum[i][0] = aliceValues[i] + bobValues[i];
            sum[i][1] = aliceValues[i];
            sum[i][2] = bobValues[i];
        }
        Arrays.sort(sum, (a, b) -> b[0] - a[0]);
        int alice = 0, bob = 0;
        for (int i = 0; i < n; i++) {
            if (i % 2 == 0) {
                alice += sum[i][1];
            } else {
                bob += sum[i][2];
            }
        }
        return Integer.compare(alice, bob);

=======

        int n = aliceValues.length;
        int[][] sum = new int[n][3];
        for (int i = 0; i < n; i++) {
            sum[i][0] = aliceValues[i] + bobValues[i];
            sum[i][1] = aliceValues[i];
            sum[i][2] = bobValues[i];
        }
        Arrays.sort(sum, (a, b) -> b[0] - a[0]);
        int a = 0, b = 0;
        for (int i = 0; i < n; i++) {
            if (i % 2 == 0) {
                a += sum[i][1];
            } else {
                b += sum[i][2];
            }
        }
        return Integer.compare(a, b);

=======

        int n = aliceValues.length;
        int[][] stones = new int[n][3];
        for (int i = 0; i < n; i++) {
            stones[i][0] = aliceValues[i] + bobValues[i];
            stones[i][1] = aliceValues[i];
            stones[i][2] = bobValues[i];
        }
        Arrays.sort(stones, (a, b) -> b[0] - a[0]);
        int alice = 0;
        int bob = 0;
        for (int i = 0; i < n; i++) {
            if (i % 2 == 0) {
                alice += stones[i][1];
            } else {
                bob += stones[i][2];
            }
        }
        return Integer.compare(alice, bob);

=======

        int n = aliceValues.length;
        int[][] arr = new int[n][3];
        for (int i = 0; i < n; i++) {
            arr[i][0] = aliceValues[i];
            arr[i][1] = bobValues[i];
            arr[i][2] = i;
        }
        Arrays.sort(arr, (a, b) -> -(a[0] + a[1] - b[0] - b[1]));
        int alice = 0, bob = 0;
        for (int i = 0; i < n; i++) {
            if (i % 2 == 0) {
                alice += arr[i][0];
            } else {
                bob += arr[i][1];
            }
        }
        return alice == bob ? 0 : alice > bob ? 1 : -1;

=======

        int n = aliceValues.length;
        int[][] arr = new int[n][2];
        for (int i = 0; i < n; i++) {
            arr[i][0] = aliceValues[i] + bobValues[i];
            arr[i][1] = i;
        }
        Arrays.sort(arr, (a, b) -> b[0] - a[0]);
        int alice = 0, bob = 0;
        for (int i = 0; i < n; i++) {
            if (i % 2 == 0) {
                alice += aliceValues[arr[i][1]];
            } else {
                bob += bobValues[arr[i][1]];
            }
        }
        return alice > bob ? 1 : alice == bob ? 0 : -1;

=======

        int n = aliceValues.length;
        int[][] points = new int[n][3];
        for (int i = 0; i < n; i++) {
            points[i][0] = aliceValues[i] + bobValues[i];
            points[i][1] = aliceValues[i];
            points[i][2] = bobValues[i];
        }
        Arrays.sort(points, (a, b) -> b[0] - a[0]);
        int alice = 0, bob = 0;
        for (int i = 0; i < n; i++) {
            if (i % 2 == 0) {
                alice += points[i][1];
            } else {
                bob += points[i][2];
            }
        }
        return alice == bob ? 0 : alice > bob ? 1 : -1;

=======

        int[][] sum = new int[aliceValues.length][3];
        for (int i = 0; i < aliceValues.length; i++) {
            sum[i][0] = aliceValues[i] + bobValues[i];
            sum[i][1] = aliceValues[i];
            sum[i][2] = bobValues[i];
        }
        Arrays.sort(sum, (a, b) -> b[0] - a[0]);
        int alice = 0;
        int bob = 0;
        for (int i = 0; i < aliceValues.length; i++) {
            if (i % 2 == 0) {
                alice += sum[i][1];
            } else {
                bob += sum[i][2];
            }
        }
        if (alice > bob) {
            return 1;
        } else if (alice < bob) {
            return -1;
        } else {
            return 0;
        }

=======

        int n = aliceValues.length;
        int[][] pairs = new int[n][2];
        for (int i = 0; i < n; i++) {
            pairs[i][0] = aliceValues[i] + bobValues[i];
            pairs[i][1] = i;
        }
        Arrays.sort(pairs, (a, b) -> b[0] - a[0]);
        int aliceScore = 0, bobScore = 0;
        for (int i = 0; i < n; i++) {
            if (i % 2 == 0) {
                aliceScore += aliceValues[pairs[i][1]];
            } else {
                bobScore += bobValues[pairs[i][1]];
            }
        }
        return aliceScore == bobScore ? 0 : (aliceScore > bobScore ? 1 : -1);
