Synthesizing 10/10 solutions

=======

        Arrays.sort(nums);
        int[] pow = new int[nums.length];
        pow[0] = 1;
        for (int i = 1; i < nums.length; i++) {
            pow[i] = pow[i - 1] * 2 % 1000000007;
        }
        int res = 0, l = 0, r = nums.length - 1;
        while (l <= r) {
            if (nums[l] + nums[r] > target) {
                r--;
            } else {
                res = (res + pow[r - l]) % 1000000007;
                l++;
            }
        }
        return res;

=======

        Arrays.sort(nums);
        int n = nums.length;
        int[] pow = new int[n];
        pow[0] = 1;
        for (int i = 1; i < n; i++) {
            pow[i] = pow[i - 1] * 2 % 1000000007;
        }
        int res = 0;
        int left = 0, right = n - 1;
        while (left <= right) {
            if (nums[left] + nums[right] > target) {
                right--;
            } else {
                res = (res + pow[right - left]) % 1000000007;
                left++;
            }
        }
        return res;

=======

        Arrays.sort(nums);
        int n = nums.length;
        int[] pow = new int[n];
        pow[0] = 1;
        for (int i = 1; i < n; ++i) {
            pow[i] = pow[i - 1] * 2 % 1000000007;
        }
        int ans = 0;
        for (int i = 0, j = n - 1; i <= j; ++i) {
            while (i <= j && nums[i] + nums[j] > target) --j;
            if (i <= j) ans = (ans + pow[j - i]) % 1000000007;
        }
        return ans;

=======

        int mod = (int)1e9 + 7;
        Arrays.sort(nums);
        int[] pow = new int[nums.length];
        pow[0] = 1;
        for (int i = 1; i < nums.length; i++) {
            pow[i] = pow[i - 1] * 2 % mod;
        }
        int res = 0;
        int l = 0, r = nums.length - 1;
        while (l <= r) {
            if (nums[l] + nums[r] > target) {
                r--;
            } else {
                res = (res + pow[r - l]) % mod;
                l++;
            }
        }
        return res;

=======

        Arrays.sort(nums);
        int mod = 1000000007;
        int[] pow = new int[nums.length];
        pow[0] = 1;
        for (int i = 1; i < nums.length; i++) {
            pow[i] = pow[i - 1] * 2 % mod;
        }
        int res = 0;
        int l = 0, r = nums.length - 1;
        while (l <= r) {
            if (nums[l] + nums[r] > target) {
                r--;
            } else {
                res = (res + pow[r - l]) % mod;
                l++;
            }
        }
        return res;

=======

        Arrays.sort(nums);
        int n = nums.length;
        int res = 0, mod = (int)1e9 + 7;
        int[] pow = new int[n];
        pow[0] = 1;
        for (int i = 1; i < n; ++i) {
            pow[i] = pow[i - 1] * 2 % mod;
        }
        for (int i = 0, j = n - 1; i <= j;) {
            if (nums[i] + nums[j] > target) {
                --j;
            } else {
                res = (res + pow[j - i]) % mod;
                ++i;
            }
        }
        return res;

=======

        int mod = (int)1e9 + 7;
        int n = nums.length;
        int[] pow = new int[n];
        pow[0] = 1;
        for (int i = 1; i < n; i++) {
            pow[i] = (pow[i - 1] * 2) % mod;
        }
        Arrays.sort(nums);
        int res = 0;
        int i = 0;
        int j = n - 1;
        while (i <= j) {
            if (nums[i] + nums[j] > target) {
                j--;
            } else {
                res = (res + pow[j - i]) % mod;
                i++;
            }
        }
        return res;

=======

        Arrays.sort(nums);
        int n = nums.length;
        long[] pow = new long[n];
        pow[0] = 1;
        for(int i=1; i<n; i++) {
            pow[i] = pow[i-1] * 2 % 1000000007;
        }
        int left = 0;
        int right = n - 1;
        long res = 0;
        while(left <= right) {
            if(nums[left] + nums[right] > target) {
                right--;
            } else {
                res += pow[right - left] % 1000000007;
                left++;
            }
        }
        return (int)res % 1000000007;

=======

        Arrays.sort(nums);
        int left = 0;
        int right = nums.length - 1;
        int mod = (int)1e9 + 7;
        int[] power = new int[nums.length];
        power[0] = 1;
        for (int i = 1; i < nums.length; i++) {
            power[i] = power[i - 1] * 2 % mod;
        }
        int count = 0;
        while (left <= right) {
            if (nums[left] + nums[right] > target) {
                right--;
            } else {
                count = (count + power[right - left]) % mod;
                left++;
            }
        }
        return count;

=======

        int mod = 1000000007;
        int n = nums.length;
        
        Arrays.sort(nums);
        
        int[] pow = new int[n];
        pow[0] = 1;
        for (int i = 1; i < n; i++) {
            pow[i] = pow[i - 1] * 2 % mod;
        }
        
        int l = 0;
        int r = n - 1;
        int res = 0;
        while (l <= r) {
            if (nums[l] + nums[r] <= target) {
                res = (res + pow[r - l]) % mod;
                l++;
            } else {
                r--;
            }
        }
        
        return res;
