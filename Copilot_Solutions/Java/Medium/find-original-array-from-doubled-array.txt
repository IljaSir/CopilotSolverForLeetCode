Synthesizing 10/10 solutions

=======

        if (changed.length % 2 != 0) {
            return new int[0];
        }
        Arrays.sort(changed);
        int[] result = new int[changed.length / 2];
        Map<Integer, Integer> map = new HashMap<>();
        for (int i : changed) {
            map.put(i, map.getOrDefault(i, 0) + 1);
        }
        int index = 0;
        for (int i : changed) {
            if (map.get(i) > 0) {
                if (!map.containsKey(i * 2) || map.get(i * 2) == 0) {
                    return new int[0];
                }
                map.put(i, map.get(i) - 1);
                map.put(i * 2, map.get(i * 2) - 1);
                result[index++] = i;
            }
        }
        return result;

=======

        int n = changed.length;
        if (n % 2 == 1) return new int[0];
        Map<Integer, Integer> map = new HashMap<>();
        for (int i = 0; i < n; i++) {
            map.put(changed[i], map.getOrDefault(changed[i], 0) + 1);
        }
        int[] ans = new int[n / 2];
        int index = 0;
        for (int i = 0; i < n; i++) {
            if (changed[i] == 0) {
                if (map.get(0) % 2 == 1) return new int[0];
                ans[index++] = 0;
                map.put(0, 0);
            } else {
                if (map.get(changed[i]) > 0 && map.get(2 * changed[i]) > 0) {
                    ans[index++] = changed[i];
                    map.put(changed[i], map.get(changed[i]) - 1);
                    map.put(2 * changed[i], map.get(2 * changed[i]) - 1);
                }
            }
        }
        return index == n / 2 ? ans : new int[0];

=======

        if (changed.length % 2 == 1) {
            return new int[0];
        }
        Arrays.sort(changed);
        int[] result = new int[changed.length / 2];
        int i = 0;
        for (int j = 0; j < changed.length; j += 2) {
            if (changed[j] != changed[j + 1]) {
                return new int[0];
            }
            result[i++] = changed[j];
        }
        return result;

=======

        int[] result = new int[changed.length / 2];
        if (changed.length % 2 != 0) {
            return new int[0];
        }
        Map<Integer, Integer> map = new HashMap<>();
        for (int i = 0; i < changed.length; i++) {
            map.put(changed[i], map.getOrDefault(changed[i], 0) + 1);
        }
        int j = 0;
        for (int i = 0; i < changed.length; i++) {
            if (map.get(changed[i]) > 0) {
                if (changed[i] == 0) {
                    if (map.get(changed[i]) % 2 != 0) {
                        return new int[0];
                    }
                    result[j++] = changed[i];
                    map.put(changed[i], 0);
                } else {
                    int t = changed[i] * 2;
                    if (map.get(t) <= 0) {
                        return new int[0];
                    }
                    result[j++] = changed[i];
                    map.put(changed[i], map.get(changed[i]) - 1);
                    map.put(t, map.get(t) - 1);
                }
            }
        }
        return result;

=======

        if (changed.length % 2 == 1) {
            return new int[0];
        }
        int[] cnt = new int[100001];
        for (int x : changed) {
            cnt[x]++;
        }
        int[] res = new int[changed.length / 2];
        int idx = 0;
        for (int i = 0; i < cnt.length; i++) {
            if (cnt[i] == 0) {
                continue;
            }
            if (cnt[i] > cnt[i * 2]) {
                return new int[0];
            }
            for (int j = 0; j < cnt[i]; j++) {
                res[idx++] = i;
            }
            cnt[i * 2] -= cnt[i];
        }
        return res;

=======

        if (changed.length % 2 == 1) {
            return new int[0];
        }
        int[] result = new int[changed.length / 2];
        Arrays.sort(changed);
        int index = 0;
        for (int i = 0; i < changed.length; i += 2) {
            if (changed[i] != changed[i + 1]) {
                return new int[0];
            }
            if (changed[i] % 2 == 1) {
                return new int[0];
            }
            result[index++] = changed[i] / 2;
        }
        return result;

=======

        if (changed.length % 2 == 1) {
            return new int[0];
        }
        int[] res = new int[changed.length / 2];
        int index = 0;
        Map<Integer, Integer> map = new HashMap<>();
        for (int i = 0; i < changed.length; i++) {
            map.put(changed[i], map.getOrDefault(changed[i], 0) + 1);
        }
        Arrays.sort(changed);
        for (int i = 0; i < changed.length; i++) {
            if (map.get(changed[i]) > 0) {
                if (map.getOrDefault(changed[i] * 2, 0) > 0) {
                    res[index++] = changed[i];
                    map.put(changed[i], map.get(changed[i]) - 1);
                    map.put(changed[i] * 2, map.get(changed[i] * 2) - 1);
                } else {
                    return new int[0];
                }
            }
        }
        return res;

=======

        if (changed.length % 2 != 0) {
            return new int[]{};
        }
        int[] result = new int[changed.length / 2];
        Arrays.sort(changed);
        int i = 0;
        int j = 0;
        while (i < changed.length) {
            if (i == changed.length - 1) {
                return new int[]{};
            }
            if (changed[i] != changed[i + 1]) {
                return new int[]{};
            }
            result[j++] = changed[i];
            i += 2;
        }
        return result;

=======

        if (changed.length % 2 == 1) return new int[0];
        int[] res = new int[changed.length / 2];
        Arrays.sort(changed);
        int i = 0, j = 0;
        while (i < changed.length && j < res.length) {
            if (i + 1 < changed.length && changed[i] * 2 == changed[i + 1]) {
                res[j++] = changed[i];
                i += 2;
            } else {
                return new int[0];
            }
        }
        return j == res.length ? res : new int[0];

=======

        int[] result = new int[changed.length / 2];
        int resultIndex = 0;
        Map<Integer, Integer> map = new HashMap<>();
        for (int i = 0; i < changed.length; i++) {
            map.put(changed[i], map.getOrDefault(changed[i], 0) + 1);
        }
        Arrays.sort(changed);
        for (int i = 0; i < changed.length; i++) {
            if (map.get(changed[i]) > 0) {
                if (map.getOrDefault(changed[i] * 2, 0) > 0) {
                    result[resultIndex++] = changed[i];
                    map.put(changed[i], map.get(changed[i]) - 1);
                    map.put(changed[i] * 2, map.get(changed[i] * 2) - 1);
                } else {
                    return new int[0];
                }
            }
        }
        return result;
