Synthesizing 10/10 solutions

=======

        int[] res = new int[n];
        int i = 0, l = 1, r = n;
        while (l <= r) {
            res[i++] = k > 1 ? (k-- % 2 != 0 ? l++ : r--) : l++;
        }
        return res;

=======

        int[] result = new int[n];
        int left = 1, right = n;
        for (int i = 0; i < n; i++) {
            if (k > 1) {
                result[i] = k % 2 != 0 ? left++ : right--;
                k--;
            } else {
                result[i] = left++;
            }
        }
        return result;

=======

        int[] res = new int[n];
        int l = 1, r = n;
        for (int i = 0; i < n; i++) {
            res[i] = k % 2 == 0 ? l++ : r--;
            if (k > 1) {
                k--;
            }
        }
        return res;

=======

        int[] result = new int[n];
        int i = 0;
        int l = 1;
        int r = n;
        while (i < k) {
            if (i % 2 == 0) {
                result[i++] = l++;
            } else {
                result[i++] = r--;
            }
        }
        if (k % 2 == 0) {
            while (i < n) {
                result[i++] = l++;
            }
        } else {
            while (i < n) {
                result[i++] = r--;
            }
        }
        return result;

=======

        int[] result = new int[n];
        int i = 0;
        int left = 1;
        int right = n;
        while (i < n) {
            if (k > 1) {
                if (k % 2 == 0) {
                    result[i++] = left++;
                } else {
                    result[i++] = right--;
                }
                k--;
            } else {
                result[i++] = left++;
            }
        }
        return result;

=======

        int[] ans = new int[n];
        int i = 0;
        int l = 1;
        int r = n;
        while (l < r) {
            if (k > 1) {
                if (k % 2 == 0) {
                    ans[i++] = l++;
                } else {
                    ans[i++] = r--;
                }
                k--;
            } else {
                ans[i++] = l++;
            }
        }
        ans[i] = l;
        return ans;

=======

        int[] arr = new int[n];
        int i = 0, j = n;
        while (i < j) {
            if (k > 1) {
                arr[i++] = k-- % 2 == 1 ? j-- : i++;
            } else {
                arr[i++] = j--;
            }
        }
        return arr;

=======

        int[] result = new int[n];
        int left = 1;
        int right = n;
        int index = 0;
        for (int i = 0; i < k; i++) {
            if (i % 2 == 0) {
                result[index++] = left++;
            } else {
                result[index++] = right--;
            }
        }
        if (k % 2 == 0) {
            for (int i = left; i <= right; i++) {
                result[index++] = i;
            }
        } else {
            for (int i = right; i >= left; i--) {
                result[index++] = i;
            }
        }
        return result;

=======

        int[] result = new int[n];
        int i = 0;
        int left = 1, right = n;
        while (i < n) {
            if (k > 1) {
                if (k % 2 == 0) {
                    result[i++] = right--;
                } else {
                    result[i++] = left++;
                }
                k--;
            } else {
                result[i++] = left++;
            }
        }
        return result;

=======

        int[] ans = new int[n];
        for(int i = 0; i < n; i++) {
            ans[i] = i + 1;
        }
        int l = 1, r = k;
        while(l < r) {
            int temp = ans[l];
            ans[l] = ans[r];
            ans[r] = temp;
            l++;
            r--;
        }
        for(int i = k + 1; i < n; i++) {
            ans[i] = i + 1;
        }
        return ans;
