Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int i = 0, j = 0, max = 0;
        while (i < nums1.length && j < nums2.length) {
            if (nums1[i] <= nums2[j]) {
                max = Math.max(max, j - i);
                j++;
            } else {
                i++;
            }
        }
        return max;

=======

        int result = 0;
        int i = 0;
        int j = 0;
        while (i < nums1.length && j < nums2.length) {
            if (nums1[i] <= nums2[j]) {
                result = Math.max(result, j - i);
                j++;
            } else {
                i++;
            }
        }
        return result;

=======

        int max = 0;
        int i = 0;
        int j = 0;
        while (i < nums1.length && j < nums2.length) {
            if (nums1[i] <= nums2[j]) {
                max = Math.max(max, j - i);
                j++;
            } else {
                i++;
            }
        }
        return max;

=======

        int i = 0;
        int j = 0;
        int max = 0;
        while(i < nums1.length && j < nums2.length) {
            if (nums1[i] <= nums2[j]) {
                max = Math.max(max, j - i);
                j++;
            } else {
                i++;
            }
        }
        return max;

=======

        int max = 0;
        for (int i = 0; i < nums1.length; i++) {
            int j = i;
            while (j < nums2.length && nums1[i] <= nums2[j]) {
                j++;
            }
            max = Math.max(max, j - i - 1);
        }
        return max;

=======

        int result = 0;
        for (int i = 0; i < nums1.length; i++) {
            int j = i;
            while (j < nums2.length && nums1[i] <= nums2[j]) {
                j++;
            }
            result = Math.max(result, j - i - 1);
        }
        return result;

=======

        int res = 0;
        int i = 0;
        int j = 0;
        while(i < nums1.length && j < nums2.length) {
            if(nums1[i] > nums2[j]) {
                i++;
            } else {
                res = Math.max(res, j - i);
                j++;
            }
        }
        return res;

=======

        int max = 0;
        for (int i = 0; i < nums1.length; i++) {
            int l = i, r = nums2.length - 1;
            while (l < r) {
                int m = l + (r - l + 1) / 2;
                if (nums1[i] <= nums2[m]) {
                    l = m;
                } else {
                    r = m - 1;
                }
            }
            if (i <= l && nums1[i] <= nums2[l]) {
                max = Math.max(max, l - i);
            }
        }
        return max;

=======

        int max = 0;
        int index = 0;
        for (int i = 0; i < nums1.length; i++) {
            int num1 = nums1[i];
            for (int j = index; j < nums2.length; j++) {
                int num2 = nums2[j];
                if (num1 <= num2) {
                    max = Math.max(max, j - i);
                    index = j;
                }
            }
        }
        return max;
