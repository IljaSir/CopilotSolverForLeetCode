Synthesizing 10/10 solutions

=======

        int[] parent = new int[26];
        for (int i = 0; i < 26; i++) {
            parent[i] = i;
        }
        for (int i = 0; i < s1.length(); i++) {
            int x = s1.charAt(i) - 'a';
            int y = s2.charAt(i) - 'a';
            int rootX = find(parent, x);
            int rootY = find(parent, y);
            if (rootX != rootY) {
                parent[rootX] = rootY;
            }
        }
        char[] res = new char[baseStr.length()];
        for (int i = 0; i < baseStr.length(); i++) {
            int x = baseStr.charAt(i) - 'a';
            res[i] = (char) (find(parent, x) + 'a');
        }
        return new String(res);
    }

    private int find(int[] parent, int x) {
        if (parent[x] != x) {
            parent[x] = find(parent, parent[x]);
        }
        return parent[x];

=======

        int[] parent = new int[26];
        for (int i = 0; i < 26; i++) {
            parent[i] = i;
        }
        for (int i = 0; i < s1.length(); i++) {
            int x = s1.charAt(i) - 'a';
            int y = s2.charAt(i) - 'a';
            int px = find(parent, x);
            int py = find(parent, y);
            if (px != py) {
                parent[px] = py;
            }
        }
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < baseStr.length(); i++) {
            int x = baseStr.charAt(i) - 'a';
            int px = find(parent, x);
            sb.append((char) (px + 'a'));
        }
        return sb.toString();
    }
    
    private int find(int[] parent, int x) {
        if (parent[x] != x) {
            parent[x] = find(parent, parent[x]);
        }
        return parent[x];

=======

        int[] parent = new int[26];
        for (int i = 0; i < 26; i++) {
            parent[i] = i;
        }
        for (int i = 0; i < s1.length(); i++) {
            union(s1.charAt(i) - 'a', s2.charAt(i) - 'a', parent);
        }
        char[] base = baseStr.toCharArray();
        for (int i = 0; i < base.length; i++) {
            base[i] = (char) (find(base[i] - 'a', parent) + 'a');
        }
        return new String(base);
    }
    private int find(int x, int[] parent) {
        return parent[x] == x ? x : (parent[x] = find(parent[x], parent));

=======

        int[] parent = new int[26];
        for (int i = 0; i < 26; i++) {
            parent[i] = i;
        }
        for (int i = 0; i < s1.length(); i++) {
            union(s1.charAt(i) - 'a', s2.charAt(i) - 'a', parent);
        }
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < baseStr.length(); i++) {
            sb.append((char) (find(parent, baseStr.charAt(i) - 'a') + 'a'));
        }
        return sb.toString();
    }
    
    private void union(int a, int b, int[] parent) {
        int pa = find(parent, a);
        int pb = find(parent, b);
        if (pa != pb) {
            parent[pa] = pb;
        }
    }
    
    private int find(int[] parent, int a) {
        if (parent[a] != a) {
            parent[a] = find(parent, parent[a]);
        }
        return parent[a];

=======

        int[] parent = new int[26];
        for (int i = 0; i < 26; i++) {
            parent[i] = i;
        }
        for (int i = 0; i < s1.length(); i++) {
            int p1 = find(parent, s1.charAt(i) - 'a');
            int p2 = find(parent, s2.charAt(i) - 'a');
            parent[p1] = Math.min(p1, p2);
            parent[p2] = Math.min(p1, p2);
        }
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < baseStr.length(); i++) {
            sb.append((char)('a' + find(parent, baseStr.charAt(i) - 'a')));
        }
        return sb.toString();
    }
    private int find(int[] parent, int i) {
        if (parent[i] != i) {
            parent[i] = find(parent, parent[i]);
        }
        return parent[i];

=======

        int[] parent = new int[26];
        for (int i = 0; i < 26; i++) {
            parent[i] = i;
        }
        for (int i = 0; i < s1.length(); i++) {
            int p1 = find(parent, s1.charAt(i) - 'a');
            int p2 = find(parent, s2.charAt(i) - 'a');
            if (p1 != p2) {
                parent[p1] = p2;
            }
        }
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < baseStr.length(); i++) {
            int p = find(parent, baseStr.charAt(i) - 'a');
            sb.append((char)(p + 'a'));
        }
        return sb.toString();
    }
    private int find(int[] parent, int i) {
        if (parent[i] == i) {
            return i;
        }
        return parent[i] = find(parent, parent[i]);

=======

        int[] p = new int[26];
        for (int i = 0; i < 26; i++) {
            p[i] = i;
        }
        for (int i = 0; i < s1.length(); i++) {
            int x = s1.charAt(i) - 'a';
            int y = s2.charAt(i) - 'a';
            int px = find(p, x);
            int py = find(p, y);
            p[px] = py;
        }
        StringBuilder res = new StringBuilder();
        for (char c : baseStr.toCharArray()) {
            res.append((char) ('a' + find(p, c - 'a')));
        }
        return res.toString();
    }
    private int find(int[] p, int x) {
        if (p[x] != x) {
            p[x] = find(p, p[x]);
        }
        return p[x];

=======

        int[] parent = new int[26];
        for (int i = 0; i < 26; i++) {
            parent[i] = i;
        }
        
        for (int i = 0; i < s1.length(); i++) {
            int p1 = find(parent, s1.charAt(i) - 'a');
            int p2 = find(parent, s2.charAt(i) - 'a');
            parent[p1] = Math.min(p1, p2);
            parent[p2] = Math.min(p1, p2);
        }
        
        StringBuilder sb = new StringBuilder();
        for (char c : baseStr.toCharArray()) {
            sb.append((char) (find(parent, c - 'a') + 'a'));
        }
        return sb.toString();
    }
    
    private int find(int[] parent, int i) {
        if (i != parent[i]) {
            parent[i] = find(parent, parent[i]);
        }
        return parent[i];

=======

        int[] root = new int[26];
        for (int i = 0; i < 26; i++) root[i] = i;
        for (int i = 0; i < s1.length(); i++) {
            int p1 = find(root, s1.charAt(i) - 'a');
            int p2 = find(root, s2.charAt(i) - 'a');
            root[p1] = Math.min(p1, p2);
            root[p2] = Math.min(p1, p2);
        }
        char[] res = new char[baseStr.length()];
        for (int i = 0; i < baseStr.length(); i++) {
            res[i] = (char)(find(root, baseStr.charAt(i) - 'a') + 'a');
        }
        return new String(res);
    }
    private int find(int[] root, int i) {
        while (root[i] != i) {
            root[i] = root[root[i]];
            i = root[i];
        }
        return i;

=======

        // Union find
        int[] parent = new int[26];
        for (int i = 0; i < 26; i++) {
            parent[i] = i;
        }
        for (int i = 0; i < s1.length(); i++) {
            int p1 = find(parent, s1.charAt(i) - 'a');
            int p2 = find(parent, s2.charAt(i) - 'a');
            if (p1 != p2) {
                parent[p1] = p2;
            }
        }
        char[] result = new char[baseStr.length()];
        for (int i = 0; i < baseStr.length(); i++) {
            result[i] = (char) (find(parent, baseStr.charAt(i) - 'a') + 'a');
        }
        return new String(result);
    }
    
    private int find(int[] parent, int i) {
        if (parent[i] != i) {
            parent[i] = find(parent, parent[i]);
        }
        return parent[i];
