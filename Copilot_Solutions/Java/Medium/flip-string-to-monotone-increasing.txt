Synthesizing 10/10 solutions

=======

        int n = s.length();
        int[] p = new int[n + 1];
        for (int i = 0; i < n; ++i)
            p[i + 1] = p[i] + (s.charAt(i) == '1' ? 1 : 0);

        int ans = Integer.MAX_VALUE;
        for (int i = 0; i <= n; ++i)
            ans = Math.min(ans, p[i] + n - i - (p[n] - p[i]));
        return ans;

=======

        int n = s.length();
        int[] dp = new int[n];
        dp[0] = s.charAt(0) == '1' ? 1 : 0;
        for (int i = 1; i < n; i++) {
            dp[i] = dp[i - 1] + (s.charAt(i) == '1' ? 1 : 0);
        }
        int res = Integer.MAX_VALUE;
        for (int i = 0; i < n; i++) {
            int left = i >= 1 ? dp[i - 1] : 0;
            int right = dp[n - 1] - dp[i];
            res = Math.min(res, left + (n - 1 - i + 1 - right) - right);
        }
        return res;

=======

        int n = s.length();
        int[] zeros = new int[n + 1];
        int[] ones = new int[n + 1];
        for (int i = 0; i < n; i++) {
            zeros[i + 1] = zeros[i];
            ones[i + 1] = ones[i];
            if (s.charAt(i) == '0') {
                zeros[i + 1]++;
            } else {
                ones[i + 1]++;
            }
        }
        int result = n;
        for (int i = 0; i <= n; i++) {
            result = Math.min(result, zeros[i] + ones[n] - ones[i]);
        }
        return result;

=======

        int n = s.length();
        int[] ones = new int[n+1];
        for (int i = 1; i <= n; i++) {
            ones[i] = ones[i-1] + (s.charAt(i-1) == '1' ? 1 : 0);
        }
        int min = Integer.MAX_VALUE;
        for (int i = 0; i <= n; i++) {
            int flips = ones[i] + (n - i - (ones[n] - ones[i]));
            min = Math.min(min, flips);
        }
        return min;

=======

        int n = s.length();
        int[] sum = new int[n + 1];
        for (int i = 0; i < n; ++i) {
            sum[i + 1] = sum[i] + (s.charAt(i) == '1' ? 1 : 0);
        }
        int ans = Integer.MAX_VALUE;
        for (int i = 0; i <= n; ++i) {
            ans = Math.min(ans, sum[i] + n - i - (sum[n] - sum[i]));
        }
        return ans;

=======

        int n = s.length();
        int[] ones = new int[n];
        int[] zeros = new int[n];
        ones[0] = (s.charAt(0) == '1') ? 1 : 0;
        zeros[0] = (s.charAt(0) == '0') ? 1 : 0;
        for (int i = 1; i < n; i++) {
            ones[i] = ones[i - 1] + ((s.charAt(i) == '1') ? 1 : 0);
            zeros[i] = zeros[i - 1] + ((s.charAt(i) == '0') ? 1 : 0);
        }
        int ans = Integer.MAX_VALUE;
        for (int i = 0; i < n; i++) {
            int left = i;
            int right = n - 1 - i;
            int leftOnes = (left > 0) ? ones[left - 1] : 0;
            int leftZeros = (left > 0) ? zeros[left - 1] : 0;
            int rightOnes = ones[n - 1] - ones[i];
            int rightZeros = zeros[n - 1] - zeros[i];
            ans = Math.min(ans, leftZeros + rightOnes);
            ans = Math.min(ans, leftOnes + rightZeros);
        }
        return ans;

=======

        int n = s.length();
        int[] dp = new int[n+1];
        for (int i = 0; i < n; i++) {
            dp[i+1] = dp[i] + (s.charAt(i) == '1' ? 1 : 0);
        }
        int min = n;
        for (int i = 0; i <= n; i++) {
            min = Math.min(min, dp[i] + (n-i-(dp[n]-dp[i])));
        }
        return min;

=======

        int n = s.length();
        int[] right = new int[n];
        int[] left = new int[n];
        int count = 0;
        for (int i = 0; i < n; i++) {
            if (s.charAt(i) == '1') {
                count++;
            }
            right[i] = count;
        }
        count = 0;
        for (int i = n - 1; i >= 0; i--) {
            if (s.charAt(i) == '0') {
                count++;
            }
            left[i] = count;
        }
        int min = Integer.MAX_VALUE;
        for (int i = 0; i < n; i++) {
            int current = right[i] + left[i];
            if (current < min) {
                min = current;
            }
        }
        return min;

=======

        int n = s.length();
        int[] dp = new int[n];
        int zero = 0;
        for (int i = 0; i < n; i++) {
            if (s.charAt(i) == '0') {
                zero++;
            }
            dp[i] = zero;
        }
        int one = 0;
        int min = n;
        for (int i = n - 1; i >= 0; i--) {
            if (s.charAt(i) == '1') {
                one++;
            }
            if (i == 0) {
                min = Math.min(min, one);
            } else {
                min = Math.min(min, one + dp[i - 1]);
            }
        }
        return min;

=======

        int n = s.length();
        int[] pre = new int[n];
        int[] suf = new int[n];
        for (int i = 0; i < n; i++) {
            pre[i] = (i == 0 ? 0 : pre[i - 1]) + (s.charAt(i) == '1' ? 1 : 0);
        }
        for (int i = n - 1; i >= 0; i--) {
            suf[i] = (i == n - 1 ? 0 : suf[i + 1]) + (s.charAt(i) == '0' ? 1 : 0);
        }
        int ans = Integer.MAX_VALUE;
        for (int i = 0; i < n; i++) {
            int cur = (i == 0 ? 0 : pre[i - 1]) + (i == n - 1 ? 0 : suf[i + 1]);
            ans = Math.min(ans, cur);
        }
        return ans;
