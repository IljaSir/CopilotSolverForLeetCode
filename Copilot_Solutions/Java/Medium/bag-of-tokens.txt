Synthesizing 10/10 solutions

=======

        Arrays.sort(tokens);
        int maxScore = 0;
        int score = 0;
        int i = 0;
        int j = tokens.length - 1;
        while (i <= j) {
            if (power >= tokens[i]) {
                power -= tokens[i];
                score++;
                maxScore = Math.max(maxScore, score);
                i++;
            } else if (score > 0) {
                power += tokens[j];
                score--;
                j--;
            } else {
                break;
            }
        }
        return maxScore;

=======

        Arrays.sort(tokens);
        int i = 0, j = tokens.length - 1;
        int score = 0;
        while (i <= j) {
            if (power >= tokens[i]) {
                power -= tokens[i++];
                score++;
            } else if (score > 0) {
                power += tokens[j--];
                score--;
            } else {
                break;
            }
        }
        return score;

=======

        Arrays.sort(tokens);
        int i = 0, j = tokens.length - 1;
        int score = 0;
        while (i <= j) {
            if (power >= tokens[i]) {
                power -= tokens[i];
                score++;
                i++;
            } else if (score > 0) {
                power += tokens[j];
                score--;
                j--;
            } else {
                return score;
            }
        }
        return score;

=======

        Arrays.sort(tokens);
        int max = 0;
        int score = 0;
        int i = 0;
        int j = tokens.length - 1;
        while (i <= j) {
            if (power >= tokens[i]) {
                score++;
                power -= tokens[i++];
                max = Math.max(max, score);
            } else if (score > 0) {
                score--;
                power += tokens[j--];
            } else {
                break;
            }
        }
        return max;

=======

        Arrays.sort(tokens);
        int i = 0;
        int j = tokens.length - 1;
        int maxScore = 0;
        int score = 0;
        while (i <= j) {
            if (power >= tokens[i]) {
                power -= tokens[i++];
                maxScore = Math.max(maxScore, ++score);
            } else if (score > 0) {
                power += tokens[j--];
                score--;
            } else {
                break;
            }
        }
        return maxScore;

=======

        Arrays.sort(tokens);
        int l = 0, r = tokens.length - 1;
        int score = 0, maxScore = 0;
        while (l <= r) {
            if (power >= tokens[l]) {
                power -= tokens[l++];
                score++;
                maxScore = Math.max(maxScore, score);
            } else if (score > 0) {
                power += tokens[r--];
                score--;
            } else {
                break;
            }
        }
        return maxScore;

=======

        int maxScore = 0;
        int score = 0;
        Arrays.sort(tokens);
        int i = 0;
        int j = tokens.length - 1;
        while (i <= j) {
            if (power >= tokens[i]) {
                power -= tokens[i];
                score++;
                i++;
                maxScore = Math.max(maxScore, score);
            } else if (score > 0) {
                power += tokens[j];
                score--;
                j--;
            } else {
                break;
            }
        }
        return maxScore;

=======

        Arrays.sort(tokens);
        int i = 0, j = tokens.length - 1, score = 0, maxScore = 0;
        while (i <= j) {
            if (power < tokens[i]) {
                if (score > 0) {
                    power += tokens[j--];
                    score--;
                } else {
                    break;
                }
            } else {
                power -= tokens[i++];
                score++;
                maxScore = Math.max(maxScore, score);
            }
        }
        return maxScore;

=======

        int maxScore = 0;
        Arrays.sort(tokens);
        int i = 0, j = tokens.length - 1;
        while (i <= j) {
            if (power >= tokens[i]) {
                power -= tokens[i++];
                maxScore++;
            } else if (maxScore > 0 && i < j) {
                power += tokens[j--];
                maxScore--;
            } else {
                break;
            }
        }
        return maxScore;

=======

        Arrays.sort(tokens);
        int max = 0;
        int score = 0;
        int i = 0;
        int j = tokens.length - 1;
        while(i <= j) {
            if(power >= tokens[i]) {
                power -= tokens[i];
                score++;
                i++;
                max = Math.max(max, score);
            } else if(score > 0) {
                power += tokens[j];
                score--;
                j--;
            } else {
                break;
            }
        }
        return max;
