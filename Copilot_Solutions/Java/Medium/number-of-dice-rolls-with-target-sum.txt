Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int MOD = 1000000007;
        int[][] dp = new int[n + 1][target + 1];
        dp[0][0] = 1;
        for (int i = 1; i <= n; ++i)
            for (int j = 1; j <= target; ++j)
                for (int d = 1; d <= k; ++d)
                    if (j >= d)
                        dp[i][j] = (dp[i][j] + dp[i-1][j-d]) % MOD;
        return dp[n][target];

=======

        int MOD = 1000000007;
        int[][] dp = new int[n + 1][target + 1];
        dp[0][0] = 1;
        for (int i = 1; i <= n; ++i)
            for (int j = 1; j <= target; ++j)
                for (int d = 1; d <= k && d <= j; ++d)
                    dp[i][j] = (dp[i][j] + dp[i-1][j-d]) % MOD;
        return dp[n][target];

=======

        int[][] dp = new int[n + 1][target + 1];
        dp[0][0] = 1;
        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= target; j++) {
                for (int l = 1; l <= k; l++) {
                    if (j - l >= 0) {
                        dp[i][j] += dp[i - 1][j - l];
                        dp[i][j] %= 1000000007;
                    }
                }
            }
        }
        return dp[n][target];

=======

        int[][] dp = new int[n + 1][target + 1];
        dp[0][0] = 1;
        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= target; j++) {
                if (j <= k) {
                    dp[i][j] = dp[i - 1][j - 1];
                } else {
                    dp[i][j] = dp[i][j - 1] + dp[i - 1][j] - dp[i - 1][j - k - 1];
                }
                dp[i][j] = (dp[i][j] + 1000000007) % 1000000007;
            }
        }
        return dp[n][target];

=======

        int[][] dp = new int[n + 1][target + 1];
        dp[0][0] = 1;
        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= target; j++) {
                for (int l = 1; l <= k; l++) {
                    if (j - l >= 0) {
                        dp[i][j] = (dp[i][j] + dp[i - 1][j - l]) % 1000000007;
                    }
                }
            }
        }
        return dp[n][target];

=======

        int MOD = 1000000007;
        int[][] dp = new int[n + 1][target + 1];
        dp[0][0] = 1;
        for (int i = 1; i <= n; ++i)
            for (int j = i; j <= target; ++j)
                for (int d = 1; d <= k; ++d)
                    if (j >= d)
                        dp[i][j] = (dp[i][j] + dp[i - 1][j - d]) % MOD;
        return dp[n][target];

=======

        int mod = 1000000007;
        int[][] dp = new int[n + 1][target + 1];
        dp[0][0] = 1;
        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= target; j++) {
                for (int l = 1; l <= k; l++) {
                    if (j >= l) {
                        dp[i][j] += dp[i - 1][j - l];
                        dp[i][j] %= mod;
                    }
                }
            }
        }
        return dp[n][target];
