Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int n = arr.length;
        int[] xor = new int[n + 1];
        for (int i = 0; i < n; i++) {
            xor[i + 1] = xor[i] ^ arr[i];
        }
        int ans = 0;
        for (int i = 0; i < n; i++) {
            for (int k = i + 1; k < n; k += 2) {
                if (xor[i] == xor[k + 1]) {
                    ans += k - i;
                }
            }
        }
        return ans;

=======

        int n = arr.length;
        int[] xors = new int[n + 1];
        for (int i = 0; i < n; i++) {
            xors[i + 1] = xors[i] ^ arr[i];
        }
        int ans = 0;
        for (int i = 0; i < n; i++) {
            for (int k = i + 1; k < n; k++) {
                if (xors[i] == xors[k + 1]) {
                    ans += k - i;
                }
            }
        }
        return ans;

=======

        int n = arr.length;
        int[] xor = new int[n + 1];
        for (int i = 0; i < n; ++i) {
            xor[i + 1] = xor[i] ^ arr[i];
        }
        int ans = 0;
        for (int i = 0; i < n; ++i) {
            for (int k = i + 1; k < n; ++k) {
                if (xor[i] == xor[k + 1]) {
                    ans += k - i;
                }
            }
        }
        return ans;

=======

        int n = arr.length;
        int[] xor = new int[n+1];
        for (int i = 0; i < n; i++) {
            xor[i+1] = xor[i] ^ arr[i];
        }
        int ans = 0;
        for (int i = 0; i < n; i++) {
            for (int k = i+1; k < n; k++) {
                if (xor[i] == xor[k+1]) {
                    ans += k-i;
                }
            }
        }
        return ans;

=======

        int ans = 0;
        for (int i = 0; i < arr.length; i++) {
            int xor = arr[i];
            for (int k = i + 1; k < arr.length; k++) {
                xor ^= arr[k];
                if (xor == 0) {
                    ans += k - i;
                }
            }
        }
        return ans;

=======

        int[] dp = new int[arr.length];
        dp[0] = arr[0];
        for (int i = 1; i < arr.length; i++) {
            dp[i] = dp[i - 1] ^ arr[i];
        }
        int res = 0;
        for (int i = 0; i < arr.length; i++) {
            for (int j = i + 1; j < arr.length; j++) {
                for (int k = j; k < arr.length; k++) {
                    int a = (i == 0) ? dp[j - 1] : dp[j - 1] ^ dp[i - 1];
                    int b = dp[k] ^ dp[j - 1];
                    if (a == b) {
                        res++;
                    }
                }
            }
        }
        return res;

=======

        int n = arr.length;
        int[] xor = new int[n + 1];
        xor[0] = 0;
        for (int i = 0; i < n; i++) {
            xor[i + 1] = xor[i] ^ arr[i];
        }
        int ans = 0;
        for (int i = 0; i < n; i++) {
            for (int k = i + 1; k < n; k++) {
                if (xor[i] == xor[k + 1]) {
                    ans += k - i;
                }
            }
        }
        return ans;
