Synthesizing 10/10 solutions (Duplicates hidden)

=======

        List<Integer> result = new ArrayList<>();
        for (int i = 1; i <= 9; i++) {
            int num = i;
            for (int j = i + 1; j <= 9; j++) {
                num = num * 10 + j;
                if (num >= low && num <= high) {
                    result.add(num);
                }
            }
        }
        Collections.sort(result);
        return result;

=======

        List<Integer> res = new ArrayList<>();
        for (int i = 1; i <= 9; i++) {
            int num = i;
            for (int j = i + 1; j <= 9; j++) {
                num = num * 10 + j;
                if (num >= low && num <= high) {
                    res.add(num);
                }
            }
        }
        Collections.sort(res);
        return res;

=======

        List<Integer> res = new ArrayList<>();
        int lowLen = Integer.toString(low).length();
        int highLen = Integer.toString(high).length();
        for (int len = lowLen; len <= highLen; len++) {
            for (int i = 1; i <= 10 - len; i++) {
                int val = 0;
                for (int j = 0; j < len; j++) {
                    val = val * 10 + i + j;
                }
                if (val >= low && val <= high) {
                    res.add(val);
                }
            }
        }
        return res;

=======

        List<Integer> result = new ArrayList<>();
        for (int i = 1; i <= 9; i++) {
            int num = i;
            int j = i + 1;
            while (j <= 9 && num <= high) {
                num = num * 10 + j;
                if (num >= low && num <= high) {
                    result.add(num);
                }
                j++;
            }
        }
        Collections.sort(result);
        return result;

=======

        List<Integer> result = new ArrayList<Integer>();
        for(int i = 1; i <= 9; i++) {
            int num = i;
            for(int j = i + 1; j <= 9; j++) {
                num = num * 10 + j;
                if(num >= low && num <= high) {
                    result.add(num);
                }
            }
        }
        Collections.sort(result);
        return result;

=======

        List<Integer> res = new ArrayList<Integer>();
        for (int i = 1; i < 9; i++) {
            int num = i;
            while (num <= high) {
                if (num >= low) {
                    res.add(num);
                }
                num = num * 10 + ((num % 10) + 1);
            }
        }
        Collections.sort(res);
        return res;

=======

        List<Integer> ans = new ArrayList<Integer>();
        int[] digits = {1,2,3,4,5,6,7,8,9};
        for (int i = 0; i < digits.length; i++) {
            int n = digits[i];
            for (int j = i+1; j < digits.length; j++) {
                n = n * 10 + digits[j];
                if (n >= low && n <= high) {
                    ans.add(n);
                }
            }
        }
        Collections.sort(ans);
        return ans;

=======

        List<Integer> result = new ArrayList<>();
        int i = 1;
        int j = 1;
        int num = 0;
        while (i <= 9) {
            num = num * 10 + i;
            if (i == j) {
                if (num >= low && num <= high) {
                    result.add(num);
                }
                i++;
            } else {
                j++;
            }
            if (j > 9) {
                i++;
                j = i;
                num = 0;
            }
        }
        return result;

=======

        List<Integer> result = new ArrayList<>();
        int[] digits = new int[10];
        int i = 0;
        for (; i < 10; i++) {
            digits[i] = i;
        }
        int j = 0;
        int k = 0;
        int n = 0;
        int l = 0;
        for (; j < 10; j++) {
            for (k = j, l = 0; k < 10; k++, l++) {
                n += digits[k] * Math.pow(10, l);
                if (n >= low && n <= high) {
                    result.add(n);
                }
            }
            n = 0;
        }
        Collections.sort(result);
        return result;
