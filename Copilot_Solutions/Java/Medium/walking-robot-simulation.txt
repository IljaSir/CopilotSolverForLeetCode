Synthesizing 10/10 solutions

=======

        int[][] directions = new int[][]{{0, 1}, {1, 0}, {0, -1}, {-1, 0}};
        Set<String> obstacleSet = new HashSet<>();
        for (int[] obstacle : obstacles) {
            obstacleSet.add(obstacle[0] + " " + obstacle[1]);
        }
        int x = 0, y = 0, direction = 0;
        int ans = 0;
        for (int cmd : commands) {
            if (cmd == -2) {
                direction = (direction + 3) % 4;
            } else if (cmd == -1) {
                direction = (direction + 1) % 4;
            } else {
                for (int k = 0; k < cmd; ++k) {
                    int nx = x + directions[direction][0];
                    int ny = y + directions[direction][1];
                    if (!obstacleSet.contains(nx + " " + ny)) {
                        x = nx;
                        y = ny;
                        ans = Math.max(ans, x * x + y * y);
                    }
                }
            }
        }
        return ans;

=======

        int x = 0, y = 0, d = 0;
        int[][] dirs = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};
        Set<Long> set = new HashSet<>();
        for (int[] obstacle : obstacles) {
            set.add(((long) obstacle[0] + 30000) * 60001 + ((long) obstacle[1] + 30000));
        }
        int res = 0;
        for (int command : commands) {
            if (command == -2) {
                d = (d + 3) % 4;
            } else if (command == -1) {
                d = (d + 1) % 4;
            } else {
                for (int k = 0; k < command; k++) {
                    int nx = x + dirs[d][0];
                    int ny = y + dirs[d][1];
                    if (!set.contains(((long) nx + 30000) * 60001 + ((long) ny + 30000))) {
                        x = nx;
                        y = ny;
                        res = Math.max(res, x * x + y * y);
                    }
                }
            }
        }
        return res;

=======

        Set<Long> set = new HashSet<>();
        for (int[] obstacle: obstacles) {
            long ox = (long)obstacle[0] + 30000;
            long oy = (long)obstacle[1] + 30000;
            set.add((ox << 16) + oy);
        }
        int[][] dirs = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};
        int x = 0, y = 0, di = 0;
        int ans = 0;
        for (int cmd: commands) {
            if (cmd == -2) {
                di = (di + 3) % 4;
            } else if (cmd == -1) {
                di = (di + 1) % 4;
            } else {
                for (int k = 0; k < cmd; ++k) {
                    int nx = x + dirs[di][0];
                    int ny = y + dirs[di][1];
                    long code = (((long)nx + 30000) << 16) + ((long)ny + 30000);
                    if (!set.contains(code)) {
                        x = nx;
                        y = ny;
                        ans = Math.max(ans, x * x + y * y);
                    }
                }
            }
        }
        return ans;

=======

        int x = 0, y = 0, direction = 0;
        int[][] directions = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};
        Set<String> set = new HashSet<String>();
        for (int[] obstacle : obstacles) {
            set.add(obstacle[0] + "," + obstacle[1]);
        }
        int res = 0;
        for (int command : commands) {
            if (command == -1) {
                direction = (direction + 1) % 4;
            } else if (command == -2) {
                direction = (direction + 3) % 4;
            } else {
                for (int i = 0; i < command; i++) {
                    int nextX = x + directions[direction][0];
                    int nextY = y + directions[direction][1];
                    if (!set.contains(nextX + "," + nextY)) {
                        x = nextX;
                        y = nextY;
                        res = Math.max(res, x * x + y * y);
                    } else {
                        break;
                    }
                }
            }
        }
        return res;

=======

        int x = 0;
        int y = 0;
        int dir = 0;
        int max = 0;
        int[][] dirs = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};
        Set<String> set = new HashSet<>();
        for (int[] obstacle : obstacles) {
            set.add(obstacle[0] + " " + obstacle[1]);
        }
        for (int command : commands) {
            if (command == -2) {
                dir = (dir + 3) % 4;
            } else if (command == -1) {
                dir = (dir + 1) % 4;
            } else {
                for (int i = 0; i < command; i++) {
                    int nx = x + dirs[dir][0];
                    int ny = y + dirs[dir][1];
                    String key = nx + " " + ny;
                    if (!set.contains(key)) {
                        x = nx;
                        y = ny;
                        max = Math.max(max, x * x + y * y);
                    }
                }
            }
        }
        return max;

=======

        int x = 0;
        int y = 0;
        int direction = 0;
        int max = 0;
        Set<String> set = new HashSet<>();
        for (int[] obstacle : obstacles) {
            set.add(obstacle[0] + "," + obstacle[1]);
        }
        for (int command : commands) {
            if (command == -1) {
                direction = (direction + 1) % 4;
            } else if (command == -2) {
                direction = (direction + 3) % 4;
            } else {
                for (int i = 0; i < command; i++) {
                    int nx = x + dx[direction];
                    int ny = y + dy[direction];
                    if (!set.contains(nx + "," + ny)) {
                        x = nx;
                        y = ny;
                        max = Math.max(max, x * x + y * y);
                    } else {
                        break;
                    }
                }
            }
        }
        return max;

=======

        int x = 0;
        int y = 0;
        int direction = 0;
        int max = 0;
        Set<String> obstacleSet = new HashSet<>();
        for (int[] obstacle: obstacles) {
            obstacleSet.add(obstacle[0] + " " + obstacle[1]);
        }
        for (int command: commands) {
            if (command == -2) {
                direction = (direction + 3) % 4;
            } else if (command == -1) {
                direction = (direction + 1) % 4;
            } else {
                for (int i = 0; i < command; i++) {
                    int nextX = x;
                    int nextY = y;
                    if (direction == 0) {
                        nextY++;
                    } else if (direction == 1) {
                        nextX++;
                    } else if (direction == 2) {
                        nextY--;
                    } else if (direction == 3) {
                        nextX--;
                    }
                    if (!obstacleSet.contains(nextX + " " + nextY)) {
                        x = nextX;
                        y = nextY;
                        max = Math.max(max, x * x + y * y);
                    } else {
                        break;
                    }
                }
            }
        }
        return max;

=======

        int x = 0;
        int y = 0;
        int direction = 0;
        int max = 0;
        for (int command : commands) {
            if (command == -2) {
                direction = (direction + 1) % 4;
            } else if (command == -1) {
                direction = (direction + 3) % 4;
            } else {
                for (int i = 0; i < command; i++) {
                    int nextX = x + (direction == 1 ? 1 : direction == 3 ? -1 : 0);
                    int nextY = y + (direction == 0 ? 1 : direction == 2 ? -1 : 0);
                    boolean stop = false;
                    for (int[] obstacle : obstacles) {
                        if (obstacle[0] == nextX && obstacle[1] == nextY) {
                            stop = true;
                            break;
                        }
                    }
                    if (stop) {
                        break;
                    }
                    x = nextX;
                    y = nextY;
                    max = Math.max(max, x * x + y * y);
                }
            }
        }
        return max;

=======

        int x = 0, y = 0;
        int max = 0;
        int direction = 0;
        int[][] dirs = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};
        Set<Long> set = new HashSet<>();
        for (int[] obstacle : obstacles) {
            set.add(((long)obstacle[0] << 32) + obstacle[1]);
        }
        for (int cmd : commands) {
            if (cmd == -1) {
                direction = (direction + 1) % 4;
            } else if (cmd == -2) {
                direction = (direction + 3) % 4;
            } else {
                for (int i = 0; i < cmd; i++) {
                    int nx = x + dirs[direction][0];
                    int ny = y + dirs[direction][1];
                    if (!set.contains(((long)nx << 32) + ny)) {
                        x = nx;
                        y = ny;
                        max = Math.max(max, x * x + y * y);
                    }
                }
            }
        }
        return max;

=======

        int[] head = new int[]{0, 1};
        int[] position = new int[]{0, 0};
        int max = 0;
        Set<String> obstacleSet = new HashSet<>();
        for (int[] obstacle: obstacles) {
            obstacleSet.add(obstacle[0]+","+obstacle[1]);
        }
        for (int command: commands) {
            if (command == -1) {
                head = new int[]{-head[1], head[0]};
            } else if (command == -2) {
                head = new int[]{head[1], -head[0]};
            } else {
                for (int i = 0; i < command; i++) {
                    int[] nextPosition = new int[]{position[0] + head[0], position[1] + head[1]};
                    if (obstacleSet.contains(nextPosition[0]+","+nextPosition[1])) {
                        break;
                    }
                    position = nextPosition;
                    max = Math.max(max, position[0]*position[0]+position[1]*position[1]);
                }
            }
        }
        return max;
