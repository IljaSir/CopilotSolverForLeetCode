Synthesizing 10/10 solutions (Duplicates hidden)

=======

        Arrays.sort(piles);
        int n = piles.length;
        int res = 0;
        for (int i = n - 2; i >= n / 3; i -= 2) {
            res += piles[i];
        }
        return res;

=======

        Arrays.sort(piles);
        int n = piles.length;
        int ans = 0;
        for (int i = n - 2; i >= n / 3; i -= 2) {
            ans += piles[i];
        }
        return ans;

=======

        Arrays.sort(piles);
        int n = piles.length;
        int ans = 0;
        for (int i = n / 3; i < n; i += 2) {
            ans += piles[i];
        }
        return ans;

=======

        Arrays.sort(piles);
        int sum = 0;
        int index = piles.length - 2;
        for (int i = 0; i < piles.length / 3; i++) {
            sum += piles[index];
            index -= 2;
        }
        return sum;

=======

        Arrays.sort(piles);
        int res = 0;
        int n = piles.length;
        for (int i = 0; i < n / 3; i++) {
            res += piles[n - 2 * i - 2];
        }
        return res;

=======

        Arrays.sort(piles);
        int n = piles.length;
        int sum = 0;
        for (int i = 0; i < n / 3; i++) {
            sum += piles[n - 2 - i * 2];
        }
        return sum;

=======

        int n = piles.length;
        Arrays.sort(piles);
        int i = 0, j = n - 2;
        int sum = 0;
        while (i < j) {
            sum += piles[j];
            i++;
            j -= 2;
        }
        return sum;

=======

        int sum = 0;
        Arrays.sort(piles);
        int n = piles.length;
        int i = n - 2;
        while(i >= n/3) {
            sum += piles[i];
            i -= 2;
        }
        return sum;
