Synthesizing 10/10 solutions

=======

        int n = pattern.length();
        int[] res = new int[n + 1];
        int left = 0;
        int right = n;
        for (int i = 0; i < n; i++) {
            if (pattern.charAt(i) == 'I') {
                res[i] = left++;
            } else {
                res[i] = right--;
            }
        }
        res[n] = left;
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < n + 1; i++) {
            sb.append(res[i]);
        }
        return sb.toString();

=======

        int n = pattern.length();
        StringBuilder sb = new StringBuilder();
        int start = 0;
        int end = n;
        for (int i = 0; i < n; i++) {
            if (pattern.charAt(i) == 'I') {
                sb.append(start++);
            } else {
                sb.append(end--);
            }
        }
        sb.append(start);
        return sb.toString();

=======

        int n = pattern.length();
        int[] ans = new int[n + 1];
        int min = 1;
        int max = n + 1;
        for (int i = 0; i < n; i++) {
            if (pattern.charAt(i) == 'I') {
                ans[i] = min++;
            } else {
                ans[i] = max--;
            }
        }
        ans[n] = min;
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < ans.length; i++) {
            sb.append(ans[i]);
        }
        return sb.toString();

=======

        int n = pattern.length();
        int[] nums = new int[n + 1];
        int min = 0;
        int max = n;
        for (int i = 0; i < n; i++) {
            if (pattern.charAt(i) == 'I') {
                nums[i] = min;
                min++;
            } else {
                nums[i] = max;
                max--;
            }
        }
        nums[n] = min;
        StringBuilder sb = new StringBuilder();
        for (int num : nums) {
            sb.append(num);
        }
        return sb.toString();

=======

        int n = pattern.length();
        int[] num = new int[n + 1];
        int low = 1, high = n + 1;
        for (int i = 0; i < n; i++) {
            if (pattern.charAt(i) == 'I') {
                num[i] = low;
                low++;
            } else {
                num[i] = high;
                high--;
            }
        }
        num[n] = low;
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i <= n; i++) {
            sb.append(num[i]);
        }
        return sb.toString();

=======

        int n = pattern.length();
        int[] num = new int[n+1];
        for (int i = 0; i <= n; i++) {
            num[i] = i;
        }
        int i = 0;
        while (i < n) {
            int j = i;
            while (j < n && pattern.charAt(j) == 'D') {
                j++;
            }
            reverse(num, i, j);
            i = j + 1;
        }
        StringBuilder sb = new StringBuilder();
        for (int k : num) {
            sb.append(k);
        }
        return sb.toString();
    }
    
    private void reverse(int[] num, int i, int j) {
        while (i < j) {
            int tmp = num[i];
            num[i] = num[j];
            num[j] = tmp;
            i++;
            j--;
        }

=======

        int[] result = new int[pattern.length()+1];
        int max = pattern.length();
        int min = 1;
        for (int i = 0; i < pattern.length(); i++) {
            if (pattern.charAt(i) == 'I') {
                result[i] = min;
                min++;
            } else {
                result[i] = max;
                max--;
            }
        }
        result[pattern.length()] = min;
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < result.length; i++) {
            sb.append(result[i]);
        }
        return sb.toString();

=======

        int n = pattern.length();
        int[] res = new int[n+1];
        int small = 0;
        int big = n;
        for (int i = 0; i < n; i++) {
            if (pattern.charAt(i) == 'I') {
                res[i] = small;
                small++;
            } else {
                res[i] = big;
                big--;
            }
        }
        res[n] = small;
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i <= n; i++) {
            sb.append(res[i]);
        }
        return sb.toString();

=======

        int n = pattern.length();
        int[] nums = new int[n+1];
        for (int i = 0; i <= n; i++) {
            nums[i] = i;
        }
        int[] res = new int[n+1];
        int start = 0;
        int end = n;
        for (int i = 0; i < n; i++) {
            if (pattern.charAt(i) == 'I') {
                res[i] = nums[start];
                start++;
            } else {
                res[i] = nums[end];
                end--;
            }
        }
        res[n] = nums[start];
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i <= n; i++) {
            sb.append(res[i]);
        }
        return sb.toString();

=======

        int n = pattern.length();
        int[] res = new int[n+1];
        int i = 0;
        int max = n;
        int min = 1;
        while (i < n) {
            if (pattern.charAt(i) == 'I') {
                res[i] = min++;
            } else {
                res[i] = max--;
            }
            i++;
        }
        res[i] = min;
        StringBuilder sb = new StringBuilder();
        for (int j = 0; j <= n; j++) {
            sb.append(res[j]);
        }
        return sb.toString();
