Synthesizing 9/10 solutions

=======

        int m = nums.size();
        int n = 0;
        for (List<Integer> list : nums) {
            n = Math.max(n, list.size());
        }
        int[] res = new int[m * n];
        int[] idx = new int[m];
        int i = 0;
        boolean up = true;
        for (int j = 0; j < n; j++) {
            for (int k = 0; k < m; k++) {
                if (up) {
                    int x = k;
                    int y = j - k;
                    if (y >= 0 && y < nums.get(x).size()) {
                        res[i++] = nums.get(x).get(y);
                    }
                } else {
                    int x = m - k - 1;
                    int y = j - (m - k - 1);
                    if (y >= 0 && y < nums.get(x).size()) {
                        res[i++] = nums.get(x).get(y);
                    }
                }
            }
            up = !up;
        }
        return res;

=======

        int m = nums.size();
        int n = 0;
        for (List<Integer> list : nums) {
            n = Math.max(n, list.size());
        }
        int[] ans = new int[m * n];
        int index = 0;
        for (int i = 0; i < m + n - 1; i++) {
            int r = i < n ? 0 : i - n + 1;
            int c = i < n ? i : n - 1;
            while (r < m && c >= 0) {
                if (nums.get(r).size() > c) {
                    ans[index++] = nums.get(r).get(c);
                }
                r++;
                c--;
            }
        }
        return ans;

=======

        int m = nums.size();
        int n = 0;
        for (List<Integer> list : nums) {
            n = Math.max(n, list.size());
        }
        int[] result = new int[m * n];
        int i = 0;
        int j = 0;
        int k = 0;
        while (i < m && j < n) {
            int p = i;
            int q = j;
            while (p >= 0 && q >= 0) {
                if (p < nums.size() && q < nums.get(p).size()) {
                    result[k++] = nums.get(p).get(q);
                }
                p--;
                q--;
            }
            if (i == m - 1) {
                j++;
            } else {
                i++;
            }
        }
        return result;

=======

        int n = nums.size();
        int m = 0;
        for (List<Integer> list : nums) {
            m = Math.max(m, list.size());
        }
        int[][] grid = new int[n][m];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < nums.get(i).size(); j++) {
                grid[i][j] = nums.get(i).get(j);
            }
        }
        int[] ans = new int[n * m];
        int idx = 0;
        for (int i = 0; i < n + m - 1; i++) {
            if (i % 2 == 0) {
                for (int j = Math.min(i, n - 1); j >= 0; j--) {
                    int k = i - j;
                    if (k >= m) {
                        break;
                    }
                    ans[idx++] = grid[j][k];
                }
            } else {
                for (int j = 0; j <= Math.min(i, n - 1); j++) {
                    int k = i - j;
                    if (k >= m) {
                        break;
                    }
                    ans[idx++] = grid[j][k];
                }
            }
        }
        return ans;

=======

        int n = nums.size();
        int m = 0;
        for (List<Integer> num : nums) {
            m = Math.max(m, num.size());
        }
        int[][] matrix = new int[n][m];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < nums.get(i).size(); j++) {
                matrix[i][j] = nums.get(i).get(j);
            }
        }
        int[] ans = new int[n * m];
        int index = 0;
        for (int i = 0; i < n + m - 1; i++) {
            int r = Math.min(i, n - 1);
            int c = i - r;
            while (r >= 0 && c < m) {
                ans[index++] = matrix[r][c];
                r--;
                c++;
            }
        }
        return ans;

=======

        int max = 0;
        for (List<Integer> list : nums) {
            max += list.size();
        }
        int[] res = new int[max];
        int i = 0;
        int j = 0;
        int k = 0;
        while (k < max) {
            if (i < nums.size() && j < nums.get(i).size()) {
                res[k++] = nums.get(i).get(j);
                i--;
                j++;
            } else if (i == nums.size()) {
                i--;
                j += 2;
            } else {
                i++;
                if (j == nums.get(i).size()) {
                    j--;
                }
            }
            if (i < 0) {
                i = 0;
                j++;
            }
        }
        return res;

=======

        int n = nums.size();
        int max = 0;
        for (List<Integer> list : nums) {
            max += list.size();
        }
        int[] result = new int[max];
        int index = 0;
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < nums.get(i).size(); ++j) {
                result[index++] = nums.get(i).get(j);
            }
        }
        return result;

=======

        int n = nums.size();
        int m = 0;
        for (var l : nums) {
            m = Math.max(m, l.size());
        }
        var q = new PriorityQueue<int[]>(new Comparator<int[]>() {
            @Override
            public int compare(int[] o1, int[] o2) {
                if (o1[0] != o2[0]) {
                    return o1[0] - o2[0];
                }
                return o1[1] - o2[1];
            }
        });
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < nums.get(i).size(); j++) {
                q.offer(new int[] {i + j, i});
            }
        }
        int[] ans = new int[q.size()];
        int i = 0;
        while (!q.isEmpty()) {
            int[] p = q.poll();
            ans[i++] = nums.get(p[1]).get(p[0] - p[1]);
        }
        return ans;

=======

        // use a map to store the sum of row and col
        // when row + col = 0, then it's the first row
        // when row + col = 1, then it's the second row
        // when row + col = n, then it's the last row
        // when row + col = n - 1, then it's the last second row
        // so the sum of row and col is the key of the map
        Map<Integer, List<Integer>> map = new HashMap<>();
        int max = 0;
        for (int i = 0; i < nums.size(); i++) {
            for (int j = 0; j < nums.get(i).size(); j++) {
                int sum = i + j;
                if (!map.containsKey(sum)) {
                    map.put(sum, new ArrayList<>());
                }
                map.get(sum).add(nums.get(i).get(j));
                max = Math.max(max, sum);
            }
        }
        int[] res = new int[nums.size()];
        int index = 0;
        for (int i = 0; i <= max; i++) {
            List<Integer> list = map.get(i);
            for (int j = list.size() - 1; j >= 0; j--) {
                res[index++] = list.get(j);
            }
        }
        return res;
