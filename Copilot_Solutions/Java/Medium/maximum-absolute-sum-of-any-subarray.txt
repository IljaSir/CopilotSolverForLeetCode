Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int max = 0;
        int min = 0;
        int sum = 0;
        for (int i = 0; i < nums.length; i++) {
            sum += nums[i];
            max = Math.max(max, sum);
            min = Math.min(min, sum);
        }
        return max - min;

=======

        int max = 0;
        int min = 0;
        int sum = 0;
        for (int n : nums) {
            sum += n;
            max = Math.max(max, sum);
            min = Math.min(min, sum);
        }
        return max - min;

=======

        int max = nums[0];
        int min = nums[0];
        int sum = nums[0];
        for (int i = 1; i < nums.length; i++) {
            sum += nums[i];
            if (sum > max) {
                max = sum;
            }
            if (sum < min) {
                min = sum;
            }
        }
        return Math.max(max, -min);

=======

        int n = nums.length;
        int[] dp = new int[n];
        dp[0] = nums[0];
        for (int i = 1; i < n; i++) {
            dp[i] = Math.max(dp[i - 1] + nums[i], nums[i]);
        }
        int max = dp[0];
        int min = dp[0];
        for (int i = 1; i < n; i++) {
            max = Math.max(max, dp[i]);
            min = Math.min(min, dp[i]);
        }
        return max - min;

=======

        int max = 0;
        int min = 0;
        int sum = 0;
        for (int num: nums) {
            sum += num;
            min = Math.min(min, sum);
            max = Math.max(max, sum);
        }
        return max - min;

=======

        int n = nums.length;
        int[] pre = new int[n];
        int[] suf = new int[n];
        pre[0] = nums[0];
        suf[n - 1] = nums[n - 1];
        for (int i = 1; i < n; i++) {
            pre[i] = pre[i - 1] + nums[i];
        }
        for (int i = n - 2; i >= 0; i--) {
            suf[i] = suf[i + 1] + nums[i];
        }
        int max = Math.max(Math.abs(pre[0]), Math.abs(suf[0]));
        int min = Math.min(Math.abs(pre[0]), Math.abs(suf[0]));
        for (int i = 1; i < n; i++) {
            max = Math.max(max, Math.abs(pre[i]));
            min = Math.min(min, Math.abs(pre[i]));
            max = Math.max(max, Math.abs(suf[i]));
            min = Math.min(min, Math.abs(suf[i]));
        }
        return max;

=======

        int sum = 0;
        int max = 0;
        for (int num : nums) {
            sum += num;
            max = Math.max(max, Math.abs(sum));
            if (sum < 0) {
                sum = 0;
            }
        }
        return max;

=======

        int maxSum = 0;
        int minSum = 0;
        int sum = 0;
        int max = 0;
        for (int i = 0; i < nums.length; i++) {
            sum += nums[i];
            max = Math.max(max, Math.abs(sum - minSum));
            max = Math.max(max, Math.abs(sum - maxSum));
            maxSum = Math.max(maxSum, sum);
            minSum = Math.min(minSum, sum);
        }
        return max;

=======

        int maxSum = 0;
        int max = 0;
        int minSum = 0;
        int min = 0;
        for (int i = 0; i < nums.length; ++i) {
            maxSum += nums[i];
            minSum += nums[i];
            max = Math.max(max, maxSum);
            min = Math.min(min, minSum);
            if (maxSum < 0) maxSum = 0;
            if (minSum > 0) minSum = 0;
        }
        return Math.max(max, -min);
