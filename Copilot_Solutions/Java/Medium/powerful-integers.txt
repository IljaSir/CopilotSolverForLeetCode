Synthesizing 10/10 solutions (Duplicates hidden)

=======

        Set<Integer> set = new HashSet<>();
        for (int i = 1; i < bound; i *= x) {
            for (int j = 1; i + j <= bound; j *= y) {
                set.add(i + j);
                if (y == 1) {
                    break;
                }
            }
            if (x == 1) {
                break;
            }
        }
        return new ArrayList<>(set);

=======

        Set<Integer> set = new HashSet<>();
        for (int i = 1; i < bound; i *= x) {
            for (int j = 1; i + j <= bound; j *= y) {
                set.add(i + j);
                if (y == 1) break;
            }
            if (x == 1) break;
        }
        return new ArrayList<>(set);

=======

        Set<Integer> set = new HashSet<>();
        for (int i = 0; i < 20 && Math.pow(x, i) <= bound; i++) {
            for (int j = 0; j < 20 && Math.pow(y, j) <= bound; j++) {
                int sum = (int) (Math.pow(x, i) + Math.pow(y, j));
                if (sum <= bound) {
                    set.add(sum);
                }
            }
        }
        return new ArrayList<>(set);

=======

        Set<Integer> result = new HashSet<>();
        for (int i = 0; Math.pow(x, i) <= bound; i++) {
            for (int j = 0; Math.pow(y, j) <= bound; j++) {
                int sum = (int) (Math.pow(x, i) + Math.pow(y, j));
                if (sum <= bound) {
                    result.add(sum);
                }
            }
        }
        return new ArrayList<>(result);

=======

        Set<Integer> set = new HashSet<>();
        for (int i = 0; i < 20; i++) {
            for (int j = 0; j < 20; j++) {
                int val = (int) (Math.pow(x, i) + Math.pow(y, j));
                if (val <= bound) {
                    set.add(val);
                }
            }
        }
        return new ArrayList<>(set);

=======

        Set<Integer> set = new HashSet<>();
        int i = 0;
        while (Math.pow(x, i) + 1 <= bound) {
            int j = 0;
            while (Math.pow(x, i) + Math.pow(y, j) <= bound) {
                set.add((int) (Math.pow(x, i) + Math.pow(y, j)));
                if (y == 1) {
                    break;
                }
                j++;
            }
            if (x == 1) {
                break;
            }
            i++;
        }
        return new ArrayList<>(set);

=======

        Set<Integer> set = new HashSet<>();
        for (int i = 0; i < bound; i++) {
            for (int j = 0; j < bound; j++) {
                int val = (int) Math.pow(x, i) + (int) Math.pow(y, j);
                if (val > bound) {
                    break;
                }
                set.add(val);
            }
            if (x == 1) {
                break;
            }
        }
        return new ArrayList<>(set);

=======

        List<Integer> result = new ArrayList<>();
        int i = 0;
        int j = 0;
        int sum = 0;
        while (sum <= bound) {
            sum = (int) (Math.pow(x, i) + Math.pow(y, j));
            if (sum <= bound && !result.contains(sum)) {
                result.add(sum);
            }
            if (x == 1) {
                break;
            }
            if (x == 1 && y == 1) {
                break;
            }
            if (y == 1) {
                i++;
                j = 0;
                continue;
            }
            if (j < bound) {
                j++;
            } else {
                i++;
                j = 0;
            }
        }
        return result;

=======

        List<Integer> list = new ArrayList();
        int i = 0;
        int j = 0;
        int result = 0;
        while (true) {
            result = (int)Math.pow(x, i) + (int)Math.pow(y, j);
            if (result > bound) {
                break;
            }
            if (!list.contains(result)) {
                list.add(result);
            }
            if (y == 1) {
                break;
            }
            j++;
            if (Math.pow(y, j) > bound) {
                i++;
                j = 0;
            }
            if (Math.pow(x, i) > bound) {
                break;
            }
        }
        return list;
