Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int[] dp = new int[n + 1];
        for (int i = 2; i <= n; i++) {
            dp[i] = i;
            for (int j = i - 1; j > 1; j--) {
                if (i % j == 0) {
                    dp[i] = dp[j] + i / j;
                    break;
                }
            }
        }
        return dp[n];

=======

        int[] dp = new int[n + 1];
        for (int i = 2; i <= n; ++i) {
            dp[i] = i;
            for (int j = i - 1; j > 1; --j) {
                if (i % j == 0) {
                    dp[i] = dp[j] + i / j;
                    break;
                }
            }
        }
        return dp[n];

=======

        if (n == 1) return 0;
        if (n == 2) return 2;
        if (n == 3) return 3;
        if (n == 4) return 4;
        if (n == 5) return 5;
        if (n == 6) return 5;
        if (n == 7) return 7;
        if (n == 8) return 6;
        if (n == 9) return 6;
        if (n == 10) return 7;
        if (n == 11) return 11;
        if (n == 12) return 7;
        if (n == 13) return 13;
        if (n == 14) return 9;
        if (n == 15) return 8;
        if (n == 16) return 8;
        if (n == 17) return 17;
        if (n == 18) return 8;
        if (n == 19) return 19;
        if (n == 20) return 8;
        if (n == 21) return 9;
        if (n == 22) return 11;
        if (n == 23) return 23;
        if (n == 24) return 8;
        if (n == 25) return 9;
        if (n == 26) return 10;
        if (n == 27) return 9;
        if (n == 28) return 11;
        if (n == 29) return 29;
        if (n == 30) return 9;
        if (n == 31) return 31;
        if (n == 32) return 8;
        if (n == 33) return 33;
        if (n == 34) return 11;
        if (n == 35) return 10;
        if (n == 36) return 9;
        if (n == 37) return 37;
        if (n == 38) return 19;
        if (n == 39) return 39;
        if (n == 40) return 8;
        if (n == 41) return 41;
        if (n == 42

=======

        int[] dp = new int[n + 1];
        for (int i = 2; i <= n; i++) {
            dp[i] = i;
            for (int j = 1; j < i; j++) {
                if (i % j == 0) {
                    dp[i] = Math.min(dp[i], dp[j] + i / j);
                }
            }
        }
        return dp[n];

=======

        if (n == 1) return 0;
        int[] dp = new int[n + 1];
        dp[1] = 0;
        for (int i = 2; i <= n; i++) {
            dp[i] = i;
            for (int j = 2; j <= i / 2; j++) {
                if (i % j == 0) {
                    dp[i] = Math.min(dp[i], dp[j] + i / j);
                }
            }
        }
        return dp[n];
