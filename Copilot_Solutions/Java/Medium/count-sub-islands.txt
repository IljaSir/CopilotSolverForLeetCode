Synthesizing 10/10 solutions

=======

        int count = 0;
        for (int i = 0; i < grid2.length; i++) {
            for (int j = 0; j < grid2[i].length; j++) {
                if (grid2[i][j] == 1) {
                    if (dfs(grid1, grid2, i, j)) {
                        count++;
                    }
                }
            }
        }
        return count;
    }
    
    private boolean dfs(int[][] grid1, int[][] grid2, int i, int j) {
        if (i < 0 || i >= grid2.length || j < 0 || j >= grid2[i].length || grid2[i][j] == 0) {
            return true;
        }
        grid2[i][j] = 0;
        boolean ret = grid1[i][j] == 1 && dfs(grid1, grid2, i - 1, j) && dfs(grid1, grid2, i + 1, j) && dfs(grid1, grid2, i, j - 1) && dfs(grid1, grid2, i, j + 1);
        return ret;

=======

        int count = 0;
        for (int i = 0; i < grid1.length; i++) {
            for (int j = 0; j < grid1[0].length; j++) {
                if (grid2[i][j] == 1) {
                    if (dfs(grid1, grid2, i, j)) {
                        count++;
                    }
                }
            }
        }
        return count;
    }
    
    private boolean dfs(int[][] grid1, int[][] grid2, int i, int j) {
        if (i < 0 || i >= grid1.length || j < 0 || j >= grid1[0].length || grid2[i][j] == 0) {
            return true;
        }
        if (grid1[i][j] == 0) {
            return false;
        }
        grid2[i][j] = 0;
        boolean left = dfs(grid1, grid2, i, j - 1);
        boolean right = dfs(grid1, grid2, i, j + 1);
        boolean up = dfs(grid1, grid2, i - 1, j);
        boolean down = dfs(grid1, grid2, i + 1, j);
        return left && right && up && down;

=======

        int m = grid1.length;
        int n = grid1[0].length;
        int count = 0;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (grid2[i][j] == 1) {
                    if (dfs(grid1, grid2, i, j)) {
                        count++;
                    }
                }
            }
        }
        return count;
    }
    
    private boolean dfs(int[][] grid1, int[][] grid2, int i, int j) {
        int m = grid1.length;
        int n = grid1[0].length;
        if (i < 0 || i >= m || j < 0 || j >= n || grid2[i][j] == 0) {
            return true;
        }
        grid2[i][j] = 0;
        boolean res = grid1[i][j] == 1;
        res &= dfs(grid1, grid2, i - 1, j);
        res &= dfs(grid1, grid2, i + 1, j);
        res &= dfs(grid1, grid2, i, j - 1);
        res &= dfs(grid1, grid2, i, j + 1);
        return res;

=======

        int m = grid1.length;
        int n = grid1[0].length;
        int count = 0;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (grid2[i][j] == 1) {
                    if (dfs(grid1, grid2, i, j)) {
                        count++;
                    }
                }
            }
        }
        return count;
    }

    private boolean dfs(int[][] grid1, int[][] grid2, int i, int j) {
        int m = grid1.length;
        int n = grid1[0].length;
        if (i < 0 || i >= m || j < 0 || j >= n || grid2[i][j] == 0) {
            return true;
        }
        grid2[i][j] = 0;
        boolean res = grid1[i][j] == 1;
        res &= dfs(grid1, grid2, i + 1, j);
        res &= dfs(grid1, grid2, i - 1, j);
        res &= dfs(grid1, grid2, i, j + 1);
        res &= dfs(grid1, grid2, i, j - 1);
        return res;

=======

        int m = grid1.length;
        int n = grid1[0].length;
        int count = 0;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (grid2[i][j] == 1) {
                    if (dfs(grid1, grid2, i, j)) {
                        count++;
                    }
                }
            }
        }
        return count;
    }
    
    private boolean dfs(int[][] grid1, int[][] grid2, int i, int j) {
        int m = grid1.length;
        int n = grid1[0].length;
        if (i < 0 || i >= m || j < 0 || j >= n) {
            return true;
        }
        if (grid2[i][j] == 0) {
            return true;
        }
        if (grid1[i][j] == 0) {
            return false;
        }
        grid2[i][j] = 0;
        boolean left = dfs(grid1, grid2, i, j - 1);
        boolean right = dfs(grid1, grid2, i, j + 1);
        boolean up = dfs(grid1, grid2, i - 1, j);
        boolean down = dfs(grid1, grid2, i + 1, j);
        return left && right && up && down;

=======

        int m = grid1.length;
        int n = grid1[0].length;
        boolean[][] visited = new boolean[m][n];
        int count = 0;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (grid2[i][j] == 1 && !visited[i][j]) {
                    if (dfs(grid1, grid2, visited, i, j)) {
                        count++;
                    }
                }
            }
        }
        return count;
    }
    
    private boolean dfs(int[][] grid1, int[][] grid2, boolean[][] visited, int row, int col) {
        int m = grid1.length;
        int n = grid1[0].length;
        if (row < 0 || row >= m || col < 0 || col >= n || visited[row][col]) {
            return true;
        }
        visited[row][col] = true;
        if (grid2[row][col] == 0) {
            return false;
        }
        boolean up = dfs(grid1, grid2, visited, row - 1, col);
        boolean down = dfs(grid1, grid2, visited, row + 1, col);
        boolean left = dfs(grid1, grid2, visited, row, col - 1);
        boolean right = dfs(grid1, grid2, visited, row, col + 1);
        return up && down && left && right && grid1[row][col] == 1;

=======

        int m = grid1.length;
        int n = grid1[0].length;
        int ans = 0;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (grid2[i][j] == 1) {
                    if (dfs(grid1, grid2, i, j, m, n)) {
                        ans++;
                    }
                }
            }
        }
        return ans;
    }
    private boolean dfs(int[][] grid1, int[][] grid2, int i, int j, int m, int n) {
        if (i < 0 || i >= m || j < 0 || j >= n || grid2[i][j] == 0) {
            return true;
        }
        if (grid1[i][j] == 0) {
            return false;
        }
        grid2[i][j] = 0;
        boolean ans = dfs(grid1, grid2, i - 1, j, m, n) && dfs(grid1, grid2, i + 1, j, m, n) && dfs(grid1, grid2, i, j - 1, m, n) && dfs(grid1, grid2, i, j + 1, m, n);
        return ans;

=======

        int count = 0;
        for(int i = 0; i < grid2.length; i++) {
            for(int j = 0; j < grid2[0].length; j++) {
                if(grid2[i][j] == 1) {
                    if(dfs(grid1, grid2, i, j)) {
                        count++;
                    }
                }
            }
        }
        return count;
    }
    
    public boolean dfs(int[][] grid1, int[][] grid2, int i, int j) {
        if(i < 0 || j < 0 || i >= grid2.length || j >= grid2[0].length || grid2[i][j] == 0) {
            return true;
        }
        grid2[i][j] = 0;
        boolean res = grid1[i][j] == 1;
        res &= dfs(grid1, grid2, i - 1, j);
        res &= dfs(grid1, grid2, i + 1, j);
        res &= dfs(grid1, grid2, i, j - 1);
        res &= dfs(grid1, grid2, i, j + 1);
        return res;

=======

        int n = grid1.length;
        int m = grid1[0].length;
        int count = 0;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (grid2[i][j] == 1) {
                    boolean subIsland = dfs(grid1, grid2, i, j);
                    if (subIsland) {
                        count++;
                    }
                }
            }
        }
        return count;
    }
    
    private boolean dfs(int[][] grid1, int[][] grid2, int i, int j) {
        int n = grid1.length;
        int m = grid1[0].length;
        if (i < 0 || i >= n || j < 0 || j >= m || grid2[i][j] == 0) {
            return true;
        }
        if (grid1[i][j] == 0) {
            return false;
        }
        grid2[i][j] = 0;
        boolean left = dfs(grid1, grid2, i, j - 1);
        boolean right = dfs(grid1, grid2, i, j + 1);
        boolean up = dfs(grid1, grid2, i - 1, j);
        boolean down = dfs(grid1, grid2, i + 1, j);
        return left && right && up && down;

=======

        if (grid1 == null || grid2 == null) {
            return 0;
        }
        int m = grid1.length;
        int n = grid1[0].length;
        
        int[][] visited = new int[m][n];
        int count = 0;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (grid2[i][j] == 1 && visited[i][j] == 0) {
                    if (dfs(grid1, grid2, visited, i, j)) {
                        count++;
                    }
                }
            }
        }
        return count;
    }
    
    private boolean dfs(int[][] grid1, int[][] grid2, int[][] visited, int i, int j) {
        if (i < 0 || i >= grid1.length || j < 0 || j >= grid1[0].length) {
            return false;
        }
        if (grid2[i][j] == 0) {
            return true;
        }
        if (grid1[i][j] == 0) {
            return false;
        }
        if (visited[i][j] == 1) {
            return true;
        }
        visited[i][j] = 1;
        return dfs(grid1, grid2, visited, i - 1, j) && dfs(grid1, grid2, visited, i + 1, j) && dfs(grid1, grid2, visited, i, j - 1) && dfs(grid1, grid2, visited, i, j + 1);
