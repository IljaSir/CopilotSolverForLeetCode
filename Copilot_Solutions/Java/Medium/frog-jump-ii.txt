Synthesizing 10/10 solutions

=======

        int n = stones.length;
        int[][] dp = new int[n][n];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                dp[i][j] = Integer.MAX_VALUE;
            }
        }
        dp[0][0] = 0;
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                int jump = stones[j] - stones[i];
                if (jump > dp[i][i] + 1) {
                    break;
                }
                dp[i][j] = Math.min(dp[i][j], jump);
                for (int k = i + 1; k < j; k++) {
                    if (stones[j] - stones[k] <= dp[i][k] + 1) {
                        dp[k][j] = Math.min(dp[k][j], stones[j] - stones[k]);
                    }
                }
            }
        }
        int ans = Integer.MAX_VALUE;
        for (int i = 0; i < n; i++) {
            ans = Math.min(ans, dp[i][n - 1]);
        }
        return ans;

=======

        int n = stones.length;
        int[] dp = new int[n];
        Arrays.fill(dp, Integer.MAX_VALUE);
        dp[0] = 0;
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n && stones[j] <= stones[i] + n - 1; j++) {
                int cost = Math.max(dp[i], stones[j] - stones[i]);
                dp[j] = Math.min(dp[j], cost);
            }
        }
        return dp[n - 1];

=======

        int n = stones.length;
        int[] dp = new int[n];
        Arrays.fill(dp, Integer.MAX_VALUE);
        dp[0] = 0;
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                if (stones[j] - stones[i] > i + 1) {
                    break;
                }
                dp[j] = Math.min(dp[j], dp[i] + stones[j] - stones[i]);
            }
        }
        return dp[n - 1];

=======

        int n = stones.length;
        int[] dp = new int[n];
        Arrays.fill(dp, Integer.MAX_VALUE);
        dp[0] = 0;
        for (int i = 0; i < n - 1; ++i) {
            for (int j = i + 1; j < n && stones[j] - stones[i] <= stones[n - 1] - stones[i]; ++j) {
                int cost = Math.max(dp[i], stones[j] - stones[i]);
                dp[j] = Math.min(dp[j], cost);
            }
        }
        return dp[n - 1];

=======

        int n = stones.length;
        int[] dp = new int[n];
        Arrays.fill(dp, Integer.MAX_VALUE);
        dp[0] = 0;
        for (int i = 1; i < n; i++) {
            for (int j = i - 1; j >= 0; j--) {
                if (stones[i] - stones[j] <= i - j) {
                    dp[i] = Math.min(dp[i], dp[j] + (stones[i] - stones[j]));
                    if (dp[i] == 0) {
                        break;
                    }
                } else {
                    break;
                }
            }
        }
        return dp[n - 1];

=======

        int n = stones.length;
        int max = 0;
        for (int i = 1; i < n; i++) {
            max = Math.max(max, stones[i] - stones[i - 1]);
        }
        return max;
    }

    public int minCost(int[] stones) {
        int n = stones.length;
        int maxJump = maxJump(stones);
        int[][] dp = new int[n][n];
        for (int i = 0; i < n; i++) {
            Arrays.fill(dp[i], Integer.MAX_VALUE);
        }
        dp[0][0] = 0;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (dp[i][j] == Integer.MAX_VALUE) {
                    continue;
                }
                for (int k = i + 1; k < n; k++) {
                    int jump = stones[k] - stones[i];
                    if (jump < j - 1) {
                        continue;
                    }
                    if (jump > j + 1) {
                        break;
                    }
                    dp[k][jump] = Math.min(dp[k][jump], dp[i][j] + (jump == j - 1 ? 0 : 1));
                }
            }
        }
        int ans = Integer.MAX_VALUE;
        for (int i = 0; i < n; i++) {
            ans = Math.min(ans, dp[n - 1][i]);
        }
        return ans;

=======

        int len = stones.length;
        int[] dp = new int[len];
        Arrays.fill(dp, Integer.MAX_VALUE);
        dp[0] = 0;
        for (int i = 0; i < len; i++) {
            for (int j = i + 1; j < len; j++) {
                if (stones[j] - stones[i] > dp[i] + 1) {
                    break;
                }
                dp[j] = Math.min(dp[j], Math.max(dp[i], stones[j] - stones[i]));
            }
        }
        return dp[len - 1];

=======

        int n = stones.length;
        int[] dp = new int[n];
        Arrays.fill(dp, Integer.MAX_VALUE);
        dp[0] = 0;
        int k = 1;
        for (int i = 0; i < n; i++) {
            while (k < n && stones[k] - stones[i] <= i) k++;
            for (int j = k - 1; j > i; j--) {
                int cost = Math.max(dp[i], stones[j] - stones[i]);
                if (cost < dp[j]) {
                    dp[j] = cost;
                } else {
                    break;
                }
            }
        }
        return dp[n - 1];

=======

        int n = stones.length;
        int[] dp = new int[n];
        int[] next = new int[n];
        Arrays.fill(next, n);
        for (int i = n - 1; i >= 0; --i) {
            for (int j = i + 1; j < n; ++j) {
                if (stones[j] - stones[i] > j - i) break;
                next[i] = j;
                if (next[j] == n) continue;
                dp[i] = Math.max(dp[i], Math.min(dp[j], stones[j] - stones[i]));
            }
        }
        return dp[0] + 1;

=======

        int n = stones.length;
        int[] dp = new int[n];
        Arrays.fill(dp, 1);
        int ans = 0;
        for(int i = 0; i < n; i++) {
            for(int j = i + 1; j < n; j++) {
                if(stones[j] - stones[i] > i + 1) break;
                dp[j] = Math.max(dp[j], dp[i] + 1);
                if(j == n - 1) ans = Math.max(ans, dp[j]);
            }
        }
        return ans;
    }
    public int minCost(int[] stones) {
        int n = stones.length;
        int[] dp = new int[n];
        Arrays.fill(dp, Integer.MAX_VALUE);
        dp[0] = 0;
        for(int i = 0; i < n; i++) {
            int max = maxJump(Arrays.copyOfRange(stones, i, n));
            for(int j = i + 1; j <= i + max && j < n; j++) {
                dp[j] = Math.min(dp[j], dp[i] + stones[j] - stones[i]);
            }
        }
        return dp[n - 1];
