Synthesizing 10/10 solutions

=======

        int[] dr = {-1, -1, -1, 0, 0, 1, 1, 1};
        int[] dc = {-1, 0, 1, -1, 1, -1, 0, 1};
        for (int i = 0; i < 8; i++) {
            int nr = rMove + dr[i], nc = cMove + dc[i];
            if (nr >= 0 && nr < 8 && nc >= 0 && nc < 8 && board[nr][nc] != color && board[nr][nc] != '.') {
                int count = 0;
                while (nr >= 0 && nr < 8 && nc >= 0 && nc < 8 && board[nr][nc] != '.') {
                    if (board[nr][nc] == color) {
                        count++;
                    }
                    nr += dr[i];
                    nc += dc[i];
                }
                if (count >= 2) {
                    return true;
                }
            }
        }
        return false;

=======

        int[] dr = {-1, -1, -1, 0, 0, 1, 1, 1};
        int[] dc = {-1, 0, 1, -1, 1, -1, 0, 1};
        for (int i = 0; i < 8; ++i) {
            int nr = rMove + dr[i];
            int nc = cMove + dc[i];
            int count = 0;
            while (nr >= 0 && nr < 8 && nc >= 0 && nc < 8) {
                if (board[nr][nc] == color) {
                    if (count >= 1) {
                        return true;
                    }
                    break;
                } else if (board[nr][nc] == '.') {
                    break;
                }
                nr += dr[i];
                nc += dc[i];
                count++;
            }
        }
        return false;

=======

        int[] dx = {1, 1, 1, 0, 0, -1, -1, -1};
        int[] dy = {1, 0, -1, 1, -1, 1, 0, -1};
        for (int i = 0; i < 8; i++) {
            int x = rMove + dx[i];
            int y = cMove + dy[i];
            int count = 0;
            while (x >= 0 && x < 8 && y >= 0 && y < 8) {
                if (board[x][y] == color) {
                    break;
                }
                if (board[x][y] == '.') {
                    count = 0;
                    break;
                }
                count++;
                x += dx[i];
                y += dy[i];
            }
            if (count >= 2) {
                return true;
            }
        }
        return false;

=======

        int[][] directions = {{0, 1}, {0, -1}, {1, 0}, {-1, 0}, {1, 1}, {-1, -1}, {1, -1}, {-1, 1}};
        for (int[] direction : directions) {
            int count = 0;
            int x = rMove;
            int y = cMove;
            while (x >= 0 && x < 8 && y >= 0 && y < 8) {
                if (board[x][y] == color) {
                    if (count > 1) {
                        return true;
                    }
                    break;
                }
                if (board[x][y] == '.') {
                    break;
                }
                count++;
                x += direction[0];
                y += direction[1];
            }
        }
        return false;

=======

        int[] dx = {0, 0, -1, 1, -1, -1, 1, 1};
        int[] dy = {-1, 1, 0, 0, -1, 1, -1, 1};
        for (int i = 0; i < 8; i++) {
            int x = rMove, y = cMove;
            int count = 0;
            while (x >= 0 && y >= 0 && x < 8 && y < 8) {
                if (board[x][y] == color) {
                    break;
                }
                if (board[x][y] == '.') {
                    count = 0;
                    break;
                }
                count++;
                x += dx[i];
                y += dy[i];
            }
            if (count >= 3) {
                return true;
            }
        }
        return false;

=======

        int[][] directions = {{1, 0}, {0, 1}, {-1, 0}, {0, -1}, {1, 1}, {-1, -1}, {1, -1}, {-1, 1}};
        int count = 0;
        for (int[] dir : directions) {
            int x = rMove + dir[0];
            int y = cMove + dir[1];
            if (x < 0 || x >= 8 || y < 0 || y >= 8 || board[x][y] == color || board[x][y] == '.') {
                continue;
            }
            while (x >= 0 && x < 8 && y >= 0 && y < 8 && board[x][y] != '.') {
                if (board[x][y] == color) {
                    count++;
                    break;
                }
                x += dir[0];
                y += dir[1];
            }
        }
        return count > 0;

=======

        int[][] dirs = {{0, 1}, {1, 0}, {1, 1}, {1, -1}};
        for (int[] dir : dirs) {
            int x = rMove + dir[0], y = cMove + dir[1];
            int count = 0;
            while (x >= 0 && x < 8 && y >= 0 && y < 8) {
                if (board[x][y] == color) {
                    count++;
                    break;
                } else if (board[x][y] == '.') {
                    break;
                }
                x += dir[0];
                y += dir[1];
            }
            x = rMove - dir[0];
            y = cMove - dir[1];
            while (x >= 0 && x < 8 && y >= 0 && y < 8) {
                if (board[x][y] == color) {
                    count++;
                    break;
                } else if (board[x][y] == '.') {
                    break;
                }
                x -= dir[0];
                y -= dir[1];
            }
            if (count == 2) {
                return true;
            }
        }
        return false;

=======

        char other = color == 'W' ? 'B' : 'W';
        int[][] dirs = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}, {-1, -1}, {-1, 1}, {1, -1}, {1, 1}};
        for (int[] dir : dirs) {
            int x = rMove + dir[0];
            int y = cMove + dir[1];
            int count = 0;
            while (x >= 0 && x < 8 && y >= 0 && y < 8) {
                if (board[x][y] == color) {
                    if (count > 0) {
                        return true;
                    } else {
                        break;
                    }
                } else if (board[x][y] == other) {
                    count++;
                    x += dir[0];
                    y += dir[1];
                } else {
                    break;
                }
            }
        }
        return false;

=======

        int[][] directions = {{0, 1}, {1, 0}, {1, 1}, {1, -1}};
        for (int[] dir : directions) {
            int x = rMove + dir[0];
            int y = cMove + dir[1];
            int count = 0;
            while (x >= 0 && x < 8 && y >= 0 && y < 8) {
                if (board[x][y] == '.') {
                    break;
                }
                if (board[x][y] == color) {
                    count++;
                    break;
                }
                count++;
                x += dir[0];
                y += dir[1];
            }
            x = rMove - dir[0];
            y = cMove - dir[1];
            while (x >= 0 && x < 8 && y >= 0 && y < 8) {
                if (board[x][y] == '.') {
                    break;
                }
                if (board[x][y] == color) {
                    count++;
                    break;
                }
                count++;
                x -= dir[0];
                y -= dir[1];
            }
            if (count >= 3) {
                return true;
            }
        }
        return false;

=======

        int[][] d = new int[][]{{-1,0},{1,0},{0,-1},{0,1},{1,1},{1,-1},{-1,1},{-1,-1}};
        for (int i = 0; i < 8; i++) {
            int x = rMove + d[i][0], y = cMove + d[i][1];
            if (x >= 0 && x < 8 && y >= 0 && y < 8 && board[x][y] != '.' && board[x][y] != color) {
                int cnt = 0;
                while (x >= 0 && x < 8 && y >= 0 && y < 8 && board[x][y] != '.') {
                    if (board[x][y] == color) {
                        cnt++;
                    }
                    x += d[i][0];
                    y += d[i][1];
                }
                if (cnt >= 2) {
                    return true;
                }
            }
        }
        return false;
