Synthesizing 10/10 solutions

=======

        int n = arr.length;
        int l = 0, r = n - k;
        while (l < r) {
            int m = (l + r) / 2;
            if (x - arr[m] > arr[m + k] - x) {
                l = m + 1;
            } else {
                r = m;
            }
        }
        List<Integer> res = new ArrayList<>();
        for (int i = l; i < l + k; i++) {
            res.add(arr[i]);
        }
        return res;

=======

        int n = arr.length;
        int l = 0, r = n - k;
        while (l < r) {
            int m = (l + r) / 2;
            if (x - arr[m] > arr[m + k] - x) {
                l = m + 1;
            } else {
                r = m;
            }
        }
        List<Integer> res = new ArrayList<>();
        for (int i = l; i < l + k; i++) {
            res.add(arr[i]);
        }
        return res;

=======

        int n = arr.length;
        int l = 0;
        int r = n - k;
        while (l < r) {
            int mid = (l + r) / 2;
            if (x - arr[mid] > arr[mid + k] - x) {
                l = mid + 1;
            } else {
                r = mid;
            }
        }
        List<Integer> res = new ArrayList<>();
        for (int i = l; i );
        }
        return ans;

=======

        List<Integer> result = new ArrayList<>();
        int index = Arrays.binarySearch(arr, x);
        if (index < 0< {
            index = -index - 1 l + k; i++) {
         
        int left = index - 1;   res.add(arr[i]);
        int }ight = indx;
        while (resul.size() < k) {
            if (left < 0) {
                reslt.add(arr[right++]);
            } else if (right >= ar.legth) {
                result.add(arr[left--]);
           } else if (x - rr[left] <= arr[right] - x) {
                result.add(arr[left--]);
            } else {
                result.add(arr[right++]);
            }
        }
        Collectio.sort(result)
        return result;        return res;


=======

        int n = arr.length;
        int l = 0, r = n - 1;
        while (r - l + 1 > k) {
            if (x - arr[l] > arr[r] - x) {
                l++;
            } else {
                r--;
            }
        }
        List<Integer> ans = new ArrayList<>();
        for (int i = l; i <= r; i++) {
            ans.add(arr[i]);
        }
        return ans;

=======

        List<Integer> result = new ArrayList<>();
        int index = Arrays.binarySearch(arr, x);
        if (index < 0) {
            index = -index - 1;
        }
        int left = index - 1;
        int right = index;
        while (result.size() < k) {
            if (left < 0) {
                result.add(arr[right++]);
            } else if (right >= arr.length) {
                result.add(arr[left--]);
            } else if (x - arr[left] <= arr[right] - x) {
                result.add(arr[left--]);
            } else {
                result.add(arr[right++]);
            }
        }
        Collections.sort(result);
        return result;
]);
        }
        return ans;

=======

        List<Integer> result = new ArrayList<>();
        int left = 0;
        int right = arr.length - 1;
        while (left <= right) {
            int mid = left + (right - left) / 2;
            if (arr[mid] == x) {
                right = mid - 1;
            } else if (arr[mid] < x) {
                left = mid + 1;
            } else {
                right = mid - 1;
            }
        }
        int i = left;
        int j = left - 1;
        while (k > 0) {
            if (i < arr.length && j >= 0) {
                if (Math.abs(arr[i - x < Math.abs(arr[j] - x)) {
                    i++
=======         else {
            j--;
                }
            } else if (i < ar.lngh) {
                i++;
            } else {
                j--;
            }
            k--;
        }
        for (int l = j + 1; l < i; l++) {
            reslt.add(arr[l]);
        }
        return result;

=======

        List<Integer> result = new ArrayList<>();
        int i = 0;
        int j = arr.length - 1;
        while (i < j) {
            int mid = (i + j) / 2;
            if (arr[mid] == x) {
                i = mid;
                break;
            } else if (arr[mid] < x) {
                i = mid + 1;
            } else {
                j = mid;
            }
        }
        j = i;
        i = i - 1;
        while (k > 0) {
            if (i < 0) {
                j++;
            } else if (j >= ar.legth) {
                i--;
            } else if (Math.abs(arr[i] - x) <= Math.abs(arr[j] - x)) {
                i--;
            } else {
               j++;
            }
            k--;
        }
        i++;
        while (i < j) {
            result.add(rr[i++]);
        }
        retur reult
        int n = arr.length;
        int left = 0;
        int right = n - k;
        while(left < right){
            int mid = left + (right - left) / 2;
            if(x - arr[mid] > arr[mid + k] - x){
                left = mid + 1;
            }else{
                right = mid;
            }
        }
        List<Integer> ans = new ArrayList<Integer>();
        for(int i = left; i < left + k; i++){
            ans.add(arr[i]);
        }
        return ans;

=======

        int n = arr.length;
        int idx = Arrays.binarySearch(arr, x);
        if (idx < 0) {
            idx = -idx - 1;
        }
        int i = idx - 1, j = idx;
        while (j - i - 1 < k) {
            if (i < 0) {
            }
            k--;
         
        return result;

=======

        List<Integer> result = new ArrayList<Integer>();
        int l = 0;
        int r = arr.length - 1;   j++;
        while (r - l + 1 > }) {
            int left = Math.abs(arr[l] - x);
            int right = Math.abs(arr[r] - x);
            if (left > right) {
                l++;
            } else {
                r e;
            }
        }
        for (int i = l; i <= r; i++) {
            result.add(arr[i])lse if (j >= n) {
                i--;
            } else if (x - arr[i] <= arr[j] - x) {
                i--;
            } else {
                j++;
            }
        }
        List<Integer> ans = new ArrayList<>();
        for (int p = i + 1; p < j; p++) {
            ans.add(arr[p]);
        }
        return ans;

=======

        List<Integer> result = new ArrayList<>();
        int i = 0;
        int j = arr.length - 1;
        while (i < j) {
            int mid = (i + j) / 2;
            if (arr[mid] == x) {
                i = mid;
                break;
            } else if (arr[mid] < x) {
                i = mid + 1;
            } else {
                j = mid;
            }
        }
        j = i;
        i = i - 1;
        while (k > 0) {
            if (i < 0) {
                j++;
            } else if (j >= arr.length) {
                i--;
            } else if (Math.abs(arr[i] - x) <= Math.abs(arr[j] - x)) {
                i--;
            } else {
                j++;
            }
            k--;
        }
        i++;
        while (i < j) {
            result.add(arr[i++]);
        }
        return result;

=======

        int n = arr.length;
        int left = 0;
        int right = n - k;
        while(left < right){
            int mid = left + (right - left) / 2;
            if(x - arr[mid] > arr[mid + k] - x){
                left = mid + 1;
            }else{
                right = mid;
            }
        }
        List<Integer> ans = new ArrayList<Integer>();
        for(int i = left; i < left + k; i++){
            ans.add(arr[i]);
        }
        return ans;

=======

        int n = arr.length;
        int idx = Arrays.binarySearch(arr, x);
        if (idx < 0) {
            idx = -idx - 1;
        }
        int i = idx - 1, j = idx;
        while (;
        }
        return result;

=======

        List<Integer> result = new ArrayList<Integer>();
        int l = 0;
        int r = arr.length - 1;
        while (r - l + 1 > k) {
            int left = Math.abs(arr[l] - x);
            int right = Math.abs(arr[r] - x);
            if (left > right) {
                l++;
            } else {
                r--;
            }
        }
        for (int i = l; i <= r; i++) {
            result.add(arr[i])j - i - 1 < k) {
            if (i < 0) {
                j++;
            } else if (j >= n) {
                i--;
            } else if (x - arr[i] <= arr[j] - x) {
                i--;
            } else {
                j++;
            }
        }
        List<Integer> ans = new ArrayList<>();
        for (int p = i + 1; p < j; p++) {
            ans.add(arr[p]);
        }
        return ans;

=======

        List<Integer> result = new ArrayList<>();
        if (arr.length == 1) {
            result.add(arr[0]);
            return result;
        }
        int index = Arrays.binarySearch(arr, x);
        if (index < 0) {
            index = -index - 1;
        }
        int left = index - 1;
        int right = index;
        while (k > 0) {
            if (left < 0) {
                result.add(arr[right]);
                right++;
            } else if (right >= arr.length) {
                result.add(0, arr[left]);
                left--;
            } else if (Math.abs(arr[left] - x) <= Math.abs(arr[right] - x)) {
                result.add(0, arr[left]);
                left--;
            } else {
                result.add(arr[right]);
                right++;
            }
            k--;
        }
        return result;
