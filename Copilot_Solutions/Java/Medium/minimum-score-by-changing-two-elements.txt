Synthesizing 10/10 solutions

=======

        int min = Integer.MAX_VALUE;
        int max = Integer.MIN_VALUE;
        for (int i = 0; i < nums.length; i++) {
            min = Math.min(min, nums[i]);
            max = Math.max(max, nums[i]);
        }
        if (min == max) {
            return 0;
        }
        int[] prefix = new int[nums.length];
        int[] suffix = new int[nums.length];
        for (int i = 0; i < nums.length; i++) {
            prefix[i] = Math.min(0, nums[i] - min);
            suffix[i] = Math.max(0, nums[i] - max);
        }
        for (int i = 1; i < nums.length; i++) {
            prefix[i] = Math.min(prefix[i], prefix[i - 1]);
        }
        for (int i = nums.length - 2; i >= 0; i--) {
            suffix[i] = Math.max(suffix[i], suffix[i + 1]);
        }
        int ans = Integer.MAX_VALUE;
        for (int i = 0; i < nums.length - 1; i++) {
            ans = Math.min(ans, Math.min(0, suffix[i + 1] - prefix[i]));
        }
        return ans;

=======

        int n = nums.length;
        int[] min = new int[n];
        int[] max = new int[n];
        min[0] = nums[0];
        max[0] = nums[0];
        for (int i = 1; i < n; i++) {
            min[i] = Math.min(min[i - 1], nums[i]);
            max[i] = Math.max(max[i - 1], nums[i]);
        }
        int ans = 0;
        for (int i = n - 1; i >= 0; i--) {
            int lo = 0;
            int hi = i - 1;
            int mid = 0;
            while (lo <= hi) {
                mid = lo + (hi - lo) / 2;
                if (nums[mid] < nums[i]) {
                    lo = mid + 1;
                } else {
                    hi = mid - 1;
                }
            }
            if (lo < n) {
                ans = Math.max(ans, nums[i] - min[lo]);
            }
            if (hi >= 0) {
                ans = Math.max(ans, max[hi] - nums[i]);
            }
        }
        return ans;
    }
    public int minScore(int[] nums) {
        int n = nums.length;
        if (n == 3) {
            return 0;
        }
        int ans = Integer.MAX_VALUE;
        int[] sorted = nums.clone();
        Arrays.sort(sorted);
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                nums[i] = sorted[0];
                nums[j] = sorted[n - 1];
                ans = Math.min(ans, minimizeSum(nums));
            }
        }
        return ans;

=======

        int n = nums.length;
        int[] min = new int[n];
        int[] max = new int[n];
        min[0] = nums[0];
        for (int i = 1; i < n; i++)
            min[i] = Math.min(min[i - 1], nums[i]);
        max[n - 1] = nums[n - 1];
        for (int i = n - 2; i >= 0; i--)
            max[i] = Math.max(max[i + 1], nums[i]);
        int res = Integer.MAX_VALUE;
        for (int i = 0; i < n - 1; i++)
            res = Math.min(res, Math.max(nums[i + 1] - nums[0], max[i + 1] - nums[0]));
        for (int i = 1; i < n; i++)
            res = Math.min(res, Math.max(nums[n - 1] - nums[i], nums[n - 1] - min[i - 1]));
        return res;

=======

        int n = nums.length;
        int[] min = new int[n];
        int[] max = new int[n];
        min[n-1] = nums[n-1];
        max[n-1] = nums[n-1];
        for (int i = n-2; i >= 0; i--) {
            min[i] = Math.min(min[i+1], nums[i]);
            max[i] = Math.max(max[i+1], nums[i]);
        }
        int low = 0, high = 0;
        for (int i = 0; i < n-1; i++) {
            low = Math.max(low, Math.abs(nums[i] - min[i+1]));
            high = Math.max(high, Math.abs(nums[i] - max[i+1]));
        }
        return low + high;

=======

        int n = nums.length;
        int[] prefix = new int[n + 1];
        for (int i = 1; i <= n; i++) {
            prefix[i] = prefix[i - 1] + nums[i - 1];
        }
        int[] suffix = new int[n + 1];
        for (int i = n - 1; i >= 0; i--) {
            suffix[i] = suffix[i + 1] + nums[i];
        }
        int ans = Integer.MAX_VALUE;
        for (int i = 0; i < n; i++) {
            int low = 0;
            int high = n - 1;
            while (low < high) {
                int mid = (low + high) >> 1;
                if (nums[mid] < nums[i]) {
                    low = mid + 1;
                } else {
                    high = mid;
                }
            }
            int left = low;
            low = 0;
            high = n - 1;
            while (low < high) {
                int mid = (low + high + 1) >> 1;
                if (nums[mid] > nums[i]) {
                    high = mid - 1;
                } else {
                    low = mid;
                }
            }
            int right = low;
            int sum = 0;
            if (left > 0) {
                sum += prefix[left] - nums[i] * left;
            }
            if (left < i) {
                sum += nums[i] * (i - left) - (prefix[i] - prefix[left]);
            }
            if (right < n - 1) {
                sum += nums[i] * (n - 1 - right) - (suffix[right + 1] - suffix[i + 1]);
            }
            if (right > i) {
                sum += suffix[i] - suffix[right + 1] - nums[i] * (right - i);
            }
            ans = Math.min(ans, sum);
        }
        return ans;

=======

        int n = nums.length;
        int[][] dp = new int[n][2];
        dp[0][0] = 0;
        dp[0][1] = nums[0];
        for (int i = 1; i < n; i++) {
            dp[i][0] = Math.min(dp[i - 1][0], dp[i - 1][1]);
            dp[i][1] = nums[i] + Math.min(dp[i - 1][0], dp[i - 1][1] - nums[i - 1]);
        }
        return Math.min(dp[n - 1][0], dp[n - 1][1]);
    }

    public int maxSum(int[] nums) {
        int n = nums.length;
        int[][] dp = new int[n][2];
        dp[0][0] = 0;
        dp[0][1] = nums[0];
        for (int i = 1; i < n; i++) {
            dp[i][0] = Math.max(dp[i - 1][0], dp[i - 1][1]);
            dp[i][1] = nums[i] + Math.max(dp[i - 1][0], dp[i - 1][1] - nums[i - 1]);
        }
        return Math.max(dp[n - 1][0], dp[n - 1][1]);
    }

    public int minDifference(int[] nums) {
        if (nums.length <= 4) {
            return 0;
        }
        int min = minimizeSum(nums);
        int max = maxSum(nums);
        return max - min;

=======

        int n = nums.length;
        int[] dp = new int[n];
        dp[0] = 0;
        dp[1] = 0;
        for (int i = 2; i < n; i++) {
            dp[i] = nums[i] - nums[i - 1];
        }
        int sum = 0;
        for (int i = 2; i < n; i++) {
            sum += dp[i];
        }
        int min = sum;
        for (int i = 2; i < n; i++) {
            int a = nums[i - 1] - nums[i - 2];
            int b = nums[i] - nums[i - 1];
            int c = nums[i] - nums[i - 2];
            sum = sum - dp[i] - dp[i - 1];
            sum = sum + a + b + c;
            min = Math.min(min, sum);
        }
        return min;

=======

        int min = Integer.MAX_VALUE;
        int max = Integer.MIN_VALUE;
        int n = nums.length;
        int[] leftMin = new int[n];
        int[] leftMax = new int[n];
        int[] rightMin = new int[n];
        int[] rightMax = new int[n];
        for (int i = 0; i < n; i++) {
            min = Math.min(min, nums[i]);
            max = Math.max(max, nums[i]);
            leftMin[i] = min;
            leftMax[i] = max;
        }
        min = Integer.MAX_VALUE;
        max = Integer.MIN_VALUE;
        for (int i = n - 1; i >= 0; i--) {
            min = Math.min(min, nums[i]);
            max = Math.max(max, nums[i]);
            rightMin[i] = min;
            rightMax[i] = max;
        }
        int ans = Integer.MAX_VALUE;
        for (int i = 0; i < n - 1; i++) {
            ans = Math.min(ans, Math.max(rightMax[i + 1] - leftMin[i], rightMin[i + 1] - leftMax[i]));
        }
        return ans;
    }
}

=======

        int n = nums.length;
        int[] prefix = new int[n];
        int[] suffix = new int[n];
        int[] sum = new int[n];
        prefix[0] = nums[0];
        suffix[n - 1] = nums[n - 1];
        sum[0] = nums[0];
        for (int i = 1; i < n; i++) {
            prefix[i] = Math.min(prefix[i - 1], nums[i]);
            suffix[n - i - 1] = Math.min(suffix[n - i], nums[n - i - 1]);
            sum[i] = sum[i - 1] + nums[i];
        }
        int ans = Integer.MAX_VALUE;
        for (int i = 0; i < n; i++) {
            int l = 0, r = i - 1;
            while (l <= r) {
                int mid = (l + r) >> 1;
                if (prefix[mid] < nums[i]) {
                    l = mid + 1;
                } else {
                    r = mid - 1;
                }
            }
            int low = l == 0 ? 0 : Math.abs(nums[i] - prefix[l - 1]);
            l = i + 1;
            r = n - 1;
            while (l <= r) {
                int mid = (l + r) >> 1;
                if (suffix[mid] < nums[i]) {
                    l = mid + 1;
                } else {
                    r = mid - 1;
                }
            }
            int high = l == n ? 0 : Math.abs(nums[i] - suffix[l]);
            int s = 0;
            if (i > 0) {
                s += sum[i - 1];
            }
            if (i < n - 1) {
                s += sum[n - 1] - sum[i];
            }
            ans = Math.min(ans, s + low + high);
        }
        return ans;

=======

        int len = nums.length;
        int[] max = new int[len];
        int[] min = new int[len];
        int[] dp = new int[len];
        int[] dp2 = new int[len];
        int[] dp3 = new int[len];
        int[] dp4 = new int[len];
        max[0] = nums[0];
        min[0] = nums[0];
        for (int i = 1; i < len; ++i) {
            max[i] = Math.max(max[i - 1], nums[i]);
            min[i] = Math.min(min[i - 1], nums[i]);
        }
        dp[0] = nums[0];
        dp2[0] = nums[0];
        for (int i = 1; i < len; ++i) {
            dp[i] = Math.max(dp[i - 1], nums[i] - min[i - 1]);
            dp2[i] = Math.max(dp2[i - 1], max[i - 1] - nums[i]);
        }
        dp3[len - 1] = nums[len - 1];
        dp4[len - 1] = nums[len - 1];
        for (int i = len - 2; i >= 0; --i) {
            dp3[i] = Math.max(dp3[i + 1], nums[i] - min[i]);
            dp4[i] = Math.max(dp4[i + 1], max[i] - nums[i]);
        }
        int res = Integer.MAX_VALUE;
        for (int i = 0; i < len - 1; ++i) {
            res = Math.min(res, dp[i] + dp4[i + 1]);
            res = Math.min(res, dp2[i] + dp3[i + 1]);
        }
        return res;
