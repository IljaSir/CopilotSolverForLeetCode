Synthesizing 10/10 solutions

=======

        int m = grid.length;
        int n = grid[0].length;
        long[][] max = new long[m][n];
        long[][] min = new long[m][n];
        max[0][0] = grid[0][0];
        min[0][0] = grid[0][0];
        for(int i = 1; i < m; i++) {
            max[i][0] = max[i - 1][0] * grid[i][0];
            min[i][0] = min[i - 1][0] * grid[i][0];
        }
        for(int j = 1; j < n; j++) {
            max[0][j] = max[0][j - 1] * grid[0][j];
            min[0][j] = min[0][j - 1] * grid[0][j];
        }
        for(int i = 1; i < m; i++) {
            for(int j = 1; j < n; j++) {
                long[] temp = new long[]{max[i - 1][j], max[i][j - 1], min[i - 1][j], min[i][j - 1]};
                Arrays.sort(temp);
                max[i][j] = Math.max(temp[3] * grid[i][j], temp[2] * grid[i][j]);
                min[i][j] = Math.min(temp[0] * grid[i][j], temp[1] * grid[i][j]);
            }
        }
        return max[m - 1][n - 1] < 0 ? -1 : (int)(max[m - 1][n - 1] % 1000000007);

=======

        int m = grid.length;
        int n = grid[0].length;
        long[][] max = new long[m][n];
        long[][] min = new long[m][n];
        max[0][0] = grid[0][0];
        min[0][0] = grid[0][0];
        for (int i = 1; i < m; i++) {
            max[i][0] = max[i - 1][0] * grid[i][0];
            min[i][0] = min[i - 1][0] * grid[i][0];
        }
        for (int j = 1; j < n; j++) {
            max[0][j] = max[0][j - 1] * grid[0][j];
            min[0][j] = min[0][j - 1] * grid[0][j];
        }
        for (int i = 1; i < m; i++) {
            for (int j = 1; j < n; j++) {
                long[] tmp = new long[4];
                tmp[0] = max[i - 1][j] * grid[i][j];
                tmp[1] = max[i][j - 1] * grid[i][j];
                tmp[2] = min[i - 1][j] * grid[i][j];
                tmp[3] = min[i][j - 1] * grid[i][j];
                max[i][j] = Arrays.stream(tmp).max().getAsLong();
                min[i][j] = Arrays.stream(tmp).min().getAsLong();
            }
        }
        return max[m - 1][n - 1] < 0 ? -1 : (int) (max[m - 1][n - 1] % 1000000007);

=======

        int m = grid.length;
        int n = grid[0].length;
        long[][] max = new long[m][n];
        long[][] min = new long[m][n];
        max[0][0] = grid[0][0];
        min[0][0] = grid[0][0];
        for (int i = 1; i < m; i++) {
            max[i][0] = max[i - 1][0] * grid[i][0];
            min[i][0] = min[i - 1][0] * grid[i][0];
        }
        for (int j = 1; j < n; j++) {
            max[0][j] = max[0][j - 1] * grid[0][j];
            min[0][j] = min[0][j - 1] * grid[0][j];
        }
        for (int i = 1; i < m; i++) {
            for (int j = 1; j < n; j++) {
                long a = max[i - 1][j] * grid[i][j];
                long b = max[i][j - 1] * grid[i][j];
                long c = min[i - 1][j] * grid[i][j];
                long d = min[i][j - 1] * grid[i][j];
                max[i][j] = Math.max(a, Math.max(b, Math.max(c, d)));
                min[i][j] = Math.min(a, Math.min(b, Math.min(c, d)));
            }
        }
        long result = max[m - 1][n - 1];
        if (result < 0) return -1;
        return (int) (result % 1000000007);

=======

        int m = grid.length;
        int n = grid[0].length;
        long[][] max = new long[m][n];
        long[][] min = new long[m][n];
        max[0][0] = grid[0][0];
        min[0][0] = grid[0][0];
        for (int i = 1; i < m; i++) {
            max[i][0] = max[i - 1][0] * grid[i][0];
            min[i][0] = min[i - 1][0] * grid[i][0];
        }
        for (int j = 1; j < n; j++) {
            max[0][j] = max[0][j - 1] * grid[0][j];
            min[0][j] = min[0][j - 1] * grid[0][j];
        }
        for (int i = 1; i < m; i++) {
            for (int j = 1; j < n; j++) {
                if (grid[i][j] >= 0) {
                    max[i][j] = Math.max(max[i - 1][j], max[i][j - 1]) * grid[i][j];
                    min[i][j] = Math.min(min[i - 1][j], min[i][j - 1]) * grid[i][j];
                } else {
                    max[i][j] = Math.min(min[i - 1][j], min[i][j - 1]) * grid[i][j];
                    min[i][j] = Math.max(max[i - 1][j], max[i][j - 1]) * grid[i][j];
                }
            }
        }
        return max[m - 1][n - 1] < 0 ? -1 : (int) (max[m - 1][n - 1] % 1000000007);

=======

        int m = grid.length;
        int n = grid[0].length;
        long[][] max = new long[m][n];
        long[][] min = new long[m][n];
        max[0][0] = min[0][0] = grid[0][0];
        for (int i = 1; i < m; i++) {
            max[i][0] = max[i - 1][0] * grid[i][0];
            min[i][0] = min[i - 1][0] * grid[i][0];
        }
        for (int j = 1; j < n; j++) {
            max[0][j] = max[0][j - 1] * grid[0][j];
            min[0][j] = min[0][j - 1] * grid[0][j];
        }
        for (int i = 1; i < m; i++) {
            for (int j = 1; j < n; j++) {
                if (grid[i][j] > 0) {
                    max[i][j] = Math.max(max[i - 1][j], max[i][j - 1]) * grid[i][j];
                    min[i][j] = Math.min(min[i - 1][j], min[i][j - 1]) * grid[i][j];
                } else {
                    max[i][j] = Math.min(min[i - 1][j], min[i][j - 1]) * grid[i][j];
                    min[i][j] = Math.max(max[i - 1][j], max[i][j - 1]) * grid[i][j];
                }
            }
        }
        return max[m - 1][n - 1] < 0 ? -1 : (int)(max[m - 1][n - 1] % (1e9 + 7));

=======

        int m = grid.length, n = grid[0].length;
        long[][] max = new long[m][n];
        long[][] min = new long[m][n];
        max[0][0] = min[0][0] = grid[0][0];
        for (int i = 1; i < m; i++) {
            max[i][0] = min[i][0] = max[i - 1][0] * grid[i][0];
        }
        for (int j = 1; j < n; j++) {
            max[0][j] = min[0][j] = max[0][j - 1] * grid[0][j];
        }
        for (int i = 1; i < m; i++) {
            for (int j = 1; j < n; j++) {
                long[] arr = new long[] {max[i - 1][j] * grid[i][j], min[i - 1][j] * grid[i][j], max[i][j - 1] * grid[i][j], min[i][j - 1] * grid[i][j]};
                max[i][j] = Arrays.stream(arr).max().getAsLong();
                min[i][j] = Arrays.stream(arr).min().getAsLong();
            }
        }
        return max[m - 1][n - 1] < 0 ? -1 : (int) (max[m - 1][n - 1] % 1000000007);

=======

        int n = grid.length;
        int m = grid[0].length;
        long[][] max = new long[n][m];
        long[][] min = new long[n][m];
        max[0][0] = grid[0][0];
        min[0][0] = grid[0][0];
        for (int i = 1; i < n; i++) {
            max[i][0] = max[i - 1][0] * grid[i][0];
            min[i][0] = min[i - 1][0] * grid[i][0];
        }
        for (int i = 1; i < m; i++) {
            max[0][i] = max[0][i - 1] * grid[0][i];
            min[0][i] = min[0][i - 1] * grid[0][i];
        }
        for (int i = 1; i < n; i++) {
            for (int j = 1; j < m; j++) {
                max[i][j] = Math.max(
                    Math.max(max[i - 1][j] * grid[i][j], min[i - 1][j] * grid[i][j]),
                    Math.max(max[i][j - 1] * grid[i][j], min[i][j - 1] * grid[i][j])
                );
                min[i][j] = Math.min(
                    Math.min(max[i - 1][j] * grid[i][j], min[i - 1][j] * grid[i][j]),
                    Math.min(max[i][j - 1] * grid[i][j], min[i][j - 1] * grid[i][j])
                );
            }
        }
        return max[n - 1][m - 1] < 0 ? -1 : (int) (max[n - 1][m - 1] % 1000000007);

=======

        int n = grid.length;
        int m = grid[0].length;
        long[][] min = new long[n][m];
        long[][] max = new long[n][m];
        long mod = (long)1e9 + 7;
        min[0][0] = grid[0][0];
        max[0][0] = grid[0][0];
        for (int i = 1; i < n; i++) {
            min[i][0] = min[i - 1][0] * grid[i][0];
            max[i][0] = max[i - 1][0] * grid[i][0];
        }
        for (int i = 1; i < m; i++) {
            min[0][i] = min[0][i - 1] * grid[0][i];
            max[0][i] = max[0][i - 1] * grid[0][i];
        }
        for (int i = 1; i < n; i++) {
            for (int j = 1; j < m; j++) {
                long[] tmp = new long[4];
                tmp[0] = min[i - 1][j] * grid[i][j];
                tmp[1] = min[i][j - 1] * grid[i][j];
                tmp[2] = max[i - 1][j] * grid[i][j];
                tmp[3] = max[i][j - 1] * grid[i][j];
                Arrays.sort(tmp);
                min[i][j] = tmp[0];
                max[i][j] = tmp[3];
            }
        }
        return max[n - 1][m - 1] < 0 ? -1 : (int)(max[n - 1][m - 1] % mod);

=======

        int n = grid.length;
        long[][][] dp = new long[n][n][2];
        dp[0][0][0] = grid[0][0];
        dp[0][0][1] = grid[0][0];
        for (int i = 1; i < n; i++) {
            dp[0][i][0] = dp[0][i-1][0] * grid[0][i];
            dp[0][i][1] = dp[0][i-1][1] * grid[0][i];
            dp[i][0][0] = dp[i-1][0][0] * grid[i][0];
            dp[i][0][1] = dp[i-1][0][1] * grid[i][0];
        }
        for (int i = 1; i < n; i++) {
            for (int j = 1; j < n; j++) {
                dp[i][j][0] = Math.min(Math.min(dp[i-1][j][0] * grid[i][j], dp[i][j-1][0] * grid[i][j]), Math.min(dp[i-1][j][1] * grid[i][j], dp[i][j-1][1] * grid[i][j]));
                dp[i][j][1] = Math.max(Math.max(dp[i-1][j][0] * grid[i][j], dp[i][j-1][0] * grid[i][j]), Math.max(dp[i-1][j][1] * grid[i][j], dp[i][j-1][1] * grid[i][j]));
            }
        }
        if (dp[n-1][n-1][1] < 0) return -1;
        return (int)(dp[n-1][n-1][1] % 1000000007);

=======

        int m = grid.length, n = grid[0].length;
        int mod = 1000000007;
        long[][] maxdp = new long[m][n];
        long[][] mindp = new long[m][n];
        maxdp[0][0] = mindp[0][0] = grid[0][0];
        for (int i = 1; i < m; i++) {
            maxdp[i][0] = mindp[i][0] = maxdp[i - 1][0] * grid[i][0];
        }
        for (int i = 1; i < n; i++) {
            maxdp[0][i] = mindp[0][i] = maxdp[0][i - 1] * grid[0][i];
        }
        for (int i = 1; i < m; i++) {
            for (int j = 1; j < n; j++) {
                long[] maxmin = maxMin(maxdp[i - 1][j], maxdp[i][j - 1], mindp[i - 1][j], mindp[i][j - 1]);
                maxdp[i][j] = maxmin[0] * grid[i][j];
                mindp[i][j] = maxmin[1] * grid[i][j];
            }
        }
        return maxdp[m - 1][n - 1] < 0 ? -1 : (int)(maxdp[m - 1][n - 1] % mod);
