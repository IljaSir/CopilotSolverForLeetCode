Synthesizing 10/10 solutions

=======

        int n = plants.length;
        int[] left = new int[n];
        int[] right = new int[n];
        left[0] = plants[0];
        right[n - 1] = plants[n - 1];
        for (int i = 1; i < n; i++) {
            left[i] = left[i - 1] + plants[i];
            right[n - i - 1] = right[n - i] + plants[n - i - 1];
        }
        int ans = 0;
        int curA = capacityA;
        int curB = capacityB;
        for (int i = 0; i < n; i++) {
            if (curA < plants[i]) {
                curA = capacityA;
                ans++;
            }
            curA -= plants[i];
            if (curB < plants[n - i - 1]) {
                curB = capacityB;
                ans++;
            }
            curB -= plants[n - i - 1];
        }
        return ans;

=======

        int n = plants.length;
        int[] left = new int[n];
        int[] right = new int[n];
        left[0] = plants[0];
        right[n - 1] = plants[n - 1];
        for (int i = 1; i < n; i++) {
            left[i] = left[i - 1] + plants[i];
            right[n - i - 1] = right[n - i] + plants[n - i - 1];
        }
        int a = 0;
        int b = n - 1;
        int count = 0;
        while (a <= b) {
            if (left[a] <= capacityA && right[b] <= capacityB) {
                if (left[a] < right[b]) {
                    capacityA -= left[a];
                    capacityB -= left[a];
                    a++;
                } else {
                    capacityA -= right[b];
                    capacityB -= right[b];
                    b--;
                }
            } else if (left[a] <= capacityA) {
                capacityA -= left[a];
                capacityB -= left[a];
                a++;
            } else if (right[b] <= capacityB) {
                capacityA -= right[b];
                capacityB -= right[b];
                b--;
            } else {
                count++;
                capacityA = capacityB = Math.max(capacityA, capacityB);
            }
        }
        return count;

=======

        int i = 0;
        int j = plants.length - 1;
        int count = 0;
        int waterA = capacityA;
        int waterB = capacityB;
        while (i <= j) {
            if (waterA >= plants[i] && waterB >= plants[j]) {
                if (waterA >= waterB) {
                    waterA -= plants[i];
                    i++;
                } else {
                    waterB -= plants[j];
                    j--;
                }
            } else if (waterA >= plants[i]) {
                waterA -= plants[i];
                i++;
            } else if (waterB >= plants[j]) {
                waterB -= plants[j];
                j--;
            } else {
                waterA = capacityA;
                waterB = capacityB;
                count++;
            }
        }
        return count;

=======

        int n = plants.length;
        int i = 0, j = n - 1;
        int a = 0, b = 0;
        int count = 0;
        while (i <= j) {
            if (a < plants[i]) {
                a = capacityA;
                count++;
            }
            a -= plants[i];
            i++;
            if (i > j) {
                break;
            }
            if (b < plants[j]) {
                b = capacityB;
                count++;
            }
            b -= plants[j];
            j--;
        }
        return count;

=======

        int n = plants.length;
        int i = 0, j = n - 1;
        int count = 0;
        int a = capacityA, b = capacityB;
        while (i <= j) {
            if (a >= plants[i] && b >= plants[j]) {
                if (a >= b) {
                    a -= plants[i];
                    i++;
                } else {
                    b -= plants[j];
                    j--;
                }
            } else if (a >= plants[i]) {
                a -= plants[i];
                i++;
            } else if (b >= plants[j]) {
                b -= plants[j];
                j--;
            } else {
                a = capacityA;
                b = capacityB;
                count++;
            }
        }
        return count;

=======

        int n = plants.length;
        int count = 0;
        int i = 0;
        int j = n - 1;
        int a = 0;
        int b = 0;
        while (i <= j) {
            if (a < plants[i]) {
                a = capacityA;
                count++;
            }
            if (b < plants[j]) {
                b = capacityB;
                count++;
            }
            a -= plants[i++];
            b -= plants[j--];
        }
        return count;

=======

        int n = plants.length;
        int a = 0, b = n - 1;
        int refills = 0;
        int ca = capacityA, cb = capacityB;
        while (a <= b) {
            if (ca >= plants[a]) {
                ca -= plants[a];
                a++;
            } else if (cb >= plants[b]) {
                cb -= plants[b];
                b--;
            } else {
                ca = capacityA;
                cb = capacityB;
                refills++;
            }
        }
        return refills;

=======

        int a = 0, b = plants.length - 1;
        int count = 0;
        int wa = 0, wb = 0;
        while (a <= b) {
            if (wa < plants[a]) {
                wa = capacityA;
                count++;
            }
            wa -= plants[a];
            a++;
            if (wb < plants[b]) {
                wb = capacityB;
                count++;
            }
            wb -= plants[b];
            b--;
        }
        return count;

=======

        int n = plants.length;
        int refill = 0;
        int a = capacityA, b = capacityB;
        for (int i = 0; i < n; i++) {
            if (a >= plants[i]) {
                a -= plants[i];
            } else {
                refill++;
                a = capacityA;
                a -= plants[i];
            }
            if (b >= plants[n - i - 1]) {
                b -= plants[n - i - 1];
            } else {
                refill++;
                b = capacityB;
                b -= plants[n - i - 1];
            }
        }
        return refill;

=======

        int n = plants.length;
        int count = 0;
        int p1 = 0, p2 = n - 1;
        int a = capacityA, b = capacityB;
        while (p1 <= p2) {
            if (a < plants[p1] && b < plants[p2]) {
                count++;
                a = capacityA;
                b = capacityB;
            } else if (a >= plants[p1] && b >= plants[p2]) {
                if (p1 == p2) {
                    count++;
                    break;
                }
                if (a >= b) {
                    a -= plants[p1];
                    p1++;
                    b -= plants[p2];
                    p2--;
                } else {
                    b -= plants[p2];
                    p2--;
                    a -= plants[p1];
                    p1++;
                }
            } else if (a >= plants[p1]) {
                a -= plants[p1];
                p1++;
            } else if (b >= plants[p2]) {
                b -= plants[p2];
                p2--;
            }
        }
        return count;
