Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int n = arr.length;
        int[] dp = new int[n];
        for (int i = 0; i < n; i++) {
            int max = 0;
            for (int j = 1; j <= k && i - j + 1 >= 0; j++) {
                max = Math.max(max, arr[i - j + 1]);
                dp[i] = Math.max(dp[i], (i >= j ? dp[i - j] : 0) + max * j);
            }
        }
        return dp[n - 1];

=======

        int n = arr.length;
        int[] dp = new int[n];
        dp[0] = arr[0];
        for (int i = 1; i < n; i++) {
            int max = arr[i];
            int sum = max;
            for (int j = 1; j < k; j++) {
                if (i - j >= 0) {
                    max = Math.max(max, arr[i - j]);
                    sum = Math.max(sum, max * (j + 1) + (i - j > 0 ? dp[i - j - 1] : 0));
                } else {
                    break;
                }
            }
            dp[i] = sum;
        }
        return dp[n - 1];

=======

        int[] dp = new int[arr.length];
        for (int i = 0; i < arr.length; i++) {
            int max = 0;
            for (int j = 1; j <= k && i - j + 1 >= 0; j++) {
                max = Math.max(max, arr[i - j + 1]);
                dp[i] = Math.max(dp[i], (i >= j ? dp[i - j] : 0) + max * j);
            }
        }
        return dp[arr.length - 1];

=======

        int[] dp = new int[arr.length];
        for (int i = 0; i < arr.length; i++) {
            int max = arr[i];
            for (int j = 1; j <= k && i - j + 1 >= 0; j++) {
                max = Math.max(max, arr[i - j + 1]);
                dp[i] = Math.max(dp[i], (i >= j ? dp[i - j] : 0) + max * j);
            }
        }
        return dp[arr.length - 1];

=======

        int n = arr.length;
        int[] dp = new int[n];
        for (int i = 0; i < n; i++) {
            int max = arr[i];
            for (int j = 1; j <= k && i - j + 1 >= 0; j++) {
                max = Math.max(max, arr[i - j + 1]);
                dp[i] = Math.max(dp[i], (i >= j ? dp[i - j] : 0) + j * max);
            }
        }
        return dp[n - 1];

=======

        int n = arr.length;
        int[] dp = new int[n];
        for (int i = 0; i < n; i++) {
            int max = arr[i];
            for (int j = 1; j <= k && i - j + 1 >= 0; j++) {
                max = Math.max(max, arr[i - j + 1]);
                if (i - j >= 0) {
                    dp[i] = Math.max(dp[i], dp[i - j] + max * j);
                } else {
                    dp[i] = Math.max(dp[i], max * j);
                }
            }
        }
        return dp[n - 1];

=======

        int n = arr.length;
        int[] dp = new int[n];
        for (int i = 0; i < n; ++i) {
            int mx = 0;
            for (int j = 1; j <= k && i - j + 1 >= 0; ++j) {
                mx = Math.max(mx, arr[i - j + 1]);
                dp[i] = Math.max(dp[i], (i >= j ? dp[i - j] : 0) + mx * j);
            }
        }
        return dp[n - 1];

=======

        int[] dp = new int[arr.length];
        for (int i = 0; i < arr.length; i++) {
            int max = arr[i];
            for (int j = 1; i - j + 1 >= 0 && j <= k; j++) {
                max = Math.max(max, arr[i - j + 1]);
                dp[i] = Math.max(dp[i], (i >= j ? dp[i - j] : 0) + max * j);
            }
        }
        return dp[arr.length - 1];
