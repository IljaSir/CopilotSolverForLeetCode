Synthesizing 10/10 solutions

=======

        int res = 0;
        for (int i = 0; i < n / 2; i++) {
            res += n - (2 * i + 1);
        }
        return res;

=======

        int[] arr = new int[n];
        int sum = 0;
        for (int i = 0; i < n; i++) {
            arr[i] = (2 * i) + 1;
            sum += arr[i];
        }
        int avg = sum / n;
        int count = 0;
        for (int i = 0; i < n; i++) {
            if (arr[i] > avg) {
                count += arr[i] - avg;
            }
        }
        return count;

=======

        int[] arr = new int[n];
        int sum = 0;
        for(int i = 0; i < n; i++) {
            arr[i] = (2 * i) + 1;
            sum += arr[i];
        }
        int target = sum / n;
        int count = 0;
        for(int i = 0; i < n / 2; i++) {
            count += target - arr[i];
        }
        return count;

=======

        int sum = 0;
        for (int i = 0; i < n; i++) {
            sum += 2 * i + 1;
        }
        int target = sum / n;
        int res = 0;
        for (int i = 0; i < n / 2; i++) {
            res += target - (2 * i + 1);
        }
        return res;

=======

        int[] arr = new int[n];
        for (int i = 0; i < n; i++) {
            arr[i] = (2 * i) + 1;
        }
        int mid = arr[n / 2];
        int ans = 0;
        for (int num : arr) {
            ans += Math.abs(mid - num) / 2;
        }
        return ans;

=======

        int sum = 0;
        for (int i = 0; i < n; i++) {
            sum += 2 * i + 1;
        }
        int target = sum / n;
        int result = 0;
        for (int i = 0; i < n / 2; i++) {
            result += target - (2 * i + 1);
        }
        return result;

=======

        int[] arr = new int[n];
        for(int i = 0; i < n; i++) {
            arr[i] = (2 * i) + 1;
        }
        int target = 0;
        for(int i = 0; i < n; i++) {
            target += arr[i];
        }
        target /= n;
        int count = 0;
        for(int i = 0; i < n / 2; i++) {
            count += target - arr[i];
        }
        return count;

=======

        int res = 0;
        int i = 0;
        while (i < n / 2) {
            res += n - (2 * i + 1);
            i++;
        }
        return res;

=======

        int[] arr = new int[n];
        for(int i=0;i<n;i++){
            arr[i] = (2*i)+1;
        }
        int mid = arr[n/2];
        int count = 0;
        for(int i=0;i<n/2;i++){
            count+=mid-arr[i];
        }
        return count;

=======

        int sum = 0;
        for(int i=0;i<n;i++){
            sum += (2*i)+1;
        }
        int res = sum/n;
        int count = 0;
        for(int i=0;i<n;i++){
            if((2*i)+1>res){
                count += ((2*i)+1)-res;
            }
        }
        return count;
