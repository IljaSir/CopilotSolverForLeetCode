Synthesizing 10/10 solutions

=======

        int[] res = new int[n];
        Stack<Integer> stack = new Stack<>();
        int prev = 0;
        for (String log : logs) {
            String[] strs = log.split(":");
            int id = Integer.parseInt(strs[0]);
            int cur = Integer.parseInt(strs[2]);
            if (strs[1].equals("start")) {
                if (!stack.isEmpty()) {
                    res[stack.peek()] += cur - prev;
                }
                stack.push(id);
                prev = cur;
            } else {
                res[stack.pop()] += cur - prev + 1;
                prev = cur + 1;
            }
        }
        return res;

=======

        int[] res = new int[n];
        Stack<Integer> stack = new Stack<>();
        int prevTime = 0;
        for (String log : logs) {
            String[] arr = log.split(":");
            int id = Integer.parseInt(arr[0]);
            String type = arr[1];
            int time = Integer.parseInt(arr[2]);
            if (type.equals("start")) {
                if (!stack.isEmpty()) {
                    res[stack.peek()] += time - prevTime;
                }
                stack.push(id);
                prevTime = time;
            } else {
                res[stack.pop()] += time - prevTime + 1;
                prevTime = time + 1;
            }
        }
        return res;

=======

        int[] res = new int[n];
        Stack<Integer> stack = new Stack<>();
        int prev = 0;
        for (String log : logs) {
            String[] arr = log.split(":");
            int curr = Integer.parseInt(arr[2]);
            if (arr[1].equals("start")) {
                if (!stack.isEmpty()) {
                    res[stack.peek()] += curr - prev;
                }
                stack.push(Integer.parseInt(arr[0]));
                prev = curr;
            } else {
                res[stack.pop()] += curr - prev + 1;
                prev = curr + 1;
            }
        }
        return res;

=======

        int[] result = new int[n];
        Stack<Integer> stack = new Stack<>();
        int prevTime = 0;
        for (String log: logs) {
            String[] parts = log.split(":");
            int id = Integer.parseInt(parts[0]);
            int time = Integer.parseInt(parts[2]);
            if (parts[1].equals("start")) {
                if (!stack.isEmpty()) {
                    result[stack.peek()] += time - prevTime;
                }
                stack.push(id);
                prevTime = time;
            }
            else {
                result[stack.pop()] += time - prevTime + 1;
                prevTime = time + 1;
            }
        }
        return result;

=======

        int[] res = new int[n];
        Stack<int[]> stack = new Stack<>();
        for (String log : logs) {
            String[] arr = log.split(":");
            int id = Integer.parseInt(arr[0]);
            int time = Integer.parseInt(arr[2]);
            if (arr[1].equals("start")) {
                stack.push(new int[]{id, time});
            } else {
                int[] cur = stack.pop();
                int interval = time - cur[1] + 1;
                res[id] += interval;
                if (!stack.isEmpty()) {
                    res[stack.peek()[0]] -= interval;
                }
            }
        }
        return res;

=======

        int[] result = new int[n];
        Stack<Integer> stack = new Stack<>();
        int prevTime = 0;
        for (String log : logs) {
            String[] s = log.split(":");
            int id = Integer.parseInt(s[0]);
            int time = Integer.parseInt(s[2]);
            if (s[1].equals("start")) {
                if (!stack.isEmpty()) {
                    result[stack.peek()] += time - prevTime;
                }
                stack.push(id);
                prevTime = time;
            } else {
                result[stack.pop()] += time - prevTime + 1;
                prevTime = time + 1;
            }
        }
        return result;

=======

        int[] res = new int[n];
        Stack<Integer> stack = new Stack<>();
        int preTime = 0;
        for (String log : logs) {
            String[] strs = log.split(":");
            int curId = Integer.parseInt(strs[0]);
            int curTime = Integer.parseInt(strs[2]);
            if (strs[1].equals("start")) {
                if (!stack.isEmpty()) {
                    res[stack.peek()] += curTime - preTime;
                }
                stack.push(curId);
                preTime = curTime;
            } else {
                res[stack.pop()] += curTime - preTime + 1;
                preTime = curTime + 1;
            }
        }
        return res;

=======

        int[] result = new int[n];
        Stack<Integer> stack = new Stack<>();
        int prevTime = 0;
        for (String log : logs) {
            String[] logParts = log.split(":");
            int funcId = Integer.parseInt(logParts[0]);
            String type = logParts[1];
            int timestamp = Integer.parseInt(logParts[2]);
            if (type.equals("start")) {
                if (!stack.isEmpty()) {
                    result[stack.peek()] += timestamp - prevTime;
                }
                stack.push(funcId);
                prevTime = timestamp;
            } else {
                result[stack.pop()] += timestamp - prevTime + 1;
                prevTime = timestamp + 1;
            }
        }
        return result;

=======

        int[] result = new int[n];
        if (logs == null || logs.isEmpty()) {
            return result;
        }
        int prevTime = 0;
        Stack<Integer> stack = new Stack<>();
        for (String log : logs) {
            String[] parts = log.split(":");
            int id = Integer.parseInt(parts[0]);
            int time = Integer.parseInt(parts[2]);
            if (parts[1].equals("start")) {
                if (!stack.isEmpty()) {
                    result[stack.peek()] += time - prevTime;
                }
                stack.push(id);
                prevTime = time;
            } else {
                result[stack.pop()] += time - prevTime + 1;
                prevTime = time + 1;
            }
        }
        return result;

=======

        int[] res=new int[n];
        Stack<int[]> stack=new Stack<>();
        for(int i=0;i<logs.size();i++){
            String[] log=logs.get(i).split(":");
            int id=Integer.parseInt(log[0]);
            int time=Integer.parseInt(log[2]);
            if(log[1].equals("start")){
                stack.push(new int[]{id,time});
            }else{
                int[] start=stack.pop();
                int interval=time-start[1]+1;
                res[id]+=interval;
                if(!stack.isEmpty()){
                    res[stack.peek()[0]]-=interval;
                }
            }
        }
        return res;
