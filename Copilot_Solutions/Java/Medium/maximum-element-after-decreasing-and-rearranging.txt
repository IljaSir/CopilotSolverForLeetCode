Synthesizing 10/10 solutions (Duplicates hidden)

=======

        Arrays.sort(arr);
        arr[0] = 1;
        for (int i = 1; i < arr.length; i++) {
            arr[i] = Math.min(arr[i], arr[i - 1] + 1);
        }
        return arr[arr.length - 1];

=======

        Arrays.sort(arr);
        arr[0] = 1;
        for (int i = 1; i < arr.length; i++) {
            if (arr[i] - arr[i - 1] > 1) {
                arr[i] = arr[i - 1] + 1;
            }
        }
        return arr[arr.length - 1];

=======

        Arrays.sort(arr);
        int n = arr.length;
        arr[0] = 1;
        for (int i = 1; i < n; i++) {
            if (arr[i] - arr[i - 1] > 1) {
                arr[i] = arr[i - 1] + 1;
            }
        }
        return arr[n - 1];

=======

        Arrays.sort(arr);
        int n = arr.length;
        if (arr[0] != 1) {
            arr[0] = 1;
        }
        for (int i = 1; i < n; i++) {
            if (arr[i] > arr[i - 1] + 1) {
                arr[i] = arr[i - 1] + 1;
            }
        }
        return arr[n - 1];

=======

        Arrays.sort(arr);
        int len = arr.length;
        arr[0] = 1;
        for (int i = 1; i < len; i++) {
            arr[i] = Math.min(arr[i], arr[i - 1] + 1);
        }
        return arr[len - 1];

=======

        int n = arr.length;
        Arrays.sort(arr);
        arr[0] = 1;
        for(int i=1; i<n; i++){
            arr[i] = Math.min(arr[i], arr[i-1]+1);
        }
        return arr[n-1];

=======

        int[] cnt = new int[arr.length + 1];
        for (int a : arr) {
            cnt[Math.min(a, arr.length)]++;
        }
        int miss = 0;
        for (int i = 1; i <= arr.length; ++i) {
            if (cnt[i] == 0) {
                miss++;
            } else {
                miss -= Math.min(cnt[i] - 1, miss);
            }
        }
        return arr.length - miss;
