Synthesizing 10/10 solutions

=======

        int n = nums.length;
        int ans = 0;
        for (int i = 0; i < n; i++) {
            Set<Integer> set = new HashSet<>();
            for (int j = i; j < n; j++) {
                set.add(nums[j]);
                if (set.contains(nums[j] ^ 32)) {
                    ans = Math.max(ans, j - i + 1);
                }
            }
        }
        return ans;

=======

        int n = nums.length;
        int[] prefix = new int[n + 1];
        for (int i = 1; i <= n; i++) {
            prefix[i] = prefix[i - 1] ^ nums[i - 1];
        }
        int ans = 0;
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j <= n; j++) {
                if ((prefix[j] ^ prefix[i]) == 0) {
                    ans = Math.max(ans, j - i);
                }
            }
        }
        return ans;

=======

        int max = 0;
        for (int i = 0; i < nums.length; i++) {
            int[] count = new int[26];
            for (int j = i; j < nums.length; j++) {
                int index = nums[j] < 97 ? nums[j] - 65 : nums[j] - 97;
                count[index]++;
                if (count[index] == 2) {
                    max = Math.max(max, j - i + 1);
                }
            }
        }
        return max;

=======

        int n = nums.length;
        int maxLen = 0;
        for (int i = 0; i < n; i++) {
            int[] cnt = new int[26];
            for (int j = i; j < n; j++) {
                int idx = nums[j] < 97 ? nums[j] - 65 : nums[j] - 97 + 13;
                cnt[idx]++;
                if (cnt[idx] == 1) {
                    int pairIdx = nums[j] < 97 ? nums[j] - 65 + 13 : nums[j] - 97;
                    if (cnt[pairIdx] == 0) {
                        break;
                    }
                }
                maxLen = Math.max(maxLen, j - i + 1);
            }
        }
        return maxLen;

=======

        int n = nums.length;
        int[] bits = new int[n];
        for (int i = 0; i < n; i++) {
            bits[i] = 0;
            for (int j = 0; j < 10; j++) {
                if ((nums[i] & (1 << j)) > 0) {
                    bits[i] |= 1 << j;
                }
            }
        }
        int[] dp = new int[n];
        dp[0] = 1;
        int max = 1;
        for (int i = 1; i < n; i++) {
            int x = bits[i];
            int j = i - 1;
            while (j >= 0 && (x & bits[j]) == 0) {
                x |= bits[j];
                j--;
            }
            if (x == 1023) {
                dp[i] = i - j;
            } else {
                dp[i] = 1;
            }
            max = Math.max(max, dp[i]);
        }
        return max;

=======

        int n = nums.length;
        int[] pre = new int[n];
        int[] suf = new int[n];
        for (int i = 0; i < n; i++) {
            pre[i] = suf[i] = nums[i];
            for (int j = i - 1; j >= 0; j--) {
                pre[j] &= nums[i];
                suf[i] &= nums[j];
            }
        }
        int ans = 0;
        for (int i = 0; i < n; i++) {
            for (int j = i; j < n; j++) {
                if (pre[i] == suf[j]) {
                    ans = Math.max(ans, j - i + 1);
                }
            }
        }
        return ans;

=======

        int n = nums.length;
        int[] count = new int[26];
        int[] count2 = new int[26];
        int res = 0;
        for (int i = 0; i < n; i++) {
            for (int j = i; j < n; j++) {
                int v = nums[j] - 'a';
                if (v < 0) {
                    count2[-v]++;
                } else {
                    count[v]++;
                }
                if (Arrays.equals(count, count2)) {
                    res = Math.max(res, j - i + 1);
                }
            }
            Arrays.fill(count, 0);
            Arrays.fill(count2, 0);
        }
        return res;

=======

        int n = nums.length;
        int[] map = new int[1 << 10];
        Arrays.fill(map, -2);
        map[0] = -1;
        int res = 0;
        int mask = 0;
        for (int i = 0; i < n; i++) {
            mask ^= nums[i];
            if (map[mask] == -2) {
                map[mask] = i;
            } else {
                res = Math.max(res, i - map[mask]);
            }
            for (int j = 0; j < 10; j++) {
                int t = mask ^ (1 << j);
                if (map[t] != -2) {
                    res = Math.max(res, i - map[t]);
                }
            }
        }
        return res;

=======

        int n = nums.length;
        int[] count = new int[26];
        int[] count1 = new int[26];
        int res = 0;
        for (int i = 0; i < n; i++) {
            Arrays.fill(count, 0);
            Arrays.fill(count1, 0);
            for (int j = i; j < n; j++) {
                if (nums[j] >= 97) {
                    count1[nums[j] - 97]++;
                } else {
                    count[nums[j] - 65]++;
                }
                if (Arrays.equals(count, count1)) {
                    res = Math.max(res, j - i + 1);
                }
            }
        }
        return res;

=======

        int n = nums.length;
        int ans = 0;
        for(int i=0;i<n;i++){
            int[] arr = new int[26];
            for(int j=i;j<n;j++){
                char c = (char)(nums[j] - 1 + 'a');
                arr[c-'a']++;
                if(arr[c-'a'] == 1){
                    if(c - 'a' < 13){
                        arr[c-'a'+13]++;
                    }else{
                        arr[c-'a'-13]++;
                    }
                }
                boolean flag = true;
                for(int k=0;k<26;k++){
                    if(arr[k] != 0 && arr[k] != 2){
                        flag = false;
                        break;
                    }
                }
                if(flag){
                    ans = Math.max(ans, j - i + 1);
                }
            }
        }
        return ans;
