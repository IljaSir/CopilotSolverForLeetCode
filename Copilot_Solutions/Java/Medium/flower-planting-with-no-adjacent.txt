Synthesizing 10/10 solutions

=======

        Map<Integer, List<Integer>> graph = new HashMap<>();
        for (int i = 1; i <= n; i++) {
            graph.put(i, new ArrayList<>());
        }
        for (int[] path : paths) {
            graph.get(path[0]).add(path[1]);
            graph.get(path[1]).add(path[0]);
        }
        int[] res = new int[n];
        for (int i = 1; i <= n; i++) {
            boolean[] used = new boolean[5];
            for (int j : graph.get(i)) {
                used[res[j - 1]] = true;
            }
            for (int j = 1; j <= 4; j++) {
                if (!used[j]) {
                    res[i - 1] = j;
                    break;
                }
            }
        }
        return res;

=======

        Map<Integer, List<Integer>> graph = new HashMap<>();
        for (int i = 1; i <= n; i++) {
            graph.put(i, new ArrayList<>());
        }
        for (int[] path : paths) {
            graph.get(path[0]).add(path[1]);
            graph.get(path[1]).add(path[0]);
        }
        int[] res = new int[n];
        for (int i = 1; i <= n; i++) {
            boolean[] used = new boolean[5];
            for (int neighbor : graph.get(i)) {
                used[res[neighbor - 1]] = true;
            }
            for (int j = 1; j <= 4; j++) {
                if (!used[j]) {
                    res[i - 1] = j;
                }
            }
        }
        return res;

=======

        Map<Integer, List<Integer>> graph = new HashMap<>();
        for (int i = 0; i < n; i++) {
            graph.put(i, new ArrayList<>());
        }
        for (int[] path : paths) {
            graph.get(path[0] - 1).add(path[1] - 1);
            graph.get(path[1] - 1).add(path[0] - 1);
        }
        int[] ans = new int[n];
        for (int i = 0; i < n; i++) {
            Set<Integer> colors = new HashSet<>();
            for (int j : graph.get(i)) {
                colors.add(ans[j]);
            }
            for (int c = 1; c <= 4; c++) {
                if (!colors.contains(c)) {
                    ans[i] = c;
                    break;
                }
            }
        }
        return ans;

=======

        int[] res = new int[n];
        List<List<Integer>> graph = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            graph.add(new ArrayList<>());
        }
        for (int[] path : paths) {
            graph.get(path[0] - 1).add(path[1] - 1);
            graph.get(path[1] - 1).add(path[0] - 1);
        }
        for (int i = 0; i < n; i++) {
            boolean[] used = new boolean[5];
            for (int j : graph.get(i)) {
                used[res[j]] = true;
            }
            for (int k = 1; k <= 4; k++) {
                if (!used[k]) {
                    res[i] = k;
                }
            }
        }
        return res;

=======

        int[] res = new int[n];
        List<Integer>[] graph = new List[n];
        for (int i = 0; i < n; i++) {
            graph[i] = new ArrayList<>();
        }
        for (int[] path : paths) {
            graph[path[0] - 1].add(path[1] - 1);
            graph[path[1] - 1].add(path[0] - 1);
        }
        for (int i = 0; i < n; i++) {
            boolean[] used = new boolean[5];
            for (int j : graph[i]) {
                used[res[j]] = true;
            }
            for (int j = 1; j <= 4; j++) {
                if (!used[j]) {
                    res[i] = j;
                    break;
                }
            }
        }
        return res;

=======

        int[] result = new int[n];
        List<Integer>[] graph = new ArrayList[n];
        for (int i = 0; i < n; i++) {
            graph[i] = new ArrayList<>();
        }
        for (int[] path : paths) {
            graph[path[0] - 1].add(path[1] - 1);
            graph[path[1] - 1].add(path[0] - 1);
        }
        for (int i = 0; i < n; i++) {
            boolean[] used = new boolean[5];
            for (int j : graph[i]) {
                used[result[j]] = true;
            }
            for (int k = 1; k <= 4; k++) {
                if (!used[k]) {
                    result[i] = k;
                }
            }
        }
        return result;

=======

        int[] res = new int[n];
        ArrayList<Integer>[] graph = new ArrayList[n];
        for (int i = 0; i < n; i++) {
            graph[i] = new ArrayList<>();
        }
        for (int[] path : paths) {
            graph[path[0] - 1].add(path[1] - 1);
            graph[path[1] - 1].add(path[0] - 1);
        }
        for (int i = 0; i < n; i++) {
            boolean[] used = new boolean[5];
            for (int j : graph[i]) {
                used[res[j]] = true;
            }
            for (int j = 1; j <= 4; j++) {
                if (!used[j]) {
                    res[i] = j;
                    break;
                }
            }
        }
        return res;

=======

        int[] res = new int[n];
        Map<Integer, List<Integer>> map = new HashMap<>();
        for (int i = 0; i < n; i++) {
            map.put(i, new ArrayList<>());
        }
        for (int[] path : paths) {
            map.get(path[0] - 1).add(path[1] - 1);
            map.get(path[1] - 1).add(path[0] - 1);
        }
        for (int i = 0; i < n; i++) {
            boolean[] used = new boolean[5];
            for (int j : map.get(i)) {
                used[res[j]] = true;
            }
            for (int j = 1; j <= 4; j++) {
                if (!used[j]) {
                    res[i] = j;
                    break;
                }
            }
        }
        return res;

=======

        int[] res = new int[n];
        List<Integer>[] graph = new List[n];
        for (int i = 0; i < n; i++)
            graph[i] = new ArrayList<>();
        for (int[] path : paths) {
            graph[path[0] - 1].add(path[1] - 1);
            graph[path[1] - 1].add(path[0] - 1);
        }
        for (int i = 0; i < n; i++) {
            boolean[] used = new boolean[5];
            for (int j : graph[i])
                used[res[j]] = true;
            for (int j = 1; j <= 4; j++) {
                if (!used[j]) {
                    res[i] = j;
                    break;
                }
            }
        }
        return res;

=======

        int[] ans = new int[n];
        List<Integer>[] graph = new List[n];
        for(int i=0; i<n; i++)
            graph[i] = new ArrayList<>();
        for(int[] path: paths){
            graph[path[0]-1].add(path[1]-1);
            graph[path[1]-1].add(path[0]-1);
        }
        for(int i=0; i<n; i++){
            boolean[] used = new boolean[5];
            for(int j: graph[i])
                used[ans[j]] = true;
            for(int j=1; j<=4; j++)
                if(!used[j])
                    ans[i] = j;
        }
        return ans;
