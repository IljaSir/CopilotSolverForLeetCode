Synthesizing 10/10 solutions

=======

        int[] dp = new int[num + 1];
        Arrays.fill(dp, Integer.MAX_VALUE);
        dp[0] = 0;
        for (int i = 1; i <= num; i++) {
            for (int j = 1; j <= 9; j++) {
                if (i - j >= 0 && dp[i - j] != Integer.MAX_VALUE) {
                    dp[i] = Math.min(dp[i], dp[i - j] + 1);
                }
            }
        }
        return dp[num] == Integer.MAX_VALUE ? -1 : dp[num];

=======

        int[] dp = new int[num + 1];
        Arrays.fill(dp, num + 1);
        dp[0] = 0;
        for (int i = 0; i <= num; i++) {
            for (int j = 0; j <= 9; j++) {
                if (i + j > num) {
                    continue;
                }
                dp[i + j] = Math.min(dp[i + j], dp[i] + 1);
            }
        }
        return dp[num] == num + 1 ? -1 : dp[num];

=======

        if (num == 0) {
            return 0;
        }
        int[] dp = new int[num + 1];
        Arrays.fill(dp, Integer.MAX_VALUE);
        dp[0] = 0;
        for (int i = 0; i <= num; i++) {
            if (dp[i] != Integer.MAX_VALUE) {
                for (int j = 1; j <= 9; j++) {
                    if (i + j * k <= num) {
                        dp[i + j * k] = Math.min(dp[i + j * k], dp[i] + j);
                    }
                }
            }
        }
        return dp[num] == Integer.MAX_VALUE ? -1 : dp[num];

=======

        if (num < k) {
            return -1;
        }
        if (num == k) {
            return 1;
        }
        if (num % 9 == k) {
            return num / 9;
        }
        if ((num - k) % 9 == 0) {
            return (num - k) / 9 + 1;
        }
        return -1;

=======

        if (num == 0) {
            return 0;
        }
        if (num < k) {
            return -1;
        }
        int count = 0;
        while (num > 0) {
            if (num < k) {
                count += 1;
                num = 0;
            } else {
                count += num / k;
                num = num % k;
            }
        }
        return count;

=======

        if (num == 0) {
            return 0;
        }
        int[] dp = new int[num + 1];
        Arrays.fill(dp, num + 1);
        dp[0] = 0;
        for (int i = 0; i <= num; i++) {
            for (int j = 0; j < 10; j++) {
                if (i + j <= num) {
                    dp[i + j] = Math.min(dp[i + j], dp[i] + 1);
                }
            }
        }
        return dp[num] > num ? -1 : dp[num];

=======

        if (num == 0) {
            return 0;
        }
        if (num < k) {
            return -1;
        }
        int ans = 0;
        while (num > 0) {
            if (num >= k) {
                num -= k;
                ans++;
            } else {
                break;
            }
        }
        return ans;

=======

        if (num == 0) {
            return 0;
        }
        if (k == 0) {
            return -1;
        }
        int res = 0;
        while (num > 0) {
            res++;
            num -= k;
        }
        if (num == 0) {
            return res;
        }
        return res + 1;

=======

        int[] dp = new int[10];
        dp[0] = 0;
        for (int i = 1; i < 10; i++) {
            dp[i] = num - i;
        }
        for (int i = 1; i < 10; i++) {
            if (dp[i] < 0) {
                return -1;
            }
            if (dp[i] % 9 == 0) {
                dp[i] /= 9;
            } else {
                dp[i] = dp[i] / 9 + 1;
            }
        }
        return dp[k];

=======

        if(k==0){
            if(num==0)return 0;
            return -1;
        }
        int ans = 0;
        while(num>0){
            ans++;
            num-=k;
        }
        if(num<0)return -1;
        return ans;
