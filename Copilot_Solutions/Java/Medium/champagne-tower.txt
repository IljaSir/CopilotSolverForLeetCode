Synthesizing 10/10 solutions

=======

        double[][] dp = new double[101][101];
        dp[0][0] = poured;
        for (int i = 0; i <= query_row; i++) {
            for (int j = 0; j <= i; j++) {
                double q = (dp[i][j] - 1.0) / 2.0;
                if (q > 0) {
                    dp[i + 1][j] += q;
                    dp[i + 1][j + 1] += q;
                }
            }
        }
        return Math.min(1, dp[query_row][query_glass]);

=======

        double[][] glasses = new double[101][101];
        glasses[0][0] = poured;
        for (int i = 0; i <= query_row; i++) {
            for (int j = 0; j <= i; j++) {
                if (glasses[i][j] > 1) {
                    double overflow = (glasses[i][j] - 1) / 2;
                    glasses[i + 1][j] += overflow;
                    glasses[i + 1][j + 1] += overflow;
                }
            }
        }
        return Math.min(1, glasses[query_row][query_glass]);

=======

        double[][] glasses = new double[101][101];
        glasses[0][0] = poured;
        for (int i = 0; i <= query_row; i++) {
            for (int j = 0; j <= i; j++) {
                double excess = (glasses[i][j] - 1) / 2.0;
                if (excess > 0) {
                    glasses[i + 1][j] += excess;
                    glasses[i + 1][j + 1] += excess;
                }
            }
        }
        return Math.min(1, glasses[query_row][query_glass]);

=======

        double[][] dp = new double[102][102];
        dp[0][0] = poured;
        for (int i = 0; i <= query_row; i++) {
            for (int j = 0; j <= i; j++) {
                if (dp[i][j] > 1) {
                    dp[i + 1][j] += (dp[i][j] - 1) / 2;
                    dp[i + 1][j + 1] += (dp[i][j] - 1) / 2;
                    dp[i][j] = 1;
                }
            }
        }
        return dp[query_row][query_glass];

=======

        double[][] tower = new double[101][101];
        tower[0][0] = poured;
        for (int i = 0; i <= query_row; i++) {
            for (int j = 0; j <= i; j++) {
                double drop = (tower[i][j] - 1) / 2.0;
                if (drop > 0) {
                    tower[i + 1][j] += drop;
                    tower[i + 1][j + 1] += drop;
                }
            }
        }
        return Math.min(1, tower[query_row][query_glass]);

=======

        double[][] tower = new double[101][101];
        tower[0][0] = poured;
        for (int i = 0; i <= query_row; i++) {
            for (int j = 0; j <= i; j++) {
                double q = (tower[i][j] - 1) / 2.0;
                if (q > 0) {
                    tower[i + 1][j] += q;
                    tower[i + 1][j + 1] += q;
                }
            }
        }
        return Math.min(1, tower[query_row][query_glass]);

=======

        double[][] glass = new double[101][101];
        glass[0][0] = poured;
        for (int i = 0; i <= query_row; i++) {
            for (int j = 0; j <= i; j++) {
                if (glass[i][j] > 1) {
                    glass[i][j] -= 1;
                    glass[i + 1][j] += glass[i][j] / 2;
                    glass[i + 1][j + 1] += glass[i][j] / 2;
                }
            }
        }
        return Math.min(glass[query_row][query_glass], 1);

=======

        double[][] glass = new double[101][101];
        glass[0][0] = poured;
        for (int i = 0; i <= query_row; i++) {
            for (int j = 0; j <= i; j++) {
                double flow = (glass[i][j] - 1.0) / 2.0;
                if (flow > 0) {
                    glass[i + 1][j] += flow;
                    glass[i + 1][j + 1] += flow;
                }
            }
        }
        return Math.min(1, glass[query_row][query_glass]);

=======

        double[] res = new double[101];
        res[0] = poured;
        for (int i = 0; i <= query_row; i++) {
            for (int j = i; j >= 0; j--) {
                res[j + 1] += Math.max(0, (res[j] - 1) / 2);
                res[j] = Math.max(0, (res[j] - 1) / 2);
            }
        }
        return Math.min(1, res[query_glass]);

=======

        double[] res = new double[100];
        res[0] = poured;
        for (int i = 0; i < query_row; i++) {
            for (int j = i; j >= 0; j--) {
                res[j + 1] += Math.max(0, (res[j] - 1) / 2);
                res[j] = Math.max(0, (res[j] - 1) / 2);
            }
        }
        return Math.min(1, res[query_glass]);
