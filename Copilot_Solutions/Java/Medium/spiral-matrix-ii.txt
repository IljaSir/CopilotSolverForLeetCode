Synthesizing 10/10 solutions

=======

        int[][] matrix = new int[n][n];
        int rowBegin = 0;
        int rowEnd = n - 1;
        int colBegin = 0;
        int colEnd = n - 1;
        int num = 1;
        while (rowBegin <= rowEnd && colBegin <= colEnd) {
            for (int i = colBegin; i <= colEnd; i++) {
                matrix[rowBegin][i] = num++;
            }
            rowBegin++;
            for (int i = rowBegin; i <= rowEnd; i++) {
                matrix[i][colEnd] = num++;
            }
            colEnd--;
            if (rowBegin <= rowEnd) {
                for (int i = colEnd; i >= colBegin; i--) {
                    matrix[rowEnd][i] = num++;
                }
            }
            rowEnd--;
            if (colBegin <= colEnd) {
                for (int i = rowEnd; i >= rowBegin; i--) {
                    matrix[i][colBegin] = num++;
                }
            }
            colBegin++;
        }
        return matrix;

=======

        int[][] matrix = new int[n][n];
        int top = 0;
        int bottom = n - 1;
        int left = 0;
        int right = n - 1;
        int count = 1;
        while (top <= bottom && left <= right) {
            for (int i = left; i <= right; i++) {
                matrix[top][i] = count++;
            }
            top++;
            for (int i = top; i <= bottom; i++) {
                matrix[i][right] = count++;
            }
            right--;
            for (int i = right; i >= left; i--) {
                matrix[bottom][i] = count++;
            }
            bottom--;
            for (int i = bottom; i >= top; i--) {
                matrix[i][left] = count++;
            }
            left++;
        }
        return matrix;

=======

        int[][] matrix = new int[n][n];
        int top = 0;
        int bottom = n-1;
        int left = 0;
        int right = n-1;
        int num = 1;
        while (left <= right && top <= bottom) {
            for (int i=left; i<=right; i++) {
                matrix[top][i] = num++;
            }
            for (int i=top+1; i<=bottom; i++) {
                matrix[i][right] = num++;
            }
            if (left < right && top < bottom) {
                for (int i=right-1; i>left; i--) {
                    matrix[bottom][i] = num++;
                }
                for (int i=bottom; i>top; i--) {
                    matrix[i][left] = num++;
                }
            }
            left++;
            right--;
            top++;
            bottom--;
        }
        return matrix;

=======

        int[][] res = new int[n][n];
        int num = 1;
        int left = 0, right = n - 1, top = 0, bottom = n - 1;
        while (left <= right && top <= bottom) {
            // 从左到右
            for (int i = left; i <= right; i++) {
                res[top][i] = num++;
            }
            // 从上到下
            for (int i = top + 1; i <= bottom; i++) {
                res[i][right] = num++;
            }
            // 从右到左
            for (int i = right - 1; i >= left; i--) {
                res[bottom][i] = num++;
            }
            // 从下到上
            for (int i = bottom - 1; i > top; i--) {
                res[i][left] = num++;
            }
            left++;
            right--;
            top++;
            bottom--;
        }
        return res;

=======

        int[][] result = new int[n][n];
        int left = 0, right = n - 1, top = 0, bottom = n - 1;
        int num = 1;
        while (left <= right && top <= bottom) {
            for (int i = left; i <= right; i++) {
                result[top][i] = num++;
            }
            top++;
            for (int i = top; i <= bottom; i++) {
                result[i][right] = num++;
            }
            right--;
            for (int i = right; i >= left; i--) {
                result[bottom][i] = num++;
            }
            bottom--;
            for (int i = bottom; i >= top; i--) {
                result[i][left] = num++;
            }
            left++;
        }
        return result;

=======

        int[][] result = new int[n][n];
        int num = 1;
        int rowStart = 0;
        int rowEnd = n - 1;
        int colStart = 0;
        int colEnd = n - 1;
        while (rowStart <= rowEnd && colStart <= colEnd) {
            for (int i = colStart; i <= colEnd; i++) {
                result[rowStart][i] = num++;
            }
            rowStart++;
            for (int i = rowStart; i <= rowEnd; i++) {
                result[i][colEnd] = num++;
            }
            colEnd--;
            for (int i = colEnd; i >= colStart; i--) {
                result[rowEnd][i] = num++;
            }
            rowEnd--;
            for (int i = rowEnd; i >= rowStart; i--) {
                result[i][colStart] = num++;
            }
            colStart++;
        }
        return result;

=======

        int[][] ans = new int[n][n];
        int num = 1;
        int left = 0, right = n - 1, top = 0, bottom = n - 1;
        while (left <= right && top <= bottom) {
            for (int i = left; i <= right; i++) {
                ans[top][i] = num++;
            }
            for (int i = top + 1; i <= bottom; i++) {
                ans[i][right] = num++;
            }
            if (left < right && top < bottom) {
                for (int i = right - 1; i > left; i--) {
                    ans[bottom][i] = num++;
                }
                for (int i = bottom; i > top; i--) {
                    ans[i][left] = num++;
                }
            }
            left++;
            right--;
            top++;
            bottom--;
        }
        return ans;

=======

        int[][] matrix = new int[n][n];
        int top = 0, down = n - 1, left = 0, right = n - 1;
        int num = 1;
        while (num <= n * n) {
            for (int i = left; i <= right; i++) {
                matrix[top][i] = num++;
            }
            top++;
            for (int i = top; i <= down; i++) {
                matrix[i][right] = num++;
            }
            right--;
            for (int i = right; i >= left; i--) {
                matrix[down][i] = num++;
            }
            down--;
            for (int i = down; i >= top; i--) {
                matrix[i][left] = num++;
            }
            left++;
        }
        return matrix;

=======

        int[][] ans = new int[n][n];
        int count = 1;
        int rowStart = 0, rowEnd = n-1, colStart = 0, colEnd = n-1;
        while (rowStart <= rowEnd && colStart <= colEnd) {
            for (int i = colStart; i <= colEnd; i++) {
                ans[rowStart][i] = count++;
            }
            rowStart++;
            for (int i = rowStart; i <= rowEnd; i++) {
                ans[i][colEnd] = count++;
            }
            colEnd--;
            if (rowStart <= rowEnd) {
                for (int i = colEnd; i >= colStart; i--) {
                    ans[rowEnd][i] = count++;
                }
                rowEnd--;
            }
            if (colStart <= colEnd) {
                for (int i = rowEnd; i >= rowStart; i--) {
                    ans[i][colStart] = count++;
                }
                colStart++;
            }
        }
        return ans;

=======

        int[][] matrix = new int[n][n];
        int i = 0, j = 0, k = 0;
        int[] di = new int[]{0, 1, 0, -1};
        int[] dj = new int[]{1, 0, -1, 0};
        for (int num = 1; num <= n * n; num++) {
            matrix[i][j] = num;
            if (matrix[(i + di[k] + n) % n][(j + dj[k] + n) % n] != 0) {
                k = (k + 1) % 4;
            }
            i = (i + di[k] + n) % n;
            j = (j + dj[k] + n) % n;
        }
        return matrix;
