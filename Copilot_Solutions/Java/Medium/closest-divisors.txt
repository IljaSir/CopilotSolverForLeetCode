Synthesizing 10/10 solutions

=======

        int[] ans = new int[2];
        int min = Integer.MAX_VALUE;
        for (int i = 1; i <= Math.sqrt(num + 2); i++) {
            if ((num + 1) % i == 0) {
                if (Math.abs((num + 1) / i - i) < min) {
                    min = Math.abs((num + 1) / i - i);
                    ans[0] = (num + 1) / i;
                    ans[1] = i;
                }
            }
            if ((num + 2) % i == 0) {
                if (Math.abs((num + 2) / i - i) < min) {
                    min = Math.abs((num + 2) / i - i);
                    ans[0] = (num + 2) / i;
                    ans[1] = i;
                }
            }
        }
        return ans;

=======

        int[] res = new int[2];
        int minDiff = Integer.MAX_VALUE;
        for (int i = 1; i <= Math.sqrt(num + 2); i++) {
            if ((num + 1) % i == 0) {
                int diff = Math.abs(i - (num + 1) / i);
                if (diff < minDiff) {
                    minDiff = diff;
                    res[0] = i;
                    res[1] = (num + 1) / i;
                }
            }
            if ((num + 2) % i == 0) {
                int diff = Math.abs(i - (num + 2) / i);
                if (diff < minDiff) {
                    minDiff = diff;
                    res[0] = i;
                    res[1] = (num + 2) / i;
                }
            }
        }
        return res;

=======

        int[] ans = new int[2];
        ans[0] = ans[1] = Integer.MAX_VALUE;
        for (int i = 1; i * i <= num + 2; i++) {
            if ((num + 1) % i == 0) {
                ans[0] = i;
                ans[1] = (num + 1) / i;
            }
            if ((num + 2) % i == 0) {
                ans[0] = i;
                ans[1] = (num + 2) / i;
            }
        }
        return ans;

=======

        int[] a = find(num+1);
        int[] b = find(num+2);
        return (a[1]-a[0]) <= (b[1]-b[0]) ? a : b;
    }
    private int[] find(int n) {
        int[] res = new int[2];
        int i = (int)Math.sqrt(n);
        while (i > 0) {
            if (n % i == 0) {
                res[0] = i;
                res[1] = n/i;
                break;
            }
            i--;
        }
        return res;

=======

        int[] ans = new int[2];
        int min = Integer.MAX_VALUE;
        for (int i = (int)Math.sqrt(num + 1); i > 0; i--) {
            if ((num + 1) % i == 0) {
                min = Math.min(min, Math.abs(i - (num + 1) / i));
                ans[0] = i;
                ans[1] = (num + 1) / i;
            }
        }
        for (int i = (int)Math.sqrt(num + 2); i > 0; i--) {
            if ((num + 2) % i == 0) {
                if (Math.abs(i - (num + 2) / i) < min) {
                    ans[0] = i;
                    ans[1] = (num + 2) / i;
                }
            }
        }
        return ans;

=======

        int[] ans = new int[2];
        int[] ans1 = new int[2];
        int min1 = Integer.MAX_VALUE;
        int min2 = Integer.MAX_VALUE;
        for (int i = 1; i <= Math.sqrt(num + 1); i++) {
            if ((num + 1) % i == 0) {
                if (Math.abs(i - (num + 1) / i) < min1) {
                    min1 = Math.abs(i - (num + 1) / i);
                    ans[0] = i;
                    ans[1] = (num + 1) / i;
                }
            }
        }
        for (int i = 1; i <= Math.sqrt(num + 2); i++) {
            if ((num + 2) % i == 0) {
                if (Math.abs(i - (num + 2) / i) < min2) {
                    min2 = Math.abs(i - (num + 2) / i);
                    ans1[0] = i;
                    ans1[1] = (num + 2) / i;
                }
            }
        }
        if (min1 < min2) {
            return ans;
        } else {
            return ans1;
        }

=======

        int[] res = new int[2];
        int a = num + 1;
        int b = num + 2;
        int[] divisorsA = getDivisors(a);
        int[] divisorsB = getDivisors(b);
        int minDiff = Integer.MAX_VALUE;
        int minDiffA = Integer.MAX_VALUE;
        int minDiffB = Integer.MAX_VALUE;
        for (int i = 0; i < divisorsA.length; i++) {
            for (int j = i; j < divisorsA.length; j++) {
                if (Math.abs(divisorsA[i] - divisorsA[j]) < minDiffA) {
                    minDiffA = Math.abs(divisorsA[i] - divisorsA[j]);
                    res[0] = divisorsA[i];
                    res[1] = divisorsA[j];
                }
            }
        }
        for (int i = 0; i < divisorsB.length; i++) {
            for (int j = i; j < divisorsB.length; j++) {
                if (Math.abs(divisorsB[i] - divisorsB[j]) < minDiffB) {
                    minDiffB = Math.abs(divisorsB[i] - divisorsB[j]);
                    res[0] = divisorsB[i];
                    res[1] = divisorsB[j];
                }
            }
        }
        if (minDiffA < minDiffB) {
            res[0] = divisorsA[0];
            res[1] = divisorsA[1];
        }
        return res;
    }
    
    public int[] getDivisors(int num) {
        List<Integer> list = new ArrayList<>();
        for (int i = 1; i * i <= num; i++) {
            if (num % i == 0) {
                list.add(i);
                list.add(num / i);
            }
        }
        int[] res = new int[list.size()];
        for (int i = 0; i < list.size(); i++) {
            res[i] = list.get(i);
        }
        return res;

=======

        int[] result = new int[2];
        int[] array1 = getDivisors(num + 1);
        int[] array2 = getDivisors(num + 2);
        if (Math.abs(array1[0] - array1[1]) <= Math.abs(array2[0] - array2[1])) {
            result[0] = array1[0];
            result[1] = array1[1];
        } else {
            result[0] = array2[0];
            result[1] = array2[1];
        }
        return result;
    }
    private int[] getDivisors(int num) {
        int[] result = new int[2];
        int i = 1;
        while (i * i <= num) {
            if (num % i == 0) {
                result[0] = i;
                result[1] = num / i;
            }
            i++;
        }
        return result;

=======

        int[] res = new int[2];
        int[] res1 = new int[2];
        int[] res2 = new int[2];
        
        int n1 = num + 1;
        int n2 = num + 2;
        
        int i = 1;
        while (i <= Math.sqrt(n1)) {
            if (n1 % i == 0) {
                res1[0] = i;
                res1[1] = n1 / i;
            }
            i++;
        }
        i = 1;
        while (i <= Math.sqrt(n2)) {
            if (n2 % i == 0) {
                res2[0] = i;
                res2[1] = n2 / i;
            }
            i++;
        }
        
        if (Math.abs(res1[0] - res1[1]) < Math.abs(res2[0] - res2[1])) {
            return res1;
        } else {
            return res2;
        }

=======

        int[] result = new int[2];
        int[] result1 = new int[2];
        int[] result2 = new int[2];
        int min = Integer.MAX_VALUE;
        int min1 = Integer.MAX_VALUE;
        int min2 = Integer.MAX_VALUE;
        for (int i = 1; i <= Math.sqrt(num + 1); i++) {
            if ((num + 1) % i == 0) {
                int j = (num + 1) / i;
                if (Math.abs(i - j) < min) {
                    min = Math.abs(i - j);
                    result[0] = i;
                    result[1] = j;
                }
            }
        }
        for (int i = 1; i <= Math.sqrt(num + 2); i++) {
            if ((num + 2) % i == 0) {
                int j = (num + 2) / i;
                if (Math.abs(i - j) < min) {
                    min = Math.abs(i - j);
                    result[0] = i;
                    result[1] = j;
                }
            }
        }
        return result;
