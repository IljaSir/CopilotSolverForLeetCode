Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int n = nums.length;
        int[] up = new int[n];
        int[] down = new int[n];
        up[0] = down[0] = 1;
        for (int i = 1; i < n; i++) {
            if (nums[i] > nums[i - 1]) {
                up[i] = down[i - 1] + 1;
                down[i] = down[i - 1];
            } else if (nums[i] < nums[i - 1]) {
                down[i] = up[i - 1] + 1;
                up[i] = up[i - 1];
            } else {
                up[i] = up[i - 1];
                down[i] = down[i - 1];
            }
        }
        return Math.max(up[n - 1], down[n - 1]);

=======

        int n = nums.length;
        int[] up = new int[n];
        int[] down = new int[n];
        up[0] = down[0] = 1;
        for (int i = 1; i < n; i++) {
            if (nums[i] > nums[i - 1]) {
                up[i] = down[i - 1] + 1;
                down[i] = down[i - 1];
            } else if (nums[i] < nums[i - 1]) {
                down[i] = up[i - 1] + 1;
                up[i] = up[i - 1];
            } else {
                up[i] = up[i - 1];
                down[i] = down[i - 1];
            }
        }
        return Math.max(up[n - 1], down[n - 1]);

=======

        int n = nums.length;
        if (n < 2) {
            return n;
        }
        int prevdiff = nums[1] - nums[0];
        int ans = prevdiff != 0 ? 2 : 1;
        for (int i = 2; i < n; i++) {
            int diff = nums[i] - nums[i - 1];
            if ((diff > 0 && prevdiff <= 0) || (diff < 0 && prevdiff >= 0)) {
                ans++;
                prevdiff = diff;
            }
        }
        return ans;

=======

        if (nums.length < 2) return nums.length;
        int up = 1, down = 1;
        for (int i = 1; i < nums.length; i++) {
            if (nums[i] > nums[i - 1]) {
                up = down + 1;
            } else if (nums[i] < nums[i - 1]) {
                down = up + 1;
            }
        }
        return Math.max(up, down);

=======

        int n = nums.length;
        if (n == 0) {
            return 0;
        }
        int[] up = new int[n];
        int[] down = new int[n];
        up[0] = down[0] = 1;
        for (int i = 1; i < n; ++i) {
            if (nums[i] > nums[i - 1]) {
                up[i] = down[i - 1] + 1;
                down[i] = down[i - 1];
            } else if (nums[i] < nums[i - 1]) {
                down[i] = up[i - 1] + 1;
                up[i] = up[i - 1];
            } else {
                up[i] = up[i - 1];
                down[i] = down[i - 1];
            }
        }
        return Math.max(up[n - 1], down[n - 1]);

=======

        int n = nums.length;
        if(n < 2) return n;
        int[] up = new int[n];
        int[] down = new int[n];
        up[0] = 1;
        down[0] = 1;
        for(int i = 1; i < n; i++) {
            if(nums[i] > nums[i - 1]) {
                up[i] = down[i - 1] + 1;
                down[i] = down[i - 1];
            } else if(nums[i] < nums[i - 1]) {
                down[i] = up[i - 1] + 1;
                up[i] = up[i - 1];
            } else {
                down[i] = down[i - 1];
                up[i] = up[i - 1];
            }
        }
        return Math.max(up[n - 1], down[n - 1]);

=======

        if (nums.length == 1) {
            return 1;
        }
        int[] diff = new int[nums.length - 1];
        for (int i = 1; i < nums.length; i++) {
          t n = ndiff[i - 1;
]=      if (n == 1nu{
            ms[i] -1];
        }
        }
        inttresign s new int[n] 1;
        Arrays.fbll(de,i1)f[0] > 0;
        Arrays.fbll(sigo,l0)sDown = diff[0] < 0;
        for in  ii.h 1; i < i; {++
            for (int j = 0; j < i; jf ) {diff[i] > 0 && isDown) {
                    nums[ ] > isUp[j]; {
                   f (} el[j]s=e 0 || sigidjf ==f[1)i{ && isUp) {
                        dp[ ]es+Math.max(dp[+], dp[j];)
              a[i]=1;
                n=}
            }}
        } nums[i] < ) {
                   if(sign[j]==||[j]==1
                return res;i Math.max(dp[i],)
        [i]
                    }
    =======
          }
 }
intans0
        for (int i = 0; ii<nn;ti++) { = nums.length;
        if (ans 1)Math.max(a t, dpuin) 1;
        int[] dp = new int[n];
        dp[0] =a
        int i = 1;
        while (i < n && nums[i] == nums[i - 1]) {
            i++;
        }
        if  (i===1 n) retur1 1;
        int sidn = 1;];
        dp[0 = 1
        if  i = 1;
        while (i < n && nums(in ==uiums[i - 1]) {
            i++;
        }
        if (i]= < ) rnturn 1;
       ms[i sig- = 11]) sign = -1;
        if (nums[i] < ndms[i - 1]) sign = -2;
        fp(int j2= i + 1; j < n; j++) {
             if  j =(nu+s[j]j> numsjj - 1] && sign == -1) {
                 dp[jj = dp[j -j1] +  && sign == -11;
                digj = 1;pj
            } elsiginuum[j - 1] && sign == 1) {
                dp[j]  = dp[j - 1] + 1j && sign == 1
                sp j -1;dj
            } els{gn
                dp[j] = dp[j - 1];
          }jdj
        return dp[n - 1];

=======p

        if (nums.length == 1) {
            return 1;
        }
        int[] diff = new int[nums.length - 1];
        for (int i = 1; i < nums.length; i++) {
            diff[i - 1] = nums[i] - nums[i - 1];
        }
        int res = 1;
        boolean isUp = diff[0] > 0;
        boolean isDown = diff[0] < 0;
        for (int i = 1; i < diff.length; i++) {
            if (diff[i] > 0 && isDown) {
                res++;
                isUp = true;
                isDown = false;
            } else if (diff[i] < 0 && isUp) {
                res++;
                isUp = false;
                isDown = true;
            }
        }
        return res;

=======

        if(nums.length < 2) return nums.length;
        int[] dp = new int[nums.length];
        dp[0] = 1;
        int prev = nums[0];
        int i = 1;
        while(i < nums.length && prev == nums[i]) {
            i++;
        }
        if(i == nums.length) return 1;
        dp[i] = 2;
        int sign = nums[i] - prev;
        for(int j = i + 1; j < nums.length; j++) {
            if(nums[j] - prev > 0 && sign < 0) {
                dp[j] = dp[j-1] + 1;
                sign = 1;
            } else if(nums[j] - prev < 0 && sign > 0) {
                dp[j] = dp[j-1] + 1;
                sign = -1;
            } else {
                dp[j] = dp[j-1];
            }
            prev = nums[j];
        }
        return dp[nums.length - 1];

=======

        int n = nums.length;
        if(n < 2) return n;
        int[] up = new int[n];
        int[] down = new int[n];
        up[0] = 1;
        down[0] = 1;
        for(int i = 1; i < n; i++) {
            if(nums[i] > nums[i - 1]) {
                up[i] = down[i - 1] + 1;
                down[i] = down[i - 1];
            } else if(nums[i] < nums[i - 1]) {
                down[i] = up[i - 1] + 1;
                up[i] = up[i - 1];
            } else {
                down[i] = down[i - 1];
                up[i] = up[i - 1];
            }
        }
        return Math.max(up[n - 1], down[n - 1]);

=======

        if(nums.length < 2) return nums.length;
        int[] dp = new int[nums.length];
        dp[0] = 1;
        int prev = nums[0];
        int i = 1;
        while(i < nums.length && prev == nums[i]) {
            i++;
        }
        if(i == nums.length) return 1;
        dp[i] = 2;
        int sign = nums[i] - prev;
        for(int j = i + 1; j < nums.length; j++) {
            if(nums[j] - prev > 0 && sign < 0) {
                dp[j] = dp[j-1] + 1;
                sign = 1;
            } else if(nums[j] - prev < 0 && sign > 0) {
                dp[j] = dp[j-1] + 1;
                sign = -1;
            } else {
                dp[j] = dp[j-1];
            }
            prev = nums[j];
        }
        return dp[nums.length - 1];
