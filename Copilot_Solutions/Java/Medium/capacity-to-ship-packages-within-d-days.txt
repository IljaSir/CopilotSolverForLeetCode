Synthesizing 10/10 solutions

=======

        int left = 0;
        int right = 0;
        for (int weight : weights) {
            left = Math.max(left, weight);
            right += weight;
        }
        while (left < right) {
            int mid = left + (right - left) / 2;
            if (canShip(weights, days, mid)) {
                right = mid;
            } else {
                left = mid + 1;
            }
        }
        return left;
    }
    private boolean canShip(int[] weights, int days, int capacity) {
        int day = 1;
        int sum = 0;
        for (int weight : weights) {
            sum += weight;
            if (sum > capacity) {
                sum = weight;
                day++;
                if (day > days) {
                    return false;
                }
            }
        }
        return true;

=======

        int left = 0, right = 0;
        for (int weight : weights) {
            left = Math.max(left, weight);
            right += weight;
        }
        while (left < right) {
            int mid = left + (right - left) / 2;
            int need = 1, cur = 0;
            for (int weight : weights) {
                if (cur + weight > mid) {
                    need++;
                    cur = 0;
                }
                cur += weight;
            }
            if (need <= days) {
                right = mid;
            } else {
                left = mid + 1;
            }
        }
        return left;

=======

        int left = 0, right = 0;
        for (int weight : weights) {
            left = Math.max(left, weight);
            right += weight;
        }
        while (left < right) {
            int mid = left + (right - left) / 2;
            if (canShip(weights, days, mid)) {
                right = mid;
            } else {
                left = mid + 1;
            }
        }
        return left;
    }
    private boolean canShip(int[] weights, int days, int capacity) {
        int need = 1;
        int cur = 0;
        for (int weight : weights) {
            if (cur + weight > capacity) {
                need++;
                cur = 0;
            }
            cur += weight;
        }
        return need <= days;

=======

        int sum = 0;
        int max = 0;
        for (int i = 0; i < weights.length; i++) {
            sum += weights[i];
            max = Math.max(max, weights[i]);
        }
        int left = max;
        int right = sum;
        while (left < right) {
            int mid = left + (right - left) / 2;
            if (canShip(weights, days, mid)) {
                right = mid;
            } else {
                left = mid + 1;
            }
        }
        return left;
    }

    private boolean canShip(int[] weights, int days, int capacity) {
        int count = 0;
        int sum = 0;
        for (int i = 0; i < weights.length; i++) {
            if (weights[i] > capacity) {
                return false;
            }
            if (sum + weights[i] > capacity) {
                count++;
                sum = 0;
            }
            sum += weights[i];
        }
        return count + 1 <= days;

=======

        int left = 0;
        int right = 0;
        for (int w : weights) {
            left = Math.max(left, w);
            right += w;
        }
        while (left < right) {
            int mid = left + (right - left) / 2;
            int need = 1;
            int cur = 0;
            for (int w : weights) {
                if (cur + w > mid) {
                    need++;
                    cur = 0;
                }
                cur += w;
            }
            if (need > days) {
                left = mid + 1;
            } else {
                right = mid;
            }
        }
        return left;

=======

        int low = 0;
        int high = 0;
        for (int i = 0; i < weights.length; i++) {
            low = Math.max(low, weights[i]);
            high += weights[i];
        }
        while (low < high) {
            int mid = (low + high) / 2;
            int need = 1;
            int cur = 0;
            for (int i = 0; i < weights.length && need <= days; i++) {
                if (cur + weights[i] > mid) {
                    need++;
                    cur = 0;
                }
                cur += weights[i];
            }
            if (need > days) {
                low = mid + 1;
            } else {
                high = mid;
            }
        }
        return low;

=======

        int min = 0;
        int max = 0;
        for (int w : weights) {
            min = Math.max(min, w);
            max += w;
        }
        while (min < max) {
            int mid = min + (max - min) / 2;
            int sum = 0;
            int day = 1;
            for (int w : weights) {
                sum += w;
                if (sum > mid) {
                    sum = w;
                    day++;
                }
            }
            if (day > days) {
                min = mid + 1;
            } else {
                max = mid;
            }
        }
        return min;

=======

        int min = 0, max = 0;
        for (int w : weights) {
            min = Math.max(min, w);
            max += w;
        }
        while (min < max) {
            int mid = min + (max - min) / 2;
            int sum = 0, d = 1;
            for (int w : weights) {
                if (sum + w > mid) {
                    sum = 0;
                    d++;
                }
                sum += w;
            }
            if (d > days) {
                min = mid + 1;
            } else {
                max = mid;
            }
        }
        return min;

=======

        int max = 0;
        int sum = 0;
        for (int w : weights) {
            max = Math.max(max, w);
            sum += w;
        }
        int l = max;
        int r = sum;
        while (l < r) {
            int mid = (l + r) / 2;
            int need = 1;
            int cur = 0;
            for (int w : weights) {
                if (cur + w > mid) {
                    need++;
                    cur = 0;
                }
                cur += w;
            }
            if (need <= days) {
                r = mid;
            } else {
                l = mid + 1;
            }
        }
        return l;

=======

        int min = 0;
        int max = 0;
        for(int weight: weights) {
            min = Math.max(min, weight);
            max += weight;
        }
        int result = max;
        while(min <= max) {
            int mid = min + (max - min) / 2;
            if (canShip(weights, days, mid)) {
                result = Math.min(result, mid);
                max = mid - 1;
            } else {
                min = mid + 1;
            }
        }
        return result;
    }
    
    private boolean canShip(int[] weights, int days, int capacity) {
        int count = 0;
        int sum = 0;
        for(int weight: weights) {
            if (sum + weight > capacity) {
                count++;
                sum = 0;
            }
            sum += weight;
        }
        return count < days;
