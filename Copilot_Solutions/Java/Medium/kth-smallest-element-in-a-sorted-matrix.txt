Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int n = matrix.length;
        int low = matrix[0][0];
        int high = matrix[n - 1][n - 1];
        while (low < high) {
            int mid = low + (high - low) / 2;
            int count = 0;
            int j = n - 1;
            for (int i = 0; i < n; i++) {
                while (j >= 0 && matrix[i][j] > mid) {
                    j--;
                }
                count += (j + 1);
            }
            if (count < k) {
                low = mid + 1;
            } else {
                high = mid;
            }
        }
        return low;

=======

        int n = matrix.length;
        int l = matrix[0][0];
        int r = matrix[n - 1][n - 1];
        while (l < r) {
            int mid = l + (r - l) / 2;
            int c = count(matrix, mid);
            if (c < k) {
                l = mid + 1;
            } else {
                r = mid;
            }
        }
        return l;
    }

    private int count(int[][] matrix, int x) {
        int n = matrix.length;
        int i = n - 1;
        int j = 0;
        int c = 0;
        while (i >= 0 && j < n) {
            if (matrix[i][j] <= x) {
                c += i + 1;
                j++;
            } else {
                i--;
            }
        }
        return c;

=======

        int n = matrix.length;
        int l = matrix[0][0];
        int r = matrix[n - 1][n - 1];
        while (l < r) {
            int mid = l + (r - l) / 2;
            int count = 0;
            int j = n - 1;
            for (int i = 0; i < n; i++) {
                while (j >= 0 && matrix[i][j] > mid) {
                    j--;
                }
                count += (j + 1);
            }
            if (count < k) {
                l = mid + 1;
            } else {
                r = mid;
            }
        }
        return l;

=======

        int n = matrix.length;
        int l = matrix[0][0];
        int r = matrix[n-1][n-1];
        while (l < r) {
            int mid = l + (r - l) / 2;
            int cnt = 0;
            for (int i = 0; i < n; i++) {
                for (int j = 0; j < n; j++) {
                    if (matrix[i][j] <= mid) {
                        cnt++;
                    }
                }
            }
            if (cnt < k) {
                l = mid + 1;
            } else {
                r = mid;
            }
        }
        return l;

=======

        int n = matrix.length;
        int l = matrix[0][0];
        int r = matrix[n-1][n-1];
        while (l < r) {
            int m = l + (r - l) / 2;
            int count = 0;
            for (int i = 0; i < n; i++) {
                for (int j = 0; j < n; j++) {
                    if (matrix[i][j] <= m) {
                        count++;
                    }
                }
            }
            if (count < k) {
                l = m + 1;
            } else {
                r = m;
            }
        }
        return l;

=======

        int n = matrix.length;
        int lo = matrix[0][0];
        int hi = matrix[n-1][n-1];
        while(lo < hi){
            int mid = lo + (hi - lo) / 2;
            int count = 0;
            for(int i = 0; i < n; i++){
                for(int j = 0; j < n; j++){
                    if(matrix[i][j] <= mid){
                        count++;
                    }
                }
            }
            if(count < k){
                lo = mid + 1;
            }else{
                hi = mid;
            }
        }
        return lo;

=======

        int n = matrix.length;
        int l = matrix[0][0];
        int r = matrix[n-1][n-1];
        while(l < r) {
            int mid = l + (r - l) / 2;
            int cnt = 0;
            for(int i = 0; i < n; i++) {
                cnt += upper_bound(matrix[i], mid);
            }
            if(cnt < k) {
                l = mid + 1;
            } else {
                r = mid;
            }
        }
        return l;
    }
    
    public int upper_bound(int[] arr, int x) {
        int l = 0;
        int r = arr.length;
        while(l < r) {
            int mid = l + (r - l) / 2;
            if(arr[mid] <= x) {
                l = mid + 1;
            } else {
                r = mid;
            }
        }
        return l;

=======

        int n = matrix.length;
        int l = matrix[0][0];
        int r = matrix[n - 1][n - 1];
        int mid = 0;
        while (l < r) {
            mid = l + (r - l) / 2;
            int count = 0;
            int j = n - 1;
            for (int i = 0; i < n; i++) {
                while (j >= 0 && matrix[i][j] > mid) {
                    j--;
                }
                count += (j + 1);
            }
            if (count < k) {
                l = mid + 1;
            } else {
                r = mid;
            }
        }
        return l;

=======

        int n = matrix.length;
        int[] arr = new int[n * n];
        int index = 0;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                arr[index++] = matrix[i][j];
            }
        }
        Arrays.sort(arr);
        return arr[k - 1];
