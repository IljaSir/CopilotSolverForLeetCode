Synthesizing 10/10 solutions

=======

        int left = 1;
        int right = 0;
        for (int num : nums) {
            right = Math.max(right, num);
        }
        while (left < right) {
            int mid = left + (right - left) / 2;
            int count = 0;
            for (int num : nums) {
                count += (num - 1) / mid;
            }
            if (count > maxOperations) {
                left = mid + 1;
            } else {
                right = mid;
            }
        }
        return left;

=======

        int left = 1;
        int right = 1000000000;
        while (left < right) {
            int mid = left + (right - left) / 2;
            int count = 0;
            for (int num : nums) {
                count += (num - 1) / mid;
            }
            if (count > maxOperations) {
                left = mid + 1;
            } else {
                right = mid;
            }
        }
        return left;

=======

        int low = 1;
        int high = 0;
        for (int num : nums) {
            high = Math.max(high, num);
        }
        while (low < high) {
            int mid = low + (high - low) / 2;
            int operations = 0;
            for (int num : nums) {
                operations += (num - 1) / mid;
            }
            if (operations > maxOperations) {
                low = mid + 1;
            } else {
                high = mid;
            }
        }
        return low;

=======

        int left = 1;
        int right = 1000000000;
        while (left < right) {
            int mid = (left + right) / 2;
            int count = 0;
            for (int num : nums) {
                count += (num - 1) / mid;
            }
            if (count > maxOperations) {
                left = mid + 1;
            } else {
                right = mid;
            }
        }
        return left;

=======

        int left = 1;
        int right = 0;
        for (int n : nums) {
            right = Math.max(right, n);
        }
        while (left < right) {
            int mid = (left + right) / 2;
            int operations = 0;
            for (int n : nums) {
                operations += (n - 1) / mid;
            }
            if (operations > maxOperations) {
                left = mid + 1;
            } else {
                right = mid;
            }
        }
        return left;

=======

        int max = 0;
        for (int num : nums) {
            max = Math.max(max, num);
        }
        int left = 1;
        int right = max;
        while (left < right) {
            int mid = (left + right) / 2;
            if (check(nums, mid, maxOperations)) {
                right = mid;
            } else {
                left = mid + 1;
            }
        }
        return left;
    }

    private boolean check(int[] nums, int mid, int maxOperations) {
        for (int num : nums) {
            if (num <= mid) {
                continue;
            }
            int count = num / mid;
            if (num % mid == 0) {
                count--;
            }
            maxOperations -= count;
            if (maxOperations < 0) {
                return false;
            }
        }
        return true;

=======

        int left = 1, right = 1000000000;
        while (left < right) {
            int mid = (left + right) / 2;
            int operations = 0;
            for (int num : nums) {
                operations += (num - 1) / mid;
            }
            if (operations > maxOperations) {
                left = mid + 1;
            } else {
                right = mid;
            }
        }
        return left;

=======

        int left = 1, right = 1000000000;
        while (left < right) {
            int mid = (left + right) / 2;
            if (check(nums, maxOperations, mid)) {
                right = mid;
            } else {
                left = mid + 1;
            }
        }
        return left;
    }

    private boolean check(int[] nums, int maxOperations, int limit) {
        int count = 0;
        for (int num : nums) {
            count += (num - 1) / limit;
        }
        return count <= maxOperations;

=======

        int left = 1, right = (int)1e9;
        while (left < right) {
            int mid = left + (right - left) / 2;
            if (check(nums, maxOperations, mid)) {
                right = mid;
            } else {
                left = mid + 1;
            }
        }
        return left;
    }
    
    private boolean check(int[] nums, int maxOperations, int limit) {
        int operations = 0;
        for (int num : nums) {
            operations += (num - 1) / limit;
        }
        return operations <= maxOperations;

=======

        int low = 1;
        int high = (int) 1e9;
        while (low < high) {
            int mid = low + (high - low) / 2;
            if (canDivide(nums, maxOperations, mid)) {
                high = mid;
            } else {
                low = mid + 1;
            }
        }
        return low;
    }
    
    private boolean canDivide(int[] nums, int maxOperations, int threshold) {
        for (int num : nums) {
            maxOperations -= (num - 1) / threshold;
            if (maxOperations < 0) {
                return false;
            }
        }
        return true;
