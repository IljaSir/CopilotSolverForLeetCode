Synthesizing 10/10 solutions

=======

        int area1 = (ax2 - ax1) * (ay2 - ay1);
        int area2 = (bx2 - bx1) * (by2 - by1);
        int overlap = 0;
        if (ax1 < bx2 && bx1 < ax2 && ay1 < by2 && by1 < ay2) {
            int xOverlap = Math.min(ax2, bx2) - Math.max(ax1, bx1);
            int yOverlap = Math.min(ay2, by2) - Math.max(ay1, by1);
            overlap = xOverlap * yOverlap;
        }
        return area1 + area2 - overlap;

=======

        int area1 = (ax2 - ax1) * (ay2 - ay1);
        int area2 = (bx2 - bx1) * (by2 - by1);
        int overlap = 0;
        if (ax2 > bx1 && bx2 > ax1 && ay2 > by1 && by2 > ay1) {
            overlap = (Math.min(ax2, bx2) - Math.max(ax1, bx1)) * (Math.min(ay2, by2) - Math.max(ay1, by1));
        }
        return area1 + area2 - overlap;

=======

        int area1 = (ax2 - ax1) * (ay2 - ay1);
        int area2 = (bx2 - bx1) * (by2 - by1);
        int overlap = 0;
        if (ax1 < bx2 && ax2 > bx1 && ay1 < by2 && ay2 > by1) {
            overlap = (Math.min(ax2, bx2) - Math.max(ax1, bx1)) * (Math.min(ay2, by2) - Math.max(ay1, by1));
        }
        return area1 + area2 - overlap;

=======

        int area1 = (ax2 - ax1) * (ay2 - ay1);
        int area2 = (bx2 - bx1) * (by2 - by1);
        int overlap = 0;
        if (ax2 > bx1 && bx2 > ax1 && ay2 > by1 && by2 > ay1) {
            int x1 = Math.max(ax1, bx1);
            int y1 = Math.max(ay1, by1);
            int x2 = Math.min(ax2, bx2);
            int y2 = Math.min(ay2, by2);
            overlap = (x2 - x1) * (y2 - y1);
        }
        return area1 + area2 - overlap;

=======

        int areaA = (ax2 - ax1) * (ay2 - ay1);
        int areaB = (bx2 - bx1) * (by2 - by1);
        int overlap = 0;
        if (ax2 > bx1 && ax1 < bx2 && ay2 > by1 && ay1 < by2) {
            int left = Math.max(ax1, bx1);
            int right = Math.min(ax2, bx2);
            int bottom = Math.max(ay1, by1);
            int top = Math.min(ay2, by2);
            overlap = (right - left) * (top - bottom);
        }
        return areaA + areaB - overlap;

=======

        int areaA = (ax2 - ax1) * (ay2 - ay1);
        int areaB = (bx2 - bx1) * (by2 - by1);
        int overlap = 0;
        if (ax2 > bx1 && bx2 > ax1 && ay2 > by1 && by2 > ay1) {
            overlap = (Math.min(ax2, bx2) - Math.max(ax1, bx1)) * (Math.min(ay2, by2) - Math.max(ay1, by1));
        }
        return areaA + areaB - overlap;

=======

        int a = (ax2 - ax1) * (ay2 - ay1);
        int b = (bx2 - bx1) * (by2 - by1);
        int x = Math.max(0, Math.min(ax2, bx2) - Math.max(ax1, bx1));
        int y = Math.max(0, Math.min(ay2, by2) - Math.max(ay1, by1));
        return a + b - x * y;

=======

        int area1 = (ax2 - ax1) * (ay2 - ay1);
        int area2 = (bx2 - bx1) * (by2 - by1);
        int overlap = Math.max(0, Math.min(ax2, bx2) - Math.max(ax1, bx1)) * Math.max(0, Math.min(ay2, by2) - Math.max(ay1, by1));
        return area1 + area2 - overlap;

=======

        int area1 = (ax2 - ax1) * (ay2 - ay1);
        int area2 = (bx2 - bx1) * (by2 - by1);
        int xOverlap = Math.max(0, Math.min(ax2, bx2) - Math.max(ax1, bx1));
        int yOverlap = Math.max(0, Math.min(ay2, by2) - Math.max(ay1, by1));
        int overlap = xOverlap * yOverlap;
        return area1 + area2 - overlap;

=======

        int area = (ax2 - ax1) * (ay2 - ay1) + (bx2 - bx1) * (by2 - by1);
        int overlap = 0;
        if (ax1 < bx2 && ax2 > bx1 && ay1 < by2 && ay2 > by1) {
            int x = Math.min(ax2, bx2) - Math.max(ax1, bx1);
            int y = Math.min(ay2, by2) - Math.max(ay1, by1);
            overlap = x * y;
        }
        return area - overlap;
