Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int count = 0;
        for (int i = 0; i < grid.length; i++) {
            for (int j = 0; j < grid[i].length; j++) {
                if (grid[i][j] == grid[j][i]) {
                    count++;
                }
            }
        }
        return count;

=======

        int n = grid.length;
        int count = 0;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                for (int k = j+1; k < n; k++) {
                    if (grid[i][j] == grid[i][k]) {
                        count++;
                    }
                }
                for (int k = i+1; k < n; k++) {
                    if (grid[i][j] == grid[k][j]) {
                        count++;
                    }
                }
            }
        }
        return count;

=======

        int n = grid.length;
        int count = 0;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == grid[j][i]) {
                    count++;
                }
            }
        }
        return count;

=======

        int n = grid.length;
        int m = grid[0].length;
        int count = 0;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (grid[i][j] == grid[j][i]) {
                    count++;
                }
            }
        }
        return count;

=======

        int n = grid.length;
        int[][] row = new int[n][n];
        int[][] col = new int[n][n];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                row[i][j] = grid[i][j];
                col[j][i] = grid[i][j];
            }
        }
        int count = 0;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (Arrays.equals(row[i], col[j])) {
                    count++;
                }
            }
        }
        return count;

=======

        int n = grid.length;
        int[][] row = new int[n][n];
        int[][] col = new int[n][n];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                row[i][j] = grid[i][j];
                col[i][j] = grid[j][i];
            }
        }
        int res = 0;
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                if (Arrays.equals(row[i], row[j])) {
                    res++;
                }
                if (Arrays.equals(col[i], col[j])) {
                    res++;
                }
            }
        }
        return res;
    }
}

=======

        int n = grid.length;
        int m = grid[0].length;
        int[] row = new int[n];
        int[] col = new int[m];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                row[i] = row[i] * 10 + grid[i][j];
                col[j] = col[j] * 10 + grid[i][j];
            }
        }
        int ans = 0;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (row[i] == col[j]) {
                    ans++;
                }
            }
        }
        return ans;

=======

        int res = 0;
        int n = grid.length;
        int[][] row = new int[n][n];
        int[][] col = new int[n][n];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                row[i][j] = grid[i][j];
                col[i][j] = grid[j][i];
            }
        }
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (Arrays.equals(row[i], col[j])) {
                    res++;
                }
            }
        }
        return res;

=======

        int count = 0;
        for(int i = 0; i < grid.length; i++){
            for(int j = 0; j < grid.length; j++){
                if(i != j){
                    if(Arrays.equals(grid[i], grid[j])){
                        count++;
                    }
                }
            }
        }
        return count;
