Synthesizing 10/10 solutions

=======

        for (int i = 1; i <= num.length() / 2; i++) {
            for (int j = 1; Math.max(i, j) <= num.length() - i - j; j++) {
                if (isValid(i, j, num)) {
                    return true;
                }
            }
        }
        return false;
    }
    
    private boolean isValid(int i, int j, String num) {
        if (num.charAt(i) == '0' && j > 1) {
            return false;
        }
        if (num.charAt(0) == '0' && i > 1) {
            return false;
        }
        Long num1 = Long.parseLong(num.substring(0, i));
        Long num2 = Long.parseLong(num.substring(i, i + j));
        String sum;
        for (int start = i + j; start != num.length(); start += sum.length()) {
            num2 = num2 + num1;
            num1 = num2 - num1;
            sum = num2.toString();
            if (!num.startsWith(sum, start)) {
                return false;
            }
        }
        return true;

=======

        int n = num.length();
        for (int i = 1; i <= n / 2; ++i) {
            for (int j = 1; Math.max(j, i) <= n - i - j; ++j) {
                if (isValid(i, j, num)) {
                    return true;
                }
            }
        }
        return false;
    }

    public boolean isValid(int i, int j, String num) {
        if (num.charAt(i) == '0' && j > 1) {
            return false;
        }
        Long x1 = Long.parseLong(num.substring(0, i));
        Long x2 = Long.parseLong(num.substring(i, i + j));
        for (int start = i + j; start != num.length(); start += x2.toString().length()) {
            x2 = x1 + x2;
            x1 = x2 - x1;
            String str = x2.toString();
            if (!num.startsWith(str, start)) {
                return false;
            }
        }
        return true;

=======

        for (int i = 1; i <= num.length() / 2; i++) {
            for (int j = 1; Math.max(j, i) <= num.length() - i - j; j++) {
                if (isValid(i, j, num)) {
                    return true;
                }
            }
        }
        return false;
    }
    
    private boolean isValid(int i, int j, String num) {
        if (num.charAt(i) == '0' && j > 1) {
            return false;
        }
        if (num.charAt(0) == '0' && i > 1) {
            return false;
        }
        String sum;
        Long x1 = Long.parseLong(num.substring(0, i));
        Long x2 = Long.parseLong(num.substring(i, i + j));
        for (int start = i + j; start != num.length(); start += sum.length()) {
            x2 = x2 + x1;
            x1 = x2 - x1;
            sum = x2.toString();
            if (!num.startsWith(sum, start)) {
                return false;
            }
        }
        return true;

=======

        int n = num.length();
        for (int i = 1; i <= n / 2; i++) {
            for (int j = 1; Math.max(i, j) <= n - i - j; j++) {
                if (isValid(i, j, num)) {
                    return true;
                }
            }
        }
        return false;
    }
    
    private boolean isValid(int i, int j, String num) {
        if (num.charAt(i) == '0' && j > 1) {
            return false;
        }
        if (num.charAt(0) == '0' && i > 1) {
            return false;
        }
        Long x1 = Long.parseLong(num.substring(0, i));
        Long x2 = Long.parseLong(num.substring(i, i + j));
        for (int start = i + j; start < num.length(); start += x2.toString().length()) {
            x2 = x2 + x1;
            x1 = x2 - x1;
            String x2Str = x2.toString();
            if (!num.startsWith(x2Str, start)) {
                return false;
            }
        }
        return true;

=======

        int n = num.length();
        for (int i = 1; i <= n / 2; i++) {
            for (int j = 1; Math.max(i, j) <= n - i - j; j++) {
                if (isValid(i, j, num)) {
                    return true;
                }
            }
        }
        return false;
    }
    
    private boolean isValid(int i, int j, String num) {
        if (num.charAt(i) == '0' && j > 1) {
            return false;
        }
        if (num.charAt(0) == '0' && i > 1) {
            return false;
        }
        long num1 = 0, num2 = 0;
        for (int k = 0; k < i; k++) {
            num1 = num1 * 10 + num.charAt(k) - '0';
        }
        for (int k = i; k < i + j; k++) {
            num2 = num2 * 10 + num.charAt(k) - '0';
        }
        String sum;
        for (int start = i + j; start != num.length(); start += sum.length()) {
            num2 = num2 + num1;
            num1 = num2 - num1;
            sum = Long.toString(num2);
            if (!num.startsWith(sum, start)) {
                return false;
            }
        }
        return true;

=======

        for (int i = 1; i <= num.length() / 2; ++i) {
            for (int j = 1; Math.max(j, i) <= num.length() - i - j; ++j) {
                if (isValid(i, j, num)) {
                    return true;
                }
            }
        }
        return false;
    }
    
    private boolean isValid(int i, int j, String num) {
        if (num.charAt(i) == '0' && j > 1) {
            return false;
        }
        if (num.charAt(0) == '0' && i > 1) {
            return false;
        }
        String sum;
        Long x1 = Long.valueOf(num.substring(0, i));
        Long x2 = Long.valueOf(num.substring(i, i + j));
        for (int start = i + j; start != num.length(); start += sum.length()) {
            x2 = x2 + x1;
            x1 = x2 - x1;
            sum = x2.toString();
            if (!num.startsWith(sum, start)) {
                return false;
            }
        }
        return true;

=======

        for (int i = 1; i < num.length(); i++) {
            for (int j = i + 1; j < num.length(); j++) {
                String s1 = num.substring(0, i);
                String s2 = num.substring(i, j);
                if (isValid(s1, s2, num.substring(j))) {
                    return true;
                }
            }
        }
        return false;
    }
    
    public boolean isValid(String s1, String s2, String s) {
        if (s1.length() > 1 && s1.startsWith("0")) {
            return false;
        }
        if (s2.length() > 1 && s2.startsWith("0")) {
            return false;
        }
        if (s.isEmpty()) {
            return true;
        }
        String sum = add(s1, s2);
        if (s.startsWith(sum)) {
            return isValid(s2, sum, s.substring(sum.length()));
        }
        return false;
    }
    
    public String add(String s1, String s2) {
        StringBuilder sb = new StringBuilder();
        int carry = 0;
        int i = s1.length() - 1;
        int j = s2.length() - 1;
        while (i >= 0 || j >= 0) {
            int c1 = i >= 0 ? s1.charAt(i) - '0' : 0;
            int c2 = j >= 0 ? s2.charAt(j) - '0' : 0;
            int sum = c1 + c2 + carry;
            sb.append(sum % 10);
            carry = sum / 10;
            i--;
            j--;
        }
        if (carry > 0) {
            sb.append(carry);
        }
        return sb.reverse().toString();

=======

        int n = num.length();
        for (int i = 1; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                if (isAdditive(num, 0, i, j)) {
                    return true;
                }
            }
        }
        return false;
    }
    
    private boolean isAdditive(String num, int i, int j, int k) {
        if (num.charAt(i) == '0' && j - i > 1) {
            return false;
        }
        if (num.charAt(j) == '0' && k - j > 1) {
            return false;
        }
        long sum = 0;
        long first = Long.valueOf(num.substring(i, j));
        long second = Long.valueOf(num.substring(j, k));
        for (int l = k; l < num.length(); l++) {
            sum = first + second;
            String s = String.valueOf(sum);
            if (!num.startsWith(s, l)) {
                return false;
            }
            l += s.length() - 1;
            first = second;
            second = sum;
        }
        return true;

=======

        for (int i = 0; i < num.length(); i++) {
            String s1 = num.substring(0, i + 1);
            if (s1.length() > 1 && s1.charAt(0) == '0') {
                break;
            }
            for (int j = i + 1; j < num.length(); j++) {
                String s2 = num.substring(i + 1, j + 1);
                if (s2.length() > 1 && s2.charAt(0) == '0') {
                    break;
                }
                if (isAdditiveNumber(num, s1, s2, j + 1)) {
                    return true;
                }
            }
        }
        return false;
    }
    
    private boolean isAdditiveNumber(String num, String s1, String s2, int start) {
        if (start == num.length()) {
            return true;
        }
        String s3 = String.valueOf(Long.parseLong(s1) + Long.parseLong(s2));
        if (!num.startsWith(s3, start)) {
            return false;
        }
        return isAdditiveNumber(num, s2, s3, start + s3.length());

=======

        int len = num.length();
        for (int i = 1; i <= len / 2; i++) {
            for (int j = i + 1; j < len; j++) {
                if (isValid(i, j, num)) {
                    return true;
                }
            }
        }
        return false;
    }

    private boolean isValid(int i, int j, String num) {
        if (num.charAt(i) == '0' && j - i > 1) {
            return false;
        }
        long num1 = Long.parseLong(num.substring(0, i));
        long num2 = Long.parseLong(num.substring(i, j));
        String sum = "";
        for (int k = j; k < num.length(); k += sum.length()) {
            num2 = num2 + num1;
            num1 = num2 - num1;
            sum = Long.toString(num2);
            if (!num.startsWith(sum, k)) {
                return false;
            }
        }
        return true;
