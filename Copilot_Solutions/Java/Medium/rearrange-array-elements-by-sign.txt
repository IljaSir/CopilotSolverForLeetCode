Synthesizing 10/10 solutions

=======

        int n = nums.length;
        for (int i = 0; i < n; i++) {
            if (i % 2 == 0) {
                if (nums[i] < 0) {
                    continue;
                }
                for (int j = i + 1; j < n; j++) {
                    if (nums[j] < 0) {
                        swap(nums, i, j);
                        break;
                    }
                }
            } else {
                if (nums[i] > 0) {
                    continue;
                }
                for (int j = i + 1; j < n; j++) {
                    if (nums[j] > 0) {
                        swap(nums, i, j);
                        break;
                    }
                }
            }
        }
        return nums;

=======

        int n = nums.length;
        for (int i = 0; i < n - 1; i++) {
            if (i % 2 == 0 && nums[i] > nums[i + 1]) {
                swap(nums, i, i + 1);
            }
            if (i % 2 == 1 && nums[i] < nums[i + 1]) {
                swap(nums, i, i + 1);
            }
        }
        return nums;

=======

        int n = nums.length;
        Arrays.sort(nums);
        int[] ans = new int[n];
        int j = 0;
        for (int i = 0; i < n; i += 2) {
            ans[i] = nums[j++];
        }
        for (int i = 1; i < n; i += 2) {
            ans[i] = nums[j++];
        }
        return ans;

=======

        int[] res = new int[nums.length];
        int l = 0, r = nums.length - 1;
        Arrays.sort(nums);
        for (int i = 0; i < nums.length; i++) {
            if (i % 2 == 0) {
                res[i] = nums[l];
                l++;
            } else {
                res[i] = nums[r];
                r--;
            }
        }
        return res;

=======

        int n = nums.length;
        int[] ans = new int[n];
        int i = 0;
        int j = n - 1;
        Arrays.sort(nums);
        for (int k = 0; k < n; k++) {
            if (k % 2 == 0) {
                ans[k] = nums[i++];
            } else {
                ans[k] = nums[j--];
            }
        }
        return ans;

=======

        int n = nums.length;
        int[] res = new int[n];
        int p = 0;
        int q = n - 1;
        Arrays.sort(nums);
        for (int i = 0; i < n; i++) {
            if (i % 2 == 0) {
                res[i] = nums[p++];
            } else {
                res[i] = nums[q--];
            }
        }
        return res;

=======

        Arrays.sort(nums);
        int[] result = new int[nums.length];
        int i = 0;
        int j = nums.length-1;
        int k = 0;
        while(i < j){
            result[k++] = nums[i++];
            result[k++] = nums[j--];
        }
        if(i == j){
            result[k] = nums[i];
        }
        return result;

=======

        int n = nums.length;
        int[] ans = new int[n];
        Arrays.sort(nums);
        int i = 0;
        for (; i < n / 2; ++i) {
            ans[2 * i] = nums[i];
            ans[2 * i + 1] = nums[n - 1 - i];
        }
        if (n % 2 != 0) {
            ans[n - 1] = nums[i];
        }
        return ans;

=======

        int[] result = new int[nums.length];
        Arrays.sort(nums);
        int mid = nums.length / 2;
        int i = 0;
        int j = mid;
        int k = 0;
        while (i < mid && j < nums.length) {
            result[k++] = nums[i++];
            result[k++] = nums[j++];
        }
        while (i < mid) {
            result[k++] = nums[i++];
        }
        while (j < nums.length) {
            result[k++] = nums[j++];
        }
        return result;

=======

        int size = nums.length;
        int[] result = new int[size];
        int i = 0;
        int j = size - 1;
        int k = 0;
        Arrays.sort(nums);
        while (i < j) {
            result[k++] = nums[j--];
            result[k++] = nums[i++];
        }
        if (i == j) {
            result[k] = nums[i];
        }
        return result;
