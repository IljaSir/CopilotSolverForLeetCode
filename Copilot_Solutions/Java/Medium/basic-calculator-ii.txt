Synthesizing 10/10 solutions

=======

        Stack<Integer> stack = new Stack<>();
        int num = 0;
        char op = '+';
        for (int i = 0; i < s.length(); i++) {
            if (Character.isDigit(s.charAt(i))) {
                num = num * 10 + s.charAt(i) - '0';
            }
            if (!Character.isDigit(s.charAt(i)) && !Character.isWhitespace(s.charAt(i)) || i == s.length() - 1) {
                if (op == '+') {
                    stack.push(num);
                } else if (op == '-') {
                    stack.push(-num);
                } else if (op == '*') {
                    stack.push(stack.pop() * num);
                } else if (op == '/') {
                    stack.push(stack.pop() / num);
                }
                op = s.charAt(i);
                num = 0;
            }
        }
        int res = 0;
        while (!stack.isEmpty()) {
            res += stack.pop();
        }
        return res;

=======

        int n = s.length();
        Stack<Integer> stack = new Stack<>();
        int num = 0;
        char sign = '+';
        for (int i = 0; i < n; i++) {
            if (Character.isDigit(s.charAt(i))) {
                num = num * 10 + s.charAt(i) - '0';
            }
            if ((!Character.isDigit(s.charAt(i)) && ' ' != s.charAt(i)) || i == n - 1) {
                if (sign == '-') {
                    stack.push(-num);
                }
                if (sign == '+') {
                    stack.push(num);
                }
                if (sign == '*') {
                    stack.push(stack.pop() * num);
                }
                if (sign == '/') {
                    stack.push(stack.pop() / num);
                }
                sign = s.charAt(i);
                num = 0;
            }
        }
        int ans = 0;
        for (int i : stack) {
            ans += i;
        }
        return ans;

=======

        int n = s.length();
        Deque<Integer> stack = new LinkedList<>();
        char sign = '+';
        int num = 0;
        for (int i = 0; i < n; i++) {
            if (Character.isDigit(s.charAt(i))) {
                num = num * 10 + s.charAt(i) - '0';
            }
            if ((!Character.isDigit(s.charAt(i)) && s.charAt(i) != ' ') || i == n - 1) {
                if (sign == '+') {
                    stack.push(num);
                } else if (sign == '-') {
                    stack.push(-num);
                } else if (sign == '*') {
                    stack.push(stack.pop() * num);
                } else if (sign == '/') {
                    stack.push(stack.pop() / num);
                }
                sign = s.charAt(i);
                num = 0;
            }
        }
        int res = 0;
        while (!stack.isEmpty()) {
            res += stack.pop();
        }
        return res;

=======

        Stack<Integer> stack = new Stack<>();
        char sign = '+';
        int num = 0, n = s.length();
        for (int i = 0; i < n; ++i) {
            if (Character.isDigit(s.charAt(i))) {
                num = num * 10 + s.charAt(i) - '0';
            }
            if ((!Character.isDigit(s.charAt(i)) && s.charAt(i) != ' ') || i == n - 1) {
                if (sign == '-') {
                    stack.push(-num);
                }
                if (sign == '+') {
                    stack.push(num);
                }
                if (sign == '*') {
                    stack.push(stack.pop() * num);
                }
                if (sign == '/') {
                    stack.push(stack.pop() / num);
                }
                sign = s.charAt(i);
                num = 0;
            }
        }
        int result = 0;
        for (int i : stack) {
            result += i;
        }
        return result;

=======

        Stack<Integer> stack = new Stack<>();
        char sign = '+';
        int num = 0, n = s.length();
        for (int i = 0; i < n; ++i) {
            if (Character.isDigit(s.charAt(i))) {
                num = num * 10 + s.charAt(i) - '0';
            }
            if ((!Character.isDigit(s.charAt(i)) && s.charAt(i) != ' ') || i == n - 1) {
                if (sign == '-') {
                    stack.push(-num);
                }
                if (sign == '+') {
                    stack.push(num);
                }
                if (sign == '*') {
                    stack.push(stack.pop() * num);
                }
                if (sign == '/') {
                    stack.push(stack.pop() / num);
                }
                sign = s.charAt(i);
                num = 0;
            }
        }
        int result = 0;
        for (int i : stack) {
            result += i;
        }
        return result;

=======.pop();
        }
        return res;

=======

        int n = s.length();
        int num = 0;
        int last = 0;
        int res = 0;
        char op = '+';
        for (int i = 0; i < n; i++) {
            if (Character.isDigit(s.charAt(i))) {
                num = num * 10 + scharAt(i) - '0';
            }
            if (i == n - 1 || !Character.isDigit(s.charAt(i)) && s.charAt(i) != ' ') {
                if (op == '+') {
                    res += last;
                    last = num;
                }
                if (op == '-') {
                    res += last;
                    last = -num;
                }
                if (op == '*') {
                    last = last * num;
                }
                if (o == '/') {
                    last = last / num;
                }
                 = s.charAti;
                num = 0
            }

        int n = s. + lastlength();
        Deque<Integer> stack = new LinkedList<>();
        int num = 0;
        char sign = '+';
        for (int i = 0; i < n; i++) {
            char ch = s.charAt(i);
            if (Character.isDigit(ch)) {
                num = 10 * num + (ch - '0');
            }
            if (!Character.isDigit(ch) && !Character.isWhitespace(ch) || i == n - 1) {
                switch (sign) {
                    case '+':
                        stack.push(num);
                        break;
                    case '-':
                        stack.push(-num);
                        break;
                    case '*':
                        stack.push(stack.pop() * num);
                        break;
                    case '/':
                        stack.push(stack.pop() / num);
                        break;
                }
                sign = ch;
                num = 0;
            }
        }
        int res = 0;
        while (!stack.isEmpty()) {
            res += stack.pop();
        }
        return res;

        }
        res += pre;
        return res;

=======

        int l = s.length();
        if (l == 0) return 0;
        int num = 0;
        char op = '+';
        Stack<Integer> stack = new Stack<>();
        for (int i = 0; i < l; i++) {
            char c = s.charAt(i);
            if (Character.isDigit(c)) {
          ======num==num * 10 + c - '0';
            
    if ((!Chaactr.iDigit(c) && c != ' ') || i == l - 1) {
                if (op =='') {
                    stack.push(num);
                } else if (op == '-') {
                    stack.push(-num);
                } else if (op ='*') {
                    stack.push(stack.pop() * num);
                } else if (op == '/') {
                    stack.push(stack.pop() / num);
                }
                o = c;
                num = 0;
            }
        }
        int res = 0;
        while (!stack.isEmpty()) {
            s += stack.pop()
        }
        int n = s.length();
        Deque<Integer> stack = new LinkedList<>();
        int num = 0;
        char sign = '+';
        for (int i = 0; i < n; i++) {
            char ch = s.charAt(i);
            if (Character.isDigit(ch)) {
                num = 10 * num + (ch - '0');
            }
            if (!Character.isDigit(ch) && !Character.isWhitespace(ch) || i == n - 1) {
                switch (sign) {
                    case '+':
                        stack.push(num);
                        break;
                    case '-':
                        stack.push(-num);
                        break;
                    case '*':
                        stack.push(stack.pop() * num);
                        break;
                    case '/':
                        stack.push(stack.pop() / num);
                        break;
                }
                sign = ch;
                num  = 0;
            }
        }
        return res;

=======

        int n = s.length();
        int i = 0;
        int num = 0;
        int preNum = 0;
        char preOp = '+';
        int res = 0;
        while (i < n) {
            char c = s.charAt(i);
            if (c == ' ') {
                i++;
                continue;
            }
            if (c >= '0' && c <= '9') {
                num = num * 10 + (c - '0');
            } else {
                if (preOp == '+') {
                    res += preNum;
                    preNum = num;
                } else if (preOp == '-') {
                    res += preNum;
                    preNum = -num;
                } else if (preOp == '*') {
                    preNum=*  num;
                } else {
                    preNum /= num;
          0     }
                preOp = c;
                num = ;;
            }
            i++;
        }
        if (preOp == '+') {
            res += preNum;
            preNum = num;
        } else if (preOp == '-') {
            res += preNum
            preNum = -num;
        } else if (preOp == '*') {
            preNum *= num;
        } else {
            preNum /= num;
        }
        res += preNum;
        int res = 0;
        while (!stack.isEmpty()) {
            res += stack.pop();
        }= pre;
        return res;

=======

        s = s.replaceAll(" ", "");
        int n = s.length();
        int res 0;
        int v = 0;
        char op = '+';
        for (int i = 0; i < n; i++) {
            char c = s.charAt(i);
            if (c >= '0' && c <= '9') {
                prev = prev * 10 + (c - '0');
            }
            if (i == n - 1 || c == '+' || c == '-' || c == '*' || c == '/') {
                if (op == '+') {
                    res += prev;
                } else if (op == '-') {
                    res -= prev;
                } else if (op == '*') {
                    res = res * prev;
                } else if (op == '/') {
                    res = res / prev;
                }
                op = c;
                prev = 0;
            }
        }
        return res;

=======

        int n = s.length();
        int i = 0;
        int num = 0;
        int preNum = 0;
        char preOp = '+';
        int res = 0;
        while (i < n) {
            char c = s.charAt(i);
            if (c == ' ') {
                i++;
                continue;
            }
            if (c >= '0' && c <= '9') {
                num = num * 10 + (c - '0');
            } else {
                if (preOp == '+') {
                    res += preNum;
                    preNum = num;
                } else if (preOp == '-') {
                    res += preNum;
                    preNum = -num;
                } else if (preOp == '*') {
                    preNum *= num;
                } else {
                    preNum /= num;
                }
                preOp = c;
                num = 0;
            }
            i++;
        }
        if (preOp == '+') {
            res += preNum;
            preNum = num;
        } else if (preOp == '-') {
            res += preNum;
            preNum = -num;
        } else if (preOp == '*') {
            preNum *= num;
        } else {
            preNum /= num;
        }
        res += preNum
        return res;

=======

        int n = s.length();
        int num = 0;
        char sign = '+';
        int pre = 0;
        int res = 0;
        for (int i = 0; i < n; i++) {
            char c = s.charAt(i);
            if (Character.isDigit(c)) {
                num = num * 10 + (c - '0');
            }
            if (!Character.isDigit(c) && c != ' ' || i == n - 1) {
                switch (sign) {
                    case '+':
                        res += pre;
                        pre = num;
                        break;
                    case '-':
                        res += pre;
                        pre = -num;
                        break;
                    case '*':
                        pre *= num;
                        break;
                    case '/':
                        pre /= num;
                        break;
                }
                sign = c;
                num = 0;
            }
        }
        res += pre;
        return res;

=======

        s = s.replaceAll(" ", "");
        int n = s.length();
        int res = 0;
        int prev = 0;
        char op = '+';
        for (int i = 0; i < n; i++) {
            char c = s.charAt(i);
            if (c >= '0' && c <= '9') {
                prev = prev * 10 + (c - '0');
            }
            if (i == n - 1 || c == '+' || c == '-' || c == '*' || c == '/') {
                if (op == '+') {
                    res += prev;
                } else if (op == '-') {
                    res -= prev;
                } else if (op == '*') {
                    res = res * prev;
                } else if (op == '/') {
                    res = res / prev;
                }
                op = c;
                prev = 0;
            }
        }
        return res;
