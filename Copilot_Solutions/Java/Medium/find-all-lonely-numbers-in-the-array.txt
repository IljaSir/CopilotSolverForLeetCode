Synthesizing 10/10 solutions (Duplicates hidden)

=======

        List<Integer> result = new ArrayList<>();
        for (int i = 0; i < nums.length; i++) {
            if (i == 0) {
                if (nums[i] != nums[i + 1]) {
                    result.add(nums[i]);
                }
            } else if (i == nums.length - 1) {
                if (nums[i] != nums[i - 1]) {
                    result.add(nums[i]);
                }
            } else {
                if (nums[i] != nums[i - 1] && nums[i] != nums[i + 1]) {
                    result.add(nums[i]);
                }
            }
        }
        return result;

=======

        List<Integer> result = new ArrayList<>();
        for (int i = 0; i < nums.length; i++) {
            if (i == 0 && nums[i] != nums[i + 1]) {
                result.add(nums[i]);
            } else if (i == nums.length - 1 && nums[i] != nums[i - 1]) {
                result.add(nums[i]);
            } else if (i != 0 && i != nums.length - 1 && nums[i] != nums[i - 1] && nums[i] != nums[i + 1]) {
                result.add(nums[i]);
            }
        }
        return result;

=======

        List<Integer> result = new ArrayList<Integer>();
        if (nums.length == 1) {
            result.add(nums[0]);
            return result;
        }
        for (int i = 0; i < nums.length; i++) {
            if (i == 0) {
                if (nums[i] != nums[i + 1]) {
                    result.add(nums[i]);
                }
            } else if (i == nums.length - 1) {
                if (nums[i] != nums[i - 1]) {
                    result.add(nums[i]);
                }
            } else {
                if (nums[i] != nums[i - 1] && nums[i] != nums[i + 1]) {
                    result.add(nums[i]);
                }
            }
        }
        return result;

=======

        List<Integer> list = new ArrayList<Integer>();
        for (int i = 0; i < nums.length; i++) {
            boolean lonely = true;
            for (int j = 0; j < nums.length; j++) {
                if (i == j) {
                    continue;
                }
                if (nums[i] == nums[j] - 1 || nums[i] == nums[j] + 1) {
                    lonely = false;
                    break;
                }
            }
            if (lonely) {
                list.add(nums[i]);
            }
        }
        return list;

=======

        List<Integer> result = new ArrayList<>();
        if(nums.length == 1) {
            result.add(nums[0]);
            return result;
        }
        if(nums[0] != nums[1]) {
            result.add(nums[0]);
        }
        for(int i = 1; i < nums.length - 1; i++) {
            if(nums[i] != nums[i - 1] && nums[i] != nums[i + 1]) {
                result.add(nums[i]);
            }
        }
        if(nums[nums.length - 1] != nums[nums.length - 2]) {
            result.add(nums[nums.length - 1]);
        }
        return result;

=======

        List<Integer> result = new ArrayList<>();
        for (int i = 0; i < nums.length; i++) {
            int num = nums[i];
            if (i == 0) {
                if (num != nums[i + 1]) {
                    result.add(num);
                }
            } else if (i == nums.length - 1) {
                if (num != nums[i - 1]) {
                    result.add(num);
                }
            } else {
                if (num != nums[i - 1] && num != nums[i + 1]) {
                    result.add(num);
                }
            }
        }
        return result;

=======

        List<Integer> lonely = new ArrayList<>();
        for(int i = 0; i < nums.length; i++){
            if(i == 0){
                if(nums[i] != nums[i+1]){
                    lonely.add(nums[i]);
                }
            } else if(i == nums.length - 1){
                if(nums[i] != nums[i-1]){
                    lonely.add(nums[i]);
                }
            } else {
                if(nums[i] != nums[i-1] && nums[i] != nums[i+1]){
                    lonely.add(nums[i]);
                }
            }
        }
        return lonely;

=======

        List<Integer> lonely = new ArrayList<>();
        int[] count = new int[1000001];
        for (int i = 0; i < nums.length; i++) {
            count[nums[i]]++;
        }
        for (int i = 0; i < nums.length; i++) {
            if (count[nums[i]] == 1) {
                lonely.add(nums[i]);
            }
        }
        return lonely;

=======

        int n = nums.length;
        List<Integer> ans = new ArrayList<>();
        for(int i=0;i<n;i++){
            if(i==0){
                if(nums[i]!=nums[i+1]){
                    ans.add(nums[i]);
                }
            }else if(i==n-1){
                if(nums[i]!=nums[i-1]){
                    ans.add(nums[i]);
                }
            }else{
                if(nums[i]!=nums[i-1] && nums[i]!=nums[i+1]){
                    ans.add(nums[i]);
                }
            }
        }
        return ans;
