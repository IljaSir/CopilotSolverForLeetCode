Synthesizing 10/10 solutions

=======

        Arrays.sort(properties, (a, b) -> {
            if (a[0] == b[0]) {
                return b[1] - a[1];
            }
            return a[0] - b[0];
        });
        int res = 0;
        int max = 0;
        for (int i = properties.length - 1; i >= 0; i--) {
            if (properties[i][1] < max) {
                res++;
            }
            max = Math.max(max, properties[i][1]);
        }
        return res;

=======

        int n = properties.length;
        Arrays.sort(properties, (a, b) -> a[0] == b[0] ? b[1] - a[1] : a[0] - b[0]);
        int maxDefense = 0;
        int ans = 0;
        for (int i = n - 1; i >= 0; i--) {
            if (properties[i][1] < maxDefense) {
                ans++;
            }
            maxDefense = Math.max(maxDefense, properties[i][1]);
        }
        return ans;

=======

        Arrays.sort(properties, (a, b) -> {
            if (a[0] != b[0]) {
                return a[0] - b[0];
            }
            return b[1] - a[1];
        });
        int max = 0;
        int count = 0;
        for (int i = properties.length - 1; i >= 0; i--) {
            if (properties[i][1] < max) {
                count++;
            }
            max = Math.max(max, properties[i][1]);
        }
        return count;

=======

        Arrays.sort(properties, (a, b) -> {
            if (a[0] != b[0]) {
                return a[0] - b[0];
            }
            return b[1] - a[1];
        });
        int ans = 0;
        int maxDef = 0;
        for (int i = properties.length - 1; i >= 0; i--) {
            if (properties[i][1] < maxDef) {
                ans++;
            } else {
                maxDef = properties[i][1];
            }
        }
        return ans;

=======

        Arrays.sort(properties, (a, b) -> a[0] == b[0] ? b[1] - a[1] : a[0] - b[0]);
        int count = 0;
        int maxDefense = 0;
        for (int i = properties.length - 1; i >= 0; i--) {
            if (properties[i][1] < maxDefense) {
                count++;
            } else {
                maxDefense = properties[i][1];
            }
        }
        return count;

=======

        int ans = 0;
        Arrays.sort(properties, (a, b) -> (a[0] == b[0] ? b[1] - a[1] : a[0] - b[0]));
        int max = 0;
        for (int i = properties.length - 1; i >= 0; i--) {
            if (properties[i][1] < max) {
                ans++;
            } else {
                max = properties[i][1];
            }
        }
        return ans;

=======

        Arrays.sort(properties, (a, b) -> a[0] == b[0] ? b[1] - a[1] : b[0] - a[0]);
        int max = 0, res = 0;
        for (int i = 0; i < properties.length; i++) {
            if (properties[i][1] < max) {
                res++;
            } else {
                max = Math.max(max, properties[i][1]);
            }
        }
        return res;

=======

        Arrays.sort(properties, (a, b) -> a[0] != b[0] ? b[0] - a[0] : a[1] - b[1]);
        int max = 0, count = 0;
        for (int[] p : properties) {
            if (p[1] < max) {
                count++;
            }
            max = Math.max(max, p[1]);
        }
        return count;

=======

        Arrays.sort(properties, (a, b) -> a[0] - b[0]);
        int max = 0, res = 0;
        for (int i = properties.length - 1; i >= 0; i--) {
            if (properties[i][1] < max) res++;
            max = Math.max(max, properties[i][1]);
        }
        return res;

=======

        int n = properties.length;
        int[][] p = new int[n][3];
        for (int i = 0; i < n; i++) {
            p[i][0] = properties[i][0];
            p[i][1] = properties[i][1];
            p[i][2] = i;
        }
        Arrays.sort(p, (a, b) -> b[0] - a[0]);
        int maxD = 0;
        int ans = 0;
        for (int i = 0; i < n; i++) {
            if (maxD > p[i][1]) {
                ans++;
            }
            maxD = Math.max(maxD, p[i][1]);
        }
        return ans;
