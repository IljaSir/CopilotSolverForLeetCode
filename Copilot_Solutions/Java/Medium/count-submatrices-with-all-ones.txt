Synthesizing 10/10 solutions

=======

        int m = mat.length;
        int n = mat[0].length;
        int[][] dp = new int[m][n];
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (mat[i][j] == 1) {
                    dp[i][j] = j == 0 ? 1 : dp[i][j - 1] + 1;
                }
            }
        }
        int ans = 0;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                int width = dp[i][j];
                for (int k = i; k >= 0; k--) {
                    width = Math.min(width, dp[k][j]);
                    ans += width;
                }
            }
        }
        return ans;

=======

        int m = mat.length;
        int n = mat[0].length;
        int[][] dp = new int[m][n];
        int res = 0;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (mat[i][j] == 1) {
                    dp[i][j] = j == 0 ? 1 : dp[i][j - 1] + 1;
                    int min = dp[i][j];
                    for (int k = i; k >= 0; k--) {
                        min = Math.min(min, dp[k][j]);
                        res += min;
                    }
                }
            }
        }
        return res;

=======

        int m = mat.length;
        int n = mat[0].length;
        int[][] dp = new int[m][n];
        int res = 0;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (mat[i][j] == 0) {
                    dp[i][j] = 0;
                } else {
                    dp[i][j] = j == 0 ? 1 : dp[i][j - 1] + 1;
                }
                int min = dp[i][j];
                for (int k = i; k >= 0; k--) {
                    min = Math.min(min, dp[k][j]);
                    res += min;
                }
            }
        }
        return res;

=======

        int m = mat.length;
        int n = mat[0].length;
        int[][] dp = new int[m][n];
        int ans = 0;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (mat[i][j] == 0) {
                    dp[i][j] = 0;
                } else {
                    dp[i][j] = 1 + (j > 0 ? dp[i][j - 1] : 0);
                }
                int width = dp[i][j];
                for (int k = i; k >= 0; k--) {
                    width = Math.min(width, dp[k][j]);
                    ans += width;
                }
            }
        }
        return ans;

=======

        int m = mat.length, n = mat[0].length;
        int[][] dp = new int[m][n];
        int res = 0;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (mat[i][j] == 1) {
                    dp[i][j] = j == 0 ? 1 : dp[i][j - 1] + 1;
                    int width = dp[i][j];
                    for (int k = i; k >= 0; k--) {
                        width = Math.min(width, dp[k][j]);
                        res += width;
                    }
                }
            }
        }
        return res;

=======

        int m = mat.length;
        int n = mat[0].length;
        int[][] dp = new int[m + 1][n + 1];
        for (int i = 1; i <= m; i++) {
            for (int j = 1; j <= n; j++) {
                dp[i][j] = mat[i - 1][j - 1] == 1 ? dp[i][j - 1] + 1 : 0;
            }
        }
        int res = 0;
        for (int i = 1; i <= m; i++) {
            for (int j = 1; j <= n; j++) {
                int min = Integer.MAX_VALUE;
                for (int k = i; k >= 1; k--) {
                    min = Math.min(min, dp[k][j]);
                    res += min;
                }
            }
        }
        return res;

=======

        int m = mat.length;
        int n = mat[0].length;
        int[] height = new int[n];
        int ans = 0;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (mat[i][j] == 0) {
                    height[j] = 0;
                } else {
                    height[j] += 1;
                }
            }
            ans += count(height);
        }
        return ans;
    }

    private int count(int[] height) {
        int ans = 0;
        int stackTop = -1;
        int[] stack = new int[height.length];
        for (int i = 0; i < height.length; i++) {
            while (stackTop >= 0 && height[stack[stackTop]] >= height[i]) {
                stackTop--;
            }
            if (stackTop >= 0) {
                ans += height[stack[stackTop]] * (i - stack[stackTop] - 1);
            } else {
                ans += height[i] * (i + 1);
            }
            stack[++stackTop] = i;
        }
        while (stackTop >= 0) {
            ans += height[stack[stackTop]] * (height.length - stack[stackTop] - 1);
            stackTop--;
        }
        return ans;

=======

        int m = mat.length;
        int n = mat[0].length;
        int[][] dp = new int[m][n];
        for(int i = 0; i < m; i++){
            for(int j = 0; j < n; j++){
                if(mat[i][j] == 1){
                    dp[i][j] = j == 0? 1: dp[i][j - 1] + 1;
                }
            }
        }
        int ans = 0;
        for(int i = 0; i < m; i++){
            for(int j = 0; j < n; j++){
                if(mat[i][j] == 1){
                    int width = dp[i][j];
                    for(int k = i; k >= 0; k--){
                        width = Math.min(width, dp[k][j]);
                        ans += width;
                    }
                }
            }
        }
        return ans;

=======

        int m = mat.length;
        int n = mat[0].length;
        int[][] dp = new int[m][n];
        for(int i = 0; i < m; i++){
            for(int j = 0; j < n; j++){
                if(mat[i][j] == 1){
                    dp[i][j] = j > 0 ? dp[i][j-1] + 1 : 1;
                }
            }
        }
        int res = 0;
        for(int i = 0; i < m; i++){
            for(int j = 0; j < n; j++){
                int minWidth = Integer.MAX_VALUE;
                for(int k = i; k >= 0; k--){
                    minWidth = Math.min(minWidth, dp[k][j]);
                    res += minWidth;
                }
            }
        }
        return res;

=======

        int rows = mat.length;
        int cols = mat[0].length;
        int[][] dp = new int[rows][cols];
        int ans = 0;
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                if (mat[i][j] == 1) {
                    if (j == 0) {
                        dp[i][j] = 1;
                    } else {
                        dp[i][j] = dp[i][j - 1] + 1;
                    }
                    int min = dp[i][j];
                    for (int k = i; k >= 0; k--) {
                        min = Math.min(min, dp[k][j]);
                        ans += min;
                    }
                }
            }
        }
        return ans;
