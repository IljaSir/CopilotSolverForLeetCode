Synthesizing 10/10 solutions

=======

        long sum = 0;
        long x = n;
        while (x > 0) {
            sum += x % 10;
            x /= 10;
        }
        if (sum <= target) {
            return 0;
        }
        long y = 1;
        long ans = 0;
        while (sum > target) {
            long d = (n / y) % 10;
            if (d != 9) {
                ans += y * (10 - d);
                sum += 10 - d - d;
            }
            y *= 10;
        }
        return ans;

=======

        long sum = 0;
        long num = n;
        while (num > 0) {
            sum += num % 10;
            num /= 10;
        }
        if (sum <= target) {
            return 0;
        }
        long result = 0;
        long base = 1;
        while (sum > target) {
            long digit = n % 10;
            if (digit < 9) {
                result += (9 - digit) * base;
                sum += (9 - digit);
            }
            base *= 10;
            n /= 10;
        }
        return result;

=======

        long sum = 0;
        long tmp = n;
        while (tmp > 0) {
            sum += tmp % 10;
            tmp /= 10;
        }
        if (sum <= target) return 0;
        long res = 0;
        long factor = 1;
        while (sum > target) {
            long digit = n % 10;
            if (digit == 9) {
                n /= 10;
                factor *= 10;
                continue;
            }
            long add = 9 - digit;
            res += add * factor;
            n += add;
            sum -= digit;
            sum += 9;
        }
        return res;

=======

        int[] digits = new int[20];
        int len = 0;
        while (n > 0) {
            digits[len++] = (int) (n % 10);
            n /= 10;
        }
        long ans = 0;
        for (int i = len - 1; i >= 0; i--) {
            int sum = digits[i];
            int carry = 0;
            for (int j = i - 1; j >= 0; j--) {
                sum += digits[j];
                if (sum > target) {
                    carry++;
                    sum -= 10;
                }
            }
            if (sum > target) {
                carry++;
            }
            ans += carry * Math.pow(10, i);
        }
        return ans;

=======

        long sum = 0;
        long m = n;
        while (m > 0) {
            sum += m % 10;
            m /= 10;
        }
        long ans = 0;
        while (sum > target) {
            ans += Math.pow(10, sum - target);
            sum = target;
        }
        return ans;

=======

        long result = 0;
        while (n > 0) {
            long digit = n % 10;
            if (digit > target) {
                result += (10 - digit);
                n += (10 - digit);
            }
            n /= 10;
        }
        return result;

=======

        long sum = 0;
        long x = 1;
        while (n > 0) {
            long d = n % 10;
            sum += d;
            n /= 10;
            if (sum > target) {
                sum -= d;
                n += 1;
                x = 1;
            } else {
                x *= 10;
            }
        }
        return x - 1;

=======

        long sum = 0;
        long x = 1;
        while (n > 0) {
            long digit = n % 10;
            sum += digit;
            n = n / 10;
            if (sum > target) {
                sum -= digit;
                sum += 10;
                n += 1;
            }
        }
        return sum - target;

=======

        long sum = 0;
        int[] digits = new int[12];
        int len = 0;
        while (n > 0) {
            digits[len++] = (int) (n % 10);
            n /= 10;
        }
        for (int i = len - 1; i >= 0; i--) {
            if (sum + digits[i] > target) {
                int diff = target - (int) (sum % 10);
                sum += diff;
                digits[i - 1] += 1;
            }
            sum += digits[i];
        }
        return sum - target;

=======

        long result = 0;
        long sum = 0;
        long[] digits = new long[20];
        int len = 0;
        while (n > 0) {
            digits[len++] = n % 10;
            n /= 10;
        }
        for (int i = len - 1; i >= 0; i--) {
            sum += digits[i];
            if (sum <= target) {
                continue;
            }
            long diff = sum - target;
            long add = (10 - digits[i]);
            digits[i] += add;
            result += add;
            sum -= diff;
        }
        return result;
