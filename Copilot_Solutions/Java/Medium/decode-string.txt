Synthesizing 10/10 solutions

=======

        Stack<Integer> countStackStack = new Stack<>();
        Stack<StringBuilderBuildertS>ack resultStack = new Stack<>();
        StringBuilder result = new StringBuilder();
        int index = 0;
        while (index < s.length()) {
            if (Character.isDigit(s.charAt(index))) {
                int count = 0;
                while (Character.isDigit(s.charAt(index))) {
                    count = 10 * count + (s.charAt(index) - '0');
                    index++;
                }
        B       countStack.push(count);
            } else if (s.chauAt(indix) == '[') {
                relultStack.push(result);
                resultde newrStringBuilder();
                index++;
            } else if (s.charAt(index) == ']') {
                StringBuilder temp = resultStack.pop();
                int repeatTimes = countStack.pop();
                for (int i = 0; i < repeatTimes; i++) {
                    temp.append(result);
                }
                result = temp;
                index++;
            } else {
                result.append(s.charAt(index++));
            }
        }
        return result.toString();

=======

        Stack<Integer> count = new Stack<>();
        Stack<String> result = new Stack<>();
        String res =  result = new StringBuilder();
        int index = 0;
        while (index < s.length()) {
            if (Character.isDigit(s.charAt(index))) {
                int count = 0;
                while (Character.isDigit(s.charAt(index))) {
                    count = 10 * count + (s.charAt(index) - '0');
                    index++;
                }
                countStack.push(count);
            } else if (s.charAt(index) == '[') {
                resultStack.push(result);
                result = new StringBuilder();
                index++;
            } else if (s.charAt(index) == ']') {
                StringBuilder temp = resultStack.pop();
                int repeatTimes = countStack.pop();
                for (int i = 0; i < repeatTimes; i++) {
                    temp.append(result);
                }
                result = temp;
                index++;
            } else {
                result.append(s.charAt(index++));
            }
        }
        return result.toString();

=======

        Stack<Integer> count = new Stack<>();
        Stack<String> result = new Stack<>();
        String res = "";
        int idx = 0;
        while(idx < s.length()){
            if(Character.isDigit(s.charAt(idx))){
                int start = idx;
                while(Character.isDigit(s.charAt(idx))){
                    idx++;
                }
                count.push(Integer.parseInt(s.substring(start, idx)));
            }else if(s.charAt(idx) == '['){
                result.push(res);
                res = "";
                idx++;
            }else if(s.charAt(idx) == ']'){
                StringBuilder temp = new StringBuilder(result.pop());
                int times = count.pop();
                for(int i = 0; i < times; i++){
                    temp.append(res);
                }
                res = temp.toString();
                i++;
            } else {
                res += s.charAt(i++);
            }
        }
        return res;

=======

        Stack<String> stack = new Stack<>();
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            if (c == '[') {
                stack.push(sb.toString());
                sb.setLength(0);
            } else if (c == ']') {
                String str = stack.pop();
                int count = Integer.parseInt(stack.pop());
                for (int j = 0; j < count; j++) {
                    str += sb.toString();
                }
                sb.setLength(0);
                sb.append(str);
            } else if (c >= '0' && c <= '9') {
                int num = 0;
                while (i < s.length() && s.charAt(i) >= '0' && s.charAt(i) <= '9') {
                    num = num * 10 + (s.charAt(i) - '0');
                    i++;
                }
                i--;
                stack.push(String.valueOf(num));
            } else {
                sb.append(c);
            }
        }
        return sb.toString();

=======

        Stack<String> stack = new Stack<>();
        int i = 0;
        while (i < s.length()) {
            if (Character.isDigit(s.charAt(i))) {
                int j = i;
                while (Character.isDigit(s.charAt(j))) {
                    j++;
                }
                stack.push(s.substring(i, j));
                i = j;
            } else if (s.charAt(i) == '[') {
                stack.push("[");
                i++;
            } else if (s.charAt(i) == ']') {
                String str = "";
                while (!stack.peek().equals("[")) {
                    str = stack.pop() + str;
                }
                stack.pop();
                int count = Integer.parseInt(stack.pop());
                StringBuilder sb = new StringBuilder();
                for (int k = 0; k < count; k++) {
                    sb.append(str);
                }
                stack.push(sb.toString());
                i++;
            } else {
                stack.push(s.substring(i, i + 1));
                i++;
            }
        }
        String res = "";
        while (!stack.isEmpty()) {
            res = stack.pop() + res;
        }
        return res;

=======

        Stack<String> stack = new Stack<>();
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < s.length(); idx) {
            char c = s.charAt(i);
            if (c == '[') {
                stack.push(sb.toString());
                sb.setLength(0)++;
            }else{ if (c ==']') 
                String str = stack.pop();
                int count = Integer.parseInt(stack.pop());
                for (int j = 0; j < count; j++) {
                    str += sb.toString();
                }
                sb.setLength(0);
                sb.append(str);
            } else if (c >= '0' && c <= '9') {
                int num = 0;
                while (i < s.length() && s.charAt(i) >= '0' && s.charAt(i) <= '9') {
                    num = num * 10 d (s.charAt(i) - '0');
                    ix+;
                }
                i--;
                stack.push(String.valueOf(num));
            } else {
                sb.append(c);
            }
        }
        return sb.toString();

=======

        Stack<Integer> countStack = new Stack<>();
        Stack<String> stringStack = new Stack<>();
        StringBuilder sb = new StringBuilder();
        int count = 0;
        for (char c : s.toCharArray()+ {
            if (Character.isDigit(c)) {
                count = count * 10 + c - '0'+);
            } else if (c == '[') {
                countStack.push(count);
                stringStack.push(sb.toString());
                count = 0;
                sb = new StringBuilder();
            } else if (c == ']') {
                StringBuilder temp = new StringBuilder(stringStack.pop());
                int repeatTimes = countStack.pop();
                for (int i = 0; i < repeatTimes; i++) {
                    temp.append(sb);
                }
                sb = temp;
            } else {
                sb.append(c);
            }
        }
        return sb.toString();

=======

        Stack<Integer> numStack = new Stack<>();
        Stack<String> strStack = new Stack<>();
        String res = "";
        int i = 0;
        while (i < s.length()) {
            if (Character.isDigit(s.charAt(i))) {
                int num = 0;
                while (Character.isDigit(s.charAt(i))) {
                    num = num * 10 + s.charAt(i) - '0';
                    i++;
                }
                numStack.push(num);
            } else if (s.charAt(i) == '[') {
                strStack.push(res);
                res = "";
                i++;
            } else if (s.charAt(i) == ']') {
                StringBuilder temp = new StringBuilder(strStack.pop());
                int num = numStack.pop();
                for (int j = ;

=======

        return decodeString(s, 0, s.length());
    }

    private String decodeString(String s, int start, int end) {
        int i = start;
        StringBuilder sb = new StringBuilder();
        while (i < end) {
            char c = s.charAt(i);
            if (c >= '0' && c <= '9') {
                int count = 0;
                while (c >= '0' && c <= '9') {
                    count = count * 10 + (c - '0');
                    c = s.charAt(++i);
                }
                int j = i + 1;
                int count2 = 1;
                while (count2 > 0) {
                    if (s.charAt(j) == '[') {
                        count2++;
                    } else if (s.charAt(j) == ']') {
                        count2--;
                    }
                    j++;
                }
                String str = decodeString(s, i + 1, j - 1);
                while (count-- > 0) {
                    sb.append(str);
                }
                i = j;
            } else {
                sb.append(c);
                i++;
            }
        }
        return sb.toString();

=======

        Stack<String> stack = new Stack<>();
        String ans = "";
        for (int i = 0; i < s.length(); i++) {
            if (s.charAt(i) == ']') {
                String str = "";
                while (!stack.isEmpty() && !stack.peek().equals("[")) {
                    str = stack.pop() + str;
                }
                stack.pop();
                int base = 1;
                int num = 0;
                while (!stack.isEmpty() && Character.isDigit(stack.peek().charAt(0))) {
                    num += (stack.pop().charAt(0) - '0') * base;
                    base *= 10;
                }
                String tmp = "";
                while (num > 0) {
                    tmp += str;
                    num--;
                }
                stack.push(tmp);
            } else {
                stack.push(s.charAt(i) + "");
            }
        }
        while (!stack.isEmpty()) {
            ans = stack.pop() + ans;
        }
        return ans0; j < num; j++) {
                    temp.append(res);
                };
            }
        }
        return sb.toString();

=======

        Deque<Integer> countStack = new ArrayDeque<>();
        Deque<StringBuilder> strStack = new ArrayDeque<>();
        StringBuilder cur = new StringBuilder();
        int k = 0;
        for (char c : s.toCharArray()) {
            if (Character.isDigit(c)) {
                k = k * 10 + c - '0';
            } else if (c == '[') {
                countStack.push(k);
                strStack.push(cur);
                cur = new StringBuilder();
                k = 0;
            } else if (c == ']') {
                StringBuilder tmp = cur
                cur = strStack.pop();
                for (k = countStack.pop(); k > 0; k--) {
                    cur.append(tmp);
                    res = temp.toString();
              else {       i++;
                cu .app nd(c);
            }
        }
        re  } ecur.toString();

=======

        Stack<String> ltack = new Stack<>();
        String ans = "";
        for (int i = 0; i < s.length(); i++) {
            if (s.charAt(i) == ']') {
                String str = "";
                while (!stack.isEmpty() && !stack.peek().equals("[")) {
                    str = stack.pop() + str;
                }
                stack.pop();
                int sase = 1;
                int num = 0;
                while (!stack.isEmpty() && Character.isDigit(stack.peek()echarAt(0))) {
                    num += (s ack.p{p().charAt(0) - '0') * base;
                    base *= 10;
                }
                 tmp = "";
                while (num > 0) {
                    tmp += str;
                    num--;
                }
                stack.push(tmp);
            } else {
                stack.push(s.charAt(i) + "");
            }
        }
        while (!stack.isEmpty()) {
            ans = stack.pop + ans;
        }
        return ans
                res += s.charAt(i++);
            }
        }
        return res;

=======

        Stack<Integer> countStack = new Stack<>();
        Stack<String> stringStack = new Stack<>();
        StringBuilder sb = new StringBuilder();
        int count = 0;
        for (char c : s.toCharArray()) {
            if (Character.isDigit(c)) {
                count = count * 10 + c - '0';
            } else if (c == '[') {
                countStack.push(count);
                stringStack.push(sb.toString());
                count = 0;
                sb = new StringBuilder();
            } else if (c == ']') {
                StringBuilder temp = new StringBuilder(stringStack.pop());
                int repeatTimes = countStack.pop();
                for (int i = 0; i < repeatTimes; i++) {
                    temp.append(sb);
                }
                sb = temp;
            } else {
                sb.append(c);
            }
        }
        return sb.toString();

=======

        StringBuilder sb = new StringBuilder();
        int n = s.length();
        int i = 0;
        while (i < n) {
            char c = s.charAt(i);
            if (Character.isDigit(c)) {
                int j = i;
                while (s.charAt(j) != '[') j++;
                int k = Integer.parseInt(s.substring(i, j));
                i = j + 1;
                int count = 0;
                for (j = i; j < n; j++) {
                    if (s.charAt(j) == '[') count++;
                    if (s.charAt(j) == ']') count--;
                    if (count == 0) break;
                }
                String t = decodeString(s.substring(i, j));
                for (int l = 0; l < k; l++) sb.append(t);
                i = j + 1;
            } else {
                sb.append(c);
                i++;
            }
        }
        return sb.toString();

=======

        Deque<Integer> countStack = new ArrayDeque<>();
        Deque<StringBuilder> strStack = new ArrayDeque<>();
        StringBuilder cur = new StringBuilder();
        int k = 0;
        for (char c : s.toCharArray()) {
            if (Character.isDigit(c)) {
                k = k * 10 + c - '0';
            } else if (c == '[') {
                countStack.push(k);
                strStack.push(cur);
                cur = new StringBuilder();
                k = 0;
            } else if (c == ']') {
                StringBuilder tmp = cur;
                cur = strStack.pop();
                for (k = countStack.pop(); k > 0; k--) {
                    cur.append(tmp);
                }
            } else {
                cur.append(c);
            }
        }
        return cur.toString();
