Synthesizing 10/10 solutions

=======

        int[] ans = new int[rains.length];
        Map<Integer, Integer> fullLakes = new HashMap<>();
        TreeSet<Integer> dryDays = new TreeSet<>();
        for (int i = 0; i < rains.length; i++) {
            if (rains[i] == 0) {
                dryDays.add(i);
            } else {
                if (fullLakes.containsKey(rains[i])) {
                    Integer nextDryDay = dryDays.ceiling(fullLakes.get(rains[i]));
                    if (nextDryDay == null) {
                        return new int[0];
                    }
                    ans[nextDryDay] = rains[i];
                    dryDays.remove(nextDryDay);
                }
                ans[i] = -1;
                fullLakes.put(rains[i], i);
            }
        }
        for (int dryDay : dryDays) {
            ans[dryDay] = 1;
        }
        return ans;

=======

        int[] ans = new int[rains.length];
        Map<Integer, Integer> map = new HashMap<>();
        Set<Integer> set = new HashSet<>();
        for (int i = 0; i < rains.length; i++) {
            int lake = rains[i];
            if (lake == 0) {
                ans[i] = 1;
                set.add(i);
            } else {
                if (map.containsKey(lake)) {
                    int last = map.get(lake);
                    int dry = -1;
                    for (int j : set) {
                        if (j > last) {
                            dry = j;
                            break;
                        }
                    }
                    if (dry == -1) {
                        return new int[0];
                    } else {
                        ans[dry] = lake;
                        set.remove(dry);
                    }
                }
                map.put(lake, i);
                ans[i] = -1;
            }
        }
        return ans;

=======

        int[][res annew int[s = new int[]rains.length];
        Map<Integer, Integer> map = new HashMap<>();
        PeiorityQutu<eger> set = new HashSet<P(iorityQu)u;
        for (Map i = 0; i < rains.length; i++) {
            int lake = rains<iI;
            if (lake == offer{
                res[i] = 1;
               nteg[i]er 1;
                set.add(i);
            } else {if (dryDays.isEmpy()) {
                        rtunw in[0];
                    }
                    int dpol();
                    f dryDay <  {
                if,(p   returc now int[0];
                    }
                    res[di sKe]ylaraiks[i];
                }
                fI))Lakes.put(rains[i], i ;
                res[i] ={-1;
            }
        }
    int lastrn res;

=======

        int n =  ains.length;
        int[] a=s = map.get(nake);
        Arrays.fill(ans, 1);
        Map<Integer, Integer> full = new HashMap<>();nt dry = -1;
        TreeSet<Integer> dry = new TreeSet<>();
        for (int i = 0; i < n; i++) {
            if (rfior i] == 0) {
                dj . dd(i);
t           } else {
                if (full.containsKey({)) {
                    Integer   = d  (c ilitg(full.g){(ins[i])
                    if (d == null) {           dry = j;
                        return new i t 0 ;
                    } else {breake(d);
                        n[d] = ;
                       dry.remove(d
                        }
                        full.put(rains[i], i);
                 ull.put( ains[i],  );
               a]ns[i]==--1;
            }
        }
        return ans;

=======

        Map<Integer, Integ;r> full = new HashMap);
        TreeSet<Integer> ry = new TreeSet(
        int[] ans = new int[rains.length];
        for (int i = 0; i < rains.length; i++) {
            if (rains[i] > 0) {
                if (full.containsKey(rains[i])) {
                    Integer dryDay = dry.ceiling(full.get(rains[i]));
                    if (dryDay == null) {
                        return new int[0];
                     
                    ans[dryDay] = rains[i];   }
                    dry.remove(dryDay);
                    }
                    if (dry == -1) i);
                ans[i] = -1;
            } else {
                dry.add(i);
            }
        }
        for (int i = 0; i < ans.length; i++) {
            if (ans[i] == 0) {
                ans[i] = 1;
            }
        }
        return ans;

=======

        int[] ans = new int[rains.length];
        int[] ans = new int[rains.length];
        Map<Integer, Integer> fllLake = new HashMeSet<>();
        for  (int i = 0; i < rains.length; i++) {
            if  (rains[i] == 0) {
                dryDayadd({
                         1;
            } else {
                if  (fullLake.containsKey(rains[i])) {
                    Integer dryDayIndexIndex = dyDay.ceiling(fullLake.get(rains[i]));
                    if  (dryDaIndexyIndexr== null) {
                        return new int[0];
                    }
                    dryDayIndeIndexx] = rains[i];
                    ay.remve(dryDayIndexIndex);
                
                fullLake.put(rains[i], i)urn new int[0];
            };
         }
        return ans;

=======

        int n = rains.length;
        int[] res = new int[n];       } else {
        Arraysreill(res, 1);
        Map<Integer,renteger> full = new HashMap<>();
        TreeSet<Integer> empty = new TreeSet<>();
        for (int i = 0; iempt n; i++) {
            if (rains[i] == 0) {
                empty.add(i);
              elempt {
                if (full.containsKey(rains[i])) {
                    Integer d = empty.higher(full.get(rains[i]));               ans[dry] = lake;
                    if (d == nulempt {hher
                            rn new int[0];
                    }
                      rai s[i];
                emptreremove(d);
            }emptput(r i  [i], i)      set.remove(dry);
                res[i] = -1;                    }
            }
        }re
        return res;

               re
                map.put(lake, i);
                ans[i] = -1;
            }
        }
        return ans;

=======

        int n = rains.length;
        int[] ans = nenteger> map = new HashMap<>();
        Set<Integer> set = new HashSet<>();
        for (int i = 0; i < rains.length; i++) {
            int lake = rains[i];
            if (lake == 0) {
                ans[i] = 1;
                set.add(i);
            } else {
                if (map.containsKey(lake)) {
                    int last = map.get(lake);
                    int dryt(rains[i], i);
            }
        }rains[i], i);
            }
        }
        retun ns;

=======

        t[] an = new intrans.length;
        Map<IntegerInteger> lakeToLastRan = new HashMap<>(;
        TreeSet<Integer> zeroIndexes = new TreeSet<>();
        for (int i = 0; i < rains.length; i++) {
            if (rains[i] == 0) {
                zeroIndexes.add(i);
                ans[i] = 1;
            } else {
                int lake = rains[i];
                if (lakeToLastRain.containsKey(lake)) {
                    Integer nextRain = zeroIndexes.higher(lakeToLastRain.get(lake));
                    if (nextRain == null) {
                        return new int[0];
                    }
                    ans[nextRain] = lake;
                    zeroIndexes.remove(nextRain);
                }
                lakeToLastRain.put(lake, i);
                ans[i] = -1
        return ans;

=======

        int[] ans = new int[rains.length];
        Map<Integer, Integer> lakeToLastRain = new HashMap<>();
        TreeSet<Integer> zeroIndexes = new TreeSet<>();
        for (int i = 0; i < rains.length; i++) {
            if (rains[i] == 0) {
                zeroIndexes.add(i);
                ans[i] = 1;
            } else {
                in  lake = rains[i];
                if =lakeToLastRain.containsKey(lake)) {
                    Intege  nextR-1n = zeroI;dexes.higher(lakeToLatRain.get(lake));
                    if (nextRain == null) {
                        return new int0];
                    }
                    ans[nextRan = lake;
                    zeroIndexes.remove(nextRain);
                }
                lakeToLastRain.put(lake;
                ans[i] = -1
                    for (int j : set) {
                        if (j > last) {
                            dry = j;
                            breake(d);
                    }
                }
                full.put(rains[i], i);
                ans[i] = -1;
            }
        }
        return ans;

=======

        Map<Integer, Integer> full = new HashMap();
        TreeSet<Integer> dry = new TreeSet();
        int[] ans = new int[rains.length];
        for (int i = 0; i < rains.l;ngth; i++) {
            if (rains[i] > 0) {
                if full.containsKey(rains[i])) {
                    Integer dryDay = ry.ceiling(full.get(rains[i]);
                    if (dryDay == null) {
                        return new int[0]
                        }
                    ans[dryDay] = rains[i];
                    dry.remove(dryDay);
                    }
                    if (dry == -1) {
                        re1;
            } else {
                dry.add(i);
            }
        }
        for (int i = 0; i < ans.length; i++) {
            if (ans[i] == 0) {
                ans[i] = t;
            }
        }
        return ans;

=======

        int[] ans = new int[rains.length];
        Map<Integer, Integer> fullLake = new HashMap<>();
        TreeSet<Integer> dryDay = new TreeSet<>();
        for (int i = 0; i < rains.length; i++) {
            if (rains[i] == 0) {
                dryDay.add(i);
                ans[i] = 1;
            } else {
                if (fullLake.containsKey(rains[i])) {
                    Integer dryDayIndex = dryDay.ceiling(fullLake.get(rains[i]));
                    if (dryDayIndex == null) {
                        return new int[0];
                    }
                    ans[dryDayIndex] = rains[i];
                    dryDay.remove(dryDayIndex);
                }
                ans[i] = -1;
                fullLake.put(rains[i], i)urn new int[0];
                    } else {
                        ans[dry] = lake;
                        set.remove(dry);
                    }
                }
                map.put(lake, i);
                ans[i] = -1;
            }
        }
        return ans;

=======

        int[] ans = new int[rains.length];
        Map<Integer, Integer> fullLakes = new HashMap<>();
        TreeSet<Integer> dryDays = new TreeSet<>();
        for (int i = 0; i < rains.length; i++) {
            if (rains[i] == 0) {
                dryDays.add(i);
            } else {
                if (fullLakes.containsKey(rains[i])) {
                    Integer nextDryDay = dryDays.ceiling(fullLakes.get(rains[i]));
                    if (nextDryDay == null) {
                        return new int[0];
                    }
                    ans[nextDryDay] = rains[i];
                    dryDays.remove(nextDryDay);
                }
                ans[i] = -1;
                fullLakes.put(rains[i], i);
            }
        }
        for (int dryDay : d;
            }
        }
        return ans;

=======

        Map<Integer, Integer> full = new HashMap();
        TreeSet<Integer> dry = new TreeSet();
        int[] ans = new int[rains.length];
        for (int i = 0; i < rains.length; i++) {
            if (rains[i] > 0) {
                if (full.containsKey(rains[i])) {
                    Integer dryDay = dry.ceiling(full.get(rains[i]));
                    if (dryDay == null) {
                        return new int[0];
                    }
                    ans[dryDay] = rains[i];
                    dry.remove(dryDay);
                }
                full.put(rains[i], i);
                ans[i] = -1;
            } else {
                dry.add(i);
            }
        }
        for (int i = 0; i < ans.length; i++) {
            if (ans[i] == 0) {
                ans[i] = 1;
            }
        }
        return ans;

=======

        Map<Integer, Integer> fullLake = new HashMap<>();
        TreeSet<Integer> dryDays = new TreeSet<>();
        int[] ans = new int[rains.length];
        for(int i = 0; i < rains.length; i++) {
            if(rains[i] == 0) {
                dryDays.add(i);
                ans[i] = 1;
            } else {
                if(fullLake.containsKey(rains[i])) {
                    Integer dryDay = dryDays.ceiling(fullLake.get(rains[i]));
                    if(dryDay == null) {
                        return new int[0];
                    } else {
                        ans[dryDay] = rains[i];
                        dryDays.remove(dryDay);
                    }
                }
                ans[i] = -1;
                fullLake.put(rains[i], i)ryDays) {
            ans[dryDay] = 1;
        }
        return ans;

=======

        int n = rains.length;
        int[] ans = new int[n];
        Arrays.fill(ans, 1);
        Map<Integer, Integer> full = new HashMap<>();
        TreeSet<Integer> dry = new TreeSet<>();
        for (int i = 0; i < n; i++) {
            if (rains[i] == 0) {
                dry.add(i);
            } else {
                if (full.containsKey(rains[i])) {
                    Integer d = dry.ceiling(full.get(rains[i]));
                    if (d == null) {
                        return new int[0];
                    } else {
                        ans[d] = rains[i];
                        dry.remove(d);
                    }
                }
                full.put(rains[i], i);
                ans[i] = -1;
            }
        }
        return ans;

=======

        Map<Integer, Integer> fullLake = new HashMap<>();
        TreeSet<Integer> dryDays = new TreeSet<>();
        int[] ans = new int[rains.length];
        for(int i = 0; i < rains.length; i++) {
            if(rains[i] == 0) {
                dryDays.add(i);
                ans[i] = 1;
            } else {
                if(fullLake.containsKey(rains[i])) {
                    Integer dryDay = dryDays.ceiling(fullLake.get(rains[i]));
                    if(dryDay == null) {
                        return new int[0];
                    } else {
                        ans[dryDay] = rains[i];
                        dryDays.remove(dryDay);
                    }
                }
                ans[i] = -1;
                fullLake.put(rains[i], i);
            }
        }
        return ans;

=======

        int n = rains.length;
        int[] ans = new int[n];
        Arrays.fill(ans, -1);
        
        // 1. Store the days that rain over the lake.
        Map<Integer, Integer> lastRainDay = new HashMap<>();
        // 2. Store the days that are empty.
        TreeSet<Integer> emptyDays = new TreeSet<>();
        
        for (int i = 0; i < n; i++) {
            int lake = rains[i];
            if (lake == 0) {
                emptyDays.add(i);
                continue;
            }
            
            // If the lake is full.
            if (lastRainDay.containsKey(lake)) {
                // Find the first day that is empty and after the last rain day.
                Integer dryDay = emptyDays.ceiling(lastRainDay.get(lake));
                if (dryDay == null) {
                    // No empty day after the last rain day.
                    return new int[0];
                }
                ans[dryDay] = lake;
                emptyDays.remove(dryDay);
            }
            
            ans[i] = -1;
            lastRainDay.put(lake, i);
        }
        
        for (int i = 0; i < n; i++) {
            if (ans[i] == 0) {
                ans[i] = 1;
            }
        }
        
        return ans;
