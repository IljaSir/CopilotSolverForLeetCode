Synthesizing 10/10 solutions

=======

        if (n == 0) {
            return 1;
        }
        if (n == 1) {
            return x;
        }
        if (n == -1) {
            return 1 / x;
        }
        double half = myPow(x, n / 2);
        if (n % 2 == 0) {
            return half * half;
        } else {
            return half * half * myPow(x, n % 2);
        }

=======

        if (n == 0) {
            return 1;
        }
        if (n == 1) {
            return x;
        }
        if (n == -1) {
            return 1 / x;
        }
        double half = myPow(x, n / 2);
        double rest = myPow(x, n % 2);
        return half * half * rest;

=======

        if (n == 0) return 1;
        if (n == 1) return x;
        if (n == -1) return 1 / x;
        double half = myPow(x, n / 2);
        return half * half * myPow(x, n % 2);

=======

        if (n == 0) {
            return 1;
        }
        if (n < 0) {
            x = 1 / x;
            n = -n;
        }
        if (n % 2 == 0) {
            return myPow(x * x, n / 2);
        }
        return x * myPow(x * x, n / 2);

=======

        if (n == 0) {
            return 1;
        }
        if (n < 0) {
            return 1 / myPow(x, -n);
        }
        if (n % 2 == 0) {
            double y = myPow(x, n / 2);
            return y * y;
        } else {
            return x * myPow(x, n - 1);
        }

=======

        if (n == 0) return 1;
        if (n == 1) return x;
        if (n == -1) return 1/x;
        double half = myPow(x, n/2);
        double remain = myPow(x, n%2);
        return half * half * remain;

=======

        if (n == 0) return 1;
        if (n == 1) return x;
        if (n == -1) return 1/x;
        double half = myPow(x, n/2);
        if (n % 2 == 0) return half * half;
        else return half * half * myPow(x, n % 2);

=======

        if (n < 0) {
            x = 1 / x;
            n = -n;
        }
        return fastPow(x, n);
    }
    private double fastPow(double x, int n) {
        if (n == 0) {
            return 1.0;
        }
        double half = fastPow(x, n / 2);
        if (n % 2 == 0) {
            return half * half;
        } else {
            return half * half * x;
        }

=======

        if (n == 0) {
            return 1;
        }
        if (n < 0) {
            return 1 / (x * myPow(x, -(n + 1)));
        }
        if (n % 2 == 0) {
            double half = myPow(x, n / 2);
            return half * half;
        }
        return x * myPow(x, n - 1);

=======

        if (n == 0) return 1;
        if (n < 0) {
            x = 1/x;
            n = -n;
        }
        double res = 1;
        while (n > 0) {
            if ((n & 1) == 1) res *= x;
            x *= x;
            n >>= 1;
        }
        return res;
