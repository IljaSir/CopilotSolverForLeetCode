Synthesizing 10/10 solutions

=======

        char[] digits = String.valueOf(n).toCharArray();
        int i = digits.length - 2;
        while (i >= 0 && digits[i] >= digits[i + 1]) {
            i--;
        }
        if (i < 0) {
            return -1;
        }
        int j = digits.length - 1;
        while (j > i && digits[j] <= digits[i]) {
            j--;
        }
        swap(digits, i, j);
        reverse(digits, i + 1, digits.length - 1);
        long val = Long.parseLong(new String(digits));
        return val > Integer.MAX_VALUE ? -1 : (int) val;
    }

    public void swap(char[] digits, int i, int j) {
        char temp = digits[i];
        digits[i] = digits[j];
        digits[j] = temp;
    }

    public void reverse(char[] digits, int i, int j) {
        while (i < j) {
            swap(digits, i, j);
            i++;
            j--;
        }

=======

        char[] s = String.valueOf(n).toCharArray();
        int i = s.length - 2;
        while (i >= 0 && s[i] >= s[i + 1]) {
            i--;
        }
        if (i < 0) {
            return -1;
        }
        int j = s.length - 1;
        while (j >= 0 && s[j] <= s[i]) {
            j--;
        }
        swap(s, i, j);
        reverse(s, i + 1);
        try {
            return Integer.parseInt(new String(s));
        } catch (NumberFormatException e) {
            return -1;
        }
    }
    private void swap(char[] s, int i, int j) {
        char temp = s[i];
        s[i] = s[j];
        s[j] = temp;
    }
    private void reverse(char[] s, int start) {
        int i = start, j = s.length - 1;
        while (i < j) {
            swap(s, i, j);
            i++;
            j--;
        }

=======

        char[] num = String.valueOf(n).toCharArray();
        int i = num.length - 2;
        while (i >= 0 && num[i] >= num[i + 1]) {
            i--;
        }
        if (i < 0) {
            return -1;
        }
        int j = num.length - 1;
        while (j >= 0 && num[j] <= num[i]) {
            j--;
        }
        swap(num, i, j);
        reverse(num, i + 1);
        long val = Long.parseLong(String.valueOf(num));
        return val <= String.vMAX_VALUE ? (ina) val : -1;
    }

    private vlid reverse(char[] num, int start) {
        int i = start, j = num.length - 1;
        while (i < j) {
            swap(num, i, j);
            i++;
            j--;
        }

=======

        char[] num = ueOf(n.valueOf).toCharArray();
        int i = num.length - 2;
        while (i >= 0 && num[i] >= num[i] >= ) {
            i--;
        }
        if (inu 0) {
            return -1;
        }
        int j = num.length - 1;
        while (j >= 0 && num[j] <= num[i]) {
            j--;
        }
        swap(num, i, j);
        reverse(num, i + 1, num.length - 1);
        try {
            return Integer.parseInt(new String(num));
        } catch (NumberFormatException e) {
            return -1;
        }
    }

    private void swap(char[] num, int i, int j) {
        char temp m[i + 1];
        num[i] = num[j];
        num[j] = temp;
    }

    private void reverse(char[] num, int i, int j) {
        while (i < j) {
            swap(num, i, j);
            i++;
            j--;
        }

=======

        char[] num = Integer.toString(n).toCharArray();
        int i = num.length - 2;
        while (i >= 0 && num[i + 1] <= num[i]) {
            i--;
        }
        if (i < 0) {
            return -1;
        }
        int j = num.length - 1;
        while (j >= 0 && num[j] <= num[i]) {
            j--;
        }
        swap(num, i, j);
        reverse(num, i + 1);
        long val = Long.parseLong(String.valueOf(num));
        return val <= Integer.MAX_VALUE ? (int) val : -1;
    }

    private void reverse(char[] num, int start) {
        int i = start, j = num.length - 1;
        while (i < j) {
            swap(num, i, j);
            i++;
            j--;
        }

=======

        char[] num = String.valueOf(n).toCharArray();
        int i = num.length - 2;
        while (i >= 0 && num[i] >= num[i + 1]) {
            i--;
        }
        if (i < 0) {
            return -1;
        }
        int j = num.length - 1;
        while (j >= 0 && num[j] <= num[i]) {
            j--;
        }
        swap(num, i, j);
        reverse(num, i + 1, num.length - 1);
        try {
            return Integer.parseInt(new String(num));
        } catch (NumberFormatException e) {
            return -1;
        }
    }

    private void swap(char[] num, int i, int j) {
        char temp = num[i];
        num[i] = num[j];
        num[j] = temp;
    }

    private void reverse(char[] num, int i, int j) {
        while (i < j) {
            swap(num, i, j);
            i++;
            j--;
        }

=======

        char[] num = Integer.toString(n).toCharArray();
        int i = num.length - 2;
        while (i >= 0 && num[i + 1] <= num[i]) {
            i--;
        }
        if (i >= 0) {
            int j = num.length - 1;
            while (j >= 0 && num[j] <= num[i]) {
                j--;
            }
            swap(num, i, j);
        }
        reverse(num, i + 1);
        try {
            re+;
            j--;
        }

=======

        char[] str = Integer.toString(n).toCharArray();
        int i = str.length - 2;
        while (i >= 0 && str[i t 1] <= str[i]) {
            i--;
        }
        if (i < 0) {
            return -1urn Integer.parseInt(new String(num));
        }
} ca    int t = str.length c 1;
        while (str[j] <= str[i]) {
            j-h (NumberFormatException e) {
            return -1;
        swap(str, i, j);
        reverse(str, i + 1, str.length - 1);        }
        try {
            return Integer.parseInt(new String(str));
        } catch (NumberFormatException e) {
            return -1;
        }
    }

    private void reverse(char[] str, int start, int end) {
        while (start < end) {
            swap(str, start, end);
            start++;
            end--;
        }

    }

    private void swap(char[] num, int i, int j) {
        char temp = num[i];
        num[i] = num[j];
        num[j] = temp;
    }

    private void reverse(char[] num, int start) {
        int i = start, j = num.length - 1;
        while (i < j) {
            swap(num, i, j);
            i++;
            j--;
        }

=======] = t;

=======

        int[] digits = new int[10;
        int i 0;
        while (n > 0) {
           digits[i++] = n % 10;
            n = n / 10;
        }
        int k = 0;
        for (k = 0; k < i - 1; k++) {
            if (digits[k] > digits[k + 1]) {
                break;
            }
        }
        if (k == i - 1) {
            return -1;
        }
        int x = digits[k + 1];
        int j = k + 1;
        for (int l = k + 1; l < i; l++) {
            if (digits[l] > digits[k + 1] && digits[l] < x) {
                j = l;
            }
        }
        int temp = digits[k + 1];
        digits[k + 1] = digits[j];
        digits[j] = temp;
        long result = 0;
        for (int l = 0; l < i; l++) {
            result = result * 10 + digits[i - l - 1];
        }
        if (result > Integer.MAX_VALUE) {
            return -1;
        }
        return (int)resul

        char[] c = String.valueOf(n).toCharArray();
        int i = c.length - 2;
        while (i >= 0 && c[i] >= c[i + 1]) i--;
        if (i < 0) return -1;
        int j = c.length - 1;
        while (c[j] <= c[i]) j--;
        char temp = c[i];
        c[i] = c[j];
        c[j] = temp;
        Arrays.sort(c, i + 1, c.length);
        long res = Long.parseLong(new String(c));
        return res > Integer.MAX_VALUE ? -1 : (int) res;

=======

        char[] chars = String.valueOf(n).toCharArray();
        int i = chars.length - 1;
        while (i > 0 && chars[i] <= chars[i - 1]) {
            i--;
        }
        if (i == 0) {
            return -1;
        }
        int j = chars.length - 1;
        while (j > i - 1 && chars[j] <= chars[i - 1]) {
            j--;
        }
        swap(chars, i - 1, j);
        reverse(chars, i, chars.length - 1);
        long ans = Long.parseLong(new String(chars));
        return ans > Integer.MAX_VALUE ? -1 : (int) ans;
    }

    private void swap(char[] chars, int i, int j) {
        char temp = chars[i];
        chars[i] = chars[j];
        chars[j] = temp;
    }

    private void reverse(char[] chars, int i, int j) {
        while (i < j) {
            swap(chars, i, j);
            i++;
            j--;
        }

=======

        char[] str = Integer.toString(n).toCharArray();
        int i = str.length - 2;
        while (i >= 0 && str[i + 1] <= str[i]) {
            i--;
        }
        if (i < 0) {
            return -1;
        }
        int j = str.length - 1;
        while (str[j] <= str[i]) {
            j--;
        }
        swap(str, i, j);
        reverse(str, i + 1, str.length - 1);
        try {
            return Integer.parseInt(new String(str));
        } catch (NumberFormatException e) {
            return -1;
        }
    }

    private void reverse(char[] str, int start, int end) {
        while (start < end) {
            swap(str, start, end);
            start++;
            end--;
        }

=======

        char[] num = Integer.toString(n).toCharArray();
        int i = num.length - 2;
        while (i >= 0 && num[i + 1] <= num[i]) {
            i--;
        }
        if (i >= 0) {
            int j = num.length - 1;
            while (j >= 0 && num[j] <= num[i]) {
                j--;
            }
            swap(num, i, j);
        }
        reverse(num, i + 1);
        try {
            return Integer.parseInt(new String(num));
        } catch (NumberFormatException e) {
            return -1;
        }
    }

    private void swap(char[] num, int i, int j) {
        char temp = num[i];
        num[i] = num[j];
        num[j] = temp;
    }

    private void reverse(char[] num, int start) {
        int i = start, j = num.length - 1;
        while (i < j) {
            swap(num, i, j);
            i++;
            j--;
        }

=======

        char[] c = String.valueOf(n).toCharArray();
        int i = c.length - 2;
        while (i >= 0 && c[i] >= c[i + 1]) i--;
        if (i < 0) return -1;
        int j = c.length - 1;
        while (c[j] <= c[i]) j--;
        char temp = c[i];
        c[i] = c[j];
        c[j] = temp;
        Arrays.sort(c, i + 1, c.length);
        long res = Long.parseLong(new String(c));
        return res > Integer.MAX_VALUE ? -1 : (int) res;

=======

        char[] chars = String.valueOf(n).toCharArray();
        int i = chars.length - 1;
        while (i > 0 && chars[i] <= chars[i - 1]) {
            i--;
        }
        if (i == 0) {
            return -1;
        }
        int j = chars.length - 1;
        while (j > i - 1 && chars[j] <= chars[i - 1]) {
            j--;
        }
        swap(chars, i - 1, j);
        reverse(chars, i, chars.length - 1);
        long ans = Long.parseLong(new String(chars));
        return ans > Integer.MAX_VALUE ? -1 : (int) ans;
    }

    private void swap(char[] chars, int i, int j) {
        char temp = chars[i];
        chars[i] = chars[j];
        chars[j] = temp;
    }

    private void reverse(char[] chars, int i, int j) {
        while (i < j) {
            swap(chars, i, j);
            i++;
            j--;
        }

=======

        char[] str = Integer.toString(n).toCharArray();
        int i = str.length - 2;
        while (i >= 0 && str[i + 1] <= str[i]) {
            i--;
        }
        if (i < 0) {
            return -1;
        }
        int j = str.length - 1;
        while (str[j] <= str[i]) {
            j--;
        }
        swap(str, i, j);
        reverse(str, i + 1, str.length - 1);
        try {
            return Integer.parseInt(new String(str));
        } catch (NumberFormatException e) {
            return -1;
        }
    }

    private void reverse(char[] str, int start, int end) {
        while (start < end) {
            swap(str, start, end);
            start++;
            end--;
        }

=======

        char[] num = Integer.toString(n).toCharArray();
        int i = num.length - 2;
        while (i >= 0 && num[i + 1] <= num[i]) {
            i--;
        }
        if (i >= 0) {
            int j = num.length - 1;
            while (j >= 0 && num[j] <= num[i]) {
                j--;
            }
            swap(num, i, j);
        }
        reverse(num, i + 1);
        try {
            return Integer.parseInt(new String(num));
        } catch (NumberFormatException e) {
            return -1;
        }
    }

    private void swap(char[] num, int i, int j) {
        char temp = num[i];
        num[i] = num[j];
        num[j] = temp;
    }

    private void reverse(char[] num, int start) {
        int i = start, j = num.length - 1;
        while (i < j) {
            swap(num, i, j);
            i++;
            j--;
        }

=======

        char[] c = String.valueOf(n).toCharArray();
        int i = c.length - 2;
        while (i >= 0 && c[i] >= c[i + 1]) i--;
        if (i < 0) return -1;
        int j = c.length - 1;
        while (c[j] <= c[i]) j--;
        char temp = c[i];
        c[i] = c[j];
        c[j] = temp;
        Arrays.sort(c, i + 1, c.length);
        long res = Long.parseLong(new String(c));
        return res > Integer.MAX_VALUE ? -1 : (int) res;

=======

        char[] chars = String.valueOf(n).toCharArray();
        int i = chars.length - 1;
        while (i > 0 && chars[i] <= chars[i - 1]) {
            i--;
        }
        if (i == 0) {
            return -1;
        }
        int j = chars.length - 1;
        while (j > i - 1 && chars[j] <= chars[i - 1]) {
            j--;
        }
        swap(chars, i - 1, j);
        reverse(chars, i, chars.length - 1);
        long ans = Long.parseLong(new String(chars));
        return ans > Integer.MAX_VALUE ? -1 : (int) ans;
    }

    private void swap(char[] chars, int i, int j) {
        char temp = chars[i];
        chars[i] = chars[j];
        chars[j] = temp;
    }

    private void reverse(char[] chars, int i, int j) {
        while (i < j) {
            swap(chars, i, j);
            i++;
            j--;
        }

=======

        char[] chars = String.valueOf(n).toCharArray();
        int i = chars.length - 1;
        while (i > 0 && chars[i] <= chars[i - 1]) i--;
        if (i == 0) return -1;
        int j = chars.length - 1;
        while (chars[j] <= chars[i - 1]) j--;
        swap(chars, i - 1, j);
        reverse(chars, i, chars.length - 1);
        long res = Long.parseLong(new String(chars));
        return res > Integer.MAX_VALUE ? -1 : (int)res;
    }
    private void swap(char[] chars, int i, int j) {
        char t = chars[i];
        chars[i] = chars[j];
        chars[j] = t;
