Synthesizing 10/10 solutions

=======

        int count = 0;
        int max = 0;
        for (int i = 0; i < s.length(); i++) {
            if (isVowel(s.charAt(i))) {
                count++;
            }
            if (i >= k && isVowel(s.charAt(i - k))) {
                count--;
            }
            max = Math.max(count, max);
        }
        return max;

=======

        int max = 0;
        int count = 0;
        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {
                count++;
            }
            if (i >= k && (s.charAt(i - k) == 'a' || s.charAt(i - k) == 'e' || s.charAt(i - k) == 'i' || s.charAt(i - k) == 'o' || s.charAt(i - k) == 'u')) {
                count--;
            }
            max = Math.max(max, count);
        }
        return max;

=======

        int max = 0;
        int count = 0;
        for (int i = 0; i < s.length(); i++) {
            if (i >= k && isVowel(s.charAt(i - k))) {
                count--;
            }
            if (isVowel(s.charAt(i))) {
                count++;
            }
            max = Math.max(max, count);
        }
        return max;

=======

        int count = 0;
        int max = 0;
        for (int i = 0; i < s.length(); i++) {
            if (i >= k && isVowel(s.charAt(i - k))) {
                count--;
            }
            if (isVowel(s.charAt(i))) {
                count++;
            }
            max = Math.max(max, count);
        }
        return max;

=======

        int max = 0;
        int cur = 0;
        for (int i = 0; i < s.length(); i++) {
            if (i < k) {
                if (isVowel(s.charAt(i))) {
                    cur++;
                }
            } else {
                if (isVowel(s.charAt(i))) {
                    cur++;
                }
                if (isVowel(s.charAt(i - k))) {
                    cur--;
                }
            }
            max = Math.max(max, cur);
        }
        return max;

=======

        int max = 0;
        int sum = 0;
        for (int i = 0; i < k; i++) {
            if (isVowel(s.charAt(i))) {
                sum++;
            }
        }
        max = sum;
        for (int i = k; i < s.length(); i++) {
            if (isVowel(s.charAt(i - k))) {
                sum--;
            }
            if (isVowel(s.charAt(i))) {
                sum++;
            }
            max = Math.max(max, sum);
        }
        return max;

=======

        int max = 0;
        int cur = 0;
        for (int i = 0; i < s.length(); i++) {
            if (i >= k && isVowel(s.charAt(i - k))) {
                cur--;
            }
            if (isVowel(s.charAt(i))) {
                cur++;
            }
            max = Math.max(max, cur);
        }
        return max;

=======

        int max=0;
        int count=0;
        for(int i=0;i<k;i++){
            if(isVowel(s.charAt(i))){
                count++;
            }
        }
        max=count;
        for(int i=k;i<s.length();i++){
            if(isVowel(s.charAt(i))){
                count++;
            }
            if(isVowel(s.charAt(i-k))){
                count--;
            }
            max=Math.max(max,count);
        }
        return max;

=======

        int max = 0;
        int count = 0;
        for(int i=0; i<s.length(); i++){
            if(isVowel(s.charAt(i))){
                count++;
            }
            if(i >= k && isVowel(s.charAt(i-k))){
                count--;
            }
            max = Math.max(max, count);
        }
        return max;

=======

        int n = s.length();
        int[] arr = new int[n];
        int count = 0;
        for (int i = 0; i < n; i++) {
            char c = s.charAt(i);
            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {
                count++;
            }
            arr[i] = count;
        }
        int max = 0;
        for (int i = 0; i <= n - k; i++) {
            int end = i + k - 1;
            if (i == 0) {
                max = Math.max(max, arr[end]);
            } else {
                max = Math.max(max, arr[end] - arr[i - 1]);
            }
        }
        return max;
