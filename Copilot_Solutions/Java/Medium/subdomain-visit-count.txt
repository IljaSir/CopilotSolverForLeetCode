Synthesizing 10/10 solutions

=======

        Map<String, Integer> map = new HashMap<>();
        for (String cpdomain : cpdomains) {
            String[] parts = cpdomain.split(" ");
            int count = Integer.parseInt(parts[0]);
            String domain = parts[1];
            map.put(domain, map.getOrDefault(domain, 0) + count);
            for (int i = 0; i < domain.length(); ++i)
                if (domain.charAt(i) == '.') {
                    String subdomain = domain.substring(i + 1);
                    map.put(subdomain, map.getOrDefault(subdomain, 0) + count);
                }
        }

        List<String> ans = new ArrayList<>();
        for (String dom : map.keySet())
            ans.add(map.get(dom) + " " + dom);
        return ans;

=======

        Map<String, Integer> map = new HashMap<>();
        for (String cpdomain : cpdomains) {
            String[] parts = cpdomain.split(" ");
            int count = Integer.parseInt(parts[0]);
            String domain = parts[1];
            map.put(domain, map.getOrDefault(domain, 0) + count);
            for (int i = 0; i < domain.length(); i++) {
                if (domain.charAt(i) == '.') {
                    String subdomain = domain.substring(i + 1);
                    map.put(subdomain, map.getOrDefault(subdomain, 0) + count);
                }
            }
        }

        List<String> ans = new ArrayList<>();
        for (String domain : map.keySet()) {
            ans.add(map.get(domain) + " " + domain);
        }
        return ans;

=======

        Map<String, Integer> map = new HashMap<>();
        for (String cpdomain : cpdomains) {
            String[] parts = cpdomain.split(" ");
            int count = Integer.parseInt(parts[0]);
            String domain = parts[1];
            map.put(domain, map.getOrDefault(domain, 0) + count);
            for (int i = 0; i < domain.length(); i++) {
                if (domain.charAt(i) == '.') {
                    String subdomain = domain.substring(i + 1);
                    map.put(subdomain, map.getOrDefault(subdomain, 0) + count);
                }
            }
        }

        List<String> res = new ArrayList<>();
        for (String domain : map.keySet()) {
            res.add(map.get(domain) + " " + domain);
        }
        return res;

=======

        Map<String, Integer> map = new HashMap<>();
        for (String cpdomain : cpdomains) {
            String[] parts = cpdomain.split(" ");
            int count = Integer.parseInt(parts[0]);
            String domain = parts[1];
            map.put(domain, map.getOrDefault(domain, 0) + count);
            for (int i = 0; i < domain.length(); i++) {
                if (domain.charAt(i) == '.') {
                    String subdomain = domain.substring(i + 1);
                    map.put(subdomain, map.getOrDefault(subdomain, 0) + count);
                }
            }
        }
        List<String> result = new ArrayList<>();
        for (String domain : map.keySet()) {
            result.add(map.get(domain) + " " + domain);
        }
        return result;

=======

        Map<String, Integer> map = new HashMap<>();
        for (String cpdomain : cpdomains) {
            int i = cpdomain.indexOf(' ');
            int count = Integer.parseInt(cpdomain.substring(0, i));
            String domain = cpdomain.substring(i + 1);
            map.put(domain, map.getOrDefault(domain, 0) + count);
            for (i = 0; i < domain.length(); i++) {
                if (domain.charAt(i) == '.') {
                    String subdomain = domain.substring(i + 1);
                    map.put(subdomain, map.getOrDefault(subdomain, 0) + count);
                }
            }
        }
        List<String> res = new ArrayList<>();
        for (String domain : map.keySet()) {
            res.add(map.get(domain) + " " + domain);
        }
        return res;

=======

        Map<String, Integer> map = new HashMap<>();
        for (String cpdomain : cpdomains) {
            String[] cpinfo = cpdomain.split(" ");
            int count = Integer.valueOf(cpinfo[0]);
            String domain = cpinfo[1];
            map.put(domain, map.getOrDefault(domain, 0) + count);
            for (int i = 0; i < domain.length(); ++i) {
                if (domain.charAt(i) == '.') {
                    String subdomain = domain.substring(i + 1);
                    map.put(subdomain, map.getOrDefault(subdomain, 0) + count);
                }
            }
        }

        List<String> ans = new ArrayList<>();
        for (String domain : map.keySet()) {
            ans.add(map.get(domain) + " " + domain);
        }
        return ans;

=======

        Map<String, Integer> map = new HashMap<>();
        for (String cpdomain : cpdomains) {
            String[] countDomain = cpdomain.split(" ");
            int count = Integer.parseInt(countDomain[0]);
            String domain = countDomain[1];
            map.put(domain, map.getOrDefault(domain, 0) + count);
            for (int i = 0; i < domain.length(); i++) {
                if (domain.charAt(i) == '.') {
                    map.put(domain.substring(i + 1), map.getOrDefault(domain.substring(i + 1), 0) + count);
                }
            }
        }
        List<String> res = new ArrayList<>();
        for (Map.Entry<String, Integer> entry : map.entrySet()) {
            res.add(entry.getValue() + " " + entry.getKey());
        }
        return res;

=======

        Map<String, Integer> map = new HashMap<String, Integer>();
        for (String cpdomain : cpdomains) {
            String[] parts = cpdomain.split("\\s+");
            int count = Integer.parseInt(parts[0]);
            String domain = parts[1];
            map.put(domain, map.getOrDefault(domain, 0) + count);
            for (int i = 0; i < domain.length(); ++i) {
                if (domain.charAt(i) == '.') {
                    String subdomain = domain.substring(i + 1);
                    map.put(subdomain, map.getOrDefault(subdomain, 0) + count);
                }
            }
        }

        List<String> ans = new ArrayList();
        for (String domain : map.keySet()) {
            ans.add(map.get(domain) + " " + domain);
        }
        return ans;

=======

        List<String> result = new ArrayList<>();
        HashMap<String, Integer> map = new HashMap<>();
        for (String cpdomain : cpdomains) {
            String[] cpInfo = cpdomain.split(" ");
            int count = Integer.parseInt(cpInfo[0]);
            String domain = cpInfo[1];
            map.put(domain, map.getOrDefault(domain, 0) + count);
            for (int i = 0; i < domain.length(); i++) {
                if (domain.charAt(i) == '.') {
                    String subdomain = domain.substring(i + 1);
                    map.put(subdomain, map.getOrDefault(subdomain, 0) + count);
                }
            }
        }
        for (String key : map.keySet()) {
            result.add(map.get(key) + " " + key);
        }
        return result;

=======

        HashMap<String, Integer> map = new HashMap<String, Integer>();
        List<String> res = new ArrayList<String>();
        for (String cpd : cpdomains) {
            String[] cpdArr = cpd.split(" ");
            int count = Integer.valueOf(cpdArr[0]);
            String[] domains = cpdArr[1].split("\\.");
            String domain = "";
            for (int i = domains.length - 1; i >= 0; i--) {
                domain = domains[i] + (i < domains.length - 1 ? "." : "") + domain;
                map.put(domain, map.getOrDefault(domain, 0) + count);
            }
        }
        for (String key : map.keySet()) {
            res.add(map.get(key) + " " + key);
        }
        return res;
