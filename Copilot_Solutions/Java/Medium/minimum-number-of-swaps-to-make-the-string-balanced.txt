Synthesizing 10/10 solutions

=======

        int open = 0;
        int close = 0;
        for (int i = 0; i < s.length(); i++) {
            if (s.charAt(i) == '[') {
                open++;
            } else {
                if (open > 0) {
                    open--;
                } else {
                    close++;
                }
            }
        }
        return (close + 1) / 2;

=======

        int count = 0;
        int res = 0;
        for (int i = 0; i < s.length(); i++) {
            if (s.charAt(i) == '[') {
                count++;
            } else {
                count--;
            }
            if (count < 0) {
                res++;
                count += 2;
            }
        }
        return res;

=======

        int ans = 0;
        int count = 0;
        for (int i = 0; i < s.length(); i++) {
            if (s.charAt(i) == '[') {
                count++;
            } else {
                count--;
            }
            if (count < 0) {
                ans++;
                count = 1;
            }
        }
        return ans;

=======

        int cnt = 0;
        int ans = 0;
        for (int i = 0; i < s.length(); i++) {
            if (s.charAt(i) == '[') {
                cnt++;
            } else {
                cnt--;
            }
            if (cnt < 0) {
                cnt += 2;
                ans++;
            }
        }
        return ans;

=======

        int left = 0;
        int right = 0;
        int swaps = 0;
        for (int i = 0; i < s.length(); i++) {
            if (s.charAt(i) == '[') {
                left++;
            } else {
                right++;
            }
            if (left < right) {
                swaps++;
                left++;
                right--;
            }
        }
        return swaps;

=======

        int l = 0;
        int r = 0;
        for (char c : s.toCharArray()) {
            if (c == '[') {
                l++;
            } else {
                if (l > 0) {
                    l--;
                } else {
                    r++;
                }
            }
        }
        return (r + 1) / 2;

=======

        int n = s.length();
        int left = 0, right = 0;
        for (int i = 0; i < n; i++) {
            if (s.charAt(i) == '[') {
                left++;
            } else {
                if (left > 0) {
                    left--;
                } else {
                    right++;
                }
            }
        }
        return (right + 1) / 2;

=======

        int n = s.length();
        int cnt = 0;
        int ans = 0;
        for (int i = 0; i < n; i++) {
            if (s.charAt(i) == '[') {
                cnt++;
            } else {
                cnt--;
                if (cnt < 0) {
                    ans++;
                    cnt = 1;
                }
            }
        }
        return ans;

=======

        int count = 0;
        int result = 0;
        for (char c : s.toCharArray()) {
            if (c == '[') {
                count++;
            } else {
                if (count > 0) {
                    count--;
                } else {
                    result++;
                    count++;
                }
            }
        }
        return result;

=======

        int n = s.length();
        int[] dp = new int[n];
        int sum = 0;
        for (int i = 0; i < n; i++) {
            sum += s.charAt(i) == '[' ? 1 : -1;
            dp[i] = sum;
        }
        if (sum != 0) {
            return -1;
        }
        int res = n;
        for (int i = 0; i < n; i++) {
            if (dp[i] < 0) {
                res = Math.min(res, -dp[i]);
            }
        }
        return res;
