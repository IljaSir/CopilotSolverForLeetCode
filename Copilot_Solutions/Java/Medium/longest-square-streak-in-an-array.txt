Synthesizing 10/10 solutions

=======

        Arrays.sort(nums);
        int n = nums.length;
        int[] dp = new int[n];
        dp[0] = 1;
        int max = 1;
        for (int i = 1; i < n; i++) {
            if (nums[i] == nums[i - 1] * nums[i - 1]) {
                dp[i] = dp[i - 1] + 1;
                max = Math.max(max, dp[i]);
            } else {
                dp[i] = 1;
            }
        }
        return max >= 2 ? max : -1;

=======

        Set<Integer> set = new HashSet<>();
        for (int num : nums) {
            set.add(num);
        }
        int max = 0;
        for (int num : nums) {
            int len = 1;
            int prev = num;
            while (set.contains(prev - 1)) {
                prev--;
                len++;
            }
            max = Math.max(max, len);
        }
        return max == 1 ? -1 : max;

=======

        int n = nums.length;
        int[] dp = new int[n];
        Arrays.fill(dp, 1);
        int ans = 1;
        for (int i = 1; i < n; i++) {
            for (int j = 0; j < i; j++) {
                if (nums[i] % nums[j] == 0 && Math.sqrt(nums[i] / nums[j]) == (int)Math.sqrt(nums[i] / nums[j])) {
                    dp[i] = Math.max(dp[i], dp[j] + 1);
                    ans = Math.max(ans, dp[i]);
                }
            }
        }
        return ans >= 3 ? ans : -1;

=======

        int n = nums.length;
        int[] dp = new int[n];
        Arrays.fill(dp, 1);
        Map<Integer, Integer> map = new HashMap<>();
        int max = 0;
        for (int i = 0; i < n; i++) {
            int num = nums[i];
            int sqrt = (int) Math.sqrt(num);
            if (sqrt * sqrt == num && map.containsKey(sqrt)) {
                dp[i] = dp[map.get(sqrt)] + 1;
            }
            map.put(num, i);
            max = Math.max(max, dp[i]);
        }
        return max >= 3 ? max : -1;

=======

        int n = nums.length;
        int maxLen = 0;
        int[] dp = new int[n];
        dp[0] = 1;
        for (int i = 1; i < n; i++) {
            dp[i] = 1;
            for (int j = 0; j < i; j++) {
                if (nums[i] % nums[j] == 0 && nums[i] / nums[j] == nums[j]) {
                    dp[i] = Math.max(dp[i], dp[j] + 1);
                }
            }
            maxLen = Math.max(maxLen, dp[i]);
        }
        return maxLen > 1 ? maxLen : -1;

=======

        Map<Integer, Integer> map = new HashMap<>();
        int max = 0;
        for(int i = 0; i < nums.length; i++) {
            int num = nums[i];
            if(map.containsKey(num)) {
                continue;
            }
            if(map.containsKey(num - 1) && map.containsKey(num + 1)) {
                int left = map.get(num - 1);
                int right = map.get(num + 1);
                int sum = left + right + 1;
                max = Math.max(max, sum);
                map.put(num, sum);
                map.put(num - left, sum);
                map.put(num + right, sum);
            } else if(map.containsKey(num - 1)) {
                int left = map.get(num - 1);
                int sum = left + 1;
                max = Math.max(max, sum);
                map.put(num, sum);
                map.put(num - left, sum);
            } else if(map.containsKey(num + 1)) {
                int right = map.get(num + 1);
                int sum = right + 1;
                max = Math.max(max, sum);
                map.put(num, sum);
                map.put(num + right, sum);
            } else {
                map.put(num, 1);
                max = Math.max(max, 1);
            }
        }
        if(max < 2) {
            return -1;
        }
        return max;

=======

        int max = 0;
        int count = 0;
        int last = 0;
        for (int num : nums) {
            if (num == last) {
                continue;
            }
            if (num == last * last) {
                count++;
                max = Math.max(max, count);
            } else {
                count = 1;
            }
            last = num;
        }
        return max < 2 ? -1 : max;

=======

        int n = nums.length;
        if (n < 2)
            return -1;
        int max = 0;
        int[] f = new int[n];
        Arrays.fill(f, 1);
        for (int i = 1; i < n; i++) {
            for (int j = 0; j < i; j++) {
                if (nums[i] == nums[j] * nums[j] && f[j] + 1 > f[i]) {
                    f[i] = f[j] + 1;
                    max = Math.max(max, f[i]);
                }
            }
        }
        return max < 2 ? -1 : max;

=======

        int longest = 0;
        int current = 0;
        int previous = 0;
        int n = nums.length;
        for (int i = 0; i < n; i++) {
            int num = nums[i];
            if (i == 0) {
                previous = num;
                current = 1;
            } else if (num == previous * previous) {
                current++;
            } else {
                longest = Math.max(longest, current);
                current = 1;
            }
            previous = num;
        }
        longest = Math.max(longest, current);
        return longest >= 2 ? longest : -1;

=======

        int n = nums.length;
        if(n < 2) return -1;
        int max = 0;
        int prev = 0;
        int count = 0;
        for(int i = 0; i < n; i++) {
            int curr = nums[i];
            if(prev == 0) {
                prev = curr;
                count = 1;
            } else if(prev * prev == curr) {
                count++;
                max = Math.max(max, count);
            } else {
                prev = curr;
                count = 1;
            }
        }
        return max;
