Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int n = arr.length;
        int[] left = new int[n];
        for (int i = 1; i < n; ++i) {
            left[i] = arr[i - 1] < arr[i] ? left[i - 1] + 1 : 0;
        }
        int[] right = new int[n];
        for (int i = n - 2; i >= 0; --i) {
            right[i] = arr[i + 1] < arr[i] ? right[i + 1] + 1 : 0;
        }
        int ans = 0;
        for (int i = 0; i < n; ++i) {
            if (left[i] > 0 && right[i] > 0) {
                ans = Math.max(ans, left[i] + right[i] + 1);
            }
        }
        return ans;

=======

        int n = arr.length;
        int[] left = new int[n];
        for (int i = 1; i < n; ++i)
            left[i] = arr[i] > arr[i - 1] ? left[i - 1] + 1 : 0;
        int[] right = new int[n];
        for (int i = n - 2; i >= 0; --i)
            right[i] = arr[i] > arr[i + 1] ? right[i + 1] + 1 : 0;
        int ans = 0;
        for (int i = 0; i < n; ++i)
            if (left[i] > 0 && right[i] > 0)
                ans = Math.max(ans, left[i] + right[i] + 1);
        return ans;

=======

        int n = arr.length;
        int[] left = new int[n];
        for (int i = 1; i < n; ++i) {
            left[i] = arr[i] > arr[i - 1] ? left[i - 1] + 1 : 0;
        }
        int[] right = new int[n];
        for (int i = n - 2; i >= 0; --i) {
            right[i] = arr[i] > arr[i + 1] ? right[i + 1] + 1 : 0;
        }
        int ans = 0;
        for (int i = 0; i < n; ++i) {
            if (left[i] > 0 && right[i] > 0) {
                ans = Math.max(ans, left[i] + right[i] + 1);
            }
        }
        return ans;

=======

        int n = arr.length;
        int[] left = new int[n];
        int[] right = new int[n];
        for (int i = 1; i < n; i++) {
            left[i] = arr[i] > arr[i - 1] ? left[i - 1] + 1 : 0;
        }
        for (int i = n - 2; i >= 0; i--) {
            right[i] = arr[i] > arr[i + 1] ? right[i + 1] + 1 : 0;
        }
        int ans = 0;
        for (int i = 0; i < n; i++) {
            if (left[i] > 0 && right[i] > 0) {
                ans = Math.max(ans, left[i] + right[i] + 1);
            }
        }
        return ans;

=======

        int n = arr.length;
        int[] left = new int[n];
        int[] right = new int[n];
        for (int i = 1; i < n; i++) {
            left[i] = arr[i - 1] < arr[i] ? left[i - 1] + 1 : 0;
        }
        for (int i = n - 2; i >= 0; i--) {
            right[i] = arr[i + 1] < arr[i] ? right[i + 1] + 1 : 0;
        }
        int ans = 0;
        for (int i = 0; i < n; i++) {
            if (left[i] > 0 && right[i] > 0) {
                ans = Math.max(ans, left[i] + right[i] + 1);
            }
        }
        return ans;

=======

        int max = 0;
        int i = 0;
        while (i < arr.length) {
            int j = i;
            if (j + 1 < arr.length && arr[j] < arr[j + 1]) {
                while (j + 1 < arr.length && arr[j] < arr[j + 1]) {
                    j++;
                }
                if (j + 1 < arr.length && arr[j] > arr[j + 1]) {
                    while (j + 1 < arr.length && arr[j] > arr[j + 1]) {
                        j++;
                    }
                    max = Math.max(max, j - i + 1);
                }
            }
            i = Math.max(j, i + 1);
        }
        return max;

=======

        if (arr.length < 3) return 0;
        int max = 0;
        boolean up = false;
        int start = 0;
        for (int i = 1; i < arr.length; i++) {
            if (arr[i] > arr[i - 1]) {
                if (up) continue;
                else {
                    up = true;
                    start = i - 1;
                }
            } else if (arr[i] < arr[i - 1]) {
                if (up) {
                    max = Math.max(max, i - start + 1);
                    up = false;
                }
            } else {
                up = false;
            }
        }
        return max;

=======

        int max = 0;
        int start = 0;
        int end = 0;
        while (end < arr.length) {
            if (arr[end] > arr[end + 1]) {
                if (start == end) {
                    start++;
                    end++;
                } else {
                    end++;
                    while (end < arr.length && arr[end] < arr[end + 1]) {
                        end++;
                    }
                    max = Math.max(max, end - start + 1);
                    start = end;
                }
            } else if (arr[end] < arr[end + 1]) {
                end++;
            } else {
                start++;
                end++;
            }
        }
        return max;
