Synthesizing 10/10 solutions (Duplicates hidden)

=======

        Map<Double, Integer> map = new HashMap<>();
        for (int[] r : rectangles) {
            double ratio = (double) r[0] / r[1];
            map.put(ratio, map.getOrDefault(ratio, 0) + 1);
        }
        long res = 0;
        for (double key : map.keySet()) {
            int val = map.get(key);
            res += val * (val - 1) / 2;
        }
        return res;

=======

        Map<Double, Integer> map = new HashMap<>();
        for (int[] r : rectangles) {
            double ratio = (double) r[0] / r[1];
            map.put(ratio, map.getOrDefault(ratio, 0) + 1);
        }
        long res = 0;
        for (int v : map.values()) {
            res += (long) v * (v - 1) / 2;
        }
        return res;

=======

        Map<Double, Integer> map = new HashMap<>();
        for (int[] r : rectangles) {
            double ratio = (double) r[0] / r[1];
            map.put(ratio, map.getOrDefault(ratio, 0) + 1);
        }
        long ans = 0;
        for (int v : map.values()) {
            ans += (long) v * (v - 1) / 2;
        }
        return ans;

=======

        Map<Double, Integer> map = new HashMap<>();
        for (int[] r: rectangles) {
            double ratio = (double)r[0] / r[1];
            map.put(ratio, map.getOrDefault(ratio, 0) + 1);
        }
        long res = 0;
        for (int v: map.values()) {
            res += v * (v - 1) / 2;
        }
        return res;

=======

        Map<Double, Long> map = new HashMap<>();
        for (int[] r : rectangles) {
            double k = 1.0 * r[0] / r[1];
            map.put(k, map.getOrDefault(k, 0L) + 1);
        }
        long ans = 0;
        for (long v : map.values()) {
            ans += v * (v - 1) / 2;
        }
        return ans;

=======

        Map<Double, Integer> map = new HashMap<>();
        long res = 0;
        for (int[] r : rectangles) {
            double ratio = (double) r[0] / r[1];
            map.put(ratio, map.getOrDefault(ratio, 0) + 1);
        }
        for (double key : map.keySet()) {
            int count = map.get(key);
            res += (long) count * (count - 1) / 2;
        }
        return res;

=======

        Map<Double, Long> ratios = new HashMap<>();
        for (int[] r : rectangles) {
            double ratio = (double)r[0] / r[1];
            ratios.put(ratio, ratios.getOrDefault(ratio, 0L) + 1);
        }
        long total = 0;
        for (long count : ratios.values()) {
            total += count * (count - 1) / 2;
        }
        return total;

=======

        Map<String, Integer> map = new HashMap<>();
        long ans = 0;
        for (int[] r : rectangles) {
            int g = gcd(r[0], r[1]);
            String key = r[0] / g + "/" + r[1] / g;
            map.put(key, map.getOrDefault(key, 0) + 1);
        }
        for (int v : map.values()) {
            ans += (long) v * (v - 1) / 2;
        }
        return ans;

=======

        Map<Double, Long> map = new HashMap<>();
        long result = 0;
        for (int[] r : rectangles) {
            double ratio = (double) r[0] / r[1];
            long count = map.getOrDefault(ratio, 0L);
            result += count;
            map.put(ratio, count + 1);
        }
        return result;
