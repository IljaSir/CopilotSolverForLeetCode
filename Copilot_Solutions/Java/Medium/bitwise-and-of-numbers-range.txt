Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int shift = 0;
        while (left < right) {
            left >>= 1;
            right >>= 1;
            shift++;
        }
        return left << shift;

=======

        int shift = 0;
        while (left != right) {
            left >>= 1;
            right >>= 1;
            shift++;
        }
        return left << shift;

=======

        int i = 0;
        while (left != right) {
            left >>= 1;
            right >>= 1;
            i++;
        }
        return left << i;
    }
}

=======

        int i = 0;
        while (left != right) {
            left >>= 1;
            right >>= 1;
            i++;
        }
        return left << i;

=======

        int shift = 0;
        while (left < right) {
            left >>= 1;
            right >>= 1;
            ++shift;
        }
        return left << shift;

=======

        int shift = 0;
        // find the common 1-bits
        while (left < right) {
            left >>= 1;
            right >>= 1;
            shift++;
        }
        return left << shift;

=======

        int count = 0;
        while(left != right){
            left = left >> 1;
            right = right >> 1;
            count++;
        }
        return left << count;

=======

        if (left == 0) return 0;
        if (left == right) return left;
        int shift = 0;
        while (left != right) {
            left >>= 1;
            right >>= 1;
            shift++;
        }
        return left << shift;
