Synthesizing 10/10 solutions

=======

        int n = capacity.length;
        int[] diff = new int[n];
        for (int i = 0; i < n; i++) {
            diff[i] = capacity[i] - rocks[i];
        }
        Arrays.sort(diff);
        int ans = 0;
        for (int i = 0; i < n; i++) {
            if (additionalRocks >= diff[i]) {
                additionalRocks -= diff[i];
                ans++;
            } else {
                break;
            }
        }
        return ans;

=======

        int n = capacity.length;
        int[] diff = new int[n];
        for (int i = 0; i < n; i++) {
            diff[i] = capacity[i] - rocks[i];
        }
        Arrays.sort(diff);
        int i = 0;
        while (i < n && diff[i] <= additionalRocks) {
            additionalRocks -= diff[i++];
        }
        return i;

=======

        int n = capacity.length;
        int[] diff = new int[n];
        for (int i = 0; i < n; i++) {
            diff[i] = capacity[i] - rocks[i];
        }
        Arrays.sort(diff);
        int ans = 0;
        for (int i = n - 1; i >= 0; i--) {
            if (additionalRocks >= diff[i]) {
                additionalRocks -= diff[i];
                ans++;
            } else {
                break;
            }
        }
        return ans;

=======

        int n = capacity.length;
        int[] diff = new int[n];
        for (int i = 0; i < n; i++) {
            diff[i] = capacity[i] - rocks[i];
        }
        Arrays.sort(diff);
        int i = 0;
        while (i < n && additionalRocks >= diff[i]) {
            additionalRocks -= diff[i];
            i++;
        }
        return i;

=======

        int n = capacity.length;
        int[] diff = new int[n];
        for (int i = 0; i < n; i++) {
            diff[i] = capacity[i] - rocks[i];
        }
        Arrays.sort(diff);
        int sum = 0;
        int i = n - 1;
        for (; i >= 0; i--) {
            sum += diff[i];
            if (sum > additionalRocks) {
                break;
            }
        }
        return n - i - 1;

=======

        int n = capacity.length;
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = capacity[i] - rocks[i];
        }
        Arrays.sort(a);
        int res = n;
        for (int i = 0; i < n; i++) {
            if (a[i] > additionalRocks) {
                res = i;
                break;
            }
            additionalRocks -= a[i];
        }
        return res;

=======

        Arrays.sort(capacity);
        Arrays.sort(rocks);
        int l = 0, r = capacity.length - 1;
        while (l <= r) {
            int m = l + (r - l) / 2;
            if (check(capacity, rocks, m, additionalRocks)) {
                l = m + 1;
            } else {
                r = m - 1;
            }
        }
        return r;
    }
    
    private boolean check(int[] capacity, int[] rocks, int m, int additionalRocks) {
        int n = capacity.length;
        int l = n - m - 1;
        int r = n - 1;
        while (l < r) {
            int sum = rocks[l] + rocks[r];
            if (sum < capacity[m]) {
                additionalRocks -= capacity[m] - sum;
                l++;
                r--;
            } else {
                r--;
            }
            if (additionalRocks < 0) {
                return false;
            }
        }
        return true;

=======

        int n = capacity.length;
        PriorityQueue<int[]> pq = new PriorityQueue<>(new Comparator<int[]>(){
            public int compare(int[] a, int[] b){
                return (a[0] - a[1]) - (b[0] - b[1]);
            }
        });
        for(int i = 0; i < n; i++){
            pq.add(new int[]{capacity[i], rocks[i]});
        }
        while(additionalRocks > 0){
            int[] cur = pq.poll();
            if(cur[0] - cur[1] == 0){
                pq.add(cur);
                break;
            }
            cur[1] += 1;
            pq.add(cur);
            additionalRocks--;
        }
        int res = 0;
        while(!pq.isEmpty()){
            int[] cur = pq.poll();
            if(cur[0] - cur[1] == 0){
                res++;
            }
        }
        return res;

=======

        int n = capacity.length;
        int[] left = new int[n];
        int[] right = new int[n];
        Arrays.fill(left, Integer.MAX_VALUE);
        Arrays.fill(right, Integer.MAX_VALUE);
        for (int i = 0; i < n; i++) {
            int c = capacity[i] - rocks[i];
            if (c <= additionalRocks) {
                additionalRocks -= c;
                left[i] = 0;
            } else {
                left[i] = c - additionalRocks;
                additionalRocks = 0;
            }
        }
        for (int i = n - 1; i >= 0; i--) {
            int c = capacity[i] - rocks[i];
            if (c <= additionalRocks) {
                additionalRocks -= c;
                right[i] = 0;
            } else {
                right[i] = c - additionalRocks;
                additionalRocks = 0;
            }
        }
        int ans = 0;
        for (int i = 0; i < n; i++) {
            if (left[i] == 0 && right[i] == 0) {
                ans++;
            }
        }
        return ans;

=======

        // binary search
        int n = capacity.length;
        int l = 0;
        int r = n;
        while (l < r) {
            int m = l + (r - l) / 2;
            if (isValid(capacity, rocks, additionalRocks, m)) {
                l = m + 1;
            } else {
                r = m;
            }
        }
        return l - 1;
    }

    private boolean isValid(int[] capacity, int[] rocks, int additionalRocks, int m) {
        long sum = 0;
        for (int i = 0; i < capacity.length; i++) {
            sum += Math.min(capacity[i], rocks[i] + additionalRocks / (capacity.length - i));
        }
        return sum >= additionalRocks;
