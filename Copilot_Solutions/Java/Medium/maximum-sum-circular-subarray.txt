Synthesizing 10/10 solutions

=======

        int total = 0, maxSum = Integer.MIN_VALUE, curMax = 0, minSum = Integer.MAX_VALUE, curMin = 0;
        for (int x: nums) {
            curMax = x + Math.max(curMax, 0);
            maxSum = Math.max(maxSum, curMax);
            curMin = x + Math.min(curMin, 0);
            minSum = Math.min(minSum, curMin);
            total += x;
        }
        return maxSum > 0 ? Math.max(maxSum, total - minSum) : maxSum;

=======

        int n = nums.length;
        int[] sum = new int[n + 1];
        for (int i = 0; i < n; i++) {
            sum[i + 1] = sum[i] + nums[i];
        }
        // max subarray sum
        int res = nums[0];
        int cur = nums[0];
        for (int i = 1; i < n; i++) {
            cur = nums[i] + Math.max(cur, 0);
            res = Math.max(res, cur);
        }
        // min subarray sum
        int minSum = 0;
        int min = Integer.MAX_VALUE;
        for (int i = 1; i < n; i++) {
            minSum = Math.min(minSum, sum[i]);
            min = Math.min(min, sum[i] - minSum);
        }
        return Math.max(res, sum[n] - min);

=======

        int n = nums.length;
        int[] prefixSum = new int[n];
        prefixSum[0] = nums[0];
        for (int i = 1; i < n; i++) {
            prefixSum[i] = prefixSum[i - 1] + nums[i];
        }
        int[] maxPrefixSum = new int[n];
        maxPrefixSum[0] = nums[0];
        for (int i = 1; i < n; i++) {
            maxPrefixSum[i] = Math.max(maxPrefixSum[i - 1], prefixSum[i]);
        }
        int[] maxSuffixSum = new int[n];
        maxSuffixSum[n - 1] = nums[n - 1];
        for (int i = n - 2; i >= 0; i--) {
            maxSuffixSum[i] = Math.max(maxSuffixSum[i + 1], prefixSum[n - 1] - prefixSum[i]);
        }
        int maxSum = nums[0];
        for (int i = 1; i < n; i++) {
            maxSum = Math.max(maxSum, maxPrefixSum[i - 1] + maxSuffixSum[i]);
        }
        return maxSum;

=======

        int max = Integer.MIN_VALUE;
        int min = Integer.MAX_VALUE;
        int sum = 0;
        int currMax = 0;
        int currMin = 0;
        for (int num : nums) {
            currMax = Math.max(currMax + num, num);
            max = Math.max(max, currMax);
            currMin = Math.min(currMin + num, num);
            min = Math.min(min, currMin);
            sum += num;
        }
        return max > 0 ? Math.max(max, sum - min) : max;

=======

        int max = Integer.MIN_VALUE, min = Integer.MAX_VALUE, curMax = 0, curMin = 0, total = 0;
        for (int num : nums) {
            curMax = Math.max(curMax + num, num);
            max = Math.max(max, curMax);
            curMin = Math.min(curMin + num, num);
            min = Math.min(min, curMin);
            total += num;
        }
        return max > 0 ? Math.max(max, total - min) : max;

=======

        int max = nums[0];
        int min = nums[0];
        int sum = nums[0];
        int maxSum = nums[0];
        int minSum = nums[0];
        for(int i = 1; i < nums.length; i++) {
            sum += nums[i];
            max = Math.max(nums[i], max + nums[i]);
            min = Math.min(nums[i], min + nums[i]);
            maxSum = Math.max(maxSum, max);
            minSum = Math.min(minSum, min);
        }
        if (maxSum > 0) {
            return Math.max(maxSum, sum - minSum);
        } else {
            return maxSum;
        }

=======

        int max = Integer.MIN_VALUE;
        int min = Integer.MAX_VALUE;
        int sum = 0;
        int maxSum = 0;
        int minSum = 0;
        for (int i = 0; i < nums.length; i++) {
            maxSum = Math.max(maxSum + nums[i], nums[i]);
            max = Math.max(max, maxSum);
            minSum = Math.min(minSum + nums[i], nums[i]);
            min = Math.min(min, minSum);
            sum += nums[i];
        }
        return max > 0 ? Math.max(max, sum - min) : max;

=======

        int n = nums.length;
        int sum = 0;
        int maxSum = Integer.MIN_VALUE;
        int minSum = Integer.MAX_VALUE;
        int curMax = 0;
        int curMin = 0;
        for (int i = 0; i < n; i++) {
            sum += nums[i];
            curMax = Math.max(curMax + nums[i], nums[i]);
            maxSum = Math.max(maxSum, curMax);
            curMin = Math.min(curMin + nums[i], nums[i]);
            minSum = Math.min(minSum, curMin);
        }
        return maxSum > 0 ? Math.max(maxSum, sum - minSum) : maxSum;

=======

        int n = nums.length;
        int maxSum = nums[0];
        int minSum = nums[0];
        int total = nums[0];
        int currMax = nums[0];
        int currMin = nums[0];
        
        for (int i = 1; i < n; i++) {
            currMax = Math.max(nums[i], currMax + nums[i]);
            maxSum = Math.max(maxSum, currMax);
            currMin = Math.min(nums[i], currMin + nums[i]);
            minSum = Math.min(minSum, currMin);
            total += nums[i];
        }
        
        if (maxSum < 0)
            return maxSum;
        else
            return Math.max(maxSum, total - minSum);

=======

        int max = Integer.MIN_VALUE, min = Integer.MAX_VALUE, currMax = 0, currMin = 0, sum = 0;
        for (int num : nums) {
            currMax = Math.max(currMax + num, num);
            max = Math.max(max, currMax);
            currMin = Math.min(currMin + num, num);
            min = Math.min(min, currMin);
            sum += num;
        }
        return max > 0 ? Math.max(max, sum - min) : max;
