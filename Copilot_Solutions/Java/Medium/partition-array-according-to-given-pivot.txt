Synthesizing 10/10 solutions

=======

        int[] result = new int[nums.length];
        int left = 0;
        int right = nums.length - 1;
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] < pivot) {
                result[left++] = nums[i];
            } else if (nums[i] > pivot) {
                result[right--] = nums[i];
            }
        }
        for (int i = left; i <= right; i++) {
            result[i] = pivot;
        }
        return result;

=======

        int n = nums.length;
        int left = 0;
        int right = n - 1;
        int i = 0;
        while (i <= right) {
            if (nums[i] < pivot) {
                swap(nums, i, left);
                i++;
                left++;
            } else if (nums[i] > pivot) {
                swap(nums, i, right);
                right--;
            } else {
                i++;
            }
        }
        return nums;

=======

        int l = 0, r = nums.length - 1;
        for (int i = 0; i <= r; i++) {
            if (nums[i] < pivot) {
                swap(nums, i, l++);
            } else if (nums[i] > pivot) {
                swap(nums, i--, r--);
            }
        }
        return nums;

=======

        int l = 0;
        int r = nums.length - 1;
        int i = 0;
        while (i <= r) {
            if (nums[i] < pivot) {
                swap(nums, l, i);
                l++;
                i++;
            } else if (nums[i] > pivot) {
                swap(nums, r, i);
                r--;
            } else {
                i++;
            }
        }
        return nums;

=======

        int i = 0, j = nums.length - 1, k = 0;
        while (k <= j) {
            if (nums[k] < pivot) {
                swap(nums, i++, k++);
            } else if (nums[k] > pivot) {
                swap(nums, k, j--);
            } else {
                k++;
            }
        }
        return nums;

=======

        int[] result = new int[nums.length];
        int left = 0, right = nums.length - 1;
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] < pivot) {
                result[left++] = nums[i];
            } else if (nums[i] > pivot) {
                result[right--] = nums[i];
            }
        }
        for (int i = left; i <= right; i++) {
            result[i] = pivot;
        }
        return result;

=======

        int i = 0, j = 0, n = nums.length;
        while (j < n) {
            if (nums[j] < pivot) {
                swap(nums, i, j);
                i++;
                j++;
            } else if (nums[j] == pivot) {
                j++;
            } else {
                int k = j + 1;
                while (k < n && nums[k] > pivot) {
                    k++;
                }
                if (k == n) {
                    break;
                }
                swap(nums, j, k);
            }
        }
        return nums;

=======

        int[] res = new int[nums.length];
        int i = 0;
        int j = nums.length - 1;
        for (int k = 0; k < nums.length; k++) {
            if (nums[k] < pivot) {
                res[i++] = nums[k];
            } else if (nums[k] > pivot) {
                res[j--] = nums[k];
            }
        }
        for (int k = i; k <= j; k++) {
            res[k] = pivot;
        }
        return res;

=======

        int i = 0, j = 0;
        for (int k = 0; k < nums.length; k++) {
            if (nums[k] < pivot) {
                swap(nums, i, k);
                i++;
            }
        }
        for (int k = nums.length - 1; k >= 0; k--) {
            if (nums[k] > pivot) {
                swap(nums, j, k);
                j++;
            }
        }
        return nums;

=======

        int n = nums.length;
        int[] ans = new int[n];
        int i = 0;
        int j = 0;
        int k = n - 1;
        while (j <= k) {
            if (nums[j] < pivot) {
                ans[i] = nums[j];
                j++;
                i++;
            } else if (nums[j] == pivot) {
                j++;
            } else {
                ans[k] = nums[j];
                k--;
            }
        }
        return ans;
