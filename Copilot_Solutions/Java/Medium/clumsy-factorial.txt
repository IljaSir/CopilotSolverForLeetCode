Synthesizing 10/10 solutions

=======

        if (n == 1) return 1;
        if (n == 2) return 2;
        if (n == 3) return 6;
        if (n == 4) return 7;
        if (n % 4 == 0) return n + 1;
        if (n % 4 <= 2) return n + 2;
        return n - 1;

=======

        if (n == 1) {
            return 1;
        } else if (n == 2) {
            return 2;
        } else if (n == 3) {
            return 6;
        } else if (n == 4) {
            return 7;
        } else {
            if (n % 4 == 0) {
                return n + 1;
            } else if (n % 4 <= 2) {
                return n + 2;
            } else {
                return n - 1;
            }
        }

=======

        if (n <= 2) {
            return n;
        }
        if (n == 3) {
            return 6;
        }
        if (n == 4) {
            return 7;
        }
        if (n % 4 == 0) {
            return n + 1;
        }
        if (n % 4 <= 2) {
            return n + 2;
        }
        return n - 1;

=======

        if (n < 4) {
            return n;
        }
        int res = n * (n - 1) / (n - 2) + (n - 3);
        n -= 4;
        while (n > 0) {
            res -= n * (n - 1) / (n - 2);
            if (n - 3 > 0) {
                res += n - 3;
            }
            n -= 4;
        }
        return res;

=======

        int sum = 0;
        int cur = n;
        for (int i = 1; i < n; i++) {
            if (i % 4 == 1) {
                cur *= n - i;
            } else if (i % 4 == 2) {
                cur /= n - i;
            } else if (i % 4 == 3) {
                sum += cur;
                cur = n - i;
            } else {
                sum -= cur;
                cur = n - i;
            }
        }
        sum += cur;
        return sum;

=======

        int[] arr = new int[n];
        for(int i=0; i<n; i++){
            arr[i] = n-i;
        }
        int res = 0;
        for(int i=0; i<n; i++){
            if(i%4 == 0){
                res += arr[i];
            }else if(i%4 == 1){
                res *= arr[i];
            }else if(i%4 == 2){
                res /= arr[i];
            }else if(i%4 == 3){
                res += arr[i];
                res -= arr[i+1];
                i++;
            }
        }
        return res;

=======

        int[] arr = new int[n];
        for(int i = 0; i < n; i++){
            arr[i] = n - i;
        }
        int result = arr[0];
        int i = 1;
        while(i < n){
            result = result * arr[i];
            i++;
            if(i < n){
                result = result / arr[i];
                i++;
            }
            if(i < n){
                result = result + arr[i];
                i++;
            }
            if(i < n){
                result = result - arr[i];
                i++;
            }
        }
        return result;

=======

        int[] op = new int[] {1, 2, 2, -1};
        int res = n;
        for (int i = 0; i < n - 1; i++) {
            if (i % 4 == 0) {
                res *= (n - i - 1);
            } else if (i % 4 == 1) {
                res /= (n - i - 1);
            } else if (i % 4 == 2) {
                res += (n - i - 1);
            } else {
                res += op[i % 4] * (n - i - 1);
            }
        }
        return res;

=======

        int k = 0;
        int res = 0;
        if(n <= 4) {
            if(n == 1) {
                res = 1;
            } else if(n == 2) {
                res = 2;
            } else if(n == 3) {
                res = 6;
            } else if(n == 4) {
                res = 7;
            }
        } else {
            res = n * (n - 1) / (n - 2);
            k = n - 3;
            while(k > 4) {
                res = res + k - (k - 1) * (k - 2) / (k - 3);
                k = k - 4;
            }
            if(k == 4) {
                res = res + k - (k - 1) * (k - 2) / (k - 3);
            } else if(k == 3) {
                res = res + k - (k - 1) * (k - 2);
            } else if(k == 2) {
                res = res + k - (k - 1);
            } else if(k == 1) {
                res = res + k;
            }
        }
        return res;

=======

        int[] op = new int[]{1, 2, 2, -1};
        int i = 0;
        int result = n;
        n--;
        while (n > 0) {
            int next = n;
            n--;
            if (i == 0) {
                result *= next;
            } else if (i == 1) {
                result /= next;
            } else if (i == 2) {
                result += next;
            } else {
                result -= next;
            }
            i = (i + 1) % 4;
        }
        return result;
