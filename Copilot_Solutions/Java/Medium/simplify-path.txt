Synthesizing 10/10 solutions

=======

        Stack<String> stack = new Stack<>();
        String[] paths = path.split("/");
        for (String p : paths) {
            if (p.equals("..")) {
                if (!stack.isEmpty()) {
                    stack.pop();
                }
            } else if (!p.equals(".") && !p.equals("")) {
                stack.push(p);
            }
        }
        StringBuilder sb = new StringBuilder();
        while (!stack.isEmpty()) {
            sb.insert(0, stack.pop());
            sb.insert(0, "/");
        }
        return sb.length() == 0 ? "/" : sb.toString();

=======

        String[] parts = path.split("/");
        Stack<String> stack = new Stack<>();
        for (String part : parts) {
            if (part.equals(".") || part.equals("")) {
                continue;
            } else if (part.equals("..")) {
                if (!stack.isEmpty()) {
                    stack.pop();
                }
            } else {
                stack.push(part);
            }
        }
        if (stack.isEmpty()) {
            return "/";
        }
        StringBuilder simplified = new StringBuilder();
        while (!stack.isEmpty()) {
            simplified.insert(0, "/" + stack.pop());
        }
        return simplified.toString();

=======

        String[] strs = path.split("/");
        Deque<String> stack = new ArrayDeque<>();
        for (String str : strs) {
            if (str.equals("") || str.equals(".")) {
                continue;
            } else if (str.equals("..")) {
                if (!stack.isEmpty()) {
                    stack.pop();
                }
            } else {
                stack.push(str);
            }
        }
        if (stack.isEmpty()) {
            return "/";
        }
        StringBuilder sb = new StringBuilder();
        while (!stack.isEmpty()) {
            sb.append("/").append(stack.pollLast());
        }
        return sb.toString();

=======

        String[] str = path.split("/");
        Stack<String> stack = new Stack<>();
        for (String s : str) {
            if (s.equals(".") || s.equals("")) {
                continue;
            } else if (s.equals("..")) {
                if (!stack.isEmpty()) {
                    stack.pop();
                }
            } else {
                stack.push(s);
            }
        }
        StringBuilder sb = new StringBuilder();
        while (!stack.isEmpty()) {
            sb.insert(0, "/" + stack.pop());
        }
        return sb.length() == 0 ? "/" : sb.toString();

=======

        Deque<String> stack = new ArrayDeque<>();
        String[] parts = path.split("/");
        for (String part : parts) {
            if (part.equals(".") || part.isEmpty()) {
                continue;
            } else if (part.equals("..")) {
                if (!stack.isEmpty()) {
                    stack.pop();
                }
            } else {
                stack.push(part);
            }
        }
        StringBuilder sb = new StringBuilder();
        while (!stack.isEmpty()) {
            sb.append("/").append(stack.removeLast());
        }
        return sb.length() == 0 ? "/" : sb.toString();

=======

        String[] paths = path.split("/");
        Deque<String> stack = new ArrayDeque<>();
        for (String p : paths) {
            if (p.equals("..") && !stack.isEmpty()) {
                stack.pop();
            } else if (!p.equals("") && !p.equals(".") && !p.equals("..")) {
                stack.push(p);
            }
        }
        if (stack.isEmpty()) {
            return "/";
        }
        StringBuilder result = new StringBuilder();
        while (!stack.isEmpty()) {
            result.append("/");
            result.append(stack.pollLast());
        }
        return result.toString();

=======

        String[] pathArr = path.split("/");
        Stack<String> stack = new Stack<>();
        for (String s : pathArr) {
            if (s.equals(".") || s.equals("")) {
                continue;
            } else if (s.equals("..")) {
                if (!stack.isEmpty()) {
                    stack.pop();
                }
            } else {
                stack.push(s);
            }
        }
        String res = "";
        while (!stack.isEmpty()) {
            res = "/" + stack.pop() + res;
        }
        return res.length() == 0 ? "/" : res;

=======

        Stack<String> stack = new Stack<>();
        String[] pathArray = path.split("/");
        for (String s : pathArray) {
            if (s.equals("") || s.equals(".")) {
                continue;
            }
            if (s.equals("..")) {
                if (!stack.isEmpty()) {
                    stack.pop();
                }
            } else {
                stack.push(s);
            }
        }
        StringBuilder result = new StringBuilder();
        while (!stack.isEmpty()) {
            result.insert(0, stack.pop());
            result.insert(0, "/");
        }
        if (result.length() > 0) {
            return result.toString();
        } else {
            return "/";
        }

=======

        String[] arr = path.split("/");
        Stack<String> stack = new Stack<String>();
        for(String s : arr){
            if(s.equals(".") || s.equals("")){
                continue;
            }else if(s.equals("..")){
                if(!stack.isEmpty()){
                    stack.pop();
                }
            }else{
                stack.push(s);
            }
        }
        if(stack.isEmpty()){
            return "/";
        }
        String res = "";
        while(!stack.isEmpty()){
            res = "/" + stack.pop() + res;
        }
        return res;

=======

        String[] parts = path.split("/");
        int n = parts.length;
        int i = 0;
        for (int j = 0; j < n; j++) {
            if (parts[j].equals("..")) {
                i = Math.max(i - 1, 0);
            } else if (!parts[j].equals(".") && !parts[j].equals("")) {
                parts[i++] = parts[j];
            }
        }
        if (i == 0) return "/";
        StringBuilder sb = new StringBuilder();
        for (int j = 0; j < i; j++) {
            sb.append("/");
            sb.append(parts[j]);
        }
        return sb.toString();
