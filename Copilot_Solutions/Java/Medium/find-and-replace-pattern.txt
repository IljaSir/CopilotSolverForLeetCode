Synthesizing 10/10 solutions

=======

        List<String> result = new ArrayList<>();
        for (String word : words) {
            if (match(word, pattern)) {
                result.add(word);
            }
        }
        return result;
    }
    
    private boolean match(String word, String pattern) {
        Map<Character, Character> map = new HashMap<>();
        Set<Character> used = new HashSet<>();
        for (int i = 0; i < word.length(); i++) {
            char c1 = word.charAt(i);
            char c2 = pattern.charAt(i);
            if (map.containsKey(c1)) {
                if (map.get(c1) != c2) {
                    return false;
                }
            } else {
                if (used.contains(c2)) {
                    return false;
                }
                map.put(c1, c2);
                used.add(c2);
            }
        }
        return true;

=======

        List<String> result = new ArrayList<>();
        for (String word : words) {
            if (match(word, pattern)) {
                result.add(word);
            }
        }
        return result;
    }
    
    private boolean match(String word, String pattern) {
        Map<Character, Character> map = new HashMap<>();
        for (int i = 0; i < word.length(); i++) {
            char w = word.charAt(i);
            char p = pattern.charAt(i);
            if (!map.containsKey(w)) {
                map.put(w, p);
            } else if (map.get(w) != p) {
                return false;
            }
        }
        Set<Character> set = new HashSet<>();
        for (Character c : map.values()) {
            if (set.contains(c)) {
                return false;
            }
            set.add(c);
        }
        return true;

=======

        List<String> result = new ArrayList<>();
        for (String word : words) {
            if (match(word, pattern)) {
                result.add(word);
            }
        }
        return result;
    }
    
    private boolean match(String word, String pattern) {
        Map<Character, Character> map = new HashMap<>();
        for (int i = 0; i < word.length(); i++) {
            char w = word.charAt(i);
            char p = pattern.charAt(i);
            if (map.containsKey(w)) {
                if (map.get(w) != p) {
                    return false;
                }
            } else {
                if (map.containsValue(p)) {
                    return false;
                }
                map.put(w, p);
            }
        }
        return true;

=======

        List<String> result = new ArrayList<>();
        for (String word : words) {
            if (match(word, pattern)) {
                result.add(word);
            }
        }
        return result;
    }
    
    public boolean match(String word, String pattern) {
        Map<Character, Character> map = new HashMap<>();
        Set<Character> set = new HashSet<>();
        for (int i = 0; i < word.length(); i++) {
            char w = word.charAt(i);
            char p = pattern.charAt(i);
            if (map.containsKey(w)) {
                if (map.get(w) != p) {
                    return false;
                }
            } else {
                if (set.contains(p)) {
                    return false;
                }
                map.put(w, p);
                set.add(p);
            }
        }
        return true;

=======

        List<String> res = new ArrayList<>();
        for (String word : words) {
            if (match(word, pattern)) {
                res.add(word);
            }
        }
        return res;
    }

    private boolean match(String word, String pattern) {
        Map<Character, Character> map = new HashMap<>();
        for (int i = 0; i < word.length(); i++) {
            char a = word.charAt(i);
            char b = pattern.charAt(i);
            if (!map.containsKey(a)) {
                map.put(a, b);
            } else {
                if (map.get(a) != b) {
                    return false;
                }
            }
        }
        boolean[] used = new boolean[26];
        for (char c : map.values()) {
            if (used[c - 'a']) {
                return false;
            }
            used[c - 'a'] = true;
        }
        return true;

=======

        List<String> result = new ArrayList<>();
        for (String word : words) {
            if (isMatch(word, pattern)) {
                result.add(word);
            }
        }
        return result;
    }
    private boolean isMatch(String word, String pattern) {
        Map<Character, Character> map = new HashMap<>();
        Set<Character> set = new HashSet<>();
        for (int i = 0; i < word.length(); i++) {
            char c1 = word.charAt(i);
            char c2 = pattern.charAt(i);
            if (map.containsKey(c1)) {
                if (map.get(c1) != c2) {
                    return false;
                }
            } else {
                if (set.contains(c2)) {
                    return false;
                }
                map.put(c1, c2);
                set.add(c2);
            }
        }
        return true;

=======

        List<String> res = new ArrayList<>();
        for (String word : words) {
            if (match(word, pattern)) {
                res.add(word);
            }
        }
        return res;
    }
    private boolean match(String word, String pattern) {
        Map<Character, Character> map = new HashMap<>();
        Set<Character> set = new HashSet<>();
        for (int i = 0; i < word.length(); i++) {
            char c1 = word.charAt(i);
            char c2 = pattern.charAt(i);
            if (map.containsKey(c1)) {
                if (map.get(c1) != c2) {
                    return false;
                }
            } else {
                if (set.contains(c2)) {
                    return false;
                }
                map.put(c1, c2);
                set.add(c2);
            }
        }
        return true;

=======

        List<String> result = new ArrayList<>();
        for (String word: words) {
            if (match(word, pattern)) {
                result.add(word);
            }
        }
        return result;
    }
    
    public boolean match(String word, String pattern) {
        Map<Character, Character> w2p = new HashMap<>();
        Map<Character, Character> p2w = new HashMap<>();
        for (int i = 0; i < word.length(); i++) {
            char w = word.charAt(i);
            char p = pattern.charAt(i);
            if (!w2p.containsKey(w)) {
                w2p.put(w, p);
            }
            if (!p2w.containsKey(p)) {
                p2w.put(p, w);
            }
            if (w2p.get(w) != p || p2w.get(p) != w) {
                return false;
            }
        }
        return true;

=======

        List<String> result = new ArrayList<String>();
        for (String word : words) {
            if (isMatch(word, pattern)) {
                result.add(word);
            }
        }
        return result;
    }
    
    public boolean isMatch(String word, String pattern) {
        Map<Character, Character> map = new HashMap<Character, Character>();
        Map<Character, Character> map2 = new HashMap<Character, Character>();
        for (int i = 0; i < word.length(); i++) {
            char w = word.charAt(i);
            char p = pattern.charAt(i);
            if (!map.containsKey(w)) {
                map.put(w, p);
            }
            if (!map2.containsKey(p)) {
                map2.put(p, w);
            }
            if (map.get(w) != p || map2.get(p) != w) {
                return false;
            }
        }
        return true;

=======

        List<String> list = new ArrayList<>();
        for (String w : words) {
            if (match(w, pattern)) {
                list.add(w);
            }
        }
        return list;
    }
    
    public boolean match(String w, String p) {
        Map<Character, Character> map = new HashMap<>();
        Set<Character> set = new HashSet<>();
        for (int i = 0; i < w.length(); i++) {
            char wc = w.charAt(i);
            char pc = p.charAt(i);
            if (!map.containsKey(pc)) {
                if (set.contains(wc)) {
                    return false;
                }
                map.put(pc, wc);
                set.add(wc);
            } else {
                if (map.get(pc) != wc) {
                    return false;
                }
            }
        }
        return true;
