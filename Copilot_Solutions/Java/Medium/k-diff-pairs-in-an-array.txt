Synthesizing 10/10 solutions

=======

        Map<Integer, Integer> map = new HashMap<>();
        for (int num : nums) {
            map.put(num, map.getOrDefault(num, 0) + 1);
        }
        int count = 0;
        for (int key : map.keySet()) {
            if (k == 0) {
                if (map.get(key) > 1) {
                    count++;
                }
            } else {
                if (map.containsKey(key + k)) {
                    count++;
                }
            }
        }
        return count;

=======

        if (k < 0) return 0;
        Map<Integer, Integer> map = new HashMap<>();
        for (int num : nums) {
            map.put(num, map.getOrDefault(num, 0) + 1);
        }
        int res = 0;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (k == 0) {
                if (entry.getValue() >= 2) res++;
            } else {
                if (map.containsKey(entry.getKey() + k)) res++;
            }
        }
        return res;

=======

        if (k < 0) return 0;
        Map<Integer, Integer> map = new HashMap<>();
        for (int num : nums) {
            map.put(num, map.getOrDefault(num, 0) + 1);
        }
        int count = 0;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (k == 0) {
                if (entry.getValue() >= 2) {
                    count++;
                }
            } else {
                if (map.containsKey(entry.getKey() + k)) {
                    count++;
                }
            }
        }
        return count;

=======

        if (k < 0) {
            return 0;
        }
        int count = 0;
        Map<Integer, Integer> map = new HashMap<>();
        for (int num : nums) {
            map.put(num, map.getOrDefault(num, 0) + 1);
        }
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (k == 0) {
                if (entry.getValue() > 1) {
                    count++;
                }
            } else {
                if (map.containsKey(entry.getKey() + k)) {
                    count++;
                }
            }
        }
        return count;

=======

        if (nums == null || nums.length == 0 || k < 0) {
            return 0;
        }
        Arrays.sort(nums);
        int count = 0;
        for (int i = 0; i < nums.length; i++) {
            if (i > 0 && nums[i] == nums[i - 1]) {
                continue;
            }
            int index = Arrays.binarySearch(nums, i + 1, nums.length, nums[i] + k);
            if (index >= 0) {
                count++;
            }
        }
        return count;

=======

        Arrays.sort(nums);
        int ans = 0;
        for (int i = 0; i < nums.length; i++) {
            if (i > 0 && nums[i] == nums[i - 1]) continue;
            if (Arrays.binarySearch(nums, i + 1, nums.length, nums[i] + k) >= 0) ans++;
        }
        return ans;

=======

        if (k < 0) {
            return 0;
        }
        int count = 0;
        Map<Integer, Integer> map = new HashMap<>();
        for (int i : nums) {
            map.put(i, map.getOrDefault(i, 0) + 1);
        }
        for (int i : map.keySet()) {
            if (k == 0) {
                if (map.get(i) > 1) {
                    count++;
                }
            } else {
                if (map.containsKey(i + k)) {
                    count++;
                }
            }
        }
        return count;

=======

        if (k < 0) return 0;
        int count = 0;
        Arrays.sort(nums);
        int i = 0, j = 1;
        while (i < nums.length && j < nums.length) {
            if (i == j) j++;
            else if (nums[j] - nums[i] == k) {
                count++;
                while (j < nums.length - 1 && nums[j] == nums[j + 1]) j++;
                i++;
                j++;
            } else if (nums[j] - nums[i] > k) i++;
            else j++;
        }
        return count;

=======

        if (nums == null || nums.length == 0) {
            return 0;
        }
        Arrays.sort(nums);
        int i = 0, j = 1, count = 0;
        while (i < nums.length && j < nums.length) {
            if (i == j || nums[j] - nums[i] < k) {
                j++;
            } else if (nums[j] - nums[i] > k) {
                i++;
            } else {
                count++;
                i++;
                while (i < nums.length && nums[i] == nums[i - 1]) {
                    i++;
                }
                j++;
            }
        }
        return count;

=======

        if (nums.length == 0 || k < 0) {
            return 0;
        }
        Arrays.sort(nums);
        int left = 0, right = 0, count = 0;
        while (left < nums.length) {
            right = Math.max(right, left + 1);
            while (right < nums.length && nums[right] - nums[left] < k) {
                right++;
            }
            if (right < nums.length && nums[right] - nums[left] == k) {
                count++;
            }
            while (left + 1 < nums.length && nums[left] == nums[left + 1]) {
                left++;
            }
            left++;
        }
        return count;
