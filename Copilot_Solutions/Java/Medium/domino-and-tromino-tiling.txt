Synthesizing 10/10 solutions

=======

        int MOD = 1000000007;
        long[] dp = new long[n + 1];
        dp[0] = 1;
        for (int i = 1; i <= n; i++) {
            dp[i] = dp[i - 1] * 2 % MOD;
            if (i >= 2) {
                dp[i] = (dp[i] + dp[i - 2]) % MOD;
            }
            if (i >= 3) {
                dp[i] = (dp[i] + dp[i - 3]) % MOD;
            }
        }
        return (int) dp[n];

=======

        int MOD = 1000000007;
        long[] dp = new long[n + 1];
        dp[0] = 1;
        for (int i = 1; i <= n; i++) {
            dp[i] = dp[i - 1] * 2 % MOD;
            if (i >= 3) {
                dp[i] = (dp[i] + dp[i - 3]) % MOD;
            }
        }
        return (int) dp[n];

=======

        int[] dp = new int[n + 1];
        dp[0] = 1;
        dp[1] = 1;
        dp[2] = 2;
        for (int i = 3; i <= n; i++) {
            dp[i] = (dp[i - 1] * 2 + dp[i - 3]) % 1000000007;
        }
        return dp[n];

=======

        int MOD = 1000000007;
        long[] dp = new long[n+1];
        dp[0] = 1;
        for (int i = 1; i <= n; ++i) {
            dp[i] = dp[i-1] * 2 % MOD;
            if (i >= 2) {
                dp[i] = (dp[i] + dp[i-2]) % MOD;
            }
            if (i >= 3) {
                dp[i] = (dp[i] + dp[i-3]) % MOD;
            }
        }
        return (int) dp[n];

=======

        int mod = 1000000007;
        long[] dp = new long[n+1];
        dp[0] = 1;
        for (int i = 1; i <= n; i++) {
            dp[i] = dp[i-1]*2;
            if (i-2 >= 0) {
                dp[i] += dp[i-2]*2;
            }
            if (i-3 >= 0) {
                dp[i] += dp[i-3];
            }
            dp[i] %= mod;
        }
        return (int)dp[n];

=======

        int mod = 1000000007;
        long[] dp = new long[n + 1];
        dp[0] = 1;
        for (int i = 1; i <= n; i++) {
            if (i == 1) {
                dp[i] = 1;
            } else if (i == 2) {
                dp[i] = 2;
            } else {
                dp[i] = 2 * dp[i - 1] % mod + dp[i - 3] % mod;
                dp[i] %= mod;
            }
        }
        return (int) dp[n];

=======

        if (n == 1) return 1;
        if (n == 2) return 2;
        int[] dp = new int[n + 1];
        dp[0] = 1;
        dp[1] = 1;
        dp[2] = 2;
        int mod = 1000000007;
        for (int i = 3; i <= n; i++) {
            dp[i] = (dp[i - 1] + dp[i - 2] + 2 * dp[i - 3]) % mod;
        }
        return dp[n];

=======

        int MOD = 1000000007;
        long[] dp = new long[n+1];
        dp[0] = 1;
        for(int i=1;i<=n;i++){
            dp[i] = (dp[i-1]*2)%MOD;
            if(i>=2) dp[i] = (dp[i]+dp[i-2])%MOD;
            if(i>=3) dp[i] = (dp[i]+dp[i-3])%MOD;
        }
        return (int)dp[n];

=======

        int mod = 1000000007;
        long[] dp = new long[n+1];
        if (n == 1) return 1;
        if (n == 2) return 2;
        dp[0] = 1;
        dp[1] = 1;
        dp[2] = 2;
        for (int i = 3; i <= n; i++) {
            dp[i] = (dp[i-1] + dp[i-2] + 2 * dp[i-3]) % mod;
        }
        return (int)dp[n];

=======

        long[] dp = new long[n+1];
        for(int i=0; i<=n; i++){
            if(i==0){
                dp[i] = 1;
            }else if(i==1){
                dp[i] = 1;
            }else if(i==2){
                dp[i] = 2;
            }else{
                dp[i] = (2*dp[i-1] + dp[i-3])%1000000007;
            }
        }
        return (int)dp[n];
