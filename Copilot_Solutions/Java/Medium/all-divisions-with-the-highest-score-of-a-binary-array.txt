Synthesizing 10/10 solutions

=======

        int n = nums.length;
        int[] left = new int[n];
        int[] right = new int[n];
        for (int i = 1; i < n; i++) {
            left[i] = left[i - 1] + (nums[i - 1] == 0 ? 1 : 0);
        }
        for (int i = n - 2; i >= 0; i--) {
            right[i] = right[i + 1] + (nums[i + 1] == 1 ? 1 : 0);
        }
        int max = 0;
        List<Integer> list = new ArrayList<Integer>();
        for (int i = 0; i < n; i++) {
            int sum = left[i] + right[i];
            if (sum > max) {
                max = sum;
                list.clear();
                list.add(i);
            } else if (sum == max) {
                list.add(i);
            }
        }
        return list;

=======

        int n = nums.length;
        int[] left = new int[n];
        int[] right = new int[n];
        for (int i = 1; i < n; ++i) {
            left[i] = left[i - 1] + nums[i - 1];
        }
        for (int i = n - 2; i >= 0; --i) {
            right[i] = right[i + 1] + nums[i + 1];
        }
        int max = 0;
        List<Integer> ans = new ArrayList<>();
        for (int i = 0; i < n; ++i) {
            int score = left[i] + right[i];
            if (score > max) {
                max = score;
                ans.clear();
                ans.add(i);
            } else if (score == max) {
                ans.add(i);
            }
        }
        return ans;
    }
}

=======

        int[] ones = new int[nums.length];
        int[] zeros = new int[nums.length];
        for (int i = 0; i < nums.length; i++) {
            ones[i] = nums[i] == 1 ? 1 : 0;
            zeros[i] = nums[i] == 0 ? 1 : 0;
        }
        for (int i = 1; i < nums.length; i++) {
            ones[i] += ones[i - 1];
            zeros[i] += zeros[i - 1];
        }
        int max = 0;
        List<Integer> ans = new ArrayList<>();
        for (int i = 0; i < nums.length; i++) {
            int score;
            if (i == 0) {
                score = ones[nums.length - 1];
            } else if (i == nums.length - 1) {
                score = zeros[nums.length - 1];
            } else {
                score = zeros[i - 1] + ones[nums.length - 1] - ones[i];
            }
            if (score > max) {
                max = score;
                ans.clear();
                ans.add(i);
            } else if (score == max) {
                ans.add(i);
            }
        }
        return ans;

=======

        List<Integer> res = new ArrayList<>();
        int n = nums.length;
        int[] ones = new int[n];
        int[] zeros = new int[n];
        ones[n - 1] = nums[n - 1];
        zeros[n - 1] = nums[n - 1] == 0 ? 1 : 0;
        for (int i = n - 2; i >= 0; i--) {
            ones[i] = ones[i + 1] + (nums[i] == 1 ? 1 : 0);
            zeros[i] = zeros[i + 1] + (nums[i] == 0 ? 1 : 0);
        }
        int max = 0;
        for (int i = 0; i < n; i++) {
            int score = zeros[i] + ones[i];
            if (score > max) {
                max = score;
                res.clear();
                res.add(i);
            } else if (score == max) {
                res.add(i);
            }
        }
        return res;

=======

        int n = nums.length;
        int[] count = new int[2];
        for (int i = 0; i < n; i++) {
            count[nums[i]]++;
        }
        int max = 0;
        List<Integer> res = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            count[nums[i]]--;
            int cur = count[0] + count[1];
            if (cur > max) {
                max = cur;
                res.clear();
                res.add(i);
            } else if (cur == max) {
                res.add(i);
            }
            count[nums[i]]++;
        }
        return res;

=======

        int n = nums.length;
        int[] rightOnes = new int[n];
        for (int i = n - 1; i >= 0; i--) {
            rightOnes[i] = nums[i] + (i == n - 1 ? 0 : rightOnes[i + 1]);
        }
        int maxScore = 0;
        List<Integer> result = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            int leftZeros = i;
            int rightOnes = i == n - 1 ? 0 : rightOnes[i + 1];
            int score = leftZeros + rightOnes;
            if (score > maxScore) {
                maxScore = score;
                result.clear();
                result.add(i);
            } else if (score == maxScore) {
                result.add(i);
            }
        }
        return result;

=======

        List<Integer> result = new ArrayList<>();
        int max = 0;
        int count = 0;
        for (int i = 0; i < nums.length; i++) {
            int left = 0;
            int right = 0;
            for (int j = 0; j < i; j++) {
                if (nums[j] == 0) left++;
            }
            for (int j = i; j < nums.length; j++) {
                if (nums[j] == 1) right++;
            }
            int score = left + right;
            if (score > max) {
                max = score;
                result.clear();
                result.add(i);
            } else if (score == max) {
                result.add(i);
            }
        }
        return result;

=======

        int n = nums.length;
        int[] left = new int[n];
        int[] right = new int[n];
        int[] max = new int[n];
        for (int i = 1; i < n; i++) {
            left[i] = left[i - 1] + (nums[i - 1] == 0 ? 1 : 0);
        }
        for (int i = n - 2; i >= 0; i--) {
            right[i] = right[i + 1] + (nums[i + 1] == 1 ? 1 : 0);
        }
        for (int i = 0; i < n; i++) {
            max[i] = left[i] + right[i];
        }
        int maxScore = 0;
        for (int i = 0; i < n; i++) {
            maxScore = Math.max(maxScore, max[i]);
        }
        List<Integer> result = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            if (maxScore == max[i]) {
                result.add(i);
            }
        }
        return result;

=======

        List<Integer> result = new ArrayList<>();
        if(nums.length == 0) {
            return result;
        }
        int[] count = new int[2];
        for(int i = 0; i < nums.length; i++) {
            count[nums[i]]++;
        }
        int maxScore = count[0];
        for(int i = 0; i < nums.length; i++) {
            count[nums[i]]--;
            if(count[0] + count[1] > maxScore) {
                maxScore = count[0] + count[1];
                result.clear();
                result.add(i+1);
            } else if(count[0] + count[1] == maxScore) {
                result.add(i+1);
            }
            count[nums[i]]++;
        }
        return result;

=======

        int n = nums.length;
        int[] left = new int[n];
        int[] right = new int[n];
        int[] arr = new int[n];
        int max = 0;
        for (int i = 0; i < n; i++) {
            if (i > 0) {
                left[i] = left[i - 1];
            }
            if (nums[i] == 0) {
                left[i]++;
            }
            arr[i] = left[i];
        }
        for (int i = n - 1; i >= 0; i--) {
            if (i < n - 1) {
                right[i] = right[i + 1];
            }
            if (nums[i] == 1) {
                right[i]++;
            }
            arr[i] += right[i];
            max = Math.max(max, arr[i]);
        }
        List<Integer> res = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            if (arr[i] == max) {
                res.add(i);
            }
        }
        return res;
