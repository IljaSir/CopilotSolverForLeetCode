Synthesizing 10/10 solutions (Duplicates hidden)

=======

        Arrays.sort(nums);
        int n = nums.length;
        int ans = nums[n - 1] - nums[0];
        for (int i = 0; i < n - 1; i++) {
            int a = nums[i];
            int b = nums[i + 1];
            int high = Math.max(nums[n - 1] - k, a + k);
            int low = Math.min(nums[0] + k, b - k);
            ans = Math.min(ans, high - low);
        }
        return ans;

=======

        Arrays.sort(nums);
        int max = nums[nums.length - 1];
        int min = nums[0];
        int ans = max - min;
        for (int i = 0; i < nums.length - 1; i++) {
            int a = nums[i];
            int b = nums[i + 1];
            int high = Math.max(max - k, a + k);
            int low = Math.min(min + k, b - k);
            ans = Math.min(ans, high - low);
        }
        return ans;

=======

        Arrays.sort(nums);
        int n = nums.length;
        int res = nums[n - 1] - nums[0];
        for (int i = 0; i < n - 1; i++) {
            int max = Math.max(nums[i] + k, nums[n - 1] - k);
            int min = Math.min(nums[0] + k, nums[i + 1] - k);
            res = Math.min(res, max - min);
        }
        return res;

=======

        Arrays.sort(nums);
        int n = nums.length;
        int ans = nums[n - 1] - nums[0];
        for (int i = 0; i < n - 1; i++) {
            int min = Math.min(nums[0] + k, nums[i + 1] - k);
            int max = Math.max(nums[n - 1] - k, nums[i] + k);
            ans = Math.min(ans, max - min);
        }
        return ans;

=======

        Arrays.sort(nums);
        int n = nums.length;
        int ans = nums[n-1] - nums[0];
        for (int i = 0; i < n-1; i++) {
            int a = nums[i], b = nums[i+1];
            int high = Math.max(nums[n-1] - k, a + k);
            int low = Math.min(nums[0] + k, b - k);
            ans = Math.min(ans, high - low);
        }
        return ans;

=======

        Arrays.sort(nums);
        int n = nums.length;
        int res = nums[n-1] - nums[0];
        for (int i = 0; i < n-1; i++) {
            int a = nums[i];
            int b = nums[i+1];
            int high = Math.max(nums[n-1] - k, a + k);
            int low = Math.min(nums[0] + k, b - k);
            res = Math.min(res, high - low);
        }
        return res;

=======

        Arrays.sort(nums);
        int len = nums.length;
        int res = nums[len - 1] - nums[0];
        for (int i = 0; i < len - 1; i++) {
            int min = Math.min(nums[0] + k, nums[i + 1] - k);
            int max = Math.max(nums[i] + k, nums[len - 1] - k);
            res = Math.min(res, max - min);
        }
        return res;

=======

        Arrays.sort(nums);
        int n = nums.length;
        int min = nums[0], max = nums[n - 1];
        int res = max - min;
        for (int i = 0; i < n - 1; i++) {
            max = Math.max(nums[i] + 2 * k, max);
            min = Math.min(nums[i + 1], nums[0] + 2 * k);
            res = Math.min(res, max - min);
        }
        return res;

=======

        int n = nums.length;
        Arrays.sort(nums);
        int ans = nums[n-1] - nums[0];
        for (int i = 0; i < n-1; ++i) {
            int a = nums[i];
            int b = nums[i+1];
            int high = Math.max(nums[n-1] - k, a + k);
            int low = Math.min(nums[0] + k, b - k);
            ans = Math.min(ans, high - low);
        }
        return ans;
