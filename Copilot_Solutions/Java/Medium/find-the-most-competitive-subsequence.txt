Synthesizing 10/10 solutions

=======

        int n = nums.length;
        int[] ans = new int[k];
        int j = 0;
        for (int i = 0; i < n; i++) {
            while (j > 0 && ans[j - 1] > nums[i] && j + n - i > k) {
                j--;
            }
            if (j < k) {
                ans[j++] = nums[i];
            }
        }
        return ans;

=======

        int n = nums.length;
        int[] res = new int[k];
        Stack<Integer> st = new Stack<>();
        for (int i = 0; i < n; i++) {
            while (!st.isEmpty() && nums[i] < nums[st.peek()] && st.size() - 1 + n - i >= k) {
                st.pop();
            }
            if (st.size() < k) {
                st.push(i);
            }
        }
        for (int i = k - 1; i >= 0; i--) {
            res[i] = nums[st.pop()];
        }
        return res;

=======

        int n = nums.length;
        int[] ans = new int[k];
        int top = 0;
        for (int i = 0; i < n; i++) {
            while (top > 0 && ans[top - 1] > nums[i] && top - 1 + n - i >= k) {
                top--;
            }
            if (top < k) {
                ans[top++] = nums[i];
            }
        }
        return ans;

=======

        int[] res = new int[k];
        int n = nums.length;
        Deque<Integer> stack = new ArrayDeque<>();
        for (int i = 0; i < n; i++) {
            while (!stack.isEmpty() && nums[i] < nums[stack.peek()] && n - i + stack.size() > k) {
                stack.pop();
            }
            if (stack.size() < k) {
                stack.push(i);
            }
        }
        for (int i = k - 1; i >= 0; i--) {
            res[i] = nums[stack.pop()];
        }
        return res;

=======

        int[] res = new int[k];
        int n = nums.length;
        Deque<Integer> stack = new ArrayDeque<>();
        for (int i = 0; i < n; i++) {
            while (!stack.isEmpty() && nums[i] < stack.peekLast() && stack.size() - 1 + n - i >= k) {
                stack.pollLast();
            }
            if (stack.size() < k) {
                stack.offerLast(nums[i]);
            }
        }
        for (int i = k - 1; i >= 0; i--) {
            res[i] = stack.pollLast();
        }
        return res;

=======

        int[] res = new int[k];
        int n = nums.length;
        Deque<Integer> stack = new ArrayDeque<>();
        for (int i = 0; i < n; i++) {
            while (!stack.isEmpty() && stack.peek() > nums[i] && stack.size() - 1 + n - i >= k) {
                stack.pop();
            }
            if (stack.size() < k) {
                stack.push(nums[i]);
            }
        }
        for (int i = k - 1; i >= 0; i--) {
            res[i] = stack.pop();
        }
        return res;

=======

        int[] res = new int[k];
        int n = nums.length;
        int top = -1;
        for (int i = 0; i < n; i++) {
            while (top >= 0 && nums[i] < res[top] && n - i + top >= k) {
                top--;
            }
            if (top < k - 1) {
                res[++top] = nums[i];
            }
        }
        return res;

=======

        int n = nums.length;
        int[] res = new int[k];
        int start = 0;
        int end = n - k;
        for (int i = 0; i < k; i++) {
            int min = Integer.MAX_VALUE;
            for (int j = start; j <= end; j++) {
                if (nums[j] < min) {
                    min = nums[j];
                    start = j + 1;
                }
            }
            res[i] = min;
            end++;
        }
        return res;

=======

        int n = nums.length;
        int[] res = new int[k];
        int idx = 0;
        int start = 0;
        for (int i = 0; i < k; i++) {
            int min = Integer.MAX_VALUE;
            for (int j = start; j < n - k + i + 1; j++) {
                if (nums[j] < min) {
                    min = nums[j];
                    start = j + 1;
                }
            }
            res[idx++] = min;
        }
        return res;

=======

        int[] result = new int[k];
        int n = nums.length;
        int i = 0;
        for (int num : nums) {
            while (i > 0 && n - i > k - result.length && result[i - 1] > num) {
                i--;
            }
            if (i < k) {
                result[i++] = num;
            } else {
                n--;
            }
        }
        return result;
