Synthesizing 10/10 solutions

=======

        String[] lines = input.split("\n");
        int[] stack = new int[lines.length + 1];
        int maxLen = 0;
        for (String s : lines) {
            int lev = s.lastIndexOf("\t") + 1; // number of "\t"
            int curLen = stack[lev + 1] = stack[lev] + s.length() - lev + 1; // remove "/t", add"/"
            if (s.contains(".")) maxLen = Math.max(maxLen, curLen - 1);
        }
        return maxLen;

=======

        String[] lines = input.split("\n");
        int[] stack = new int[lines.length + 1];
        int maxLen = 0;
        for (String line : lines) {
            int lev = line.lastIndexOf("\t") + 1; // number of "\t"
            int curLen = stack[lev + 1] = stack[lev] + line.length() - lev + 1; // remove "/t", add"/"
            if (line.contains(".")) maxLen = Math.max(maxLen, curLen - 1);
        }
        return maxLen;

=======

        String[] lines = input.split("\n");
        int[] stack = new int[lines.length + 1];
        int maxLen = 0;
        for (String s: lines) {
            int lev = s.lastIndexOf("\t") + 1, curLen = stack[lev + 1] = stack[lev] + s.length() - lev + 1;
            if (s.contains(".")) maxLen = Math.max(maxLen, curLen - 1);
        }
        return maxLen;

=======

        int maxLen = 0;
        Stack<Integer> stack = new Stack<>();
        stack.push(0);
        for (String s : input.split("\n")) {
            int level = s.lastIndexOf("\t") + 1;
            while (level + 1 < stack.size()) {
                stack.pop();
            }
            int len = stack.peek() + s.length() - level + 1;
            stack.push(len);
            if (s.contains(".")) {
                maxLen = Math.max(maxLen, len - 1);
            }
        }
        return maxLen;

=======

        int ans = 0;
        int[] stack = new int[input.length() + 1];
        for (String s : input.split("\n")) {
            int lev = s.lastIndexOf("\t") + 1; // number of "\t"
            int curLen = stack[lev + 1] = stack[lev] + s.length() - lev + 1; // remove "/t", add"/"
            if (s.contains(".")) ans = Math.max(ans, curLen - 1); // for a file, don't count the last"/"
        }
        return ans;

=======

        int max = 0;
        int[] stack = new int[input.length()+1];
        for (String s: input.split("\n")) {
            int level = s.lastIndexOf("\t") + 1;
            int len = s.length() - level + 1;
            if (s.contains(".")) {
                max = Math.max(max, stack[level] + len);
            } else {
                stack[level + 1] = stack[level] + len;
            }
        }
        return max;

=======

        int max = 0;
        int[] stack = new int[input.length()];
        int index = 0;
        for (String s : input.split("\n")) {
            int level = s.lastIndexOf("\t") + 1;
            int len = s.length() - level + (level > 0 ? stack[level - 1] : 0);
            stack[level] = len;
            if (s.contains(".")) {
                max = Math.max(max, len + level);
            }
        }
        return max;

=======

        int max = 0;
        int[] stack = new int[input.length()];
        int level = 0;
        for (String s : input.split("\n")) {
            int i = s.lastIndexOf("\t") + 1;
            level = i + 1;
            int len = s.length() - i;
            if (s.contains(".")) {
                max = Math.max(max, stack[level - 1] + len);
            } else {
                stack[level] = stack[level - 1] + len + 1;
            }
        }
        return max;

=======

        int max = 0;
        String[] dirs = input.split("\n");
        int[] dp = new int[dirs.length + 1];
        for (int i = 0; i < dirs.length; i++) {
            String dir = dirs[i];
            int level = dir.lastIndexOf("\t") + 1;
            int len = dir.substring(level).length();
            if (dir.contains(".")) {
                max = Math.max(max, dp[level] + len);
            } else {
                dp[level + 1] = dp[level] + len + 1;
            }
        }
        return max;

=======

        int max = 0;
        int cur = 0;
        int level = 0;
        int[] levels = new int[100];
        for (String s : input.split("\n")) {
            level = s.lastIndexOf("\t") + 1;
            cur = levels[level] + s.length() - level + 1;
            levels[level + 1] = cur;
            if (s.contains(".")) {
                max = Math.max(max, cur - 1);
            }
        }
        return max;
