Synthesizing 10/10 solutions (Duplicates hidden)

=======

        while (n > 0) {
            if (n % 3 == 2) {
                return false;
            }
            n /= 3;
        }
        return true;

=======

        if (n == 0) {
            return true;
        }
        if (n % 3 == 2) {
            return false;
        }
        return checkPowersOfThree(n / 3);

=======

        while (n > 0) {
            int r = n % 3;
            if (r == 2) {
                return false;
            } else if (r == 1) {
                n -= 1;
            }
            n /= 3;
        }
        return true;

=======

        int[] powers = new int[15];
        powers[0] = 1;
        for (int i = 1; i < 15; i++) {
            powers[i] = powers[i - 1] * 3;
        }
        for (int i = 14; i >= 0; i--) {
            if (n >= powers[i]) {
                n -= powers[i];
            }
        }
        return n == 0;

=======

        for (int i = 15; i >= 0; i--) {
            if ((n & (1 << i)) != 0) {
                n -= Math.pow(3, i);
            }
        }
        return n == 0;

=======

        int base = 1;
        while (n > 0) {
            if (n % 3 > 1) {
                return false;
            }
            n /= 3;
        }
        return true;

=======

        int m = 1;
        while (m <= n) {
            m *= 3;
        }
        while (n > 0) {
            m /= 3;
            if (m <= n) {
                n -= m;
            }
        }
        return n == 0;

=======

        int max = (int) (Math.log(n) / Math.log(3));
        int[] powers = new int[max + 1];
        for (int i = 0; i <= max; i++) {
            powers[i] = (int) Math.pow(3, i);
        }
        for (int i = max; i >= 0; i--) {
            if (n >= powers[i]) {
                n -= powers[i];
            }
        }
        return n == 0;

=======

        int a = n;
        int b = 1;
        while (b < a) {
            b *= 3;
        }
        while (a > 0) {
            if (a >= b) {
                a -= b;
            }
            b /= 3;
        }
        return a == 0;
