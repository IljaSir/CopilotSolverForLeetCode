Synthesizing 10/10 solutions

=======

        int count = 1;
        int result = 0;
        for (int i = 1; i < s.length(); i++) {
            if (s.charAt(i) == s.charAt(i - 1)) {
                count++;
            } else {
                result = (result + (count * (count + 1) / 2)) % 1000000007;
                count = 1;
            }
        }
        result = (result + (count * (count + 1) / 2)) % 1000000007;
        return result;

=======

        int count = 1;
        int sum = 0;
        int mod = 1000000007;
        for (int i = 1; i < s.length(); i++) {
            if (s.charAt(i) == s.charAt(i - 1)) {
                count++;
            } else {
                sum = (sum + count * (count + 1) / 2) % mod;
                count = 1;
            }
        }
        sum = (sum + count * (count + 1) / 2) % mod;
        return sum;

=======

        int count = 0;
        int result = 0;
        for (int i = 0; i < s.length(); i++) {
            if (i == 0 || s.charAt(i) != s.charAt(i - 1)) {
                count = 1;
            } else {
                count++;
            }
            result += count;
            result %= 1000000007;
        }
        return result;

=======

        int n = s.length();
        int ans = 0;
        for (int i = 0; i < n; i++) {
            int j = i;
            while (j < n && s.charAt(j) == s.charAt(i)) {
                j++;
            }
            int len = j - i;
            int k = 1;
            while (len >= k) {
                ans = (ans + k) % 1000000007;
                len -= k;
                k++;
            }
            i = j - 1;
        }
        return ans;

=======

        int count = 1;
        int sum = 0;
        int mod = 1000000007;
        for (int i = 0; i < s.length(); i++) {
            if (i > 0 && s.charAt(i) == s.charAt(i - 1)) {
                count++;
            } else {
                count = 1;
            }
            sum = (sum + count) % mod;
        }
        return sum;

=======

        int count = 1;
        int n = s.length();
        int res = 0;
        int mod = 1000000007;
        for (int i = 1; i < n; i++) {
            if (s.charAt(i) == s.charAt(i - 1)) {
                count++;
            } else {
                res = (res + (count + 1) * count / 2 % mod) % mod;
                count = 1;
            }
        }
        res = (res + (count + 1) * count / 2 % mod) % mod;
        return res;

=======

        int mod = 1000000007;
        int ans = 0;
        int count = 0;
        for (int i = 0; i < s.length(); i++) {
            if (i == 0 || s.charAt(i) != s.charAt(i - 1)) {
                count = 1;
            } else {
                count++;
            }
            ans = (ans + count) % mod;
        }
        return ans;

=======

        int count = 0;
        int result = 0;
        char prev = ' ';
        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            if (c == prev) {
                count++;
            } else {
                count = 1;
                prev = c;
            }
            result += count;
            result %= 1000000007;
        }
        return result;

=======

        int count = 0;
        int sum = 0;
        int MOD = 1000000007;
        int len = s.length();
        for (int i = 0; i < len; i++) {
            if (i > 0 && s.charAt(i) == s.charAt(i - 1)) {
                count++;
            } else {
                count = 1;
            }
            sum = (sum + count) % MOD;
        }
        return sum;

=======

        int count = 0;
        int mod = 1000000007;
        int ans = 0;
        char prev = ' ';
        for (int i = 0; i < s.length(); i++) {
            if (s.charAt(i) == prev) {
                count++;
            } else {
                count = 1;
                prev = s.charAt(i);
            }
            ans = (ans + count) % mod;
        }
        return ans;
