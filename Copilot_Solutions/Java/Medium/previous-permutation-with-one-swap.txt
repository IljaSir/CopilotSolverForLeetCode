Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int n = arr.length;
        int i = n - 2;
        while (i >= 0 && arr[i] <= arr[i + 1]) {
            i--;
        }
        if (i < 0) {
            return arr;
        }
        int j = n - 1;
        while (arr[j] >= arr[i]) {
            j--;
        }
        while (j > 0 && arr[j] == arr[j - 1]) {
            j--;
        }
        int temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
        return arr;

=======

        int n = arr.length;
        int i = n - 2;
        while (i >= 0 && arr[i] <= arr[i + 1]) {
            i--;
        }
        if (i < 0) {
            return arr;
        }
        int j = n - 1;
        while (arr[j] >= arr[i]) {
            j--;
        }
        while (j > i && arr[j] == arr[j - 1]) {
            j--;
        }
        swap(arr, i, j);
        return arr;

=======

        int n = arr.length;
        int i = n - 2;
        while (i >= 0 && arr[i] <= arr[i + 1]) {
            i--;
        }
        if (i < 0) {
            return arr;
        }
        int j = n - 1;
        while (j > i && arr[j] >= arr[i]) {
            j--;
        }
        while (j > i && arr[j] == arr[j - 1]) {
            j--;
        }
        swap(arr, i, j);
        return arr;

=======

        int n = arr.length;
        int i = n - 2;
        while (i >= 0 && arr[i] <= arr[i + 1]) {
            i--;
        }
        if (i < 0) {
            return arr;
        }
        int j = i + 1;
        while (j < n && arr[j] < arr[i]) {
            j++;
        }
        int k = j - 1;
        while (k > i && arr[k] == arr[j]) {
            k--;
        }
        int tmp = arr[k];
        arr[k] = arr[i];
        arr[i] = tmp;
        return arr;

=======

        int len = arr.length;
        int i = len - 2;
        while (i >= 0 && arr[i] <= arr[i + 1]) {
            i--;
        }
        if (i < 0) {
            return arr;
        }
        int j = len - 1;
        while (j >= 0 && arr[j] >= arr[i]) {
            j--;
        }
        while (j >= 0 && arr[j] == arr[j - 1]) {
            j--;
        }
        swap(arr, i, j);
        return arr;

=======

        int n = arr.length;
        for (int i = n - 2; i >= 0; i--) {
            if (arr[i] > arr[i + 1]) {
                int j = i + 1;
                while (j + 1 < n && arr[j + 1] < arr[i]) {
                    j++;
                }
                while (j > i + 1 && arr[j] == arr[j - 1]) {
                    j--;
                }
                int tmp = arr[i];
                arr[i] = arr[j];
                arr[j] = tmp;
                break;
            }
        }
        return arr;

=======

        if (arr == null || arr.length == 0) {
            return arr;
        }
        int i = arr.length - 2;
        while (i >= 0 && arr[i] <= arr[i + 1]) {
            i--;
        }
        if (i < 0) {
            return arr;
        }
        int j = arr.length - 1;
        while (arr[j] >= arr[i]) {
            j--;
        }
        while (j > 0 && arr[j - 1] == arr[j]) {
            j--;
        }
        swap(arr, i, j);
        return arr;

=======

        int n = arr.length;
        int i = n - 2;
        while (i >= 0 && arr[i] <= arr[i + 1]) {
            i--;
        }
        if (i == -1) return arr;
        int j = n - 1;
        while (arr[j] >= arr[i]) {
            j--;
        }
        while (j > i && arr[j] == arr[j - 1]) {
            j--;
        }
        int temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
        return arr;
