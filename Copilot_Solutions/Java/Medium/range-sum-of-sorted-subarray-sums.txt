Synthesizing 10/10 solutions

=======

        int[] sums = new int[n * (n + 1) / 2];
        int index = 0;
        for (int i = 0; i < n; i++) {
            int sum = 0;
            for (int j = i; j < n; j++) {
                sum += nums[j];
                sums[index++] = sum;
            }
        }
        Arrays.sort(sums);
        long sum = 0;
        for (int i = left - 1; i < right; i++) {
            sum += sums[i];
        }
        return (int) (sum % 1000000007);

=======

        int[] sums = new int[n * (n + 1) / 2];
        int index = 0;
        for (int i = 0; i < n; i++) {
            int sum = 0;
            for (int j = i; j < n; j++) {
                sum += nums[j];
                sums[index++] = sum;
            }
        }
        Arrays.sort(sums);
        int sum = 0;
        for (int i = left - 1; i < right; i++) {
            sum += sums[i];
        }
        return sum;

=======

        int[] sums = new int[n * (n + 1) / 2];
        int index = 0;
        for (int i = 0; i < n; i++) {
            int sum = 0;
            for (int j = i; j < n; j++) {
                sum += nums[j];
                sums[index++] = sum;
            }
        }
        Arrays.sort(sums);
        int result = 0;
        for (int i = left - 1; i < right; i++) {
            result += sums[i];
        }
        return result;

=======

        int[] sums = new int[n * (n + 1) / 2];
        int index = 0;
        for (int i = 0; i < n; i++) {
            int sum = 0;
            for (int j = i; j < n; j++) {
                sum += nums[j];
                sums[index++] = sum;
            }
        }
        Arrays.sort(sums);
        int res = 0;
        for (int i = left - 1; i < right; i++) {
            res += sums[i];
        }
        return res;

=======

        int[] sums = new int[n * (n + 1) / 2];
        int k = 0;
        for (int i = 0; i < n; i++) {
            int sum = 0;
            for (int j = i; j < n; j++) {
                sum += nums[j];
                sums[k++] = sum;
            }
        }
        Arrays.sort(sums);
        int sum = 0;
        for (int i = left - 1; i < right; i++) {
            sum += sums[i];
        }
        return sum;

=======

        int[] sums = new int[n * (n + 1) / 2];
        int k = 0;
        for (int i = 0; i < n; i++) {
            int sum = 0;
            for (int j = i; j < n; j++) {
                sum += nums[j];
                sums[k++] = sum;
            }
        }
        Arrays.sort(sums);
        int result = 0;
        for (int i = left - 1; i <= right - 1; i++) {
            result = (result + sums[i]) % (1000000007);
        }
        return result;

=======

        int mod = (int) 1e9 + 7;
        int[] sums = new int[n * (n + 1) / 2];
        int idx = 0;
        for (int i = 0; i < n; i++) {
            int sum = 0;
            for (int j = i; j < n; j++) {
                sum += nums[j];
                sums[idx++] = sum;
            }
        }
        Arrays.sort(sums);
        int res = 0;
        for (int i = left - 1; i < right; i++) {
            res = (res + sums[i]) % mod;
        }
        return res;

=======

        int[] arr = new int[n * (n + 1) / 2];
        int i = 0;
        for (int j = 0; j < n; j++) {
            int sum = 0;
            for (int k = j; k < n; k++) {
                sum += nums[k];
                arr[i++] = sum;
            }
        }
        Arrays.sort(arr);
        int sum = 0;
        for (i = left - 1; i < right; i++) {
            sum += arr[i];
        }
        return sum;

=======

        PriorityQueue<Integer> pq = new PriorityQueue<>();
        for(int i = 0; i < nums.length; i++) {
            int sum = 0;
            for(int j = i; j < nums.length; j++) {
                sum += nums[j];
                pq.add(sum);
            }
        }
        long result = 0;
        for(int i = 1; i <= right; i++) {
            int num = pq.poll();
            if(i >= left) {
                result += num;
            }
        }
        return (int)(result % 1000000007);

=======

        int[] sums = new int[n * (n + 1) / 2];
        int i = 0;
        for (int len = 1; len <= n; len++) {
            for (int j = 0; j <= n - len; j++) {
                sums[i++] = Arrays.stream(nums, j, j + len).sum();
            }
        }
        Arrays.sort(sums);
        int sum = 0;
        for (i = left - 1; i < right; i++) {
            sum += sums[i];
        }
        return sum % 1000000007;
