Synthesizing 10/10 solutions

=======

        Map<Integer, Set<Integer>> map = new HashMap<>();
        for (int i = 0; i < reservedSeats.length; i++) {
            if (!map.containsKey(reservedSeats[i][0])) {
                map.put(reservedSeats[i][0], new HashSet<>());
            }
            map.get(reservedSeats[i][0]).add(reservedSeats[i][1]);
        }
        int res = 0;
        for (Integer key : map.keySet()) {
            Set<Integer> set = map.get(key);
            if (!set.contains(2) && !set.contains(3) && !set.contains(4) && !set.contains(5)) {
                res++;
                if (!set.contains(6) && !set.contains(7) && !set.contains(8) && !set.contains(9)) {
                    res++;
                }
            } else if (!set.contains(6) && !set.contains(7) && !set.contains(8) && !set.contains(9)) {
                res++;
            } else if (!set.contains(4) && !set.contains(5) && !set.contains(6) && !set.contains(7)) {
                res++;
            }
        }
        return res + (n - map.size()) * 2;

=======

        Map<Integer, Set<Integer>> map = new HashMap<>();
        for (int[] reservedSeat : reservedSeats) {
            int row = reservedSeat[0];
            int col = reservedSeat[1];
            if (!map.containsKey(row)) {
                map.put(row, new HashSet<>());
            }
            map.get(row).add(col);
        }
        int result = n * 2;
        for (Integer row : map.keySet()) {
            Set<Integer> set = map.get(row);
            if (set.contains(2) || set.contains(3) || set.contains(4) || set.contains(5)) {
                result--;
            }
            if (set.contains(6) || set.contains(7) || set.contains(8) || set.contains(9)) {
                result--;
            }
            if (!set.contains(4) && !set.contains(5) && !set.contains(6) && !set.contains(7)) {
                result++;
            }
        }
        return result;

=======

        Map<Integer, Integer> reserved = new HashMap<>();
        for (int[] seat : reservedSeats) {
            int row = seat[0];
            int col = seat[1];
            reserved.put(row, reserved.getOrDefault(row, 0) | 1 << (col - 1));
        }

        int ans = 0;
        for (int row : reserved.keySet()) {
            int seats = reserved.get(row);
            if ((seats & 0b1111000000) == 0) {
                ans += 2;
            } else if ((seats & 0b0000111100) == 0) {
                ans += 2;
            } else if ((seats & 0b0000000011) == 0) {
                ans += 2;
            } else if ((seats & 0b0000001110) == 0) {
                ans += 2;
            } else if ((seats & 0b0000110000) == 0) {
                ans += 2;
            } else if ((seats & 0b1110000000) == 0) {
                ans += 2;
            } else if ((seats & 0b1100000000) == 0) {
                ans += 1;
            } else if ((seats & 0b0000000011) == 0) {
                ans += 1;
            } else if ((seats & 0b0000111100) == 0) {
                ans += 1;
            } else if ((seats & 0b0011110000) == 0) {
                ans += 1;
            } else if ((seats & 0b1100000000) == 0) {
                ans += 1;
            }
        }

        return ans + 2 * (n - reserved.size());

=======

        Map<Integer, Integer> map = new HashMap<>();
        for (int[] seat : reservedSeats) {
            int row = seat[0];
            int col = seat[1];
            if (col == 1 || col == 10) {
                continue;
            }
            map.put(row, map.getOrDefault(row, 0) | (1 << (col - 2)));
        }
        int res = 2 * n;
        for (int row : map.keySet()) {
            int seat = map.get(row);
            if ((seat & (1 << 0)) == 0 && (seat & (1 << 1)) == 0 && (seat & (1 << 2)) == 0 && (seat & (1 << 3)) == 0) {
                res--;
            } else if ((seat & (1 << 2)) == 0 && (seat & (1 << 3)) == 0 && (seat & (1 << 4)) == 0 && (seat & (1 << 5)) == 0) {
                res--;
            } else if ((seat & (1 << 4)) == 0 && (seat & (1 << 5)) == 0 && (seat & (1 << 6)) == 0 && (seat & (1 << 7)) == 0) {
                res--;
            } else if ((seat & (1 << 6)) == 0 && (seat & (1 << 7)) == 0 && (seat & (1 << 8)) == 0 && (seat & (1 << 9)) == 0) {
                res--;
            }
        }
        return res;

=======

        int result = 0;
        Map<Integer, Set<Integer>> map = new HashMap<>();
        for (int[] reservedSeat : reservedSeats) {
            int row = reservedSeat[0];
            int col = reservedSeat[1];
            map.computeIfAbsent(row, k -> new HashSet<>()).add(col);
        }
        for (int i = 1; i <= n; i++) {
            Set<Integer> set = map.getOrDefault(i, new HashSet<>());
            boolean[] seats = new boolean[11];
            for (int j = 1; j <= 10; j++) {
                seats[j] = set.contains(j);
            }
            result += 2 - (seats[2] || seats[3] || seats[4] || seats[5] ? 1 : 0) - (seats[6] || seats[7] || seats[8] || seats[9] ? 1 : 0);
        }
        return result;

=======

        int count = 0;
        Map<Integer, Integer> map = new HashMap<>();
        for (int[] seat : reservedSeats) {
            map.put(seat[0], map.getOrDefault(seat[0], 0) | 1 << (seat[1] - 1));
        }
        for (int row : map.keySet()) {
            int mask = map.get(row);
            if ((mask & 0b1111000000) == 0) {
                count++;
            } else if ((mask & 0b111000) == 0) {
                count++;
            } else if ((mask & 0b1110000000) == 0) {
                count++;
            } else if ((mask & 0b11100) == 0) {
                count++;
            }
        }
        return count + 2 * (n - map.size());

=======

        int result = 0;
        Map<Integer, Set<Integer>> map = new HashMap<>();
        for (int[] seat : reservedSeats) {
            int row = seat[0];
            int col = seat[1];
            if (!map.containsKey(row)) {
                map.put(row, new HashSet<>());
            }
            map.get(row).add(col);
        }
        for (int i = 1; i <= n; i++) {
            Set<Integer> set = map.getOrDefault(i, new HashSet<>());
            if (!set.contains(2) && !set.contains(3) && !set.contains(4) && !set.contains(5)) {
                result++;
            }
            if (!set.contains(4) && !set.contains(5) && !set.contains(6) && !set.contains(7)) {
                result++;
            }
            if (!set.contains(6) && !set.contains(7) && !set.contains(8) && !set.contains(9)) {
                result++;
            }
            if (set.contains(2) || set.contains(3) || set.contains(4) || set.contains(5) ||
                set.contains(6) || set.contains(7) || set.contains(8) || set.contains(9)) {
                continue;
            }
            result++;
        }
        return result;

=======

        int res = 0;
        Map<Integer, Integer> map = new HashMap<>();
        for (int[] r : reservedSeats) {
            int row = r[0], col = r[1];
            map.put(row, map.getOrDefault(row, 0) | (1 << (col - 1)));
        }
        for (int key : map.keySet()) {
            int val = map.get(key);
            if ((val & 0b1111000000) == 0) res += 2;
            else if ((val & 0b111100) == 0 || (val & 0b11110000) == 0) res++;
        }
        return res + (n - map.size()) * 2;

=======

        int ans = 0;
        int[] rows = new int[n];
        for (int[] seat : reservedSeats) {
            int row = seat[0] - 1;
            int col = seat[1] - 1;
            rows[row] |= 1 << col;
        }
        for (int row : rows) {
            if ((row & 0b1111000000) == 0) {
                ans += 2;
            } else if ((row & 0b11110000) == 0) {
                ans += 1;
            } else if ((row & 0b111100) == 0) {
                ans += 1;
            } else if ((row & 0b111100000000) == 0) {
                ans += 1;
            }
        }
        return ans + (n - rows.length) * 2;

=======

        int r = reservedSeats.length;
        int[][] seats = new int[n][10];
        for (int i = 0; i < r; i++) {
            int[] seat = reservedSeats[i];
            seats[seat[0] - 1][seat[1] - 1] = 1;
        }
        int result = 0;
        for (int i = 0; i < n; i++) {
            int[] seat = seats[i];
            if (seat[0] == 0 && seat[1] == 0 && seat[2] == 0 && seat[3] == 0) {
                result++;
                seat[0] = 1;
                seat[1] = 1;
                seat[2] = 1;
                seat[3] = 1;
            }
            if (seat[1] == 0 && seat[2] == 0 && seat[3] == 0 && seat[4] == 0) {
                result++;
                seat[1] = 1;
                seat[2] = 1;
                seat[3] = 1;
                seat[4] = 1;
            }
            if (seat[3] == 0 && seat[4] == 0 && seat[5] == 0 && seat[6] == 0) {
                result++;
                seat[3] = 1;
                seat[4] = 1;
                seat[5] = 1;
                seat[6] = 1;
            }
            if (seat[5] == 0 && seat[6] == 0 && seat[7] == 0 && seat[8] == 0) {
                result++;
                seat[5] = 1;
                seat[6] = 1;
                seat[7] = 1;
                seat[8] = 1;
            }
            if (seat[7] == 0 && seat[8] == 0 && seat[9] == 0 && seat[10] == 0) {
                result++;
                seat[7] = 1;
                seat[8] = 1;
                seat[9] = 1;
                seat[10] = 1;
            }
        }
        return result;
