Synthesizing 10/10 solutions

=======

        List<String> result = new ArrayList<>();
        result.add(s);
        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            if (Character.isLetter(c)) {
                int size = result.size();
                for (int j = 0; j < size; j++) {
                    String str = result.get(j);
                    char[] chars = str.toCharArray();
                    if (Character.isUpperCase(c)) {
                        chars[i] = Character.toLowerCase(c);
                    } else {
                        chars[i] = Character.toUpperCase(c);
                    }
                    result.add(new String(chars));
                }
            }
        }
        return result;

=======

        List<String> result = new ArrayList<>();
        result.add(s);
        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            if (Character.isLetter(c)) {
                int size = result.size();
                for (int j = 0; j < size; j++) {
                    char[] chars = result.get(j).toCharArray();
                    if (Character.isUpperCase(c)) {
                        chars[i] = Character.toLowerCase(c);
                    } else {
                        chars[i] = Character.toUpperCase(c);
                    }
                    result.add(String.valueOf(chars));
                }
            }
        }
        return result;

=======

        List<String> result = new ArrayList<>();
        result.add(s);
        for (int i = 0; i < s.length(); i++) {
            if (Character.isLetter(s.charAt(i))) {
                int size = result.size();
                for (int j = 0; j < size; j++) {
                    char[] chars = result.get(j).toCharArray();
                    if (Character.isLowerCase(chars[i])) {
                        chars[i] = Character.toUpperCase(chars[i]);
                    } else {
                        chars[i] = Character.toLowerCase(chars[i]);
                    }
                    result.add(new String(chars));
                }
            }
        }
        return result;

=======

        List<String> result = new ArrayList<>();
        result.add(s);
        for (int i = 0; i < s.length(); i++) {
            if (Character.isLetter(s.charAt(i))) {
                int size = result.size();
                for (int j = 0; j < size; j++) {
                    char[] chars = result.get(j).toCharArray();
                    if (Character.isUpperCase(chars[i])) {
                        chars[i] = Character.toLowerCase(chars[i]);
                    } else {
                        chars[i] = Character.toUpperCase(chars[i]);
                    }
                    result.add(String.valueOf(chars));
                }
            }
        }
        return result;

=======

        List<String> result = new ArrayList<>();
        result.add(s);
        for (int i = 0; i < s.length(); i++) {
            if (Character.isLetter(s.charAt(i))) {
                int size = result.size();
                for (int j = 0; j < size; j++) {
                    char[] chars = result.get(j).toCharArray();
                    if (Character.isUpperCase(chars[i])) {
                        chars[i] = Character.toLowerCase(chars[i]);
                    } else {
                        chars[i] = Character.toUpperCase(chars[i]);
                    }
                    result.add(new String(chars));
                }
            }
        }
        return result;

=======

        List<String> res = new ArrayList<String>();
        res.add(s);
        for (int i = 0; i < s.length(); i++) {
            if (Character.isLetter(s.charAt(i))) {
                int n = res.size();
                for (int j = 0; j < n; j++) {
                    char[] ch = res.get(j).toCharArray();
                    if (Character.isUpperCase(ch[i])) {
                        ch[i] = Character.toLowerCase(ch[i]);
                    } else {
                        ch[i] = Character.toUpperCase(ch[i]);
                    }
                    res.add(String.valueOf(ch));
                }
            }
        }
        return res;

=======

        List<String> result = new ArrayList<>();
        if (s == null || s.length() == 0) {
            result.add(s);
            return result;
        }
        dfs(s, 0, result);
        return result;
    }

    private void dfs(String s, int index, List<String> result) {
        if (index == s.length()) {
            result.add(s);
            return;
        }

        char ch = s.charAt(index);
        if (Character.isDigit(ch)) {
            dfs(s, index + 1, result);
            return;
        }

        char[] chars = s.toCharArray();
        chars[index] = Character.toLowerCase(ch);
        dfs(new String(chars), index + 1, result);

        chars[index] = Character.toUpperCase(ch);
        dfs(new String(chars), index + 1, result);

=======

        List<String> res = new ArrayList<>();
        if (s == null || s.length() == 0) {
            res.add("");
            return res;
        }
        char[] chars = s.toCharArray();
        dfs(chars, 0, res);
        return res;
    }
    
    private void dfs(char[] chars, int index, List<String> res) {
        if (index == chars.length) {
            res.add(new String(chars));
            return;
        }
        dfs(chars, index + 1, res);
        if (Character.isLetter(chars[index])) {
            chars[index] = Character.isLowerCase(chars[index]) ? Character.toUpperCase(chars[index]) : Character.toLowerCase(chars[index]);
            dfs(chars, index + 1, res);
        }

=======

        List<String> result = new ArrayList<>();
        char[] cs = s.toCharArray();
        backtrack(cs, 0, result);
        return result;
    }
    
    private void backtrack(char[] cs, int index, List<String> result) {
        if (index == cs.length) {
            result.add(new String(cs));
            return;
        }
        if (Character.isDigit(cs[index])) {
            backtrack(cs, index + 1, result);
        } else {
            cs[index] = Character.toLowerCase(cs[index]);
            backtrack(cs, index + 1, result);
            cs[index] = Character.toUpperCase(cs[index]);
            backtrack(cs, index + 1, result);
        }

=======

        List<String> list = new ArrayList<>();
        if(s == null || s.length() == 0) return list;
        helper(s.toCharArray(), 0, list);
        return list;
    }
    private void helper(char[] ch, int index, List<String> list) {
        if(index == ch.length) {
            list.add(new String(ch));
            return;
        }
        if(Character.isDigit(ch[index])) {
            helper(ch, index + 1, list);
        } else {
            ch[index] = Character.toLowerCase(ch[index]);
            helper(ch, index + 1, list);
            ch[index] = Character.toUpperCase(ch[index]);
            helper(ch, index + 1, list);
        }
