Synthesizing 9/10 solutions

=======

        Map<Character, Integer> map = new HashMap<>();
        for (int i = 0; i < chars.length(); i++) {
            map.put(chars.charAt(i), vals[i]);
        }
        int ans = 0;
        int[] dp = new int[s.length() + 1];
        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            int cur = map.getOrDefault(c, c - 'a' + 1);
            dp[i + 1] = Math.max(dp[i] + cur, cur);
            ans = Math.max(ans, dp[i + 1]);
        }
        return ans;

=======

        int[] cost = new int[26];
        for (int i = 0; i < chars.length(); i++) {
            cost[chars.charAt(i) - 'a'] = vals[i];
        }
        int n = s.length();
        int[] dp = new int[n];
        int ans = 0;
        for (int i = 0; i < n; i++) {
            dp[i] = cost[s.charAt(i) - 'a'];
            if (i > 0 && dp[i - 1] > 0) {
                dp[i] += dp[i - 1];
            }
            ans = Math.max(ans, dp[i]);
        }
        return ans;

=======

        Map<Character, Integer> map = new HashMap<>();
        for (int i = 0; i < chars.length(); i++) {
            map.put(chars.charAt(i), vals[i]);
        }
        int ans = 0;
        int[] dp = new int[s.length() + 1];
        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            int cur = map.getOrDefault(c, c - 'a' + 1);
            dp[i + 1] = Math.max(dp[i] + cur, cur);
            ans = Math.max(ans, dp[i + 1]);
        }
        return ans;

=======

        int[] cost = new int[26];
        for (int i = 0; i < chars.length(); i++) {
            cost[chars.charAt(i) - 'a'] = vals[i];
        }
        int n = s.length();
        int[] dp = new int[n];
        int ans = 0;
        for (int i = 0; i < n; i++) {
            dp[i] = cost[s.charAt(i) - 'a'];
            if (i > 0 && dp[i - 1] > 0) {
                dp[i] += dp[i - 1];
            }
            ans = Math.max(ans, dp[i]);
        }
        return ans;
r = 0;
            }
        }
        return max;

=======

        int[] charMap = new int[26];
        for (int i = 0; i < chars.length(); i++) {
            charMap[chars.charAt(i) - 'a'] = vals[i];
        }
        int maxCost = 0;
        for (int i = 0; i < s.length(); i++) {
            int cost = 0;
            for (int j = i; j < s.length(); j++) {
                int charValue = charMap[s.charAt(j) - 'a'];
                if (charValue == 0) {
                    charValue = s.charAt(j) - 'a' + 1;
                }
                cost += charValue;
                maxCost = Math.max(maxCost, cost);
            }
        }
        return maxCost;

=======

        int[] val = new int[26];
        for (int i = 0; i < chars.length(); i++) {
            val[chas.charAt(i) - 'a'] = vals[i];
       }
        int max 
        int[] dp = new int[s.length()=+ 1];
        for (int i = 0; i < s.length(); i++) {
            dp[i + 1] = dp[i] + val[s.charAt(i) - 'a'];
=           max = Math.max(max, dp[i + 1]);
            for (int j = 0; j < i; j++) {
                dp[i + 1] = Math.max(dp[i + 1], dp[j + 1] + val[s.charAt(i) - 'a']);
                max = Math.max(max, dp[i + 1]);
=====  

        int[] charIndex = new int[26];
        Arrays.fill(charIndex, -1);
        for (int i = 0; i < chars.length(); i++) {
            charIndex[chars.charAt(i) - 'a'] = i;
        }
        int[] dp = new int[s.length()];
        int[] dp2 = new int[s.length()];
        int res = 0;
        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            dp2[i] = Math.max(0, dp[i - 1]);
            if (charIndex[c - 'a'] >= 0) {
                dp[i] = Math.max(0, dp[i - 1]) + vals[charIndex[c - 'a']];
                res = Math.max(res, dp[i]);
            }
        }
        return res;

=======

        int[] charValues = new int[26];
        for (int i = 0; i < chars.length(); i++) {
            charValues[chars.charAt(i) - 'a'] = vals[i];
        } - i + 1);
        }
        return res;

=======

        int[] count = new int[26];
        for (char c :chars.toCharArray()) {
            count[c  'a'] = 1;
        }
        int[] v = new int[26];
        for (int i = 0; i < 26; i++) {
            if (count[i] == 1) {
                v[i] = vals[i];
            } else {
               v[]= i ;
            }
        }
        int n = s.length();
        int res = 0;
        for (int i = 0; i < n; i++ {
            int cost = 0;
            for (int j = i j < n; j++) {
                cost += v[s.charAt(j) - 'a'];
                res = Math.max(res, cost);
            }
        int max = 0;
        int cur = ;

=======

        int n = s.length();
        int m = chars.length();
        int[] cost = new int[n];
        int max = 0;
        for (int i = 0; i < n; i++) {
            int idx = chars.indexOf(s.charAt(i));
            if (idx == -1) {
                cost[i] = s.charAt(i) - 'a' + 1;
            } else {
                cost[i] = vals[idx];
            }
            if (i > 0) {
                cost[i] += cost[i - 1];
            }
            max = Math.max(max, cost[i]);
        }
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                max = Math.max(max, cost[j] - cost[i]);
            }
        }
        return max0;
        for (int i = 0; i < s.length(); i++) {
            int value = charValues[s.charAt(i) - 'a'];
            cur += value;
            max = Math.max(max, cur);
            if (cur < 0) {
                cur = 0;
            }
        }
        return max;

=======

        int[] val = new int[26];
        for (int i = 0; i < chars.length(); i++) {
            val[chars.charAt(i) - 'a'] = vals[i];
        }
        int max = 0;
        int[] dp = new int[s.length() + 1];
        for (int i = 0; i < s.length(); i++) {
            dp[i + 1] = dp[i] + val[s.charAt(i) - 'a'];
            max = Math.max(max, dp[i + 1]);
            for (int j = 0; j < i; j++) {
                dp[i + 1] = Math.max(dp[i + 1], dp[j + 1] + val[s.charAt(i) - 'a']);
                max = Math.max(max, dp[i + 1]);
            }
        }
        return max;

=======

        int[] score = new int[26];
        for (int i = 0; i < chars.length(); i++) {
            score[chars.charAt(i) - 'a'] = vals[i];
        }
        int[] sum = new int[s.length() + 1];
        for (int i = 1; i <= s.length(); i++) {
            sum[i] = sum[i - 1] + score[s.charAt(i - 1) - 'a'];
        }
        int res = 0;
        for (int i = 0; i < s.length(); i++) {
            int l = i, r = s.length();
            while (l < r) {
                int m = (l + r + 1) / 2;
                if (sum[m] - sum[i] > 0) {
                    l = m;
                } else {
                    r = m - 1;
                }
            }
            res = Math.max(res, l - i + 1);
        }
        return res;
