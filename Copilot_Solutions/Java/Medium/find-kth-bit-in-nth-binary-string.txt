Synthesizing 10/10 solutions

=======

        if (n == 1) {
            return '0';
        }
        int mid = (int) Math.pow(2, n - 1) / 2;
        if (k == mid) {
            return '1';
        } else if (k < mid) {
            return findKthBit(n - 1, k);
        } else {
            char c = findKthBit(n - 1, (int) Math.pow(2, n - 1) - k);
            return c == '0' ? '1' : '0';
        }

=======

        if (n == 1) {
            return '0';
        }
        int len = (int) Math.pow(2, n) - 1;
        if (k == len / 2 + 1) {
            return '1';
        }
        if (k < len / 2 + 1) {
            return findKthBit(n - 1, k);
        }
        if (k > len / 2 + 1) {
            return findKthBit(n - 1, len - k + 1) == '1' ? '0' : '1';
        }
        return '0';

=======

        if (n == 1) {
            return '0';
        }
        int len = (int) Math.pow(2, n) - 1;
        if (k == len / 2 + 1) {
            return '1';
        } else if (k < len / 2 + 1) {
            return findKthBit(n - 1, k);
        } else {
            return findKthBit(n - 1, len - k + 1) == '0' ? '1' : '0';
        }

=======

        if (n == 1) {
            return '0';
        }
        int len = (int) Math.pow(2, n) - 1;
        int mid = len / 2;
        if (k == mid + 1) {
            return '1';
        } else if (k <= mid) {
            return findKthBit(n - 1, k);
        } else {
            return findKthBit(n - 1, len - k + 1) == '0' ? '1' : '0';
        }
    }
}

=======

        if (n == 1) {
            return '0';
        }
        int len = (int) Math.pow(2, n) - 1;
        int mid = len / 2;
        if (k == mid + 1) {
            return '1';
        } else if (k < mid + 1) {
            return findKthBit(n - 1, k);
        } else {
            char c = findKthBit(n - 1, len - k + 1);
            return c == '0' ? '1' : '0';
        }

=======

        if (n == 1) {
            return '0';
        }
        int mid = (1 << (n - 1)) / 2;
        if (k == mid) {
            return '1';
        } else if (k < mid) {
            return findKthBit(n - 1, k);
        } else {
            return findKthBit(n - 1, k - mid) == '0' ? '1' : '0';
        }

=======

        if (n == 1) return '0';
        int mid = (int) Math.pow(2, n - 1) / 2;
        if (k == mid) return '1';
        if (k < mid) return findKthBit(n - 1, k);
        return findKthBit(n - 1, mid * 2 - k) == '0' ? '1' : '0';

=======

        if(n == 1){
            return '0';
        }
        int mid = (int)Math.pow(2, n - 1);
        if(k == mid){
            return '1';
        }
        if(k < mid){
            return findKthBit(n - 1, k);
        }
        return findKthBit(n - 1, mid * 2 - k) == '1' ? '0' : '1';

=======

        return findKthBit(n, k, new StringBuilder());
    }
    private char findKthBit(int n, int k, StringBuilder sb) {
        if (n == 1) {
            sb.append("0");
            return sb.charAt(k - 1);
        }
        int len = (int) Math.pow(2, n) - 1;
        if (k == len / 2 + 1) {
            sb.append("1");
            return '1';
        }
        if (k <= len / 2) {
            return findKthBit(n - 1, k, sb);
        }
        return findKthBit(n - 1, len - k + 1, sb);

=======

        return find(n, k);
    }
    public char find(int n, int k){
        if(n==1 && k==1){
            return '0';
        }
        int len = (int)Math.pow(2, n)-1;
        int mid = len/2;
        if(k==mid+1){
            return '1';
        }
        if(k<mid+1){
            return find(n-1, k);
        }
        return find(n-1, len-k+1)=='0'?'1':'0';
