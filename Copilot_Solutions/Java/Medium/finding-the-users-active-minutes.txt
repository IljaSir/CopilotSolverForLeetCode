Synthesizing 10/10 solutions

=======

        Map<Integer, Set<Integer>> map = new HashMap<>();
        for (int[] log : logs) {
            map.putIfAbsent(log[0], new HashSet<>());
            map.get(log[0]).add(log[1]);
        }
        int[] res = new int[k];
        for (int key : map.keySet()) {
            res[map.get(key).size() - 1]++;
        }
        return res;

=======

        int[] res = new int[k];
        Map<Integer, Set<Integer>> map = new HashMap<>();
        for (int[] log : logs) {
            Set<Integer> set = map.getOrDefault(log[0], new HashSet<>());
            set.add(log[1]);
            map.put(log[0], set);
        }
        for (int key : map.keySet()) {
            res[map.get(key).size() - 1]++;
        }
        return res;

=======

        int[] result = new int[k];
        Map<Integer, Set<Integer>> map = new HashMap<>();
        for (int[] log : logs) {
            int id = log[0];
            int time = log[1];
            Set<Integer> set = map.getOrDefault(id, new HashSet<>());
            set.add(time);
            map.put(id, set);
        }
        for (Map.Entry<Integer, Set<Integer>> entry : map.entrySet()) {
            result[entry.getValue().size() - 1]++;
        }
        return result;

=======

        int[] result = new int[k];
        Map<Integer, Set<Integer>> map = new HashMap<>();
        for (int[] log : logs) {
            int id = log[0];
            int time = log[1];
            if (!map.containsKey(id)) {
                map.put(id, new HashSet<>());
            }
            map.get(id).add(time);
        }
        for (int id : map.keySet()) {
            int size = map.get(id).size();
            if (size <= k) {
                result[size - 1]++;
            }
        }
        return result;

=======

        int[] result = new int[k];
        Map<Integer, Set<Integer>> map = new HashMap<>();
        for(int[] log : logs) {
            map.putIfAbsent(log[0], new HashSet<>());
            map.get(log[0]).add(log[1]);
        }
        for(int key : map.keySet()) {
            result[map.get(key).size() - 1]++;
        }
        return result;

=======

        HashMap<Integer, Set<Integer>> map = new HashMap<>();
        for (int[] log : logs) {
            int id = log[0];
            int time = log[1];
            if (!map.containsKey(id)) {
                map.put(id, new HashSet<>());
            }
            map.get(id).add(time);
        }
        int[] result = new int[k];
        for (int id : map.keySet()) {
            int size = map.get(id).size();
            result[size - 1]++;
        }
        return result;

=======

        int[] res = new int[k];
        HashMap<Integer, HashSet<Integer>> map = new HashMap<>();
        for (int[] log : logs) {
            int id = log[0];
            int time = log[1];
            if (!map.containsKey(id)) {
                map.put(id, new HashSet<>());
            }
            map.get(id).add(time);
        }
        for (int id : map.keySet()) {
            int size = map.get(id).size();
            res[size - 1]++;
        }
        return res;

=======

        int[] result = new int[k];
        Map<Integer, Set<Integer>> map = new HashMap<>();
        for (int[] log : logs) {
            int user = log[0];
            int minute = log[1];
            if (!map.containsKey(user)) {
                map.put(user, new HashSet<>());
            }
            map.get(user).add(minute);
        }
        for (Integer user : map.keySet()) {
            int size = map.get(user).size();
            result[size - 1]++;
        }
        return result;

=======

        int[] answer = new int[k];
        Map<Integer, Set<Integer>> map = new HashMap<>();
        for (int[] l : logs) {
            map.putIfAbsent(l[0], new HashSet<>());
            map.get(l[0]).add(l[1]);
        }
        for (int key : map.keySet()) {
            int size = map.get(key).size();
            answer[size - 1] += 1;
        }
        return answer;

=======

        int[] result = new int[k];
        Map<Integer, Set<Integer>> userMap = new HashMap<>();
        for (int[] log : logs) {
            userMap.putIfAbsent(log[0], new HashSet<Integer>());
            userMap.get(log[0]).add(log[1]);
        }
        for (int key : userMap.keySet()) {
            result[userMap.get(key).size() - 1]++;
        }
        return result;
