Synthesizing 10/10 solutions

=======

        int res = -1;
        for (int i = 0; i < strs.length; i++) {
            int j = 0;
            for (; j < strs.length; j++) {
                if (i == j) {
                    continue;
                }
                if (isSubsequence(strs[i], strs[j])) {
                    break;
                }
            }
            if (j == strs.length) {
                res = Math.max(res, strs[i].length());
            }
        }
        return res;
    }

    private boolean isSubsequence(String a, String b) {
        int i = 0, j = 0;
        while (i < a.length() && j < b.length()) {
            if (a.charAt(i) == b.charAt(j)) {
                i++;
            }
            j++;
        }
        return i == a.length();

=======

        int result = -1;
        for (int i = 0; i < strs.length; i++) {
            int j = 0;
            for (; j < strs.length; j++) {
                if (i != j && isSubsequence(strs[i], strs[j])) {
                    break;
                }
            }
            if (j == strs.length) {
                result = Math.max(result, strs[i].length());
            }
        }
        return result;
    }
    
    private boolean isSubsequence(String s, String t) {
        int i = 0, j = 0;
        while (i < s.length() && j < t.length()) {
            if (s.charAt(i) == t.charAt(j)) {
                i++;
            }
            j++;
        }
        return i == s.length();

=======

        int max = -1;
        for (int i = 0; i < strs.length; i++) {
            int j = 0;
            for (; j < strs.length; j++) {
                if (i == j) continue;
                if (isSubsequence(strs[i], strs[j])) break;
            }
            if (j == strs.length) max = Math.max(max, strs[i].length());
        }
        return max;
    }
    
    public boolean isSubsequence(String s, String t) {
        int i = 0, j = 0;
        while (i < s.length() && j < t.length()) {
            if (s.charAt(i) == t.charAt(j)) i++;
            j++;
        }
        return i == s.length();

=======

        int ans = -1;
        for (int i = 0; i < strs.length; i++) {
            int j = 0;
            for (; j < strs.length; j++) {
                if (i == j) {
                    continue;
                }
                if (isSubsequence(strs[i], strs[j])) {
                    break;
                }
            }
            if (j == strs.length) {
                ans = Math.max(ans, strs[i].length());
            }
        }
        return ans;
    }
    public boolean isSubsequence(String s, String t) {
        int m = s.length(), n = t.length();
        int i = 0, j = 0;
        while (i < m && j < n) {
            if (s.charAt(i) == t.charAt(j)) {
                i++;
            }
            j++;
        }
        return i == m;

=======

        Arrays.sort(strs, new Comparator<String>() {
            @Override
            public int compare(String s1, String s2) {
                return s2.length() - s1.length();
            }
        });
        for (int i = 0; i < strs.length; i++) {
            boolean flag = true;
            for (int j = 0; j < strs.length; j++) {
                if (i == j) continue;
                if (isSubsequence(strs[i], strs[j])) {
                    flag = false;
                    break;
                }
            }
            if (flag) return strs[i].length();
        }
        return -1;
    }
    private boolean isSubsequence(String s1, String s2) {
        int i = 0, j = 0;
        while (i < s1.length() && j < s2.length()) {
            if (s1.charAt(i) == s2.charAt(j)) {
                i++;
                j++;
            } else {
                j++;
            }
        }
        return i == s1.length();

=======

        int max = -1;
        for (int i = 0; i < strs.length; i++) {
            boolean flag = false;
            for (int j = 0; j < strs.length; j++) {
                if (i == j) continue;
                if (isSub(strs[i], strs[j])) {
                    flag = true;
                    break;
                }
            }
            if (!flag) {
                max = Math.max(max, strs[i].length());
            }
        }
        return max;
    }
    
    public boolean isSub(String s1, String s2) {
        int i = 0, j = 0;
        while (i < s1.length() && j < s2.length()) {
            if (s1.charAt(i) == s2.charAt(j)) {
                i++;
                j++;
            } else {
                j++;
            }
        }
        return i == s1.length();

=======

        int longest = -1;
        for (int i = 0; i < strs.length; i++) {
            int j = 0;
            for (; j < strs.length; j++) {
                if (i == j) continue;
                if (isSubsequence(strs[i], strs[j])) break;
            }
            if (j == strs.length) longest = Math.max(longest, strs[i].length());
        }
        return longest;
    }

    private boolean isSubsequence(String s, String t) {
        int i = 0;
        for (char c : t.toCharArray()) {
            if (i < s.length() && c == s.charAt(i)) i++;
        }
        return i == s.length();

=======

        int n = strs.length;
        Arrays.sort(strs, (a, b) -> b.length() - a.length());
        for (int i = 0; i < n; i++) {
            boolean flag = true;
            for (int j = 0; j < n; j++) {
                if (i == j) {
                    continue;
                }
                if (isSubsequence(strs[i], strs[j])) {
                    flag = false;
                    break;
                }
            }
            if (flag) {
                return strs[i].length();
            }
        }
        return -1;
    }
    boolean isSubsequence(String a, String b) {
        int n = a.length();
        int m = b.length();
        int i = 0;
        int j = 0;
        while (i < n && j < m) {
            if (a.charAt(i) == b.charAt(j)) {
                i++;
            }
            j++;
        }
        return i == n;

=======

        int max = -1;
        for (int i = 0; i < strs.length; i++) {
            if (strs[i].length() > max) {
                int j = 0;
                for (; j < strs.length; j++) {
                    if (i != j && isSubsequence(strs[i], strs[j])) {
                        break;
                    }
                }
                if (j == strs.length) {
                    max = strs[i].length();
                }
            }
        }
        return max;
    }
    private boolean isSubsequence(String s, String t) {
        int i = 0;
        for (int j = 0; j < t.length() && i < s.length(); j++) {
            if (s.charAt(i) == t.charAt(j)) {
                i++;
            }
        }
        return i == s.length();

=======

        // 1. sort by length
        Arrays.sort(strs, new Comparator<String>() {
            public int compare(String a, String b) {
                return b.length() - a.length();
            }
        });
        
        // 2. check if any string is unique
        for (int i = 0; i < strs.length; i++) {
            if (i == strs.length - 1 || !strs[i].equals(strs[i + 1])) {
                // check if any other string is a subsequence of current string
                int j = 0;
                for (j = 0; j < strs.length; j++) {
                    if (i != j && isSubsequence(strs[i], strs[j])) {
                        break;
                    }
                }
                if (j == strs.length) {
                    return strs[i].length();
                }
            } else {
                // skip same string
                i++;
            }
        }
        return -1;
    }
    
    private boolean isSubsequence(String a, String b) {
        int i = 0, j = 0;
        while (i < a.length() && j < b.length()) {
            if (a.charAt(i) == b.charAt(j)) {
                i++;
            }
            j++;
        }
        return i == a.length();
