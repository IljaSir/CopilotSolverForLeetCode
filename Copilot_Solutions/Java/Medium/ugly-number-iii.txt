Synthesizing 10/10 solutions

=======

        long left = 1;
        long right = 2 * (long) Math.pow(10, 9);
        while (left < right) {
            long mid = left + (right - left) / 2;
            if (check(mid, a, b, c) >= n) {
                right = mid;
            } else {
                left = mid + 1;
            }
        }
        return (int) left;
    }

    private long check(long mid, long a, long b, long c) {
        long lcm_ab = a * b / gcd(a, b);
        long lcm_bc = b * c / gcd(b, c);
        long lcm_ac = a * c / gcd(a, c);
        long lcm_abc = lcm_ab * c / gcd(lcm_ab, c);
        return mid / a + mid / b + mid / c - mid / lcm_ab - mid / lcm_bc - mid / lcm_ac + mid / lcm_abc;

=======

        int left = 1;
        int right = 2 * (int)Math.pow(10, 9);
        while (left < right) {
            int mid = left + (right - left) / 2;
            if (count(mid, a, b, c) < n) {
                left = mid + 1;
            } else {
                right = mid;
            }
        }
        return left;
    }
    
    private int count(int num, int a, int b, int c) {
        return num / a + num / b + num / c - num / lcm(a, b) - num / lcm(a, c) - num / lcm(b, c) + num / lcm(a, lcm(b, c));
    }
    
    private int lcm(int a, int b) {
        return a * b / gcd(a, b);
    }
    
    private int gcd(int a, int b) {
        if (b == 0) {
            return a;
        }
        return gcd(b, a % b);

=======

        int l = 0, r = Integer.MAX_VALUE;
        while (l < r) {
            int m = l + (r - l) / 2;
            if (count(m, a, b, c) < n) {
                l = m + 1;
            } else {
                r = m;
            }
        }
        return l;
    }

    private int count(int m, int a, int b, int c) {
        return m / a + m / b + m / c - m / lcm(a, b) - m / lcm(a, c) - m / lcm(b, c) + m / lcm(a, lcm(b, c));
    }

    private int lcm(int a, int b) {
        return a * b / gcd(a, b);

=======

        long ab = lcm(a, b);
        long bc = lcm(b, c);
        long ac = lcm(a, c);
        long abc = lcm(ab, c);
        long l = 1;
        long r = Integer.MAX_VALUE;
        while (l < r) {
            long m = (l + r) / 2;
            long count = m / a + m / b + m / c - m / ab - m / bc - m / ac + m / abc;
            if (count < n) {
                l = m + 1;
            } else {
                r = m;
            }
        }
        return (int)l;
    }
    private long gcd(long a, long b) {
        return b == 0 ? a : gcd(b, a % b);

=======

        long min = 1;
        long max = Integer.MAX_VALUE;
        while (min < max) {
            long mid = min + (max - min) / 2;
            if (count(mid, a, b, c) < n) {
                min = mid + 1;
            } else {
                max = mid;
            }
        }
        return (int) min;
    }
    
    private long count(long mid, int a, int b, int c) {
        return mid / a + mid / b + mid / c - mid / lcm(a, b) - mid / lcm(b, c) - mid / lcm(a, c) + mid / lcm(a, lcm(b, c));
    }
    
    private long lcm(long a, long b) {
        return a * b / gcd(a, b);
    }
    
    private long gcd(long a, long b) {
        if (a == 0) {
            return b;
        }
        return gcd(b % a, a);

=======

        long ab = lcm(a, b), ac = lcm(a, c), bc = lcm(b, c), abc = lcm(a, bc);
        int lo = 1, hi = 2 * (int)1e9;
        while (lo < hi) {
            int mid = lo + (hi - lo) / 2;
            int count = mid / a + mid / b + mid / c - mid / ab - mid / ac - mid / bc + mid / abc;
            if (count < n) lo = mid + 1;
            else hi = mid;
        }
        return lo;
    }

    private long gcd(long a, long b) {
        return b == 0 ? a : gcd(b, a % b);

=======

        long l = 1, r = 2000000000, m;
        while (l < r) {
            m = (l + r) / 2;
            if (count(m, a, b, c) < n) {
                l = m + 1;
            } else {
                r = m;
            }
        }
        return (int) r;
    }
    long count(long x, int a, int b, int c) {
        return x / a + x / b + x / c - x / lcm(a, b) - x / lcm(a, c) - x / lcm(b, c) + x / lcm(a, lcm(b, c));
    }
    long gcd(long a, long b) {
        return b == 0 ? a : gcd(b, a % b);

=======

        long l = 1;
        long r = (long)2e9;
        while (l < r) {
            long m = (l + r) >> 1;
            if (count(m, a, b, c) < n) {
                l = m + 1;
            } else {
                r = m;
            }
        }
        return (int)l;
    }
    
    long count(long n, int a, int b, int c) {
        return n / a + n / b + n / c - n / lcm(a, b) - n / lcm(b, c) - n / lcm(a, c) + n / lcm(a, lcm(b, c));
    }
    
    long lcm(int a, int b) {
        return (long)a * b / gcd(a, b);

=======

        long l = 1, r = 2 * (long)1e9;
        while (l < r) {
            long mid = (l + r) / 2;
            long count = count(mid, a, b, c);
            if (count < n) {
                l = mid + 1;
            } else {
                r = mid;
            }
        }
        return (int)l;
    }
    
    private long count(long mid, int a, int b, int c) {
        long count = 0;
        count += mid / a + mid / b + mid / c;
        count -= mid / lcm(a, b) + mid / lcm(a, c) + mid / lcm(b, c);
        count += mid / lcm(a, lcm(b, c));
        return count;
    }
    
    private long gcd(long a, long b) {
        return a == 0 ? b : gcd(b % a, a);

=======

        long l = 1, r = (long) 2 * 1e9;
        while (l < r) {
            long mid = l + r >> 1;
            if (count(mid, a, b, c) < n) l = mid + 1;
            else r = mid;
        }
        return (int) l;
    }
    long count(long x, int a, int b, int c) {
        return x / a + x / b + x / c - x / lcm(a, b) - x / lcm(a, c) - x / lcm(b, c) + x / lcm(a, lcm(b, c));
    }
    long lcm(long a, long b) {
        return a * b / gcd(a, b);
