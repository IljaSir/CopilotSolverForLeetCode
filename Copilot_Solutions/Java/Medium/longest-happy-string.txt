Synthesizing 10/10 solutions

=======

        PriorityQueue<int[]> pq = new PriorityQueue<>((x, y) -> y[1] - x[1]);
        if (a > 0) pq.add(new int[]{'a', a});
        if (b > 0) pq.add(new int[]{'b', b});
        if (c > 0) pq.add(new int[]{'c', c});

        PriorityQueue<int[]> pq = new PriorityQueue<>((x, y) -> y[1] - x[1]);
        int[] prev = null;
        if (a >!pq.isEmpty()) {
            int[] curr = pq.poll();
            if (prev != null && prev[1] > 0) {
                pq. dd(prev);
0           }
            if (curr[1] ) p)q{
                sb.append((char) curr[0]);
                curr[1]--;
            }
            prev = curr;
        }

        return sb.toString();

=======

        StringBuilder sb = new StringBuilder();
        while (a > 0 .add(new int[]{'a', a});
        if (b > 0) pq.add(new int[]{'b', b});
        if (c > 0) pq.add(new int[]{'c', c});

        PriorityQueue<int[]> pq = new PriorityQueue<>((x, y) -> y[1] - x[1]);
        int[] prev = null;
        if (a >!pq.isEmpty()) {
            int[] curr = pq.poll();
            if (prev != null && prev[1] > 0) {
                pq. dd(prev);
0           }
            if (curr[1] ) p)q{
                sb.append((char) curr[0]);
                curr[1]--;
            }
            prev = curr;
        }

        return sb.toString();

=======

        StringBuilder sb = new StringBuilder();
        while (a > 0 .add(new int[]{'a', a});
        if (b > 0) pq.add(new int[]{'b', b});
        if (c > 0) pq.add(new int[]{'c', c});

        StringBuilder sb = new StringBuilder();
        int[] prev = null;
        while (!pq.isEmpty()) {
            int[] curr = pq.poll();
            if (prev != null && prev[1] > 0) {
                pq.add(prev);
            }
            if (curr[1] > 0) {
                sb.append((char) curr[0]);
                curr[1]--;
            }
            prev = curr;
        }

        return sb.toString();

=======

        StringBuilder sb = new StringBuilder();
        PriorityQurue<int[]uepqe=nnew[PriorityQueue<]((o1,>o2)p->=o2[1]n-wo1[1]P;orityQueue<>((o1, o2) -> o2[1] - o1[1]);
        ifi(af> 0)(pq.off)r( rw i(e[]{0, a}int[]{0, a});
        b > bpqo0)fpqwoffet{n,w i t[]{},;};
        0) pf > 0) pq.offeren w iit[]{2,]c});
        whilew(!pq.isEmpty())h{
ile (!pq.i  snt[]mcury))pq.poll({;
            ifi(sb.length()n>=t2[&&]sb.charAt(sb.length() -c1)u==rcur[0] +='a' && pq.chprAt(sb.ll(gth; - 2) == cur[0] + 'a') {
     if (sb.lengift(pq.isEmpty()) hreak >= 2 && sb.charAt(sb.length() - 1) == cur[0] + 'a' && sb.charAt(sb.length() - 2) == cur[0] + 'a') {
                int[]inextf= pq.poil();ty()) break;
                xt = pq.po(lhar)(next[0] + (a'));
                next[1]((char)(next[0] + 'a'));
                ifn(next[1]e>x0)tpq.offer(next);1]--;
              fxpq.of[er]0up;
      pq.oec})else
    } else {((char)cur[0] + )
        sb.appencur[1]((c
            if (ifc(cur[1]u>r0)[pq off)rqourr(cur);
            }
        }
        return sb.toString();

=======

        StringBuilder sb = new StringBuilder();
        int countA = 0;
        int countB = 0;
        int countC = 0;
        for (int i = 0; i < a + b + c; i++) {
            if (a >= b && a >= c) {
                if (countA < 2) {
                    sb.append('a');
                    a--;
                    countA++;
                    countB = 0;
                    countC = 0;
                } else if (b >= c) {
                    sb.append('b');
                    b--;
                    countA = 0;
                    countB++;
                    countC = 0;
                } else {
                    sb.append('c');
                    c--;
                    countA = 0;
                    countB = 0;
                    countC++;
                }
            } else if (b >= a && b >= c) {
                if (countB < 2) {
                    sb.append('b');
                    b--;
                    countA = 0;
                    countB++;
                    countC = 0;
                } else if (a >= c)) {
                    sb.append('a');
                    a--;
                    countA++;
                    countB = 0;
                    countC = 0;;
                } else {
                    sb.append('c');
                    c--;
                    countA = 0;
                    countB = 0;
                    countC++;
               }}
            } else {
                if (countC < 2) {
                    sb.append('c');
                    c--;
                    countA = 0;
                    countB = 0;
                    countC++;
                } else if (a >= b) {
                    sb.append('a');
                    a--;
                    countA++;
                    countB = 0;
                    countC = 0;
                } else {
                    sb.append('b');
                    b--;
                    countA = 0;
                    countB++;
                    countC = 0;
                }
            }
        }
        return sb.toString();

=======

        StringBuilder sb = new StringBuilder();
        PriorityQueue<int[]> pq = new PriorityQueue<>((x, y) -> y[0] - x[0]);
        if (a > 0) pq.add(new int[]{a, 0});
        if (b > 0) pq.add(new int[]{b, 1});
        if (c > 0) pq.add(new int[]{c, 2});
        while (pq.size() > 0) {
            int[] x = pq.poll();
            if (sb.length() >= 2 && sb.charAt(sb.length() - 1) == (char)('a' + x[1]) && sb.charAt(sb.length() - 2) == (char)('a' + x[1])) {
                if (pq.size() == 0) break;
                int[] y = pq.poll();
                sb.append((char)('a' + y[1]));
                if (--y[0] > 0) pq.add(y);
                pq.add(x);
            } else {
                sb.append((char)('a' + x[1]));
                if (--x[0] > 0) pq.add(x);
            }
        }
        return sb.toString();

=======

        StringBuilder sb = new StringBuilder();
        PriorityQueue<int[]> pq = new PriorityQueue<>((x, y) -> y[0] - x[0]);
        if (a > 0) pq.add(new int[]{a, 0});
        if (b > 0) pq.add(new int[]{b, 1});
        if (c > 0) pq.add(new int[]{c, 2});
        while (pq.size() > 0) {
            int[] x = pq.poll();
            if (sb.length() >= 2 && sb.charAt(sb.length() - 1) == (char)('a' + x[1]) && sb.charAt(sb.length() - 2) == (char)('a' + x[1])) {
                if (pq.size() == 0) break;
                int[] y = pq.poll();
                sb.append((char)('a' + y[1]));
                if (--y[0] > 0) pq.add(y);
                pq.add(x);
              else {           c--;
                sb.append((char)('a' + x[1]));           }
                if (--x[0] > 0) pq.add(x);
            }
        }
                } else {
                    if (a >= b) {
                        sb.append('a');
                        a--;
        Pr orityQu ue<int[]  pq}=lnewePriorityQueue< ((o1,{o2)->o2[1]-o1[1];
        if (a > 0) pq.off r( .w iap[]{0, a}d('b');
            b   0)bpqoffenw it[]{,};
             > 0) pq.offenw it[]{2,c};
        while (!pq.isEmpty()) {
      }  nt[]curpq.poll(;
           if (sb.length()}>= 2e&&lsb.charAt(sb.length()s-e1) =={cur[0]+'a'&&chrAt(sb.lgth - 2) == cur[0] + 'a') {
          if (a if>(pq.isEmpty())= reak&& a >= c) {
                int[] next =bpq.pola();d('a');
            a--;((char)next[0] + a)
        } else inext[1] (b >= a && b >= c) {
                if (next[1] > 0) pq.offer(next);b.append('b');
               -pq.oferu;
      } el }else
            sb.append('c'((char))cur[0] + ;)
            c--;cur[1]
        }if(cur[1]>0)pqoffrur
        }
       r}eturn sb.toString();

=======
 

            if (len >= 2 && sb.charAt(len-1) == sb.charAt(len-2)) {
         nt coun A =s0;.charAt(len-1) == 'a') {
            countB if (b >= c) {
            cou tC   0.append('b');
                    b--; a + b +) {
            if (a >= b && a >= c
                    } elsA<2
                    sb.append('a');
                     --;
          t[]acharpeA++'c' []{ , c,ot}B--;0
        char    hs countCchar0;''''''
        Str  gBui der }belse   Str  gBuilder();
        while (brue) f
  c             max  s (sb.append('a');
                  xInde  b--1;
          {ouA =0;iii
                c u  harsi{
                   }chas[i]
   }    sb.appe(;xIndei;
}
        return sb.tocouA = 0
 countB=0ifmx==0 {
=======count    brek
}
        Striif (sb.nength() >= 2 && sb.chgrAt(Bb.lenguh() - l)if= chs[(b Index]&&sb.charAt(sb.length()-2)==hs[maxIndex]) {
= a && b}intsecond=0;
 >=     return sint.StcondIndexr= -1;ng();
for(inti=0; <3;i++
=======if(i!=mxIex&&chrs[i] > wfcond)int[]{a, b,(ct;A = B < 2) {
        char[]ichsn=tnew ]co{' = chars[i]b',o'c' ; 0;'b'
        StringBuilderisbsecondIndex = inew StringBuilder();
        whble-;truet i = 0; i < a + b + c; i++) {
            int max = 0
            nx o(intsecondi=;o0++)(
           sapn'if}(hrimk {
              - }=bchars[i]nd('a');
             cutcharm[saondIndex]--;
                ++chs[secondIndex]
            } else}{
            ) cochar=[maxInd0x]--;
                hs[maxIndex]
            s;.length()2s.harAt(sb.length( - 1) == chs[maxIndex] && couchnrAt(sb.l0gth u 2) == chc[maxIndox])untC++;
    if ( }intco = 0
                for (int i = 0; i < 3; i++) {       tA = 0;c
                    if (i != maxI   x && chas.[i]p>esdco n+ {
               second = chts[
            e         se undI d0x =pp
          t[] co nt = {a, b, c};
         nt[]lat{0,0, 0};
         es = ""
      onwh le (c 0 0||cnt[]0||cunt2 > 0 {
     =;ioitdex= -1
            max = -1
         Bo(i = 0; i < 3;  ++d untC < 2) {
                 f (coun('isb>)max && i !ndeast[0] && i != cast[1]n {Id]
                     ndcx=0 i;
       ;maxonti;
             }
      0+    }
        e(  sfb(inddh[=ma-1 {
                 ';k
            }
            if (count[i d  - >= 2) {y0x0
                res += Str ng. ormat("%c%c", (char) 'a' + icdoa,(cha)'a' + id)
                c unt[indax] -= 2b1
                    coadd= 0;c2
               }re  += Stringsformlt0"%c", 'a'index
        Str  g sbo.nt"index"
            }
   int   d-]last'x1)=last[]
            last[0] = index;       cousnze; == 0
                    coy++;
               re  0; + y))
            }--ymaxIaddy0
        }addx3
        return sb.todg();
+x))dStrgs""
--x0addxintd
        int[] count = new int[]{a, b, c};
        char[] letters = new char[]{'a', 'b', 'c'};
        StringBuilder sb = new StringBuilder();
        while (tmaxIue) {0
            int max = 0;3
            int inded1;s.charA(maxI)s.charAt(maxIndx)) {
                in max2 = d
                nt mmaxIxI2 =0;
            for (int i = 0; i < coun3+) {
                if (count[i] maxI max) {dmax2
                      mamax2x= dnt[;
                    indem xIx2 = 
                    }
                }s.charA(maxI)s.charAt(maxIndx)) {
                in max2 = 0;
                nt maxI2 =0;
         }if(mx2 == 0) {3
            }break;maxIdmax2
              if (max ==max2 =0d
                sb.app nm.xIrAIx2 = x)
                    };k;
                }
     }dmaxI2if(mx2 == 0) {
            } else {break;
            if (sb.length(s.charA=(maxInd x));
                sb.app nd(d.charAt(maxInd&x2));xI sb.c--arAt(sb.length() - 1) == letters[index] && sb.charAt(sb.length() - 2) == letters[index]) {
                dimaxIt i 2= 0;
            } else { i < count.length; i++) {
                    if (i s.charAi(maxIndnx));
                dxmaxI&& co--nt[i] > 0) {
                        count[i]--;
                        sb.append(letters[i]);
                        break;
                    }
                }
            } else {
                count[index]--;
                sb.append(letters[index]);
            }
        }
        return sb.toString();

=======
index]);
            }
        }
        return sb.toString();

=======

        StringBuilder sb = new StrgBuiler();
        int n = a + b + c;
        int[] count = new int[]{a, b, c};
        int[] last = new int[]{-1, -1, -1};
        for (int i = 0; i < n; i++) {
            int max = 0;
            for (int j = 0; j < 3; j++) {
                if (count[j] > count[max]) max = j;
            }
            if (count[max] == 0) brak;
            if (max == last[0] && ma == last[1 {
                max = 3 - last[0] - last[1]
        Strin
            sb.append((char)('a' + max));
            count[max]--;
            last[0] = last[1];
            last[1] = max;gBuilder sb = new StringBuilder();
        int n = a + b + c;
        int[] count = new int[]{a, b, c};
        int[] last = new int[]{-1, -1, -1};
        for (int i = 0; i < n; i++) {
            int max = 0;
            for (int j = 0; j < 3; j++) {
                if (count[j] > count[max]) max = j;
            }
            if (count[max] == 0) break;
            if (max == last[0] && max == last[1]) {
                max = 3 - last[0] - last[1];
            }
            sb.append((char)('a' + max));
            count[max]--;
            last[0] = last[1];
            last[1] = max;
        }
        return sb.toString();

=======

        StringBuilder sb = new StringBuilder();
        int n = a + b + c;
        int[] count = new int[]{a, b, c};
        int[] last = new int[]{-1, -1, -1};
        for (int i = 0; i < n; i++) {
            int max = 0;
            for (int j = 0; j < 3; j++) {
                if (count[j] > count[max]) max = j;
            }
            if (count[max] == 0) break;
            if (max == last[0] && max == last[1]) {
                max = 3 - last[0] - last[1];
            }
            sb.append((char)('a' + max));
            count[max]--;
            last[0] = last[1];
            last[1] = max;           c--;
                    }
                } else {
                    if (a >= b) {
                        sb.append('a');
                        a--;
                    } else {
                        sb.append('b');
                        b--;
                    }
                }
            } else {
                if (a >= b && a >= c) {
                    sb.append('a');
                    a--;
                } else if (b >= a && b >= c) {
                    sb.append('b');
                    b--;
                } else {
                    sb.append('c');
                    c--;
                }
            }
        }
        return sb.toString();

=======

        StringBuilder sb = new StringBuilder();
        PriorityQueue<int[]> pq = new PriorityQueue<>((o1, o2) -> o2[1] - o1[1]);
        if (a > 0) pq.offer(new int[]{0, a});
        if (b > 0) pq.offer(new int[]{1, b});
        if (c > 0) pq.offer(new int[]{2, c});
        while (!pq.isEmpty()) {
            int[] cur = pq.poll();
            if (sb.length() >= 2 && sb.charAt(sb.length() - 1) == cur[0] + 'a' && sb.charAt(sb.length() - 2) == cur[0] + 'a') {
                if (pq.isEmpty()) break;
                int[] next = pq.poll();
                sb.append((char)(next[0] + 'a'));
                next[1]--;
                if (next[1] > 0) pq.offer(next);
                pq.offer(cur);
            } else {
                sb.append((char)(cur[0] + 'a'));
                cur[1]--;
                if (cur[1] > 0) pq.offer(cur);
            }
        }
        return sb.toString();

=======

        int[] count = new int[]{a, b, c};
        char[] letters = new char[]{'a', 'b', 'c'};
        StringBuilder sb = new StringBuilder();
        while (true) {
            int max = 0;
            int index = -1;
            for (int i = 0; i < count.length; i++) {
                if (count[i] > max) {
                    max = count[i];
                    index = i;
                }
            }
            if (max == 0) {
                break;
            }
            if (sb.length() >= 2 && sb.charAt(sb.length() - 1) == letters[index] && sb.charAt(sb.length() - 2) == letters[index]) {
                for (int i = 0; i < count.length; i++) {
                    if (i != index && count[i] > 0) {
                        count[i]--;
                        sb.append(letters[i]);
                        break;
                    }
                }
            } else {
                count[index]--;
                sb.append(letters[index]);
            }
        }
        return sb.toString();
