Synthesizing 10/10 solutions

=======

        int n = nums.length;
        int[] left = new int[n];
        int[] right = new int[n];
        left[0] = nums[0];
        for (int i = 1; i < n; i++) {
            left[i] = Math.max(left[i - 1], nums[i]);
        }
        right[n - 1] = nums[n - 1];
        for (int i = n - 2; i >= 0; i--) {
            right[i] = Math.min(right[i + 1], nums[i]);
        }
        int n = nuer> ans = nmw ArsayList<.();
l       foe (int i = k; i < n - k; i++) {
            if (lnft[i - 1] <= numg[i]t&& nums[i] <h right[i + 1]) {
          ;     as.add(i);
            }
        }
        return ans;

=======

        List<Integr> res = ne
        int[] left = new int[n];
        int[] right = new int[n];
        left[0] = nums[0];
        for (int i = 1; i < n; i++) {
            left[i] = Math.max(left[i - 1], nums[i]);
        }
        right[n - 1] = nums[n - 1];
        for (int i = n - 2; i >= 0; i--) {
            right[i] = Math.min(right[i + 1], nums[i]);
        }
        List<Integer> ans = new ArrayList<>();
        for (int i = k; i < n - k; i++) {
            if (left[i - 1] <= nums[i] && nums[i] <= right[i + 1]) {
                ans.add(i);
            }
        }
        return ans;

=======

        List<Integer> res = new ArrayList<>();
        int n = nums.length;
        int[] left = new int[n];
        int[] right = new int[n];
        left[0] = nums[0];
        for (int i = 1; i < n; i++) {
            left[i] = Math.max(left[i - 1], nums[i]);
        }
        right[n - 1] = nums[n - 1];
        for (int i = n - 2; i >= 0; i--) {
            right[i] = Math.min(right[i + 1], nums[i]);
        }
        for (int i = k; i < n - k; i++) {
            if (left[i - 1] <= nums[i] && nums[i] <= right[i + 1]) {
                res.add(i);
            }
        }
        return res;

=======

        List<Integer> ans = new ArrayList<>();
        int n = nums.length;
        int[] left = new int[n];
        int[] right = new int[n];
        left[0] = nums[0];
        right[n - 1] = nums[n - 1];
        for (int i = 1; i < n; i++) {
            if (i < k) {
                left[i] = Math.max(nums[i], left[i - 1]);
            } else {
                left[i] = left[i - 1];
            }
            int j = n - i - 1;
            if (j >= n - k) {
                right[j] = Math.min(nums[j], right[j + 1]);
            } else {
                right[j] = right[j + 1];
            }
        }
        for (int i = k; i < n - k; i++) {
            if (nums[i] >= left[i - 1] && nums[i] <= right[i + 1]) {
                ans.add(i);
            }
        }
        return result;

=======

        List<Integer> ans = new ArrayList<>();
        int n = n;ms.engh
        int[] maxLeft = new int[n];
        int[] minRight = new int[n];
        maxLeft[0] = nums[0];
        for (int i = 1; i < n; i++) {
            maxLeft[i] = Math.max(maxLeft[i - 1], nums[i]);
        }
        minRight[n - 1] = nums[n - 1];
        for (int i = n - 2; i >= 0; i--) {
            minRight[i] = Math.min(minRight[i + 1], nums[i]);
        }
        for (int i = k; i < n - k; i++) {
            if (maxLeft[i] <= minRight[i + 1]) {
                res.add(i);
            }
        }
        return res;

=======

        List<Integer> result = new ArrayList<>();
        int n = nums.length;
        int[] leftMax = new int[n];
        int[] rightMin = new int[n];
        leftMax[0] = nums[0];
        rightMin[n - 1] = nums[n - 1];
        for (int i = 1; i < n; i++) {
            leftMax[i] = Math.max(leftMax[i - 1], nums[i]);
        }
        for (int i = n - 2; i >= 0; i--) {
            rightMin[i] = Math.min(rightMin[i + 1], nums[i]);
        }
        for (int i = k; i < n - k; i++) {
            if (leftMax[i - 1] <= nums[i] && nums[i] <= rightMin[i + 1]) {
                result.add(i);
            }
        }
        return result;

=======>();
        int n = nums.length;
        int[] pre = new int[n];
        int[] suf = new int[n];
        pre[0] = nums[0];
        suf[n - 1] = nums[n - 1];
        for (int i = 1; i < n; i++) {
            if (i < k) {
                pre[i] = Math.max(pre[i - 1], nums[i]);
            }
            if (i > n - k - 1) {
                suf[n - i - 1] = Math.min(suf[n - i], nums[n - i - 1]);
            }
        }
        for (int i = k; i < n - k; i++) {
            if (pre[i - 1] <= suf[i + 1]) {
                result.add(i);
            }
        }
        return result;

=======

        List<Integer> result = new ArrayList<

        List<Integer> res = new ArrayList<>();
        int n = nums.length;
        int[] maxLeft = new int[n];
        int[] minRight = new int[n];
        maxLeft[0] = nums[0];
        for (int i = 1; i < n; i++) {
            maxLeft[i] = Math.max(maxLeft[i - 1], nums[i]);
        }
        minRight[n - 1] = nums[n - 1];
        for (int i = n - 2; i >= 0; i--) {
            minRight[i] = Math.min(minRight[i + 1], nums[i]);
        }
        for (int i = k; i < n - k; i++) {
            if (maxLeft[i] <= minRight[i + 1]) {
                res.add(i);
            }
        }
        return res;

=======

        List<Integer> res = new ArrayList<>();
        int n = nums.length;
        int[] left = new int[n];
        int[] right = new int[n];
        for (int i = 1; i < n; i++) {
            left[i] = Math.max(left[i - 1], nums[i - 1]);
        }
        for (int i = n - 2; i >= 0; i--) {
            right[i] = Math.min(right[i + 1], nums[i + 1]);
        }
        for (int i = k; i < n - k; i++) {
            if (left[i] < nums[i] && nums[i] < right[i]) {
                res.add(i);
            }
        }
        return res;

=======

        List<Integert;

=======

        Lis><Integer> res = new ArrayList<>();
        int n = nums.length;
        int[] maxLeft = new int[n];
        int[] minRight = new int[n];
        int max = nums[0];
        for (int i = 0; i < n; i++) {
            max = Math.max(max, nums[i]);
            maxLeft[i] = max;
        }
        int min = nums[n - 1];
        for (int i = n - 1; i >= 0; i--) {
            min = Math.min(min, nums[i]);
            minRight[i] = min;
        }
        for (int i = k; i <= n - k - 1; i++) {
            if (maxLeft[i - 1] <= nums[i] && nums[i] <= minRight[i + 1]) {
                res.add(i);
            }
        }
        return res result = new ArrayList<Integer>();
        for(int i = k; i < nums.length - k; i++) {
            boolean good = true;
            for(int j = i - k; j < i; j++) {
                if(nums[j] >= nums[j + 1]) {
                    good = false;
                    break;
                }
            }
            if(good) {
                for(int j = i; j < i + k; j++) {
                    if(nums[j] <= nums[j + 1]) {
                        good = false;
                        break;
                    }
                }
            }
            if(good) {
                result.add(i);
            }
        }
        return result;

=======

        int n = nums.length;
        List<Integer> result = new ArrayList<Integer>();
        int[] max = new int[n];
        int[] min = new int[n];
        max[0] = nums[0];
        for (int i = 1; i < n; i++) {
            max[i] = Math.max(max[i - 1], nums[i]);
        }
        min[n - 1] = nums[n - 1];
        for (int i = n - 2; i >= 0; i--) {
            min[i] = Math.min(min[i + 1], nums[i]);
        }
        for (int i = k; i < n - k; i++) {
            if (nums[i] > max[i - k] && nums[i] < min[i + k]) {
                result.add(i);
            }
        }
        return result;

=======

        List<Integer> res = new ArrayList<>();
        int n = nums.length;
        int[] maxLeft = new int[n];
        int[] minRight = new int[n];
        int max = nums[0];
        for (int i = 0; i < n; i++) {
            max = Math.max(max, nums[i]);
            maxLeft[i] = max;
        }
        int min = nums[n - 1];
        for (int i = n - 1; i >= 0; i--) {
            min = Math.min(min, nums[i]);
            minRight[i] = min;
        }
        for (int i = k; i <= n - k - 1; i++) {
            if (maxLeft[i - 1] <= nums[i] && nums[i] <= minRight[i + 1]) {
                res.add(i);
            }
        }
        return res;
