Synthesizing 10/10 solutions

=======

        int n = hamsters.length();
        int h = 0;
        for (int i = 0; i < n; i++) {
            if (hamsters.charAt(i) == 'H') {
                h++;
            }
        }
        int res = 0;
        int left = 0;
        int right = 0;
        for (int i = 0; i < n; i++) {
            if (hamsters.charAt(i) == 'H') {
                if (left == 0 && right == 0) {
                    left = 1;
                    right = 1;
                } else if (left == 0) {
                    left = right;
                    right = 1;
                } else if (right == 0) {
                    right = left;
                    left = 1;
                } else {
                    left = 1;
                    right = 1;
                }
            } else {
                if (left == 0 && right == 0) {
                    left = 1;
                    right = 1;
                } else if (left == 0) {
                    left = right;
                    right = 0;
                } else if (right == 0) {
                    right = left;
                    left = 0;
                } else {
                    left = 0;
                    right = 0;
                }
            }
            res += left + right;
        }
        if (h == 0) {
            return 0;
        }
        if (res < h) {
            return -1;
        }
        return res;

=======

        int n = hamsters.length();
        int left = 0, right = 0;
        for (int i = 0; i < n; i++) {
            if (hamsters.charAt(i) == 'H') {
                if (i > 0 && hamsters.charAt(i - 1) == '.') {
                    left++;
                }
                if (i < n - 1 && hamsters.charAt(i + 1) == '.') {
                    right++;
                }
            }
        }
        if (left == 0 && right == 0) {
            return 0;
        }
        if (left == 0 || right == 0) {
            return 1;
        }
        return 2;

=======

        int n = hamsters.length();
        int left = 0, right = 0;
        for (int i = 0; i < n; i++) {
            if (hamsters.charAt(i) == 'H') {
                if (i == 0) {
                    right++;
                } else if (i == n - 1) {
                    left++;
                } else {
                    left++;
                    right++;
                }
            }
        }
        if (left > 0 && right > 0) {
            return -1;
        } else {
            return Math.max(left, right);
        }

=======

        int n = hamsters.length();
        int ans = 0;
        int cnt = 0;
        for (int i = 0; i < n; i++) {
            if (hamsters.charAt(i) == 'H') {
                if (cnt == 0) {
                    ans++;
                }
                cnt = 2;
            } else {
                cnt--;
            }
        }
        return cnt > 0 ? -1 : ans;

=======

        int n = hamsters.length();
        int[] left = new int[n];
        int[] right = new int[n];
        int count = 0;
        for (int i = 0; i < n; i++) {
            if (hamsters.charAt(i) == 'H') {
                count++;
                left[i] = 1;
            }
        }
        for (int i = n - 1; i >= 0; i--) {
            if (hamsters.charAt(i) == 'H') {
                right[i] = 1;
            }
        }
        for (int i = 1; i < n; i++) {
            left[i] += left[i - 1];
        }
        for (int i = n - 2; i >= 0; i--) {
            right[i] += right[i + 1];
        }
        int ans = Integer.MAX_VALUE;
        for (int i = 0; i < n; i++) {
            if (hamsters.charAt(i) == '.') {
                ans = Math.min(ans, left[i] + right[i]);
            }
        }
        if (ans == Integer.MAX_VALUE) {
            return -1;
        }
        return count - ans;

=======

        int count = 0;
        int h = 0;
        for (int i = 0; i < hamsters.length(); i++) {
            if (hamsters.charAt(i) == 'H') {
                h++;
                if (i == 0 || hamsters.charAt(i - 1) == '.') {
                    count++;
                }
            }
        }
        if (hamsters.charAt(hamsters.length() - 1) == 'H') {
            count++;
        }
        return count <= h ? count : -1;

=======

        int n = hamsters.length();
        int[] dp = new int[n];
        int count = 0;
        for (int i = 0; i < n; i++) {
            if (hamsters.charAt(i) == 'H') {
                count++;
                if (i > 0 && dp[i - 1] > 0) {
                    dp[i] = dp[i - 1] - 1;
                } else {
                    dp[i] = 1;
                }
            } else {
                if (i > 0) {
                    dp[i] = dp[i - 1];
                }
            }
        }
        for (int i = n - 1; i >= 0; i--) {
            if (hamsters.charAt(i) == 'H') {
                if (i < n - 1 && dp[i + 1] > 0) {
                    dp[i] = Math.max(0, dp[i + 1] - 1);
                } else {
                    dp[i] = Math.max(0, dp[i] - 1);
                }
            }
        }
        int res = 0;
        for (int i = 0; i < n; i++) {
            if (hamsters.charAt(i) == 'H' && dp[i] == 0) {
                return -1;
            }
            res += dp[i];
        }
        return res;

=======

        int n = hamsters.length();
        int[] dp = new int[n];
        Arrays.fill(dp, -1);
        int res = 0;
        for (int i = 0; i < n; i++) {
            if (hamsters.charAt(i) == 'H') {
                if (i > 0 && dp[i - 1] != -1) {
                    dp[i] = dp[i - 1];
                } else {
                    dp[i] = res++;
                }
            }
        }
        for (int i = n - 1; i >= 0; i--) {
            if (hamsters.charAt(i) == 'H') {
                if (i < n - 1 && dp[i + 1] != -1) {
                    if (dp[i] != -1 && dp[i] != dp[i + 1]) {
                        return -1;
                    }
                    dp[i] = dp[i + 1];
                } else {
                    if (dp[i] != -1) {
                        return -1;
                    }
                    dp[i] = res++;
                }
            }
        }
        return res;

=======

        int count = 0;
        int left = 0;
        int right = 0;
        while (left < hamsters.length()) {
            while (left < hamsters.length() && hamsters.charAt(left) == 'H') {
                left++;
            }
            right = left;
            while (right < hamsters.length() && hamsters.charAt(right) == '.') {
                right++;
            }
            if (left == 0 && right == hamsters.length()) {
                return -1;
            }
            if (left == 0 || right == hamsters.length()) {
                count++;
            } else {
                count += (right - left + 1) / 3;
            }
            left = right;
        }
        return count;

=======

        int[] dp = new int[hamsters.length()];
        int[] dp2 = new int[hamsters.length()];
        int[] dp3 = new int[hamsters.length()];
        int[] dp4 = new int[hamsters.length()];
        int[] dp5 = new int[hamsters.length()];
        int[] dp6 = new int[hamsters.length()];
        int[] dp7 = new int[hamsters.length()];
        int[] dp8 = new int[hamsters.length()];
        int[] dp9 = new int[hamsters.length()];
        int[] dp10 = new int[hamsters.length()];
        int[] dp11 = new int[hamsters.length()];
        int[] dp12 = new int[hamsters.length()];
        int[] dp13 = new int[hamsters.length()];
        int[] dp14 = new int[hamsters.length()];
        int[] dp15 = new int[hamsters.length()];
        int[] dp16 = new int[hamsters.length()];
        int[] dp17 = new int[hamsters.length()];
        int[] dp18 = new int[hamsters.length()];
        int[] dp19 = new int[hamsters.length()];
        int[] dp20 = new int[hamsters.length()];
        int[] dp21 = new int[hamsters.length()];
        int[] dp22 = new int[hamsters.length()];
        int[] dp23 = new int[hamsters.length()];
        int[] dp24 = new int[hamsters.length()];
        int[] dp25 = new int[hamsters.length()];
        int[] dp26 = new int[hamsters.length()];
        int[] dp27 = new int[hamsters.length()];
        int[] dp28 = new int[hamsters.length()];
        int[] dp29 = new int[hamsters.length()];
        int[] dp30 = new int[hamsters.length()];
        
        Arrays.fill(dp, Integer.MAX_VALUE);
        Arrays.fill(dp2, Integer.MAX_VALUE);
        Arrays.fill(dp3, Integer.MAX_VALUE);
        Arrays.fill(dp4, Integer.MAX_VALUE);
        Arrays.fill(dp5, Integer.MAX_VALUE);
        Arrays.fill(dp6, Integer.MAX_VALUE);
        Arrays.fill(dp7, Integer.MAX_VALUE);
        Arrays.fill(dp8, Integer.MAX_VALUE);
        Arrays.fill(dp9, Integer.MAX_VALUE);
        Arrays.fill(dp10, Integer.MAX_VALUE);
        Arrays.fill(dp11, Integer.MAX_VALUE);
