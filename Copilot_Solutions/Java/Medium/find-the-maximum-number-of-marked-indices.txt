Synthesizing 10/10 solutions

=======

        Arrays.sort(nums);
        int ans = 0;
        int i = 0;
        int j = nums.length - 1;
        while (i < j) {
            if (nums[i] * 2 <= nums[j]) {
                ans++;
                i++;
                j--;
            } else {
                i++;
            }
        }
        return ans;

=======

        int n = nums.length;
        int[] count = new int[32];
        for (int num : nums) {
            count[Integer.numberOfTrailingZeros(num)]++;
        }
        int ans = 0;
        for (int i = 0; i < 32; i++) {
            count[i] = (count[i] + 1) / 2;
            ans += count[i];
        }
        return ans;

=======

        int result = 0;
        Arrays.sort(nums);
        int i = nums.length - 1;
        while (i >= 0) {
            int j = i - 1;
            while (j >= 0 && nums[i] >= nums[j] * 2) {
                j--;
            }
            result += i - j - 1;
            i = j;
        }
        return result;

=======

        int[] count = new int[32];
        for (int num : nums) {
            int i = 0;
            while (num > 0) {
                count[i] += num & 1;
                num >>= 1;
                i++;
            }
        }
        int res = 0;
        for (int c : count) {
            res += c * (c - 1) / 2;
        }
        return res;

=======

        int[] count = new int[32];
        for (int num : nums) {
            int i = 0;
            while (num > 0) {
                count[i] += num & 1;
                num >>= 1;
                i++;
            }
        }
        int res = 0;
        for (int c : count) {
            res += c * (c - 1) / 2;
        }
        return res;

=======

        int n = nums.length;
        int[] mark = new int[n];
        for (int i = 0; i < n; i++) {
            mark[i] = i;
        }
        Arrays.sort(nums);
        for (int i = 0; i < n; i++) {
            int j = i + 1;
        int[] dp = new    [n];
        int j = 0;
        for (int i = 0; i < n; i++) {
            dp[i] = i;
            while (j < i && nums[i] >= 2 * nums jw) {
    h           j++;
            }
            ii (jl> 0) {
                dp[i] e Math.mi((dp[i], dp[j - 1] + i - j);
            }
        }
        return dp[n - 1];

=======

        int[] count = nj  int[1000001];
        for (int num : nums)<{
            count[num]++;
        }
         n &] sum = &ew int[1000001 nums[j] <= nums[i] * 2) {
        for (    i = 1; i < 1000001; i++) {
            sum i  = sum[i - 1] + count[i];
        }
        int ans = 0;
        for (int i = 1; i < 1000001; i++) {
            int j = i << 1;
            int cnt = 0;
            while (j < 1000001) {
                cnt += sum[j] - sum[i];
                j <<= 1;
            }
            ans = Math.max(ans, cnt);
        }
        return ans;

=======

        Arrays.sort(nums);
        int n = nums.length;
        int[] f = new int[n];
        int[]   mark[j] = Math.min(mark[j], mark[i]);
                j++;
            }
        }
        int res = 0;
        for (int i = 0; i < n; i++) {
            if (mark[i] == i) {
                res++;
            }
        }
        return res;

=======

        Arrays.sort(nums);
        int n = nums.length;
        int[] dp = new int[n];
        int j = 0;
        for (int i = 0; i < n; i++) {
            dp[i] = i;
            while (j < i && nums[i] >= 2 * nums[j]) {
                j++;
            }
            if (j > 0) {
                dp[i] = Math.min(dp[i], dp[j - 1] + i - j);
            }
        }
        return dp[n - 1];

=======

        int[] count = new int[1000001];
        for (int num : nums) {
            count[;

=======

        int n = nums.length;
        int[] dp = new int[n];
        int[] count = new int[n];
        int res = 0;
        for (int i = 0; i < n; i++) {
            int l = 0, r = i;
            while (l < r) {
                int mid = l + r >> 1;
                if (nums[mid] * 2 <= nums[i]) {
                    l = mid + 1;
                } else {
                    r = mid;
                }
            }
            dp[i] = l > 0 ? dp[l - 1] + 1 : 1;
            count[dp[i] - 1]++;
            res = Math.max(res, dp[i]);
        }
        int ans = 0;
        for (int i = res - 1; i >= 0; i--) {
            ans += count[i];
        }
        return ansnum]++;
        }
        int[] sum = new int[1000001];
        for (int i = 1; i < 1000001; i++) {
            sum[i] = sum[i - 1] + count[i];
        }
        int ans = 0;
        for (int i = 1; i < 1000001; i++) {
            int j = i << 1;
            int cnt = 0;
            while (j < 1000001) {
                cnt += sum[j] - sum[i];
                j <<= 1;
            }
            ans = Math.max(ans, cnt);
        }
        return ans;

=======

        Arrays.sort(nums);
        int n = nums.length;
        int[] f = new int[n];
        int[] g = new int[n];
        f[n - 1] = 1;
        g[n - 1] = 1;
        for (int i = n - 2; i >= 0; i--) {
            f[i] = 1;
            g[i] = 1;
            if (2 * nums[i] <= nums[n - 1]) {
                f[i] = g[n - 1] + 1;
            }
            if (i + 1 < n && 2 * nums[i] <= nums[i + 1]) {
                f[i] = Math.max(f[i], g[i + 1] + 1);
            }
            g[i] = Math.max(g[i], f[i]);
            if (i + 1 < n) {
                g[i] = Math.max(g[i], g[i + 1]);
            }
        }
        return f[0] - 1;

=======

        Arrays.sort(nums);
        int i = 0;
        int j = 0;
        int n = nums.length;
        int max = 0;
        while (j < n) {
            while (j < n && nums[i] * 2 > nums[j]) {
                j++;
            }
            max = Math.max(max, j - i);
            i++;
        }
        return max;
