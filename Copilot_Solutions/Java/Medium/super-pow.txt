Synthesizing 10/10 solutions

=======

        int result = 1;
        for (int i = 0; i < b.length; i++) {
            result = pow(result, 10) * pow(a, b[i]) % 1337;
        }
        return result;

=======

        int ans = 1;
        for (int i = 0; i < b.length; i++) {
            ans = pow(ans, 10) * pow(a, b[i]) % 1337;
        }
        return ans;
    }
    private int pow(int a, int k) {
        a %= 1337;
        int ans = 1;
        for (int i = 0; i < k; i++) {
            ans = (ans * a) % 1337;
        }
        return ans;

=======

        int res = 1;
        for (int i : b) {
            res = pow(res, 10) * pow(a, i) % 1337;
        }
        return res;
    }
    private int pow(int a, int k) {
        a %= 1337;
        int res = 1;
        for (int i = 0; i < k; i++) {
            res = res * a % 1337;
        }
        return res;

=======

        if (a == 0) {
            return 0;
        } else if (a == 1) {
            return 1;
        } else if (b.length == 0) {
            return 1;
        } else if (b.length == 1 && b[0] == 0) {
            return 1;
        }
        int result = 1;
        for (int i = 0; i < b.length; i++) {
            result = powmod(result, 10) * powmod(a, b[i]) % 1337;
        }
        return result;
    }

    private int powmod(int a, int k) {
        a %= 1337;
        int result = 1;
        for (int i = 0; i < k; i++) {
            result = (result * a) % 1337;
        }
        return result;

=======

        return superPow(a, b, b.length);
    }
    
    private int superPow(int a, int[] b, int n) {
        if (n == 0) {
            return 1;
        }
        int last = b[n - 1];
        int part1 = myPow(a, last);
        int part2 = myPow(superPow(a, b, n - 1), 10);
        return (part1 * part2) % 1337;
    }
    
    private int myPow(int a, int k) {
        a %= 1337;
        int res = 1;
        for (int i = 0; i < k; i++) {
            res = (res * a) % 1337;
        }
        return res;

=======

        if (a == 0) {
            return 0;
        }
        if (b.length == 0) {
            return 1;
        }
        int lastDigit = b[b.length - 1];
        int[] newB = new int[b.length - 1];
        for (int i = 0; i < b.length - 1; i++) {
            newB[i] = b[i];
        }
        return pow(a, lastDigit) * pow(superPow(a, newB), 10) % 1337;
    }
    
    public int pow(int a, int b) {
        if (b == 0) {
            return 1;
        }
        a %= 1337;
        int ans = 1;
        for (int i = 0; i < b; i++) {
            ans *= a;
            ans %= 1337;
        }
        return ans;

=======

        if (a == 1) return 1;
        if (a == 2) return (b[b.length - 1] & 1) == 0 ? 6 : 2;
        if (a == 3) return (b[b.length - 1] & 1) == 0 ? 1 : 3;
        if (a == 4) return (b[b.length - 1] & 1) == 0 ? 6 : 4;
        if (a == 5) return 5;
        if (a == 6) return 6;
        if (a == 7) return (b[b.length - 1] & 1) == 0 ? 1 : 7;
        if (a == 8) return (b[b.length - 1] & 1) == 0 ? 6 : 8;
        if (a == 9) return (b[b.length - 1] & 1) == 0 ? 1 : 9;
        return 0;

=======

        int[] pow = new int[10];
        pow[0] = 1;
        for (int i = 1; i < 10; i++) {
            pow[i] = pow[i - 1] * a % 1337;
        }
        int res = 1;
        for (int i = 0; i < b.length; i++) {
            res = pow[res % 10] * pow[b[i]] % 1337;
        }
        return res;

=======

        if (a == 0) return 0;
        if (a == 1) return 1;
        if (a == 2) return 6 - b[b.length - 1] % 4 * 2;
        if (a == 3) return 1 + b[b.length - 1] % 2 * 2;
        if (a == 4) return 6 - b[b.length - 1] % 2 * 4;
        if (a == 5) return 5;
        if (a == 6) return 6;
        if (a == 7) return 1 + b[b.length - 1] % 4 * 6;
        if (a == 8) return 6;
        if (a == 9) return 1 + b[b.length - 1] % 2 * 8;
        return 0;

=======

        if (a == 1) return 1;
        if (a == 2) return ((b[b.length - 1] & 1) == 1) ? 2 : 6;
        int mod = 1337;
        int ans = 1;
        for (int i = 0; i < b.length; i++) {
            ans = pow(ans, 10, mod) * pow(a, b[i], mod) % mod;
        }
        return ans;
