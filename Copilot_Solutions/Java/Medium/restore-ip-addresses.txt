Synthesizing 10/10 solutions

=======

        List<String> result = new ArrayList<String>();
        int n = s.length();
        for (int i = 1; i < 4 && i < n - 2; i++) {
            for (int j = i + 1; j < i + 4 && j < n - 1; j++) {
                for (int k = j + 1; k < j + 4 && k < n; k++) {
                    String s1 = s.substring(0, i);
                    String s2 = s.substring(i, j);
                    String s3 = s.substring(j, k);
                    String s4 = s.substring(k, n);
                    if (isValid(s1) && isValid(s2) && isValid(s3) && isValid(s4)) {
                        result.add(s1 + "." + s2 + "." + s3 + "." + s4);
                    }
                }
            }
        }
        return result;
    }
    
    private boolean isValid(String s) {
        if (s.length() > 3 || s.length() == 0 || (s.charAt(0) == '0' && s.length() > 1) || Integer.parseInt(s) > 255) {
            return false;
        }
        return true;

=======

        List<String> ans = new ArrayList<>();
        int n = s.length();
        for (int i = 1; i < 4 && i < n - 2; i++) {
            for (int j = i + 1; j < i + 4 && j < n - 1; j++) {
                for (int k = j + 1; k < j + 4 && k < n; k++) {
                    String s1 = s.substring(0, i), s2 = s.substring(i, j),
                           s3 = s.substring(j, k), s4 = s.substring(k, n);
                    if (isValid(s1) && isValid(s2) && isValid(s3) && isValid(s4)) {
                        ans.add(s1 + "." + s2 + "." + s3 + "." + s4);
                    }
                }
            }
        }
        return ans;
    }
    
    public boolean isValid(String s) {
        if (s.length() > 3 || s.length() == 0 || (s.charAt(0) == '0' && s.length() > 1) || Integer.parseInt(s) > 255) {
            return false;
        }
        return true;

=======

        List<String> result = new ArrayList<>();
        for (int i = 0; i < 3; i++) {
            for (int j = i + 1; j < i + 4; j++) {
                for (int k = j + 1; k < j + 4; k++) {
                    if (k >= s.length()) {
                        break;
                    }
                    String s1 = s.substring(0, i + 1);
                    String s2 = s.substring(i + 1, j + 1);
                    String s3 = s.substring(j + 1, k + 1);
                    String s4 = s.substring(k + 1);
                    if (isValid(s1) && isValid(s2) && isValid(s3) && isValid(s4)) {
                        result.add(s1 + "." + s2 + "." + s3 + "." + s4);
                    }
                }
            }
        }
        return result;
    }

    private boolean isValid(String s) {
        if (s.length() > 3 || s.length() == 0 || (s.charAt(0) == '0' && s.length() > 1) || Integer.parseInt(s) > 255) {
            return false;
        }
        return true;

=======

        List<String> ans = new ArrayList<>();
        if (s.length() < 4 || s.length() > 12) {
            return ans;
        }
        for (int i = 1; i < 4; i++) {
            for (int j = i + 1; j < i + 4 && j < s.length(); j++) {
                for (int k = j + 1; k < j + 4 && k < s.length(); k++) {
                    String a = s.substring(0, i);
                    String b = s.substring(i, j);
                    String c = s.substring(j, k);
                    String d = s.substring(k);
                    if (isValid(a) && isValid(b) && isValid(c) && isValid(d)) {
                        ans.add(a + "." + b + "." + c + "." + d);
                    }
                }
            }
        }
        return ans;
    }

    private boolean isValid(String s) {
        if (s.length() > 3) {
            return false;
        }
        if (s.charAt(0) == '0' && s.length() > 1) {
            return false;
        }
        int val = Integer.parseInt(s);
        return val >= 0 && val <= 255;

=======

        List<String> res = new ArrayList<>();
        if (s == null || s.length() < 4 || s.length() > 12) {
            return res;
        }
        dfs(res, new ArrayList<>(), s, 0);
        return res;
    }
    
    private void dfs(List<String> res, List<String> list, String s, int start) {
        if (list.size() == 4) {
            if (start == s.length()) {
                res.add(String.join(".", list));
            }
            return;
        }
        for (int i = 1; i <= 3; i++) {
            if (start + i > s.length()) {
                break;
            }
            String sub = s.substring(start, start + i);
            if (sub.length() > 1 && sub.charAt(0) == '0') {
                break;
            }
            if (Integer.parseInt(sub) > 255) {
                break;
            }
            list.add(sub);
            dfs(res, list, s, start + i);
            list.remove(list.size() - 1);
        }

=======

        List<String> result = new ArrayList<String>();
        if (s.length() < 4 || s.length() > 12) {
            return result;
        }
        restoreIpAddresses(s, 0, 0, "", result);
        return result;
    }
    private void restoreIpAddresses(String s, int start, int part, String ip, List<String> result) {
        if (part == 4 && start == s.length()) {
            result.add(ip.substring(0, ip.length() - 1));
            return;
        }
        if (part == 4 || start == s.length()) {
            return;
        }
        if (s.charAt(start) == '0') {
            restoreIpAddresses(s, start + 1, part + 1, ip + "0.", result);
        } else {
            int num = 0;
            for (int i = start; i < start + 3 && i < s.length(); i++) {
                num = num * 10 + (s.charAt(i) - '0');
                if (num <= 255) {
                    restoreIpAddresses(s, i + 1, part + 1, ip + num + ".", result);
                }
            }
        }

=======

        List<String> res = new ArrayList<String>();
        if (s == null || s.length() < 4 || s.length() > 12) return res;
        dfs(s, 0, new ArrayList<String>(), res);
        return res;
    }
    private void dfs(String s, int start, List<String> list, List<String> res) {
        // base case
        if (list.size() == 4) {
            if (start == s.length()) {
                res.add(String.join(".", list));
            }
            return;
        }
        // recursive rule
        for (int i = 1; i <= 3; i++) {
            if (start + i > s.length()) break;
            String str = s.substring(start, start + i);
            if (i == 2 && str.charAt(0) == '0' || i == 3 && (str.charAt(0) == '0' || Integer.valueOf(str) > 255)) continue;
            list.add(str);
            dfs(s, start + i, list, res);
            list.remove(list.size() - 1);
        }

=======

        List<String> res = new ArrayList<>();
        backTrack(res, new ArrayList<>(), s, 0);
        return res;
    }
    
    public void backTrack(List<String> res, List<String> temp, String s, int start) {
        if (temp.size() == 4) {
            if (start == s.length()) {
                res.add(String.join(".", temp));
            }
            return;
        }
        for (int i = 1; i <= 3; i++) {
            if (start + i > s.length()) {
                break;
            }
            String sub = s.substring(start, start + i);
            if (sub.charAt(0) == '0' && sub.length() > 1) {
                break;
            }
            if (Integer.valueOf(sub) > 255) {
                break;
            }
            temp.add(sub);
            backTrack(res, temp, s, start + i);
            temp.remove(temp.size() - 1);
        }

=======

        List<String> result = new ArrayList<String>();
        if (s.length() < 4 || s.length() > 12) {
            return result;
        }
        helper(result, s, 0, 0, "");
        return result;
    }
    private void helper(List<String> result, String s, int start, int part, String ip) {
        if (part == 4) {
            if (start == s.length()) {
                result.add(ip);
            }
            return;
        }
        if (start == s.length()) {
            return;
        }
        int num = 0;
        for (int i = start; i < start + 3; i++) {
            num = num * 10 + (s.charAt(i) - '0');
            if (num <= 255) {
                helper(result, s, i + 1, part + 1, ip + num + (part == 3 ? "" : "."));
            }
            if (num == 0) {
                break;
            }
        }

=======

        List<String> result = new ArrayList<>();
        if (s.length() > 12 || s.length() < 4) {
            return result;
        }
        backtracking(s, 0, new ArrayList<>(), result);
        return result;
    }

    private void backtracking(String s, int start, List<String> path, List<String> result) {
        if (path.size() == 4 && start == s.length()) {
            result.add(String.join(".", path));
            return;
        }
        if (path.size() == 4) {
            return;
        }
        for (int i = start; i < s.length(); i++) {
            String sub = s.substring(start, i + 1);
            if (sub.length() > 1 && sub.startsWith("0")) {
                return;
            }
            if (Integer.parseInt(sub) > 255) {
                return;
            }
            path.add(sub);
            backtracking(s, i + 1, path, result);
            path.remove(path.size() - 1);
        }
