Synthesizing 10/10 solutions

=======

        String[] n1 = num1.split("\\+");
        String[] n2 = num2.split("\\+");
        int a = Integer.parseInt(n1[0]);
        int b = Integer.parseInt(n1[1].substring(0, n1[1].length() - 1));
        int c = Integer.parseInt(n2[0]);
        int d = Integer.parseInt(n2[1].substring(0, n2[1].length() - 1));
        int e = a * c - b * d;
        int f = a * d + b * c;
        return String.format("%d+%di", e, f);

=======

        int[] n1 = parse(num1);
        int[] n2 = parse(num2);
        int real = n1[0] * n2[0] - n1[1] * n2[1];
        int imag = n1[0] * n2[1] + n1[1] * n2[0];
        return real + "+" + imag + "i";
    }

    private int[] parse(String num) {
        int[] n = new int[2];
        int i = 0;
        while (num.charAt(i) != '+') {
            i++;
        }
        n[0] = Integer.parseInt(num.substring(0, i));
        n[1] = Integer.parseInt(num.substring(i + 1, num.length() - 1));
        return n;

=======

        int[] n1 = parse(num1);
        int[] n2 = parse(num2);
        int real = n1[0] * n2[0] - n1[1] * n2[1];
        int imaginary = n1[0] * n2[1] + n1[1] * n2[0];
        return real + "+" + imaginary + "i";

=======

        int[] n1 = parse(num1);
        int[] n2 = parse(num2);
        int r = n1[0] * n2[0] - n1[1] * n2[1];
        int i = n1[0] * n2[1] + n1[1] * n2[0];
        return r + "+" + i + "i";

=======

        int[] a = parse(num1);
        int[] b = parse(num2);
        int real = a[0] * b[0] - a[1] * b[1];
        int imaginary = a[0] * b[1] + a[1] * b[0];
        return real + "+" + imaginary + "i";

=======

        int[] a = parse(num1);
        int[] b = parse(num2);
        int real = a[0] * b[0] - a[1] * b[1];
        int imag = a[0] * b[1] + a[1] * b[0];
        return real + "+" + imag + "i";
    }
    
    int[] parse(String num) {
        int[] a = new int[2];
        int i = 0;
        while (num.charAt(i) != '+') {
            i++;
        }
        a[0] = Integer.parseInt(num.substring(0, i));
        a[1] = Integer.parseInt(num.substring(i + 1, num.length() - 1));
        return a;

=======

        int[] n1 = getNum(num1);
        int[] n2 = getNum(num2);
        int real = n1[0] * n2[0] - n1[1] * n2[1];
        int imaginary = n1[0] * n2[1] + n1[1] * n2[0];
        return real + "+" + imaginary + "i";

=======

        String[] num1Parts = num1.split("\\+");
        String[] num2Parts = num2.split("\\+");
        int a = Integer.parseInt(num1Parts[0]);
        int b = Integer.parseInt(num1Parts[1].substring(0, num1Parts[1].length() - 1));
        int c = Integer.parseInt(num2Parts[0]);
        int d = Integer.parseInt(num2Parts[1].substring(0, num2Parts[1].length() - 1));
        int real = a * c - b * d;
        int imaginary = a * d + b * c;
        return real + "+" + imaginary + "i";

=======

        int[] n1 = parseNumber(num1);
        int[] n2 = parseNumber(num2);
        int a = n1[0] * n2[0] - n1[1] * n2[1];
        int b = n1[0] * n2[1] + n1[1] * n2[0];
        return a + "+" + b + "i";
    }
    
    public int[] parseNumber(String num) {
        int[] res = new int[2];
        int i = 0;
        while (num.charAt(i) != '+') {
            i++;
        }
        res[0] = Integer.parseInt(num.substring(0, i));
        res[1] = Integer.parseInt(num.substring(i + 1, num.length() - 1));
        return res;

=======

        ComplexNumber c1 = new ComplexNumber(num1);
        ComplexNumber c2 = new ComplexNumber(num2);
        ComplexNumber c3 = c1.multiply(c2);
        return c3.toString();
    }
}
