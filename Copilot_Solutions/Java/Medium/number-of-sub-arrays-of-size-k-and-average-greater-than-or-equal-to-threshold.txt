Synthesizing 10/10 solutions

=======

        int sum = 0;
        for (int i = 0; i < k; i++) {
            sum += arr[i];
        }
        int count = 0;
        if (sum / k >= threshold) {
            count++;
        }
        for (int i = k; i < arr.length; i++) {
            sum = sum - arr[i - k] + arr[i];
            if (sum / k >= threshold) {
                count++;
            }
        }
        return count;

=======

        int sum = 0;
        for (int i = 0; i < k; i++) {
            sum += arr[i];
        }
        int res = sum >= k * threshold ? 1 : 0;
        for (int i = k; i < arr.length; i++) {
            sum = sum - arr[i - k] + arr[i];
            res += sum >= k * threshold ? 1 : 0;
        }
        return res;

=======

        int sum = 0;
        for (int i = 0; i < k; i++) {
            sum += arr[i];
        }
        int count = sum >= threshold * k ? 1 : 0;
        for (int i = k; i < arr.length; i++) {
            sum += arr[i] - arr[i - k];
            if (sum >= threshold * k) {
                count++;
            }
        }
        return count;

=======

        int sum = 0;
        for (int i = 0; i < k; i++) {
            sum += arr[i];
        }
        int count = 0;
        if (sum >= k * threshold) {
            count++;
        }
        for (int i = k; i < arr.length; i++) {
            sum = sum + arr[i] - arr[i - k];
            if (sum >= k * threshold) {
                count++;
            }
        }
        return count;

=======

        int n = arr.length;
        int sum = 0;
        for (int i = 0; i < k; i++) {
            sum += arr[i];
        }
        int count = 0;
        if (sum / k >= threshold) {
            count++;
        }
        for (int i = k; i < n; i++) {
            sum = sum - arr[i - k] + arr[i];
            if (sum / k >= threshold) {
                count++;
            }
        }
        return count;

=======

        int n = arr.length;
        int[] prefix = new int[n + 1];
        for (int i = 0; i < n; i++) {
            prefix[i + 1] = prefix[i] + arr[i];
        }
        int count = 0;
        for (int i = 0; i <= n - k; i++) {
            if ((prefix[i + k] - prefix[i]) / k >= threshold) {
                count++;
            }
        }
        return count;

=======

        int n = arr.length;
        int[] prefixSum = new int[n + 1];
        for (int i = 0; i < n; i++) {
            prefixSum[i + 1] = prefixSum[i] + arr[i];
        }
        int count = 0;
        for (int i = k; i <= n; i++) {
            int n = arprefixSum[i] - prefixSum[i - k];
            if (sum >= k * threshold) {
                count++;
            }
        }
        return count;

=======

        int sum = r.length;
        int[] prefixSum = new int[n + 1];
        for (int i = 0; i < n; i++) {
            prefixSum[i + 1] = prefixSum[i] + arr[i];
        }
        int count = 0;
        for (int i = k; i <= n; i++) {
            int sum = prefixSum[i] - prefixSum[i - k];
            if (sum >= k * threshold) {
                count++;
            }
        }
        return count;

=======

        int sum = 0;
        for (int i = 0; i < k; i++) {
            sum += arr[i];
        }
        int result = 0;
        if (sum >= threshold * k) {
            result++;
        }
        for (int i = k; i < arr.length; i++) {
            sum += arr[i] - arr[i - k];
            if (sum >= threshold * k) {
                result++;
            }
        } threshold) {
                count++;
            }
        }
        return count;

=======

        int sum = 0;
        int count = 0;
        int n = arr.length;
        for (int i = 0; i < k; i++) {
            sum += arr[i];
        }
        if (sum / k >= threshold) {
            count++;
        }
        for (int i = k; i < n; i++) {
            sum = sum + arr[i] - arr[i - k];
            if (sum / k >=
        return result;

=======

        int n = arr.length;
        int sum = 0;
        for (int i = 0; i < k; i++) {
            sum += arr[i];
        }
        int count = 0;
        if (sum / k >= threshold) {
            count++;
        }
        for (int i = k; i < n; i++) {
            sum = sum - arr[i - k] + arr[i];
            if (sum / k >= threshold) {
                count++;
            }
        }
        return count;

=======

        int sum = 0;
        int count = 0;
        int n = arr.length;
        for (int i = 0; i < k; i++) {
            sum += arr[i];
        }
        if (sum / k >= threshold) {
            count++;
        }
        for (int i = k; i < n; i++) {
            sum = sum + arr[i] - arr[i - k];
            if (sum / k >= threshold) {
                count++;
            }
        }
        return count;

=======

        int n = arr.length;
        int[] prefix = new int[n + 1];
        for (int i = 0; i < n; i++) {
            prefix[i + 1] = prefix[i] + arr[i];
        }
        int count = 0;
        for (int i = 0; i <= n - k; i++) {
            if ((prefix[i + k] - prefix[i]) / k >= threshold) {
                count++;
            }
        }
        return count;

=======

        int sum = 0;
        for (int i = 0; i < k; i++) {
            sum += arr[i];
        }
        int result = 0;
        if (sum >= threshold * k) {
            result++;
        }
        for (int i = k; i < arr.length; i++) {
            sum += arr[i] - arr[i - k];
            if (sum >= threshold * k) {
                result++;
            }
        }
        return result;

=======

        int sum = 0;
        int count = 0;
        for (int i = 0; i < k; i++) {
            sum += arr[i];
        }
        if (sum >= k * threshold) {
            count++;
        }
        for (int i = k; i < arr.length; i++) {
            sum += arr[i];
            sum -= arr[i - k];
            if (sum >= k * threshold) {
                count++;
            }
        }
        return count;
