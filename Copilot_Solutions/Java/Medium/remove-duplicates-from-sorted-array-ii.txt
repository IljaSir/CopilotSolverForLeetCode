Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int i = 0;
        for (int n : nums)
            if (i < 2 || n > nums[i - 2])
                nums[i++] = n;
        return i;

=======

        int k = 0;
        for (int i = 0; i < nums.length; i++) {
            if (k < 2 || nums[i] > nums[k - 2]) {
                nums[k++] = nums[i];
            }
        }
        return k;

=======

        int n = nums.length;
        if (n <= 2) return n;
        int i = 2;
        for (int j = 2; j < n; j++) {
            if (nums[j] != nums[i - 2]) {
                nums[i] = nums[j];
                i++;
            }
        }
        return i;

=======

        int j = 0;
        int count = 0;
        for (int i = 0; i < nums.length; i++) {
            if (i > 0 && nums[i] == nums[i - 1]) {
                count++;
            } else {
                count = 1;
            }
            if (count <= 2) {
                nums[j++] = nums[i];
            }
        }
        return j;

=======

        if (nums.length <= 2) return nums.length;
        int i = 0;
        for (int n : nums) {
            if (i < 2 || n > nums[i - 2]) {
                nums[i++] = n;
            }
        }
        return i;

=======

        if (nums == null || nums.length == 0) return 0;
        int i = 0, j = 1;
        int count = 1;
        while (j < nums.length) {
            if (nums[j] == nums[i]) {
                if (count == 1) {
                    nums[++i] = nums[j++];
                    count++;
                } else {
                    j++;
                }
            } else {
                nums[++i] = nums[j++];
                count = 1;
            }
        }
        return i + 1;

=======

        int k = 0;
        int count = 0;
        for (int i = 0; i < nums.length; i++) {
            if (k == 0 || nums[i] != nums[k - 1]) {
                count = 0;
            }
            count++;
            if (count <= 2) {
                nums[k++] = nums[i];
            }
        }
        return k;

=======

        int index = 0;
        for(int i = 0; i < nums.length; i++) {
            if (i < 2 || nums[i] != nums[index - 2]) {
                nums[index++] = nums[i];
            }
        }
        return index;

=======

        int k = 0;
        int count = 0;
        int prev = Integer.MIN_VALUE;
        for (int i = 0; i < nums.length; ++i) {
            if (nums[i] != prev) {
                prev = nums[i];
                nums[k++] = nums[i];
                count = 1;
            } else {
                if (count < 2) {
                    nums[k++] = nums[i];
                    count++;
                }
            }
        }
        return k;
