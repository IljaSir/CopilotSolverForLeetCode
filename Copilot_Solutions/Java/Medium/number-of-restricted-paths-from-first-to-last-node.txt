Synthesizing 10/10 solutions

=======

        Map<Integer, List<int[]>> graph = new HashMap<>();
        for (int[] edge : edges) {
            graph.computeIfAbsent(edge[0], x -> new ArrayList<>()).add(new int[]{edge[1], edge[2]});
            graph.computeIfAbsent(edge[1], x -> new ArrayList<>()).add(new int[]{edge[0], edge[2]});
        }
        
        int[] dist = new int[n + 1];
        Arrays.fill(dist, Integer.MAX_VALUE);
        dist[n] = 0;
        PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> a[1] - b[1]);
        pq.offer(new int[]{n, 0});
        while (!pq.isEmpty()) {
            int[] cur = pq.poll();
            int node = cur[0], d = cur[1];
            if (d > dist[node]) continue;
            for (int[] nei : graph.get(node)) {
                int neiNode = nei[0], neiDist = nei[1];
                if (dist[neiNode] > d + neiDist) {
                    dist[neiNode] = d + neiDist;
                    pq.offer(new int[]{neiNode, d + neiDist});
                }
            }
        }
        
        int[] dp = new int[n + 1];
        dp[n] = 1;
        pq.offer(new int[]{n, dist[n]});
        while (!pq.isEmpty()) {
            int[] cur = pq.poll();
            int node = cur[0], d = cur[1];
            if (d < dist[node]) continue;
            for (int[] nei : graph.get(node)) {
                int neiNode = nei[0], neiDist = nei[1];
                if (dist[neiNode] > dist[node]) {
                    dp[neiNode] = (dp[neiNode] + dp[node]) % 1000000007;
                    pq.offer(new int[]{neiNode, dist[neiNode]});
                }
            }
        }
        
        return dp[1];

=======

        Map<Integer, List<int[]>> graph = new HashMap<>();
        for (int[] edge : edges) {
            graph.computeIfAbsent(edge[0], x -> new ArrayList<>()).add(new int[]{edge[1], edge[2]});
            graph.computeIfAbsent(edge[1], x -> new ArrayList<>()).add(new int[]{edge[0], edge[2]});
        }
        int[] dist = new int[n + 1];
        Arrays.fill(dist, Integer.MAX_VALUE);
        boolean[] visited = new boolean[n + 1];
        dist[n] = 0;
        PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> a[1] - b[1]);
        pq.offer(new int[]{n, 0});
        while (!pq.isEmpty()) {
            int[] cur = pq.poll();
            int u = cur[0];
            if (visited[u]) {
                continue;
            }
            visited[u] = true;
            for (int[] v : graph.getOrDefault(u, new ArrayList<>())) {
                if (dist[v[0]] > dist[u] + v[1]) {
                    dist[v[0]] = dist[u] + v[1];
                    pq.offer(new int[]{v[0], dist[v[0]]});
                }
            }
        }
        int[] dp = new int[n + 1];
        Arrays.fill(dp, -1);
        return dfs(1, n, graph, dist, dp);
    }

    private int dfs(int u, int n, Map<Integer, List<int[]>> graph, int[] dist, int[] dp) {
        if (u == n) {
            return 1;
        }
        if (dp[u] != -1) {
            return dp[u];
        }
        int ans = 0;
        for (int[] v : graph.getOrDefault(u, new ArrayList<>())) {
            if (dist[v[0]] > dist[u]) {
                ans = (ans + dfs(v[0], n, graph, dist, dp)) % 1000000007;
            }
        }
        dp[u] = ans;
        return ans;

=======

        List<int[]>[] graph = new ArrayList[n + 1];
        for (int i = 1; i <= n; i++) {
            graph[i] = new ArrayList<>();
        }
        for (int[] edge : edges) {
            graph[edge[0]].add(new int[]{edge[1], edge[2]});
            graph[edge[1]].add(new int[]{edge[0], edge[2]});
        }
        int[] dist = new int[n + 1];
        Arrays.fill(dist, Integer.MAX_VALUE);
        dist[n] = 0;
        PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> a[1] - b[1]);
        pq.offer(new int[]{n, 0});
        while (!pq.isEmpty()) {
            int[] cur = pq.poll();
            int node = cur[0];
            int d = cur[1];
            for (int[] next : graph[node]) {
                if (dist[next[0]] > d + next[1]) {
                    dist[next[0]] = d + next[1];
                    pq.offer(new int[]{next[0], dist[next[0]]});
                }
            }
        }
        int[] memo = new int[n + 1];
        Arrays.fill(memo, -1);
        return dfs(1, n, graph, dist, memo);
    }
    private int dfs(int node, int n, List<int[]>[] graph, int[] dist, int[] memo) {
        if (node == n) {
            return 1;
        }
        if (memo[node] != -1) {
            return memo[node];
        }
        int res = 0;
        for (int[] next : graph[node]) {
            if (dist[next[0]] > dist[node]) {
                res = (res + dfs(next[0], n, graph, dist, memo)) % 1000000007;
            }
        }
        memo[node] = res;
        return res;

=======

        int[][] graph = new int[n + 1][n + 1];
        for (int i = 0; i <= n; i++) {
            for (int j = 0; j <= n; j++) {
                graph[i][j] = -1;
            }
        }
        for (int[] edge : edges) {
            graph[edge[0]][edge[1]] = edge[2];
            graph[edge[1]][edge[0]] = edge[2];
        }
        int[] dist = new int[n + 1];
        Arrays.fill(dist, Integer.MAX_VALUE);
        dist[n] = 0;
        boolean[] visited = new boolean[n + 1];
        PriorityQueue<int[]> queue = new PriorityQueue<>((a, b) -> a[1] - b[1]);
        queue.add(new int[]{n, 0});
        while (!queue.isEmpty()) {
            int[] poll = queue.poll();
            int node = poll[0];
            int distance = poll[1];
            if (visited[node]) {
                continue;
            }
            visited[node] = true;
            for (int i = 1; i <= n; i++) {
                if (graph[node][i] != -1) {
                    int newDistance = distance + graph[node][i];
                    if (newDistance < dist[i]) {
                        dist[i] = newDistance;
                        queue.add(new int[]{i, newDistance});
                    }
                }
            }
        }
        long[] dp = new long[n + 1];
        Arrays.fill(dp, -1);
        dp[n] = 1;
        return (int) dfs(1, n, graph, dist, dp);
    }

    private long dfs(int node, int n, int[][] graph, int[] dist, long[] dp) {
        if (dp[node] != -1) {
            return dp[node];
        }
        long count = 0;
        for (int i = 1; i <= n; i++) {
            if (graph[node][i] != -1 && dist[i] > dist[node]) {
                count += dfs(i, n, graph, dist, dp);
                count %= 1000000007;
            }
        }
        dp[node] = count;
        return count;

=======

        int mod = 1000000007;
        List<List<int[]>> graph = new ArrayList<>();
        for (int i = 0; i <= n; i++) {
            graph.add(new ArrayList<>());
        }
        for (int[] e : edges) {
            graph.get(e[0]).add(new int[] {e[1], e[2]});
            graph.get(e[1]).add(new int[] {e[0], e[2]});
        }
        int[] dist = new int[n + 1];
        Arrays.fill(dist, Integer.MAX_VALUE);
        dist[n] = 0;
        PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> a[1] - b[1]);
        pq.offer(new int[] {n, 0});
        while (!pq.isEmpty()) {
            int[] cur = pq.poll();
            int u = cur[0], d = cur[1];
            if (d > dist[u]) {
                continue;
            }
            for (int[] v : graph.get(u)) {
                if (dist[v[0]] > d + v[1]) {
                    dist[v[0]] = d + v[1];
                    pq.offer(new int[] {v[0], dist[v[0]]});
                }
            }
        }
        int[] dp = new int[n + 1];
        dp[n] = 1;
        for (int i = n - 1; i >= 1; i--) {
            for (int[] v : graph.get(i)) {
                if (dist[i] > dist[v[0]]) {
                    dp[i] = (dp[i] + dp[v[0]]) % mod;
                }
            }
        }
        return dp[1];

=======

        int mod = 1000000007;
        List<int[]>[] graph = new ArrayList[n + 1];
        for (int i = 1; i <= n; i++) {
            graph[i] = new ArrayList<>();
        }
        for (int[] edge : edges) {
            graph[edge[0]].add(new int[]{edge[1], edge[2]});
            graph[edge[1]].add(new int[]{edge[0], edge[2]});
        }
        int[] dis = new int[n + 1];
        Arrays.fill(dis, Integer.MAX_VALUE);
        dis[n] = 0;
        PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> a[1] - b[1]);
        pq.add(new int[]{n, 0});
        while (!pq.isEmpty()) {
            int[] top = pq.poll();
            int u = top[0];
            int d = top[1];
            if (d > dis[u]) {
                continue;
            }
            for (int[] next : graph[u]) {
                int v = next[0];
                int w = next[1];
                if (dis[v] > dis[u] + w) {
                    dis[v] = dis[u] + w;
                    pq.add(new int[]{v, dis[v]});
                }
            }
        }
        int[] dp = new int[n + 1];
        Arrays.fill(dp, -1);
        return dfs(graph, dis, dp, 1, n, mod);
    }

    private int dfs(List<int[]>[] graph, int[] dis, int[] dp, int u, int n, int mod) {
        if (u == n) {
            return 1;
        }
        if (dp[u] != -1) {
            return dp[u];
        }
        int res = 0;
        for (int[] next : graph[u]) {
            int v = next[0];
            if (dis[v] > dis[u]) {
                res = (res + dfs(graph, dis, dp, v, n, mod)) % mod;
            }
        }
        dp[u] = res;
        return res;

=======

        int[][] graph = new int[n][n];
        for (int i = 0; i < n; i++) {
            Arrays.fill(graph[i], -1);
        }
        for (int[] e : edges) {
            graph[e[0] - 1][e[1] - 1] = e[2];
            graph[e[1] - 1][e[0] - 1] = e[2];
        }
        int[] dist = new int[n];
        Arrays.fill(dist, Integer.MAX_VALUE);
        dist[n - 1] = 0;
        boolean[] visited = new boolean[n];
        for (int i = 0; i < n; i++) {
            int minIndex = -1;
            for (int j = 0; j < n; j++) {
                if (!visited[j] && (minIndex == -1 || dist[j] < dist[minIndex])) {
                    minIndex = j;
                }
            }
            visited[minIndex] = true;
            for (int j = 0; j < n; j++) {
                if (graph[minIndex][j] != -1) {
                    dist[j] = Math.min(dist[j], dist[minIndex] + graph[minIndex][j]);
                }
            }
        }
        int[] dp = new int[n];
        Arrays.fill(dp, -1);
        dp[n - 1] = 1;
        return dfs(graph, dist, dp, 0);
    }
    
    private int dfs(int[][] graph, int[] dist, int[] dp, int index) {
        if (dp[index] != -1) {
            return dp[index];
        }
        dp[index] = 0;
        for (int i = 0; i < graph.length; i++) {
            if (graph[index][i] != -1 && dist[index] > dist[i]) {
                dp[index] = (dp[index] + dfs(graph, dist, dp, i)) % 1000000007;
            }
        }
        return dp[index];

=======

        int[][] graph = new int[n][n];
        for (int[] edge : edges) {
            int u = edge[0] - 1, v = edge[1] - 1, w = edge[2];
            graph[u][v] = graph[v][u] = w;
        }

        int[] dist = dijkstra(graph, n, n - 1);
        long[] dp = new long[n];
        Arrays.fill(dp, -1);
        return (int) dfs(graph, 0, n - 1, dist, dp);
    }

    private long dfs(int[][] graph, int cur, int n, int[] dist, long[] dp) {
        if (cur == n) return 1;
        if (dp[cur] != -1) return dp[cur];
        dp[cur] = 0;
        for (int i = 0; i < graph.length; i++) {
            if (graph[cur][i] != 0 && dist[cur] > dist[i]) {
                dp[cur] += dfs(graph, i, n, dist, dp);
                dp[cur] %= 1000000007;
            }
        }
        return dp[cur];
    }

    private int[] dijkstra(int[][] graph, int n, int start) {
        int[] dist = new int[n];
        Arrays.fill(dist, Integer.MAX_VALUE);
        boolean[] visited = new boolean[n];
        PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> a[1] - b[1]);
        pq.offer(new int[]{start, 0});
        dist[start] = 0;
        while (!pq.isEmpty()) {
            int[] cur = pq.poll();
            int curNode = cur[0];
            if (visited[curNode]) continue;
            visited[curNode] = true;
            for (int i = 0; i < n; i++) {
                if (graph[curNode][i] != 0) {
                    int newDist = dist[curNode] + graph[curNode][i];
                    if (newDist < dist[i]) {
                        dist[i] = newDist;
                        pq.offer(new int[]{i, newDist});
                    }
                }
            }
        }
        return dist;

=======

        final int MOD = (int) 1e9 + 7;
        List<int[]>[] graph = new List[n + 1];
        for (int i = 1; i <= n; i++) {
            graph[i] = new ArrayList<>();
        }
        for (int[] edge : edges) {
            graph[edge[0]].add(new int[]{edge[1], edge[2]});
            graph[edge[1]].add(new int[]{edge[0], edge[2]});
        }
        int[] dist = new int[n + 1];
        Arrays.fill(dist, Integer.MAX_VALUE);
        dist[n] = 0;
        PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> a[1] - b[1]);
        pq.add(new int[]{n, 0});
        while (!pq.isEmpty()) {
            int[] cur = pq.poll();
            int u = cur[0];
            int d = cur[1];
            if (d > dist[u]) {
                continue;
            }
            for (int[] neighbor : graph[u]) {
                int v = neighbor[0];
                int w = neighbor[1];
                if (dist[v] > dist[u] + w) {
                    dist[v] = dist[u] + w;
                    pq.add(new int[]{v, dist[v]});
                }
            }
        }
        int[] dp = new int[n + 1];
        Arrays.fill(dp, -1);
        return dfs(1, n, graph, dist, dp, MOD);
    }
    
    private int dfs(int u, int n, List<int[]>[] graph, int[] dist, int[] dp, int MOD) {
        if (u == n) {
            return 1;
        }
        if (dp[u] != -1) {
            return dp[u];
        }
        int ans = 0;
        for (int[] neighbor : graph[u]) {
            int v = neighbor[0];
            int w = neighbor[1];
            if (dist[v] > dist[u]) {
                ans = (ans + dfs(v, n, graph, dist, dp, MOD)) % MOD;
            }
        }
        return dp[u] = ans;

=======

        int[] dist = new int[n + 1];
        Arrays.fill(dist, Integer.MAX_VALUE);
        dist[n] = 0;
        Map<Integer, List<int[]>> graph = new HashMap<>();
        for (int[] e : edges) {
            graph.computeIfAbsent(e[0], k -> new ArrayList<>()).add(new int[]{e[1], e[2]});
            graph.computeIfAbsent(e[1], k -> new ArrayList<>()).add(new int[]{e[0], e[2]});
        }
        Queue<int[]> pq = new PriorityQueue<>((a, b) -> a[1] - b[1]);
        pq.add(new int[]{n, 0});
        while (!pq.isEmpty()) {
            int[] cur = pq.poll();
            int node = cur[0];
            int d = cur[1];
            if (d > dist[node]) continue;
            for (int[] next : graph.getOrDefault(node, new ArrayList<>())) {
                int nextNode = next[0];
                int nextDist = d + next[1];
                if (nextDist < dist[nextNode]) {
                    dist[nextNode] = nextDist;
                    pq.add(new int[]{nextNode, nextDist});
                }
            }
        }
        int[] dp = new int[n + 1];
        Arrays.fill(dp, -1);
        return dfs(1, n, graph, dist, dp);
    }
    private int dfs(int node, int n, Map<Integer, List<int[]>> graph, int[] dist, int[] dp) {
        if (node == n) return 1;
        if (dp[node] != -1) return dp[node];
        int res = 0;
        for (int[] next : graph.getOrDefault(node, new ArrayList<>())) {
            int nextNode = next[0];
            if (dist[node] > dist[nextNode]) {
                res = (res + dfs(nextNode, n, graph, dist, dp)) % 1000000007;
            }
        }
        dp[node] = res;
        return res;
