Synthesizing 10/10 solutions

=======

        int n = stones.length;
        int[] sum = new int[n + 1];
        for (int i = 0; i < n; i++) {
            sum[i + 1] = sum[i] + stones[i];
        }
        int[][] dp = new int[n][n];
        for (int i = n - 2; i >= 0; i--) {
            for (int j = i + 1; j < n; j++) {
                dp[i][j] = Math.max(sum[j + 1] - sum[i + 1] - dp[i + 1][j], sum[j] - sum[i] - dp[i][j - 1]);
            }
        }
        return dp[0][n - 1];

=======

        int n = stones.length;
        int[] sum = new int[n];
        sum[0] = stones[0];
        for (int i = 1; i < n; i++) {
            sum[i] = sum[i - 1] + stones[i];
        }
        int[][] dp = new int[n][n];
        for (int i = n - 2; i >= 0; i--) {
            for (int j = i + 1; j < n; j++) {
                dp[i][j] = Math.max(sum[j] - sum[i] - dp[i + 1][j], sum[j - 1] - (i > 0 ? sum[i - 1] : 0) - dp[i][j - 1]);
            }
        }
        return dp[0][n - 1];

=======

        int n = stones.length;
        int[] sum = new int[n];
        sum[0] = stones[0];
        for (int i = 1; i < n; i++) {
            sum[i] = sum[i - 1] + stones[i];
        }
        int[][] dp = new int[n][n];
        for (int i = n - 2; i >= 0; i--) {
            for (int j = i + 1; j < n; j++) {
                dp[i][j] = Math.max(sum[j] - sum[i] - dp[i + 1][j], sum[j - 1] - (i == 0 ? 0 : sum[i - 1]) - dp[i][j - 1]);
            }
        }
        return dp[0][n - 1];

=======

        int n = stones.length;
        int[] preSum = new int[n];
        preSum[0] = stones[0];
        for (int i = 1; i < n; i++) {
            preSum[i] = preSum[i - 1] + stones[i];
        }
        int[][] dp = new int[n][n];
        for (int i = n - 2; i >= 0; i--) {
            for (int j = i + 1; j < n; j++) {
                dp[i][j] = Math.max(preSum[j] - preSum[i] - dp[i + 1][j], preSum[j - 1] - (i == 0 ? 0 : preSum[i - 1]) - dp[i][j - 1]);
            }
        }
        return dp[0][n - 1];

=======

        int n = stones.length;
        int[] prefix = new int[n + 1];
        for (int i = 0; i < n; i++) {
            prefix[i + 1] = prefix[i] + stones[i];
        }
        int[][] dp = new int[n][n];
        for (int len = 2; len <= n; len++) {
            for (int i = 0; i < n - len + 1; i++) {
                int j = i + len - 1;
                dp[i][j] = Math.max(prefix[j + 1] - prefix[i + 1] - dp[i + 1][j], prefix[j] - prefix[i] - dp[i][j - 1]);
            }
        }
        return dp[0][n - 1];

=======

        int n = stones.length;
        int[] pre = new int[n];
        pre[0] = stones[0];
        for (int i = 1; i < n; i++) {
            pre[i] = pre[i - 1] + stones[i];
        }
        int[][] dp = new int[n][n];
        for (int i = n - 2; i >= 0; i--) {
            for (int j = i + 1; j < n; j++) {
                dp[i][j] = Math.max(pre[j] - pre[i] - dp[i + 1][j], pre[j - 1] - (i == 0 ? 0 : pre[i - 1]) - dp[i][j - 1]);
            }
        }
        return dp[0][n - 1];

=======

        int[][] dp = new int[stones.length][stones.length];
        int[] sum = new int[stones.length];
        sum[0] = stones[0];
        for (int i = 1; i < stones.length; i++) {
            sum[i] = sum[i - 1] + stones[i];
        }
        for (int i = stones.length - 2; i >= 0; i--) {
            for (int j = i + 1; j < stones.length; j++) {
                dp[i][j] = Math.max(sum[j] - sum[i] - dp[i + 1][j], sum[j - 1] - (i == 0 ? 0 : sum[i - 1]) - dp[i][j - 1]);
            }
        }
        return dp[0][stones.length - 1];

=======

        int n = stones.length;
        int[] preSum = new int[n + 1];
        for (int i = 0; i < n; ++i) {
            preSum[i + 1] = preSum[i] + stones[i];
        }
        int[][] dp = new int[n][n];
        for (int i = n - 2; i >= 0; --i) {
            for (int j = i + 1; j < n; ++j) {
                dp[i][j] = Math.max(preSum[j + 1] - preSum[i + 1] - dp[i + 1][j], preSum[j] - preSum[i] - dp[i][j - 1]);
            }
        }
        return dp[0][n - 1];

=======

        int n = stones.length;
        int[] preSum = new int[n + 1];
        for (int i = 1; i <= n; ++i) preSum[i] = preSum[i - 1] + stones[i - 1];
        int[][] dp = new int[n][n];
        for (int i = n - 1; i >= 0; --i) {
            for (int j = i + 1; j < n; ++j) {
                dp[i][j] = Math.max(preSum[j + 1] - preSum[i + 1] - dp[i + 1][j], preSum[j] - preSum[i] - dp[i][j - 1]);
            }
        }
        return dp[0][n - 1];

=======

        int n = stones.length;
        int[] dp = new int[n];
        int[] sum = new int[n+1];
        for (int i = 0; i < n; i++) {
            sum[i+1] = sum[i] + stones[i];
        }
        for (int i = n - 2; i >= 0; i--) {
            for (int j = i + 1; j < n; j++) {
                dp[j] = Math.max(sum[j+1] - sum[i+1] - dp[j], sum[j] - sum[i] - dp[j-1]);
            }
        }
        return dp[n-1];
