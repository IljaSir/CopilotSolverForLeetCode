Synthesizing 10/10 solutions (Duplicates hidden)

=======

        Set<Integer> set = new HashSet<>();
        for (int num : nums) {
            int rev = 0;
            while (num > 0) {
                rev = rev * 10 + num % 10;
                num /= 10;
            }
            set.add(rev);
        }
        return set.size();

=======

        Set<Integer> set = new HashSet<>();
        for (int i = 0; i < nums.length; i++) {
            int num = nums[i];
            int rev = 0;
            while (num > 0) {
                rev = rev * 10 + num % 10;
                num /= 10;
            }
            set.add(rev);
        }
        return set.size();

=======

        Set<String> set = new HashSet<>();
        for (int num : nums) {
            set.add(new StringBuilder(String.valueOf(num)).reverse().toString());
        }
        return set.size();

=======

        Set<Integer> set = new HashSet<>();
        for (int n : nums) {
            set.add(reverse(n));
        }
        return set.size();
    }
    
    private int reverse(int n) {
        int res = 0;
        while (n > 0) {
            res = res * 10 + n % 10;
            n /= 10;
        }
        return res;

=======

        Set<Integer> set = new HashSet<>();
        for (int num : nums) {
            int rev = reverse(num);
            set.add(rev);
        }
        return set.size();
    }

    private int reverse(int num) {
        int rev = 0;
        while (num > 0) {
            rev = rev * 10 + num % 10;
            num /= 10;
        }
        return rev;

=======

        Set<Integer> set = new HashSet<>();
        for (int i = 0; i < nums.length; i++) {
            int num = nums[i];
            int reverse = 0;
            while (num > 0) {
                reverse = reverse * 10 + num % 10;
                num /= 10;
            }
            set.add(reverse);
        }
        return set.size();

=======

        Set<String> set = new HashSet<>();
        for (int i : nums) {
            String s = String.valueOf(i);
            StringBuilder sb = new StringBuilder(s);
            sb.reverse();
            set.add(sb.toString());
        }
        return set.size();

=======

        Set<Integer> set = new HashSet<>();
        for (int n : nums) {
            set.add(rev(n));
        }
        return set.size();
    }
    
    private int rev(int n) {
        int res = 0;
        while (n > 0) {
            res = res * 10 + n % 10;
            n /= 10;
        }
        return res;

=======

        Set<Integer> set = new HashSet<Integer>();
        for (int i = 0; i < nums.length; i++) {
            String s = new StringBuilder().append(nums[i]).reverse().toString();
            set.add(Integer.parseInt(s));
        }
        return set.size();
