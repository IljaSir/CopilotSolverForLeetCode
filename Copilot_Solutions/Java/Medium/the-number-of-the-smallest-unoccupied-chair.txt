Synthesizing 10/10 solutions

=======

        int n = times.length;
        int[] arrival = new int[n];
        int[] leaving = new int[n];
        for (int i = 0; i < n; i++) {
            arrival[i] = times[i][0];
            leaving[i] = times[i][1];
        }
        Arrays.sort(arrival);
        Arrays.sort(leaving);
        int j = 0;
        PriorityQueue<Integer> pq = new PriorityQueue<>();
        for (int i = 0; i < n; i++) {
            while (j < n && arrival[i] >= leaving[j]) {
                pq.add(j);
                j++;
            }
            if (i == targetFriend) {
                if (pq.isEmpty()) {
                    return j;
                } else {
                    return pq.poll();
                }
            }
        }
        return -1;

=======

        int n = times.length;
        int[] arrival = new int[n];
        int[] leave = new int[n];
        for (int i = 0; i < n; i++) {
            arrival[i] = times[i][0];
            leave[i] = times[i][1];
        }
        int[][] order = new int[n][2];
        for (int i = 0; i < n; i++) {
            order[i][0] = arrival[i];
            order[i][1] = i;
        }
        Arrays.sort(order, (a, b) -> a[0] - b[0]);
        int[] leaveOrder = new int[n];
        for (int i = 0; i < n; i++) {
            leaveOrder[i] = leave[order[i][1]];
        }
        Arrays.sort(leaveOrder);
        int[] chairs = new int[n];
        int j = 0;
        for (int i = 0; i < n; i++) {
            while (j < n && leaveOrder[j] <= arrival[order[i][1]]) {
                chairs[j] = 1;
                j++;
            }
            for (j = 0; j < n; j++) {
                if (chairs[j] == 0) {
                    chairs[j] = 1;
                    break;
                }
            }
        }
        for (int i = 0; i < n; i++) {
            if (order[i][1] == targetFriend) {
                return j;
            }
        }
        return -1;

=======

        int n = times.length;
        int[][] events = new int[2 * n][3];
        for (int i = 0; i < n; i++) {
            events[2 * i] = new int[]{times[i][0], 0, i};
            events[2 * i + 1] = new int[]{times[i][1], 1, i};
        }
        Arrays.sort(events, (a, b) -> a[0] - b[0]);
        TreeSet<Integer> chairs = new TreeSet<>();
        for (int i = 0; i < n; i++) {
            chairs.add(i);
        }
        Map<Integer, Integer> leave = new HashMap<>();
        for (int[] event : events) {
            int time = event[0], type = event[1], id = event[2];
            if (type == 0) {
                int seat = chairs.pollFirst();
                if (id == targetFriend) {
                    return seat;
                }
                leave.put(id, seat);
            } else {
                chairs.add(leave.get(id));
            }
        }
        throw null;

=======

        int n = times.length;
        int[] friends = new int[n];
        for (int i = 0; i < n; i++) {
            friends[i] = i;
        }
        Arrays.sort(friends, (a, b) -> Integer.compare(times[a][0], times[b][0]));
        TreeSet<Integer> chairs = new TreeSet<>();
        for (int i = 0; i < n; i++) {
            chairs.add(i);
        }
        TreeMap<Integer, Integer> leave = new TreeMap<>();
        for (int i = 0; i < n; i++) {
            int friend = friends[i];
            int time = times[friend][0];
            while (!leave.isEmpty() && leave.firstKey() <= time) {
                chairs.add(leave.pollFirstEntry().getValue());
            }
            if (friend == targetFriend) {
                return chairs.first();
            }
            chairs.remove(chairs.first());
            leave.put(times[friend][1], chairs.first());
        }
        return -1;

=======

        int n = times.length;
        int[][] sortedTimes = new int[n][3];
        for (int i = 0; i < n; i++) {
            sortedTimes[i][0] = times[i][0];
            sortedTimes[i][1] = times[i][1];
            sortedTimes[i][2] = i;
        }
        Arrays.sort(sortedTimes, (a, b) -> a[0] - b[0]);
        int[] chairs = new int[n];
        int[] occupied = new int[n];
        for (int i = 0; i < n; i++) {
            chairs[i] = i;
            occupied[i] = -1;
        }
        int chairIndex = 0;
        for (int i = 0; i < n; i++) {
            int friend = sortedTimes[i][2];
            int time = sortedTimes[i][0];
            while (occupied[chairIndex] != -1 && occupied[chairIndex] <= time) {
                occupied[chairIndex] = -1;
                chairIndex++;
            }
            occupied[chairIndex] = sortedTimes[i][1];
            if (friend == targetFriend) {
                return chairs[chairIndex];
            }
        }
        return -1;

=======

        int[][] events = new int[times.length * 2][3];
        for (int i = 0; i < times.length; ++i) {
            events[2 * i] = new int[]{times[i][0], 0, i};
            events[2 * i + 1] = new int[]{times[i][1], 1, i};
        }
        Arrays.sort(events, (a, b) -> a[0] - b[0]);
        PriorityQueue<Integer> pq = new PriorityQueue<>();
        for (int i = 0; i < times.length; ++i) {
            pq.offer(i);
        }
        int[] chair = new int[times.length];
        Arrays.fill(chair, -1);
        for (int i = 0; i < events.length; ++i) {
            int[] event = events[i];
            if (event[1] == 0) {
                chair[event[2]] = pq.poll();
            } else {
                pq.offer(chair[event[2]]);
            }
        }
        return chair[targetFriend];

=======

        int n = times.length;
        int[] chairs = new int[n];
        for (int i = 0; i < n; i++) {
            chairs[i] = i;
        }
        Arrays.sort(times, (a, b) -> a[0] - b[0]);
        PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> a[1] - b[1]);
        for (int[] time : times) {
            while (!pq.isEmpty() && pq.peek()[1] <= time[0]) {
                chairs[pq.poll()[0]] = -1;
            }
            int i = 0;
            while (chairs[i] != -1) {
                i++;
            }
            chairs[i] = time[1];
            pq.offer(new int[] {i, time[1]});
        }
        for (int i = 0; i < n; i++) {
            if (times[i][0] == times[targetFriend][0] && times[i][1] == times[targetFriend][1]) {
                return i;
            }
        }
        return -1;

=======

        int n = times.length;
        int[][] events = new int[n * 2][3];
        for (int i = 0; i < n; i++) {
            events[2 * i][0] = times[i][0];
            events[2 * i][1] = i;
            events[2 * i][2] = 1;
            events[2 * i + 1][0] = times[i][1];
            events[2 * i + 1][1] = i;
            events[2 * i + 1][2] = -1;
        }
        Arrays.sort(events, (a, b) -> a[0] - b[0]);
        TreeSet<Integer> set = new TreeSet<>();
        for (int i = 0; i < n; i++) {
            set.add(i);
        }
        int[] chairs = new int[n];
        Arrays.fill(chairs, -1);
        for (int[] e : events) {
            int time = e[0];
            int id = e[1];
            int type = e[2];
            if (type == 1) {
                chairs[id] = set.pollFirst();
            } else {
                set.add(chairs[id]);
            }
            if (id == targetFriend) {
                return chairs[id];
            }
        }
        return -1;

=======

        int n = times.length;
        int[] chairs = new int[n];
        for (int i = 0; i < n; i++) {
            chairs[i] = i;
        }
        int[][] events = new int[2 * n][3];
        for (int i = 0; i < n; i++) {
            events[2 * i] = new int[]{times[i][0], 0, i};
            events[2 * i + 1] = new int[]{times[i][1], 1, i};
        }
        Arrays.sort(events, (a, b) -> a[0] - b[0]);
        Set<Integer> occupied = new HashSet<>();
        for (int[] event : events) {
            if (event[1] == 0) {
                if (event[2] == targetFriend) {
                    return chairs[0];
                }
                occupied.add(chairs[0]);
                chairs = Arrays.copyOfRange(chairs, 1, chairs.length);
            } else {
                chairs = Arrays.copyOf(chairs, chairs.length + 1);
                chairs[chairs.length - 1] = event[2];
                Arrays.sort(chairs);
            }
        }
        return -1;

=======

        int n = times.length;
        int[] chair = new int[n];
        Arrays.fill(chair, -1);
        int[] next = new int[n];
        Arrays.fill(next, -1);
        int[] prev = new int[n];
        Arrays.fill(prev, -1);
        int[] pos = new int[n];
        for (int i = 0; i < n; i++) {
            pos[i] = i;
        }
        Arrays.sort(pos, new Comparator<Integer>() {
            public int compare(Integer a, Integer b) {
                return times[a][0] - times[b][0];
            }
        });
        int[] order = new int[n];
        for (int i = 0; i < n; i++) {
            order[pos[i]] = i;
        }
        int[] heap = new int[n];
        int heapSize = 0;
        for (int i = 0; i < n; i++) {
            int j = pos[i];
            int t = times[j][0];
            while (heapSize > 0 && times[heap[0]][1] <= t) {
                int k = heap[0];
                pop(heap, heapSize--);
                if (next[k] != -1) {
                    prev[next[k]] = prev[k];
                }
                if (prev[k] != -1) {
                    next[prev[k]] = next[k];
                } else {
                    chair[k] = next[k];
                }
            }
            if (j == targetFriend) {
                return chair[order[j]] == -1 ? heapSize : chair[order[j]];
            }
            int x = heapSize++;
            heap[x] = order[j];
            while (x > 0) {
                int y = (x - 1) >> 1;
                if (times[heap[y]][1] > times[heap[x]][1]) {
                    int tmp = heap[y];
                    heap[y] = heap[x];
                    heap[x] = tmp;
                    x = y;
                } else {
                    break;
                }
            }
            if (chair[order[j]] == -1) {
                if (heapSize > 1) {
                    int k = heap[1];
                    if (times[k][1] < times[heap[0]][1]) {
                        int tmp = heap[0];
                        heap[0] =
