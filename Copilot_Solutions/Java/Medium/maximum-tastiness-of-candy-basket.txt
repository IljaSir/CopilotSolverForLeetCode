Synthesizing 10/10 solutions

=======

        Arrays.sort(price);
        int n = price.length;
        int[] sum = new int[n];
        sum[0] = price[0];
        for (int i = 1; i < n; i++) {
            sum[i] = sum[i - 1] + price[i];
        }
        int ans = 0;
        for (int i = k - 1; i < n; i++) {
            ans = Math.max(ans, sum[i] - (i >= k ? sum[i - k] : 0));
        }
        return ans;

=======

        Arrays.sort(price);
        int n = price.length;
        int[] sum = new int[n + 1];
        for (int i = 1; i <= n; i++) {
            sum[i] = sum[i - 1] + price[i - 1];
        }
        int res = 0;
        for (int i = 0; i < n - k + 1; i++) {
            res = Math.max(res, sum[i + k] - sum[i]);
        }
        return res;

=======

        Arrays.sort(price);
        int n = price.length;
        int[] preSum = new int[n];
        preSum[0] = price[0];
        for (int i = 1; i < n; i++) {
            preSum[i] = preSum[i - 1] + price[i];
        }
        int ans = 0;
        for (int i = k - 1; i < n; i++) {
            int sum = preSum[i];
            if (i - k >= 0) {
                sum -= preSum[i - k];
            }
            ans = Math.max(ans, sum);
        }
        return ans;

=======

        int n = price.length;
        int[] sum = new int[n + 1];
        for (int i = 1; i <= n; i++) {
            sum[i] = sum[i - 1] + price[i - 1];
        }
        int max = 0;
        for (int i = 0; i + k <= n; i++) {
            max = Math.max(max, sum[i + k] - sum[i]);
        }
        return max;

=======

        Arrays.sort(price);
        int n = price.length;
        int max = 0;
        for (int i = 0; i < k; i++) {
            max += price[n - 1 - i];
        }
        int min = max;
        for (int i = 0; i < k; i++) {
            min -= price[n - 1 - i];
            min += price[i];
            max = Math.max(max, min);
        }
        return max;

=======

        int n = price.length;
        Arrays.sort(price);
        int ans = 0;
        for (int i = 0; i < k; i++) {
            ans += price[n - i - 1];
        }
        int min = ans;
        for (int i = 0; i < k; i++) {
            min -= price[n - i - 1];
            min += price[i];
            ans = Math.max(ans, min);
        }
        return ans;

=======

        Arrays.sort(price);
        int n = price.length;
        int max = 0;
        for (int i = 0; i < n - k + 1; i++) {
            max = Math.max(max, price[i + k - 1] - price[i]);
        }
        return max;

=======

        int n = price.length;
        Arrays.sort(price);
        int max = 0;
        for (int i = 0; i < k; i++) {
            max += price[n - i - 1];
        }
        int min = max;
        for (int i = 0; i < k; i++) {
            min -= price[n - i - 1];
            min += price[i];
            max = Math.max(max, min);
        }
        return max;

=======

        int n = price.length;
        Arrays.sort(price);
        int ans = 0;
        for (int i = 0; i < k; ++i) {
            ans += price[n - 1 - i];
        }
        int sum = ans;
        for (int i = k; i < n; ++i) {
            sum += price[n - 1 - i] - price[i - k];
            ans = Math.max(ans, sum);
        }
        return ans;

=======

        Arrays.sort(price);
        int max = 0;
        int n = price.length;
        for (int i = 0; i < k; i++) {
            max += price[n - 1 - i];
        }
        int min = max;
        for (int i = k; i < n; i++) {
            max += price[n - 1 - i];
            min += price[i - k];
            max -= price[i - k];
            min -= price[n - 1 - i];
            if (max - min > 0) {
                max = min;
            }
        }
        return max - min;
