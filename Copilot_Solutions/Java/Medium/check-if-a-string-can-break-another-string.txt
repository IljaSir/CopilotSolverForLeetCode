Synthesizing 10/10 solutions

=======

        int[] count1 = new int[26];
        int[] count2 = new int[26];
        for (int i = 0; i < s1.length(); i++) {
            count1[s1.charAt(i) - 'a']++;
            count2[s2.charAt(i) - 'a']++;
        }
        boolean flag1 = true;
        boolean flag2 = true;
        int sum1 = 0;
        int sum2 = 0;
        for (int i = 0; i < 26; i++) {
            sum1 += count1[i];
            sum2 += count2[i];
            if (sum1 < sum2) {
                flag1 = false;
            }
            if (sum2 < sum1) {
                flag2 = false;
            }
        }
        return flag1 || flag2;

=======

        int[] count1 = new int[26];
        int[] count2 = new int[26];
        for (int i = 0; i < s1.length(); i++) {
            count1[s1.charAt(i) - 'a']++;
            count2[s2.charAt(i) - 'a']++;
        }
        int c1 = 0;
        int c2 = 0;
        for (int i = 0; i < 26; i++) {
            c1 += count1[i];
            c2 += count2[i];
            if (c1 < c2) {
                return false;
            }
        }
        c1 = 0;
        c2 = 0;
        for (int i = 25; i >= 0; i--) {
            c1 += count1[i];
            c2 += count2[i];
            if (c2 < c1) {
                return false;
            }
        }
        return true;

=======

        int[] count1 = new int[26];
        int[] count2 = new int[26];
        for (int i = 0; i < s1.length(); i++) {
            count1[s1.charAt(i) - 'a']++;
            count2[s2.charAt(i) - 'a']++;
        }
        int diff = 0;
        for (int i = 0; i < 26; i++) {
            diff += count1[i] - count2[i];
            if (diff < 0) {
                for (int j = i + 1; j < 26; j++) {
                    if (count1[j] > 0) {
                        return false;
                    }
                }
            } else if (diff > 0) {
                for (int j = i + 1; j < 26; j++) {
                    if (count2[j] > 0) {
                        return false;
                    }
                }
            }
        }
        return true;

=======

        int[] count1 = new int[26];
        int[] count2 = new int[26];
        for (int i = 0; i < s1.length(); i++) {
            count1[s1.charAt(i) - 'a']++;
            count2[s2.charAt(i) - 'a']++;
        }
        int count = 0;
        for (int i = 0; i < 26; i++) {
            count += count1[i] - count2[i];
            if (count > 0) {
                return false;
            }
        }
        count = 0;
        for (int i = 0; i < 26; i++) {
            count += count2[i] - count1[i];
            if (count > 0) {
                return false;
            }
        }
        return true;

=======

        int[] count1 = new int[26];
        int[] count2 = new int[26];
        for (int i = 0; i < s1.length(); i++) {
            count1[s1.charAt(i) - 'a']++;
            count2[s2.charAt(i) - 'a']++;
        }
        boolean canBreak1 = true;
        boolean canBreak2 = true;
        int sum1 = 0;
        int sum2 = 0;
        for (int i = 0; i < 26; i++) {
            sum1 += count1[i];
            sum2 += count2[i];
            if (sum1 < sum2) {
                canBreak1 = false;
            }
            if (sum2 < sum1) {
                canBreak2 = false;
            }
        }
        return canBreak1 || canBreak2;

=======

        int[] count1 = new int[26];
        int[] count2 = new int[26];
        for (char c : s1.toCharArray()) {
            count1[c - 'a']++;
        }
        for (char c : s2.toCharArray()) {
            count2[c - 'a']++;
        }
        int sum1 = 0;
        int sum2 = 0;
        for (int i = 0; i < 26; ++i) {
            sum1 += count1[i];
            sum2 += count2[i];
            if (sum1 < sum2) {
                return false;
            }
        }
        sum1 = 0;
        sum2 = 0;
        for (int i = 25; i >= 0; --i) {
            sum1 += count1[i];
            sum2 += count2[i];
            if (sum1 < sum2) {
                return false;
            }
        }
        return true;

=======

        int[] c1 = new int[26];
        int[] c2 = new int[26];
        for (char c : s1.toCharArray()) {
            c1[c - 'a']++;
        }
        for (char c : s2.toCharArray()) {
            c2[c - 'a']++;
        }
        int sum1 = 0, sum2 = 0;
        for (int i = 0; i < 26; i++) {
            sum1 += c1[i];
            sum2 += c2[i];
            if (sum1 > sum2) {
                return false;
            }
        }
        sum1 = 0;
        sum2 = 0;
        for (int i = 25; i >= 0; i--) {
            sum1 += c1[i];
            sum2 += c2[i];
            if (sum1 > sum2) {
                return false;
            }
        }
        return true;

=======

        char[] c1 = s1.toCharArray();
        char[] c2 = s2.toCharArray();
        Arrays.sort(c1);
        Arrays.sort(c2);
        int n = c1.length;
        boolean b1 = true;
        boolean b2 = true;
        for (int i = 0; i < n; i++) {
            if (c1[i] < c2[i]) {
                b1 = false;
            }
            if (c2[i] < c1[i]) {
                b2 = false;
            }
        }
        return b1 || b2;

=======

        int[] ch1 = new int[26];
        int[] ch2 = new int[26];

        for (int i = 0; i < s1.length(); i++) {
            ch1[s1.charAt(i) - 'a']++;
            ch2[s2.charAt(i) - 'a']++;
        }

        int count1 = 0;
        int count2 = 0;

        for (int i = 0; i < 26; i++) {
            count1 += ch1[i];
            count2 += ch2[i];

            if (count1 >= count2) {
                continue;
            } else {
                count1 = 0;
                count2 = 0;
            }

            count2 += ch1[i];
            count1 += ch2[i];

            if (count1 >= count2) {
                continue;
            } else {
                return false;
            }
        }
        return true;

=======

        char[] s1Arr = s1.toCharArray();
        char[] s2Arr = s2.toCharArray();
        Arrays.sort(s1Arr);
        Arrays.sort(s2Arr);
        int n = s1Arr.length;
        int i = 0;
        while (i < n && s1Arr[i] >= s2Arr[i]) {
            i++;
        }
        if (i == n) {
            return true;
        }
        i = 0;
        while (i < n && s2Arr[i] >= s1Arr[i]) {
            i++;
        }
        return i == n;
