Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int n = arr.length;
        int ans = 1;
        int anchor = 0;
        for (int i = 1; i < n; ++i) {
            int c = Integer.compare(arr[i-1], arr[i]);
            if (i == n-1 || c * Integer.compare(arr[i], arr[i+1]) != -1) {
                if (c != 0) ans = Math.max(ans, i - anchor + 1);
                anchor = i;
            }
        }
        return ans;

=======

        int n = arr.length;
        int ans = 1;
        int start = 0;
        for (int i = 1; i < n; ++i) {
            int c = Integer.compare(arr[i - 1], arr[i]);
            if (c == 0) {
                start = i;
            } else if (i == n - 1 || c * Integer.compare(arr[i], arr[i + 1]) != -1) {
                ans = Math.max(ans, i - start + 1);
                start = i;
            }
        }
        return ans;

=======

        int n = arr.length;
        int ans = 1;
        int start = 0;
        for (int i = 1; i < n; i++) {
            int c = Integer.compare(arr[i - 1], arr[i]);
            if (c == 0) {
                start = i;
            } else if (i == n - 1 || c * Integer.compare(arr[i], arr[i + 1]) != -1) {
                ans = Math.max(ans, i - start + 1);
                start = i;
            }
        }
        return ans;

=======

        int n = arr.length;
        int ans = 1;
        int anchor = 0;
        for (int i = 1; i < n; i++) {
            int c = Integer.compare(arr[i-1], arr[i]);
            if (c == 0) {
                anchor = i;
            } else if (i == n - 1 || c * Integer.compare(arr[i], arr[i+1]) != -1) {
                ans = Math.max(ans, i - anchor + 1);
                anchor = i;
            }
        }
        return ans;

=======

        int n = arr.length;
        int[] dp = new int[n];
        dp[0] = 1;
        int ans = 1;
        for (int i = 1; i < n; i++) {
            if (arr[i] > arr[i - 1]) {
                dp[i] = (i - 2 >= 0 && arr[i - 1] < arr[i - 2]) ? dp[i - 1] + 1 : 2;
            } else if (arr[i] < arr[i - 1]) {
                dp[i] = (i - 2 >= 0 && arr[i - 1] > arr[i - 2]) ? dp[i - 1] + 1 : 2;
            } else {
                dp[i] = 1;
            }
            ans = Math.max(ans, dp[i]);
        }
        return ans;

=======

        int n = arr.length;
        int[] dp = new int[n];
        dp[0] = 1;
        int ans = 1;
        for (int i = 1; i < n; i++) {
            if (arr[i] == arr[i - 1]) {
                dp[i] = 1;
            } else if (i == 1) {
                dp[i] = 2;
            } else if (arr[i] > arr[i - 1] && arr[i - 1] < arr[i - 2]) {
                dp[i] = dp[i - 1] + 1;
            } else if (arr[i] < arr[i - 1] && arr[i - 1] > arr[i - 2]) {
                dp[i] = dp[i - 1] + 1;
            } else {
                dp[i] = 2;
            }
            ans = Math.max(ans, dp[i]);
        }
        return ans;

=======

        int n = arr.length;
        int[][] dp = new int[n][2];
        dp[0][0] = dp[0][1] = 1;
        int ans = 1;
        for (int i = 1; i < n; i++) {
            if (arr[i] == arr[i - 1]) {
                dp[i][0] = dp[i][1] = 1;
            } else if (arr[i] > arr[i - 1]) {
                dp[i][0] = dp[i - 1][1] + 1;
                dp[i][1] = 1;
            } else {
                dp[i][0] = 1;
                dp[i][1] = dp[i - 1][0] + 1;
            }
            ans = Math.max(ans, Math.max(dp[i][0], dp[i][1]));
        }
        return ans;

=======

        int n = arr.length;
        int[] dp = new int[n];
        Arrays.fill(dp, 1);
        int res = 1;
        for (int i = 1; i < n; i++) {
            if (arr[i] > arr[i - 1]) {
                if (i > 1 && arr[i - 1] < arr[i - 2]) {
                    dp[i] = dp[i - 1] + 1;
                } else {
                    dp[i] = 2;
                }
            } else if (arr[i] < arr[i - 1]) {
                if (i > 1 && arr[i - 1] > arr[i - 2]) {
                    dp[i] = dp[i - 1] + 1;
                } else {
                    dp[i] = 2;
                }
            }
            res = Math.max(res, dp[i]);
        }
        return res;

=======

        int max = 1;
        int curr = 1;
        for (int i = 1; i < arr.length; i++) {
            if (i % 2 == 1) {
                if (arr[i] > arr[i - 1]) {
                    curr++;
                } else {
                    curr = 1;
                }
            } else {
                if (arr[i] < arr[i - 1]) {
                    curr++;
                } else {
                    curr = 1;
                }
            }
            max = Math.max(max, curr);
        }
        curr = 1;
        for (int i = 1; i < arr.length; i++) {
            if (i % 2 == 1) {
                if (arr[i] < arr[i - 1]) {
                    curr++;
                } else {
                    curr = 1;
                }
            } else {
                if (arr[i] > arr[i - 1]) {
                    curr++;
                } else {
                    curr = 1;
                }
            }
            max = Math.max(max, curr);
        }
        return max;
