Synthesizing 9/10 solutions

=======

        Arrays.sort(position);
        int n = position.length;
        int left = 1;
        int right = position[n - 1] - position[0];
        while (left < right) {
            int mid = left + (right - left + 1) / 2;
            if (check(position, m, mid)) {
                left = mid;
            } else {
                right = mid - 1;
            }
        }
        return left;
    }
    
    private boolean check(int[] position, int m, int mid) {
        int count = 1;
        int prev = position[0];
        for (int i = 1; i < position.length; i++) {
            if (position[i] - prev >= mid) {
                count++;
                prev = position[i];
            }
        }
        return count >= m;

=======

        Arrays.sort(position);
        int n = position.length;
        int left = 1, right = position[n - 1] - position[0];
        while (left < right) {
            int mid = left + (right - left + 1) / 2;
            if (check(position, mid, m)) {
                left = mid;
            } else {
                right = mid - 1;
            }
        }
        return left;
    }
    private boolean check(int[] position, int d, int m) {
        int n = position.length;
        int count = 1;
        int prev = position[0];
        for (int i = 1; i < n; i++) {
            if (position[i] - prev >= d) {
                count++;
                prev = position[i];
            }
        }
        return count >= m;

=======

        Arrays.sort(position);
        int l = 0, r = position[position.length - 1] - position[0];
        while (l < r) {
            int mid = (l + r + 1) / 2;
            if (check(position, m, mid)) {
                l = mid;
            } else {
                r = mid - 1;
            }
        }
        return l;
    }
    
    private boolean check(int[] position, int m, int d) {
        int pre = position[0];
        m--;
        for (int i = 1; i < position.length; i++) {
            if (position[i] - pre >= d) {
                m--;
                pre = position[i];
            }
        }
        return m <= 0;

=======

        Arrays.sort(position);
        int n = position.length;
        int left = 1;
        int right = position[n - 1] - position[0];
        int ans = 0;
        while (left <= right) {
            int mid = left + (right - left) / 2;
            if (check(position, mid, m)) {
                ans = mid;
                left = mid + 1;
            } else {
                right = mid - 1;
            }
        }
        return ans;
    }
    private boolean check(int[] position, int mid, int m) {
        int n = position.length;
        int last = position[0];
        int cnt = 1;
        for (int i = 1; i < n; i++) {
            if (position[i] - last >= mid) {
                cnt++;
                last = position[i];
            }
        }
        return cnt >= m;

=======

        Arrays.sort(position);
        int l = 1, r = position[position.length - 1] - position[0];
        while (l < r) {
            int mid = (l + r + 1) >>> 1;
            if (check(position, m, mid)) {
                l = mid;
            } else {
                r = mid - 1;
            }
        }
        return l;
    }

    private boolean check(int[] position, int m, int mid) {
        int cnt = 1;
        int last = position[0];
        for (int i = 1; i < position.length; i++) {
            if (position[i] - last >= mid) {
                last = position[i];
                cnt++;
            }
        }
        return cnt >= m;

=======

        Arrays.sort(position);
        int n = position.length;
        int low = 0;
        int high = position[n - 1] - position[0];
        while (low < high) {
            int mid = low + (high - low + 1) / 2;
            if (check(position, mid, m)) {
                low = mid;
            } else {
                high = mid - 1;
            }
        }
        return low;
    }
    
    boolean check(int[] position, int d, int m) {
        int n = position.length;
        int count = 1;
        int last = position[0];
        for (int i = 1; i < n; i++) {
            if (position[i] - last >= d) {
                count++;
                last = position[i];
            }
        }
        return count >= m;

=======

        Arrays.sort(position);
        int min = 1, max = position[position.length - 1] - position[0];
        while (min < max) {
            int mid = min + (max - min) / 2;
            int count = 1, prev = position[0];
            for (int i = 1; i < position.length; i++) {
                if (position[i] - prev >= mid) {
                    count++;
                    prev = position[i];
                }
            }
            if (count >= m) {
                min = mid + 1;
            } else {
                max = mid;
            }
        }
        return min - 1;

=======

        Arrays.sort(position);
        int left = 0;
        int right = position[position.length-1] - position[0];
        while (left < right) {
            int mid = left + (right - left) / 2;
            if (check(position, m, mid)) {
                left = mid + 1;
            } else {
                right = mid;
            }
        }
        return left - 1;
    }
    private boolean check(int[] position, int m, int mid) {
        int count = 1;
        int i = 0;
        for (int j = 1; j < position.length; j++) {
            if (position[j] - position[i] >= mid) {
                count++;
                i = j;
            }
        }
        return count >= m;

=======

        Arrays.sort(position);
        int lo = 0;
        int hi = position[position.length-1] - position[0];
        while(lo < hi){
            int mid = lo + (hi - lo + 1) / 2;
            if(check(position, m, mid)){
                lo = mid;
            }else{
                hi = mid - 1;
            }
        }
        return lo;
    }
    
    private boolean check(int[] position, int m, int mid){
        int count = 1;
        int prev = position[0];
        for(int i = 1; i < position.length; i++){
            if(position[i] - prev >= mid){
                count++;
                prev = position[i];
            }
        }
        return count >= m;
