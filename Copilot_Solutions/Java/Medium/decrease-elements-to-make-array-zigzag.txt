Synthesizing 10/10 solutions

=======

        int odd = 0, even = 0;
        for (int i = 0; i < nums.length; i++) {
            int left = i == 0 ? Integer.MAX_VALUE : nums[i - 1];
            int right = i == nums.length - 1 ? Integer.MAX_VALUE : nums[i + 1];
            int min = Math.min(left, right);
            if (i % 2 == 0) {
                if (nums[i] >= min) {
                    even += nums[i] - min + 1;
                }
            } else {
                if (nums[i] >= min) {
                    odd += nums[i] - min + 1;
                }
            }
        }
        return Math.min(odd, even);

=======

        int n = nums.length;
        int[] a = new int[n];
        int[] b = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = nums[i];
            b[i] = nums[i];
        }
        int c1 = 0, c2 = 0;
        for (int i = 0; i < n; i++) {
            if (i % 2 == 0) {
                if (i - 1 >= 0 && a[i] >= a[i - 1]) {
                    c1 += a[i] - a[i - 1] + 1;
                    a[i] = a[i - 1] - 1;
                }
                if (i + 1 < n && a[i] >= a[i + 1]) {
                    c1 += a[i] - a[i + 1] + 1;
                    a[i] = a[i + 1] - 1;
                }
            } else {
                if (i - 1 >= 0 && b[i] >= b[i - 1]) {
                    c2 += b[i] - b[i - 1] + 1;
                    b[i] = b[i - 1] - 1;
                }
                if (i + 1 < n && b[i] >= b[i + 1]) {
                    c2 += b[i] - b[i + 1] + 1;
                    b[i] = b[i + 1] - 1;
                }
            }
        }
        return Math.min(c1, c2);

=======

        int odd = 0;
        int even = 0;
        for (int i = 0; i < nums.length; i++) {
            int left = i - 1 < 0 ? Integer.MAX_VALUE : nums[i - 1];
            int right = i + 1 >= nums.length ? Integer.MAX_VALUE : nums[i + 1];
            int min = Math.min(left, right);
            if (i % 2 == 0) {
                if (nums[i] >= min) {
                    even += nums[i] - min + 1;
                }
            } else {
                if (nums[i] >= min) {
                    odd += nums[i] - min + 1;
                }
            }
        }
        return Math.min(odd, even);

=======

        int n = nums.length;
        int[] arr1 = new int[n];
        int[] arr2 = new int[n];
        for (int i = 0; i < n; i++) {
            arr1[i] = nums[i];
            arr2[i] = nums[i];
        }
        int move1 = 0;
        int move2 = 0;
        for (int i = 0; i < n; i++) {
            if (i % 2 == 0) {
                if (i > 0 && arr1[i] >= arr1[i - 1]) {
                    move1 += (arr1[i] - arr1[i - 1] + 1);
                    arr1[i - 1] = arr1[i] - 1;
                }
                if (i < n - 1 && arr1[i] >= arr1[i + 1]) {
                    move1 += (arr1[i] - arr1[i + 1] + 1);
                    arr1[i + 1] = arr1[i] - 1;
                }
            } else {
                if (i > 0 && arr2[i] >= arr2[i - 1]) {
                    move2 += (arr2[i] - arr2[i - 1] + 1);
                    arr2[i - 1] = arr2[i] - 1;
                }
                if (i < n - 1 && arr2[i] >= arr2[i + 1]) {
                    move2 += (arr2[i] - arr2[i + 1] + 1);
                    arr2[i + 1] = arr2[i] - 1;
                }
            }
        }
        return Math.min(move1, move2);

=======

        int n = nums.length;
        int[] left = new int[n];
        int[] right = new int[n];
        for (int i = 0; i < n; i++) {
            left[i] = nums[i];
            right[i] = nums[i];
        }
        int res1 = 0;
        for (int i = 0; i < n; i++) {
            int l = i - 1 >= 0 ? left[i - 1] : Integer.MAX_VALUE;
            int r = i + 1 < n ? left[i + 1] : Integer.MAX_VALUE;
            if (nums[i] >= Math.min(l, r)) {
                res1 += nums[i] - Math.min(l, r) + 1;
                left[i] = Math.min(l, r) - 1;
            }
        }
        int res2 = 0;
        for (int i = 0; i < n; i++) {
            int l = i - 1 >= 0 ? right[i - 1] : Integer.MAX_VALUE;
            int r = i + 1 < n ? right[i + 1] : Integer.MAX_VALUE;
            if (nums[i] >= Math.min(l, r)) {
                res2 += nums[i] - Math.min(l, r) + 1;
                right[i] = Math.min(l, r) - 1;
            }
        }
        return Math.min(res1, res2);

=======

        int odd = 0;
        int even = 0;
        for (int i = 0; i < nums.length; i++) {
            if (i % 2 == 0) {
                if (i == nums.length - 1) {
                    if (nums[i] >= nums[i - 1]) {
                        even += nums[i] - nums[i - 1] + 1;
                    }
                } else {
                    if (nums[i] >= nums[i + 1] || nums[i] >= nums[i - 1]) {
                        even += Math.max(nums[i] - nums[i + 1], nums[i] - nums[i - 1]) + 1;
                    }
                }
            } else {
                if (i == 0) {
                    if (nums[i] >= nums[i + 1]) {
                        odd += nums[i] - nums[i + 1] + 1;
                    }
                } else {
                    if (nums[i] >= nums[i + 1] || nums[i] >= nums[i - 1]) {
                        odd += Math.max(nums[i] - nums[i + 1], nums[i] - nums[i - 1]) + 1;
                    }
                }
            }
        }
        return Math.min(odd, even);

=======

        int result1 = 0;
        int result2 = 0;
        for (int i = 0; i < nums.length; i++) {
            int left = i - 1 >= 0 ? nums[i - 1] : Integer.MAX_VALUE;
            int right = i + 1 < nums.length ? nums[i + 1] : Integer.MAX_VALUE;
            int min = Math.min(left, right);
            if (i % 2 == 0) {
                if (nums[i] >= min) {
                    result1 += nums[i] - min + 1;
                }
            } else {
                if (nums[i] >= min) {
                    result2 += nums[i] - min + 1;
                }
            }
        }
        return Math.min(result1, result2);

=======

        int even = 0;
        int odd = 0;
        int n = nums.length;
        for (int i = 0; i < n; i++) {
            int left = i == 0 ? Integer.MAX_VALUE : nums[i - 1];
            int right = i == n - 1 ? Integer.MAX_VALUE : nums[i + 1];
            int min = Math.min(left, right);
            if (i % 2 == 0) {
                even += Math.max(nums[i] - min + 1, 0);
            } else {
                odd += Math.max(nums[i] - min + 1, 0);
            }
        }
        return Math.min(even, odd);

=======

        int n = nums.length;
        if (n == 1) return 0;
        int[] a = Arrays.copyOf(nums, n);
        int[] b = Arrays.copyOf(nums, n);
        for (int i = 1; i < n; i += 2) {
            if (i < n - 1) a[i] = Math.min(nums[i - 1], nums[i + 1]) - 1;
            else a[i] = nums[i - 1] - 1;
            if (i > 1) b[i] = Math.min(nums[i - 1], nums[i - 2]) - 1;
            else b[i] = nums[i + 1] - 1;
        }
        int c1 = 0, c2 = 0;
        for (int i = 0; i < n; ++i) {
            if (a[i] < 0) c1 -= a[i];
            if (b[i] < 0) c2 -= b[i];
        }
        return Math.min(c1, c2);

=======

        int result = 0;
        int[] numsCopy = Arrays.copyOf(nums, nums.length);
        for (int i = 0; i < nums.length; i++) {
            int left = i > 0 ? nums[i - 1] : Integer.MAX_VALUE;
            int right = i < nums.length - 1 ? nums[i + 1] : Integer.MAX_VALUE;
            int min = Math.min(left, right);
            if (nums[i] >= min) {
                result += nums[i] - min + 1;
                nums[i] = min - 1;
            }
        }
        int result2 = 0;
        for (int i = 0; i < numsCopy.length; i++) {
            int left = i > 0 ? numsCopy[i - 1] : Integer.MAX_VALUE;
            int right = i < numsCopy.length - 1 ? numsCopy[i + 1] : Integer.MAX_VALUE;
            int min = Math.min(left, right);
            if (numsCopy[i] >= min) {
                result2 += numsCopy[i] - min + 1;
                numsCopy[i] = min - 1;
            }
        }
        return Math.min(result, result2);
