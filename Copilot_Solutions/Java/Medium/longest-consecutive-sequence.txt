Synthesizing 10/10 solutions

=======

        Set<Integer> set = new HashSet<>();
        for (int num : nums) {
            set.add(num);
        }
        int longest = 0;
        for (int num : set) {
            if (!set.contains(num - 1)) {
                int currentNum = num;
                int currentStreak = 1;
                while (set.contains(currentNum + 1)) {
                    currentNum++;
                    currentStreak++;
                }
                longest = Math.max(longest, currentStreak);
            }
        }
        return longest;

=======

        Set<Integer> set = new HashSet<>();
        for (int num : nums) {
            set.add(num);
        }
        int max = 0;
        for (int num : nums) {
            if (!set.contains(num - 1)) {
                int currentNum = num;
                int currentStreak = 1;
                while (set.contains(currentNum + 1)) {
                    currentNum += 1;
                    currentStreak += 1;
                }
                max = Math.max(max, currentStreak);
            }
        }
        return max;

=======

        Set<Integer> set = new HashSet<>();
        for (int num : nums) {
            set.add(num);
        }
        int longest = 0;
        for (int num : nums) {
            if (!set.contains(num - 1)) {
                int curr = 1;
                int next = num + 1;
                while (set.contains(next)) {
                    curr += 1;
                    next += 1;
                }
                longest = Math.max(longest, curr);
            }
        }
        return longest;

=======

        Map<Integer, Integer> map = new HashMap<>();
        int max = 0;
        for (int num : nums) {
            if (!map.containsKey(num)) {
                int left = map.getOrDefault(num - 1, 0);
                int right = map.getOrDefault(num + 1, 0);
                int sum = left + right + 1;
                map.put(num, sum);
                max = Math.max(max, sum);
                map.put(num - left, sum);
                map.put(num + right, sum);
            }
        }
        return max;

=======

        int longestStreak = 0;

        Set<Integer> num_set = new HashSet<Integer>();
        for (int num : nums) {
            num_set.add(num);
        }

        for (int num : num_set) {
            if (!num_set.contains(num-1)) {
                int currentNum = num;
                int currentStreak = 1;

                while (num_set.contains(currentNum+1)) {
                    currentNum += 1;
                    currentStreak += 1;
                }

                longestStreak = Math.max(longestStreak, currentStreak);
            }
        }

        return longestStreak;

=======

        if (nums.length == 0) {
            return 0;
        }
        Arrays.sort(nums);
        int count = 1;
        int maxCount = 1;
        for (int i = 1; i < nums.length; i++) {
            if (nums[i] == nums[i - 1]) {
                continue;
            }
            if (nums[i] == nums[i - 1] + 1) {
                count++;
            } else {
                count = 1;
            }
            maxCount = Math.max(maxCount, count);
        }
        return maxCount;

=======

        int max = 0;
        Map<Integer, Integer> map = new HashMap<>();
        for (int num : nums) {
            if (map.containsKey(num)) {
                continue;
            }
            int left = map.getOrDefault(num - 1, 0);
            int right = map.getOrDefault(num + 1, 0);
            int sum = left + right + 1;
            map.put(num, sum);
            max = Math.max(max, sum);
            map.put(num - left, sum);
            map.put(num + right, sum);
        }
        return max;

=======

        int max = 0;
        Set<Integer> set = new HashSet<Integer>();
        for (int num : nums) {
            set.add(num);
        }
        for (int num : nums) {
            if (set.remove(num)) {
                int val = num;
                int sum = 1;
                while (set.remove(val - 1)) {
                    val--;
                }
                sum += num - val;
                val = num;
                while (set.remove(val + 1)) {
                    val++;
                }
                sum += val - num;
                max = Math.max(max, sum);
            }
        }
        return max;

=======

        HashSet<Integer> set = new HashSet<Integer>();
        for(int i=0;i<nums.length;i++){
            set.add(nums[i]);
        }
        int res = 0;
        for(int i=0;i<nums.length;i++){
            if(!set.contains(nums[i]-1)){
                int j = nums[i];
                while(set.contains(j)){
                    j++;
                }
                res = Math.max(res, j-nums[i]);
            }
        }
        return res;

=======

        Set<Integer> set = new HashSet<>();
        for(int i : nums) {
            set.add(i);
        }
        int max = 0;
        for(int i : nums) {
            int count = 1;
            int left = i-1;
            while(set.contains(left)) {
                count++;
                set.remove(left);
                left--;
            }
            int right = i+1;
            while(set.contains(right)) {
                count++;
                set.remove(right);
                right++;
            }
            max = Math.max(max, count);
        }
        return max;
