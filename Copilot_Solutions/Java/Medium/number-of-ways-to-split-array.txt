Synthesizing 10/10 solutions

=======

        long[] sum = new long[nums.length + 1];
        for (int i = 0; i < nums.length; i++) {
            sum[i + 1] = sum[i] + nums[i];
        }
        int ans = 0;
        for (int i = 0; i < nums.length - 2; i++) {
            long s = sum[i + 1];
            int l = i + 1, r = nums.length - 1;
            while (l < r) {
                int mid = (l + r) / 2;
                if (sum[mid + 1] - s >= s) {
                    r = mid;
                } else {
                    l = mid + 1;
                }
            }
            int left = l;
            l = i + 1;
            r = nums.length - 1;
            while (l < r) {
                int mid = (l + r + 1) / 2;
                if (sum[mid + 1] - s > sum[nums.length] - sum[mid + 1]) {
                    r = mid - 1;
                } else {
                    l = mid;
                }
            }
            int right = r;
            if (left <= right) {
                ans = (ans + right - left + 1) % 1000000007;
            }
        }
        return ans;

=======

        int n = nums.length;
        int[] preSum = new int[n];
        preSum[0] = nums[0];
        for (int i = 1; i < n; i++) {
            preSum[i] = preSum[i - 1] + nums[i];
        }
        int ans = 0;
        for (int i = 0; i < n; i++) {
            int leftSum = preSum[i];
            int minRightIdx = i + 1;
            int maxRightIdx = n - 1;
            while (minRightIdx < maxRightIdx) {
                int midRightIdx = minRightIdx + (maxRightIdx - minRightIdx) / 2;
                if (preSum[midRightIdx] - leftSum < leftSum) {
                    minRightIdx = midRightIdx + 1;
                } else {
                    maxRightIdx = midRightIdx;
                }
            }
            int minRightSum = preSum[minRightIdx] - leftSum;
            if (minRightSum < leftSum) {
                continue;
            }
            int maxRightSum = preSum[n - 1] - leftSum;
            if (maxRightSum < leftSum) {
                continue;
            }
            int maxLeftIdx = i;
            int minLeftIdx = 0;
            while (minLeftIdx < maxLeftIdx) {
                int midLeftIdx = minLeftIdx + (maxLeftIdx - minLeftIdx) / 2;
                if (leftSum - preSum[midLeftIdx] <= preSum[n - 1] - preSum[midLeftIdx]) {
                    maxLeftIdx = midLeftIdx;
                } else {
                    minLeftIdx = midLeftIdx + 1;
                }
            }
            int maxLeftSum = leftSum - preSum[maxLeftIdx];
            if (maxLeftSum > preSum[n - 1] - preSum[maxLeftIdx]) {
                continue;
            }
            ans = (ans + minRightIdx - maxLeftIdx) % 1000000007;
        }
        return ans;

=======

        int n = nums.length;
        int[] prefix = new int[n];
        prefix[0] = nums[0];
        for (int i = 1; i < n; i++) {
            prefix[i] = prefix[i - 1] + nums[i];
        }
        int res = 0;
        for (int i = 0; i < n - 2; i++) {
            int l = i + 1, r = n - 1;
            while (l < r) {
                int mid = l + r + 1 >> 1;
                int left = prefix[i];
                int right = prefix[n - 1] - prefix[mid - 1];
                int midSum = prefix[mid - 1] - prefix[i];
                if (left <= midSum && midSum <= right) {
                    l = mid;
                } else {
                    r = mid - 1;
                }
            }
            int left = prefix[i];
            int right = prefix[n - 1] - prefix[r - 1];
            int midSum = prefix[r - 1] - prefix[i];
            if (left <= midSum && midSum <= right) {
                res = (res + r - i) % 1000000007;
            }
        }
        return res;

=======

        int n = nums.length;
        int[] prefix = new int[n];
        prefix[0] = nums[0];
        for (int i = 1; i < n; i++) {
            prefix[i] = prefix[i - 1] + nums[i];
        }
        int ans = 0;
        for (int i = 0; i < n - 2; i++) {
            int min = i + 1, max = n - 1;
            while (min < max) {
                int mid = (min + max) / 2;
                if (prefix[mid] - prefix[i] < prefix[i]) {
                    min = mid + 1;
                } else {
                    max = mid;
                }
            }
            int l = min;
            min = i + 1;
            max = n - 1;
            while (min < max) {
                int mid = (min + max + 1) / 2;
                if (prefix[n - 1] - prefix[mid] >= prefix[mid] - prefix[i]) {
                    min = mid;
                } else {
                    max = mid - 1;
                }
            }
            int r = min;
            if (l <= r) {
                ans = (ans + r - l + 1) % 1000000007;
            }
        }
        return ans;

=======

        int n = nums.length;
        int[] prefix = new int[n];
        prefix[0] = nums[0];
        for (int i = 1; i < n; i++) {
            prefix[i] = prefix[i - 1] + nums[i];
        }
        int ans = 0;
        for (int i = 0; i < n - 2; i++) {
            if (prefix[i] * 3 > prefix[n - 1]) {
                break;
            }
            int left = i + 1, right = n - 2;
            int target = prefix[i] * 2;
            while (left < right) {
                int mid = left + (right - left) / 2;
                if (prefix[mid] >= target) {
                    right = mid;
                } else {
                    left = mid + 1;
                }
            }
            if (prefix[left] < target) {
                continue;
            }
            int min = left;
            left = i + 1;
            right = n - 2;
            target = prefix[n - 1] - prefix[i];
            while (left < right) {
                int mid = left + (right - left + 1) / 2;
                if (prefix[mid] <= target) {
                    left = mid;
                } else {
                    right = mid - 1;
                }
            }
            if (prefix[left] > target) {
                continue;
            }
            int max = left;
            ans = (ans + max - min + 1) % 1000000007;
        }
        return ans;

=======

        int n = nums.length;
        long[] sum = new long[n + 1];
        for (int i = 0; i < n; i++) {
            sum[i + 1] = sum[i] + nums[i];
        }
        int j = 1;
        int k = 1;
        long res = 0;
        for (int i = 1; i < n; i++) {
            while (j <= i && sum[j] - sum[0] < sum[i + 1] - sum[j]) {
                j++;
            }
            while (k < i && sum[i + 1] - sum[k] >= sum[k] - sum[0]) {
                k++;
            }
            if (j <= k && k <= i) {
                res += k - j + 1;
            }
        }
        return (int) (res % 1000000007);

=======

        int n = nums.length;
        int[] prefixSum = new int[n];
        prefixSum[0] = nums[0];
        for (int i = 1; i < n; ++i) {
            prefixSum[i] = prefixSum[i - 1] + nums[i];
        }
        int res = 0;
        for (int i = 0; i < n - 2; ++i) {
            int min = i + 1;
            int max = n - 1;
            while (min < max) {
                int mid = min + (max - min) / 2;
                int sum1 = prefixSum[i];
                int sum2 = prefixSum[mid] - prefixSum[i];
                int sum3 = prefixSum[n - 1] - prefixSum[mid];
                if (sum1 <= sum2 && sum2 <= sum3) {
                    min = mid + 1;
                } else {
                    max = mid;
                }
            }
            if (min == max) {
                int sum1 = prefixSum[i];
                int sum2 = prefixSum[min] - prefixSum[i];
                int sum3 = prefixSum[n - 1] - prefixSum[min];
                if (sum1 <= sum2 && sum2 <= sum3) {
                    res = (res + (n - min)) % 1000000007;
                }
            }
        }
        return res;

=======

        int n = nums.length;
        long[] preSum = new long[n];
        preSum[0] = nums[0];
        for (int i = 1; i < n; ++i) {
            preSum[i] = preSum[i - 1] + nums[i];
        }
        long ans = 0;
        for (int i = 0; i < n - 2; ++i) {
            long left = preSum[i];
            int l = i + 1, r = n - 1;
            while (l < r) {
                int mid = l + r + 1 >> 1;
                if (preSum[mid] - left >= left) {
                    l = mid;
                } else {
                    r = mid - 1;
                }
            }
            if (l == n - 1) {
                break;
            }
            int right = l + 1;
            l = i + 1;
            r = n - 1;
            while (l < r) {
                int mid = l + r >> 1;
                if (preSum[n - 1] - preSum[mid] >= preSum[mid] - left) {
                    r = mid;
                } else {
                    l = mid + 1;
                }
            }
            ans += Math.max(0, Math.min(right, r) - l + 1);
        }
        return (int) (ans % 1000000007);

=======

        int n = nums.length;
        int[] sum = new int[n];
        sum[0] = nums[0];
        for(int i = 1; i < n; i++) {
            sum[i] = sum[i - 1] + nums[i];
        }
        int ans = 0;
        final int mod = 1_000_000_007;
        for(int i = 0; i < n - 2; i++) {
            int l = i + 1;
            int r = n - 1;
            int s = sum[i];
            while(l < r) {
                int m = (l + r) / 2;
                int left = sum[m] - s;
                int right = sum[n - 1] - sum[m];
                if(left < right) {
                    l = m + 1;
                } else {
                    r = m;
                }
            }
            int left = sum[r - 1] - s;
            int right = sum[n - 1] - sum[r - 1];
            if(left > right) {
                continue;
            }
            int ll = r;
            int rr = n - 1;
            while(ll < rr) {
                int m = (ll + rr + 1) / 2;
                left = sum[m] - s;
                right = sum[n - 1] - sum[m];
                if(left <= right) {
                    ll = m;
                } else {
                    rr = m - 1;
                }
            }
            ans += ll - r + 1;
            ans %= mod;
        }
        return ans;

=======

        int n = nums.length;
        int[] sums = new int[n];
        sums[0] = nums[0];
        for (int i = 1; i < n; i++) sums[i] = sums[i - 1] + nums[i];
        int ans = 0;
        int mod = 1000000007;
        for (int i = 0; i < n - 2; i++) {
            int l = i + 1, r = n - 1;
            while (l < r) {
                int mid = l + (r - l) / 2;
                if (sums[mid] - sums[i] >= sums[i]) r = mid;
                else l = mid + 1;
            }
            if (sums[l] - sums[i] < sums[i]) continue;
            int ll = l, rr = n - 1;
            while (ll < rr) {
                int mid = ll + (rr - ll + 1) / 2;
                if (sums[mid] - sums[i] > sums[n - 1] - sums[mid]) rr = mid - 1;
                else ll = mid;
            }
            ans = (ans + ll - l + 1) % mod;
        }
        return ans;
