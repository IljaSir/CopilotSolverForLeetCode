Synthesizing 10/10 solutions

=======

        int n = grid.length;
        Queue<int[]> queue = new LinkedList<>();
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == 1) {
                    queue.offer(new int[]{i, j});
                }
            }
        }
        if (queue.size() == 0 || queue.size() == n * n) {
            return -1;
        }
        int[][] directions = new int[][]{{1, 0}, {-1, 0}, {0, 1}, {0, -1}};
        int distance = -1;
        while (!queue.isEmpty()) {
            distance++;
            int size = queue.size();
            for (int i = 0; i < size; i++) {
                int[] cell = queue.poll();
                int row = cell[0], col = cell[1];
                for (int[] direction : directions) {
                    int newRow = row + direction[0], newCol = col + direction[1];
                    if (newRow >= 0 && newRow < n && newCol >= 0 && newCol < n && grid[newRow][newCol] == 0) {
                        grid[newRow][newCol] = 2;
                        queue.offer(new int[]{newRow, newCol});
                    }
                }
            }
        }
        return distance;

=======

        int n = grid.length;
        Queue<int[]> queue = new LinkedList<>();
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == 1) {
                    queue.add(new int[] {i, j});
                }
            }
        }
        int[][] directions = {{1, 0}, {-1, 0}, {0, 1}, {0, -1}};
        boolean hasOcean = false;
        int[] point = null;
        while (!queue.isEmpty()) {
            point = queue.poll();
            int x = point[0], y = point[1];
            for (int[] d : directions) {
                int nx = x + d[0], ny = y + d[1];
                if (nx >= 0 && nx < n && ny >= 0 && ny < n && grid[nx][ny] == 0) {
                    grid[nx][ny] = grid[x][y] + 1;
                    hasOcean = true;
                    queue.add(new int[] {nx, ny});
                }
            }
        }
        if (point == null || !hasOcean) {
            return -1;
        }
        return grid[point[0]][point[1]] - 1;

=======

        int n = grid.length;
        Queue<int[]> queue = new LinkedList<>();
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == 1) {
                    queue.offer(new int[]{i, j});
                }
            }
        }
        if (queue.isEmpty() || queue.size() == n * n) {
            return -1;
        }
        int[][] directions = new int[][]{{0, 1}, {0, -1}, {1, 0}, {-1, 0}};
        int distance = -1;
        while (!queue.isEmpty()) {
            distance++;
            int size = queue.size();
            for (int i = 0; i < size; i++) {
                int[] cell = queue.poll();
                int row = cell[0], col = cell[1];
                for (int[] direction : directions) {
                    int newRow = row + direction[0], newCol = col + direction[1];
                    if (newRow >= 0 && newRow < n && newCol >= 0 && newCol < n && grid[newRow][newCol] == 0) {
                        grid[newRow][newCol] = 2;
                        queue.offer(new int[]{newRow, newCol});
                    }
                }
            }
        }
        return distance;

=======

        int n = grid.length;
        Queue<int[]> q = new LinkedList<>();
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == 1) {
                    q.offer(new int[] {i, j});
                }
            }
        }

        int distance = -1;
        int[][] dirs = {{0, 1}, {0, -1}, {1, 0}, {-1, 0}};
        while (!q.isEmpty()) {
            int size = q.size();
            distance++;
            for (int i = 0; i < size; i++) {
                int[] cur = q.poll();
                for (int[] dir : dirs) {
                    int x = cur[0] + dir[0];
                    int y = cur[1] + dir[1];
                    if (x >= 0 && x < n && y >= 0 && y < n && grid[x][y] == 0) {
                        grid[x][y] = 1;
                        q.offer(new int[] {x, y});
                    }
                }
            }
        }
        return distance == 0 ? -1 : distance;

=======

        int n = grid.length;
        int[][] dist = new int[n][n];
        for (int[] row: dist)
            Arrays.fill(row, n + n);
        for (int i = 0; i < n; ++i)
            for (int j = 0; j < n; ++j)
                if (grid[i][j] == 1)
                    dist[i][j] = 0;

        for (int k = 0; k < n + n; ++k)
            for (int i = 0; i < n; ++i)
                for (int j = 0; j < n; ++j)
                    if (dist[i][j] > k)
                        if (i > 0 && dist[i-1][j] == k) dist[i][j] = k + 1;
                        else if (i+1 < n && dist[i+1][j] == k) dist[i][j] = k + 1;
                        else if (j > 0 && dist[i][j-1] == k) dist[i][j] = k + 1;
                        else if (j+1 < n && dist[i][j+1] == k) dist[i][j] = k + 1;

        int ans = -1;
        for (int[] row: dist)
            for (int v: row)
                if (v < n + n)
                    ans = Math.max(ans, v);
        return ans;

=======

        int n = grid.length;
        int m = grid[0].length;
        int[][] dirs = {{1, 0}, {-1, 0}, {0, 1}, {0, -1}};
        Queue<int[]> q = new LinkedList<>();
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (grid[i][j] == 1) {
                    q.offer(new int[]{i, j});
                }
            }
        }
        if (q.size() == 0 || q.size() == n * m) {
            return -1;
        }
        int res = -1;
        while (!q.isEmpty()) {
            int[] cur = q.poll();
            for (int[] dir : dirs) {
                int x = cur[0] + dir[0];
                int y = cur[1] + dir[1];
                if (x < 0 || x >= n || y < 0 || y >= m || grid[x][y] != 0) {
                    continue;
                }
                grid[x][y] = grid[cur[0]][cur[1]] + 1;
                res = Math.max(res, grid[x][y] - 1);
                q.offer(new int[]{x, y});
            }
        }
        return res;

=======

        int n = grid.length;
        int[][] dist = new int[n][n];
        boolean[][] seen = new boolean[n][n];
        Queue<int[]> q = new LinkedList<>();
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == 1) {
                    q.add(new int[]{i, j});
                    seen[i][j] = true;
                }
            }
        }
        if (q.size() == 0 || q.size() == n * n) {
            return -1;
        }
        int ans = -1;
        while (!q.isEmpty()) {
            int[] p = q.poll();
            int x = p[0], y = p[1];
            for (int[] d: new int[][]{{1, 0}, {0, 1}, {-1, 0}, {0, -1}}) {
                int nx = x + d[0], ny = y + d[1];
                if (nx >= 0 && nx < n && ny >= 0 && ny < n && !seen[nx][ny]) {
                    dist[nx][ny] = dist[x][y] + 1;
                    ans = Math.max(ans, dist[nx][ny]);
                    q.add(new int[]{nx, ny});
                    seen[nx][ny] = true;
                }
            }
        }
        return ans;

=======

        int n = grid.length;
        int m = grid[0].length;
        int[][] dist = new int[n][m];
        int[][] dir = {{1, 0}, {-1, 0}, {0, 1}, {0, -1}};
        Queue<int[]> q = new LinkedList<>();
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (grid[i][j] == 1) {
                    dist[i][j] = 0;
                    q.add(new int[]{i, j});
                } else {
                    dist[i][j] = Integer.MAX_VALUE;
                }
            }
        }
        while (!q.isEmpty()) {
            int[] cur = q.poll();
            for (int[] d : dir) {
                int x = cur[0] + d[0];
                int y = cur[1] + d[1];
                if (x >= 0 && x < n && y >= 0 && y < m) {
                    if (dist[x][y] > dist[cur[0]][cur[1]] + 1) {
                        dist[x][y] = dist[cur[0]][cur[1]] + 1;
                        q.add(new int[]{x, y});
                    }
                }
            }
        }
        int max = Integer.MIN_VALUE;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (grid[i][j] == 0) {
                    max = Math.max(max, dist[i][j]);
                }
            }
        }
        return max == Integer.MAX_VALUE || max == Integer.MIN_VALUE ? -1 : max;

=======

        int maxDistance = -1;
        int[][] directions = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};
        int n = grid.length;
        Queue<int[]> queue = new LinkedList<>();
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == 1) {
                    queue.offer(new int[]{i, j});
                }
            }
        }
        if (queue.size() == 0 || queue.size() == n * n) {
            return -1;
        }
        while (!queue.isEmpty()) {
            int[] point = queue.poll();
            int x = point[0], y = point[1];
            for (int[] direction : directions) {
                int newX = x + direction[0], newY = y + direction[1];
                if (newX < 0 || newX >= n || newY < 0 || newY >= n || grid[newX][newY] != 0) {
                    continue;
                }
                grid[newX][newY] = grid[x][y] + 1;
                maxDistance = Math.max(maxDistance, grid[newX][newY] - 1);
                queue.offer(new int[]{newX, newY});
            }
        }
        return maxDistance;

=======

        int n = grid.length;
        int[][] visited = new int[n][n];
        for (int i = 0; i < n; i++)
            Arrays.fill(visited[i], Integer.MAX_VALUE);
        Queue<int[]> queue = new LinkedList<>();
        for (int i = 0; i < n; i++)
            for (int j = 0; j < n; j++)
                if (grid[i][j] == 1) {
                    visited[i][j] = 0;
                    queue.offer(new int[]{i, j});
                }
        int[] dx = new int[]{0, 0, -1, 1};
        int[] dy = new int[]{1, -1, 0, 0};
        int result = -1;
        while (!queue.isEmpty()) {
            int[] node = queue.poll();
            for (int i = 0; i < 4; i++) {
                int x = node[0] + dx[i];
                int y = node[1] + dy[i];
                if (x >= 0 && x < n && y >= 0 && y < n && visited[x][y] == Integer.MAX_VALUE) {
                    visited[x][y] = visited[node[0]][node[1]] + 1;
                    result = Math.max(result, visited[x][y]);
                    queue.offer(new int[]{x, y});
                }
            }
        }
        return result;
