Synthesizing 10/10 solutions

=======

        Set<Integer> set = new HashSet<>();
        for (int i = 0; i < forbidden.length; i++) {
            set.add(forbidden[i]);
        }
        Queue<int[]> queue = new LinkedList<>();
        queue.offer(new int[]{0, 0, 0});
        while (!queue.isEmpty()) {
            int[] cur = queue.poll();
            int pos = cur[0], step = cur[1], dir = cur[2];
            if (pos == x) {
                return step;
            }
            if (pos < 0 || pos > 6000 || set.contains(pos)) {
                continue;
            }
            set.add(pos);
            if (dir != 1) {
                queue.offer(new int[]{pos - b, step + 1, -1});
            }
            queue.offer(new int[]{pos + a, step + 1, 1});
        }
        return -1;

=======

        Set<Integer> set = new HashSet<>();
        for (int i : forbidden) {
            set.add(i);
        }
        Queue<int[]> q = new LinkedList<>();
        q.offer(new int[]{0, 0});
        while (!q.isEmpty()) {
            int[] cur = q.poll();
            if (cur[0] == x) {
                return cur[1];
            }
            if (cur[0] - b >= 0 && !set.contains(cur[0] - b)) {
                set.add(cur[0] - b);
                q.offer(new int[]{cur[0] - b, cur[1] + 1});
            }
            if (cur[0] + a <= 6000 && !set.contains(cur[0] + a)) {
                set.add(cur[0] + a);
                q.offer(new int[]{cur[0] + a, cur[1] + 1});
            }
        }
        return -1;

=======

        Set<Integer> forb = new HashSet<>();
        for (int f : forbidden) forb.add(f);
        Queue<int[]> q = new LinkedList<>();
        q.offer(new int[]{0, 0});
        Set<Integer> seen = new HashSet<>();
        seen.add(0);
        while (!q.isEmpty()) {
            int[] cur = q.poll();
            int pos = cur[0], step = cur[1];
            if (pos == x) return step;
            if (pos + a <= 6000 && !forb.contains(pos + a) && !seen.contains(pos + a)) {
                q.offer(new int[]{pos + a, step + 1});
                seen.add(pos + a);
            }
            if (pos - b >= 0 && !forb.contains(pos - b) && !seen.contains(pos - b) && pos - b != pos + a) {
                q.offer(new int[]{pos - b, step + 1});
                seen.add(pos - b);
            }
        }
        return -1;

=======

        int n = 6000;
        boolean[] f = new boolean[n];
        for (int i = 0; i < forbidden.length; i++) {
            f[forbidden[i]] = true;
        }
        int[] dp = new int[n];
        Arrays.fill(dp, Integer.MAX_VALUE);
        dp[0] = 0;
        Queue<Integer> q = new LinkedList<>();
        q.offer(0);
        while (!q.isEmpty()) {
            int u = q.poll();
            if (u == x) {
                return dp[u];
            }
            int v = u + a;
            if (v < n && !f[v] && dp[v] > dp[u] + 1) {
                dp[v] = dp[u] + 1;
                q.offer(v);
            }
            v = u - b;
            if (u - b >= 0 && !f[v] && u - b != u + a && dp[v] > dp[u] + 1) {
                dp[v] = dp[u] + 1;
                q.offer(v);
            }
        }
        return -1;

=======

        Set<Integer> forb = new HashSet<>();
        for (int i : forbidden) forb.add(i);
        if (forb.contains(0)) return -1;
        Queue<Integer> q = new LinkedList<>();
        q.add(0);
        int ans = 0;
        Set<Integer> seen = new HashSet<>();
        seen.add(0);
        while (!q.isEmpty()) {
            int size = q.size();
            while (size-- > 0) {
                int cur = q.poll();
                if (cur == x) return ans;
                int next1 = cur + a;
                int next2 = cur - b;
                if (next1 == x || next2 == x) return ans + 1;
                if (next1 < 6000 && !forb.contains(next1) && !seen.contains(next1)) {
                    q.add(next1);
                    seen.add(next1);
                }
                if (next2 > 0 && !forb.contains(next2) && !seen.contains(next2)) {
                    q.add(next2);
                    seen.add(next2);
                }
            }
            ans++;
        }
        return -1;

=======

        Queue<Integer> q = new LinkedList<>();
        Set<Integer> forbiddenSet = new HashSet<>();
        for (int f : forbidden) {
            forbiddenSet.add(f);
        }
        Set<Integer> visited = new HashSet<>();
        q.offer(0);
        int step = 0;
        while (!q.isEmpty()) {
            int size = q.size();
            for (int i = 0; i < size; i++) {
                int cur = q.poll();
                if (cur == x) {
                    return step;
                }
                int next = cur + a;
                if (next == x || (next < x && !forbiddenSet.contains(next) && !visited.contains(next))) {
                    return step + 1;
                }
                if (next < x && !forbiddenSet.contains(next) && !visited.contains(next)) {
                    visited.add(next);
                    q.offer(next);
                }
                next = cur - b;
                if (next >= 0 && !forbiddenSet.contains(next) && !visited.contains(next)) {
                    visited.add(next);
                    q.offer(next);
                }
            }
            step++;
        }
        return -1;

=======

        int max = 6000;
        Set<Integer> set = new HashSet<>();
        for (int f : forbidden) {
            set.add(f);
        }
        Queue<int[]> q = new LinkedList<>();
        q.add(new int[]{0, 0});
        boolean[] visited = new boolean[max];
        visited[0] = true;
        int ans = 0;
        while (!q.isEmpty()) {
            int size = q.size();
            for (int i = 0; i < size; i++) {
                int[] cur = q.poll();
                if (cur[0] == x) {
                    return ans;
                }
                int next = cur[0] + a;
                if (next < max && !visited[next] && !set.contains(next)) {
                    visited[next] = true;
                    q.add(new int[]{next, 0});
                }
                if (cur[1] == 0) {
                    next = cur[0] - b;
                    if (next >= 0 && !visited[next] && !set.contains(next)) {
                        visited[next] = true;
                        q.add(new int[]{next, 1});
                    }
                }
            }
            ans++;
        }
        return -1;

=======

        int max = 6000;
        boolean[] forb = new boolean[max];
        for (int f : forbidden) forb[f] = true;
        Queue<int[]> q = new LinkedList<>();
        q.offer(new int[]{0, 0});
        boolean[] seen = new boolean[max];
        seen[0] = true;
        while (!q.isEmpty()) {
            int[] cur = q.poll();
            int pos = cur[0], step = cur[1];
            if (pos == x) return step;
            int[] next = new int[]{pos + a, pos - b};
            for (int i = 0; i < 2; i++) {
                if (next[i] >= 0 && next[i] < max && !forb[next[i]] && !seen[next[i]]) {
                    q.offer(new int[]{next[i], step + 1});
                    seen[next[i]] = true;
                    if (i == 1) forb[next[i]] = true;
                }
            }
        }
        return -1;

=======

        int[] dp = new int[x + 1];
        Arrays.fill(dp, Integer.MAX_VALUE);
        dp[0] = 0;
        Set<Integer> forbiddenSet = new HashSet<>();
        for (int f : forbidden) {
            forbiddenSet.add(f);
        }
        Queue<Integer> queue = new LinkedList<>();
        queue.offer(0);
        while (!queue.isEmpty()) {
            int cur = queue.poll();
            if (cur + a == x || cur - b == x) {
                return dp[cur] + 1;
            }
            if (cur + a < x && !forbiddenSet.contains(cur + a) && dp[cur + a] == Integer.MAX_VALUE) {
                dp[cur + a] = dp[cur] + 1;
                queue.offer(cur + a);
            }
            if (cur - b >= 0 && !forbiddenSet.contains(cur - b) && dp[cur - b] == Integer.MAX_VALUE) {
                dp[cur - b] = dp[cur] + 1;
                queue.offer(cur - b);
            }
        }
        return -1;

=======

        int max = 6000;
        int[] dp = new int[max];
        int[] visited = new int[max];
        Arrays.fill(dp, Integer.MAX_VALUE);
        Arrays.fill(visited, 0);
        for (int f : forbidden) {
            visited[f] = 1;
        }
        dp[0] = 0;
        Queue<Integer> q = new LinkedList<>();
        q.add(0);
        while (!q.isEmpty()) {
            int cur = q.poll();
            if (cur == x) {
                return dp[cur];
            }
            if (cur + a < max && visited[cur + a] == 0) {
                dp[cur + a] = Math.min(dp[cur + a], dp[cur] + 1);
                q.add(cur + a);
            }
            if (cur - b >= 0 && visited[cur - b] == 0) {
                dp[cur - b] = Math.min(dp[cur - b], dp[cur] + 1);
                q.add(cur - b);
            }
        }
        return -1;
