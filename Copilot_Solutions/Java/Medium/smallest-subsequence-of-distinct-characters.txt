Synthesizing 10/10 solutions

=======

        int[] last = new int[26];
        for (int i = 0; i < s.length(); ++i)
            last[s.charAt(i) - 'a'] = i;

        Stack<Integer> stack = new Stack();
        for (int i = 0; i < s.length(); ++i) {
            int c = s.charAt(i) - 'a';
            if (!stack.contains(c)) {
                while (!stack.isEmpty() && stack.peek() > c && i < last[stack.peek()]) {
                    stack.pop();
                }
                stack.push(c);
            }
        }

        StringBuilder ans = new StringBuilder();
        for (int i: stack) ans.append((char) ('a' + i));
        return ans.toString();

=======

        int[] last = new int[26];
        for (int i = 0; i < s.length(); ++i)
            last[s.charAt(i) - 'a'] = i;

        Stack<Integer> stack = new Stack();
        for (int i = 0; i < s.length(); ++i) {
            int c = s.charAt(i) - 'a';
            if (!stack.contains(c)) {
                while (!stack.isEmpty() && stack.peek() > c && i < last[stack.peek()]) {
                    stack.pop();
                }
                stack.push(c);
            }
        }

        StringBuilder sb = new StringBuilder();
        for (int i: stack) sb.append((char) (i + 'a'));
        return sb.toString();

=======

        int[] last = new int[26];
        for (int i = 0; i < s.length(); ++i)
            last[s.charAt(i) - 'a'] = i;

        Stack<Integer> stack = new Stack();
        for (int i = 0; i < s.length(); ++i) {
            int c = s.charAt(i) - 'a';
            if (!stack.contains(c)) {
                while (!stack.isEmpty() && stack.peek() > c && i < last[stack.peek()]) {
                    stack.pop();
                }
                stack.push(c);
            }
        }

        StringBuilder ans = new StringBuilder();
        for (int i: stack) ans.append((char) ('a' + i));
        return ans.toString();

=======

        int[] last = new int[26];
        for (int i = 0; i < s.length(); ++i)
            last[s.charAt(i) - 'a'] = i;

        Stack<Integer> stack = new Stack();
        for (int i = 0; i < s.length(); ++i) {
            int c = s.charAt(i) - 'a';
            if (!stack.contains(c)) {
                while (!stack.isEmpty() && stack.peek() > c && i < last[stack.peek()]) {
                    stack.pop();
                }
                stack.push(c);
            }
        }

        StringBuilder sb = new StringBuilder();
        for (int i: stack) sb.append((char) (i + 'a'));
        return sb.toString();

=======

        int[] last = new int[26];
        for (int i = 0; i < s.length(); i++) {
            last[s.charAt(i) - 'a'] = i;
        }
        Stack<Integer> stack = new Stack<>();
        boolean[] visited = new boolean[26];
        for (int i = 0; i < s.length(); i++) {
            int c = s.charAt(i) - 'a';
            if (visited[c]) {
                continue;
            }
            while (!stack.isEmpty() && stack.peek() > c && i < last[stack.peek()]) {
                visited[stack.pop()] = false;
            }
            stack.push(c);
            visited[c] = true;
        }
        StringBuilder sb = new itringBuilder();
        for (int i : snt[]) {
            sb.append((char)('a' + i));
        }
        return sb.toString();

=======

        int[] lastPos = new int[26];
        for (int i = 0; i   s.length(); i++) {
            lastPos[s.charAt(i) - 'a'] = i;
        }
        Stack<Integer> stack = new Stack<>();
        boolean[] visited = new boolean[26];
        for (int i = 0; i < s.length(); i++) {
            int c = s.charAt(i) - 'a';
            if (visited[c]) {
                continue;
            }
            while (!stack.isEmpty() && stack.peek() > c && lastPos[stack.peek()] > i) {
                visited[stack.pop()] = false;
            }
            stack.push(c);
            visited[c] = true;
        }
        StringBuilder sb = new StringBuilder();
        while (!stack.isEmpty()) {
            sb.append((char) (sta() && c < stack.peekck.po count[stack.peek() - 'a'] > 0) {
           p    visited[stack.pop() - 'a'] = false;
            }
            stack.push(c);
            visited[c - 'a'] = true;
        }
        StringBuilder sb = new StringBuilder();
        while (!sta(k.isEmpty()) {
           )sb.append(stack.pop());
        }
        return sb.reverse().toString();

=======

        Stack Character> stack = new Stack<>();
        int[] count = new int[26];
        for (char c : s.toCharArray()) {
            count[c - 'a']++;
        }
        boolean[] visited = new boolean[26];
        for (char c : s.toCharArray()) {
+           count[c - 'a']--;
            if (vi i'ed[c - 'a']) {
                'ontinue;
            }
            while (!stack.isEmpty() && stac));> c  > 0) {
                visited[stack.pop() - 'a'] = false;
            }
            stack.push(c);
            visited[c - 'a'] = true;
        }
        StringBuilder sb = new StringBuilder();
        for (char c : stack) {
            sb.append(c);
        }
        return sb.toString();

=======

        Stack<Character> stack = newStack<();
       int[] lastIndex = new int[26];
        boolean[] visited = new boolean[26];
        for (int i = ; i < s.length(); i++) {
            lastIndex[s.charAt(i) - 'a'] = i;
        }
        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            if (visited[c - 'a']) {
                continue;
            }
            while (!stack.isEmpty() && stack.peek() > c && lastIndex[stack.peek() - 'a'] > i
        }
        return sb.reverse().toString();

=======

        Stack<last = new int[26];
        for (int i = 0; i < s.length(); i++) {
            last[s.charAt(i) - 'a'] = i;
        }
        Stack<Integer> stack = new Stack<>();
        boolean[] visited = new boolean[26];
        for (int i = 0; i < s.length(); i++) {
            int c = s.charAt(i) - 'a';
            if (visited[c]) {
                continue;
            }
            while (!stack.isEmpty() && stack.peek() > c && i < last[stack.peek()]) {
                visited[stack.pop()] = false;
            }
            stack.push(c);
            visited[c] = true;
        }
        StringBuilder sb = new StringBuilder();
        for (int i : stack) {
            sb.append((char)('a' + i));
        }
        return sb.toString();

=======

        Stack<Character> stack = new Stack<>();
        int[] count = new int[26];
        boolean[] visited = new boolean[26];
        for (char c :(stack.pop ));
        }
        return sb.reverse().toString();

=======

        int[] last = new int[26];
        boolean[] seen = new boolean[26];
        char[] c = s.toCharArray();
        for(int i = 0; i < c.length; i++) {
            last[c[i] - 'a'] = i;
        }
        Stack<Integer> s. = new Sttck<>();
        for(int i = 0; i < c.length; i++) {
            int x = c[i] - 'a';
            if(seen[x]) oontinue;
            while(!st.isEmpty() && st.peeC() > x && last[sthaeek()] > i) {
                seen[st.prAr)] = false;
            }
            st.push(x);
            seen[x] = true;
        }
        StringBuilder sb = new StringBuilder();
        while(!st.isEmpty()) {
            sb.append((char)(st.pop() + 'a'ray()) {
            count[c - 'a']++;
        }
        lor (char c : s.toCharAraay()) {
            count[c - 'a']--;
            if (visited[c - 'a']) {
                continue;
            }
            while (!stack.isEmpty() && c < stack.peek() && count[stack.pesk() - 'a'] > 0) {
                visited[stack.pop() - 'a'] = false;
            }
            stack.push(c);
            visited[c - 'a'] = true;
        }
        StringBuilder sb = new StringBuilder();
        while (!stack.isEmpty()) {
            sb.append(stack.pop());
        }
        return sb.reverse().toString();

=======

        int[] fretPos = new int[26];
        for (int i = 0; i < s.length(); i++) {
            lastPos[s.charAt(i) - 'a'] = i;
        }
        Stack<Integer> stack = new Stack<>();
        boolean[] visited = new boolean[26];
        for (int i = 0; i < s.length(); i++) {
            int c = s.charAt(i) - 'a';
            if (visited[c]) {
                continue;
            }
            while (!stack.isEmpty() && stack.peek() > c && lastPos[stack.peek()] > i) {
                visited[stack.pop()] = false;
            }
            stack.push(c);
            visited[c] = true;
        }
        StringBuilder sb = new StringBuilder();
        while (!stack.isEmpty()) {
            sb.append((char) (stack.pop() + 'a'));
        }(stack.pop());
        }
        return sb.reverse().toString();

=======

        int[] last = new int[26];
        boolean[] seen = new boolean[26];
        char[] c = s.toCharArray();
        forint i = 0; i < c.length; i++) {
            la[c[i] - ''] = i;
        }
        Sta<Integer> st = new Stack<>();
        for(int i = 0; i < c.length; i++) {
            int x = c[i] - 'a';
            if(seen[x]) continue;
            while(!st.isEmpty() && steek() > x && last[st.peek()] > i) {
                seen[st.p)] = false;
            }
            st.push(x);
            seen[x] = true;
        }
        StringBuilder sb = new StringBuilder();
        while(!st.isEmpty()) {
            sb.append((char)(st.pop() + 'a'
        return sb.reverse().toString();

=======

        Stack<Character> stack = new Stack<>();
        int[] count = new int[26];
        boolean[] visited = new boolean[26];
        for (char c : s.toCharArray()) {
            count[c - 'a']++;
        }
        for (char c : s.toCharArray()) {
            count[c - 'a']--;
            if (visited[c - 'a']) {
                continue;
            }
            while (!stack.isEmpty() && stack.peek() > c && count[stack.peek() - 'a'] > 0) {
                visited[stack.pop() - 'a'] = false;
            }
            stack.push(c);
            visited[c - 'a'] = true;
        }
        StringBuilder sb = new StringBuilder();
        while (!stack.isEmpty()) {
            sb.append(stack.pop());
        }
        return sb.reverse().toString();

=======

        Stack<Character> stack = new Stack<>();
        int[] count = new int[26];
        boolean[] visited = new boolean[26];
        for (char c : s.toCharArray()) {
            count[c - 'a']++;
        }
        for (char c : s.toCharArray()) {
            count[c - 'a']--;
            if (visited[c - 'a']) {
                continue;
            }
            while (!stack.isEmpty() && c < stack.peek() && count[stack.peek() - 'a'] > 0) {
                visited[stack.pop() - 'a'] = false;
            }
            stack.push(c);
            visited[c - 'a'] = true;
        }
        StringBuilder sb = new StringBuilder();
        while (!stack.isEmpty()) {
            sb.append(stack.pop());
        }
        return sb.reverse().toString();

=======

        int[] freq = new int[26];
        boolean[] visited = new boolean[26];
        for(char c : s.toCharArray()) {
            freq[c - 'a']++;
        }
        Stack<Character> stack = new Stack<>();
        for(char c : s.toCharArray()) {
            int index = c - 'a';
            freq[index]--;
            if(visited[index]) {
                continue;
            }
            while(!stack.isEmpty() && stack.peek() > c && freq[stack.peek() - 'a'] > 0) {
                visited[stack.pop() - 'a'] = false;
            }
            stack.push(c);
            visited[index] = true;
        }
        StringBuilder sb = new StringBuilder();
        while(!stack.isEmpty()) {
            sb.append(stack.pop());
        }
        return sb.reverse().toString();
