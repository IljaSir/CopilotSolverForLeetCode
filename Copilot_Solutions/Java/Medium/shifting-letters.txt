Synthesizing 10/10 solutions

=======

        int sum = 0;
        for (int i = shifts.length - 1; i >= 0; i--) {
            sum += shifts[i];
            sum %= 26;
            shifts[i] = sum;
        }
        char[] chars = s.toCharArray();
        for (int i = 0; i < chars.length; i++) {
            chars[i] = (char) ((chars[i] - 'a' + shifts[i]) % 26 + 'a');
        }
        return new String(chars);

=======

        char[] chars = s.toCharArray();
        int sum = 0;
        for (int i = shifts.length - 1; i >= 0; i--) {
            sum = (sum + shifts[i]) % 26;
            chars[i] = (char) ((chars[i] - 'a' + sum) % 26 + 'a');
        }
        return new String(chars);

=======

        int[] sum = new int[shifts.length];
        sum[shifts.length - 1] = shifts[shifts.length - 1] % 26;
        for (int i = shifts.length - 2; i >= 0; i--) {
            sum[i] = (sum[i + 1] + shifts[i]) % 26;
        }
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < s.length(); i++) {
            int c = s.charAt(i) - 'a';
            c = (c + sum[i]) % 26;
            char ch = (char) (c + 'a');
            sb.append(ch);
        }
        return sb.toString();

=======

        int n = s.length();
        int[] sum = new int[n];
        sum[n - 1] = shifts[n - 1];
        for (int i = n - 2; i >= 0; i--) {
            sum[i] = sum[i + 1] + shifts[i];
        }
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < n; i++) {
            int num = (s.charAt(i) - 'a' + sum[i]) % 26;
            sb.append((char) (num + 'a'));
        }
        return sb.toString();

=======

        int n = s.length();
        long[] sum = new long[n];
        sum[n-1] = shifts[n-1];
        for (int i = n-2; i >= 0; i--) {
            sum[i] = sum[i+1] + shifts[i];
        }
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < n; i++) {
            int c = s.charAt(i) - 'a';
            c = (int)((c + sum[i]) % 26);
            sb.append((char)('a' + c));
        }
        return sb.toString();

=======

        int sum = 0;
        for(int i = shifts.length - 1; i >= 0; i--){
            sum += shifts[i];
            shifts[i] = sum;
        }
        StringBuilder sb = new StringBuilder();
        for(int i = 0; i < s.length(); i++){
            sb.append((char) ((s.charAt(i) - 'a' + shifts[i]) % 26 + 'a'));
        }
        return sb.toString();

=======

        char[] chars = s.toCharArray();
        int len = shifts.length;
        for (int i = len - 2; i >= 0; i--) {
            shifts[i] += shifts[i + 1];
        }
        for (int i = 0; i < len; i++) {
            int newChar = (chars[i] - 'a' + shifts[i]) % 26;
            chars[i] = (char) (newChar + 'a');
        }
        return new String(chars);

=======

        for(int i = shifts.length - 2; i >= 0; i--) {
            shifts[i] += shifts[i + 1];
            shifts[i] %= 26;
        }
        char[] result = new char[s.length()];
        for(int i = 0; i < s.length(); i++) {
            int shift = shifts[i];
            int index = s.charAt(i) - 'a';
            int shiftedIndex = (index + shift) % 26;
            result[i] = (char) ('a' + shiftedIndex);
        }
        return new String(result);

=======

        int[] sum = new int[shifts.length];
        int sumOfShifts = 0;
        for (int i = shifts.length - 1; i >= 0; i--) {
            sumOfShifts += shifts[i];
            sumOfShifts %= 26;
            sum[i] = sumOfShifts;
        }
        char[] chars = s.toCharArray();
        for (int i = 0; i < chars.length; i++) {
            chars[i] = (char) ('a' + (chars[i] - 'a' + sum[i]) % 26);
        }
        return new String(chars);

=======

        int n = s.length();
        char[] ch = s.toCharArray();
        int sum = 0;
        for(int i=shifts.length-1;i>=0;i--){
            sum = (sum+shifts[i])%26;
            ch[i] = (char)((ch[i]-'a'+sum)%26+'a');
        }
        return new String(ch);
