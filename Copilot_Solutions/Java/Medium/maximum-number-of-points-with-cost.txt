Synthesizing 10/10 solutions

=======

        int m = points.length;
        int n = points[0].length;
        long[] dp = new long[n];
        for (int i = 0; i < n; i++) {
            dp[i] = points[0][i];
        }
        for (int i = 1; i < m; i++) {
            long[] ndp = new long[n];
            long max = Long.MIN_VALUE;
            for (int j = 0; j < n; j++) {
                max = Math.max(max, dp[j] + j);
                ndp[j] = Math.max(ndp[j], max - j + points[i][j]);
            }
            max = Long.MIN_VALUE;
            for (int j = n - 1; j >= 0; j--) {
                max = Math.max(max, dp[j] - j);
                ndp[j] = Math.max(ndp[j], max + j + points[i][j]);
            }
            dp = ndp;
        }
        long ans = 0;
        for (long x : dp) {
            ans = Math.max(ans, x);
        }
        return ans;

=======

        int m = points.length;
        int n = points[0].length;
        long[] dp = new long[n];
        for (int i = 0; i < n; i++) {
            dp[i] = points[0][i];
        }
        for (int i = 1; i < m; i++) {
            long[] left = new long[n];
            long[] right = new long[n];
            left[0] = dp[0];
            for (int j = 1; j < n; j++) {
                left[j] = Math.max(left[j - 1], dp[j] + j);
            }
            right[n - 1] = dp[n - 1] - (n - 1);
            for (int j = n - 2; j >= 0; j--) {
                right[j] = Math.max(right[j + 1], dp[j] - j);
            }
            for (int j = 0; j < n; j++) {
                dp[j] = Math.max(left[j] - j, right[j] + j) + points[i][j];
            }
        }
        long ans = 0;
        for (int i = 0; i < n; i++) {
            ans = Math.max(ans, dp[i]);
        }
        return ans;

=======

        int m = points.length;
        int n = points[0].length;
        long[] dp = new long[n];
        for (int i = 0; i < n; i++) {
            dp[i] = points[0][i];
        }
        for (int i = 1; i < m; i++) {
            long[] dp2 = new long[n];
            long max = Long.MIN_VALUE;
            for (int j = 0; j < n; j++) {
                max = Math.max(max, dp[j] + j);
                dp2[j] = max - j;
            }
            max = Long.MIN_VALUE;
            for (int j = n - 1; j >= 0; j--) {
                max = Math.max(max, dp[j] - j);
                dp2[j] = Math.max(dp2[j], max + j);
            }
            for (int j = 0; j < n; j++) {
                dp2[j] += points[i][j];
            }
            dp = dp2;
        }
        long ans = 0;
        for (long x : dp) {
            ans = Math.max(ans, x);
        }
        return ans;

=======

        int m = points.length;
        int n = points[0].length;
        long[][] dp = new long[m][n];
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                dp[i][j] = points[i][j];
                if (i > 0) {
                    dp[i][j] += Math.max(dp[i - 1][j], Math.max(j > 0 ? dp[i - 1][j - 1] : Long.MIN_VALUE, j < n - 1 ? dp[i - 1][j + 1] : Long.MIN_VALUE));
                }
            }
        }
        long ans = 0;
        for (int j = 0; j < n; j++) {
            ans = Math.max(ans, dp[m - 1][j]);
        }
        return ans;

=======

        int m = points.length;
        int n = points[0].length;
        long[][] dp = new long[m][n];
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                dp[i][j] = points[i][j];
                if (i > 0) {
                    long max = dp[i - 1][j];
                    for (int k = j - 1; k >= 0; k--) {
                        max = Math.max(max, dp[i - 1][k] - (j - k));
                    }
                    for (int k = j + 1; k < n; k++) {
                        max = Math.max(max, dp[i - 1][k] - (k - j));
                    }
                    dp[i][j] += max;
                }
            }
        }
        long res = 0;
        for (int i = 0; i < n; i++) {
            res = Math.max(res, dp[m - 1][i]);
        }
        return res;

=======

        int m = points.length;
        int n = points[0].length;
        long[][] dp = new long[m][n];
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (i == 0) {
                    dp[i][j] = points[i][j];
                } else {
                    long max = 0;
                    for (int k = 0; k < n; k++) {
                        max = Math.max(max, dp[i - 1][k] - Math.abs(k - j));
                    }
                    dp[i][j] = max + points[i][j];
                }
            }
        }
        long res = 0;
        for (int i = 0; i < n; i++) {
            res = Math.max(res, dp[m - 1][i]);
        }
        return res;

=======

        int m = points.length, n = points[0].length;
        long[] dp = new long[n];
        for (int i = 0; i < m; i++) {
            long[] ndp = new long[n];
            long max = Long.MIN_VALUE;
            for (int j = 0; j < n; j++) {
                max = Math.max(max, dp[j] + j);
                ndp[j] = max - j + points[i][j];
            }
            max = Long.MIN_VALUE;
            for (int j = n - 1; j >= 0; j--) {
                max = Math.max(max, dp[j] - j);
                ndp[j] = Math.max(ndp[j], max + j + points[i][j]);
            }
            dp = ndp;
        }
        long ans = 0;
        for (long x : dp) ans = Math.max(ans, x);
        return ans;

=======

        int m = points.length;
        int n = points[0].length;
        long[] dp = new long[n];
        for (int i = 0; i < m; i++) {
            long[] ndp = new long[n];
            long[] lmax = new long[n];
            long[] rmax = new long[n];
            lmax[0] = dp[0];
            for (int j = 1; j < n; j++) {
                lmax[j] = Math.max(lmax[j - 1] - 1, dp[j]);
            }
            rmax[n - 1] = dp[n - 1];
            for (int j = n - 2; j >= 0; j--) {
                rmax[j] = Math.max(rmax[j + 1] - 1, dp[j]);
            }
            for (int j = 0; j < n; j++) {
                ndp[j] = points[i][j] + Math.max(lmax[j], rmax[j]);
            }
            dp = ndp;
        }
        long ans = 0;
        for (int i = 0; i < n; i++) {
            ans = Math.max(ans, dp[i]);
        }
        return ans;

=======

        int m = points.length;
        int n = points[0].length;
        long[][] dp = new long[2][n];
        for (int i = 0; i < n; i++) {
            dp[0][i] = points[0][i];
        }
        for (int i = 1; i < m; i++) {
            long[] left = new long[n];
            long[] right = new long[n];
            left[0] = dp[(i - 1) % 2][0];
            for (int j = 1; j < n; j++) {
                left[j] = Math.max(left[j - 1] - 1, dp[(i - 1) % 2][j]);
            }
            right[n - 1] = dp[(i - 1) % 2][n - 1];
            for (int j = n - 2; j >= 0; j--) {
                right[j] = Math.max(right[j + 1] - 1, dp[(i - 1) % 2][j]);
            }
            for (int j = 0; j < n; j++) {
                dp[i % 2][j] = Math.max(left[j], right[j]) + points[i][j];
            }
        }
        long ans = 0;
        for (int i = 0; i < n; i++) {
            ans = Math.max(ans, dp[(m - 1) % 2][i]);
        }
        return ans;

=======

        int m = points.length, n = points[0].length;
        long[] dp = new long[n];
        for (int i = 0; i < m; i++) {
            long[] next = new long[n];
            long max = 0;
            for (int j = 0; j < n; j++) {
                max = Math.max(max, dp[j] + j);
                next[j] = max - j + points[i][j];
            }
            max = 0;
            for (int j = n - 1; j >= 0; j--) {
                max = Math.max(max, dp[j] - j);
                next[j] = Math.max(next[j], max + j + points[i][j]);
            }
            dp = next;
        }
        long ans = 0;
        for (long x : dp) ans = Math.max(ans, x);
        return ans;
