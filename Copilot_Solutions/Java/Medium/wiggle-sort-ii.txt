Synthesizing 10/10 solutions

=======

        int n = nums.length;
        int[] tmp = nums.clone();
        Arrays.sort(tmp);
        int j = n - 1;
        for (int i = 1; i < n; i += 2) {
            nums[i] = tmp[j--];
        }
        for (int i = 0; i < n; i += 2) {
            nums[i] = tmp[j--];
        }

=======

        int n = nums.length;
        int[] temp = Arrays.copyOf(nums, n);
        Arrays.sort(temp);
        int i = 0, j = (n + 1) / 2, k = n - 1;
        while (i < n) {
            nums[i++] = temp[k--];
            if (i < n) {
                nums[i++] = temp[j++];
            }
        }

=======

        Arrays.sort(nums);
        int[] temp = new int[nums.length];
        int mid = (nums.length - 1) / 2;
        int index = 0;
        for (int i = 0; i <= mid; i++) {
            temp[index] = nums[mid - i];
            if (index + 1 < nums.length) {
                temp[index + 1] = nums[nums.length - 1 - i];
            }
            index += 2;
        }
        for (int i = 0; i < nums.length; i++) {
            nums[i] = temp[i];
        }

=======

        int[] temp = new int[nums.length];
        for(int i = 0; i < nums.length; i++)
            temp[i] = nums[i];
        Arrays.sort(temp);
        int index = nums.length - 1;
        for(int i = 1; i < nums.length; i += 2)
            nums[i] = temp[index--];
        for(int i = 0; i < nums.length; i += 2)
            nums[i] = temp[index--];

=======

        Arrays.sort(nums);
        int[] temp = nums.clone();
        int n = nums.length;
        int j = n - 1;
        for (int i = 1; i < n; i += 2) {
            nums[i] = temp[j--];
        }
        for (int i = 0; i < n; i += 2) {
            nums[i] = temp[j--];
        }

=======

        int n = nums.length;
        int[] sorted = Arrays.copyOf(nums, n);
        Arrays.sort(sorted);
        int i = 1;
        for (int j = n - 1; j >= 0; j -= 2) {
            nums[i] = sorted[j];
            i += 2;
        }
        i = 0;
        for (int j = n - 2; j >= 0; j -= 2) {
            nums[i] = sorted[j];
            i += 2;
        }

=======

        int n = nums.length;
        int[] temp = Arrays.copyOf(nums, n);
        Arrays.sort(temp);
        int i = n - 1, j = 0, k = 0;
        while (i > n / 2 - 1) {
            nums[k++] = temp[i--];
            if (k < n) {
                nums[k++] = temp[j++];
            }
        }
        if (n % 2 == 1) {
            nums[k] = temp[j];
        }

=======

        int[] temp = nums.clone();
        Arrays.sort(temp);
        int n = nums.length;
        int mid = (n - 1) / 2;
        int index = 0;
        for(int i = 0; i <= mid; i++){
            nums[index] = temp[mid - i];
            if(index + 1 < n){
                nums[index + 1] = temp[n - i - 1];
            }
            index += 2;
        }

=======

        int[] arr = Arrays.copyOf(nums, nums.length);
        Arrays.sort(arr);
        int i = nums.length - 1;
        int j = 0;
        int k = 0;
        while (i >= 0) {
            if (k % 2 == 0) {
                nums[k] = arr[i--];
            } else {
                nums[k] = arr[j++];
            }
            k++;
        }

=======

        // O(nlogn)
        // Arrays.sort(nums);
        // int[] ans = new int[nums.length];
        // int i = 0, j = nums.length - 1;
        // int k = 0;
        // while (i < j) {
        //     ans[k++] = nums[i++];
        //     ans[k++] = nums[j--];
        // }
        // if (i == j) ans[k] = nums[i];
        // for (int l = 0; l < nums.length; l++) {
        //     nums[l] = ans[l];
        // }

        // O(n)
        int n = nums.length;
        int median = findKthLargest(nums, (n + 1) / 2);
        int left = 0, i = 0, right = n - 1;
        while (i <= right) {
            if (nums[newIndex(i, n)] > median) {
                swap(nums, newIndex(left++, n), newIndex(i++, n));
            } else if (nums[newIndex(i, n)] < median) {
                swap(nums, newIndex(right--, n), newIndex(i, n));
            } else {
                i++;
            }
        }
    }

    public int newIndex(int index, int n) {
        return (1 + 2 * index) % (n | 1);
    }

    public int findKthLargest(int[] nums, int k) {
        int n = nums.length;
        return quickSelect(nums, 0, n - 1, n - k);
    }

    public int quickSelect(int[] nums, int lo, int hi, int k) {
        int i = lo, j = hi, pivot = nums[hi];
        while (i < j) {
            if (nums[i++] > pivot) swap(nums, --i, --j);
        }
        swap(nums, i, hi);
        int m = i - lo + 1;
        if (m == k) return nums[i];
        else if (m > k) return quickSelect(nums, lo, i - 1, k);
        else return quickSelect(nums, i + 1, hi, k - m);
