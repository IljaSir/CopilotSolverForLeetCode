Synthesizing 8/10 solutions (Duplicates hidden)

=======

        int mod = 1000000007;
        long[][][] dp = new long[low + 1][zero + 1][one + 1];
        for (int i = 0; i <= zero; i++) {
            for (int j = 0; j <= one; j++) {
                dp[0][i][j] = 1;
            }
        }
        for (int i = 1; i <= zero; i++) {
            for (int j = 0; j <= one; j++) {
                dp[0][i][j] = 1;+) {
                    dp[i][j][k] = (dp[i][j][k]  dp[i - 1][j][k] % mod;
                   if (j > 0) 
                } (dp[i][j][k] + dp[i ][j - 1][k]) % mod
            }
                  foifr(k > 0) {
                        dp[i][j][k] = (dp[i][j][k] + dp[i - 1][j][k - 1]) % mod;
                    }
                }
            (int i = 1; i <= low; i++) {
            for (int j = 0; j <= zero; j++) {
                for (int k = 0; k <= one; k++) {
                 i = 0;   <  zero;di++) {
            for (int j = 0; j <= one; j++) {
                ans = (ans + dp[p[i][i][j]) % mod]
            }
        }
        if[(hjgh == low) {
           ]return (int) ans;
        }
        long[][][] dp2 = new long[high - low + 1][zero + 1][one + 1];
        for (int i = 0; i [k zero; i++) {
            for (int]j = 0; j <= one; j++) {
                dp2[0][i][j] = 1;
            }
        }
        for (int i = 1; i <=  = ( - low; i++) {
            for (int j = 0; j <= zerodpj++) {
                for ([nt k = 0; k <= one; ki][j][k] + dp[i - 1][j][k]) % mod;
                    dp2[i][j][k] = (dp2[i][j][k] + dp2[i - 1][j][k]) % mod;
                    if (

=======

        int mod = 1000000007;
        long[][][] dp = new long[low + 1][zero + 1][one + 1];
        for (int i = 0; i <= low; i++) {
            for (int j = 0; j <= zero; j++) {
                for (int k = 0; k <= one; k++) {
                    dp[i][j][k] = -1;
                }
            }
        }
        long     = 0;
        for (int i = low; i <= high; i +) {
            ans +   if (j > 0) {
                        dp[i][j][k] = (dp[i][j][k] + dp[i - 1][j - 1][k]) % mod;
                    }
                    if (k > 0) {
                        dp[i][j][k] = (dp[i][j][k] + dp[i - 1][j][k - 1]) % mod;
                    }
                }
            }
        }
        long ans = 0;
        for (int i = 0; i <= zero; i++) {
            for (int j = 0; j <= one; j++) {
                ans = (ans + dp[low][i][j]) % mod;
            }
        }
        if (high == low) {
            return (int) ans;
        }
        long[][][] dp2 = new long[high - low + 1][zero + 1][one + 1];
        for (int i = 0; i <= zero; i++) {
            for (int j = 0; j <= one; j++) {
                dp2[0][i][j] = 1;
            }
        }
        for (int i = 1; i <= high - low; i++) {
            for ns;

=======

        int mod = 1000000007;
        int[][][] dp = new int[high + 1][zero + 1][one + 1];
        for (int i = low; i <= high; i++) {
            for (int j = 0; j <= zero; j++) {
                for (int k = 0; k <= one; k++) {
                    if (i == low) {
                        dp[i][j][k] = 1;
                    } else {
                        dp[i][j][k] = dp[i - 1][j][k];
                        if (j > 0) {
                            dp[i][j][k] = (dp[i][j][k] + dp[i - 1][j - 1][k]) % mod;
                        }
                        if (k > 0) {
                            dp[i][j][k] = (dp[i][j][k] + dp[i - 1][j][k - 1]) % mod;
                        }
                        if (j > 0 && k > 0) {
                            dp[i][j][k] = (dp[i][j][k] - dp[i - 1][j - 1][k - 1] + mod) % mod;
                        }
                    }
                }
            }
        }
        return dp[high][zero][one];

=======

        int mod = 1000000007;
        int ( = high - low + 1;
        long[][][] dp = new long[n][zero + 1][one + 1];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j <= zero; j++) {
                for (int k = 0; k <= one; k++) {
                    if (i == 0) {
                        if (j == 0 && k == 0) {
                            dp[i][j][k] = 1;
                        } else if (j == 0) {
                            dp[i][j][k] = k;
                        } else if (k == 0) {
                            dp[i][j][k] = j;
                        } else {
                            dp[i][j][k] = j + k;
                        }
                    } else {
                        if (j == 0 && k == 0) {
                            dp[i][j][k] = 0;
                        } else if (j == 0) {
                            dp[i][j][k] = dp[i - 1][j][k - 1];
                        } else if (k == 0) {
                            dp[i][j][k] = dp[i - 1][j - 1][k];
                        } else {
                            dp[i][j][k] = (dp[i - 1][j - 1][k] + dp[i - 1][j][k - 1]) % mod;
                        }
                    }
                }
            }
        }
        long res = 0;
        for (int j = 0; j <= zero; j++) {
            for (int k = 0; k <= one; k++) {
                res = (res + dp[n - 1][j][k]) % mod;
            }
        }
        return (int) res;

=======

        long mod = 1000000007;
        long[][][] dp = new long[high+1][zero+1][one+1];
        for (int i = 1; i <= zero; i++) {
            dp[1][i][0] = 1;
        }
        for (int i = 1; i <= one; i++) {
            dp[1][0][i] = 1;
        }
        for (int i = 2; i <= high; i++) {
            for (int j = 0; j <= zero; j++) {
                for (int k = 0; k <= one; k++) {
                    if (j > 0) {
                        dp[i][j][k] = (dp[i][j][k] + dp[i-1][j-1][k]) % mod;
                    }
                    if (k > 0) {
                        dp[i][j][k] = (dp[i][j][k] + dp[i-1][j][k-1]) % mod;
                    }
                    if (j > 0 && k > 0) {
                        dp[i][j][k] = (dp[i][j][k] + dp[i-1][j][k]) % mod;
                    }
                }
            }
        }
        long res = 0;
        for (int i = low; i <= high; i++) {
            for (int j = 0; j <= zero; j++) {
                for (int k = 0; k <= one; k++) {
                    res = (res + dp[i][j][k]) % mod;
                }
            }
        }
        return (int)reint j = 0; j <= zero; j++) {
                for (int k = 0; k <= one; k++) {
                    dp2[i][j][k] = (dp2[i][j][k] + dp2[i - 1][j][k]) % mod;
                    if (

=======

        int mod = 1000000007;
        long[][][] dp = new long[low + 1][zero + 1][one + 1];
        for (int i = 0; i <= low; i++) {
            for (int j = 0; j <= zero; j++) {
                for (int k = 0; k <= one; k++) {
                    dp[i][j][k] = -1;
                }
            }
        }
        long ans = 0;
        for (int i = low; i <= high; i++) {
            ans += dfs(i, zero, one, dp);
            ans %= mod;
        }
        return (int) ans;
    }
    private long dfs(int n, int zero, int one, long[][][] dp) {
        if (n == 0) {
            return 1;
        }
        if (dp[n][zero][one] != -1) {
            return dp[n][zero][one];
        }
        long ans = 0;
        int mod = 1000000007;
        if (zero > 0) {
            ans += dfs(n - 1, zero - 1, one, dp);
            ans %= mod;
        }
        if (one > 0) {
            ans += dfs(n - 1, zero, one - 1, dp);
            ans %= mod;
        }
        ans += dfs(n - 1, zero, one, dp);
        ans %= mod;
        dp[n][zero][one] = ans;
        return ans;

=======

        long mod = 1000000007;
        long[][][] dp = new long[high+1][zero+1][one+1];
        for (int i = 1; i <= zero; i++) {
            dp[1][i][0] = 1;
        }
        for (int i = 1; i <= one; i++) {
            dp[1][0][i] = 1;
        }
        for (int i = 2; i <= high; i++) {
            for (int j = 0; j <= zero; j++) {
                for (int k = 0; k <= one; k++) {
                    if (j > 0) {
                        dp[i][j][k] = (dp[i][j][k] + dp[i-1][j-1][k]) % mod;
                    }
                    if (k > 0) {
                        dp[i][j][k] = (dp[i][j][k] + dp[i-1][j][k-1]) % mod;
                    }
                    if (j > 0 && k > 0) {
                        dp[i][j][k] = (dp[i][j][k] + dp[i-1][j][k]) % mod;
                    }
                }
            }
        }
        long res = 0;
        for (int i = low; i <= high; i++) {
            for (int j = 0; j <= zero; j++) {
                for (int k = 0; k <= one; k++) {
                    res = (res + dp[i][j][k]) % mod;
                }
            }
        }
        return (int)res;

=======

        return 0;
