Synthesizing 10/10 solutions

=======

        Map<Integer, Integer> map = new HashMap<>();
        for (int[] match : matches) {
            map.put(match[0], map.getOrDefault(match[0], 0) + 1);
            map.put(match[1], map.getOrDefault(match[1], 0));
        }
        List<List<Integer>> res = new ArrayList<>();
        res.add(new ArrayList<>());
        res.add(new ArrayList<>());
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() == 0) {
                res.get(0).add(entry.getKey());
            } else if (entry.getValue() == 1) {
                res.get(1).add(entry.getKey());
            }
        }
        return res;

=======

        List<List<Integer>> result = new ArrayList<>();
        Set<Integer> winners = new HashSet<>();
        Set<Integer> losers = new HashSet<>();
        for (int[] match : matches) {
            winners.add(match[0]);
            losers.add(match[1]);
        }
        result.add(new ArrayList<>(winners));
        result.add(new ArrayList<>(losers));
        return result;

=======

        List<List<Integer>> result = new ArrayList<>();
        Set<Integer> winners = new HashSet<>();
        Set<Integer> losers = new HashSet<>();
        for (int[] match : matches) {
            winners.add(match[0]);
            losers.add(match[1]);
        }
        List<Integer> winnerList = new ArrayList<>(winners);
        List<Integer> loserList = new ArrayList<>(losers);
        Collections.sort(winnerList);
        Collections.sort(loserList);
        result.add(winnerList);
        result.add(loserList);
        return result;

=======

        HashMap<Integer, Integer> map = new HashMap<>();
        for (int i = 0; i < matches.length; i++) {
            map.put(matches[i][0], map.getOrDefault(matches[i][0], 0) + 1);
            map.put(matches[i][1], map.getOrDefault(matches[i][1], 0));
        }
        List<List<Integer>> ans = new ArrayList<>();
        ans.add(new ArrayList<>());
        ans.add(new ArrayList<>());
        for (int key : map.keySet()) {
            if (map.get(key) == 0) {
                ans.get(0).add(key);
            } else if (map.get(key) == 1) {
                ans.get(1).add(key);
            }
        }
        return ans;

=======

        HashMap<Integer, Integer> map = new HashMap<>();
        for (int i = 0; i < matches.length; i++) {
            int winner = matches[i][0];
            int loser = matches[i][1];
            map.put(loser, map.getOrDefault(loser, 0) + 1);
        }
        List<List<Integer>> res = new ArrayList<>();
        List<Integer> winners = new ArrayList<>();
        List<Integer> losers = new ArrayList<>();
        for (int i = 0; i < matches.length; i++) {
            int winner = matches[i][0];
            int loser = matches[i][1];
            if (!map.containsKey(winner)) {
                winners.add(winner);
            }
            if (map.getOrDefault(loser, 0) == 1) {
                losers.add(loser);
            }
        }
        res.add(winners);
        res.add(losers);
        return res;

=======

        int max = 0;
        for (int[] match : matches) {
            max = Math.max(max, match[0]);
            max = Math.max(max, match[1]);
        }
        int[] wins = new int[max + 1];
        int[] losses = new int[max + 1];
        for (int[] match : matches) {
            wins[match[0]]++;
            losses[match[1]]++;
        }
        List<Integer> noLosses = new ArrayList<>();
        List<Integer> oneLoss = new ArrayList<>();
        for (int i = 1; i <= max; i++) {
            if (losses[i] == 0) {
                noLosses.add(i);
            } else if (losses[i] == 1) {
                oneLoss.add(i);
            }
        }
        List<List<Integer>> result = new ArrayList<>();
        result.add(noLosses);
        result.add(oneLoss);
        return result;

=======

        List<List<Integer>> result = new ArrayList<>();
        result.add(new ArrayList<>());
        result.add(new ArrayList<>());
        Map<Integer, Integer> map = new HashMap<>();
        for (int[] match : matches) {
            int winner = match[0];
            int loser = match[1];
            map.put(loser, map.getOrDefault(loser, 0) + 1);
        }
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() == 0) {
                result.get(0).add(entry.getKey());
            } else if (entry.getValue() == 1) {
                result.get(1).add(entry.getKey());
            }
        }
        return result;

=======

        List<List<Integer>> res = new ArrayList<>();
        Map<Integer, Integer> map = new HashMap<>();
        for (int[] match : matches) {
            int winner = match[0];
            int loser = match[1];
            map.put(loser, map.getOrDefault(loser, 0) + 1);
        }
        List<Integer> winners = new ArrayList<>();
        List<Integer> losers = new ArrayList<>();
        for (int key : map.keySet()) {
            if (map.get(key) == 0) {
                winners.add(key);
            } else if (map.get(key) == 1) {
                losers.add(key);
            }
        }
        res.add(winners);
        res.add(losers);
        return res;

=======

        int[] playerWins = new int[100001];
        int[] playerLosses = new int[100001];
        for (int[] match : matches) {
            playerWins[match[0]]++;
            playerLosses[match[1]]++;
        }
        List<Integer> winners = new ArrayList<>();
        List<Integer> losers = new ArrayList<>();
        for (int i = 1; i < 100001; i++) {
            if (playerWins[i] > 0 && playerLosses[i] == 0) {
                winners.add(i);
            } else if (playerLosses[i] == 1) {
                losers.add(i);
            }
        }
        List<List<Integer>> result = new ArrayList<>();
        result.add(winners);
        result.add(losers);
        return result;

=======

        int n = matches.length;
        int[] win = new int[n+1];
        int[] lose = new int[n+1];
        for(int i=0;i<n;i++) {
            win[matches[i][0]]++;
            lose[matches[i][1]]++;
        }
        List<List<Integer>> result = new ArrayList<>();
        List<Integer> list1 = new ArrayList<>();
        List<Integer> list2 = new ArrayList<>();
        for(int i=1;i<=n;i++) {
            if(win[i] == 0) {
                list1.add(i);
            }
            if(lose[i] == 1) {
                list2.add(i);
            }
        }
        result.add(list1);
        result.add(list2);
        return result;
