Synthesizing 10/10 solutions

=======

        int n = edges.length;
        int[] scores = new int[n];
        for (int i = 0; i < n; i++) {
            scores[edges[i]] += i;
        }
        int maxScore = 0;
        int maxNode = 0;
        for (int i = 0; i < n; i++) {
            if (scores[i] > maxScore) {
                maxScore = scores[i];
                maxNode = i;
            }
        }
        return maxNode;

=======

        int n = edges.length;
        int[] scores = new int[n];
        for (int i = 0; i < n; i++) {
            scores[edges[i]]++;
        }
        int max = 0;
        int maxIndex = 0;
        for (int i = 0; i < n; i++) {
            if (scores[i] > max) {
                max = scores[i];
                maxIndex = i;
            }
        }
        return maxIndex;

=======

        int n = edges.length;
        int[] scores = new int[n];
        for (int i = 0; i < n; i++) {
            scores[edges[i]]++;
        }
        int maxScore = 0;
        int maxIndex = -1;
        for (int i = n - 1; i >= 0; i--) {
            if (scores[i] > maxScore) {
                maxScore = scores[i];
                maxIndex = i;
            }
        }
        return maxIndex;

=======

        int[] score = new int[edges.length];
        for (int i = 0; i < edges.length; i++) {
            score[edges[i]] += i;
        }
        int maxScore = 0;
        int maxScoreIndex = 0;
        for (int i = 0; i < score.length; i++) {
            if (score[i] > maxScore) {
                maxScore = score[i];
                maxScoreIndex = i;
            }
        }
        return maxScoreIndex;

=======

        int[] scores = new int[edges.length];
        for (int i = 0; i < edges.length; i++) {
            scores[edges[i]] += i;
        }
        int max = 0;
        int maxIndex = 0;
        for (int i = 0; i < edges.length; i++) {
            if (scores[i] > max) {
                max = scores[i];
                maxIndex = i;
            }
        }
        return maxIndex;
    }
}

=======

        int n = edges.length;
        int[] degree = new int[n];
        for (int i = 0; i < n; i++) {
            degree[edges[i]]++;
        }
        int[] score = new int[n];
        for (int i = 0; i < n; i++) {
            score[edges[i]] += i;
        }
        int max = 0, maxIndex = 0;
        for (int i = 0; i < n; i++) {
            if (degree[i] == 0) {
                continue;
            }
            if (score[i] > max) {
                max = score[i];
                maxIndex = i;
            }
        }
        return maxIndex;

=======

        int[] score = new int[edges.length];
        for (int i = 0; i < edges.length; i++) {
            score[edges[i]] += i;
        }
        int max = 0;
        int index = 0;
        for (int i = 0; i < edges.length; i++) {
            if (score[i] > max) {
                max = score[i];
                index = i;
            }
        }
        return index;

=======

        int[] inDegree = new int[edges.length];
        for (int i = 0; i < edges.length; i++) {
            inDegree[edges[i]]++;
        }
        int maxScore = 0;
        int maxScoreNode = 0;
        for (int i = 0; i < inDegree.length; i++) {
            if (inDegree[i] > maxScore) {
                maxScore = inDegree[i];
                maxScoreNode = i;
            }
        }
        return maxScoreNode;

=======

        int[] edgeScore = new int[edges.length];
        for (int i = 0; i < edges.length; i++) {
            edgeScore[edges[i]]++;
        }
        int max = 0;
        int index = 0;
        for (int i = 0; i < edgeScore.length; i++) {
            if (edgeScore[i] > max) {
                max = edgeScore[i];
                index = i;
            }
        }
        return index;

=======

        int max = 0, maxIndex = 0;
        int[] scores = new int[edges.length];
        for (int i = 0; i < edges.length; i++) {
            scores[edges[i]]++;
        }
        for (int i = 0; i < edges.length; i++) {
            if (scores[i] > max) {
                max = scores[i];
                maxIndex = i;
            }
        }
        return maxIndex;
    }
}
