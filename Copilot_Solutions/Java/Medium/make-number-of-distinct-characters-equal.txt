Synthesizing 10/10 solutions

=======

        int[] freq1 = new int[26];
        int[] freq2 = new int[26];
        for (int i = 0; i < word1.length(); i++) {
            freq1[word1.charAt(i) - 'a']++;
        }
        for (int i = 0; i < word2.length(); i++) {
            freq2[word2.charAt(i) - 'a']++;
        }
        int diff = 0;
        for (int i = 0; i < 26; i++) {
            if (freq1[i] > 0 && freq2[i] > 0) {
                diff++;
            }
        }
        return diff < 26;

=======

        int[] freq1 = new int[26];
        int[] freq2 = new int[26];
        for (int i = 0; i < word1.length(); i++) {
            freq1[word1.charAt(i) - 'a']++;
        }
        for (int i = 0; i < word2.length(); i++) {
            freq2[word2.charAt(i) - 'a']++;
        }
        int count = 0;
        for (int i = 0; i < 26; i++) {
            if (freq1[i] > 0 && freq2[i] > 0) {
                count++;
            }
        }
        return (count >= word1.length() - 1 && count >= word2.length() - 1);

=======

        int[] count1 = new int[26];
        int[] count2 = new int[26];
        for (char c : word1.toCharArray()) {
            count1[c - 'a']++;
        }
        for (char c : word2.toCharArray()) {
            count2[c - 'a']++;
        }
        int diff = 0;
        for (int i = 0; i < 26; i++) {
            if (count1[i] != count2[i]) {
                diff++;
            }
        }
        return diff <= 2;

=======

        if (word1.length() != word2.length()) {
            return false;
        }
        int[] count = new int[26];
        for (int i = 0; i < word1.length(); i++) {
            count[word1.charAt(i) - 'a']++;
            count[word2.charAt(i) - 'a']--;
        }
        int diff = 0;
        for (int i = 0; i < 26; i++) {
            if (count[i] != 0) {
                diff++;
            }
        }
        return diff <= 2;

=======

        if (word1.length() != word2.length()) {
            return false;
        }
        int[] freq1 = new int[26];
        int[] freq2 = new int[26];
        for (int i = 0; i < word1.length(); i++) {
            freq1[word1.charAt(i) - 'a']++;
            freq2[word2.charAt(i) - 'a']++;
        }
        int count = 0;
        for (int i = 0; i < 26; i++) {
            if (freq1[i] > 0 && freq2[i] > 0) {
                count++;
            }
        }
        return count >= word1.length() - 1;

=======

        int[] freq1 = new int[26];
        int[] freq2 = new int[26];
        for (char c : word1.toCharArray()) {
            freq1[c - 'a']++;
        }
        for (char c : word2.toCharArray()) {
            freq2[c - 'a']++;
        }
        int diff = 0;
        for (int i = 0; i < 26; i++) {
            if (freq1[i] > 0 && freq2[i] == 0) {
                diff++;
            }
        }
        return diff <= 1;
    }
    public boolean buddyStrings(String word1, String word2) {
        if (word1.length() != word2.length()) {
            return false;
        }
        if (word1.equals(word2)) {
            return isItPossible(word1, word2);
        }
        int first = -1;
        int second = -1;
        for (int i = 0; i < word1.length(); i++) {
            if (word1.charAt(i) != word2.charAt(i)) {
                if (first == -1) {
                    first = i;
                } else if (second == -1) {
                    second = i;
                } else {
                    return false;
                }
            }
        }
        if (first == -1 || second == -1) {
            return false;
        }
        return word1.charAt(first) == word2.charAt(second) && word1.charAt(second) == word2.charAt(first);

=======

        int[] cnt = new int[26];
        for (char c : word1.toCharArray()) {
            cnt[c - 'a']++;
        }
        for (char c : word2.toCharArray()) {
            cnt[c - 'a']++;
        }
        int odd = 0;
        for (int i = 0; i < 26; i++) {
            if (cnt[i] % 2 == 1) {
                odd++;
            }
        }
        return odd <= 2;

=======

        if (word1.length() != word2.length()) return false;
        int[] count = new int[26];
        for (int i = 0; i < word1.length(); i++) {
            count[word1.charAt(i) - 'a']++;
            count[word2.charAt(i) - 'a']--;
        }
        int n = 0;
        for (int i = 0; i < 26; i++) {
            if (count[i] != 0) n++;
        }
        return n <= 2;

=======

    	if(word1.length() != word2.length()) return false;
    	int[] count1 = new int[26];
    	int[] count2 = new int[26];
    	for(int i = 0; i < word1.length(); i++) {
    		count1[word1.charAt(i) - 'a']++;
    		count2[word2.charAt(i) - 'a']++;
    	}
    	int diff1 = 0;
    	int diff2 = 0;
    	for(int i = 0; i < 26; i++) {
    		if(count1[i] > 0) diff1++;
    		if(count2[i] > 0) diff2++;
    	}
    	if(diff1 != diff2) return false;
    	for(int i = 0; i < 26; i++) {
    		if(count1[i] > 0 && count2[i] == 0) return false;
    	}
    	return true;

=======

        // Check if the two strings are equal
        if (word1.equals(word2)) return true;
        // Create a hashset for each string
        HashSet<Character> set1 = new HashSet<Character>();
        HashSet<Character> set2 = new HashSet<Character>();
        // Add each character to the hashset
        for (int i = 0; i < word1.length(); i++) {
            set1.add(word1.charAt(i));
        }
        for (int i = 0; i < word2.length(); i++) {
            set2.add(word2.charAt(i));
        }
        // Check if the two sets are equal
        if (set1.equals(set2)) return true;
        // Check if the two sets have at least 2 characters
        if (set1.size() < 2 && set2.size() < 2) return false;
        // Create a hashmap to count the number of characters
        HashMap<Character, Integer> map = new HashMap<Character, Integer>();
        for (int i = 0; i < word1.length(); i++) {
            map.put(word1.charAt(i), map.getOrDefault(word1.charAt(i), 0) + 1);
        }
        for (int i = 0; i < word2.length(); i++) {
            map.put(word2.charAt(i), map.getOrDefault(word2.charAt(i), 0) + 1);
        }
        // Check if the hashmap has any characters with a count of 1
        for (Map.Entry<Character, Integer> entry : map.entrySet()) {
            if (entry.getValue() == 1) return false;
        }
        return true;
