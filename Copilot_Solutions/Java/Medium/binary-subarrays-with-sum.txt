Synthesizing 10/10 solutions

=======

        int n = nums.length;
        int[] sum = new int[n + 1];
        for (int i = 0; i < n; i++) {
            sum[i + 1] = sum[i] + nums[i];
        }
        int ans = 0;
        Map<Integer, Integer> cnt = new HashMap<>();
        for (int s : sum) {
            ans += cnt.getOrDefault(s, 0);
            cnt.put(s + goal, cnt.getOrDefault(s + goal, 0) + 1);
        }
        return ans;

=======

        int n = nums.length;
        int[] prefix = new int[n + 1];
        for (int i = 0; i < n; i++) {
            prefix[i + 1] = prefix[i] + nums[i];
        }
        int result = 0;
        for (int i = 0; i <= n; i++) {
            int j = i + 1;
            while (j <= n && prefix[j] - prefix[i] <= goal) {
                if (prefix[j] - prefix[i] == goal) {
                    result++;
                }
                j++;
            }
        }
        return result;

=======

        int n = nums.length;
        int[] prefix = new int[n + 1];
        for (int i = 0; i < n; i++) {
            prefix[i + 1] = prefix[i] + nums[i];
        }
        int ans = 0;
        Map<Integer, Integer> count = new HashMap<>();
        for (int x: prefix) {
            ans += count.getOrDefault(x, 0);
            count.put(x + goal, count.getOrDefault(x + goal, 0) + 1);
        }
        return ans;

=======

        int n = nums.length;
        int[] prefix = new int[n + 1];
        for (int i = 0; i < n; i++) {
            prefix[i + 1] = prefix[i] + nums[i];
        }
        int res = 0;
        Map<Integer, Integer> map = new HashMap<>();
        for (int i = 0; i < n + 1; i++) {
            int p = prefix[i];
            res += map.getOrDefault(p, 0);
            map.put(p + goal, map.getOrDefault(p + goal, 0) + 1);
        }
        return res;

=======

        int n = nums.length;
        int[] preSum = new int[n + 1];
        for (int i = 0; i < n; i++) {
            preSum[i + 1] = preSum[i] + nums[i];
        }
        int ans = 0;
        Map<Integer, Integer> map = new HashMap<>();
        for (int i = 0; i <= n; i++) {
            if (map.containsKey(preSum[i] - goal)) {
                ans += map.get(preSum[i] - goal);
            }
            map.put(preSum[i], map.getOrDefault(preSum[i], 0) + 1);
        }
        return ans;

=======

        int[] prefix = new int[nums.length + 1];
        for (int i = 0; i < nums.length; i++) {
            prefix[i + 1] = prefix[i] + nums[i];
        }
        int result = 0;
        Map<Integer, Integer> map = new HashMap<>();
        for (int i = 0; i < prefix.length; i++) {
            int key = prefix[i] - goal;
            if (map.containsKey(key)) {
                result += map.get(key);
            }
            map.put(prefix[i], map.getOrDefault(prefix[i], 0) + 1);
        }
        return result;

=======

        int n = nums.length;
        int[] pre = new int[n + 1];
        for (int i = 0; i < n; i++) {
            pre[i + 1] = pre[i] + nums[i];
        }
        Map<Integer, Integer> count = new HashMap<>();
        int ans = 0;
        for (int x : pre) {
            ans += count.getOrDefault(x, 0);
            count.put(x + goal, count.getOrDefault(x + goal, 0) + 1);
        }
        return ans;

=======

        int n = nums.length;
        int[] pre = new int[n + 1];
        for (int i = 0; i < n; i++) {
            pre[i + 1] = pre[i] + nums[i];
        }
        int res = 0;
        Map<Integer, Integer> map = new HashMap<>();
        for (int i = 0; i <= n; i++) {
            int cur = pre[i];
            res += map.getOrDefault(cur, 0);
            map.put(cur + goal, map.getOrDefault(cur + goal, 0) + 1);
        }
        return res;

=======

        int n = nums.length;
        int[] prefix = new int[n + 1];
        for (int i = 0; i < n; ++i) {
            prefix[i + 1] = prefix[i] + nums[i];
        }
        Map<Integer, Integer> count = new HashMap<>();
        int ans = 0;
        for (int x: prefix) {
            ans += count.getOrDefault(x, 0);
            count.put(x + goal, count.getOrDefault(x + goal, 0) + 1);
        }
        return ans;

=======

        int[] sum = new int[nums.length + 1];
        int count = 0;
        for (int i = 0; i < nums.length; i++) {
            sum[i + 1] = sum[i] + nums[i];
        }
        for (int i = 0; i < sum.length; i++) {
            int target = sum[i] + goal;
            int index = Arrays.binarySearch(sum, target);
            if (index >= 0) {
                count += index - i;
            } else {
                count += -index - 1 - i;
            }
        }
        return count;
