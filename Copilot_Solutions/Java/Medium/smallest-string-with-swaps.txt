Synthesizing 10/10 solutions

=======

        int n = s.length();
        UnionFind uf = new UnionFind(n);
        for (List<Integer> pair : pairs) {
            uf.union(pair.get(0), pair.get(1));
        }
        Map<Integer, PriorityQueue<Character>> map = new HashMap<>();
        for (int i = 0; i < n; i++) {
            int root = uf.find(i);
            map.computeIfAbsent(root, x -> new PriorityQueue<>()).offer(s.charAt(i));
        }
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < n; i++) {
            int root = uf.find(i);
            sb.append(map.get(root).poll());
        }
        return sb.toString();
    }
    
    class UnionFind {
        int[] parent;
        int[] rank;
        
        public UnionFind(int n) {
            parent = new int[n];
            rank = new int[n];
            for (int i = 0; i < n; i++) {
                parent[i] = i;
            }
        }
        
        public int find(int x) {
            if (parent[x] != x) {
                parent[x] = find(parent[x]);
            }
            return parent[x];
        }
        
        public void union(int x, int y) {
            int rootX = find(x);
            int rootY = find(y);
            if (rootX == rootY) {
                return;
            }
            if (rank[rootX] < rank[rootY]) {
                parent[rootX] = rootY;
            } else if (rank[rootX] > rank[rootY]) {
                parent[rootY] = rootX;
            } else {
                parent[rootX] = rootY;
                rank[rootY]++;
            }
        }

=======

        int n = s.length();
        UnionFind uf = new UnionFind(n);
        for (List<Integer> pair : pairs) {
            uf.union(pair.get(0), pair.get(1));
        }
        Map<Integer, PriorityQueue<Character>> map = new HashMap<>();
        for (int i = 0; i < n; i++) {
            int root = uf.find(i);
            PriorityQueue<Character> pq = map.getOrDefault(root, new PriorityQueue<>());
            pq.offer(s.charAt(i));
            map.put(root, pq);
        }
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < n; i++) {
            int root = uf.find(i);
            sb.append(map.get(root).poll());
        }
        return sb.toString();
    }
}

=======

        int n = s.length();
        int[] parent = new int[n];
        for (int i = 0; i < n; i++) {
            parent[i] = i;
        }
        for (List<Integer> pair : pairs) {
            union(parent, pair.get(0), pair.get(1));
        }
        Map<Integer, PriorityQueue<Character>> map = new HashMap<>();
        for (int i = 0; i < n; i++) {
            int root = find(parent, i);
            PriorityQueue<Character> pq = map.getOrDefault(root, new PriorityQueue<>());
            pq.offer(s.charAt(i));
            map.put(root, pq);
        }
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < n; i++) {
            int root = find(parent, i);
            sb.append(map.get(root).poll());
        }
        return sb.toString();
    }
    private int find(int[] parent, int i) {
        if (parent[i] != i) {
            parent[i] = find(parent, parent[i]);
        }
        return parent[i];
    }
    private void union(int[] parent, int i, int j) {
        int rootI = find(parent, i);
        int rootJ = find(parent, j);
        if (rootI != rootJ) {
            parent[rootI] = rootJ;
        }

=======

        int n = s.length();
        int[] parent = new int[n];
        for (int i = 0; i < n; i++) {
            parent[i] = i;
        }
        for (List<Integer> pair : pairs) {
            int root1 = find(parent, pair.get(0));
            int root2 = find(parent, pair.get(1));
            if (root1 != root2) {
                parent[root1] = root2;
            }
        }
        Map<Integer, PriorityQueue<Character>> map = new HashMap<>();
        for (int i = 0; i < n; i++) {
            int root = find(parent, i);
            PriorityQueue<Character> queue = map.getOrDefault(root, new PriorityQueue<>());
            queue.offer(s.charAt(i));
            map.put(root, queue);
        }
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < n; i++) {
            int root = find(parent, i);
            sb.append(map.get(root).poll());
        }
        return sb.toString();
    }

    private int find(int[] parent, int index) {
        if (parent[index] != index) {
            parent[index] = find(parent, parent[index]);
        }
        return parent[index];

=======

        int[] parent = new int[s.length()];
        for (int i = 0; i < s.length(); i++) {
            parent[i] = i;
        }
        for (List<Integer> pair : pairs) {
            union(parent, pair.get(0), pair.get(1));
        }
        Map<Integer, PriorityQueue<Character>> map = new HashMap<>();
        for (int i = 0; i < s.length(); i++) {
            int root = find(parent, i);
            map.computeIfAbsent(root, x -> new PriorityQueue()).add(s.charAt(i));
        }
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < s.length(); i++) {
            int root = find(parent, i);
            sb.append(map.get(root).poll());
        }
        return sb.toString();
    }
    private int find(int[] parent, int i) {
        if (parent[i] != i) {
            parent[i] = find(parent, parent[i]);
        }
        return parent[i];
    }
    private void union(int[] parent, int i, int j) {
        int root1 = find(parent, i);
        int root2 = find(parent, j);
        if (root1 != root2) {
            parent[root1] = root2;
        }

=======

        int n = s.length();
        int[] p = new int[n];
        for (int i = 0; i < n; i++) {
            p[i] = i;
        }
        for (List<Integer> pair : pairs) {
            union(p, pair.get(0), pair.get(1));
        }
        Map<Integer, PriorityQueue<Character>> map = new HashMap<>();
        for (int i = 0; i < n; i++) {
            int root = find(p, i);
            map.putIfAbsent(root, new PriorityQueue<>());
            map.get(root).add(s.charAt(i));
        }
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < n; i++) {
            int root = find(p, i);
            sb.append(map.get(root).poll());
        }
        return sb.toString();
    }
    private int find(int[] p, int x) {
        if (p[x] != x) {
            p[x] = find(p, p[x]);
        }
        return p[x];
    }
    private void union(int[] p, int x, int y) {
        int rootX = find(p, x);
        int rootY = find(p, y);
        if (rootX != rootY) {
            p[rootX] = rootY;
        }

=======

        int[] parent = new int[s.length()];
        for (int i = 0; i < s.length(); i++) {
            parent[i] = i;
        }
        for (List<Integer> pair : pairs) {
            int p1 = find(parent, pair.get(0));
            int p2 = find(parent, pair.get(1));
            if (p1 != p2) {
                parent[p1] = p2;
            }
        }
        Map<Integer, PriorityQueue<Character>> map = new HashMap<>();
        for (int i = 0; i < s.length(); i++) {
            int p = find(parent, i);
            map.putIfAbsent(p, new PriorityQueue<>());
            map.get(p).offer(s.charAt(i));
        }
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < s.length(); i++) {
            int p = find(parent, i);
            sb.append(map.get(p).poll());
        }
        return sb.toString();
    }
    private int find(int[] parent, int i) {
        if (parent[i] == i) {
            return i;
        }
        return parent[i] = find(parent, parent[i]);

=======

        int n = s.length();
        int[] parent = new int[n];
        for (int i = 0; i < n; i++) {
            parent[i] = i;
        }

        for (List<Integer> pair : pairs) {
            int x = pair.get(0);
            int y = pair.get(1);
            union(parent, x, y);
        }

        Map<Integer, PriorityQueue<Character>> map = new HashMap<>();
        for (int i = 0; i < n; i++) {
            int root = find(parent, i);
            PriorityQueue<Character> pq = map.getOrDefault(root, new PriorityQueue<>());
            pq.offer(s.charAt(i));
            map.put(root, pq);
        }

        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < n; i++) {
            int root = find(parent, i);
            PriorityQueue<Character> pq = map.get(root);
            sb.append(pq.poll());
        }

        return sb.toString();
    }

    private void union(int[] parent, int x, int y) {
        int px = find(parent, x);
        int py = find(parent, y);
        if (px != py) {
            parent[px] = py;
        }
    }

    private int find(int[] parent, int x) {
        if (parent[x] != x) {
            parent[x] = find(parent, parent[x]);
        }
        return parent[x];

=======

        int n = s.length();
        int[] f = new int[n];
        for (int i = 0; i < n; i++) {
            f[i] = i;
        }
        for (List<Integer> pair : pairs) {
            int x = pair.get(0), y = pair.get(1);
            f[find(x, f)] = find(y, f);
        }
        Map<Integer, PriorityQueue<Character>> map = new HashMap<>();
        for (int i = 0; i < n; i++) {
            int fa = find(i, f);
            PriorityQueue<Character> queue = map.getOrDefault(fa, new PriorityQueue<>());
            queue.offer(s.charAt(i));
            map.put(fa, queue);
        }
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < n; i++) {
            int fa = find(i, f);
            sb.append(map.get(fa).poll());
        }
        return sb.toString();
    }

    private int find(int x, int[] f) {
        if (f[x] != x) {
            f[x] = find(f[x], f);
        }
        return f[x];

=======

        int n = s.length();
        int[] p = new int[n];
        for (int i = 0; i < n; i++) {
            p[i] = i;
        }

        for (List<Integer> pair : pairs) {
            int x = find(p, pair.get(0));
            int y = find(p, pair.get(1));
            p[x] = y;
        }

        Map<Integer, List<Integer>> map = new HashMap<>();
        for (int i = 0; i < n; i++) {
            int x = find(p, i);
            List<Integer> list = map.getOrDefault(x, new ArrayList<>());
            list.add(i);
            map.put(x, list);
        }

        StringBuilder sb = new StringBuilder(s);
        for (List<Integer> list : map.values()) {
            char[] chars = new char[list.size()];
            for (int i = 0; i < list.size(); i++) {
                chars[i] = s.charAt(list.get(i));
            }
            Arrays.sort(chars);
            for (int i = 0; i < list.size(); i++) {
                sb.setCharAt(list.get(i), chars[i]);
            }
        }

        return sb.toString();
    }

    private int find(int[] p, int i) {
        if (p[i] != i) {
            p[i] = find(p, p[i]);
        }
        return p[i];
