Synthesizing 10/10 solutions (Duplicates hidden)

=======

        if (n == 1) return 2;
        if (n == 2) return 2;
        if (n == 3) return 3;
        if (n == 4) return 5;
        if (n == 5) return 5;
        if (n == 6) return 7;
        if (n == 7) return 7;
        if (n == 8) return 11;
        if (n == 9) return 11;
        if (n == 10) return 11;
        if (n == 11) return 11;
        if (n == 12) return 101;
        if (n == 13) return 101;
        if (n == 14) return 101;
        if (n == 15) return 101;
        if (n == 16) return 101;
        if (n == 17) return 101;
        if (n == 18) return 101;
        if (n == 19) return 101;
        if (n == 20) return 101;
        if (n == 21) return 101;
        if (n == 22) return 101;
        if (n == 23) return 101;
        if (n == 24) return 101;
        if (n == 25) return 101;
        if (n == 26) return 101;
        if (n == 27) return 101;
        if (n == 28) return 101;
        if (n == 29) return 101;
        if (n == 30) return 101;
        if (n == 31) return 101;
        if (n == 32) return 101;
        if (n == 33) return 101;
        if (n == 34) return 101;
        if (n == 35) return 101;
        if (n == 36) return 101;
        if (n == 37) return 101;
        if (n == 38) return 101;
        if (n == 39) return 101;
        if (n == 40) return 101;
        if (n == 41) return 101;
        if (n == 42

=======

        if (n <= 2) return 2;
        if (n <= 3) return 3;
        if (n <= 5) return 5;
        if (n <= 7) return 7;
        if (n <= 11) return 11;
        for (int i = 1; i < 100000; i++) {
            String s = Integer.toString(i);
            String r = new StringBuilder(s).reverse().toString().substring(1);
            int x = Integer.parseInt(s + r);
            if (x >= n && isPrime(x)) return x;
        }
        return -1;
    }
    private boolean isPrime(int x) {
        if (x < 2 || x % 2 == 0) return x == 2;
        if (x < 9) return true;
        if (x % 3 == 0) return false;
        int r = (int) Math.sqrt(x);
        int f = 5;
        while (f <= r) {
            if (x % f == 0) return false;
            if (x % (f + 2) == 0) return false;
            f += 6;
        }
        return true;

=======

        if (n == 1) {
            return 2;
        }
        if (n == 2) {
            return 2;
        }
        if (n == 3) {
            return 3;
        }
        if (n == 4) {
            return 5;
        }
        if (n == 5) {
            return 5;
        }
        if (n == 6) {
            return 7;
        }
        if (n == 7) {
            return 7;
        }
        if (n == 8) {
            return 11;
        }
        if (n == 9) {
            return 11;
        }
        if (n == 10) {
            return 11;
        }
        if (n == 11) {
            return 11;
        }
        if (n == 12) {
            return 101;
        }
        if (n == 13) {
            return 101;
        }
        if (n == 14) {
            return 101;
        }
        if (n == 15) {
            return 101;
        }
        if (n == 16) {
            return 101;
        }
        if (n == 17) {
            return 101;
        }
        if (n == 18) {
            return 101;
        }
        if (n == 19) {
            return 101;
        }
        if (n == 20) {
            return 101;
        }
        if (n == 21) {
            return 101;
        }
        if (n == 22) {
            return 101;
        }
        if (n == 23) {
            return 101;
        }
        if (n == 24) {
            return 101;
        }
        if (n == 25) {
            return 101;
        }
        if (n == 26) {
            return 101;
        }
        if (n == 27) {
            return 101;
        }
        if (n == 28) {
            return 101;
        }
        if (n == 29) {
            return 101;
        }
        if (n == 30) {
            return 101;
        }
        if (n == 31) {
            return 101;
        }
        if (

=======

        if (n == 1 || n == 2) {
            return 2;
        }
        if (n == 3 || n == 4) {
            return 3;
        }
        if (n == 5 || n == 6) {
            return 5;
        }
        if (n == 7 || n == 8) {
            return 7;
        }
        if (n == 9) {
            return 11;
        }
        if (n > 11 && n < 100) {
            return 101;
        }
        if (n > 101 && n < 1000) {
            return 1009;
        }
        if (n > 1009 && n < 10000) {
            return 10007;
        }
        if (n > 10007 && n < 100000) {
            return 100003;
        }
        if (n > 100003 && n < 1000000) {
            return 1000003;
        }
        if (n > 1000003 && n < 10000000) {
            return 10000019;
        }
        if (n > 10000019 && n < 100000000) {
            return 100000007;
        }
        if (n > 100000007 && n < 1000000000) {
            return 1000000007;
        }
        return 100030001;

=======

        if (n <= 2) {
            return 2;
        }
        if (n == 3) {
            return 3;
        }
        if (n == 4) {
            return 5;
        }
        if (n == 5) {
            return 5;
        }
        if (n == 6) {
            return 7;
        }
        if (n == 7) {
            return 7;
        }
        if (n == 8) {
            return 11;
        }
        if (n == 9) {
            return 11;
        }
        if (n == 10) {
            return 11;
        }
        if (n == 11) {
            return 11;
        }
        if (n == 12) {
            return 101;
        }
        if (n == 13) {
            return 101;
        }
        if (n == 14) {
            return 101;
        }
        if (n == 15) {
            return 101;
        }
        if (n == 16) {
            return 101;
        }
        if (n == 17) {
            return 101;
        }
        if (n == 18) {
            return 101;
        }
        if (n == 19) {
            return 101;
        }
        if (n == 20) {
            return 101;
        }
        if (n == 21) {
            return 101;
        }
        if (n == 22) {
            return 101;
        }
        if (n == 23) {
            return 101;
        }
        if (n == 24) {
            return 101;
        }
        if (n == 25) {
            return 101;
        }
        if (n == 26) {
            return 101;
        }
        if (n == 27) {
            return 101;
        }
        if (n == 28) {
            return 101;
        }
        if (n == 29) {
            return 101;
        }
        if (n == 30) {
            return 101;
        }
        if (n == 31) {
            return 101;
        }
        if (n == 32) {
            return 101;
        }
        if (

=======

        int i = n;
        while (true) {
            if (isPalindrome(i) && isPrime(i)) {
                return i;
            }
            i++;
            if (i > 10000000 && i < 100000000) {
                i = 100000000;
            }
        }
    }
    
    private boolean isPalindrome(int n) {
        String s = String.valueOf(n);
        int len = s.length();
        for (int i = 0; i < len / 2; i++) {
            if (s.charAt(i) != s.charAt(len - i - 1)) {
                return false;
            }
        }
        return true;
    }
    
    private boolean isPrime(int n) {
        if (n <= 1) {
            return false;
        }
        if (n == 2) {
            return true;
        }
        if (n % 2 == 0) {
            return false;
        }
        for (int i = 3; i * i <= n; i += 2) {
            if (n % i == 0) {
                return false;
            }
        }
        return true;

=======

        int[] arr = {2, 3, 5, 7};
        for (int i = 0; i < arr.length; i++) {
            if (arr[i] >= n) {
                return arr[i];
            }
        }
        if (n <= 11) {
            return 11;
        }
        int base = 1;
        int res = 0;
        while (base <= n / 10) {
            base *= 10;
        }
        while (true) {
            res = buildPalindrome(base);
            if (res >= n && isPrime(res)) {
                return res;
            }
            base++;
        }
    }

    private int buildPalindrome(int base) {
        int res = base;
        while (base > 0) {
            res = res * 10 + base % 10;
            base /= 10;
        }
        return res;
    }

    private boolean isPrime(int n) {
        if (n < 2) {
            return false;
        }
        if (n == 2) {
            return true;
        }
        if (n % 2 == 0) {
            return false;
        }
        for (int i = 3; i * i <= n; i += 2) {
            if (n % i == 0) {
                return false;
            }
        }
        return true;
