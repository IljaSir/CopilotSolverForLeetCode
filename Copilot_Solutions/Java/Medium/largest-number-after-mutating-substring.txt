Synthesizing 10/10 solutions

=======

        char[] arr = num.toCharArray();
        boolean changed = false;
        for (int i = 0; i < arr.length; i++) {
            int digit = arr[i] - '0';
            if (digit < change[digit]) {
                arr[i] = (char) (change[digit] + '0');
                changed = true;
            } else if (digit > change[digit] && changed) {
                break;
            }
        }
        return new String(arr);

=======

        char[] chars = num.toCharArray();
        int i = 0;
        while (i < chars.length) {
            int digit = chars[i] - '0';
            if (digit < change[digit]) {
                while (i < chars.length && chars[i] - '0' <= change[chars[i] - '0']) {
                    chars[i] = (char) (change[chars[i] - '0'] + '0');
                    i++;
                }
            } else {
                i++;
            }
        }
        return new String(chars);

=======

        char[] chars = num.toCharArray();
        int i = 0;
        while (i < chars.length) {
            int c = chars[i] - '0';
            if (c < change[c]) {
                while (i < chars.length && chars[i] - '0' <= change[chars[i] - '0']) {
                    chars[i] = (char) (change[chars[i] - '0'] + '0');
                    i++;
                }
            } else {
                i++;
            }
        }
        return new String(chars);

=======

        char[] chs = num.toCharArray();
        int i = 0;
        while (i < chs.length) {
            int d = chs[i] - '0';
            if (change[d] > d) {
                while (i < chs.length && chs[i] - '0' <= change[chs[i] - '0']) {
                    chs[i] = (char) (change[chs[i] - '0'] + '0');
                    i++;
                }
            } else {
                i++;
            }
        }
        return new String(chs);

=======

        char[] arr = num.toCharArray();
        int n = arr.length;
        int i = 0;
        while (i < n) {
            int digit = arr[i] - '0';
            if (digit < change[digit]) {
                while (i < n && arr[i] - '0' <= change[arr[i] - '0']) {
                    arr[i] = (char)(change[arr[i] - '0'] + '0');
                    i++;
                }
            } else {
                i++;
            }
        }
        return new String(arr);

=======

        int i = 0;
        int n = num.length();
        char[] cs = num.toCharArray();
        while (i < n) {
            int d = cs[i] - '0';
            if (d < change[d]) {
                while (i < n && cs[i] - '0' <= change[cs[i] - '0']) {
                    cs[i] = (char)('0' + change[cs[i] - '0']);
                    i++;
                }
                break;
            }
            i++;
        }
        return new String(cs);

=======

        char[] chars = num.toCharArray();
        boolean start = false;
        for (int i = 0; i < chars.length; i++) {
            int c = chars[i] - '0';
            if (change[c] > c) {
                chars[i] = (char) (change[c] + '0');
                start = true;
            } else if (change[c] < c) {
                if (start) {
                    break;
                }
            }
        }
        return new String(chars);

=======

        char[] c = num.toCharArray();
        int n = c.length;
        boolean changed = false;
        for (int i = 0; i < n; i++) {
            int x = c[i] - '0';
            if (change[x] > x) {
                c[i] = (char) (change[x] + '0');
                changed = true;
            } else if (change[x] < x && changed) {
                break;
            }
        }
        return String.valueOf(c);

=======

        char[] arr = num.toCharArray();
        int n = arr.length;
        boolean flag = false;
        for(int i=0;i<n;i++){
            if(change[arr[i]-'0']>arr[i]-'0'){
                arr[i] = (char)(change[arr[i]-'0']+'0');
                flag = true;
            }
            else if(flag && change[arr[i]-'0']<arr[i]-'0'){
                break;
            }
        }
        return new String(arr);

=======

        int len = num.length();
        char[] ca = num.toCharArray();
        int i = 0;
        while (i < len) {
            int n = num.charAt(i) - '0';
            if (change[n] > n) {
                while (i < len && num.charAt(i) - '0' <= change[num.charAt(i) - '0']) {
                    ca[i] = (char) (change[num.charAt(i) - '0'] + '0');
                    i++;
                }
            } else if (change[n] < n) {
                break;
            } else {
                i++;
            }
        }
        return new String(ca);
