Synthesizing 10/10 solutions

=======

        List<Long> result = new ArrayList<>();
        long sum = 0;
        long num = 1;
        while (sum < finalSum) {
            sum += num;
            result.add(num);
            num += 2;
        }
        if (sum > finalSum) {
            result.set(result.size() - 1, result.get(result.size() - 1) - (sum - finalSum));
        }
        return result;

=======

        List<Long> res = new ArrayList<>();
        int i = 1;
        while (finalSum > 0) {
            if (finalSum >= 2 * i) {
                res.add(2L * i);
                finalSum -= 2 * i;
            } else {
                res.add(finalSum);
                finalSum = 0;
            }
            i++;
        }
        return res;

=======

        List<Long> result = new ArrayList<>();
        long sum = 0;
        long count = 0;
        while (sum < finalSum) {
            sum += 2;
            count++;
        }
        if (sum == finalSum) {
            for (long i = 0; i < count; i++) {
                result.add(2L);
            }
        } else {
            for (long i = 0; i < count - 1; i++) {
                result.add(2L);
            }
            result.add(finalSum - sum + 2);
        }
        return result;

=======

        List<Long> result = new ArrayList<>();
        if (finalSum <= 2) {
            return result;
        }
        long sum = 0;
        long num = 2;
        while (sum < finalSum) {
            sum += num;
            result.add(num);
            num += 2;
        }
        if (sum > finalSum) {
            result.remove(result.size() - 1);
            result.add(finalSum - (sum - num));
        }
        return result;

=======

        List<Long> result = new ArrayList<>();
        long sum = 0;
        long number = 2;
        while (number <= finalSum) {
            sum += number;
            result.add(number);
            number += 2;
        }
        if (sum < finalSum) {
            result.add(finalSum - sum);
        }
        return result;

=======

        List<Long> result = new ArrayList<>();
        long sum = finalSum / 2;
        long current = 2;
        while (sum > 0) {
            result.add(current);
            sum -= current;
            current += 2;
        }
        if (sum < 0) {
            result.set(result.size() - 1, result.get(result.size() - 1) + sum);
        }
        return result;

=======

        List<Long> result = new ArrayList<Long>();
        long sum = 0;
        long num = 1;
        while (finalSum > 0) {
            if (finalSum >= num) {
                sum += num;
                result.add(num);
                finalSum -= num;
            } else {
                sum += finalSum;
                result.add(finalSum);
                finalSum = 0;
            }
            num = sum + 1;
        }
        return result;

=======

        List<Long> result = new ArrayList<>();
        int count = 0;
        long sum = 0;
        while (sum < finalSum) {
            long num = (finalSum - sum) / 2;
            if (num % 2 == 1) {
                num--;
            }
            if (num == 0) {
                num = 2;
            }
            result.add(num);
            sum += num;
            count++;
        }
        return result;

=======

        List<Long> ret = new ArrayList<>();
        long sum = 0;
        long last = 0;
        long cur = 0;
        while (sum < finalSum) {
            if (last == 0) {
                cur = 2;
            } else {
                cur = last * 2;
            }
            sum += cur;
            ret.add(cur);
            last = cur;
        }
        if (sum > finalSum) {
            ret.remove(ret.size() - 1);
            ret.add(finalSum - (sum - cur));
        }
        return ret;

=======

        List<Long> result = new ArrayList<Long>();
        long sum = 0;
        long count = 0;
        while (sum < finalSum) {
            long value = 2;
            while (sum + value > finalSum) {
                value *= 2;
            }
            sum += value;
            count++;
        }
        for (int i = 0; i < count; i++) {
            result.add((long) Math.pow(2, i));
        }
        return result;
