Synthesizing 7/10 solutions

=======

        boolean[][] visited = new boolean[grid.length][grid[0].length];
        int[][] dirs = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};
        dfs(grid, visited, row, col, grid[row][col], color, dirs);
        return grid;
    }
    
    public void dfs(int[][] grid, boolean[][] visited, int row, int col, int oldColor, int newColor, int[][] dirs) {
        if (row < 0 || row >= grid.length || col < 0 || col >= grid[0].length || visited[row][col] || grid[row][col] != oldColor) {
            return;
        }
        visited[row][col] = true;
        boolean isBorder = false;
        for (int[] dir : dirs) {
            int newRow = row + dir[0];
            int newCol = col + dir[1];
            if (newRow < 0 || newRow >= grid.length || newCol < 0 || newCol >= grid[0].length || grid[newRow][newCol] != oldColor) {
                isBorder = true;
            }
        }
        if (isBorder) {
            grid[row][col] = newColor;
        }
        for (int[] dir : dirs) {
            dfs(grid, visited, row + dir[0], col + dir[1], oldColor, newColor, dirs);
        }

=======

        int c = grid[row][col];
        if (c == color) return grid;
        boolean[][] visited = new boolean[grid.length][grid[0].length];
        dfs(grid, row, col, c, color, visited);
        return grid;
    }
    
    private void dfs(int[][] grid, int row, int col, int c, int color, boolean[][] visited) {
        if (row < 0 || row >= grid.length || col < 0 || col >= grid[0].length) return;
        if (visited[row][col]) return;
        if (grid[row][col] != c) return;
        visited[row][col] = true;
        dfs(grid, row + 1, col, c, color, visited);
        dfs(grid, row - 1, col, c, color, visited);
        dfs(grid, row, col + 1, c, color, visited);
        dfs(grid, row, col - 1, c, color, visited);
        if (row == 0 || row == grid.length - 1 || col == 0 || col == grid[0].length - 1) {
            grid[row][col] = color;
            return;
        }
        if (grid[row + 1][col] != c || grid[row - 1][col] != c || grid[row][col + 1] != c || grid[row][col - 1] != c) {
            grid[row][col] = color;
        }

=======

        int m = grid.length;
        int n = grid[0].length;
        int[][] visited = new int[m][n];
        dfs(grid, visited, row, col, grid[row][col]);
        for(int i = 0; i < m; i++) {
            for(int j = 0; j < n; j++) {
                if(visited[i][j] == 1) {
                    grid[i][j] = color;
                }
            }
        }
        return grid;
    }
    
    public void dfs(int[][] grid, int[][] visited, int row, int col, int color) {
        visited[row][col] = 1;
        int m = grid.length;
        int n = grid[0].length;
        if(row == 0 || col == 0 || row == m - 1 || col == n - 1 || grid[row - 1][col] != color || grid[row + 1][col] != color || grid[row][col - 1] != color || grid[row][col + 1] != color) {
            visited[row][col] = 2;
        }
        if(row - 1 >= 0 && visited[row - 1][col] == 0 && grid[row - 1][col] == color) {
            dfs(grid, visited, row - 1, col, color);
        }
        if(row + 1 < m && visited[row + 1][col] == 0 && grid[row + 1][col] == color) {
            dfs(grid, visited, row + 1, col, color);
        }
        if(col - 1 >= 0 && visited[row][col - 1] == 0 && grid[row][col - 1] == color) {
            dfs(grid, visited, row, col - 1, color);
        }
        if(col + 1 < n && visited[row][col + 1] == 0 && grid[row][col + 1] == color) {
            dfs(grid, visited, row, col + 1, color);
        }

=======

        int[][] directions = new int[][]{{0,1},{0,-1},{1,0},{-1,0}};
        int m = grid.length;
        int n = grid[0].length;
        boolean[][] visited = new boolean[m][n];
        boolean[][] border = new boolean[m][n];
        int oldColor = grid[row][col];
        dfs(grid, row, col, color, oldColor, visited, border, directions);
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (border[i][j]) {
                    grid[i][j] = color;
                }
            }
        }
        return grid;
    }
    
    private void dfs(int[][] grid, int row, int col, int color, int oldColor, boolean[][] visited, boolean[][] border, int[][] directions) {
        visited[row][col] = true;
        for (int[] direction : directions) {
            int newRow = row + direction[0];
            int newCol = col + direction[1];
            if (newRow < 0 || newRow >= grid.length || newCol < 0 || newCol >= grid[0].length) {
                border[row][col] = true;
                continue;
            }
            if (grid[newRow][newCol] != oldColor) {
                border[row][col] = true;
                continue;
            }
            if (visited[newRow][newCol]) {
                continue;
            }
            dfs(grid, newRow, newCol, color, oldColor, visited, border, directions);
        }

=======

        int[][] visited = new int[grid.length][grid[0].length];
        int[][] result = new int[grid.length][grid[0].length];
        for(int i = 0; i < grid.length; i++){
            for(int j = 0; j < grid[0].length; j++){
                result[i][j] = grid[i][j];
            }
        }
        dfs(grid, row, col, color, grid[row][col], visited, result);
        return result;
    }
    
    public void dfs(int[][] grid, int row, int col, int color, int prevColor, int[][] visited, int[][] result){
        if(row < 0 || col < 0 || row >= grid.length || col >= grid[0].length || visited[row][col] == 1 || grid[row][col] != prevColor){
            return;
        }
        visited[row][col] = 1;
        int count = 0;
        if(row - 1 >= 0 && grid[row - 1][col] == prevColor){
            count++;
            dfs(grid, row - 1, col, color, prevColor, visited, result);
        }
        if(row + 1 < grid.length && grid[row + 1][col] == prevColor){
            count++;
            dfs(grid, row + 1, col, color, prevColor, visited, result);
        }
        if(col - 1 >= 0 && grid[row][col - 1] == prevColor){
            count++;
            dfs(grid, row, col - 1, color, prevColor, visited, result);
        }
        if(col + 1 < grid[0].length && grid[row][col + 1] == prevColor){
            count++;
            dfs(grid, row, col + 1, color, prevColor, visited, result);
        }
        if(count < 4){
            result[row][col] = color;
        }

=======

        int m = grid.length;
        int n = grid[0].length;
        int[][] visited = new int[m][n];
        int[][] result = new int[m][n];
        int oldColor = grid[row][col];
        dfs(grid, visited, result, row, col, oldColor, color);
        return result;

=======

        int[][] visited = new int[grid.length][grid[0].length];
        int[][] result = new int[grid.length][grid[0].length];
        int[] rowDir = new int[]{-1, 0, 1, 0};
        int[] colDir = new int[]{0, 1, 0, -1};
        Queue<int[]> queue = new LinkedList<>();
        queue.add(new int[]{row, col});
        visited[row][col] = 1;
        while (!queue.isEmpty()) {
            int[] pos = queue.poll();
            int rowPos = pos[0];
            int colPos = pos[1];
            int count = 0;
            for (int i = 0; i < 4; i++) {
                int newRowPos = rowPos + rowDir[i];
                int newColPos = colPos + colDir[i];
                if (newRowPos < 0 || newRowPos >= grid.length || newColPos < 0 || newColPos >= grid[0].length) {
                    result[rowPos][colPos] = color;
                    continue;
                }
                if (grid[rowPos][colPos] != grid[newRowPos][newColPos]) {
                    result[rowPos][colPos] = color;
                }
                if (visited[newRowPos][newColPos] == 1 || grid[rowPos][colPos] != grid[newRowPos][newColPos]) {
                    count++;
                }
                if (visited[newRowPos][newColPos] == 0 && grid[rowPos][colPos] == grid[newRowPos][newColPos]) {
                    queue.add(new int[]{newRowPos, newColPos});
                    visited[newRowPos][newColPos] = 1;
                }
            }
            if (count == 4) {
                result[rowPos][colPos] = color;
            }
        }
        for (int i = 0; i < grid.length; i++) {
            for (int j = 0; j < grid[0].length; j++) {
                if (result[i][j] == 0) {
                    result[i][j] = grid[i][j];
                }
            }
        }
        return result;
