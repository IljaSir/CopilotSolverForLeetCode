Synthesizing 10/10 solutions (Duplicates hidden)

=======

        long count = 0;
        for (int i = 0; i < nums.length; i++) {
            for (int j = i + 1; j < nums.length; j++) {
                if (j - i != nums[j] - nums[i]) {
                    count++;
                }
            }
        }
        return count;

=======

        long ans = 0;
        for (int i = 0; i < nums.length; i++) {
            for (int j = i + 1; j < nums.length; j++) {
                if (j - i != nums[j] - nums[i]) {
                    ans++;
                }
            }
        }
        return ans;

=======

        int n = nums.length;
        int[] diff = new int[n];
        for (int i = 0; i < n; i++) {
            diff[i] = nums[i] - i;
        }
        Arrays.sort(diff);
        long res = 0;
        int i = 0;
        while (i < n) {
            int j = i;
            while (j < n && diff[j] == diff[i]) {
                j++;
            }
            res += (long) (j - i) * (j - i - 1) / 2;
            i = j;
        }
        return res;

=======

        long res = 0;
        for(int i = 0; i < nums.length; i++){
            for(int j = i + 1; j < nums.length; j++){
                if(j - i != nums[j] - nums[i]){
                    res++;
                }
            }
        }
        return res;

=======

        Map<Integer, Integer> map = new HashMap<>();
        long ans = 0;
        for (int i = 0; i < nums.length; i++) {
            int diff = nums[i] - i;
            int count = map.getOrDefault(diff, 0);
            ans += count;
            map.put(diff, count + 1);
        }
        return ans;

=======

        int n = nums.length;
        long ans = 0;
        for (int i = 0; i < n; i++) {
            int j = i + 1;
            while (j < n && nums[j] - nums[i] < j - i) {
                j++;
            }
            ans += j - i - 1;
        }
        return ans;

=======

        int n = nums.length;
        long ans = 0;
        for(int i = 0; i < n; i++){
            int diff = nums[i] - i;
            int l = i + 1;
            int r = n - 1;
            while(l <= r){
                int mid = l + (r - l) / 2;
                if(nums[mid] - mid >= diff){
                    r = mid - 1;
                }else{
                    l = mid + 1;
                }
            }
            ans += (n - l);
        }
        return ans;

=======

        int n = nums.length;
        long ans = 0;
        for (int i = 0; i < n; i++) {
            int j = i + nums[i];
            int k = Math.max(i - nums[i] - 1, 0);
            ans += (long) (j - k) * (j - k - 1) / 2;
        }
        return ans;
