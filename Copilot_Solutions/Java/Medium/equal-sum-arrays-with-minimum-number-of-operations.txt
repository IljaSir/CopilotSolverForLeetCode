Synthesizing 10/10 solutions

=======

        int sum1 = 0;
        int sum2 = 0;
        for (int i = 0; i < nums1.length; i++) {
            sum1 += nums1[i];
        }
        for (int i = 0; i < nums2.length; i++) {
            sum2 += nums2[i];
        }
        if (sum1 == sum2) {
            return 0;
        }
        if (sum1 < sum2) {
            int[] temp = nums1;
            nums1 = nums2;
            nums2 = temp;
            int tempSum = sum1;
            sum1 = sum2;
            sum2 = tempSum;
        }
        int diff = sum1 - sum2;
        int[] count = new int[6];
        for (int i = 0; i < nums1.length; i++) {
            count[nums1[i] - 1]++;
        }
        for (int i = 0; i < nums2.length; i++) {
            count[6 - nums2[i]]++;
        }
        int operations = 0;
        for (int i = 5; i >= 0; i--) {
            if (count[i] == 0) {
                continue;
            }
            int d = (i + 1) * count[i];
            if (d >= diff) {
                return operations + (diff + (i)) / (i + 1);
            }
            diff -= d;
            operations += count[i];
        }
        return -1;

=======

        int sum1 = 0;
        int sum2 = 0;
        for (int i = 0; i < nums1.length; i++) {
            sum1 += nums1[i];
        }
        for (int i = 0; i < nums2.length; i++) {
            sum2 += nums2[i];
        }
        if (sum1 == sum2) {
            return 0;
        }
        int[] a1 = new int[6];
        int[] a2 = new int[6];
        for (int i = 0; i < nums1.length; i++) {
            a1[nums1[i] - 1]++;
        }
        for (int i = 0; i < nums2.length; i++) {
            a2[nums2[i] - 1]++;
        }
        int n1 = nums1.length;
        int n2 = nums2.length;
        if (sum1 > sum2) {
            int d = sum1 - sum2;
            int c = 0;
            int i = 5;
            while (d > 0) {
                if (a1[i] == 0) {
                    i--;
                    continue;
                }
                int t = Math.min(d / (i + 1), a1[i]);
                d -= t * (i + 1);
                a1[i] -= t;
                c += t;
            }
            return c;
        } else {
            int d = sum2 - sum1;
            int c = 0;
            int i = 0;
            while (d > 0) {
                if (a2[i] == 0) {
                    i++;
                    continue;
                }
                int t = Math.min(d / (6 - i), a2[i]);
                d -= t * (6 - i);
                a2[i] -= t;
                c += t;
            }
            return c;
        }

=======

        int sum1 = 0;
        int sum2 = 0;
        for (int i = 0; i < nums1.length; i++) {
            sum1 += nums1[i];
        }
        for (int i = 0; i < nums2.length; i++) {
            sum2 += nums2[i];
        }
        if (sum1 == sum2) {
            return 0;
        }
        if (sum1 > sum2) {
            return minOperations(nums2, nums1);
        }
        int[] diff = new int[6];
        for (int i = 0; i < nums1.length; i++) {
            diff[nums1[i] - 1]++;
        }
        for (int i = 0; i < nums2.length; i++) {
            diff[6 - nums2[i]]++;
        }
        int count = 0;
        int target = sum2 - sum1;
        for (int i = 5; i >= 0 && target > 0; i--) {
            int delta = Math.min(diff[i], (target + i) / (i + 1));
            count += delta;
            target -= delta * (i + 1);
        }
        return target > 0 ? -1 : count;

=======

        int sum1 = 0, sum2 = 0;
        for (int num : nums1) {
            sum1 += num;
        }
        for (int num : nums2) {
            sum2 += num;
        }
        if (sum1 == sum2) {
            return 0;
        }
        if (sum1 < sum2) {
            return minOperations(nums2, nums1);
        }
        int[] count1 = new int[7];
        int[] count2 = new int[7];
        for (int num : nums1) {
            count1[num]++;
        }
        for (int num : nums2) {
            count2[num]++;
        }
        int diff = sum1 - sum2;
        int res = 0;
        for (int i = 6; i >= 1; i--) {
            int take = Math.min(count1[i] - 1, (diff + i - 1) / i);
            diff -= take * i;
            res += take;
            if (diff == 0) {
                return res;
            }
        }
        return -1;

=======

        int sum1 = 0;
        for (int i = 0; i < nums1.length; i++) {
            sum1 += nums1[i];
        }
        int sum2 = 0;
        for (int i = 0; i < nums2.length; i++) {
            sum2 += nums2[i];
        }
        int[] arr1 = new int[6];
        int[] arr2 = new int[6];
        for (int i = 0; i < nums1.length; i++) {
            arr1[nums1[i] - 1]++;
        }
        for (int i = 0; i < nums2.length; i++) {
            arr2[nums2[i] - 1]++;
        }
        int count = 0;
        if (sum1 > sum2) {
            int diff = sum1 - sum2;
            for (int i = 5; i >= 0; i--) {
                if (diff > 0) {
                    if (arr1[i] > arr2[5 - i]) {
                        int t = Math.min(arr1[i] - arr2[5 - i], (diff + i) / (i + 1));
                        diff -= t * (i + 1);
                        count += t;
                    }
                }
            }
        } else {
            int diff = sum2 - sum1;
            for (int i = 5; i >= 0; i--) {
                if (diff > 0) {
                    if (arr2[i] > arr1[5 - i]) {
                        int t = Math.min(arr2[i] - arr1[5 - i], (diff + i) / (i + 1));
                        diff -= t * (i + 1);
                        count += t;
                    }
                }
            }
        }
        return diff > 0 ? -1 : count;

=======

        int sum1 = 0, sum2 = 0;
        for (int n : nums1) sum1 += n;
        for (int n : nums2) sum2 += n;
        if (sum1 == sum2) return 0;
        if (sum1 < sum2) {
            int[] tmp = nums1;
            nums1 = nums2;
            nums2 = tmp;
            int t = sum1;
            sum1 = sum2;
            sum2 = t;
        }
        int[] diff = new int[5];
        for (int n : nums1) diff[6 - n]++;
        for (int n : nums2) diff[n - 1]++;
        int i = 4, res = 0;
        while (sum1 > sum2) {
            while (i >= 0 && diff[i] == 0) i--;
            if (i < 0) return -1;
            sum1 -= i + 1;
            diff[i]--;
            res++;
        }
        return res;

=======

        int sum1 = 0, sum2 = 0;
        for (int num : nums1) sum1 += num;
        for (int num : nums2) sum2 += num;
        if (sum1 == sum2) return 0;
        if (sum1 < sum2) {
            int[] tmp = nums1;
            nums1 = nums2;
            nums2 = tmp;
            int tmpSum = sum1;
            sum1 = sum2;
            sum2 = tmpSum;
        }
        int[] diff = new int[6];
        for (int num : nums1) diff[6 - num]++;
        for (int num : nums2) diff[num - 1]++;
        int i = 5, res = 0;
        while (sum1 > sum2) {
            while (diff[i] == 0) i--;
            sum1 -= (6 - i);
            res++;
            diff[i]--;
        }
        return res;

=======

        int sum1 = 0, sum2 = 0;
        for (int n : nums1) sum1 += n;
        for (int n : nums2) sum2 += n;
        if (sum1 > sum2) return minOperations(nums2, nums1);
        Arrays.sort(nums1);
        Arrays.sort(nums2);
        int i = 0, j = nums2.length - 1, ans = 0;
        while (sum1 < sum2) {
            int diff1 = i < nums1.length ? 6 - nums1[i] : 0;
            int diff2 = j >= 0 ? nums2[j] - 1 : 0;
            if (diff1 > diff2) {
                sum1 += diff1;
                i++;
            } else {
                sum2 -= diff2;
                j--;
            }
            ans++;
        }
        return ans;

=======

        int s1 = 0;
        int s2 = 0;
        int[] c1 = new int[7];
        int[] c2 = new int[7];
        for (int i = 0; i < nums1.length; i++) {
            s1 += nums1[i];
            c1[nums1[i]]++;
        }
        for (int i = 0; i < nums2.length; i++) {
            s2 += nums2[i];
            c2[nums2[i]]++;
        }
        if (s1 == s2) return 0;
        if (s1 > s2) {
            int[] tmp = c1;
            c1 = c2;
            c2 = tmp;
            int tmp2 = s1;
            s1 = s2;
            s2 = tmp2;
        }
        int d = s2 - s1;
        int r = 0;
        for (int i = 1; i < 7; i++) {
            int t = Math.min(c1[i], d / (7 - i));
            r += t;
            d -= t * (7 - i);
            if (d == 0) return r;
        }
        for (int i = 6; i > 0; i--) {
            int t = Math.min(c2[i], d / i);
            r += t;
            d -= t * i;
            if (d == 0) return r;
        }
        return -1;

=======

        int[] cnt1 = new int[6];
        int[] cnt2 = new int[6];
        int sum1 = 0;
        int sum2 = 0;
        for (int i : nums1) {
            cnt1[i - 1]++;
            sum1 += i;
        }
        for (int i : nums2) {
            cnt2[i - 1]++;
            sum2 += i;
        }
        if (sum1 == sum2) {
            return 0;
        }
        if (sum1 > sum2) {
            int[] tmp = cnt1;
            cnt1 = cnt2;
            cnt2 = tmp;
            int t = sum1;
            sum1 = sum2;
            sum2 = t;
        }
        int diff = sum2 - sum1;
        int res = 0;
        for (int i = 5; i >= 0; i--) {
            if (diff == 0) {
                return res;
            }
            int max = Math.min(cnt2[i], (diff - 1) / (6 - i) + 1);
            res += max;
            diff -= max * (6 - i);
        }
        return diff == 0 ? res : -1;
