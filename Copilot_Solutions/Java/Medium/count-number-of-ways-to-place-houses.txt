Synthesizing 10/10 solutions

=======

        long[] dp = new long[n + 1];
        dp[1] = 4;
        dp[2] = 9;
        for (int i = 3; i <= n; i++) {
            dp[i] = dp[i - 1] + 2 * dp[i - 2];
        }
        return (int) (dp[n] % (Math.pow(10, 9) + 7));

=======

        long[] dp = new long[n + 1];
        dp[0] = 1;
        dp[1] = 1;
        for (int i = 2; i <= n; i++) {
            dp[i] = dp[i - 1] + dp[i - 2];
        }
        return (int) ((dp[n] + dp[n - 1]) % (Math.pow(10, 9) + 7));

=======

        int MOD = 1_000_000_007;
        long[] dp = new long[n + 1];
        dp[0] = 1;
        dp[1] = 1;
        for (int i = 2; i <= n; i++) {
            dp[i] = (dp[i - 1] + dp[i - 2]) % MOD;
        }
        long ans = dp[n] * 2 % MOD;
        for (int i = 1; i <= n; i++) {
            ans = (ans + dp[i - 1] * dp[n - i] % MOD) % MOD;
        }
        return (int) ans;

=======

        int mod = 1000000007;
        long[][] dp = new long[n+1][2];
        dp[1][0] = 1;
        dp[1][1] = 1;
        for (int i = 2; i <= n; i++) {
            dp[i][0] = (dp[i-1][0] + dp[i-1][1]) % mod;
            dp[i][1] = (dp[i-1][0] + dp[i-1][1] + dp[i-1][0] * dp[i-1][1]) % mod;
        }
        return (int) ((dp[n][0] + dp[n][1]) % mod);

=======

        if (n == 1) {
            return 4;
        }
        int mod = 1000000007;
        long[] dp = new long[n + 1];
        dp[1] = 4;
        dp[2] = 9;
        for (int i = 3; i <= n; i++) {
            dp[i] = (dp[i - 1] + dp[i - 2]) % mod;
        }
        return (int)dp[n];

=======

        int mod = 1000000007;
        long dp[][] = new long[n+1][2];
        dp[1][0] = 2;
        dp[1][1] = 2;
        for(int i=2; i<=n; i++){
            dp[i][0] = (dp[i-1][0] + dp[i-1][1]) % mod;
            dp[i][1] = (dp[i-1][0] + dp[i-1][1]) % mod;
        }
        return (int)((dp[n][0] + dp[n][1]) % mod);

=======

        long dp[] = new long[n + 1];
        dp[0] = 1;
        dp[1] = 4;
        for(int i = 2; i <= n; i++) {
            dp[i] = (2 * dp[i - 1]) % 1000000007 + (dp[i - 2]) % 1000000007;
            dp[i] %= 1000000007;
        }
        return (int)dp[n];

=======

        long dp[][] = new long[n+1][2];
        dp[0][0] = 1;
        dp[0][1] = 1;
        for(int i = 1; i <= n; i++){
            dp[i][0] = (dp[i-1][0] + dp[i-1][1]) % 1000000007;
            dp[i][1] = (dp[i-1][0] + dp[i-1][1] + dp[i-1][1]) % 1000000007;
        }
        return (int)((dp[n][0] + dp[n][1]) % 1000000007);

=======

        long[] dp = new long[n+1];
        dp[0] = 1;
        dp[1] = 4;
        dp[2] = 9;
        for(int i = 3; i <= n; i++) {
            dp[i] = dp[i-1] + dp[i-2] + dp[i-2] + dp[i-3];
            dp[i] = dp[i] % 1000000007;
        }
        return (int)dp[n];

=======

        // base case
        if (n == 1) {
            return 4;
        }
        // recursive case
        int dp[] = new int[n + 1];
        dp[1] = 4;
        dp[2] = 9;
        for (int i = 3; i <= n; i++) {
            dp[i] = dp[i - 1] + dp[i - 2] + 2 * dp[i - 2];
        }
        return dp[n];
