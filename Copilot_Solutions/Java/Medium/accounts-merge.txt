Synthesizing 10/10 solutions

=======

        Map<String, String> emailToName = new HashMap();
        Map<String, List<String>> graph = new HashMap();
        for (List<String> account: accounts) {
            String name = "";
            for (String email: account) {
                if (name == "") {
                    name = email;
                    continue;
                }
                graph.computeIfAbsent(email, x-> new ArrayList()).add(account.get(1));
                graph.computeIfAbsent(account.get(1), x-> new ArrayList()).add(email);
                emailToName.put(email, name);
            }
        }
        Set<String> seen = new HashSet();
        List<List<String>> ans = new ArrayList();
        for (String email: graph.keySet()) {
            if (!seen.contains(email)) {
                seen.add(email);
                Stack<String> stack = new Stack();
                stack.push(email);
                List<String> component = new ArrayList();
                while (!stack.empty()) {
                    String node = stack.pop();
                    component.add(node);
                    for (String nei: graph.get(node)) {
                        if (!seen.contains(nei)) {
                            seen.add(nei);
                            stack.push(nei);
                        }
                    }
                }
                Collections.sort(component);
                component.add(0, emailToName.get(email));
                ans.add(component);
            }
        }
        return ans;

=======

        Map<String, String> emailToName = new HashMap<>();
        Map<String, List<String>> graph = new HashMap<>();
        for (List<String> account : accounts) {
            String name = account.get(0);
            String firstEmail = account.get(1);
            for (int i = 1; i < account.size(); i++) {
                String nextEmail = account.get(i);
                graph.computeIfAbsent(firstEmail, x -> new ArrayList<>()).add(nextEmail);
                graph.computeIfAbsent(nextEmail, x -> new ArrayList<>()).add(firstEmail);
                emailToName.put(nextEmail, name);
            }
        }
        Set<String> visited = new HashSet<>();
        List<List<String>> result = new ArrayList<>();
        for (String email : graph.keySet()) {
            if (!visited.contains(email)) {
                visited.add(email);
                List<String> component = new ArrayList<>();
                Stack<String> stack = new Stack<>();
                stack.add(email);
                while (!stack.isEmpty()) {
                    String node = stack.pop();
                    component.add(node);
                    for (String next : graph.get(node)) {
                        if (!visited.contains(next)) {
                            visited.add(next);
                            stack.add(next);
                        }
                    }
                }
                Collections.sort(component);
                component.add(0, emailToName.get(email));
                result.add(component);
            }
        }
        return result;

=======

        Map<String, String> emailToName = new HashMap<>();
        Map<String, List<String>> graph = new HashMap<>();
        for (List<String> account : accounts) {
            String name = account.get(0);
            String parent = account.get(1);
            for (int i = 2; i < account.size(); i++) {
                graph.computeIfAbsent(parent, x -> new ArrayList<>()).add(account.get(i));
                graph.computeIfAbsent(account.get(i), x -> new ArrayList<>()).add(parent);
            }
            emailToName.put(parent, name);
        }
        Set<String> visited = new HashSet<>();
        List<List<String>> ans = new ArrayList<>();
        for (String email : graph.keySet()) {
            if (visited.add(email)) {
                List<String> component = new ArrayList<>();
                dfs(graph, email, visited, component);
                Collections.sort(component);
                component.add(0, emailToName.get(email));
                ans.add(component);
            }
        }
        return ans;
    }
    private void dfs(Map<String, List<String>> graph, String email, Set<String> visited, List<String> component) {
        component.add(email);
        for (String nei : graph.get(email)) {
            if (visited.add(nei)) {
                dfs(graph, nei, visited, component);
            }
        }

=======

        Map<String, String> owner = new HashMap<>();
        Map<String, String> parent = new HashMap<>();
        Map<String, TreeSet<String>> union = new HashMap<>();
        
        for (List<String> account : accounts) {
            for (int i = 1; i < account.size(); i++) {
                parent.put(account.get(i), account.get(i));
                owner.put(account.get(i), account.get(0));
            }
        }
        
        for (List<String> account : accounts) {
            String p = find(account.get(1), parent);
            for (int i = 2; i < account.size(); i++) {
                parent.put(find(account.get(i), parent), p);
            }
        }
        
        for (List<String> account : accounts) {
            String p = find(account.get(1), parent);
            if (!union.containsKey(p)) {
                union.put(p, new TreeSet<>());
            }
            for (int i = 1; i < account.size(); i++) {
                union.get(p).add(account.get(i));
            }
        }
        
        List<List<String>> res = new ArrayList<>();
        for (String p : union.keySet()) {
            List<String> emails = new ArrayList<>(union.get(p));
            emails.add(0, owner.get(p));
            res.add(emails);
        }
        
        return res;

=======

        List<List<String>> result = new ArrayList<>();
        Map<String, String> emailToName = new HashMap<>();
        Map<String, Set<String>> graph = new HashMap<>();
        for (List<String> account : accounts) {
            String name = account.get(0);
            for (int i = 1; i < account.size(); i++) {
                String email = account.get(i);
                emailToName.put(email, name);
                graph.computeIfAbsent(email, x -> new HashSet<>()).add(account.get(1));
                if (i > 1) graph.get(email).add(account.get(i - 1));
            }
        }
        Set<String> seen = new HashSet<>();
        for (String email : graph.keySet()) {
            if (!seen.contains(email)) {
                seen.add(email);
                Stack<String> stack = new Stack<>();
                stack.push(email);
                List<String> component = new ArrayList<>();
                while (!stack.isEmpty()) {
                    String node = stack.pop();
                    component.add(node);
                    for (String nei : graph.get(node)) {
                        if (!seen.contains(nei)) {
                            seen.add(nei);
                            stack.push(nei);
                        }
                    }
                }
                Collections.sort(component);
                component.add(0, emailToName.get(email));
                result.add(component);
            }
        }
        return result;

=======

        Map<String, String> emailToName = new HashMap<>();
        Map<String, List<String>> graph = new HashMap<>();
        for (List<String> account : accounts) {
            String name = account.get(0);
            String root = account.get(1);
            for (int i = 1; i < account.size(); i++) {
                graph.computeIfAbsent(root, x -> new ArrayList<>()).add(account.get(i));
                graph.computeIfAbsent(account.get(i), x -> new ArrayList<>()).add(root);
                emailToName.put(account.get(i), name);
            }
        }
        Set<String> visited = new HashSet<>();
        List<List<String>> result = new ArrayList<>();
        for (String email : graph.keySet()) {
            if (!visited.contains(email)) {
                List<String> list = new ArrayList<>();
                dfs(graph, email, visited, list);
                Collections.sort(list);
                list.add(0, emailToName.get(email));
                result.add(list);
            }
        }
        return result;
    }
    private void dfs(Map<String, List<String>> graph, String email, Set<String> visited, List<String> list) {
        visited.add(email);
        list.add(email);
        for (String next : graph.get(email)) {
            if (!visited.contains(next)) {
                dfs(graph, next, visited, list);
            }
        }

=======

        Map<String, String> emailToName = new HashMap<>();
        Map<String, List<String>> graph = new HashMap<>();
        for(List<String> account: accounts){
            String name = account.get(0);
            for(int i = 1; i < account.size(); i++){
                String email = account.get(i);
                emailToName.put(email, name);
                graph.computeIfAbsent(email, x -> new ArrayList<>()).add(account.get(1));
                graph.computeIfAbsent(account.get(1), x -> new ArrayList<>()).add(email);
            }
        }
        Set<String> seen = new HashSet<>();
        List<List<String>> res = new ArrayList<>();
        for(String email: graph.keySet()){
            if(!seen.contains(email)){
                seen.add(email);
                Stack<String> stack = new Stack<>();
                stack.push(email);
                List<String> component = new ArrayList<>();
                while(!stack.isEmpty()){
                    String node = stack.pop();
                    component.add(node);
                    for(String nei: graph.get(node)){
                        if(!seen.contains(nei)){
                            seen.add(nei);
                            stack.push(nei);
                        }
                    }
                }
                Collections.sort(component);
                component.add(0, emailToName.get(email));
                res.add(component);
            }
        }
        return res;

=======

        List<List<String>> result = new ArrayList<>();
        if (accounts == null || accounts.size() == 0) {
            return result;
        }
        Map<String, List<String>> map = new HashMap<>();
        Map<String, String> name = new HashMap<>();
        for (List<String> account : accounts) {
            String userName = account.get(0);
            for (int i = 1; i < account.size(); i++) {
                map.computeIfAbsent(account.get(i), x -> new ArrayList<>()).add(account.get(1));
                map.computeIfAbsent(account.get(1), x -> new ArrayList<>()).add(account.get(i));
                name.put(account.get(i), userName);
            }
        }
        Set<String> visited = new HashSet<>();
        for (String email : map.keySet()) {
            if (!visited.contains(email)) {
                visited.add(email);
                List<String> list = new ArrayList<>();
                list.add(email);
                dfs(map, visited, list, email);
                Collections.sort(list);
                list.add(0, name.get(email));
                result.add(list);
            }
        }
        return result;
    }
    private void dfs(Map<String, List<String>> map, Set<String> visited, List<String> list, String email) {
        for (String next : map.get(email)) {
            if (!visited.contains(next)) {
                visited.add(next);
                list.add(next);
                dfs(map, visited, list, next);
            }
        }

=======

        List<List<String>> res = new ArrayList<>();
        Map<String, String> emailToName = new HashMap<>();
        Map<String, List<String>> graph = new HashMap<>();
        Set<String> visited = new HashSet<>();
        
        // build graph
        for (List<String> account : accounts) {
            String name = account.get(0);
            String firstEmail = account.get(1);
            for (int i = 2; i < account.size(); i++) {
                String email = account.get(i);
                emailToName.put(email, name);
                graph.computeIfAbsent(firstEmail, x -> new ArrayList<>()).add(email);
                graph.computeIfAbsent(email, x -> new ArrayList<>()).add(firstEmail);
            }
        }
        
        // dfs
        for (String email : graph.keySet()) {
            if (visited.add(email)) {
                List<String> list = new ArrayList<>();
                dfs(graph, email, visited, list);
                Collections.sort(list);
                list.add(0, emailToName.get(email));
                res.add(list);
            }
        }
        
        return res;
    }
    
    private void dfs(Map<String, List<String>> graph, String email, Set<String> visited, List<String> list) {
        list.add(email);
        for (String nei : graph.get(email)) {
            if (visited.add(nei)) {
                dfs(graph, nei, visited, list);
            }
        }

=======

        // Union Find
        // O(nlogn) time
        Map<String, Integer> emailToIndex = new HashMap<>();
        Map<String, String> emailToName = new HashMap<>();
        int emailsCount = 0;
        for (List<String> account: accounts) {
            String name = account.get(0);
            int size = account.size();
            for (int i = 1; i < size; i++) {
                String email = account.get(i);
                if (!emailToIndex.containsKey(email)) {
                    emailToIndex.put(email, emailsCount++);
                    emailToName.put(email, name);
                }
            }
        }
        UnionFind uf = new UnionFind(emailsCount);
        for (List<String> account: accounts) {
            String firstEmail = account.get(1);
            int firstIndex = emailToIndex.get(firstEmail);
            int size = account.size();
            for (int i = 2; i < size; i++) {
                String nextEmail = account.get(i);
                int nextIndex = emailToIndex.get(nextEmail);
                uf.union(firstIndex, nextIndex);
            }
        }
        Map<Integer, List<String>> indexToEmails = new HashMap<>();
        for (String email: emailToIndex.keySet()) {
            int index = uf.find(emailToIndex.get(email));
            List<String> account = indexToEmails.getOrDefault(index, new ArrayList<>());
            account.add(email);
            indexToEmails.put(index, account);
        }
        List<List<String>> merged = new ArrayList<>();
        for (List<String> emails: indexToEmails.values()) {
            Collections.sort(emails);
            String name = emailToName.get(emails.get(0));
            List<String> account = new ArrayList<>();
            account.add(name);
            account.addAll(emails);
            merged.add(account);
        }
        return merged;
    }
}
