Synthesizing 10/10 solutions

=======

        int m = grid.length;
        int n = grid[0].length;
        int low = pricing[0];
        int high = pricing[1];
        int row = start[0];
        int col = start[1];
        List<List<Integer>> result = new ArrayList<>();
        PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> {
            if (a[0] < b[0]) {
                return -1;
            } else if (a[0] > b[0]) {
                return 1;
            } else {
                if (a[1] < b[1]) {
                    return -1;
                } else if (a[1] > b[1]) {
                    return 1;
                } else {
                    if (a[2] < b[2]) {
                        return -1;
                    } else if (a[2] > b[2]) {
                        return 1;
                    } else {
                        if (a[3] < b[3]) {
                            return -1;
                        } else if (a[3] > b[3]) {
                            return 1;
                        } else {
                            return 0;
                        }
                    }
                }
            }
        });
        int[][] dirs = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};
        boolean[][] visited = new boolean[m][n];
        int[][] price = new int[m][n];
        PriorityQueue<int[]> pq1 = new PriorityQueue<>((a, b) -> {
            if (a[0] < b[0]) {
                return -1;
            } else if (a[0] > b[0]) {
                return 1;
            } else {
                if (a[1] < b[1]) {
                    return -1;
                } else if (a[1] > b[1]) {
                    return 1;
                } else {
                    return 0;
                }
            }
        });
        Queue<int[]> queue = new LinkedList<>();
        queue.offer(new int[]{row, col});
        while (!queue.isEmpty()) {
            int[] cur = queue.poll();
            int curRow = cur[0];
            int curCol = cur[1];
            if (visited[curRow][curCol]) {
                continue;
            }
            visited[curRow][curCol] =

=======

        int m = grid.length;
        int n = grid[0].length;
        int low = pricing[0];
        int high = pricing[1];
        int row = start[0];
        int col = start[1];
        List<List<Integer>> result = new ArrayList<>();
        PriorityQueue<List<Integer>> pq = new PriorityQueue<>(
            (a, b) -> a.get(0) == b.get(0) ? a.get(1) == b.get(1) ? a.get(2) == b.get(2) ? a.get(3) - b.get(3) : a.get(2) - b.get(2) : a.get(1) - b.get(1) : a.get(0) - b.get(0)
        );
        boolean[][] visited = new boolean[m][n];
        Queue<int[]> queue = new LinkedList<>();
        queue.offer(new int[]{row, col});
        visited[row][col] = true;
        while (!queue.isEmpty()) {
            int[] cell = queue.poll();
            int i = cell[0];
            int j = cell[1];
            if (grid[i][j] >= low && grid[i][j] <= high) {
                pq.offer(Arrays.asList(i + j, i, j, grid[i][j]));
                if (pq.size() > k) {
                    pq.poll();
                }
            }
            if (i > 0 && !visited[i - 1][j] && grid[i - 1][j] != 0) {
                queue.offer(new int[]{i - 1, j});
                visited[i - 1][j] = true;
            }
            if (i < m - 1 && !visited[i + 1][j] && grid[i + 1][j] != 0) {
                queue.offer(new int[]{i + 1, j});
                visited[i + 1][j] = true;
            }
            if (j > 0 && !visited[i][j - 1] && grid[i][j - 1] != 0) {
                queue.offer(new int[]{i, j - 1});
                visited[i][j - 1] = true;
            }
            if (j < n - 1 && !visited[i][j + 1] && grid[i][j + 1] != 0) {
                queue

=======

        int m = grid.length;
        int n = grid[0].length;
        int low = pricing[0];
        int high = pricing[1];
        int r = start[0];
        int c = start[1];
        PriorityQueue<List<Integer>> pq = new PriorityQueue<>((a, b) -> {
            int distA = a.get(0);
            int distB = b.get(0);
            int priceA = a.get(1);
            int priceB = b.get(1);
            int rowA = a.get(2);
            int rowB = b.get(2);
            int colA = a.get(3);
            int colB = b.get(3);
            if (distA != distB) {
                return distB - distA;
            } else if (priceA != priceB) {
                return priceA - priceB;
            } else if (rowA != rowB) {
                return rowA - rowB;
            } else {
                return colA - colB;
            }
        });
        Queue<int[]> q = new LinkedList<>();
        q.add(new int[]{r, c});
        Set<String> visited = new HashSet<>();
        visited.add(r + "," + c);
        while (!q.isEmpty()) {
            int[] curr = q.poll();
            int row = curr[0];
            int col = curr[1];
            int price = grid[row][col];
            if (price >= low && price <= high) {
                pq.add(Arrays.asList(Math.abs(row - r) + Math.abs(col - c), price, row, col));
                if (pq.size() > k) {
                    pq.poll();
                }
            }
            int[] dr = new int[]{0, 0, 1, -1};
            int[] dc = new int[]{1, -1, 0, 0};
            for (int i = 0; i < dr.length; i++) {
                int nr = row + dr[i];
                int nc = col + dc[i];
                if (nr >= 0 && nr < m && nc >= 0 && nc < n && grid[nr][nc] != 0 && !visited.contains(nr + "," + nc)) {
                    q.add(new int[]{nr, nc});
                    visited.add(nr + "," + nc);
                }
            }
        }
        List<List<Integer>> res = new ArrayList

=======

        int m = grid.length, n = grid[0].length;
        int[][] dist = new int[m][n];
        for (int i = 0; i < m; i++) {
            Arrays.fill(dist[i], Integer.MAX_VALUE);
        }
        PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> {
            if (a[0] != b[0]) {
                return a[0] - b[0];
            }
            if (a[1] != b[1]) {
                return a[1] - b[1];
            }
            if (a[2] != b[2]) {
                return a[2] - b[2];
            }
            return a[3] - b[3];
        });
        pq.offer(new int[]{0, grid[start[0]][start[1]], start[0], start[1]});
        dist[start[0]][start[1]] = 0;
        int[] dx = new int[]{-1, 0, 1, 0};
        int[] dy = new int[]{0, 1, 0, -1};
        while (!pq.isEmpty()) {
            int[] top = pq.poll();
            int d = top[0], p = top[1], x = top[2], y = top[3];
            if (d > dist[x][y]) {
                continue;
            }
            if (p >= pricing[0] && p <= pricing[1]) {
                pq.offer(new int[]{d, p, x, y});
                if (pq.size() > k) {
                    pq.poll();
                }
            }
            for (int i = 0; i < 4; i++) {
                int nx = x + dx[i], ny = y + dy[i];
                if (nx >= 0 && nx < m && ny >= 0 && ny < n && grid[nx][ny] > 0 && d + 1 < dist[nx][ny]) {
                    dist[nx][ny] = d + 1;
                    pq.offer(new int[]{d + 1, grid[nx][ny], nx, ny});
                }
            }
        }
        List<List<Integer>> ret = new ArrayList<>();
        while (!pq.isEmpty()) {
            int[] top = pq.poll();
            List<Integer> list = new ArrayList<>();
            list.add(top

=======

        int m = grid.length;
        int n = grid[0].length;
        PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> {
            if (a[0] != b[0]) {
                return a[0] - b[0];
            }
            if (a[1] != b[1]) {
                return a[1] - b[1];
            }
            if (a[2] != b[2]) {
                return a[2] - b[2];
            }
            return a[3] - b[3];
        });
        int[][] directions = new int[][]{{-1, 0}, {1, 0}, {0, -1}, {0, 1}};
        boolean[][] visited = new boolean[m][n];
        pq.offer(new int[]{0, grid[start[0]][start[1]], start[0], start[1]});
        while (!pq.isEmpty()) {
            int[] cur = pq.poll();
            int x = cur[2];
            int y = cur[3];
            if (visited[x][y]) {
                continue;
            }
            visited[x][y] = true;
            if (cur[1] >= pricing[0] && cur[1] <= pricing[1]) {
                k--;
                if (k == 0) {
                    break;
                }
            }
            for (int[] dir : directions) {
                int nx = x + dir[0];
                int ny = y + dir[1];
                if (nx >= 0 && nx < m && ny >= 0 && ny < n && !visited[nx][ny] && grid[nx][ny] != 0) {
                    pq.offer(new int[]{cur[0] + 1, grid[nx][ny], nx, ny});
                }
            }
        }
        List<List<Integer>> res = new ArrayList<>();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (visited[i][j] && grid[i][j] >= pricing[0] && grid[i][j] <= pricing[1]) {
                    List<Integer> list = new ArrayList<>();
                    list.add(i);
                    list.add(j);
                    res.add(list);
                }
            }
        }
        return res;

=======

        int m = grid.length, n = grid[0].length;
        int[][] dist = new int[m][n];
        for (int[] row : dist)
            Arrays.fill(row, Integer.MAX_VALUE);
        dist[start[0]][start[1]] = 0;
        PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> {
            if (a[0] != b[0]) return a[0] - b[0];
            if (a[1] != b[1]) return a[1] - b[1];
            if (a[2] != b[2]) return a[2] - b[2];
            return a[3] - b[3];
        });
        pq.offer(new int[]{0, grid[start[0]][start[1]], start[0], start[1]});
        int[][] dirs = new int[][]{{0, 1}, {0, -1}, {1, 0}, {-1, 0}};
        while (!pq.isEmpty()) {
            int[] cur = pq.poll();
            int x = cur[2], y = cur[3];
            for (int[] dir : dirs) {
                int i = x + dir[0], j = y + dir[1];
                if (i < 0 || i >= m || j < 0 || j >= n || grid[i][j] == 0) continue;
                if (dist[i][j] > dist[x][y] + 1) {
                    dist[i][j] = dist[x][y] + 1;
                    pq.offer(new int[]{dist[i][j], grid[i][j], i, j});
                }
            }
        }
        List<List<Integer>> res = new ArrayList<>();
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                if (dist[i][j] != Integer.MAX_VALUE && grid[i][j] >= pricing[0] && grid[i][j] <= pricing[1]) {
                    res.add(Arrays.asList(i, j));
                }
            }
        }
        Collections.sort(res, (a, b) -> {
            if (dist[a.get(0)][a.get(1)] != dist[b.get(0)][b.get(1)]) return dist[b.get(0)][

=======

        int m = grid.length, n = grid[0].length;
        int low = pricing[0], high = pricing[1];
        int row = start[0], col = start[1];
        int[][] dirs = new int[][]{{0, 1}, {0, -1}, {1, 0}, {-1, 0}};
        PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> {
            if (a[0] != b[0]) return a[0] - b[0];
            if (a[1] != b[1]) return a[1] - b[1];
            if (a[2] != b[2]) return a[2] - b[2];
            return a[3] - b[3];
        });
        boolean[][] visited = new boolean[m][n];
        visited[row][col] = true;
        pq.offer(new int[]{0, grid[row][col], row, col});
        while (!pq.isEmpty()) {
            int[] cur = pq.poll();
            int d = cur[0], p = cur[1], r = cur[2], c = cur[3];
            if (p >= low && p <= high) {
                if (k == 1) return Arrays.asList(Arrays.asList(r, c));
                k--;
            }
            for (int[] dir : dirs) {
                int nr = r + dir[0], nc = c + dir[1];
                if (nr < 0 || nr >= m || nc < 0 || nc >= n || visited[nr][nc] || grid[nr][nc] == 0) continue;
                visited[nr][nc] = true;
                pq.offer(new int[]{d + 1, grid[nr][nc], nr, nc});
            }
        }
        return new ArrayList<>();

=======

        int low = pricing[0];
        int high = pricing[1];
        int m = grid.length;
        int n = grid[0].length;
        List<List<Integer>> result = new ArrayList<>();
        PriorityQueue<int[]> pq = new PriorityQueue<>(new Comparator<int[]>() {
            public int compare(int[] a, int[] b) {
                if (a[0] == b[0]) {
                    if (a[1] == b[1]) {
                        if (a[2] == b[2]) {
                            return a[3] - b[3];
                        } else {
                            return a[2] - b[2];
                        }
                    } else {
                        return a[1] - b[1];
                    }
                } else {
                    return a[0] - b[0];
                }
            }
        });
        boolean[][] visited = new boolean[m][n];
        int[][] dirs = new int[][]{{0, 1}, {1, 0}, {0, -1}, {-1, 0}};
        visited[start[0]][start[1]] = true;
        pq.offer(new int[]{0, grid[start[0]][start[1]], start[0], start[1]});
        while (!pq.isEmpty()) {
            int[] curr = pq.poll();
            if (curr[1] >= low && curr[1] <= high) {
                result.add(Arrays.asList(curr[2], curr[3]));
            }
            if (result.size() == k) {
                break;
            }
            for (int[] dir : dirs) {
                int x = curr[2] + dir[0];
                int y = curr[3] + dir[1];
                if (x < 0 || x >= m || y < 0 || y >= n || visited[x][y] || grid[x][y] == 0) {
                    continue;
                }
                visited[x][y] = true;
                pq.offer(new int[]{curr[0] + 1, grid[x][y], x, y});
            }
        }
        return result;

=======

        List<List<Integer>> res = new ArrayList<>();
        int m = grid.length, n = grid[0].length;
        PriorityQueue<int[]> pq = new PriorityQueue<>(new Comparator<int[]>(){
            public int compare(int[] a, int[] b) {
                if (a[0] != b[0]) return a[0] - b[0];
                if (a[1] != b[1]) return b[1] - a[1];
                if (a[2] != b[2]) return a[2] - b[2];
                return a[3] - b[3];
            }
        });
        int[][] dirs = new int[][]{{-1, 0}, {1, 0}, {0, -1}, {0, 1}};
        boolean[][] visited = new boolean[m][n];
        pq.offer(new int[]{0, grid[start[0]][start[1]], start[0], start[1]});
        while (!pq.isEmpty() && k > 0) {
            int[] cur = pq.poll();
            if (visited[cur[2]][cur[3]]) continue;
            visited[cur[2]][cur[3]] = true;
            if (cur[1] >= pricing[0] && cur[1] <= pricing[1]) {
                res.add(Arrays.asList(cur[2], cur[3]));
                k--;
            }
            for (int[] dir : dirs) {
                int x = cur[2] + dir[0];
                int y = cur[3] + dir[1];
                if (x < 0 || x >= m || y < 0 || y >= n || grid[x][y] == 0 || visited[x][y]) continue;
                pq.offer(new int[]{cur[0] + 1, grid[x][y], x, y});
            }
        }
        return res;

=======

        int m = grid.length;
        int n = grid[0].length;
        Queue<int[]> queue = new PriorityQueue<>((a, b) -> {
            if (a[2] != b[2]) {
                return a[2] - b[2];
            }
            if (a[3] != b[3]) {
                return a[3] - b[3];
            }
            if (a[0] != b[0]) {
                return a[0] - b[0];
            }
            return a[1] - b[1];
        });
        queue.offer(new int[]{start[0], start[1], 0, grid[start[0]][start[1]]});
        boolean[][] visited = new boolean[m][n];
        List<List<Integer>> res = new ArrayList<>();
        while (k > 0 && !queue.isEmpty()) {
            int[] cur = queue.poll();
            if (cur[3] < pricing[0] || cur[3] > pricing[1]) {
                continue;
            }
            if (visited[cur[0]][cur[1]]) {
                continue;
            }
            visited[cur[0]][cur[1]] = true;
            res.add(Arrays.asList(cur[0], cur[1]));
            k--;
            if (cur[0] > 0 && grid[cur[0] - 1][cur[1]] > 0) {
                queue.offer(new int[]{cur[0] - 1, cur[1], cur[2] + 1, grid[cur[0] - 1][cur[1]]});
            }
            if (cur[0] < m - 1 && grid[cur[0] + 1][cur[1]] > 0) {
                queue.offer(new int[]{cur[0] + 1, cur[1], cur[2] + 1, grid[cur[0] + 1][cur[1]]});
            }
            if (cur[1] > 0 && grid[cur[0]][cur[1] - 1] > 0) {
                queue.offer(new int[]{cur[0], cur[1] - 1, cur[2] + 1, grid[cur[0]][cur[1] - 1]});
            }
            if (cur[1] < n - 1 && grid[cur[0
