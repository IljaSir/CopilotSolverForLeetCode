Synthesizing 10/10 solutions

=======

        int n = dist.length;
        double[] times = new double[n];
        for (int i = 0; i < n; i++) {
            times[i] = (double) dist[i] / speed[i];
        }
        Arrays.sort(times);
        int ans = 0;
        for (double time : times) {
            if (time <= ans) {
                break;
            }
            ans++;
        }
        return ans;

=======

        int n = dist.length;
        int[] time = new int[n];
        for (int i = 0; i < n; i++) {
            time[i] = (dist[i] + speed[i] - 1) / speed[i];
        }
        Arrays.sort(time);
        int cnt = 0;
        for (int i = 0; i < n; i++) {
            if (time[i] > cnt) cnt++;
            else break;
        }
        return cnt;

=======

        int n = dist.length;
        int[] time = new int[n];
        for (int i = 0; i < n; i++) {
            time[i] = (dist[i] + speed[i] - 1) / speed[i];
        }
        Arrays.sort(time);
        int ans = 0;
        for (int i = 0; i < n; i++) {
            if (time[i] > ans) {
                ans++;
            } else {
                break;
            }
        }
        return ans;

=======

        int n = dist.length;
        int[] time = new int[n];
        for (int i = 0; i < n; i++) {
            time[i] = (dist[i] + speed[i] - 1) / speed[i];
        }
        Arrays.sort(time);
        int count = 0;
        for (int i = 0; i < n; i++) {
            if (time[i] > i) {
                count++;
            } else {
                break;
            }
        }
        return count;

=======

        int n = dist.length;
        int[] time = new int[n];
        for (int i = 0; i < n; i++) {
            time[i] = (dist[i] + speed[i] - 1) / speed[i];
        }
        Arrays.sort(time);
        int res = 0;
        for (int i = 0; i < n; i++) {
            if (time[i] <= i) {
                break;
            }
            res++;
        }
        return res;

=======

        int n = dist.length;
        int[] times = new int[n];
        for (int i = 0; i < n; i++) {
            times[i] = (dist[i] + speed[i] - 1) / speed[i];
        }
        Arrays.sort(times);
        int lastTime = 0;
        int result = 0;
        for (int time : times) {
            if (time > lastTime) {
                result++;
                lastTime++;
            } else {
                break;
            }
        }
        return result;

=======

        int n = dist.length;
        int[] time = new int[n];
        for (int i = 0; i < n; i++) {
            time[i] = (dist[i] - 1) / speed[i];
        }
        Arrays.sort(time);
        for (int i = 0; i < n; i++) {
            if (time[i] <= i) {
                return i;
            }
        }
        return n;

=======

        int n = dist.length;
        int[] t = new int[n];
        for (int i = 0; i < n; i++) {
            t[i] = (int) Math.ceil((double) dist[i] / speed[i]);
        }
        Arrays.sort(t);
        int count = 0;
        for (int i = 0; i < n; i++) {
            if (t[i] <= i) {
                break;
            }
            count++;
        }
        return count;

=======

        int n = dist.length;
        int[] timeToReach = new int[n];
        for (int i = 0; i < n; i++) {
            timeToReach[i] = (int)Math.ceil((double)dist[i] / speed[i]);
        }
        Arrays.sort(timeToReach);
        int ans = 0;
        for (int i = 0; i < n; i++) {
            if (timeToReach[i] > ans) {
                ans++;
            } else {
                break;
            }
        }
        return ans;

=======

        int n=dist.length;
        int[] time=new int[n];
        for(int i=0;i<n;i++){
            time[i]=dist[i]/speed[i];
            if(dist[i]%speed[i]!=0)
                time[i]++;
        }
        Arrays.sort(time);
        int cnt=0;
        for(int i=0;i<n;i++){
            if(time[i]<=i)
                break;
            cnt++;
        }
        return cnt;
