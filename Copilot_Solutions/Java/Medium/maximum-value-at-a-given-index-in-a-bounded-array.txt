Synthesizing 10/10 solutions

=======

        int left = 1;
        int right = maxSum;
        while (left < right) {
            int mid = (left + right + 1) / 2;
            if (check(n, index, maxSum, mid)) {
                left = mid;
            } else {
                right = mid - 1;
            }
        }
        return left;
    }

    private boolean check(int n, int index, int maxSum, int mid) {
        long sum = mid;
        int left = index;
        int right = index;
        int num = 1;
        while (left >= 0 || right < n) {
            if (left >= 0 && right < n) {
                if (num < mid) {
                    sum += 2 * num;
                    num++;
                } else {
                    sum += num;
                }
                left--;
                right++;
            } else if (left >= 0) {
                if (num < mid) {
                    sum += 2 * num;
                    num++;
                } else {
                    sum += num;
                }
                left--;
            } else {
                if (num < mid) {
                    sum += 2 * num;
                    num++;
                } else {
                    sum += num;
                }
                right++;
            }
        }
        return sum <= maxSum;

=======

        maxSum -= n;
        int left = 0;
        int right = maxSum;
        while (left < right) {
            int mid = (left + right + 1) >>> 1;
            if (check(mid, index, n, maxSum)) {
                left = mid;
            } else {
                right = mid - 1;
            }
        }
        return left + 1;
    }

    boolean check(int x, int index, int n, int maxSum) {
        long sum = x;
        int l = index - 1;
        int r = index + 1;
        int left = x - 1;
        int right = x - 1;
        while (l >= 0 || r < n) {
            if (l >= 0) {
                sum += Math.min(left, maxSum);
                maxSum -= Math.min(left, maxSum);
                left--;
                l--;
            }
            if (r < n) {
                sum += Math.min(right, maxSum);
                maxSum -= Math.min(right, maxSum);
                right--;
                r++;
            }
        }
        return sum <= maxSum;

=======

        int left = 1;
        int right = maxSum;
        while (left < right) {
            int mid = (left + right + 1) >> 1;
            if (check(n, index, maxSum, mid)) {
                left = mid;
            } else {
                right = mid - 1;
            }
        }
        return left;
    }

    private boolean check(int n, int index, int maxSum, int x) {
        long sum = (long) x;
        int left = index;
        int right = index;
        int leftValue = x - 1;
        int rightValue = x - 1;
        while (left > 0 || right < n - 1) {
            if (left == 0) {
                rightValue = Math.min(rightValue, x - (n - 1 - right));
                sum += rightValue;
                right++;
                continue;
            }
            if (right == n - 1) {
                leftValue = Math.min(leftValue, x - left);
                sum += leftValue;
                left--;
                continue;
            }
            if (leftValue > rightValue) {
                leftValue = Math.min(leftValue, x - left);
                sum += leftValue;
                left--;
            } else {
                rightValue = Math.min(rightValue, x - (n - 1 - right));
                sum += rightValue;
                right++;
            }
        }
        return sum <= maxSum;

=======

        int l = 1, r = maxSum;
        while (l < r) {
            int m = l + (r - l + 1) / 2;
            if (check(n, index, maxSum, m)) {
                l = m;
            } else {
                r = m - 1;
            }
        }
        return l;

=======

        maxSum -= n;
        int l = 0;
        int r = maxSum;
        while (l < r) {
            int mid = (l + r + 1) >> 1;
            if (check(n, index, maxSum, mid)) {
                l = mid;
            } else {
                r = mid - 1;
            }
        }
        return l + 1;

=======

        long left = 1, right = maxSum;
        while (left < right) {
            long mid = (left + right + 1) >> 1;
            if (check(n, index, maxSum, mid)) {
                left = mid;
            } else {
                right = mid - 1;
            }
        }
        return (int) left;

=======

        int l = 0;
        int r = maxSum;
        while (l < r) {
            int mid = (l + r + 1) / 2;
            if (check(n, index, maxSum, mid)) {
                l = mid;
            } else {
                r = mid - 1;
            }
        }
        return l;

=======

        int l = 1, r = maxSum;
        while (l < r) {
            int mid = l + (r - l + 1) / 2;
            if (check(mid, n, index, maxSum)) {
                l = mid;
            } else {
                r = mid - 1;
            }
        }
        return l;
    }
    private boolean check(int x, int n, int index, int maxSum) {
        long sum = x;
        int l = index, r = index;
        while (l > 0 || r < n - 1) {
            l = Math.max(0, l - 1);
            r = Math.min(n - 1, r + 1);
            sum += x - Math.abs(index - l);
            sum += x - Math.abs(index - r);
            if (sum > maxSum) {
                return false;
            }
        }
        return sum <= maxSum;

=======

        long left = 1;
        long right = maxSum;
        while (left < right) {
            long mid = (left + right + 1) / 2;
            long sum = mid;
            if (index >= mid) {
                sum += (index + mid - 1) * mid / 2;
            } else {
                sum += (mid - 1) * mid / 2 + (mid - index);
            }
            if (n - index - 1 >= mid) {
                sum += (n - index - 1 + mid - 1) * mid / 2;
            } else {
                sum += (mid - 1) * mid / 2 + (mid - (n - index - 1));
            }
            if (sum <= maxSum) {
                left = mid;
            } else {
                right = mid - 1;
            }
        }
        return (int)left;

=======

        long lo = 0, hi = maxSum;
        while (lo < hi) {
            long mid = lo + (hi - lo) / 2;
            long left = mid - 1 - Math.max(0, index - mid + 1);
            long right = mid - 1 - Math.max(0, n - index - mid);
            long sum = mid + left * (left + 1) / 2 + right * (right + 1) / 2;
            if (sum > maxSum) {
                hi = mid;
            } else {
                lo = mid + 1;
            }
        }
        return (int) lo - 1;
