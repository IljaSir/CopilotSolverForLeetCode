Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int digit = 1;
        long start = 1;
        long count = 9;
        while (n > count) {
            n -= count;
            digit += 1;
            start *= 10;
            count = 9 * start * digit;
        }
        long num = start + (n - 1) / digit;
        return Long.toString(num).charAt((n - 1) % digit) - '0';

=======

        int digit = 1;
        long start = 1;
        long count = 9;
        while (n > count) {
            n -= count;
            digit += 1;
            start *= 10;
            count = digit * start * 9;
        }
        long num = start + (n - 1) / digit;
        return Long.toString(num).charAt((n - 1) % digit) - '0';

=======

        int len = 1;
        long count = 9;
        int start = 1;
        while (n > len * count) {
            n -= len * count;
            len++;
            count *= 10;
            start *= 10;
        }
        start += (n - 1) / len;
        String s = Integer.toString(start);
        return Character.getNumericValue(s.charAt((n - 1) % len));

=======

        int digit = 1;
        long start = 1;
        long count = 9;
        while (n > count) {
            n -= count;
            start *= 10;
            digit += 1;
            count = digit * start * 9;
        }
        long num = start + (n - 1) / digit;
        return Long.toString(num).charAt((n - 1) % digit) - '0';

=======

        int digits = 1;
        long count = 9;
        int start = 1;
        while (n > digits * count) {
            n -= digits * count;
            digits += 1;
            count *= 10;
            start *= 10;
        }
        start += (n - 1) / digits;
        String s = Integer.toString(start);
        return Character.getNumericValue(s.charAt((n - 1) % digits));

=======

        if (n < 10) return n;
        int i = 1;
        while (n > 9 * Math.pow(10, i - 1) * i) {
            n -= 9 * Math.pow(10, i - 1) * i;
            i++;
        }
        int num = (int) Math.pow(10, i - 1) + (n - 1) / i;
        int index = (n - 1) % i;
        return Integer.toString(num).charAt(index) - '0';

=======

        int i = 1;
        long sum = 0;
        while (true) {
            long tmp = 9 * (long) Math.pow(10, i - 1) * i;
            if (sum + tmp < n) {
                sum += tmp;
                i++;
            } else {
                break;
            }
        }
        int num = (int) (Math.pow(10, i - 1) + (n - sum - 1) / i);
        String s = String.valueOf(num);
        return s.charAt((n - sum - 1) % i) - '0';
