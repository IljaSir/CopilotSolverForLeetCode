Synthesizing 10/10 solutions

=======

        int n = apples.length;
        PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> a[1] - b[1]);
        int res = 0;
        for (int i = 0; i < n || !pq.isEmpty(); i++) {
            if (i < n && apples[i] > 0) {
                pq.offer(new int[]{apples[i], i + days[i] - 1});
            }
            while (!pq.isEmpty() && (pq.peek()[1] < i || pq.peek()[0] == 0)) {
                pq.poll();
            }
            if (!pq.isEmpty()) {
                pq.peek()[0]--;
                res++;
            }
        }
        return res;

=======

        PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> a[1] - b[1]);
        int n = apples.length;
        int ans = 0;
        for (int i = 0; i < n; i++) {
            if (apples[i] > 0) {
                pq.add(new int[] {apples[i], i + days[i] - 1});
            }
            while (!pq.isEmpty() && (i > pq.peek()[1] || pq.peek()[0] == 0)) {
                pq.poll();
            }
            if (!pq.isEmpty()) {
                int[] cur = pq.poll();
                cur[0]--;
                ans++;
                if (cur[0] > 0) {
                    pq.add(cur);
                }
            }
        }
        int day = n;
        while (!pq.isEmpty()) {
            int[] cur = pq.poll();
            if (cur[1] >= day) {
                ans += Math.min(cur[0], cur[1] - day + 1);
            }
            day = cur[1] + 1;
        }
        return ans;

=======

        int n = apples.length;
        int ans = 0;
        PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> a[1] - b[1]);
        for (int i = 0; i < n; i++) {
            pq.offer(new int[]{apples[i], i + days[i]});
            while (!pq.isEmpty() && (pq.peek()[0] == 0 || pq.peek()[1] <= i)) {
                pq.poll();
            }
            if (!pq.isEmpty()) {
                int[] cur = pq.poll();
                cur[0]--;
                ans++;
                if (cur[0] > 0) {
                    pq.offer(cur);
                }
            }
        }
        int i = n;
        while (!pq.isEmpty()) {
            while (!pq.isEmpty() && (pq.peek()[0] == 0 || pq.peek()[1] <= i)) {
                pq.poll();
            }
            if (!pq.isEmpty()) {
                int[] cur = pq.poll();
                cur[0]--;
                ans++;
                i++;
                if (cur[0] > 0) {
                    pq.offer(cur);
                }
            }
        }
        return ans;

=======

        int n = apples.length;
        PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> a[0] - b[0]);
        int i = 0, res = 0;
        while (i < n || !pq.isEmpty()) {
            if (i < n && apples[i] > 0) {
                pq.offer(new int[]{i + days[i], apples[i]});
            }
            while (!pq.isEmpty() && (pq.peek()[0] <= i || pq.peek()[1] == 0)) {
                pq.poll();
            }
            if (!pq.isEmpty()) {
                pq.peek()[1]--;
                res++;
            }
            i++;
        }
        return res;

=======

        PriorityQueue<int[]> q = new PriorityQueue<int[]>((a, b) -> a[0] - b[0]);
        int res = 0;
        for (int i = 0; i < apples.length || !q.isEmpty(); i++) {
            if (i < apples.length && apples[i] > 0) {
                q.offer(new int[]{i + days[i], apples[i]});
            }
            while (!q.isEmpty() && (q.peek()[0] <= i || q.peek()[1] == 0)) {
                q.poll();
            }
            if (!q.isEmpty()) {
                res++;
                q.peek()[1]--;
            }
        }
        return res;

=======

        int n = apples.length;
        int sum = 0;
        PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> a[0] - b[0]);
        for (int i = 0; i < n; i++) {
            if (apples[i] > 0) {
                pq.offer(new int[]{i + days[i], apples[i]});
            }
            while (!pq.isEmpty() && (pq.peek()[0] <= i || pq.peek()[1] == 0)) {
                pq.poll();
            }
            if (!pq.isEmpty()) {
                int[] top = pq.poll();
                top[1]--;
                sum++;
                if (top[1] > 0) {
                    pq.offer(top);
                }
            }
        }
        int day = n;
        while (!pq.isEmpty()) {
            int[] top = pq.poll();
            int eat = Math.min(top[1], top[0] - day);
            sum += eat;
            day += eat;
        }
        return sum;

=======

        int n = apples.length;
        int maxDays = 0;
        for (int i = 0; i < n; i++) {
            maxDays = Math.max(maxDays, i + days[i]);
        }
        int[] applesCount = new int[maxDays + 1];
        for (int i = 0; i < n; i++) {
            int j = i;
            while (j < i + days[i]) {
                applesCount[j]++;
                j++;
            }
        }
        int count = 0;
        for (int i = 0; i < maxDays; i++) {
            if (applesCount[i] > 0 && apples[i] > 0) {
                count++;
                applesCount[i]--;
                apples[i]--;
            }
        }
        return count;

=======

        PriorityQueue<int[]> q = new PriorityQueue<>((a, b) -> a[0] - b[0]);
        int n = apples.length;
        int ans = 0;
        int i = 0;
        while (i < n || !q.isEmpty()) {
            if (i < n && apples[i] > 0) {
                q.offer(new int[] {i + days[i], apples[i]});
            }
            while (!q.isEmpty() && q.peek()[0] <= i) {
                q.poll();
            }
            if (!q.isEmpty()) {
                int[] top = q.poll();
                ans++;
                top[1]--;
                if (top[1] > 0) {
                    q.offer(top);
                }
            }
            i++;
        }
        return ans;

=======

        int n = apples.length;
        int[] eat = new int[n];
        int[] rot = new int[n];
        for (int i = 0; i < n; i++) {
            eat[i] = apples[i];
            rot[i] = i + days[i] - 1;
        }
        int res = 0;
        for (int i = 0; i < n; i++) {
            if (eat[i] > 0) {
                int j = i;
                while (j < n && eat[j] == 0) {
                    j++;
                }
                if (j < n) {
                    int eatCnt = Math.min(eat[i], eat[j]);
                    eat[i] -= eatCnt;
                    eat[j] -= eatCnt;
                    res += eatCnt;
                } else {
                    res += eat[i];
                    eat[i] = 0;
                }
            }
        }
        return res;

=======

        int n = apples.length;
        int result = 0;
        PriorityQueue<Integer> pq = new PriorityQueue<Integer>();
        for(int i = 0; i < n; i++){
            if(apples[i] > 0){
                pq.add(i + days[i] - 1);
            }
            while(!pq.isEmpty() && pq.peek() < i){
                pq.poll();
            }
            if(!pq.isEmpty()){
                result++;
                if(apples[pq.peek() - days[pq.peek()]] > 1){
                    apples[pq.peek() - days[pq.peek()]]--;
                }else{
                    apples[pq.peek() - days[pq.peek()]] = 0;
                    days[pq.peek()] = 0;
                }
                pq.poll();
            }
        }
        int i = n;
        while(!pq.isEmpty()){
            while(!pq.isEmpty() && pq.peek() < i){
                pq.poll();
            }
            if(!pq.isEmpty()){
                result++;
                if(apples[pq.peek() - days[pq.peek()]] > 1){
                    apples[pq.peek() - days[pq.peek()]]--;
                }else{
                    apples[pq.peek() - days[pq.peek()]] = 0;
                    days[pq.peek()] = 0;
                }
                pq.poll();
            }
            i++;
        }
        return result;
