Synthesizing 10/10 solutions

=======

        int max = 0;
        for (int i = 0; i < candies.length; i++) {
            max = Math.max(max, candies[i]);
        }
        int left = 0, right = max;
        while (left < right) {
            int mid = left + (right - left + 1) / 2;
            if (check(candies, mid, k)) {
                left = mid;
            } else {
                right = mid - 1;
            }
        }
        return left;
    }

    private boolean check(int[] candies, int mid, long k) {
        long res = 0;
        for (int i = 0; i < candies.length; i++) {
            if (candies[i] > mid) {
                res += (candies[i] - mid) / (mid + 1);
                if ((candies[i] - mid) % (mid + 1) > 0) {
                    res++;
                }
            }
        }
        return res <= k;

=======

        int max = 0;
        for (int i = 0; i < candies.length; i++) {
            max = Math.max(max, candies[i]);
        }
        int left = 0, right = max;
        while (left < right) {
            int mid = left + (right - left) / 2;
            if (isPossible(candies, k, mid)) {
                left = mid + 1;
            } else {
                right = mid;
            }
        }
        return left - 1;
    }

    private boolean isPossible(int[] candies, long k, int target) {
        long count = 0;
        for (int i = 0; i < candies.length; i++) {
            count += Math.min(candies[i], target);
        }
        return count >= k;

=======

        int n = candies.length;
        int l = 0;
        int r = 0;
        for (int i = 0; i < n; i++) {
            r += candies[i];
        }
        while (l < r) {
            int m = l + (r - l) / 2;
            if (check(candies, k, m)) {
                l = m + 1;
            } else {
                r = m;
            }
        }
        return l - 1;
    }
    
    private boolean check(int[] candies, long k, int m) {
        int n = candies.length;
        long count = 0;
        for (int i = 0; i < n; i++) {
            if (candies[i] > m) {
                count += (candies[i] - m);
            }
        }
        return count >= k;

=======

        long sum = 0;
        for (int candy : candies) {
            sum += candy;
        }
        long left = 0, right = sum;
        while (left < right) {
            long mid = left + (right - left) / 2;
            long count = 0;
            for (int candy : candies) {
                count += Math.min(candy, mid);
            }
            if (count >= k) {
                right = mid;
            } else {
                left = mid + 1;
            }
        }
        return (int) left;

=======

        int left = 0;
        int right = 1_000_000_000;
        while (left < right) {
            int mid = (left + right + 1) / 2;
            if (check(candies, k, mid)) {
                left = mid;
            } else {
                right = mid - 1;
            }
        }
        return left;
    }
    private boolean check(int[] candies, long k, int mid) {
        long count = 0;
        for (int candy : candies) {
            count += Math.min(candy, mid);
        }
        return count >= k;

=======

        int n = candies.length;
        int l = 0, r = 10000000;
        while (l < r) {
            int mid = l + ((r - l + 1) >> 1);
            long cnt = 0;
            for (int i = 0; i < n; i++) {
                cnt += Math.min(candies[i], mid);
            }
            if (cnt > k) {
                r = mid - 1;
            } else {
                l = mid;
            }
        }
        return l;

=======

        int sum = 0;
        int n = candies.length;
        for (int i = 0; i < n; i++) {
            sum += candies[i];
        }
        int[] prefixSum = new int[n];
        prefixSum[0] = candies[0];
        for (int i = 1; i < n; i++) {
            prefixSum[i] = prefixSum[i - 1] + candies[i];
        }
        int i = 0;
        int j = n - 1;
        while (i < j) {
            int mid = (i + j) / 2;
            if (prefixSum[mid] < k) {
                i = mid + 1;
            } else {
                j = mid;
            }
        }
        long ans = 0;
        if (prefixSum[i] < k) {
            ans = (i + 1) * (k / (i + 1)) + prefixSum[i];
        } else {
            ans = prefixSum[i];
        }
        return (int) Math.min(sum, ans);

=======

        int n = candies.length;
        int sum = 0;
        for (int i = 0; i < n; i++) {
            sum += candies[i];
        }
        int max = sum / n;
        int[] count = new int[max + 1];
        for (int i = 0; i < n; i++) {
            count[Math.min(max, candies[i])]++;
        }
        for (int i = max - 1; i >= 1; i--) {
            count[i] += count[i + 1];
        }
        long ans = 0;
        for (int i = max; i >= 1; i--) {
            long t = Math.min(k, count[i]);
            ans += t * i;
            k -= t;
        }
        return (int) ans;

=======

        int n = candies.length;
        int ans = 0;
        long lo = 0;
        long hi = (long) 1e12;
        while (lo <= hi) {
            long mid = (lo + hi) / 2;
            long cnt = 0;
            for (int i = 0; i < n; i++) {
                cnt += Math.min(mid, candies[i]);
            }
            if (cnt >= k) {
                ans = (int) mid;
                hi = mid - 1;
            } else {
                lo = mid + 1;
            }
        }
        return ans;

=======

        int[] c = candies;
        int n = c.length;
        int lo = 0, hi = 1000000000;
        while (lo < hi) {
            int mid = lo + (hi - lo + 1) / 2;
            long sum = 0;
            for (int i = 0; i < n; i++) {
                sum += Math.min(mid, c[i]);
            }
            if (sum <= k) lo = mid;
            else hi = mid - 1;
        }
        long sum = 0;
        for (int i = 0; i < n; i++) {
            sum += Math.min(lo, c[i]);
        }
        return (int)(lo + (k - sum) / n);
