Synthesizing 10/10 solutions

=======

        int n = spells.length;
        int m = potions.length;
        Arrays.sort(spells);
        Arrays.sort(potions);
        int[] res = new int[n];
        for (int i = 0; i < n; i++) {
            int l = 0;
            int r = m - 1;
            while (l <= r) {
                int mid = l + (r - l) / 2;
                if (spells[i] * potions[mid] < success) {
                    l = mid + 1;
                } else {
                    r = mid - 1;
                }
            }
            res[i] = l;
        }
        return res;

=======

        Arrays.sort(spells);
        Arrays.sort(potions);
        int[] ans = new int[spells.length];
        int j = potions.length - 1;
        for (int i = 0; i < spells.length; i++) {
            while (j >= 0 && (long) spells[i] * potions[j] >= success) {
                j--;
            }
            ans[i] = j + 1;
        }
        return ans;

=======

        Arrays.sort(spells);
        Arrays.sort(potions);
        int[] result = new int[spells.length];
        for (int i = 0; i < spells.length; i++) {
            for (int j = potions.length - 1; j >= 0; j--) {
                if (spells[i] * potions[j] < success) {
                    break;
                } else {
                    result[i] += j + 1;
                }
            }
        }
        return result;

=======

        Arrays.sort(spells);
        Arrays.sort(potions);
        int[] res = new int[spells.length];
        for (int i = 0; i < spells.length; i++) {
            int l = 0, r = potions.length - 1, j = potions.length;
            while (l <= r) {
                int m = l + (r - l) / 2;
                if (spells[i] * potions[m] >= success) {
                    j = m;
                    r = m - 1;
                } else {
                    l = m + 1;
                }
            }
            res[i] = potions.length - j;
        }
        return res;

=======

        Arrays.sort(spells);
        Arrays.sort(potions);
        int[] ret = new int[spells.length];
        int j = potions.length - 1;
        for (int i = 0; i < spells.length; i++) {
            while (j >= 0 && (long) spells[i] * potions[j] >= success) j--;
            ret[i] = j + 1;
        }
        return ret;

=======

        int[] result = new int[spells.length];
        Arrays.sort(spells);
        Arrays.sort(potions);
        for (int i = 0; i < spells.length; i++) {
            for (int j = potions.length - 1; j >= 0; j--) {
                if ((long) spells[i] * potions[j] >= success) {
                    result[i] += j + 1;
                } else {
                    break;
                }
            }
        }
        return result;

=======

        int[] result = new int[spells.length];
        Arrays.sort(potions);
        for (int i = 0; i < spells.length; i++) {
            result[i] = (int) Arrays.stream(potions).filter(potion -> potion * spells[i] >= success).count();
        }
        return result;

=======

        Arrays.sort(spells);
        Arrays.sort(potions);
        int[] ret = new int[spells.length];
        int i = 0, j = potions.length - 1;
        for (int k = 0; k < spells.length; k++) {
            while (i < potions.length && spells[k] * potions[i] < success) {
                i++;
            }
            ret[k] = potions.length - i;
        }
        return ret;

=======

        int[] result = new int[spells.length];
        Arrays.sort(potions);
        for (int i = 0; i < spells.length; i++) {
            int l = 0, r = potions.length;
            while (l < r) {
                int m = l + (r - l) / 2;
                if (spells[i] * potions[m] < success) {
                    l = m + 1;
                } else {
                    r = m;
                }
            }
            result[i] = potions.length - l;
        }
        return result;

=======

        Arrays.sort(potions);
        int[] result = new int[spells.length];
        for (int i = 0; i < spells.length; i++) {
            int cnt = 0;
            int left = 0;
            int right = potions.length - 1;
            while (left <= right) {
                int mid = (left + right) / 2;
                if (spells[i] * potions[mid] >= success) {
                    cnt = potions.length - mid;
                    right = mid - 1;
                } else {
                    left = mid + 1;
                }
            }
            result[i] = cnt;
        }
        return result;
