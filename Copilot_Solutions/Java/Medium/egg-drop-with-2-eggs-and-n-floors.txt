Synthesizing 10/10 solutions

=======

        int dp[] = new int[n + 1];
        Arrays.fill(dp, Integer.MAX_VALUE);
        dp[0] = 0;
        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= i; j++) {
                dp[i] = Math.min(dp[i], 1 + Math.max(j - 1, dp[i - j]));
            }
        }
        return dp[n];

=======

        int egg = 2;
        int[][] dp = new int[egg + 1][n + 1];
        for (int i = 1; i <= egg; i++) {
            for (int j = 1; j <= n; j++) {
                if (i == 1) {
                    dp[i][j] = j;
                } else if (j == 1) {
                    dp[i][j] = 1;
                } else {
                    dp[i][j] = Integer.MAX_VALUE;
                    for (int k = 1; k <= j; k++) {
                        int res = 1 + Math.max(dp[i - 1][k - 1], dp[i][j - k]);
                        dp[i][j] = Math.min(dp[i][j], res);
                    }
                }
            }
        }
        return dp[egg][n];

=======

        int[][] dp = new int[2][n + 1];
        for (int i = 0; i <= n; i++) {
            dp[0][i] = i;
        }
        for (int i = 1; i < 2; i++) {
            int x = 1;
            for (int j = 1; j <= n; j++) {
                while (x < j && Math.max(dp[i - 1][x - 1], dp[i][j - x]) > Math.max(dp[i - 1][x], dp[i][j - x - 1])) {
                    x++;
                }
                dp[i][j] = 1 + Math.max(dp[i - 1][x - 1], dp[i][j - x]);
            }
        }
        return dp[1][n];

=======

        int dp[][] = new int[n+1][3];
        for(int i=0;i<=n;i++){
            dp[i][1] = i;
        }
        for(int i=2;i<=n;i++){
            for(int j=2;j<=2;j++){
                dp[i][j] = Integer.MAX_VALUE;
                for(int x=1;x<=i;x++){
                    int temp = 1 + Math.max(dp[x-1][j-1],dp[i-x][j]);
                    dp[i][j] = Math.min(dp[i][j],temp);
                }
            }
        }
        return dp[n][2];

=======

        int i = 1;
        while ((i * (i + 1)) / 2 < n) {
            i++;
        }
        return i;

=======

        int drops = 0;
        int eggs = 2;
        int floors = n;
        int[][] dp = new int[eggs + 1][floors + 1];
        for (int i = 0; i <= floors; i++) {
            dp[1][i] = i;
        }
        for (int i = 2; i <= eggs; i++) {
            for (int j = 1; j <= floors; j++) {
                dp[i][j] = 1 + dp[i - 1][j - 1] + dp[i][j - 1];
                if (dp[i][j] >= n) {
                    return j;
                }
            }
        }
        return drops;

=======

        if(n == 1) return 1;
        if(n == 2) return 2;
        int[][] dp = new int[n + 1][3];
        for(int i = 0; i <= n; i++){
            dp[i][0] = i;
        }
        for(int i = 0; i <= 2; i++){
            dp[0][i] = 0;
            dp[1][i] = 1;
        }
        for(int i = 2; i <= n; i++){
            for(int j = 2; j <= 2; j++){
                dp[i][j] = Integer.MAX_VALUE;
                for(int k = 1; k <= i; k++){
                    dp[i][j] = Math.min(dp[i][j], 1 + Math.max(dp[k - 1][j - 1], dp[i - k][j]));
                }
            }
        }
        return dp[n][2];

=======

        int x = 1;
        while (x * (x + 1) / 2 < n) {
            x++;
        }
        return x;

=======

        int[] dp = new int[n+1];
        for(int i=1;i<=n;i++){
            dp[i] = i;
        }
        for(int i=2;i<=n;i++){
            int min = Integer.MAX_VALUE;
            for(int j=1;j<=i;j++){
                min = Math.min(min, 1+Math.max(dp[j-1],dp[i-j]));
            }
            dp[i] = min;
        }
        return dp[n];

=======

        int i = 1;
        int j = 1;
        while (i < n) {
            i += ++j;
        }
        return j;
