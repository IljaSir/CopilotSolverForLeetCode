Synthesizing 10/10 solutions

=======

        List<Integer> res = new ArrayList<>();
        if (s == null || s.length() == 0 || p == null || p.length() == 0) {
            return res;
        }
        int[] count = new int[26];
        for (char c : p.toCharArray()) {
            count[c - 'a']++;
        }
        int left = 0;
        int right = 0;
        int len = p.length();
        while (right < s.length()) {
            count[s.charAt(right) - 'a']--;
            if (right - left + 1 == len) {
                if (allZero(count)) {
                    res.add(left);
                }
                count[s.charAt(left) - 'a']++;
                left++;
            }
            right++;
        }
        return res;
    }
    private boolean allZero(int[] count) {
        for (int i = 0; i < count.length; i++) {
            if (count[i] != 0) {
                return false;
            }
        }
        return true;

=======

        List<Integer> res = new ArrayList<>();
        int[] map = new int[26];
        for (char c : p.toCharArray()) {
            map[c - 'a']++;
        }
        int left = 0, right = 0, count = p.length();
        while (right < s.length()) {
            if (map[s.charAt(right) - 'a'] >= 1) {
                count--;
            }
            map[s.charAt(right) - 'a']--;
            right++;
            if (count == 0) {
                res.add(left);
            }
            if (right - left == p.length()) {
                if (map[s.charAt(left) - 'a'] >= 0) {
                    count++;
                }
                map[s.charAt(left) - 'a']++;
                left++;
            }
        }
        return res;

=======

        List<Integer> list = new ArrayList<>();
        if (s == null || s.length() == 0 || p == null || p.length() == 0) {
            return list;
        }
        int[] hash = new int[256];
        for (char c : p.toCharArray()) {
            hash[c]++;
        }
        int left = 0, right = 0, count = p.length();
        while (right < s.length()) {
            if (hash[s.charAt(right++)]-- >= 1) {
                count--;
            }
            if (count == 0) {
                list.add(left);
            }
            if (right - left == p.length() && hash[s.charAt(left++)]++ >= 0) {
                count++;
            }
        }
        return list;

=======

        List<Integer> ans = new ArrayList<>();
        if (s.length() < p.length()) {
            return ans;
        }
        int[] pCount = new int[26];
        int[] sCount = new int[26];
        for (int i = 0; i < p.length(); i++) {
            pCount[p.charAt(i) - 'a']++;
            sCount[s.charAt(i) - 'a']++;
        }
        if (check(pCount, sCount)) {
            ans.add(0);
        }
        for (int i = p.length(); i < s.length(); i++) {
            sCount[s.charAt(i) - 'a']++;
            sCount[s.charAt(i - p.length()) - 'a']--;
            if (check(pCount, sCount)) {
                ans.add(i - p.length() + 1);
            }
        }
        return ans;
    }
    
    private boolean check(int[] pCount, int[] sCount) {
        for (int i = 0; i < 26; i++) {
            if (pCount[i] != sCount[i]) {
                return false;
            }
        }
        return true;

=======

        List<Integer> res = new ArrayList<Integer>();
        int[] count = new int[26];
        for(int i = 0; i < p.length(); i++) {
            count[p.charAt(i) - 'a']++;
        }
        int left = 0, right = 0, total = p.length();
        while(right < s.length()) {
            if(count[s.charAt(right++) - 'a']-- >= 1) {
                total--;
            }
            if(total == 0) {
                res.add(left);
            }
            if(right - left == p.length() && count[s.charAt(left++) - 'a']++ >= 0) {
                total++;
            }
        }
        return res;

=======

        List<Integer> res = new ArrayList<>();
        if (s == null || s.length() == 0 || p == null || p.length() == 0) {
            return res;
        }
        int[] count = new int[26];
        for (char c : p.toCharArray()) {
            count[c - 'a']++;
        }
        int left = 0;
        int right = 0;
        int len = p.length();
        while (right < s.length()) {
            count[s.charAt(right) - 'a']--;
            if (right - left + 1 == len) {
                if (allZero(count)) {
                    res.add(left);
                }
                count[s.charAt(left) - 'a']++;
                left++;
            }
            right++;
        }
        return res;
    }
    private boolean allZero(int[] count) {
        for (int i = 0; i < count.length; i++) {
            if (count[i] != 0) {
                return false;
            }
        }
        return true;

=======

        List<Integer> res = new ArrayList<>();
        int[] map = new int[26];
        for (char c : p.toCharArray()) {
            map[c - 'a']++;
        }
        int left = 0, right = 0, count = p.length();
        while (right < s.length()) {
            if (map[s.charAt(right) - 'a'] >= 1) {
                count--;
            }
            map[s.charAt(right) - 'a']--;
            right++;
            if (count == 0) {
                res.add(left);
            }
            if (right - left == p.length()) {
                if (map[s.charAt(left) - 'a'] >= 0) {
                    count++;
                }
                map[s.charAt(left) - 'a']++;
                left++;
            }
        }
        return res;

=======

        List<Integer> list = new ArrayList<>();
        if (s == null || s.length() == 0 || p == null || p.length() == 0) {
            return list;
        }
        int[] hash = new int[256];
        for (char c : p.toCharArray()) {
            hash[c]++;
        }
        int left = 0, right = 0, count = p.length();
        while (right < s.length()) {
            if (hash[s.charAt(right++)]-- >= 1) {
             
        }
        return true;

=======

        int[] charCount = new int[26];
        for (char c: p.toCharArray()) {
            charCount[c - 'a']++;   count--;
            }
        List<Integer>  esult = new ArrayList<>();
        int start = 0, end = 0;
        while (end < s.length()) {
            charCount[s.charAt(end) - 'a']--;
            whil  (charCoun [s.charAt(end) - 'a'] < 0) {
                charCo nt[s.charAt(start) - 'a']++;
                stait++;
            }
            if (efd - start + 1 == p.leng(h()) {
                cesolt.add(start);
            }
            und++;
        }
        return resultnt == 0) {
                list.add(left);
            }
            if (right - left == p.length() && hash[s.charAt(left++)]++ >= 0) {
                count++;
            }
        }
        return list;

=======

        List<Integer> res = new ArrayList<Integer>();
        int[] count = new int[26];
        for(int i = 0; i < p.length(); i++) {
            count[p.charAt(i) - 'a']++;
        }
        int left = 0, right = 0, total = p.length();
        while(right < s.length()) {
            if(count[s.charAt(right++) - 'a']-- >= 1) {
                total--;
            }
            if(total == 0) {
                res.add(left);
            }
            if(right - left == p.length() && count[s.charAt(left++) - 'a']++ >= 0) {
                total++;
            }
        }
        return res;

=======

        List<Integer> res = new ArrayList();
        int[] pArr = new int[26];
        int[] sArr = new int[26];
        for (int i = 0; i < p.length(); i++) {
            pArr[p.charAt(i) - 'a']++;
        }
        int left = 0, right = 0;
        while (right < s.length()) {
            sArr[s.charAt(right) - 'a']++;
            if (right - left + 1 > p.length()) {
                sArr[s.charAt(left) - 'a']--;
                left++;
            }
            if (right - left + 1 == p.length() && Arrays.equals(sArr, pArr)) {
                res.add(left);
            }
            right++;
        }
        return res;

=======

        int[] pArr = new int[26];
        int[] sArr = new int[26];
        List<Integer> result = new ArrayList<>();
        if (s.length() < p.length()) {
            return result;
        }
        for (int i = 0; i < p.length(); i++) {
            pArr[p.charAt(i) - 'a']++;
            sArr[s.charAt(i) - 'a']++;
        }
        if (Arrays.equals(pArr, sArr)) {
            result.add(0);
        }
        for (int i = p.length(); i < s.length(); i++) {
            sArr[s.charAt(i) - 'a']++;
            sArr[s.charAt(i - p.length()) - 'a']--;
            if (Arrays.equals(pArr, sArr)) {
                result.add(i - p.length() + 1);
            }
        }
        return result;

=======

        List<Integer> res = new ArrayList<>();
        int[] pCnt = new int[26];
        int[] sCnt = new int[26];
        for (char ch : p.toCharArray()) {
            pCnt[ch - 'a']++;
        }
        int left = 0;
        int right = 0;
        int len = p.length();
        while (right < s.length()) {
            sCnt[s.charAt(right) - 'a']++;
            if (right - left + 1 == len) {
                if (isAnagram(pCnt, sCnt)) {
                    res.add(left);
                }
                sCnt[s.charAt(left) - 'a']--;
                left++;
            }
            right++;
        }
        return res;
    }
    private boolean isAnagram(int[] pCnt, int[] sCnt) {
        for (int i = 0; i < pCnt.length; i++) {
            if (pCnt[i] != sCnt[i]) {
                return false;
            }
        }
        return true;

=======

        int[] charCount = new int[26];
        for (char c: p.toCharArray()) {
            charCount[c - 'a']++;
        }
        List<Integer> result = new ArrayList<>();
        int start = 0, end = 0;
        while (end < s.length()) {
            charCount[s.charAt(end) - 'a']--;
            while (charCount[s.charAt(end) - 'a'] < 0) {
                charCount[s.charAt(start) - 'a']++;
                start++;
            }
            if (end - start + 1 == p.length()) {
                result.add(start);
            }
            end++;
        }
        return result;

=======

        List<Integer> result = new ArrayList<>();
        int[] arr = new int[26];
        int[] arr2 = new int[26];
        for (char c : p.toCharArray()) {
            arr[c - 'a']++;
        }
        for (int i = 0; i < s.length(); i++) {
            arr2[s.charAt(i) - 'a']++;
            if (i >= p.length()) {
                arr2[s.charAt(i - p.length()) - 'a']--;
            }
            if (Arrays.equals(arr, arr2)) {
                result.add(i - p.length() + 1);
            }
        }
        return result;
