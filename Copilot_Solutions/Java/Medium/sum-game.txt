Synthesizing 10/10 solutions

=======

        int n = num.length();
        int sum1 = 0, sum2 = 0;
        int q1 = 0, q2 = 0;
        for (int i = 0; i < n / 2; i++) {
            if (num.charAt(i) == '?') {
                q1++;
            } else {
                sum1 += num.charAt(i) - '0';
            }
        }
        for (int i = n / 2; i < n; i++) {
            if (num.charAt(i) == '?') {
                q2++;
            } else {
                sum2 += num.charAt(i) - '0';
            }
        }
        int diff = sum1 - sum2;
        if (diff == 0) {
            return q1 % 2 == 1;
        } else {
            return q1 % 2 == 0 || q2 % 2 == 0 || diff % 9 != 0;
        }

=======

        int n = num.length();
        int q = 0;
        int a = 0;
        int b = 0;
        for (int i = 0; i < n / 2; ++i) {
            if (num.charAt(i) == '?') ++q;
            else a += num.charAt(i) - '0';
        }
        for (int i = n / 2; i < n; ++i) {
            if (num.charAt(i) == '?') ++q;
            else b += num.charAt(i) - '0';
        }
        if ((q & 1) == 1) return true;
        if (a == b) return false;
        if (a > b) {
            return (a - b) > q / 2 * 9;
        } else {
            return (b - a) > q / 2 * 9;
        }

=======

        int n = num.length();
        int q = 0;
        int a = 0, b = 0;
        for (int i = 0; i < n; i++) {
            if (num.charAt(i) == '?') {
                q++;
            } else if (i < n / 2) {
                a += num.charAt(i) - '0';
            } else {
                b += num.charAt(i) - '0';
            }
        }
        int c = q / 2;
        int d = q - c;
        if (q % 2 == 1) {
            return true;
        }
        return a + c * 9 != b + d * 9;

=======

        int n = num.length();
        int left = 0, right = 0, q = 0;
        for (int i = 0; i < n / 2; ++i) {
            if (num.charAt(i) == '?') {
                q++;
            } else {
                left += num.charAt(i) - '0';
            }
        }
        for (int i = n / 2; i < n; ++i) {
            if (num.charAt(i) == '?') {
                q++;
            } else {
                right += num.charAt(i) - '0';
            }
        }
        if (q % 2 == 1) {
            return true;
        }
        int diff = left - right;
        return diff != 0 && diff != q / 2 * 9;

=======

        int n = num.length();
        int left = 0, right = 0, q = 0;
        for (int i = 0; i < n; i++) {
            if (num.charAt(i) == '?') {
                if (i < n / 2) {
                    left++;
                } else {
                    right++;
                }
                q++;
            } else {
                if (i < n / 2) {
                    left += num.charAt(i) - '0';
                } else {
                    right += num.charAt(i) - '0';
                }
            }
        }
        if (q % 2 == 1) {
            return true;
        }
        return left != right;

=======

        int n = num.length();
        int a = 0, b = 0;
        int cnt = 0;
        for (int i = 0; i < n; i++) {
            if (num.charAt(i) == '?') {
                if (i < n / 2) {
                    a++;
                } else {
                    b++;
                }
                cnt++;
            }
        }
        if (cnt % 2 == 1) {
            return true;
        }
        int x = 0, y = 0;
        for (int i = 0; i < n; i++) {
            if (num.charAt(i) == '?') {
                if (i < n / 2) {
                    if (a > b) {
                        x += 9;
                        a--;
                    } else {
                        y += 9;
                        b--;
                    }
                } else {
                    if (a > b) {
                        y += 9;
                        a--;
                    } else {
                        x += 9;
                        b--;
                    }
                }
            } else {
                if (i < n / 2) {
                    x += num.charAt(i) - '0';
                } else {
                    y += num.charAt(i) - '0';
                }
            }
        }
        return x != y;

=======

        int n = num.length();
        int half = n / 2;
        int q = 0;
        int s1 = 0;
        int s2 = 0;
        for (int i = 0; i < n; i++) {
            char c = num.charAt(i);
            if (c == '?') {
                q++;
            } else {
                int d = c - '0';
                if (i < half) {
                    s1 += d;
                } else {
                    s2 += d;
                }
            }
        }
        if (q % 2 == 1) {
            return true;
        }
        int halfQ = q / 2;
        int halfQ1 = halfQ * 9;
        int halfQ2 = halfQ * 0;
        return s1 + halfQ1 != s2 + halfQ2;

=======

        int n = num.length();
        int half = n / 2;
        int q = 0;
        int sum = 0;
        for (int i = 0; i < half; i++) {
            if (num.charAt(i) == '?') {
                q++;
            } else {
                sum += num.charAt(i) - '0';
            }
        }
        int sum2 = 0;
        for (int i = half; i < n; i++) {
            if (num.charAt(i) == '?') {
                q--;
            } else {
                sum2 += num.charAt(i) - '0';
            }
        }
        if (q == 0) {
            return sum != sum2;
        }
        return (q & 1) == 1 || sum != sum2;

=======

        int n = num.length();
        int n2 = n / 2;
        int left = 0;
        int right = 0;
        int leftQ = 0;
        int rightQ = 0;
        for (int i = 0; i < n2; i++) {
            char c = num.charAt(i);
            if (c == '?') {
                leftQ++;
            } else {
                left += c - '0';
            }
        }
        for (int i = n2; i < n; i++) {
            char c = num.charAt(i);
            if (c == '?') {
                rightQ++;
            } else {
                right += c - '0';
            }
        }
        int diff = left - right;
        if (diff == 0) {
            return leftQ % 2 != 0;
        } else {
            if (diff > 0) {
                return leftQ < rightQ || (leftQ - rightQ) % 2 != 0;
            } else {
                return leftQ > rightQ || (rightQ - leftQ) % 2 != 0;
            }
        }

=======

        int len = num.length();
        int half = len / 2;
        int sum = 0;
        int q = 0;
        for (int i = 0; i < half; i++) {
            char c = num.charAt(i);
            if (c == '?') {
                q++;
            } else {
                sum += c - '0';
            }
        }
        for (int i = half; i < len; i++) {
            char c = num.charAt(i);
            if (c == '?') {
                q--;
            } else {
                sum -= c - '0';
            }
        }
        if (q == 0) {
            return sum != 0;
        }
        if (q % 2 == 0) {
            return false;
        }
        int halfQ = q / 2;
        return sum + 9 * halfQ != 9 * halfQ;
