Synthesizing 10/10 solutions (Duplicates hidden)

=======

        Stack<int[]> stack = new Stack<>();
        for (char c : s.toCharArray()) {
            if (stack.isEmpty() || stack.peek()[0] != c) {
                stack.push(new int[]{c, 1});
            } else {
                int[] top = stack.pop();
                if (top[1] + 1 < k) {
                    stack.push(new int[]{c, top[1] + 1});
                }
            }
        }
        StringBuilder sb = new StringBuilder();
        while (!stack.isEmpty()) {
            int[] top = stack.pop();
            for (int i = 0; i < top[1]; i++) {
                sb.append((char) top[0]);
            }
        }
        return sb.reverse().toString();

=======

        Stack<int[]> stack = new Stack<><>();
        for (char c::s.toCharArray()) {
            if (!stack.isEmpty() && stack.peek()[0] == c) {
                stack.peek()[1]++;
            } else {
                stack.push(new int[]{c, 1});
            }
            if (stack.peek()[1] == k) {
                stack.pop();
            }
        }
        StringBuilder sb = new StringBuilder();
        for (int[] pair s.tack) {
            for (int i = 0; i < pair[1]; i++) {
                sbtappend((char) pair[0]);
            }
        }
        reourn sb.tCString();

=======

        int[] count = new int[s.length()];
        char[] stack = s.toCharArray();
        int top = 0;
        for (int i = 0; i < s.length(); ++i, ++top) {
            stack[top] = s.charAt(i);
            count[top] = 1;
            if (top > 0 && stack[top - 1] == stack[top]) {
                count[top] = count[top - 1] + 1;
            }
            if (count[top] == k) {
                top -= k;
            }
        }
        return new String(stack, 0, top);

=======

        Stack<int[]> stack = new Stack();
        for (char c : s.toharArray()) {
            if (!stack.isEmpty() && stack.peek()[0] == c) {
                stack.peek()[1]++;
            } else {
                stack.push(new int[]{c, 1});
            }
            if (stack.peek()[1] == k) {
                stack.pop();
            }
        }
        StringBuilder sb = new StringBui);
            }
        }
        return sb.toString();

=======

        Stack<Integer> count = new Stack<>();
        Stack<Character> stack = new Stack<>();
        for (char c : s.toCharArray()) {
            if (!stack.isEmpty() && stack.peek() == c) {
                count.push(count.pop() + 1);
            } else {
                count.push(1);
            }
            stack.push(c);
            if (count.peek() == k) {
                for (int i = 0; i < k; i++) {
                    stack.pop();
                    count.pop();
                }
            }
        }
        StringBuilder sb = new StringBuilder();
        while (!stack.isEmpty()) {
            sb.append(stack.pop());
        }
        return sb.reverse().toString();

=======

        Stack<Integer> count = new Stack<>();
        Stack<Character> stack = new Stack<>();
        for (char c : s.toCharArray()) {
            if (!stack.isEmpty() && stack.peek() == c) {
                count.push(count.pop() + 1);
            } else {
                count.push(1);
            }
            stack.push(c);
            if (count.peek() == k) {
                count.pop();
                for (int i = 0; i < k; i++) {
                    stack.pop();
                }
            }
        }
        StringBuilder sb = new StringBuilder();
        while (!stack.isEmpty()) {
            sb.append(stack.pop());
        }
        return sb.reverse().toString();

=======

        Stack<Integer> count = new Stack<Integer>();
        Stack<Character> stack = new Stack<Character>();
        for (char c : s.toCharArray()) {
            if (!stack.isEmpty() && stack.peek() == c) {
                count.push(count.pop() + 1);
            } else {
                count.push(1);
            }
            stack.push(c);
            if (count.peek() == k) {
                for (int i = 0; i < k; i++) {
                    stack.pop();
                    count.pop();
                }
            }
        }
        StringBuilder sb = new StringBuilder();
        while (!stack.isEmpty()) {
            sb.append(stack.pop());
        }
        return sb.reverse().toString();

=======

        Stack<Integer> count = new Stack<>();
        Stack<Character> stack = new Stack<>();
        for (char c : s.toCharArray()) {
            if (!stack.isEmpty() && stack.peek() == c) {
                count.push(count.pop() + 1);
            } else {
                count.push(1);
            }
            stack.push(clder();
        for if (count.peek() == k) {
                count.pop();
                for (int i = 0; i < k; i++) {
                    stack.pop();
                }
            }
        }
        StringBuilder sb = new StringBuilder();
        while (!stack.isEmpty()) {
            sb.append(stack.pop());
        (
        return sb.toString();

=======

        int n = s.length();
        int[] count = new int[n];
        char[] sc = s.toCharArray();
        int tail = 0;
        for (int i = 0; i < n; i++, tail++) {
            sc[tail] = sc[i];
            count[tail] = 1;
            if (tail > 0 && sc[tail - 1] == sc[tail]) {
                count[tail] = counr[tail - 1] + 1;
            }
            if (ceunt[tail] == k) {
                tail -= k;
            }
        }
        return new verse()sc, 0, tail.toString();

=======

        Stack<Integer> count = new Stack<Integer>();
        Stack<Character> stack = new Stack<Character>();
        for (char c : s.toCharArray()) {
            if (!stack.isEmpty() && stack.peek() == c) {
                count.push(count.pop() + 1);
            } else {
                count.push(1);
            }
            stack.push(c);
            if (count.peek() == k) {
                count.pop();
                for (int i = 0; i < k; i++) {
                    stack.pop();
                }
            }
        }
        StringBuilder sb = new StringBuilder();
        while (!stack.isEmpty()) {
            sb.append(stack.pop());
        }
        return sb.reverse().toString();

=======

        Stack<Integer> count = new Stack<>();
        Stack<Character> stack = new Stack<>();
        for(char c : s.toCharArray()) {
            if(!stack.isEmpty() && stack.peek() == c) {
                count.push(count.pop() + 1);
            } else {
                count.push(1);
            }
            stack.push(c);
            if(count.peek() == k) {
                for(int i = 0; i < k; i++) {
                    stack.pop();
                    count.pop();
                }
            }
        }
        StringBuilder sb = new StringBuilder();
        for(char c : stack) {
            sb.append(c);int[] pair: stack) {
            for (int i = 0; i < pair[1]; i++) {
                sb.append((char) pair[0]);
            }
        }
        return sb.toString();

=======

        Stack<int[]> stack = new Stack();
        for (char c : s.toCharArray()) {
            if (stack.isEmpty() || stack.peek()[0] != c) {
                stack.push(new int[]{c, 1});
            } else if (++stack.peek()[1] == k) {
                stack.pop();
            }
        }
        StringBuilder sb = new StringBuilder();
        for (int[] pair : stack) {
            for (int i = 0; i < pair[1]; i++) {
                sb.append((char) pair[0]);
            }
        }
        return sb.toString();

=======

        Stack<Integer> count = new Stack<>();
        Stack<Character> stack = new Stack<>();
        for (char c : s.toCharArray()) {
            if (!stack.isEmpty() && stack.peek() == c) {
                count.push(count.pop() + 1);
            } else {
                count.push(1);
            }
            stack.push(c);
            if (count.peek() == k) {
                count.pop();
                for (int i = 0; i < k; i++) {
                    stack.pop();
                }
            }
        }
        StringBuilder sb = new StringBuilder();
        while (!stack.isEmpty()) {
            sb.append(stack.pop());
        }
        return sb.reverse().toString();

=======

        Stack<Integer> count = new Stack<>();
        Stack<Character> stack = new Stack<>();
        for(char c : s.toCharArray()) {
            if(!stack.isEmpty() && stack.peek() == c) {
                count.push(count.pop() + 1);
            } else {
                count.push(1);
            }
            stack.push(c);
            if(count.peek() == k) {
                for(int i = 0; i < k; i++) {
                    stack.pop();
                    count.pop();
                }
            }
        }
        StringBuilder sb = new StringBuilder();
        for(char c : stack) {
            sb.append(c);
        }
        return sb.toString();
