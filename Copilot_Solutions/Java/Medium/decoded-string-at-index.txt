Synthesizing 10/10 solutions (Duplicates hidden)

=======

        long size = 0;
        int n = s.length();
        for (char c : s.toCharArray()) {
            if (Character.isDigit(c)) {
                size *= c - '0';
            } else {
                size++;
            }
        }
        for (int i = n - 1; i >= 0; i--) {
            k = (int) (k % size);
            if (k == 0 && Character.isLetter(s.charAt(i))) {
                return Character.toString(s.charAt(i));
            }
            if (Character.isDigit(s.charAt(i))) {
                size /= s.charAt(i) - '0';
            } else {
                size--;
            }
        }
        return null;

=======

        long size = 0;
        int n = s.length();
        for (char c : s.toCharArray()) {
            if (Character.isDigit(c)) {
                size *= c - '0';
            } else {
                size++;
            }
        }
        for (int i = n - 1; i >= 0; i--) {
            k %= size;
            if (k == 0 && Character.isLetter(s.charAt(i))) {
                return Character.toString(s.charAt(i));
            }
            if (Character.isDigit(s.charAt(i))) {
                size /= s.charAt(i) - '0';
            } else {
                size--;
            }
        }
        return null;

=======

        long size = 0;
        int n = s.length();
        for (int i = 0; i < n; ++i) {
            if (Character.isDigit(s.charAt(i))) {
                size *= s.charAt(i) - '0';
            } else {
                size++;
            }
        }
        for (int i = n - 1; i >= 0; --i) {
            k %= size;
            if (k == 0 && Character.isLetter(s.charAt(i))) {
                return Character.toString(s.charAt(i));
            }
            if (Character.isDigit(s.charAt(i))) {
                size /= s.charAt(i) - '0';
            } else {
                size--;
            }
        }
        return null;

=======

        long size = 0;
        int n = s.length();
        for (int i = 0; i < n; ++i) {
            if (Character.isDigit(s.charAt(i))) {
                size *= s.charAt(i) - '0';
            } else {
                size++;
            }
        }
        for (int i = n - 1; i >= 0; --i) {
            k = (int) (k % size);
            if (k == 0 && Character.isLetter(s.charAt(i))) {
                return Character.toString(s.charAt(i));
            }
            if (Character.isDigit(s.charAt(i))) {
                size /= s.charAt(i) - '0';
            } else {
                size--;
            }
        }
        return null;

=======

        long size = 0;
        int n = s.length();
        for (int i = 0; i < n; i++) {
            char c = s.charAt(i);
            if (Character.isDigit(c)) {
                size *= c - '0';
            } else {
                size++;
            }
        }
        for (int i = n - 1; i >= 0; i--) {
            char c = s.charAt(i);
            k %= size;
            if (k == 0 && Character.isLetter(c)) {
                return Character.toString(c);
            }
            if (Character.isDigit(c)) {
                size /= c - '0';
            } else {
                size--;
            }
        }
        return null;

=======

        long size = 0;
        int n = s.length();
        for (int i = 0; i < n; i++) {
            char c = s.charAt(i);
            if (Character.isDigit(c)) {
                size *= (c - '0');
            } else {
                size++;
            }
        }
        for (int i = n - 1; i >= 0; i--) {
            char c = s.charAt(i);
            k %= size;
            if (k == 0 && Character.isLetter(c)) {
                return Character.toString(c);
            }
            if (Character.isDigit(c)) {
                size /= (c - '0');
            } else {
                size--;
            }
        }
        return null;

=======

        long size = 0;
        int n = s.length();
        for (char c: s.toCharArray()) {
            if (Character.isDigit(c)) {
                size *= c - '0';
            } else {
                size++;
            }
        }
        for (int i = n - 1; i >= 0; --i) {
            k %= size;
            char c = s.charAt(i);
            if (k == 0 && Character.isLetter(c)) {
                return Character.toString(c);
            }
            if (Character.isDigit(c)) {
                size /= c - '0';
            } else {
                size--;
            }
        }
        return null;

=======

        long size = 0;
        for (char c : s.toCharArray()) {
            if (Character.isDigit(c)) {
                size *= c - '0';
            } else {
                size++;
            }
        }
        for (int i = s.length() - 1; i >= 0; i--) {
            char c = s.charAt(i);
            k %= size;
            if (k == 0 && Character.isLetter(c)) {
                return Character.toString(c);
            }
            if (Character.isDigit(c)) {
                size /= c - '0';
            } else {
                size--;
            }
        }
        return null;

=======

        long len = 0;
        for (char c : s.toCharArray()) {
            if (Character.isDigit(c)) {
                len *= (c - '0');
            } else {
                len++;
            }
        }
        for (int i = s.length() - 1; i >= 0; i--) {
            char c = s.charAt(i);
            if (Character.isDigit(c)) {
                len /= (c - '0');
                k %= len;
            } else {
                if (k == 0 || k == len) {
                    return String.valueOf(c);
                }
                len--;
            }
        }
        return null;
