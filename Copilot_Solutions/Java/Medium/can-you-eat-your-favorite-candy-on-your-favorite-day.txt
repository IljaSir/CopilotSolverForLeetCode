Synthesizing 10/10 solutions (Duplicates hidden)

=======

        long[] prefixSum = new long[candiesCount.length];
        prefixSum[0] = candiesCount[0];
        for (int i = 1; i < candiesCount.length; i++) {
            prefixSum[i] = prefixSum[i - 1] + candiesCount[i];
        }
        boolean[] result = new boolean[queries.length];
        for (int i = 0; i < queries.length; i++) {
            int favoriteType = queries[i][0];
            int favoriteDay = queries[i][1];
            int dailyCap = queries[i][2];
            long minCandies = favoriteDay + 1;
            long maxCandies = (long) (favoriteDay + 1) * dailyCap;
            long minPrefixSum = favoriteType == 0 ? 1 : prefixSum[favoriteType - 1] + 1;
            long maxPrefixSum = prefixSum[favoriteType];
            result[i] = !(minCandies > maxPrefixSum || maxCandies < minPrefixSum);
        }
        return result;

=======

        long[] preSum = new long[candiesCount.length];
        preSum[0] = candiesCount[0];
        for (int i = 1; i < candiesCount.length; i++) {
            preSum[i] = preSum[i - 1] + candiesCount[i];
        }
        boolean[] ans = new boolean[queries.length];
        for (int i = 0; i < queries.length; i++) {
            int type = queries[i][0];
            int day = queries[i][1];
            int cap = queries[i][2];
            long min = day + 1;
            long max = (long) (day + 1) * cap;
            long minEat = type == 0 ? 1 : preSum[type - 1] + 1;
            long maxEat = preSum[type];
            ans[i] = !(min > maxEat || max < minEat);
        }
        return ans;

=======

        int n = candiesCount.length;
        long[] sum = new long[n];
        sum[0] = candiesCount[0];
        for (int i = 1; i < n; i++) {
            sum[i] = sum[i - 1] + candiesCount[i];
        }
        boolean[] ans = new boolean[queries.length];
        for (int i = 0; i < queries.length; i++) {
            int type = queries[i][0];
            int day = queries[i][1];
            int cap = queries[i][2];
            long x1 = day + 1;
            long y1 = (long) (day + 1) * cap;
            long x2 = type == 0 ? 1 : sum[type - 1] + 1;
            long y2 = sum[type];
            ans[i] = !(x1 > y2 || y1 < x2);
        }
        return ans;

=======

        int n = candiesCount.length;
        long[] sum = new long[n];
        sum[0] = candiesCount[0];
        for (int i = 1; i < n; i++) {
            sum[i] = sum[i - 1] + candiesCount[i];
        }
        boolean[] res = new boolean[queries.length];
        for (int i = 0; i < queries.length; i++) {
            int type = queries[i][0];
            int day = queries[i][1];
            int cap = queries[i][2];
            long x1 = day + 1;
            long y1 = (day + 1) * cap;
            long x2 = type == 0 ? 1 : sum[type - 1] + 1;
            long y2 = sum[type];
            res[i] = !(x1 > y2 || y1 < x2);
        }
        return res;

=======

        int n = candiesCount.length;
        long[] sum = new long[n];
        sum[0] = candiesCount[0];
        for (int i = 1; i < n; i++) {
            sum[i] = sum[i - 1] + candiesCount[i];
        }
        boolean[] ans = new boolean[queries.length];
        for (int i = 0; i < queries.length; i++) {
            int[] q = queries[i];
            int type = q[0], day = q[1], cap = q[2];
            long x1 = day + 1;
            long y1 = (long) (day + 1) * cap;
            long x2 = type == 0 ? 1 : sum[type - 1] + 1;
            long y2 = sum[type];
            ans[i] = !(x1 > y2 || y1 < x2);
        }
        return ans;

=======

        int n = candiesCount.length;
        long[] prefix = new long[n];
        prefix[0] = candiesCount[0];
        for (int i = 1; i < n; i++) {
            prefix[i] = prefix[i-1] + candiesCount[i];
        }
        boolean[] res = new boolean[queries.length];
        for (int i = 0; i < queries.length; i++) {
            int type = queries[i][0];
            int day = queries[i][1];
            int cap = queries[i][2];
            long min = day + 1;
            long max = (long) (day + 1) * cap;
            long left = type == 0 ? 1 : prefix[type-1] + 1;
            long right = prefix[type];
            res[i] = !(min > right || max < left);
        }
        return res;

=======

        boolean[] ans = new boolean[queries.length];
        long[] sum = new long[candiesCount.length];
        sum[0] = candiesCount[0];
        for (int i = 1; i < candiesCount.length; i++) {
            sum[i] = sum[i - 1] + candiesCount[i];
        }
        for (int i = 0; i < queries.length; i++) {
            int type = queries[i][0];
            int day = queries[i][1];
            int cap = queries[i][2];
            long x1 = day + 1;
            long y1 = (long)(day + 1) * cap;
            long x2 = type == 0 ? 1 : sum[type - 1] + 1;
            long y2 = sum[type];
            ans[i] = !(x1 > y2 || y1 < x2);
        }
        return ans;

=======

        int len = candiesCount.length;
        long[] sum = new long[len];
        sum[0] = candiesCount[0];
        for (int i = 1; i < len; i++) {
            sum[i] = sum[i - 1] + candiesCount[i];
        }
        boolean[] res = new boolean[queries.length];
        for (int i = 0; i < res.length; i++) {
            int type = queries[i][0];
            int day = queries[i][1];
            int cap = queries[i][2];
            long x1 = day + 1;
            long y1 = (long) (day + 1) * cap;
            long x2 = type == 0 ? 1 : sum[type - 1] + 1;
            long y2 = sum[type];
            res[i] = !(x1 > y2 || y1 < x2);
        }
        return res;

=======

        boolean[] result = new boolean[queries.length];
        long[] candiesCountSum = new long[candiesCount.length];
        candiesCountSum[0] = candiesCount[0];
        for (int i = 1; i < candiesCount.length; i++) {
            candiesCountSum[i] = candiesCountSum[i - 1] + candiesCount[i];
        }
        for (int i = 0; i < queries.length; i++) {
            int type = queries[i][0];
            int day = queries[i][1];
            int cap = queries[i][2];
            long min = (long) day + 1;
            long max = (long) (day + 1) * cap;
            if (type == 0) {
                result[i] = max >= 1;
            } else {
                result[i] = max >= candiesCountSum[type - 1] + 1 && min <= candiesCountSum[type];
            }
        }
        return result;
