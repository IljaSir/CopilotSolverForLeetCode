Synthesizing 10/10 solutions

=======

        int n = source.length;
        int[] parent = new int[n];
        for (int i = 0; i < n; i++) {
            parent[i] = i;
        }
        for (int[] swap : allowedSwaps) {
            union(parent, swap[0], swap[1]);
        }
        Map<Integer, Map<Integer, Integer>> map = new HashMap<>();
        for (int i = 0; i < n; i++) {
            int p = find(parent, i);
            map.putIfAbsent(p, new HashMap<>());
            map.get(p).put(source[i], map.get(p).getOrDefault(source[i], 0) + 1);
        }
        int res = n;
        for (int i = 0; i < n; i++) {
            int p = find(parent, i);
            int count = map.get(p).getOrDefault(target[i], 0);
            if (count > 0) {
                res--;
                map.get(p).put(target[i], count - 1);
            }
        }
        return res;
    }
    private int find(int[] parent, int i) {
        if (parent[i] != i) {
            parent[i] = find(parent, parent[i]);
        }
        return parent[i];
    }
    private void union(int[] parent, int i, int j) {
        int pi = find(parent, i);
        int pj = find(parent, j);
        if (pi != pj) {
            parent[pi] = pj;
        }

=======

        int n = source.length;
        int[] parent = new int[n];
        for (int i = 0; i < n; i++) {
            parent[i] = i;
        }
        for (int[] swap : allowedSwaps) {
            int root1 = find(parent, swap[0]);
            int root2 = find(parent, swap[1]);
            if (root1 != root2) {
                parent[root1] = root2;
            }
        }
        Map<Integer, Map<Integer, Integer>> map = new HashMap<>();
        for (int i = 0; i < n; i++) {
            int root = find(parent, i);
            map.putIfAbsent(root, new HashMap<>());
            Map<Integer, Integer> freq = map.get(root);
            freq.put(source[i], freq.getOrDefault(source[i], 0) + 1);
        }
        int res = 0;
        for (int i = 0; i < n; i++) {
            int root = find(parent, i);
            Map<Integer, Integer> freq = map.get(root);
            int count = freq.getOrDefault(target[i], 0);
            if (count == 0) {
                res++;
            } else {
                freq.put(target[i], count - 1);
            }
        }
        return res;
    }

    private int find(int[] parent, int x) {
        if (parent[x] != x) {
            parent[x] = find(parent, parent[x]);
        }
        return parent[x];

=======

        int n = source.length;
        int[] parent = new int[n];
        for (int i = 0; i < n; i++) {
            parent[i] = i;
        }
        for (int[] swap : allowedSwaps) {
            int rootX = find(parent, swap[0]);
            int rootY = find(parent, swap[1]);
            if (rootX != rootY) {
                parent[rootX] = rootY;
            }
        }
        Map<Integer, Map<Integer, Integer>> map = new HashMap<>();
        for (int i = 0; i < n; i++) {
            int root = find(parent, i);
            Map<Integer, Integer> count = map.getOrDefault(root, new HashMap<>());
            count.put(source[i], count.getOrDefault(source[i], 0) + 1);
            map.put(root, count);
        }
        int ans = 0;
        for (int i = 0; i < n; i++) {
            int root = find(parent, i);
            Map<Integer, Integer> count = map.get(root);
            int c = count.getOrDefault(target[i], 0);
            if (c > 0) {
                count.put(target[i], c - 1);
            } else {
                ans++;
            }
        }
        return ans;
    }

    public int find(int[] parent, int x) {
        if (parent[x] != x) {
            parent[x] = find(parent, parent[x]);
        }
        return parent[x];

=======

        int n = source.length;
        int[] parent = new int[n];
        for (int i = 0; i < n; i++) {
            parent[i] = i;
        }
        for (int[] swap : allowedSwaps) {
            union(parent, swap[0], swap[1]);
        }
        Map<Integer, Map<Integer, Integer>> map = new HashMap<>();
        for (int i = 0; i < n; i++) {
            int p = find(parent, i);
            Map<Integer, Integer> count = map.getOrDefault(p, new HashMap<>());
            count.put(source[i], count.getOrDefault(source[i], 0) + 1);
            map.put(p, count);
        }
        int result = 0;
        for (int i = 0; i < n; i++) {
            int p = find(parent, i);
            Map<Integer, Integer> count = map.get(p);
            int c = count.getOrDefault(target[i], 0);
            if (c > 0) {
                count.put(target[i], c - 1);
            } else {
                result++;
            }
        }
        return result;
    }
    private int find(int[] parent, int x) {
        if (parent[x] != x) {
            parent[x] = find(parent, parent[x]);
        }
        return parent[x];
    }
    private void union(int[] parent, int x, int y) {
        int px = find(parent, x);
        int py = find(parent, y);
        if (px != py) {
            parent[px] = py;
        }

=======

        int n = source.length;
        int[] root = new int[n];
        for (int i = 0; i < n; i++) {
            root[i] = i;
        }
        for (int[] swap : allowedSwaps) {
            int root1 = find(root, swap[0]);
            int root2 = find(root, swap[1]);
            root[root1] = root2;
        }
        Map<Integer, Map<Integer, Integer>> map = new HashMap<>();
        for (int i = 0; i < n; i++) {
            int root1 = find(root, i);
            if (!map.containsKey(root1)) {
                map.put(root1, new HashMap<>());
            }
            Map<Integer, Integer> freq = map.get(root1);
            freq.put(source[i], freq.getOrDefault(source[i], 0) + 1);
        }
        int res = 0;
        for (int i = 0; i < n; i++) {
            int root1 = find(root, i);
            Map<Integer, Integer> freq = map.get(root1);
            if (freq.getOrDefault(target[i], 0) > 0) {
                freq.put(target[i], freq.get(target[i]) - 1);
            } else {
                res++;
            }
        }
        return res;
    }

    private int find(int[] root, int i) {
        if (root[i] == i) {
            return i;
        }
        return root[i] = find(root, root[i]);

=======

        int n = source.length;
        int[] f = new int[n];
        for (int i = 0; i < n; i++) {
            f[i] = i;
        }
        for (int[] swap : allowedSwaps) {
            union(f, swap[0], swap[1]);
        }
        Map<Integer, Map<Integer, Integer>> map = new HashMap<>();
        for (int i = 0; i < n; i++) {
            int x = find(f, i);
            map.computeIfAbsent(x, z -> new HashMap<>()).merge(source[i], 1, Integer::sum);
        }
        int ans = 0;
        for (int i = 0; i < n; i++) {
            int x = find(f, i);
            Map<Integer, Integer> cnt = map.get(x);
            int y = target[i];
            if (cnt.getOrDefault(y, 0) == 0) {
                ans++;
            } else {
                cnt.put(y, cnt.get(y) - 1);
            }
        }
        return ans;
    }

    public void union(int[] f, int x, int y) {
        int fx = find(f, x), fy = find(f, y);
        if (fx != fy) {
            f[fx] = fy;
        }
    }

    public int find(int[] f, int x) {
        if (f[x] == x) {
            return x;
        }
        int newf = find(f, f[x]);
        f[x] = newf;
        return newf;

=======

        int n = source.length;
        UnionFind uf = new UnionFind(n);
        for(int[] allowedSwap: allowedSwaps){
            uf.union(allowedSwap[0], allowedSwap[1]);
        }
        Map<Integer, Map<Integer, Integer>> groupToNumToCount = new HashMap<>();
        for(int i = 0; i < n; i++){
            int group = uf.find(i);
            groupToNumToCount.putIfAbsent(group, new HashMap<>());
            groupToNumToCount.get(group).put(source[i], groupToNumToCount.get(group).getOrDefault(source[i], 0) + 1);
        }
        int ans = 0;
        for(int i = 0; i < n; i++){
            int group = uf.find(i);
            int num = target[i];
            if(groupToNumToCount.get(group).getOrDefault(num, 0) == 0){
                ans++;
            }else{
                groupToNumToCount.get(group).put(num, groupToNumToCount.get(group).get(num) - 1);
            }
        }
        return ans;
    }
}

=======

        int n = source.length;
        int[] parent = new int[n];
        for(int i = 0; i < n; i++){
            parent[i] = i;
        }
        for(int[] swap : allowedSwaps){
            int x = find(parent, swap[0]);
            int y = find(parent, swap[1]);
            if(x != y){
                parent[x] = y;
            }
        }
        Map<Integer, Map<Integer, Integer>> map = new HashMap<>();
        for(int i = 0; i < n; i++){
            int p = find(parent, i);
            map.putIfAbsent(p, new HashMap<>());
            map.get(p).put(source[i], map.get(p).getOrDefault(source[i], 0) + 1);
        }
        int res = 0;
        for(int i = 0; i < n; i++){
            int p = find(parent, i);
            Map<Integer, Integer> m = map.get(p);
            m.put(target[i], m.getOrDefault(target[i], 0) - 1);
            if(m.get(target[i]) < 0){
                res++;
            }
        }
        return res;
    }
    private int find(int[] parent, int x){
        if(parent[x] != x){
            parent[x] = find(parent, parent[x]);
        }
        return parent[x];

=======

        int n = source.length;
        Map<Integer, Set<Integer>> map = new HashMap<>();
        for (int i = 0; i < n; i++) {
            map.computeIfAbsent(i, k -> new HashSet<>()).add(i);
        }
        for (int[] swap : allowedSwaps) {
            int i = swap[0];
            int j = swap[1];
            if (map.get(i) != map.get(j)) {
                Set<Integer> a = map.get(i);
                Set<Integer> b = map.get(j);
                if (a.size() < b.size()) {
                    a.addAll(b);
                    for (int k : b) {
                        map.put(k, a);
                    }
                } else {
                    b.addAll(a);
                    for (int k : a) {
                        map.put(k, b);
                    }
                }
            }
        }
        int res = 0;
        for (Set<Integer> set : map.values()) {
            Map<Integer, Integer> count = new HashMap<>();
            for (int i : set) {
                count.put(source[i], count.getOrDefault(source[i], 0) + 1);
            }
            for (int i : set) {
                int k = target[i];
                if (count.getOrDefault(k, 0) == 0) {
                    res++;
                } else {
                    count.put(k, count.get(k) - 1);
                }
            }
        }
        return res;

=======

        int n = source.length;
        int[] p = new int[n];
        for(int i=0;i<n;i++){
            p[i] = i;
        }
        for(int[] a:allowedSwaps){
            int x = a[0];
            int y = a[1];
            int px = find(p,x);
            int py = find(p,y);
            if(px!=py){
                p[px] = py;
            }
        }
        int[] cnt = new int[n];
        for(int i=0;i<n;i++){
            int pi = find(p,i);
            cnt[pi]++;
        }
        int[][] g = new int[n][];
        for(int i=0;i<n;i++){
            g[i] = new int[cnt[i]];
        }
        for(int i=0;i<n;i++){
            int pi = find(p,i);
            g[pi][--cnt[pi]] = i;
        }
        int res = 0;
        for(int i=0;i<n;i++){
            int[] c = new int[100001];
            for(int j:g[i]){
                c[source[j]]++;
            }
            for(int j:g[i]){
                c[target[j]]--;
                if(c[target[j]]<0){
                    res++;
                }
            }
        }
        return res;
    }

    int find(int[] p, int x){
        if(p[x]!=x){
            p[x] = find(p,p[x]);
        }
        return p[x];
