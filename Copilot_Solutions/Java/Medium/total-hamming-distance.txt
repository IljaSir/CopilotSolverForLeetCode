Synthesizing 10/10 solutions

=======

        int n = nums.length;
        int ans = 0;
        for (int i = 0; i < 30; i++) {
            int c = 0;
            for (int val : nums) {
                c += (val >> i) & 1;
            }
            ans += c * (n - c);
        }
        return ans;

=======

        int n = nums.length;
        int ans = 0;
        for (int i = 0; i < 30; ++i) {
            int c = 0;
            for (int val : nums) {
                c += (val >> i) & 1;
            }
            ans += c * (n - c);
        }
        return ans;

=======

        int ans = 0;
        int n = nums.length;
        for (int i = 0; i < 30; ++i) {
            int c = 0;
            for (int val : nums) {
                c += (val >> i) & 1;
            }
            ans += c * (n - c);
        }
        return ans;

=======

        int result = 0;
        for (int i = 0; i < 32; i++) {
            int count = 0;
            for (int num : nums) {
                count += (num >> i) & 1;
            }
            result += count * (nums.length - count);
        }
        return result;

=======

        int n = nums.length;
        int ans = 0;
        for (int i = 0; i < 32; i++) {
            int c = 0;
            for (int val : nums) {
                c += (val >> i) & 1;
            }
            ans += c * (n - c);
        }
        return ans;

=======

        int ans = 0;
        int n = nums.length;
        for (int i = 0; i < 30; ++i) {
            int c = 0;
            for (int val : nums) {
                c += (val >> i) & 1;
            }
            ans += c * (n - c);
        }
        return ans;

=======

        int n = nums.length;
        int ans = 0;
        for (int i = 0; i < 32; i++) {
            int c = 0;
            for (int val : nums) {
                c += (val >> i) & 1;
            }
            ans += c;

=======

        int n = nums.length;
        int ans = 0;
        int[] count = new int[32];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < 32; j++) {
                count[j] += (nums[i] >> j) & 1;
            }
        }
        for (int i = 0; i < 32; i++) {
            ans += count[i] * (n - count[i]);
        }
        return ans * (n - c);
        }
        return ans;

=======

        int total = 0;
        for (int i = 0; i < 32; i++) {
            int count = 0;
            for (int num : nums) {
                count += (num >> i) & 1;
            }
            total += count * (nums.length - count);
        }
        return total;

=======

        int total = 0;
        for (int i = 0; i < 32; i++) {
            int count = 0;
            for (int n : nums) {
                count += (n >> i) & 1;
            }
            total += count * (nums.length - count);
        }
        return total;

=======

        int n = nums.length;
        int max = 0;
        for (int i = 0; i < n; i++) {
            max = Math.max(max, nums[i]);
        }
        int[] bits = new int[32];
        for (int i = 0; i < n; i++) {
            int j = 0;
            while (nums[i] > 0) {
                bits[j++] += nums[i] & 1;
                nums[i] >>= 1;
            }
        }
        int ans = 0;
        for (int i = 0; i < 32; i++) {
            ans += bits[i] * (n - bits[i]);
        }
        return ans;

=======

        int len = nums.length;
        int[] count = new int[32];
        for(int i = 0; i < len; i++){
            int num = nums[i];
            for(int j = 0; j < 32; j++){
                count[j] += num & 1;
                num >>= 1;
            }
        }
        int res = 0;
        for(int i = 0; i < 32; i++){
            res += count[i] * (len - count[i]);
        }
        return res;
