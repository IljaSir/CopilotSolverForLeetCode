Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int[] answer = new int[queries.length];
        for (int i = 0; i < queries.length; i++) {
            int k = queries[i][0];
            int trim = queries[i][1];
            List<Integer> list = new ArrayList<Integer>();
            for (int j = 0; j < nums.length; j++) {
                String str = nums[j].substring(0, trim);
                list.add(Integer.valueOf(str));
            }
            Collections.sort(list);
            answer[i] = list.get(k - 1);
        }
        return answer;

=======

        int[] result = new int[queries.length];
        for (int i = 0; i < queries.length; i++) {
            int k = queries[i][0];
            int trim = queries[i][1];
            int[] temp = new int[nums.length];
            for (int j = 0; j < nums.length; j++) {
                temp[j] = Integer.parseInt(nums[j].substring(nums[j].length() - trim));
            }
            Arrays.sort(temp);
            result[i] = temp[k - 1];
        }
        return result;

=======

        int[] result = new int[queries.length];
        for (int i = 0; i < queries.length; i++) {
            result[i] = getKthSmallest(nums, queries[i][0], queries[i][1]);
        }
        return result;
    }
    
    private int getKthSmallest(String[] nums, int k, int trim) {
        int[] arr = new int[nums.length];
        for (int i = 0; i < nums.length; i++) {
            arr[i] = Integer.parseInt(nums[i].substring(0, nums[i].length() - trim));
        }
        Arrays.sort(arr);
        return arr[k - 1];

=======

        int[] answer = new int[queries.length];
        for (int i = 0; i < queries.length; i++) {
            answer[i] = findKthSmallest(nums, queries[i][0], queries[i][1]);
        }
        return answer;
    }
    
    private int findKthSmallest(String[] nums, int k, int trim) {
        PriorityQueue<Integer> queue = new PriorityQueue<Integer>(new Comparator<Integer>() {
            @Override
            public int compare(Integer a, Integer b) {
                return b - a;
            }
        });
        for (int i = 0; i < nums.length; i++) {
            int val = Integer.parseInt(nums[i].substring(0, nums[i].length() - trim));
            queue.add(val);
            if (queue.size() > k) {
                queue.poll();
            }
        }
        return queue.peek();

=======

        int[] ans = new int[queries.length];
        for (int i = 0; i < queries.length; i++) {
            ans[i] = kthSmallest(nums, queries[i][0], queries[i][1]);
        }
        return ans;
    }
    
    public int kthSmallest(String[] nums, int k, int trim) {
        int n = nums.length;
        int[] sorted = new int[n];
        for (int i = 0; i < n; i++) {
            sorted[i] = Integer.parseInt(nums[i].substring(0, nums[i].length() - trim + 1));
        }
        Arrays.sort(sorted);
        return sorted[k - 1];

=======

        int[] ans = new int[queries.length];
        for (int i = 0; i < queries.length; i++) {
            int k = queries[i][0];
            int trim = queries[i][1];
            PriorityQueue<Integer> pq = new PriorityQueue<>((a, b) -> b - a);
            for (String num : nums) {
                pq.add(Integer.parseInt(num.substring(0, trim)));
            }
            while (k > 1) {
                pq.poll();
                k--;
            }
            ans[i] = pq.poll();
        }
        return ans;

=======

        int[] answer = new int[queries.length];
        for (int i = 0; i < queries.length; i++) {
            int k = queries[i][0], trim = queries[i][1];
            String[] trimmedNums = new String[nums.length];
            for (int j = 0; j < nums.length; j++) {
                trimmedNums[j] = nums[j].substring(0, trim);
            }
            Arrays.sort(trimmedNums);
            answer[i] = Integer.parseInt(trimmedNums[k - 1]);
        }
        return answer;

=======

        int[] res = new int[queries.length];
        for(int i = 0; i < queries.length; i++) {
            int k = queries[i][0];
            int trim = queries[i][1];
            String[] trimmed = new String[nums.length];
            for(int j = 0; j < nums.length; j++) {
                trimmed[j] = nums[j].substring(nums[j].length() - trim);
            }
            Arrays.sort(trimmed);
            res[i] = Integer.parseInt(trimmed[k-1]);
        }
        return res;

=======

        int[] answer = new int[queries.length];
        int i = 0;
        for (int[] query : queries) {
            answer[i++] = getKthSmallest(nums, query[0], query[1]);
        }
        return answer;
    }
    
    private int getKthSmallest(String[] nums, int k, int trim) {
        int[] array = new int[nums.length];
        for (int i = 0; i < nums.length; i++) {
            array[i] = Integer.parseInt(nums[i].substring(nums[i].length() - trim));
        }
        Arrays.sort(array);
        return array[k - 1];
