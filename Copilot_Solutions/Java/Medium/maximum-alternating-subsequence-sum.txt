Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int n = nums.length;
        long[][] dp = new long[n][2];
        dp[0][0] = nums[0];
        dp[0][1] = 0;
        for (int i = 1; i < n; i++) {
            dp[i][0] = Math.max(dp[i - 1][0], dp[i - 1][1] + nums[i]);
            dp[i][1] = Math.max(dp[i - 1][1], dp[i - 1][0] - nums[i]);
        }
        return Math.max(dp[n - 1][0], dp[n - 1][1]);

=======

        int n = nums.length;
        long[][] dp = new long[n][2];
        dp[0][0] = nums[0];
        dp[0][1] = 0;
        for (int i = 1; i < n; ++i) {
            dp[i][0] = Math.max(dp[i - 1][0], dp[i - 1][1] + nums[i]);
            dp[i][1] = Math.max(dp[i - 1][1], dp[i - 1][0] - nums[i]);
        }
        return dp[n - 1][0];

=======

        long[][] dp = new long[nums.length][2];
        dp[0][0] = nums[0];
        for (int i = 1; i < nums.length; i++) {
            dp[i][0] = Math.max(dp[i-1][0], dp[i-1][1] + nums[i]);
            dp[i][1] = Math.max(dp[i-1][1], dp[i-1][0] - nums[i]);
        }
        return Math.max(dp[nums.length-1][0], dp[nums.length-1][1]);

=======

        int n = nums.length;
        long[] dp = new long[n];
        dp[0] = nums[0];
        for (int i = 1; i < n; i++) {
            dp[i] = Math.max(dp[i - 1], dp[i - 1] - nums[i] + nums[i - 1]);
        }
        return dp[n - 1];

=======

        long[] dp = new long[nums.length];
        dp[0] = nums[0];
        long max = dp[0];
        for (int i = 1; i < nums.length; i++) {
            dp[i] = Math.max(nums[i] - dp[i - 1], dp[i - 1] + nums[i]);
            max = Math.max(max, dp[i]);
        }
        return max;

=======

        int n = nums.length;
        long[] dp = new long[n];
        dp[0] = nums[0];
        long ans = dp[0];
        for (int i = 1; i < n; i++) {
            dp[i] = Math.max(dp[i - 1] + nums[i], nums[i]);
            ans = Math.max(ans, dp[i]);
        }
        return ans;

=======

        int n = nums.length;
        long[] dp = new long[n];
        dp[0] = nums[0];
        long res = dp[0];
        for (int i = 1; i < n; i++) {
            dp[i] = nums[i];
            if (i % 2 == 0) {
                dp[i] += dp[i - 1];
            } else {
                dp[i] = Math.max(dp[i], dp[i - 1] - nums[i]);
            }
            res = Math.max(res, dp[i]);
        }
        return res;

=======

        long even = 0, odd = 0;
        for (int i = 0; i < nums.length; i++) {
            if (i % 2 == 0) {
                even = Math.max(even + nums[i], odd);
            } else {
                odd = Math.max(odd + nums[i], even);
            }
        }
        return Math.max(even, odd);

=======

        long sum = 0;
        long odd = 0;
        long even = 0;
        for (int i = 0; i < nums.length; i++) {
            if (i % 2 == 0) {
                even = Math.max(even + nums[i], odd);
                sum = Math.max(sum, even);
            } else {
                odd = Math.max(odd + nums[i], even);
                sum = Math.max(sum, odd);
            }
        }
        return sum;
