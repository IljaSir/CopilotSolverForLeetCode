Synthesizing 10/10 solutions

=======

        List<int[]> result = new ArrayList<>();
        int i = 0;
        int j = 0;
        while (i < firstList.length && j < secondList.length) {
            int start = Math.max(firstList[i][0], secondList[j][0]);
            int end = Math.min(firstList[i][1], secondList[j][1]);
            if (start <= end) {
                result.add(new int[] {start, end});
            }
            if (firstList[i][1] < secondList[j][1]) {
                i++;
            } else {
                j++;
            }
        }
        return result.toArray(new int[result.size()][]);

=======

        List<int[]> result = new ArrayList<>();
        int i = 0;
        int j = 0;
        while (i < firstList.length && j < secondList.length) {
            int[] first = firstList[i];
            int[] second = secondList[j];
            if (first[1] < second[0]) {
                i++;
            } else if (first[0] > second[1]) {
                j++;
            } else {
                result.add(new int[]{Math.max(first[0], second[0]), Math.min(first[1], second[1])});
                if (first[1] < second[1]) {
                    i++;
                } else {
                    j++;
                }
            }
        }
        return result.toArray(new int[result.size()][]);

=======

        List<int[]> res = new ArrayList<>();
        int i = 0, j = 0;
        while (i < firstList.length && j < secondList.length) {
            int[] a = firstList[i];
            int[] b = secondList[j];
            if (a[0] <= b[1] && a[1] >= b[0]) {
                res.add(new int[]{Math.max(a[0], b[0]), Math.min(a[1], b[1])});
            }
            if (a[1] < b[1]) {
                i++;
            } else {
                j++;
            }
        }
        return res.toArray(new int[0][]);

=======

        int i = 0, j = 0;
        List<int[]> ans = new ArrayList<>();
        while (i < firstList.length && j < secondList.length) {
            int lo = Math.max(firstList[i][0], secondList[j][0]);
            int hi = Math.min(firstList[i][1], secondList[j][1]);
            if (lo <= hi) {
                ans.add(new int[]{lo, hi});
            }
            if (firstList[i][1] < secondList[j][1]) {
                i++;
            } else {
                j++;
            }
        }
        return ans.toArray(new int[ans.size()][]);

=======

        List<int[]> res = new ArrayList<>();
        int i = 0, j = 0;
        while (i < firstList.length && j < secondList.length) {
            int[] first = firstList[i];
            int[] second = secondList[j];
            if (first[0] <= second[0] && first[1] >= second[0]) {
                res.add(new int[]{second[0], Math.min(first[1], second[1])});
            } else if (second[0] <= first[0] && second[1] >= first[0]) {
                res.add(new int[]{first[0], Math.min(first[1], second[1])});
            }
            if (first[1] < second[1]) i++;
            else j++;
        }
        return res.toArray(new int[0][]);

=======

        int i = 0, j = 0;
        List<int[]> res = new ArrayList<>();
        while (i < firstList.length && j < secondList.length) {
            int[] first = firstList[i];
            int[] second = secondList[j];
            if (first[0] <= second[1] && second[0] <= first[1]) {
                int start = Math.max(first[0], second[0]);
                int end = Math.min(first[1], second[1]);
                res.add(new int[] {start, end});
            }
            if (first[1] < second[1]) {
                i++;
            } else {
                j++;
            }
        }
        return res.toArray(new int[res.size()][]);

=======

        int i = 0;
        int j = 0;
        int m = firstList.length;
        int n = secondList.length;
        List<int[]> ans = new ArrayList<>();
        while (i < m && j < n) {
            int[] a = firstList[i];
            int[] b = secondList[j];
            int start = Math.max(a[0], b[0]);
            int end = Math.min(a[1], b[1]);
            if (start <= end) {
                ans.add(new int[]{start, end});
            }
            if (a[1] < b[1]) {
                i++;
            } else {
                j++;
            }
        }
        return ans.toArray(new int[ans.size()][]);

=======

        List<int[]> list = new ArrayList<int[]>();
        int i = 0, j = 0;
        while (i < firstList.length && j < secondList.length) {
            int[] first = firstList[i];
            int[] second = secondList[j];
            int[] intersection = new int[2];
            if (first[1] < second[0]) {
                i++;
            } else if (first[0] > second[1]) {
                j++;
            } else {
                intersection[0] = Math.max(first[0], second[0]);
                intersection[1] = Math.min(first[1], second[1]);
                list.add(intersection);
                if (first[1] > second[1]) {
                    j++;
                } else {
                    i++;
                }
            }
        }
        int[][] result = new int[list.size()][2];
        for (int k = 0; k < list.size(); k++) {
            result[k] = list.get(k);
        }
        return result;

=======

        int i = 0;
        int j = 0;
        ArrayList<int[]> result = new ArrayList<>();
        while (i < firstList.length && j < secondList.length) {
            int[] a = firstList[i];
            int[] b = secondList[j];
            if (a[0] <= b[1] && b[0] <= a[1]) {
                result.add(new int[]{Math.max(a[0], b[0]), Math.min(a[1], b[1])});
            }
            if (a[1] < b[1]) i++;
            else j++;
        }
        return result.toArray(new int[result.size()][]);

=======

        if (firstList == null || secondList == null) {
            return new int[0][0];
        }
        int i = 0, j = 0;
        List<int[]> list = new ArrayList<>();
        while (i < firstList.length && j < secondList.length) {
            int[] first = firstList[i];
            int[] second = secondList[j];
            if (first[0] <= second[1] && second[0] <= first[1]) {
                list.add(new int[]{Math.max(first[0], second[0]), Math.min(first[1], second[1])});
            }
            if (first[1] < second[1]) {
                i++;
            } else {
                j++;
            }
        }
        return list.toArray(new int[list.size()][]);
