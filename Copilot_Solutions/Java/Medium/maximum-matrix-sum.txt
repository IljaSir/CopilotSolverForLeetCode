Synthesizing 10/10 solutions

=======

        long sum = 0;
        int min = Integer.MAX_VALUE;
        int count = 0;
        for (int i = 0; i < matrix.length; i++) {
            for (int j = 0; j < matrix.length; j++) {
                sum += Math.abs(matrix[i][j]);
                min = Math.min(min, Math.abs(matrix[i][j]));
                if (matrix[i][j] < 0) {
                    count++;
                }
            }
        }
        if (count % 2 == 0) {
            return sum;
        }
        return sum - 2 * min;

=======

        long sum = 0;
        int min = Integer.MAX_VALUE;
        int count = 0;
        for (int i = 0; i < matrix.length; i++) {
            for (int j = 0; j < matrix[0].length; j++) {
                sum += Math.abs(matrix[i][j]);
                min = Math.min(min, Math.abs(matrix[i][j]));
                if (matrix[i][j] < 0) {
                    count++;
                }
            }
        }
        if (count % 2 == 1) {
            sum -= 2 * min;
        }
        return sum;

=======

        long sum = 0;
        int min = Integer.MAX_VALUE;
        int count = 0;
        for (int i = 0; i < matrix.length; i++) {
            for (int j = 0; j < matrix[i].length; j++) {
                sum += Math.abs(matrix[i][j]);
                min = Math.min(min, Math.abs(matrix[i][j]));
                if (matrix[i][j] < 0) {
                    count++;
                }
            }
        }
        if (count % 2 != 0) {
            sum -= min * 2;
        }
        return sum;

=======

        int n = matrix.length;
        long sum = 0;
        int min = Integer.MAX_VALUE;
        int cnt = 0;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                sum += Math.abs(matrix[i][j]);
                min = Math.min(min, Math.abs(matrix[i][j]));
                if (matrix[i][j] < 0) {
                    cnt++;
                }
            }
        }
        if (cnt % 2 == 1) {
            sum -= 2 * min;
        }
        return sum;

=======

        int n = matrix.length;
        long sum = 0;
        int min = Integer.MAX_VALUE;
        int count = 0;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                int x = matrix[i][j];
                if (x < 0) {
                    count++;
                    x = -x;
                }
                min = Math.min(min, x);
                sum += x;
            }
        }
        return count % 2 == 0 ? sum : sum - min * 2;

=======

        long sum = 0;
        int min = Integer.MAX_VALUE;
        int negative = 0;
        for (int i = 0; i < matrix.length; i++) {
            for (int j = 0; j < matrix[0].length; j++) {
                sum += Math.abs(matrix[i][j]);
                min = Math.min(min, Math.abs(matrix[i][j]));
                if (matrix[i][j] < 0) {
                    negative++;
                }
            }
        }
        if (negative % 2 == 0) {
            return sum;
        } else {
            return sum - 2 * min;
        }

=======

        int n = matrix.length;
        long ans = 0;
        int min = Integer.MAX_VALUE;
        int neg = 0;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                ans += Math.abs(matrix[i][j]);
                min = Math.min(min, Math.abs(matrix[i][j]));
                if (matrix[i][j] < 0) {
                    neg++;
                }
            }
        }
        if (n % 2 == 0 || neg % 2 == 0) {
            return ans;
        }
        return ans - 2 * min;

=======

        long sum = 0;
        int n = matrix.length;
        int min = Integer.MAX_VALUE;
        int negativeCount = 0;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                int v = matrix[i][j];
                sum += Math.abs(v);
                min = Math.min(min, Math.abs(v));
                if (v < 0) {
                    negativeCount++;
                }
            }
        }
        if (negativeCount % 2 == 1) {
            sum -= 2 * min;
        }
        return sum;

=======

        long sum = 0;
        int min = Integer.MAX_VALUE;
        int neg = 0;
        int n = matrix.length;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (matrix[i][j] < 0) {
                    neg++;
                }
                min = Math.min(min, Math.abs(matrix[i][j]));
                sum += Math.abs(matrix[i][j]);
            }
        }
        if (neg % 2 == 1) {
            sum -= min * 2;
        }
        return sum;

=======

        int n = matrix.length;
        int min = Integer.MAX_VALUE;
        long sum = 0;
        int neg = 0;
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < n; ++j) {
                if (matrix[i][j] < 0) {
                    ++neg;
                }
                min = Math.min(min, Math.abs(matrix[i][j]));
                sum += Math.abs(matrix[i][j]);
            }
        }
        return neg % 2 == 0 ? sum : sum - 2 * min;
