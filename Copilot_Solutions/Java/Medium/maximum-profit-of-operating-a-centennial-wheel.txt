Synthesizing 10/10 solutions

=======

        int n = customers.length;
        int[] waiting = new int[n + 1];
        for (int i = 0; i < n; i++) {
            waiting[i + 1] = waiting[i] + customers[i];
        }
        int max = 0;
        int maxIndex = -1;
        int profit = 0;
        for (int i = 0; i <= n; i++) {
            int w = waiting[i];
            int b = Math.min(w, 4);
            profit += b * boardingCost - runningCost;
            if (profit > max) {
                max = profit;
                maxIndex = i;
            }
            waiting[i] -= b;
        }
        return maxIndex == -1 ? -1 : maxIndex + 1;

=======

        int maxProfit = 0;
        int maxRotations = -1;
        int rotations = 0;
        int profit = 0;
        int waiting = 0;
        for (int i = 0; i < customers.length || waiting > 0; i++) {
            if (i < customers.length) {
                waiting += customers[i];
            }
            int boarded = Math.min(4, waiting);
            waiting -= boarded;
            profit += boarded * boardingCost - runningCost;
            rotations++;
            if (profit > maxProfit) {
                maxProfit = profit;
                maxRotations = rotations;
            }
        }
        return maxRotations;

=======

        int max = 0;
        int maxI = -1;
        int i = 0;
        int profit = 0;
        int waiting = 0;
        while (i < customers.length || waiting > 0) {
            int c = i < customers.length ? customers[i] : 0;
            int b = Math.min(4, waiting + c);
            waiting = waiting + c - b;
            profit = profit + b * boardingCost - runningCost;
            if (profit > max) {
                max = profit;
                maxI = i + 1;
            }
            i++;
        }
        return maxI;

=======

        int maxProfit = 0;
        int curProfit = 0;
        int maxRotate = 0;
        int curRotate = 0;
        int curWait = 0;
        for (int i = 0; i < customers.length; i++) {
            curRotate++;
            curWait += customers[i];
            int board = Math.min(curWait, 4);
            curWait -= board;
            curProfit += board * boardingCost - runningCost;
            if (curProfit > maxProfit) {
                maxProfit = curProfit;
                maxRotate = curRotate;
            }
        }
        while (curWait > 0) {
            curRotate++;
            int board = Math.min(curWait, 4);
            curWait -= board;
            curProfit += board * boardingCost - runningCost;
            if (curProfit > maxProfit) {
                maxProfit = curProfit;
                maxRotate = curRotate;
            }
        }
        return maxProfit > 0 ? maxRotate : -1;

=======

        int max = 0;
        int maxIndex = 0;
        int sum = 0;
        int index = 0;
        int current = 0;
        while (index < customers.length || current > 0) {
            if (index < customers.length) {
                current += customers[index];
            }
            int boarding = Math.min(current, 4);
            current -= boarding;
            sum += boarding;
            int profit = sum * boardingCost - (index + 1) * runningCost;
            if (profit > max) {
                max = profit;
                maxIndex = index + 1;
            }
            index++;
        }
        return max > 0 ? maxIndex : -1;

=======

        int max = 0;
        int maxIndex = -1;
        int sum = 0;
        int count = 0;
        int i = 0;
        while(i < customers.length || sum > 0) {
            if(i < customers.length) {
                sum += customers[i];
            }
            int cur = Math.min(sum, 4);
            sum -= cur;
            count += cur;
            int profit = count * boardingCost - (i + 1) * runningCost;
            if(profit > max) {
                max = profit;
                maxIndex = i + 1;
            }
            i++;
        }
        return maxIndex;

=======

        int maxProfit = 0;
        int maxProfitIndex = -1;
        int totalProfit = 0;
        int totalCustomers = 0;
        int totalRotations = 0;
        for (int i = 0; i < customers.length; i++) {
            totalCustomers += customers[i];
            int currentProfit = 0;
            if (totalCustomers >= 4) {
                currentProfit = 4 * boardingCost;
                totalCustomers -= 4;
            } else {
                currentProfit = totalCustomers * boardingCost;
                totalCustomers = 0;
            }
            totalProfit += currentProfit - runningCost;
            totalRotations++;
            if (totalProfit > maxProfit) {
                maxProfit = totalProfit;
                maxProfitIndex = totalRotations;
            }
        }
        int currentProfit = 0;
        while (totalCustomers > 0) {
            if (totalCustomers >= 4) {
                currentProfit = 4 * boardingCost;
                totalCustomers -= 4;
            } else {
                currentProfit = totalCustomers * boardingCost;
                totalCustomers = 0;
            }
            totalProfit += currentProfit - runningCost;
            totalRotations++;
            if (totalProfit > maxProfit) {
                maxProfit = totalProfit;
                maxProfitIndex = totalRotations;
            }
        }
        return maxProfit > 0 ? maxProfitIndex : -1;

=======

        int n = customers.length;
        int max = 0;
        int maxIndex = -1;
        int wait = 0;
        int cur = 0;
        int i = 0;
        int count = 0;
        while (i < n || wait > 0) {
            if (i < n) {
                wait += customers[i];
            }
            int board = Math.min(wait, 4);
            wait -= board;
            cur = cur + board * boardingCost - runningCost;
            count++;
            if (cur > max) {
                max = cur;
                maxIndex = count;
            }
            i++;
        }
        return maxIndex;

=======

        int profit = 0;
        int maxProfit = 0;
        int maxProfitIndex = -1;
        int currCustomer = 0;
        int currProfit = 0;
        int currBoarding = 0;
        int currRunning = 0;
        int i = 0;
        while (i < customers.length || currCustomer > 0) {
            if (i < customers.length) {
                currCustomer += customers[i];
            }
            currBoarding = Math.min(currCustomer, 4);
            currCustomer -= currBoarding;
            currProfit = currBoarding * boardingCost - runningCost;
            profit += currProfit;
            i++;
            if (profit > maxProfit) {
                maxProfit = profit;
                maxProfitIndex = i;
            }
        }
        return maxProfit > 0 ? maxProfitIndex : -1;

=======

        int max = 0;
        int maxIndex = -1;
        int sum = 0;
        int index = 0;
        int count = 0;
        int temp = 0;
        int wait = 0;
        while (index < customers.length || wait > 0) {
            if (index < customers.length) {
                wait += customers[index];
            }
            temp = Math.min(wait, 4);
            wait -= temp;
            sum += temp;
            count++;
            temp = sum * boardingCost - count * runningCost;
            if (temp > max) {
                max = temp;
                maxIndex = count;
            }
            index++;
        }
        return maxIndex;
