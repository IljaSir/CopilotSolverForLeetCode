Synthesizing 10/10 solutions

=======

        int m = grid.length;
        int n = grid[0].length;
        boolean[][] visited = new boolean[m][n];
        visited[0][0] = true;
        return dfs(grid, 0, 0, visited);
    }
    
    private boolean dfs(int[][] grid, int i, int j, boolean[][] visited) {
        int m = grid.length;
        int n = grid[0].length;
        if (i == m-1 && j == n-1) {
            return true;
        }
        
        int[] dx = new int[] {0, 0, -1, 1};
        int[] dy = new int[] {-1, 1, 0, 0};
        for (int k = 0; k < dx.length; k++) {
            int nx = i + dx[k];
            int ny = j + dy[k];
            if (nx < 0 || nx >= m || ny < 0 || ny >= n || visited[nx][ny]) {
                continue;
            }
            if (grid[i][j] == 1 && (k == 0 || k == 1)) {
                continue;
            }
            if (grid[i][j] == 2 && (k == 2 || k == 3)) {
                continue;
            }
            if (grid[i][j] == 3 && (k == 0 || k == 3)) {
                continue;
            }
            if (grid[i][j] == 4 && (k == 1 || k == 3)) {
                continue;
            }
            if (grid[i][j] == 5 && (k == 0 || k == 2)) {
                continue;
            }
            if (grid[i][j] == 6 && (k == 1 || k == 2)) {
                continue;
            }
            if (grid[nx][ny] == 1 && (k == 0 || k == 1)) {
                continue;
            }
            if (grid[nx][ny] == 2 && (k == 2 || k == 3)) {
                continue;
            }
            if (grid[nx][ny] == 3 && (k == 2 || k == 1)) {
                continue;
            }
            if (grid[nx][ny] == 4 && (

=======

        int m = grid.length;
        int n = grid[0].length;
        boolean[][] visited = new boolean[m][n];
        return dfs(grid, 0, 0, visited);
    }
    
    private boolean dfs(int[][] grid, int i, int j, boolean[][] visited) {
        int m = grid.length;
        int n = grid[0].length;
        if (i < 0 || i >= m || j < 0 || j >= n || visited[i][j]) return false;
        visited[i][j] = true;
        if (i == m - 1 && j == n - 1) return true;
        int val = grid[i][j];
        if (val == 1) {
            return dfs(grid, i, j + 1, visited) || dfs(grid, i, j - 1, visited);
        } else if (val == 2) {
            return dfs(grid, i + 1, j, visited) || dfs(grid, i - 1, j, visited);
        } else if (val == 3) {
            return dfs(grid, i, j - 1, visited) || dfs(grid, i + 1, j, visited);
        } else if (val == 4) {
            return dfs(grid, i, j + 1, visited) || dfs(grid, i + 1, j, visited);
        } else if (val == 5) {
            return dfs(grid, i, j - 1, visited) || dfs(grid, i - 1, j, visited);
        } else {
            return dfs(grid, i, j + 1, visited) || dfs(grid, i - 1, j, visited);
        }

=======

        int m = grid.length;
        int n = grid[0].length;
        boolean[][] visited = new boolean[m][n];
        return dfs(grid, 0, 0, visited);
    }
    
    private boolean dfs(int[][] grid, int x, int y, boolean[][] visited) {
        if (x < 0 || x >= grid.length || y < 0 || y >= grid[0].length || visited[x][y]) {
            return false;
        }
        visited[x][y] = true;
        if (grid[x][y] == 1) {
            return dfs(grid, x, y - 1, visited) || dfs(grid, x, y + 1, visited);
        }
        if (grid[x][y] == 2) {
            return dfs(grid, x - 1, y, visited) || dfs(grid, x + 1, y, visited);
        }
        if (grid[x][y] == 3) {
            return dfs(grid, x, y - 1, visited) || dfs(grid, x + 1, y, visited);
        }
        if (grid[x][y] == 4) {
            return dfs(grid, x, y + 1, visited) || dfs(grid, x + 1, y, visited);
        }
        if (grid[x][y] == 5) {
            return dfs(grid, x, y - 1, visited) || dfs(grid, x - 1, y, visited);
        }
        if (grid[x][y] == 6) {
            return dfs(grid, x, y + 1, visited) || dfs(grid, x - 1, y, visited);
        }
        return false;

=======

        int m = grid.length;
        int n = grid[0].length;
        boolean[][] visited = new boolean[m][n];
        return dfs(grid, 0, 0, visited);
    }
    
    public boolean dfs(int[][] grid, int i, int j, boolean[][] visited) {
        int m = grid.length;
        int n = grid[0].length;
        if (i < 0 || i >= m || j < 0 || j >= n) {
            return false;
        }
        if (i == m - 1 && j == n - 1) {
            return true;
        }
        if (visited[i][j]) {
            return false;
        }
        visited[i][j] = true;
        int cur = grid[i][j];
        if (cur == 1) {
            return dfs(grid, i, j - 1, visited) || dfs(grid, i, j + 1, visited);
        } else if (cur == 2) {
            return dfs(grid, i - 1, j, visited) || dfs(grid, i + 1, j, visited);
        } else if (cur == 3) {
            return dfs(grid, i, j - 1, visited) || dfs(grid, i + 1, j, visited);
        } else if (cur == 4) {
            return dfs(grid, i, j + 1, visited) || dfs(grid, i + 1, j, visited);
        } else if (cur == 5) {
            return dfs(grid, i, j - 1, visited) || dfs(grid, i - 1, j, visited);
        } else if (cur == 6) {
            return dfs(grid, i, j + 1, visited) || dfs(grid, i - 1, j, visited);
        }
        return false;

=======

        int m = grid.length, n = grid[0].length;
        boolean[][] visited = new boolean[m][n];
        int[][] dirs = {{0, 1}, {0, -1}, {1, 0}, {-1, 0}};
        return dfs(grid, 0, 0, visited, dirs);
    }
    public boolean dfs(int[][] grid, int i, int j, boolean[][] visited, int[][] dirs) {
        if (i == grid.length - 1 && j == grid[0].length - 1) {
            return true;
        }
        visited[i][j] = true;
        boolean res = false;
        for (int[] dir: dirs) {
            int x = i + dir[0], y = j + dir[1];
            if (x >= 0 && x < grid.length && y >= 0 && y < grid[0].length && !visited[x][y]) {
                if (dir[0] == 1 && (grid[i][j] == 2 || grid[i][j] == 3 || grid[i][j] == 4)) {
                    if (grid[x][y] == 2 || grid[x][y] == 5 || grid[x][y] == 6) {
                        res |= dfs(grid, x, y, visited, dirs);
                    }
                } else if (dir[0] == -1 && (grid[i][j] == 2 || grid[i][j] == 5 || grid[i][j] == 6)) {
                    if (grid[x][y] == 2 || grid[x][y] == 3 || grid[x][y] == 4) {
                        res |= dfs(grid, x, y, visited, dirs);
                    }
                } else if (dir[1] == 1 && (grid[i][j] == 1 || grid[i][j] == 4 || grid[i][j] == 6)) {
                    if (grid[x][y] == 1 || grid[x][y] == 3 || grid[x][y] == 5) {
                        res |= dfs(grid, x, y, visited, dirs);
                    }
                } else if (dir[1] == -1 && (grid[i][j] == 1 || grid[i][j] == 3 || grid[i

=======

        int n = grid.length;
        int m = grid[0].length;
        boolean[][] visited = new boolean[n][m];
        return dfs(grid, 0, 0, visited);
    }

    private boolean dfs(int[][] grid, int i, int j, boolean[][] visited) {
        int n = grid.length;
        int m = grid[0].length;
        if (i < 0 || i >= n || j < 0 || j >= m) return false;
        if (visited[i][j]) return false;
        visited[i][j] = true;
        if (i == n - 1 && j == m - 1) return true;
        if (grid[i][j] == 1) {
            return dfs(grid, i, j + 1, visited) || dfs(grid, i, j - 1, visited);
        } else if (grid[i][j] == 2) {
            return dfs(grid, i + 1, j, visited) || dfs(grid, i - 1, j, visited);
        } else if (grid[i][j] == 3) {
            return dfs(grid, i, j - 1, visited) || dfs(grid, i + 1, j, visited);
        } else if (grid[i][j] == 4) {
            return dfs(grid, i, j + 1, visited) || dfs(grid, i + 1, j, visited);
        } else if (grid[i][j] == 5) {
            return dfs(grid, i, j - 1, visited) || dfs(grid, i - 1, j, visited);
        } else if (grid[i][j] == 6) {
            return dfs(grid, i, j + 1, visited) || dfs(grid, i - 1, j, visited);
        } else {
            return false;
        }

=======

        int m = grid.length, n = grid[0].length;
        boolean[][] visited = new boolean[m][n];
        return dfs(0, 0, m, n, grid, visited);
    }
    
    private boolean dfs(int i, int j, int m, int n, int[][] grid, boolean[][] visited) {
        if (i == m - 1 && j == n - 1) {
            return true;
        }
        visited[i][j] = true;
        if (i > 0 && !visited[i - 1][j] && grid[i - 1][j] == 2 && grid[i][j] == 5) {
            if (dfs(i - 1, j, m, n, grid, visited)) {
                return true;
            }
        }
        if (j > 0 && !visited[i][j - 1] && grid[i][j - 1] == 1 && grid[i][j] == 3) {
            if (dfs(i, j - 1, m, n, grid, visited)) {
                return true;
            }
        }
        if (i < m - 1 && !visited[i + 1][j] && grid[i + 1][j] == 2 && grid[i][j] == 6) {
            if (dfs(i + 1, j, m, n, grid, visited)) {
                return true;
            }
        }
        if (j < n - 1 && !visited[i][j + 1] && grid[i][j + 1] == 1 && grid[i][j] == 4) {
            if (dfs(i, j + 1, m, n, grid, visited)) {
                return true;
            }
        }
        if (i > 0 && !visited[i - 1][j] && grid[i - 1][j] == 5 && grid[i][j] == 2) {
            if (dfs(i - 1, j, m, n, grid, visited)) {
                return true;
            }
        }
        if (j > 0 && !visited[i][j - 1] && grid[i][j - 1] == 3 && grid[i][j] == 1) {
            if (dfs(i, j - 1,

=======

        int n = grid.length;
        int m = grid[0].length;
        boolean[][] visited = new boolean[n][m];
        return dfs(grid, 0, 0, visited);
    }
    boolean dfs(int[][] grid, int i, int j, boolean[][] visited) {
        if (i < 0 || i >= grid.length || j < 0 || j >= grid[0].length || visited[i][j]) {
            return false;
        }
        visited[i][j] = true;
        if (i == grid.length - 1 && j == grid[0].length - 1) {
            return true;
        }
        int type = grid[i][j];
        if (type == 1) {
            return dfs(grid, i, j + 1, visited) || dfs(grid, i, j - 1, visited);
        }
        if (type == 2) {
            return dfs(grid, i + 1, j, visited) || dfs(grid, i - 1, j, visited);
        }
        if (type == 3) {
            return dfs(grid, i, j - 1, visited) || dfs(grid, i + 1, j, visited);
        }
        if (type == 4) {
            return dfs(grid, i, j + 1, visited) || dfs(grid, i + 1, j, visited);
        }
        if (type == 5) {
            return dfs(grid, i, j - 1, visited) || dfs(grid, i - 1, j, visited);
        }
        if (type == 6) {
            return dfs(grid, i, j + 1, visited) || dfs(grid, i - 1, j, visited);
        }
        return false;

=======

        int m = grid.length;
        int n = grid[0].length;
        int[][][] dirs = new int[][][]{
            {{0, -1}, {0, 1}},
            {{-1, 0}, {1, 0}},
            {{0, -1}, {1, 0}},
            {{0, 1}, {1, 0}},
            {{0, -1}, {-1, 0}},
            {{0, 1}, {-1, 0}}
        };
        boolean[][] visited = new boolean[m][n];
        Queue<int[]> q = new LinkedList<>();
        q.add(new int[]{0, 0});
        while (!q.isEmpty()) {
            int[] c = q.poll();
            if (c[0] == m - 1 && c[1] == n - 1) {
                return true;
            }
            visited[c[0]][c[1]] = true;
            for (int[] dir : dirs[grid[c[0]][c[1]] - 1]) {
                int x = c[0] + dir[0];
                int y = c[1] + dir[1];
                if (x < 0 || x >= m || y < 0 || y >= n || visited[x][y]) {
                    continue;
                }
                for (int[] d : dirs[grid[x][y] - 1]) {
                    if (d[0] == -dir[0] && d[1] == -dir[1]) {
                        q.add(new int[]{x, y});
                        break;
                    }
                }
            }
        }
        return false;

=======

        int m = grid.length;
        int n = grid[0].length;
        int[][][] dir = new int[][][]{
            {{0, 1}, {0, -1}},
            {{1, 0}, {-1, 0}},
            {{0, 1}, {-1, 0}},
            {{0, -1}, {-1, 0}},
            {{0, 1}, {1, 0}},
            {{0, -1}, {1, 0}}
        };
        int[][] visited = new int[m][n];
        Queue<int[]> queue = new LinkedList<>();
        queue.offer(new int[]{0, 0});
        while (!queue.isEmpty()) {
            int[] cur = queue.poll();
            if (cur[0] == m - 1 && cur[1] == n - 1) {
                return true;
            }
            if (visited[cur[0]][cur[1]] == 1) {
                continue;
            }
            visited[cur[0]][cur[1]] = 1;
            for (int[] d : dir[grid[cur[0]][cur[1]] - 1]) {
                int x = cur[0] + d[0];
                int y = cur[1] + d[1];
                if (x < 0 || x >= m || y < 0 || y >= n) {
                    continue;
                }
                if (visited[x][y] == 1) {
                    continue;
                }
                boolean flag = false;
                for (int[] d2 : dir[grid[x][y] - 1]) {
                    if (d2[0] == -d[0] && d2[1] == -d[1]) {
                        flag = true;
                    }
                }
                if (flag) {
                    queue.offer(new int[]{x, y});
                }
            }
        }
        return false;
