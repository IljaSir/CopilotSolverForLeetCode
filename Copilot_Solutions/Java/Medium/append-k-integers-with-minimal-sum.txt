Synthesizing 10/10 solutions (Duplicates hidden)

=======

        long sum = 0;
        Arrays.sort(nums);
        for (int i = 0; i < nums.length; i++) {
            if (i > 0 && nums[i] == nums[i - 1]) {
                k++;
            } else {
                sum += nums[i];
            }
        }
        return sum + k;

=======

        Arrays.sort(nums);
        long sum = 0;
        for (int i = 0; i < nums.length; i++) {
            if (i > 0 && nums[i] == nums[i - 1]) {
                k++;
            } else {
                sum += nums[i];
            }
        }
        return sum + k;

=======

        long sum = 0;
        int n = nums.length;
        Arrays.sort(nums);
        for (int i = 0; i < n; i++) {
            if (i > 0 && nums[i] == nums[i - 1]) {
                k++;
            } else {
                sum += nums[i];
            }
        }
        return sum + k;

=======

        long sum = 0;
        Arrays.sort(nums);
        for (int i = 0; i < nums.length; i++) {
            if (i == 0 || nums[i] > nums[i - 1] + 1) {
                if (k > nums[i] - (i == 0 ? 0 : nums[i - 1] + 1)) {
                    sum += (long) (nums[i] + nums[i] - (i == 0 ? 0 : nums[i - 1] + 1) + 1) * (nums[i] - (i == 0 ? 0 : nums[i - 1] + 1)) / 2;
                    k -= nums[i] - (i == 0 ? 0 : nums[i - 1] + 1);
                } else {
                    sum += (long) (nums[i] + nums[i] - k + 1) * k / 2;
                    return sum;
                }
            }
        }
        sum += (long) (nums[nums.length - 1] + nums[nums.length - 1] + k + 1) * k / 2;
        return sum;

=======

        long sum = 0;
        for (int i = 0; i < nums.length; i++) {
            sum += nums[i];
        }
        Arrays.sort(nums);
        int i = 0;
        while (k > 0) {
            if (i == nums.length - 1) {
                sum += k;
                break;
            }
            if (nums[i + 1] - nums[i] > 1) {
                int count = Math.min(k, nums[i + 1] - nums[i] - 1);
                sum += count * (nums[i] + 1);
                k -= count;
            }
            i++;
        }
        return sum;

=======

        long sum = 0;
        Arrays.sort(nums);
        int i = 0;
        while (i < nums.length && k > 0) {
            if (i == 0) {
                if (nums[i] > 1) {
                    sum += 1;
                    k--;
                }
            } else {
                if (nums[i] > nums[i - 1] + 1) {
                    sum += nums[i - 1] + 1;
                    k--;
                }
            }
            i++;
        }
        if (k > 0) {
            sum += nums[nums.length - 1] + k;
        }
        return sum;

=======

        if (nums == null || nums.length == 0) {
            return 0;
        }
        Arrays.sort(nums);
        long sum = 0;
        int i = 0;
        while (k > 0) {
            if (i < nums.length - 1 && nums[i] + 1 < nums[i + 1]) {
                sum += nums[i] + 1;
                i++;
                k--;
            } else if (i == nums.length - 1) {
                sum += nums[i] + k;
                k = 0;
            } else {
                i++;
            }
        }
        return sum;

=======

        long result = 0;
        Arrays.sort(nums);
        for (int i = 0; i < nums.length; i++) {
            result += nums[i];
            if (i > 0) {
                int diff = nums[i] - nums[i - 1];
                if (diff > 1) {
                    int n = Math.min(diff - 1, k);
                    k -= n;
                    result += (n * (long)nums[i - 1] + n * (long)(n + 1) / 2);
                }
            }
        }
        result += (k * (long)nums[nums.length - 1] + k * (long)(k + 1) / 2);
        return result;

=======

        Arrays.sort(nums);
        long sum = 0;
        int i = 0;
        while (i < nums.length) {
            if (i == 0 && nums[i] != 1) {
                long count = Math.min(k, nums[i] - 1);
                sum += count * (count + 1) / 2;
                k -= count;
            } else if (i > 0 && nums[i] - nums[i - 1] > 1) {
                long count = Math.min(k, nums[i] - nums[i - 1] - 1);
                sum += (nums[i - 1] + 1L) * count + count * (count + 1) / 2;
                k -= count;
            }
            if (k == 0) {
                break;
            }
            i++;
        }
        return sum + k * (nums[nums.length - 1] + 1L);
    }
}
