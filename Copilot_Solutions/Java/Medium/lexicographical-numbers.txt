Synthesizing 10/10 solutions

=======

        List<Integer> res = new ArrayList<>();
        int cur = 1;
        for (int i = 1; i <= n; i++) {
            res.add(cur);
            if (cur * 10 <= n) {
                cur *= 10;
            } else if (cur % 10 != 9 && cur + 1 <= n) {
                cur++;
            } else {
                while ((cur / 10) % 10 == 9) {
                    cur /= 10;
                }
                cur = cur / 10 + 1;
            }
        }
        return res;

=======

        List<Integer> result = new ArrayList<>();
        int curr = 1;
        for (int i = 1; i <= n; i++) {
            result.add(curr);
            if (curr * 10 <= n) {
                curr *= 10;
            } else if (curr % 10 != 9 && curr + 1 <= n) {
                curr++;
            } else {
                while ((curr / 10) % 10 == 9) {
                    curr /= 10;
                }
                curr = curr / 10 + 1;
            }
        }
        return result;

=======

        List<Integer> res = new ArrayList<>();
        int cur = 1;
        for (int i = 0; i < n; i++) {
            res.add(cur);
            if (cur * 10 <= n) {
                cur *= 10;
            } else {
                if (cur >= n) {
                    cur /= 10;
                }
                cur++;
                while (cur % 10 == 0) {
                    cur /= 10;
                }
            }
        }
        return res;

=======

        List<Integer> result = new ArrayList<>();
        int cur = 1;
        for (int i = 1; i <= n; i++) {
            result.add(cur);
            if (cur * 10 <= n) {
                cur *= 10;
            } else if (cur % 10 != 9 && cur + 1 <= n) {
                cur++;
            } else {
                while ((cur / 10) % 10 == 9) {
                    cur /= 10;
                }
                cur = cur / 10 + 1;
            }
        }
        return result;

=======

        List<Integer> result = new ArrayList<>();
        int current = 1;
        for (int i = 1; i <= n; i++) {
            result.add(current);
            if (current * 10 <= n) {
                current *= 10;
            } else if (current % 10 != 9 && current + 1 <= n) {
                current++;
            } else {
                while ((current / 10) % 10 == 9) {
                    current /= 10;
                }
                current = current / 10 + 1;
            }
        }
        return result;

=======

        List<Integer> result = new ArrayList<Integer>();
        int curr = 1;
        for (int i = 1; i <= n; i++) {
            result.add(curr);
            if (curr * 10 <= n) {
                curr *= 10;
            } else if (curr % 10 != 9 && curr + 1 <= n) {
                curr++;
            } else {
                while ((curr / 10) % 10 == 9) {
                    curr /= 10;
                }
                curr = curr / 10 + 1;
            }
        }
        return result;

=======

        List<Integer> result = new ArrayList<>();
        for (int i = 1; i < 10; i++) {
            dfs(i, n, result);
        }
        return result;
    }
    
    public void dfs(int i, int n, List<Integer> result) {
        if (i > n) return;
        result.add(i);
        for (int j = 0; j < 10; j++) {
            dfs(i * 10 + j, n, result);
        }

=======

        List<Integer> ans = new ArrayList<>();
        for (int i = 1; i < 10; i++) {
            dfs(i, n, ans);
        }
        return ans;
    }
    public void dfs(int cur, int n, List<Integer> ans) {
        if (cur > n) return;
        ans.add(cur);
        for (int i = 0; i < 10; i++) {
            dfs(cur * 10 + i, n, ans);
        }

=======

        List<Integer> result = new ArrayList<>();
        int current = 1;
        for(int i = 0; i < n; i++){
            result.add(current);
            if(current * 10 <= n){
                current = current * 10;
            } else if(current % 10 != 9 && current + 1 <= n){
                current++;
            } else {
                while((current / 10) % 10 == 9){
                    current = current / 10;
                }
                current = current / 10 + 1;
            }
        }
        return result;

=======

        List<Integer> result = new ArrayList<>();
        for (int i = 1; i < 10; i++) {
            if (i <= n) {
                result.add(i);
                dfs(i, n, result);
            }
        }
        return result;
    }

    public void dfs(int i, int n, List<Integer> result) {
        int start = i * 10;
        for (int j = 0; j < 10; j++) {
            int num = start + j;
            if (num <= n) {
                result.add(num);
                dfs(num, n, result);
            }
        }
