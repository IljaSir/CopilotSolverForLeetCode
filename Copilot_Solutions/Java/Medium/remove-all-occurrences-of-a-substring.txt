Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int index = s.indexOf(part);
        while (index != -1) {
            s = s.substring(0, index) + s.substring(index + part.length());
            index = s.indexOf(part);
        }
        return s;

=======

        while (s.contains(part)) {
            s = s.replace(part, "");
        }
        return s;

=======

        while (s.indexOf(part) != -1) {
            s = s.replace(part, "");
        }
        return s;

=======

        int len = part.length();
        while (s.contains(part)) {
            int index = s.indexOf(part);
            s = s.substring(0, index) + s.substring(index + len);
        }
        return s;

=======

        if (s == null || s.length() == 0 || part == null || part.length() == 0) {
            return s;
        }
        int partLen = part.length();
        int sLen = s.length();
        int i = 0;
        while (i <= sLen - partLen) {
            if (s.substring(i, i + partLen).equals(part)) {
                s = s.substring(0, i) + s.substring(i + partLen);
                i = 0;
                sLen = s.length();
            } else {
                i++;
            }
        }
        return s;

=======

        if (s == null || part == null || s.length() < part.length()) {
            return s;
        }
        StringBuilder sb = new StringBuilder(s);
        int i = sb.indexOf(part);
        while (i >= 0) {
            sb.delete(i, i + part.length());
            i = sb.indexOf(part);
        }
        return sb.toString();

=======

        int n = s.length();
        int m = part.length();
        int i = 0;
        while(i < n){
            int j = 0;
            while(j < m && i+j < n && s.charAt(i+j) == part.charAt(j)){
                j++;
            }
            if(j == m){
                s = s.substring(0, i) + s.substring(i+j);
                n = s.length();
                i = 0;
            }else{
                i++;
            }
        }
        return s;

=======

        int i = 0;
        int j = 0;
        int k = 0;
        char[] arr = s.toCharArray();
        char[] brr = part.toCharArray();
        while (i < s.length()) {
            if (arr[i] == brr[j]) {
                i++;
                j++;
            } else {
                arr[k] = arr[i];
                k++;
                i++;
                j = 0;
            }
            if (j == part.length()) {
                k -= j;
                j = 0;
            }
        }
        return new String(arr, 0, k);
