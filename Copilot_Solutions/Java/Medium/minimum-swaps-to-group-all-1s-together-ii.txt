Synthesizing 10/10 solutions

=======

        int n = nums.length;
        int count = 0;
        for (int i = 0; i < n; i++) {
            if (nums[i] == 1) {
                count++;
            }
        }
        int i = 0;
        int j = 0;
        int maxOnes = 0;
        while (j < n) {
            if (nums[j] == 1) {
                maxOnes++;
            }
            if (j - i + 1 < count) {
                j++;
            } else if (j - i + 1 == count) {
                maxOnes = Math.max(maxOnes, j - i + 1);
                j++;
                i++;
            }
        }
        return count - maxOnes;

=======

        int n = nums.length;
        int count = 0;
        for (int i = 0; i < n; i++) {
            if (nums[i] == 1) {
                count++;
            }
        }
        int res = 0;
        for (int i = 0; i < count; i++) {
            if (nums[i] == 0) {
                res++;
            }
        }
        int min = res;
        for (int i = 0, j = count; j < n; i++, j++) {
            if (nums[i] == 0) {
                res--;
            }
            if (nums[j] == 0) {
                res++;
            }
            min = Math.min(min, res);
        }
        return min;

=======

        int n = nums.length;
        int ones = 0;
        for (int i = 0; i < n; i++) {
            if (nums[i] == 1) {
                ones++;
            }
        }
        int maxOnes = 0;
        int i = 0;
        int j = 0;
        int swaps = 0;
        while (j < n) {
            if (nums[j] == 1) {
                swaps++;
            }
            if (j - i + 1 == ones) {
                maxOnes = Math.max(maxOnes, swaps);
                if (nums[i] == 1) {
                    swaps--;
                }
                i++;
            }
            j++;
        }
        return ones - maxOnes;

=======

        int n = nums.length;
        int oneCount = 0;
        for (int i = 0; i < n; i++) {
            if (nums[i] == 1) {
                oneCount++;
            }
        }
        int i = 0;
        int j = 0;
        int max = 0;
        while (j < n) {
            if (nums[j] == 1) {
                max++;
            }
            if (j - i + 1 > oneCount) {
                if (nums[i] == 1) {
                    max--;
                }
                i++;
            }
            j++;
        }
        return oneCount - max;

=======

        int n = nums.length;
        int cnt = 0;
        for (int i = 0; i < n; i++) {
            if (nums[i] == 1) {
                cnt++;
            }
        }
        int max = 0;
        for (int i = 0; i < cnt; i++) {
            if (nums[i] == 1) {
                max++;
            }
        }
        int cur = max;
        for (int i = 1; i < n; i++) {
            if (nums[i - 1] == 1) {
                cur--;
            }
            if (nums[(i + cnt - 1) % n] == 1) {
                cur++;
            }
            max = Math.max(max, cur);
        }
        return cnt - max;

=======

        int n = nums.length;
        int oneCount = 0;
        for (int num : nums) {
            if (num == 1) {
                oneCount++;
            }
        }
        int maxOnes = 0;
        int windowOnes = 0;
        int left = 0;
        int right = 0;
        while (right < n) {
            if (nums[right] == 1) {
                windowOnes++;
            }
            right++;
            if (right - left > oneCount) {
                if (nums[left] == 1) {
                    windowOnes--;
                }
                left++;
            }
            maxOnes = Math.max(maxOnes, windowOnes);
        }
        return oneCount - maxOnes;

=======

        int n = nums.length;
        int count = 0;
        for (int num : nums) {
            if (num == 1) {
                count++;
            }
        }
        int max = 0;
        for (int i = 0; i < count; i++) {
            if (nums[i] == 1) {
                max++;
            }
        }
        int res = count - max;
        for (int i = count; i < n; i++) {
            if (nums[i - count] == 1) {
                max--;
            }
            if (nums[i] == 1) {
                max++;
            }
            res = Math.min(res, count - max);
        }
        return res;

=======

        int n = nums.length;
        int count = 0;
        for (int num : nums) {
            if (num == 1) {
                count++;
            }
        }
        int maxCount = 0;
        int left = 0;
        int right = 0;
        while (right < n) {
            if (nums[right] == 1) {
                maxCount++;
            }
            if (right - left + 1 > count) {
                if (nums[left] == 1) {
                    maxCount--;
                }
                left++;
            }
            right++;
        }
        return count - maxCount;

=======

        int len = nums.length;
        int ones = 0;
        for (int i = 0; i < len; i++) {
            ones += nums[i];
        }
        int maxOnes = 0;
        int count = 0;
        for (int i = 0; i < len; i++) {
            count += nums[i];
            if (i >= ones) {
                count -= nums[i - ones];
            }
            maxOnes = Math.max(count, maxOnes);
        }
        return ones - maxOnes;

=======

        int n = nums.length;
        int ones = 0;
        for (int num : nums) if (num == 1) ones++;
        int zeros = 0;
        int i = 0;
        for (; i < ones; i++) if (nums[i] == 0) zeros++;
        int min = zeros;
        for (; i < n; i++) {
            if (nums[i] == 0) zeros++;
            if (nums[i - ones] == 0) zeros--;
            min = Math.min(min, zeros);
        }
        return min;
