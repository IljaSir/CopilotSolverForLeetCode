Synthesizing 10/10 solutions

=======

        long res = 0;
        for (int i = 1; i < prices.length; i++) {
            if (prices[i] < prices[i - 1]) {
                res += prices[i - 1] - prices[i];
            }
        }
        return res;

=======

        long result = 0;
        int count = 0;
        for (int i = 1; i < prices.length; i++) {
            if (prices[i] == prices[i - 1] + 1) {
                count++;
            } else {
                count = 0;
            }
            result += count;
        }
        return result;

=======

        long count = 0;
        for (int i = 0; i < prices.length; i++) {
            int j = i + 1;
            while (j < prices.length && prices[j] == prices[j - 1] - 1) {
                j++;
            }
            if (j > i + 1) {
                count += (long) (j - i) * (j - i - 1) / 2;
                i = j - 1;
            }
        }
        return count;

=======

        long periods = 0;
        int count = 0;
        for (int i = 1; i < prices.length; i++) {
            if (prices[i] == prices[i - 1] - 1) {
                count++;
            } else {
                count = 0;
            }
            periods += count;
        }
        return periods;

=======

        long periods = 0;
        int count = 0;
        for (int i = 1; i < prices.length; i++) {
            if (prices[i] == prices[i - 1] + 1) {
                count++;
            } else {
                periods += count * (count + 1L) / 2;
                count = 0;
            }
        }
        periods += count * (count + 1L) / 2;
        return periods;

=======

        long periods = 0;
        int count = 0;
        for (int i = 1; i < prices.length; i++) {
            if (prices[i - 1] - prices[i] == 1) {
                count++;
            } else {
                periods += (count * (count + 1)) / 2;
                count = 0;
            }
        }
        periods += (count * (count + 1)) / 2;
        return periods;

=======

        long res = 0;
        for (int i = 1; i < prices.length; i++) {
            if (prices[i] == prices[i - 1] + 1) {
                res += i;
            }
        }
        return res;

=======

        long periods = 0;
        int n = prices.length;
        for (int i = 0; i < n; i++) {
            int j = i + 1;
            while (j < n && prices[j] == prices[j - 1] - 1) {
                j++;
            }
            periods += (j - i) * (j - i - 1) / 2;
            i = j - 1;
        }
        return periods;

=======

        int n = prices.length;
        long ans = n;
        int i = 0;
        while (i < n) {
            int j = i + 1;
            while (j < n && prices[j] == prices[j - 1] - 1) {
                ++j;
            }
            if (j - i > 1) {
                ans += 1L * (j - i) * (j - i - 1) / 2;
            }
            i = j;
        }
        return ans;

=======

        long count = 0;
        int n = prices.length;
        int[] dp = new int[n];
        for (int i=1;i<n;i++) {
            if (prices[i] == prices[i-1] + 1) {
                dp[i] = dp[i-1] + 1;
            } else {
                dp[i] = 0;
            }
            count += dp[i];
        }
        return count;
