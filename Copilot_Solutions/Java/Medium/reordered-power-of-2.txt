Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int[] count = count(n);
        for (int i = 0; i < 31; i++) {
            if (Arrays.equals(count, count(1 << i))) {
                return true;
            }
        }
        return false;
    }

    public int[] count(int n) {
        int[] ans = new int[10];
        while (n > 0) {
            ans[n % 10]++;
            n /= 10;
        }
        return ans;

=======

        int[] count = new int[10];
        while (n > 0) {
            count[n % 10]++;
            n /= 10;
        }
        for (int i = 0; i < 31; i++) {
            int[] c = new int[10];
            int m = 1 << i;
            while (m > 0) {
                c[m % 10]++;
                m /= 10;
            }
            if (Arrays.equals(count, c)) {
                return true;
            }
        }
        return false;

=======

        int[] count = new int[10];
        while (n > 0) {
            count[n % 10]++;
            n /= 10;
        }
        for (int i = 0; i < 31; i++) {
            int[] count2 = new int[10];
            int m = 1 << i;
            while (m > 0) {
                count2[m % 10]++;
                m /= 10;
            }
            if (Arrays.equals(count, count2)) {
                return true;
            }
        }
        return false;

=======

        int[] count = new int[10];
        while (n > 0) {
            count[n % 10]++;
            n /= 10;
        }
        for (int i = 0; i < 31; i++) {
            int[] c = count.clone();
            for (char ch : Integer.toString(1 << i).toCharArray()) {
                c[ch - '0']--;
            }
            boolean ok = true;
            for (int j = 0; j < 10; j++) {
                if (c[j] != 0) {
                    ok = false;
                    break;
                }
            }
            if (ok) {
                return true;
            }
        }
        return false;

=======

        int[] count = count(n);
        for (int i = 0; i < 31; ++i) {
            if (Arrays.equals(count, count(1 << i))) {
                return true;
            }
        }
        return false;
    }

    public int[] count(int n) {
        int[] ans = new int[10];
        while (n > 0) {
            ans[n % 10]++;
            n /= 10;
        }
        return ans;

=======

        int[] count = count(n);
        for (int i = 0; i < 31; i++) {
            if (Arrays.equals(count, count(1 << i))) return true;
        }
        return false;
    }
    
    private int[] count(int n) {
        int[] count = new int[10];
        while (n > 0) {
            count[n % 10]++;
            n /= 10;
        }
        return count;

=======

        String s = Integer.toString(n);
        int[] count = new int[10];
        for (char c : s.toCharArray()) {
            count[c - '0']++;
        }
        for (int i = 0; i < 31; i++) {
            if (match(count, 1 << i)) {
                return true;
            }
        }
        return false;
    }
    public boolean match(int[] count, int n) {
        int[] cnt = new int[10];
        while (n > 0) {
            cnt[n % 10]++;
            n /= 10;
        }
        for (int i = 0; i < 10; i++) {
            if (cnt[i] != count[i]) {
                return false;
            }
        }
        return true;

=======

        String ns = String.valueOf(n);
        int[] digits = new int[10];
        for (int i = 0; i < ns.length(); i++) {
            digits[ns.charAt(i) - '0']++;
        }
        for (int i = 0; i < 31; i++) {
            int[] digits2 = new int[10];
            String ns2 = String.valueOf(1 << i);
            for (int j = 0; j < ns2.length(); j++) {
                digits2[ns2.charAt(j) - '0']++;
            }
            if (Arrays.equals(digits, digits2)) {
                return true;
            }
        }
        return false;

=======

        int[] digits = new int[10];
        int n1 = n;
        while (n1 > 0) {
            digits[n1 % 10]++;
            n1 /= 10;
        }
        for (int i = 0; i < 31; i++) {
            int[] digits1 = new int[10];
            int n2 = 1 << i;
            while (n2 > 0) {
                digits1[n2 % 10]++;
                n2 /= 10;
            }
            if (Arrays.equals(digits, digits1)) {
                return true;
            }
        }
        return false;
