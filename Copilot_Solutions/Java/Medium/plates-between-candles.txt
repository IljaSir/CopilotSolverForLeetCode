Synthesizing 10/10 solutions

=======

        int[] res = new int[queries.length];
        for (int i = 0; i < queries.length; i++) {
            int left = queries[i][0];
            int right = queries[i][1];
            int count = 0;
            for (int j = left; j <= right; j++) {
                if (s.charAt(j) == '*') {
                    count++;
                }
            }
            res[i] = count;
        }
        return res;

=======

        int[] result = new int[queries.length];
        for (int i = 0; i < queries.length; i++) {
            result[i] = countPlates(s, queries[i][0], queries[i][1]);
        }
        return result;
    }
    
    private int countPlates(String s, int left, int right) {
        int plates = 0;
        boolean leftCandle = false;
        for (int i = left; i <= right; i++) {
            if (s.charAt(i) == '*') {
                if (leftCandle) {
                    plates++;
                }
            } else {
                leftCandle = true;
            }
        }
        return plates;

=======

        int[] plates = new int[s.length()];
        int[] candles = new int[s.length()];
        for (int i = 0; i < s.length(); i++) {
            if (i > 0) {
                plates[i] = plates[i - 1];
                candles[i] = candles[i - 1];
            }
            if (s.charAt(i) == '*') {
                plates[i]++;
            } else {
                candles[i]++;
            }
        }
        int[] res = new int[queries.length];
        for (int i = 0; i < queries.length; i++) {
            int[] query = queries[i];
            int left = query[0];
            int right = query[1];
            int platesCount = plates[right];
            if (left > 0) {
                platesCount -= plates[left - 1];
            }
            int candlesCount = candles[right];
            if (left > 0) {
                candlesCount -= candles[left - 1];
            }
            res[i] = platesCount - candlesCount;
        }
        return res;

=======

        int[] result = new int[queries.length];
        int[] candles = new int[s.length()];
        int count = 0;
        for (int i = 0; i < s.length(); i++) {
            if (s.charAt(i) == '|') {
                candles[i] = count++;
            }
        }
        for (int i = 0; i < queries.length; i++) {
            int[] query = queries[i];
            result[i] = candles[query[1]] - candles[query[0]] - 1;
        }
        return result;

=======

        int[] answer = new int[queries.length];
        int[] candles = new int[s.length()];
        int count = 0;
        for(int i = 0; i < s.length(); i++) {
            if(s.charAt(i) == '|') {
                count++;
            }
            candles[i] = count;
        }
        for(int i = 0; i < queries.length; i++) {
            answer[i] = candles[queries[i][1]] - candles[queries[i][0]] - 2;
        }
        return answer;

=======

        int[] answer = new int[queries.length];
        int[] candles = new int[s.length()];
        int[] plates = new int[s.length()];
        int count = 0;
        for(int i = 0; i < s.length(); i++) {
            if(s.charAt(i) == '|') {
                count++;
            }
            candles[i] = count;
        }
        count = 0;
        for(int i = s.length() - 1; i >= 0; i--) {
            if(s.charAt(i) == '*') {
                count++;
            }
            plates[i] = count;
        }
        for(int i = 0; i < queries.length; i++) {
            int left = queries[i][0];
            int right = queries[i][1];
            if(left == right) {
                answer[i] = 0;
            } else {
                answer[i] = plates[left] + plates[right] - candles[right] + candles[left];
            }
        }
        return answer;

=======

        int[] candles = new int[s.length()];
        int[] plates = new int[s.length()];
        int[] result = new int[queries.length];
        int count = 0;
        for (int i = 0; i < s.length(); i++) {
            if (s.charAt(i) == '*') {
                count++;
            }
            plates[i] = count;
        }
        count = 0;
        for (int i = s.length() - 1; i >= 0; i--) {
            if (s.charAt(i) == '*') {
                count++;
            }
            candles[i] = count;
        }
        for (int i = 0; i < queries.length; i++) {
            result[i] = plates[queries[i][1]] - plates[queries[i][0]] - (candles[queries[i][0]] + candles[queries[i][1]] - 2);
        }
        return result;

=======

        int[] result = new int[queries.length];
        int[] plates = new int[s.length()];
        int[] candles = new int[s.length()];
        int plate = 0;
        int candle = 0;
        for(int i = 0; i < s.length(); i++){
            if(s.charAt(i) == '*'){
                plate++;
            }
            plates[i] = plate;
        }
        for(int i = s.length()-1; i >= 0; i--){
            if(s.charAt(i) == '|'){
                candle++;
            }
            candles[i] = candle;
        }
        for(int i = 0; i < queries.length; i++){
            result[i] = plates[queries[i][1]] - plates[queries[i][0]] - candles[queries[i][1]] + candles[queries[i][0]];
        }
        return result;

=======

        int[] candles = new int[s.length()];
        int[] plates = new int[s.length()];
        int[] ans = new int[queries.length];
        int count = 0;
        for(int i = 0; i < s.length(); i++){
            if(s.charAt(i) == '|'){
                count++;
            }
            candles[i] = count;
        }
        count = 0;
        for(int i = s.length()-1; i >= 0; i--){
            if(s.charAt(i) == '|'){
                count++;
            }
            plates[i] = count;
        }
        for(int i = 0; i < queries.length; i++){
            int left = queries[i][0];
            int right = queries[i][1];
            int leftCandle = candles[left];
            int rightCandle = plates[right];
            ans[i] = Math.max(0, leftCandle + rightCandle - 2);
        }
        return ans;

=======

        int n = s.length();
        int[] plates = new int[n];
        int[] candles = new int[n];
        int[] ans = new int[queries.length];
        int sum = 0;
        for (int i = 0; i < n; i++) {
            if (s.charAt(i) == '*') {
                sum++;
            }
            plates[i] = sum;
        }
        sum = 0;
        for (int i = n - 1; i >= 0; i--) {
            if (s.charAt(i) == '|') {
                sum++;
            }
            candles[i] = sum;
        }
        for (int i = 0; i < queries.length; i++) {
            int[] q = queries[i];
            int left = q[0];
            int right = q[1];
            int p = plates[right] - (left == 0 ? 0 : plates[left - 1]);
            int c = candles[left] - (right == n - 1 ? 0 : candles[right + 1]);
            ans[i] = Math.max(0, p - c);
        }
        return ans;
