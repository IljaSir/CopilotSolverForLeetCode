Synthesizing 10/10 solutions

=======

        int[] result = new int[nums.length];
        for (int i = 0; i < nums.length; i++) {
            result[i] = map(mapping, nums[i]);
        }
        Arrays.sort(result);
        return result;
    }
    public int map(int[] mapping, int num) {
        int result = 0;
        while (num > 0) {
            result = result * 10 + mapping[num % 10];
            num /= 10;
        }
        return result;

=======

        int[] res = new int[nums.length];
        for (int i = 0; i < nums.length; i++) {
            res[i] = map(mapping, nums[i]);
        }
        Arrays.sort(res);
        return res;
    }
    private int map(int[] mapping, int num) {
        int res = 0;
        while (num > 0) {
            res = res * 10 + mapping[num % 10];
            num /= 10;
        }
        return res;

=======

        int[] result = new int[nums.length];
        for (int i = 0; i < nums.length; i++) {
            result[i] = getMappedValue(mapping, nums[i]);
        }
        Arrays.sort(result);
        return result;
    }
    private int getMappedValue(int[] mapping, int num) {
        int result = 0;
        int base = 1;
        while (num > 0) {
            int digit = num % 10;
            num /= 10;
            result += base * mapping[digit];
            base *= 10;
        }
        return result;

=======

        int[] res = new int[nums.length];
        for (int i = 0; i < nums.length; i++) {
            res[i] = getMappedValue(mapping, nums[i]);
        }
        Arrays.sort(res);
        return res;
    }
    
    private int getMappedValue(int[] mapping, int num) {
        int res = 0;
        while (num > 0) {
            res = res * 10 + mapping[num % 10];
            num /= 10;
        }
        return res;

=======

        int[] sorted = new int[nums.length];
        for (int i = 0; i < nums.length; i++) {
            int num = nums[i];
            int newNum = 0;
            while (num > 0) {
                newNum = newNum * 10 + mapping[num % 10];
                num /= 10;
            }
            sorted[i] = newNum;
        }
        Arrays.sort(sorted);
        return sorted;

=======

        int[] result = new int[nums.length];
        for(int i = 0; i < nums.length; i++) {
            int num = nums[i];
            int mapped = 0;
            while(num > 0) {
                mapped = mapped * 10 + mapping[num % 10];
                num /= 10;
            }
            result[i] = mapped;
        }
        Arrays.sort(result);
        return result;

=======

        int[] result = new int[nums.length];
        int[] temp = new int[10];
        for(int i = 0; i < mapping.length; i++){
            temp[mapping[i]] = i;
        }
        for(int i = 0; i < nums.length; i++){
            int num = nums[i];
            int tempNum = 0;
            int count = 0;
            while(num > 0){
                tempNum = (tempNum * 10) + temp[num % 10];
                num /= 10;
                count++;
            }
            while(count > 0){
                num = (num * 10) + (tempNum % 10);
                tempNum /= 10;
                count--;
            }
            result[i] = num;
        }
        Arrays.sort(result);
        return result;

=======

        int[] sorted = new int[nums.length];
        for(int i = 0; i < nums.length; i++) {
            sorted[i] = mapNum(nums[i], mapping);
        }
        Arrays.sort(sorted);
        return sorted;
    }
    
    private int mapNum(int num, int[] mapping) {
        int mapped = 0;
        int count = 0;
        while(num > 0) {
            int digit = num % 10;
            num /= 10;
            mapped += (int) Math.pow(10, count) * mapping[digit];
            count++;
        }
        return mapped;

=======

        int[] sorted = new int[nums.length];
        for(int i = 0; i < nums.length; i++) {
            int num = nums[i];
            int j = 0;
            int sortedNum = 0;
            while(num != 0) {
                int digit = num % 10;
                sortedNum += mapping[digit] * Math.pow(10, j);
                j++;
                num /= 10;
            }
            sorted[i] = sortedNum;
        }
        Arrays.sort(sorted);
        return sorted;
    }
}

=======

        int[] sorted = new int[nums.length];
        int[] sortedIndex = new int[nums.length];
        int[] sortedValue = new int[nums.length];
        for(int i = 0; i < nums.length; i++){
            int j = nums[i];
            int k = 0;
            while(j > 0){
                k += mapping[j % 10];
                j /= 10;
                if(j > 0){
                    k *= 10;
                }
            }
            sortedValue[i] = k;
            sortedIndex[i] = i;
        }
        for(int i = 0; i < sorted.length; i++){
            for(int j = i; j < sorted.length; j++){
                if(sortedValue[i] > sortedValue[j]){
                    int temp = sortedValue[i];
                    sortedValue[i] = sortedValue[j];
                    sortedValue[j] = temp;
                    
                    temp = sortedIndex[i];
                    sortedIndex[i] = sortedIndex[j];
                    sortedIndex[j] = temp;
                }
            }
        }
        for(int i = 0; i < sorted.length; i++){
            sorted[i] = nums[sortedIndex[i]];
        }
        return sorted;
