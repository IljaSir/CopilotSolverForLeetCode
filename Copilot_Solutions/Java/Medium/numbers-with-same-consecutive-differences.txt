Synthesizing 10/10 solutions

=======

        if (n == 1) {
            return new int[]{0,1,2,3,4,5,6,7,8,9};
        }
        List<Integer> res = new ArrayList<>();
        for (int i = 1; i < 10; i++) {
            dfs(i, n-1, k, res);
        }
        return res.stream().mapToInt(i->i).toArray();
    }
    private void dfs(int num, int n, int k, List<Integer> res) {
        if (n == 0) {
            res.add(num);
            return;
        }
        int lastDigit = num % 10;
        int nextDigit = lastDigit + k;
        if (nextDigit < 10) {
            dfs(num * 10 + nextDigit, n-1, k, res);
        }
        if (k != 0 && lastDigit - k >= 0) {
            dfs(num * 10 + lastDigit - k, n-1, k, res);
        }

=======

        if (n == 1) return new int[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
        List<Integer> res = new ArrayList<>();
        for (int i = 1; i <= 9; i++) {
            dfs(res, n - 1, k, i);
        }
        return res.stream().mapToInt(i -> i).toArray();
    }

    private void dfs(List<Integer> res, int n, int k, int num) {
        if (n == 0) {
            res.add(num);
            return;
        }
        int lastDigit = num % 10;
        if (lastDigit - k >= 0) dfs(res, n - 1, k, num * 10 + lastDigit - k);
        if (k != 0 && lastDigit + k <= 9) dfs(res, n - 1, k, num * 10 + lastDigit + k);

=======

        if (n == 1) {
            return new int[]{0,1,2,3,4,5,6,7,8,9};
        }
        List<Integer> list = new ArrayList<>();
        for (int i = 1; i <= 9; i++) {
            dfs(i, n - 1, k, list);
        }
        int[] ans = new int[list.size()];
        for (int i = 0; i < list.size(); i++) {
            ans[i] = list.get(i);
        }
        return ans;
    }
    
    private void dfs(int num, int n, int k, List<Integer> list) {
        if (n == 0) {
            list.add(num);
            return;
        }
        int lastDigit = num % 10;
        if (lastDigit + k <= 9) {
            dfs(num * 10 + lastDigit + k, n - 1, k, list);
        }
        if (lastDigit - k >= 0 && k != 0) {
            dfs(num * 10 + lastDigit - k, n - 1, k, list);
        }

=======

        if (n == 1) return new int[]{0,1,2,3,4,5,6,7,8,9};
        List<Integer> res = new ArrayList<>();
        for (int i = 1; i <= 9; i++) {
            dfs(i, n, k, res);
        }
        return res.stream().mapToInt(i -> i).toArray();
    }
    
    private void dfs(int num, int n, int k, List<Integer> res) {
        if (n == 0) {
            res.add(num);
            return;
        }
        int lastDigit = num % 10;
        if (lastDigit - k >= 0) {
            dfs(num * 10 + (lastDigit - k), n - 1, k, res);
        }
        if (lastDigit + k <= 9 && k != 0) {
            dfs(num * 10 + (lastDigit + k), n - 1, k, res);
        }

=======

        if (n == 1) {
            return new int[]{0,1,2,3,4,5,6,7,8,9};
        }
        List<Integer> ans = new ArrayList<>();
        for (int i = 1; i <= 9; i++) {
            dfs(ans, i, n, k);
        }
        return ans.stream().mapToInt(Integer::valueOf).toArray();
    }
    private void dfs(List<Integer> ans, int num, int n, int k) {
        if (n == 0) {
            ans.add(num);
            return;
        }
        int lastDigit = num % 10;
        if (lastDigit - k >= 0) {
            dfs(ans, num * 10 + lastDigit - k, n - 1, k);
        }
        if (lastDigit + k <= 9 && k != 0) {
            dfs(ans, num * 10 + lastDigit + k, n - 1, k);
        }

=======

        if (n == 1) {
            return new int[] {0,1,2,3,4,5,6,7,8,9};
        }
        List<Integer> result = new ArrayList<>();
        for (int i = 1; i <= 9; i++) {
            dfs(n - 1, k, i, result);
        }
        return result.stream().mapToInt(i->i).toArray();
    }
    
    private void dfs(int n, int k, int num, List<Integer> result) {
        if (n == 0) {
            result.add(num);
            return;
        }
        int lastDigit = num % 10;
        int a = lastDigit + k;
        int b = lastDigit - k;
        if (a < 10) {
            dfs(n - 1, k, num * 10 + a, result);
        }
        if (b >= 0 && b != a) {
            dfs(n - 1, k, num * 10 + b, result);
        }

=======

        List<Integer> res = new ArrayList<>();
        for (int i = 1; i <= 9; i++) {
            dfs(res, i, n, k);
        }
        return res.stream().mapToInt(i->i).toArray();
    }
    
    private void dfs(List<Integer> res, int num, int n, int k) {
        if (n == 0) {
            res.add(num);
            return;
        }
        int tail = num % 10;
        if (tail - k >= 0) {
            dfs(res, num * 10 + tail - k, n - 1, k);
        }
        if (tail + k <= 9 && k != 0) {
            dfs(res, num * 10 + tail + k, n - 1, k);
        }

=======

        List<Integer> res = new ArrayList();
        for (int i = 1; i < 10; i++) {
            dfs(res, n - 1, i, k);
        }
        return res.stream().mapToInt(i->i).toArray();
    }

    private void dfs(List<Integer> res, int n, int cur, int k) {
        if (n == 0) {
            res.add(cur);
            return;
        }
        int last = cur % 10;
        if (last + k < 10) {
            dfs(res, n - 1, cur * 10 + last + k, k);
        }
        if (k != 0 && last - k >= 0) {
            dfs(res, n - 1, cur * 10 + last - k, k);
        }

=======

        List<Integer> res = new ArrayList<>();
        for (int i = 1; i <= 9; ++i) {
            dfs(res, n, k, i, i);
        }
        if (n == 1) {
            res.add(0);
        }
        return res.stream().mapToInt(Integer::valueOf).toArray();
    }
    
    private void dfs(List<Integer> res, int n, int k, int num, int last) {
        if (n == 0) {
            res.add(num);
            return;
        }
        int next = last + k;
        if (next <= 9) {
            dfs(res, n - 1, k, num * 10 + next, next);
        }
        next = last - k;
        if (next >= 0 && k != 0) {
            dfs(res, n - 1, k, num * 10 + next, next);
        }

=======

        int[] ans = new int[0];
        for (int i = 1; i < 10; i++) {
            ans = append(ans, dfs(n - 1, k, i));
        }
        return ans;
    }

    public int[] dfs(int n, int k, int num) {
        if (n == 0) {
            return new int[]{num};
        }
        int[] ans = new int[0];
        int tail = num % 10;
        if (tail - k >= 0) {
            ans = append(ans, dfs(n - 1, k, num * 10 + tail - k));
        }
        if (tail + k < 10 && k > 0) {
            ans = append(ans, dfs(n - 1, k, num * 10 + tail + k));
        }
        return ans;
    }

    public int[] append(int[] arr, int[] arr2) {
        int[] ans = new int[arr.length + arr2.length];
        System.arraycopy(arr, 0, ans, 0, arr.length);
        System.arraycopy(arr2, 0, ans, arr.length, arr2.length);
        return ans;
