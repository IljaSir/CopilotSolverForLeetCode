Synthesizing 10/10 solutions

=======

        int n = nums1.length;
        long[] dp = new long[k + 1];
        Arrays.fill(dp, Long.MIN_VALUE);
        dp[0] = 0;
        for (int i = 0; i < n; i++) {
            int[] nums = nums1[i] > nums2[i] ? nums1 : nums2;
            int[] other = nums1[i] > nums2[i] ? nums2 : nums1;
            long[] cur = new long[k + 1];
            Arrays.fill(cur, Long.MIN_VALUE);
            for (int j = 0; j <= k; j++) {
                if (j > 0 && nums[i] >= other[i]) {
                    cur[j] = Math.max(cur[j], dp[j - 1] + nums[i]);
                }
                if (j < k) {
                    cur[j] = Math.max(cur[j], dp[j] + other[i]);
                }
            }
            dp = cur;
        }
        long ans = 0;
        for (long x : dp) {
            ans = Math.max(ans, x);
        }
        return ans;

=======

        int n = nums1.length;
        long[] dp = new long[k + 1];
        Arrays.fill(dp, Long.MIN_VALUE / 2);
        dp[0] = 0;
        for (int i = 0; i < n; i++) {
            int[] nums = {nums1[i], nums2[i]};
            Arrays.sort(nums);
            for (int j = k; j >= 0; j--) {
                if (j > 0) {
                    dp[j] = Math.max(dp[j], dp[j - 1] + (long) nums[0]);
                }
                if (j >= i + 1) {
                    dp[j] = Math.max(dp[j], dp[j - i - 1] + (long) nums[1]);
                }
            }
        }
        return dp[k];

=======

        int n = nums1.length;
        int[] pre1 = new int[n + 1];
        int[] pre2 = new int[n + 1];
        for (int i = 0; i < n; i++) {
            pre1[i + 1] = Math.max(pre1[i], nums1[i]);
            pre2[i + 1] = Math.max(pre2[i], nums2[i]);
        }
        long ans = 0;
        for (int i = 0; i <= k; i++) {
            ans = Math.max(ans, 1L * pre1[i] * pre2[k - i]);
        }
        return ans;

=======

        int n = nums1.length;
        long[] dp = new long[k+1];
        Arrays.fill(dp, Long.MIN_VALUE);
        dp[0] = 0;
        for (int i = 0; i < n; ++i) {
            long[] dp2 = new long[k+1];
            Arrays.fill(dp2, Long.MIN_VALUE);
            for (int j = 0; j <= k; ++j) {
                if (j > 0 && i < n - 1) dp2[j] = Math.max(dp2[j], dp[j-1] + nums1[i]);
                if (j < k) dp2[j] = Math.max(dp2[j], dp[j] + nums2[i]);
            }
            dp = dp2;
        }
        return dp[k];

=======

        int n = nums1.length;
        long[] dp = new long[k+1];
        Arrays.fill(dp, Long.MIN_VALUE);
        dp[0] = 0;
        for (int i = 0; i < n; i++) {
            long[] next = new long[k+1];
            Arrays.fill(next, Long.MIN_VALUE);
            for (int j = 0; j <= k; j++) {
                if (j > 0 && nums1[i] < nums2[i]) {
                    next[j] = Math.max(next[j], dp[j-1] + nums1[i]);
                }
                if (k-j <= n-i-1) {
                    next[j] = Math.max(next[j], dp[j] + nums2[i]);
                }
            }
            dp = next;
        }
        long ans = Long.MIN_VALUE;
        for (long x: dp) {
            ans = Math.max(ans, x);
        }
        return ans;

=======

        long[][] dp = new long[k + 1][k + 1];
        for (int i = 0; i <= k; i++) {
            Arrays.fill(dp[i], -1);
        }
        dp[0][0] = 0;
        for (int i = 0; i <= k; i++) {
            for (int j = 0; j <= k; j++) {
                if (i + j > k) {
                    continue;
                }
                if (i > 0) {
                    dp[i][j] = Math.max(dp[i][j], dp[i - 1][j] + nums1[i + j - 1]);
                }
                if (j > 0) {
                    dp[i][j] = Math.max(dp[i][j], dp[i][j - 1] + nums2[i + j - 1]);
                }
            }
        }
        return dp[k][k];

=======

        long max = 0;
        int n = nums1.length;
        for (int i = 0; i <= k; i++) {
            int j = k - i;
            if (i > n || j > n) continue;
            long sum1 = 0;
            long sum2 = 0;
            for (int a = 0; a < i; a++) {
                sum1 += nums1[a];
            }
            for (int b = 0; b < j; b++) {
                sum2 += nums2[b];
            }
            max = Math.max(max, sum1 * Math.min(nums1[i - 1], nums2[j - 1]));
            for (int a = i, b = j; a < n && b < n; a++, b++) {
                sum1 += nums1[a];
                sum2 += nums2[b];
                max = Math.max(max, sum1 * Math.min(nums1[a], nums2[b]));
            }
        }
        return max;

=======

        int[] min = nums1;
        int[] max = nums2;
        if (nums1.length < nums2.length) {
            min = nums2;
            max = nums1;
        }
        int n = min.length;
        int m = max.length;
        long[] dp = new long[n + 1];
        for (int i = 1; i <= n; i++) {
            dp[i] = dp[i - 1] + min[i - 1];
        }
        long ans = 0;
        for (int i = 0; i <= k; i++) {
            int j = k - i;
            if (j > m) {
                continue;
            }
            long sum = dp[i];
            if (j > 0) {
                sum += max[j - 1];
            }
            ans = Math.max(ans, sum * (i + j));
        }
        return ans;

=======

        int n = nums1.length;
        long ans = 0;
        for (int i = 0; i <= k; i++) {
            long tmp = 0;
            int j = k - i;
            if (j > n) {
                break;
            }
            int[] a = new int[i];
            int[] b = new int[j];
            for (int p = 0; p < i; p++) {
                a[p] = nums1[p];
            }
            for (int p = 0; p < j; p++) {
                b[p] = nums2[p];
            }
            Arrays.sort(a);
            Arrays.sort(b);
            for (int p = 0; p < j; p++) {
                if (p < i) {
                    tmp += a[p];
                }
                tmp += b[j - p - 1];
            }
            ans = Math.max(ans, tmp);
        }
        return ans;

=======

        int n = nums1.length;
        long[] sorted = new long[n];
        for (int i = 0; i < n; ++i) {
            sorted[i] = 1L * nums1[i] * nums2[i] + 1L * nums2[i] * 100000;
        }
        Arrays.sort(sorted);
        long res = 0;
        for (int i = 0; i <= k; ++i) {
            int j = k - i;
            if (i <= n && j <= n) {
                res = Math.max(res, sum(sorted, 0, i) + sum(sorted, n - j, n));
            }
        }
        return res;
    }
    long sum(long[] nums, int l, int r) {
        long res = 0;
        for (int i = l; i < r; ++i) {
            res += nums[i] / 100000;
        }
        return res;
