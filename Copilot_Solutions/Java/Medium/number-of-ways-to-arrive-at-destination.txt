Synthesizing 10/10 solutions

=======

        int[][] graph = new int[n][n];
        for (int[] road : roads) {
            graph[road[0]][road[1]] = road[2];
            graph[road[1]][road[0]] = road[2];
        }
        int[] dist = new int[n];
        int[] ways = new int[n];
        Arrays.fill(dist, Integer.MAX_VALUE);
        Arrays.fill(ways, 0);
        dist[0] = 0;
        ways[0] = 1;
        PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> Integer.compare(a[0], b[0]));
        pq.offer(new int[]{0, 0});
        while (!pq.isEmpty()) {
            int[] cur = pq.poll();
            int d = cur[0];
            int u = cur[1];
            if (d > dist[u]) {
                continue;
            }
            for (int v = 0; v < n; ++v) {
                if (graph[u][v] > 0) {
                    int d2 = d + graph[u][v];
                    if (d2 < dist[v]) {
                        dist[v] = d2;
                        ways[v] = ways[u];
                        pq.offer(new int[]{d2, v});
                    } else if (d2 == dist[v]) {
                        ways[v] = (ways[v] + ways[u]) % 1000000007;
                    }
                }
            }
        }
        return ways[n - 1];

=======

        int[][] adj = new int[n][n];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                adj[i][j] = i == j ? 0 : Integer.MAX_VALUE;
            }
        }
        for (int[] r : roads) {
            adj[r[0]][r[1]] = r[2];
            adj[r[1]][r[0]] = r[2];
        }
        int[] dist = new int[n];
        Arrays.fill(dist, Integer.MAX_VALUE);
        dist[0] = 0;
        int[] ways = new int[n];
        ways[0] = 1;
        boolean[] visited = new boolean[n];
        for (int i = 0; i < n; i++) {
            int u = -1;
            for (int v = 0; v < n; v++) {
                if (!visited[v] && (u == -1 || dist[v] < dist[u])) {
                    u = v;
                }
            }
            visited[u] = true;
            for (int v = 0; v < n; v++) {
                if (adj[u][v] != Integer.MAX_VALUE) {
                    if (dist[v] > dist[u] + adj[u][v]) {
                        dist[v] = dist[u] + adj[u][v];
                        ways[v] = ways[u];
                        ways[v] %= 1_000_000_007;
                    } else if (dist[v] == dist[u] + adj[u][v]) {
                        ways[v] += ways[u];
                        ways[v] %= 1_000_000_007;
                    }
                }
            }
        }
        return ways[n - 1];

=======

        int[][] g = new int[n][n];
        for (int i = 0; i < n; i++) {
            Arrays.fill(g[i], Integer.MAX_VALUE / 2);
            g[i][i] = 0;
        }
        for (int[] r : roads) {
            g[r[0]][r[1]] = r[2];
            g[r[1]][r[0]] = r[2];
        }
        for (int k = 0; k < n; k++) {
            for (int i = 0; i < n; i++) {
                for (int j = 0; j < n; j++) {
                    g[i][j] = Math.min(g[i][j], g[i][k] + g[k][j]);
                }
            }
        }
        int[] dp = new int[n];
        int[] cnt = new int[n];
        Arrays.fill(cnt, 1);
        Arrays.fill(dp, Integer.MAX_VALUE / 2);
        dp[0] = 0;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (g[i][j] != Integer.MAX_VALUE / 2) {
                    if (dp[j] > dp[i] + g[i][j]) {
                        dp[j] = dp[i] + g[i][j];
                        cnt[j] = cnt[i];
                    } else if (dp[j] == dp[i] + g[i][j]) {
                        cnt[j] = (cnt[j] + cnt[i]) % 1000000007;
                    }
                }
            }
        }
        return cnt[n - 1];

=======

        int mod = 1000000007;
        int[][] graph = new int[n][n];
        for (int i = 0; i < n; i++) {
            Arrays.fill(graph[i], -1);
        }
        for (int[] road : roads) {
            graph[road[0]][road[1]] = road[2];
            graph[road[1]][road[0]] = road[2];
        }
        PriorityQueue<int[]> pq = new PriorityQueue<int[]>((a, b) -> a[0] - b[0]);
        pq.offer(new int[] {0, 0, 1});
        int[] dist = new int[n];
        int[] ways = new int[n];
        Arrays.fill(dist, Integer.MAX_VALUE);
        Arrays.fill(ways, 0);
        dist[0] = 0;
        ways[0] = 1;
        while (!pq.isEmpty()) {
            int[] node = pq.poll();
            int time = node[0], u = node[1], path = node[2];
            if (time > dist[u]) {
                continue;
            }
            for (int v = 0; v < n; v++) {
                if (graph[u][v] >= 0) {
                    int d = time + graph[u][v];
                    if (d < dist[v]) {
                        dist[v] = d;
                        ways[v] = path;
                        pq.offer(new int[] {d, v, ways[v]});
                    } else if (d == dist[v]) {
                        ways[v] = (ways[v] + path) % mod;
                    }
                }
            }
        }
        return ways[n - 1];

=======

        int[][] graph = new int[n][n];
        for (int[] road : roads) {
            int u = road[0], v = road[1], w = road[2];
            graph[u][v] = w;
            graph[v][u] = w;
        }
        int[] dist = new int[n];
        int[] ways = new int[n];
        Arrays.fill(dist, Integer.MAX_VALUE);
        Arrays.fill(ways, 0);
        dist[0] = 0;
        ways[0] = 1;
        PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> a[0] - b[0]);
        pq.offer(new int[]{0, 0});
        while (!pq.isEmpty()) {
            int[] cur = pq.poll();
            int u = cur[1], d = cur[0];
            if (d > dist[u]) {
                continue;
            }
            for (int v = 0; v < n; v++) {
                if (graph[u][v] > 0) {
                    int newDist = d + graph[u][v];
                    if (newDist < dist[v]) {
                        dist[v] = newDist;
                        ways[v] = ways[u];
                        pq.offer(new int[]{newDist, v});
                    } else if (newDist == dist[v]) {
                        ways[v] = (ways[v] + ways[u]) % 1000000007;
                    }
                }
            }
        }
        return ways[n - 1];

=======

        int[][] dp = new int[n][n];
        int[][] count = new int[n][n];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                dp[i][j] = Integer.MAX_VALUE;
            }
        }
        for (int i = 0; i < n; i++) {
            dp[i][i] = 0;
            count[i][i] = 1;
        }
        for (int[] road : roads) {
            int u = road[0];
            int v = road[1];
            int w = road[2];
            dp[u][v] = w;
            dp[v][u] = w;
            count[u][v] = 1;
            count[v][u] = 1;
        }
        for (int k = 0; k < n; k++) {
            for (int i = 0; i < n; i++) {
                for (int j = 0; j < n; j++) {
                    if (dp[i][k] < Integer.MAX_VALUE && dp[k][j] < Integer.MAX_VALUE) {
                        if (dp[i][k] + dp[k][j] < dp[i][j]) {
                            dp[i][j] = dp[i][k] + dp[k][j];
                            count[i][j] = count[i][k] * count[k][j] % 1000000007;
                        } else if (dp[i][k] + dp[k][j] == dp[i][j]) {
                            count[i][j] = (count[i][j] + count[i][k] * count[k][j] % 1000000007) % 1000000007;
                        }
                    }
                }
            }
        }
        return count[0][n - 1];

=======

        int[][] graph = new int[n][n];
        for(int i = 0; i < n; i++) {
            Arrays.fill(graph[i], Integer.MAX_VALUE);
        }
        for(int[] road : roads) {
            int u = road[0], v = road[1], w = road[2];
            graph[u][v] = Math.min(graph[u][v], w);
            graph[v][u] = Math.min(graph[v][u], w);
        }
        int[] dist = new int[n];
        int[] ways = new int[n];
        boolean[] visited = new boolean[n];
        Arrays.fill(dist, Integer.MAX_VALUE);
        dist[0] = 0;
        ways[0] = 1;
        for(int i = 0; i < n; i++) {
            int u = -1;
            for(int j = 0; j < n; j++) {
                if(!visited[j] && (u == -1 || dist[j] < dist[u])) {
                    u = j;
                }
            }
            visited[u] = true;
            for(int v = 0; v < n; v++) {
                if(graph[u][v] != Integer.MAX_VALUE) {
                    if(dist[v] > dist[u] + graph[u][v]) {
                        dist[v] = dist[u] + graph[u][v];
                        ways[v] = ways[u];
                    } else if(dist[v] == dist[u] + graph[u][v]) {
                        ways[v] = (ways[v] + ways[u]) % 1000000007;
                    }
                }
            }
        }
        return ways[n - 1];

=======

        int MOD = 1_000_000_007;
        long[][] dist = new long[n][n];
        int[][] cnt = new int[n][n];
        for (long[] row: dist)
            Arrays.fill(row, Long.MAX_VALUE / 2);
        for (int[] row: cnt)
            Arrays.fill(row, 0);
        for (int[] e: roads) {
            int x = e[0], y = e[1], t = e[2];
            dist[x][y] = dist[y][x] = t;
            cnt[x][y] = cnt[y][x] = 1;
        }
        for (int i = 0; i < n; ++i) {
            dist[i][i] = 0;
            cnt[i][i] = 1;
        }

        for (int k = 0; k < n; ++k)
            for (int i = 0; i < n; ++i)
                for (int j = 0; j < n; ++j) {
                    long alt = dist[i][k] + dist[k][j];
                    if (alt < dist[i][j]) {
                        dist[i][j] = alt;
                        cnt[i][j] = (int) ((long) cnt[i][k] * cnt[k][j] % MOD);
                    } else if (alt == dist[i][j]) {
                        cnt[i][j] = (cnt[i][j] + (int) ((long) cnt[i][k] * cnt[k][j] % MOD)) % MOD;
                    }
                }

        return cnt[0][n-1];

=======

        int mod = (int)1e9 + 7;
        long[][] dist = new long[n][n];
        for (long[] d : dist) {
            Arrays.fill(d, Integer.MAX_VALUE);
        }
        for (int[] r : roads) {
            dist[r[0]][r[1]] = r[2];
            dist[r[1]][r[0]] = r[2];
        }
        for (int i = 0; i < n; i++) {
            dist[i][i] = 0;
        }
        long[][] count = new long[n][n];
        for (long[] c : count) {
            Arrays.fill(c, 0);
        }
        for (int i = 0; i < n; i++) {
            count[i][i] = 1;
        }
        for (int k = 0; k < n; k++) {
            for (int i = 0; i < n; i++) {
                for (int j = 0; j < n; j++) {
                    if (dist[i][k] == Integer.MAX_VALUE || dist[k][j] == Integer.MAX_VALUE) {
                        continue;
                    }
                    if (dist[i][j] > dist[i][k] + dist[k][j]) {
                        dist[i][j] = dist[i][k] + dist[k][j];
                        count[i][j] = count[i][k] * count[k][j] % mod;
                    } else if (dist[i][j] == dist[i][k] + dist[k][j]) {
                        count[i][j] = (count[i][j] + count[i][k] * count[k][j] % mod) % mod;
                    }
                }
            }
        }
        return (int)count[0][n - 1];

=======

        int mod = 1000000007;
        long[][] dp = new long[n][n];
        for (long[] r : dp) {
            Arrays.fill(r, Long.MAX_VALUE);
        }
        for (int[] r : roads) {
            dp[r[0]][r[1]] = Math.min(dp[r[0]][r[1]], r[2]);
            dp[r[1]][r[0]] = Math.min(dp[r[1]][r[0]], r[2]);
        }
        for (int i = 0; i < n; i++) dp[i][i] = 0;
        for (int k = 0; k < n; k++) {
            for (int i = 0; i < n; i++) {
                for (int j = 0; j < n; j++) {
                    if (dp[i][k] < Long.MAX_VALUE && dp[k][j] < Long.MAX_VALUE && dp[i][k] + dp[k][j] < dp[i][j]) {
                        dp[i][j] = dp[i][k] + dp[k][j];
                    }
                }
            }
        }
        long[][] ways = new long[n][n];
        ways[0][0] = 1;
        for (int i = 1; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (dp[0][j] == dp[0][i] + dp[i][j]) {
                    ways[0][j] += ways[0][i];
                    ways[0][j] %= mod;
                }
            }
        }
        return (int)ways[0][n - 1];
