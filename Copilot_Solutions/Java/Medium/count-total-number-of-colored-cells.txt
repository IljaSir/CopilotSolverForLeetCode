Synthesizing 10/10 solutions

=======

        long[] dp = new long[n + 1];
        dp[1] = 1;
        for (int i = 2; i <= n; i++) {
            dp[i] = dp[i - 1] + (i - 1) * 4;
        }
        return dp[n];

=======

        long ans = 0;
        for (int i = 1; i <= n; i++) {
            ans += 2 * (n - i) + 1;
        }
        return ans;

=======

        long result = 0;
        for (int i = 1; i <= n; i++) {
            result += 4 * i * (n - i + 1);
        }
        return result;

=======

        return (long) n * n + (n - 1) * (n - 1);

=======

        long result = 0;
        for (int i = 0; i < n; i++) {
            result += 2 * (i + 1) * (n - i);
        }
        return result;

=======

        long res = 0;
        for (int i = 1; i <= n; i++) {
            res += 4 * (i - 1);
            if (i == n) {
                res += 4 * (i - 1);
            }
        }
        return res + 1;

=======

        return 1L + 4L * n * (n - 1) / 2;

=======

        return (long) (2 * n * n + 2 * n + 1);

=======

        long result = 0;
        long count = 0;
        for (int i = 1; i <= n; i++) {
            long tmp = 2 * i - 1;
            if (i % 2 == 0) {
                count += tmp;
            } else {
                count += tmp + 1;
            }
            result += count;
        }
        return result;

=======

        if (n == 1) {
            return 1;
        }
        long ans = 0;
        int i = 0, j = 0;
        int[][] grid = new int[2 * n][2 * n];
        grid[i][j] = 1;
        ans++;
        for (int k = 0; k < n; k++) {
            for (int l = 0; l < 4; l++) {
                for (int m = 0; m < k; m++) {
                    i += (l == 0) ? 1 : (l == 2) ? -1 : 0;
                    j += (l == 1) ? 1 : (l == 3) ? -1 : 0;
                    if (grid[i][j] == 0) {
                        ans++;
                        grid[i][j] = 1;
                    }
                }
            }
        }
        for (int k = 0; k < 4; k++) {
            for (int l = 0; l < n; l++) {
                i += (k == 0) ? 1 : (k == 2) ? -1 : 0;
                j += (k == 1) ? 1 : (k == 3) ? -1 : 0;
                if (grid[i][j] == 0) {
                    ans++;
                    grid[i][j] = 1;
                }
            }
        }
        return ans;
