Synthesizing 10/10 solutions (Duplicates hidden) (Duplicates hidden)

=======

        int count = 0;
        for (int i = 0; i < nums.length; i++) {
            int sum = 0;
            for (int j = i; j < nums.length; j++) {
                sum += nums[j];
                if (sum == k) {
                    count++;
                }
            }
        }
        return count;

=======

        int ans = 0;
        for (int i = 0; i < nums.length; i++) {
            int sum = 0;
            for (int j = i; j < nums.length; j++) {
                sum += nums[j];
                if (sum == k) {
                    ans++;
                }
            }
        }
        return ans;

=======

        Map<Integer, Integer> map = new HashMap<>();
        map.put(0, 1);
        int sum = 0;
        int count = 0;
        for (int i = 0; i < nums.length; i++) {
            sum += nums[i];
            count += map.getOrDefault(sum - k, 0);
            map.put(sum, map.getOrDefault(sum, 0) + 1);
        }
        return count;

=======

        int count = 0;
        int sum = 0;
        Map<Integer, Integer> map = new HashMap<>();
        map.put(0, 1);
        for (int i = 0; i < nums.length; i++) {
            sum += nums[i];
            if (map.containsKey(sum - k)) {
                count += map.get(sum - k);
            }
            map.put(sum, map.getOrDefault(sum, 0) + 1);
        }
        return count;

=======

        HashMap<Integer, Integer> map = new HashMap<>();
        int sum = 0;
        int count = 0;
        map.put(0, 1);
        for (int i = 0; i < nums.length; i++) {
            sum += nums[i];
            if (map.containsKey(sum - k)) {
                count += map.get(sum - k);
            }
            map.put(sum, map.getOrDefault(sum, 0) + 1);
        }
        return count;

=======

        Map<Integer, Integer> preSum = new HashMap<>();
        preSum.put(0, 1);
        int sum = 0, res = 0;
        for (int num : nums) {
            sum += num;
            if (preSum.containsKey(sum - k)) {
                res += preSum.get(sum - k);
            }
            preSum.put(sum, preSum.getOrDefault(sum, 0) + 1);
        }
        return res;

=======

        int n = nums.length;
        int[] sum = new int[n+1];
        sum[0] = 0;
        for (int i=0; i<n; i++) {
            sum[i+1] = sum[i] + nums[i];
        }
        
        Map<Integer, Integer> map = new HashMap<>();
        int res = 0;
        for (int i=0; i<=n; i++) {
            int target = sum[i] - k;
            if (map.containsKey(target)) {
                res += map.get(target);
            }
            map.put(sum[i], map.getOrDefault(sum[i], 0) + 1);
        }
        
        return res;

=======

        int n = nums.length;
        int[] sum = new int[n+1];
        sum[0] = 0;
        for (int i=0; i<n; i++) {
            sum[i+1] = sum[i] + nums[i];
        }
        
        Map<Integer, Integer> map = new HashMap<>();
        int res = 0;
        for (int i=0; i<=n; i++) {
            int target = sum[i] - k;
            if (map.containsKey(target)) {
                res += map.get(target);
            }
            map.put(sum[i], map.getOrDefault(sum[i], 0) + 1);
        }
        
        return res;

=======

        int n = nums.length;
        Map<Integer, Integer> map = new HashMap<>();
        int sum = 0;
        int ans = 0;
        map.put(0, 1);
        for(int i = 0; i < n; i++){
            sum += nums[i];
            if(map.containsKey(sum - k)){
                ans += map.get(sum - k);
            }
            map.put(sum, map.getOrDefault(sum, 0) + 1);
        }
        return ans;
