Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int ans = 0;
        while (n > 0) {
            ans += n % 2;
            n /= 2;
        }
        return ans;

=======

        int ans = 0;
        while (n > 0) {
            ans += n & 1;
            n >>= 1;
        }
        return ans;

=======

        int count = 0;
        while (n > 0) {
            count += n % 2;
            n /= 2;
        }
        return count;

=======

        int res = 0;
        for (int i = 0; i < n; i++) {
            res += Math.abs(n - 2 * i - 1);
        }
        return res / 2;

=======

        int result = 0;
        int i = 0;
        while (n > 0) {
            if ((n & 1) == 1) {
                result += Math.pow(2, i);
            }
            i++;
            n = n >> 1;
        }
        return result;

=======

        int count = 0;
        while (n > 0) {
            n = n >> 1;
            count++;
        }
        return count - 1;

=======

        int ans = 0;
        int i = 1;
        while (n != 0) {
            if ((n & 1) == 1) {
                ans += i;
            }
            i <<= 1;
            n >>= 1;
        }
        return ans;

=======

        int result = 0;
        int target = n;
        while (target > 0) {
            int bit = 0;
            while ((1 << bit) <= target) {
                bit++;
            }
            bit--;
            target -= (1 << bit);
            result++;
        }
        return result;

=======

        int s = 0;
        for(int i = 0; i < n; i++) {
            s += (i * 2 + 1);
        }
        s /= n;
        int cnt = 0;
        for(int i = 0; i < n / 2; i++) {
            cnt += (s - (i * 2 + 1));
        }
        return cnt;
