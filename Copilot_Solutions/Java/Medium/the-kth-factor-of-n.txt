Synthesizing 10/10 solutions (Duplicates hidden)

=======

        for (int i = 1; i <= n; i++) {
            if (n % i == 0) {
                k--;
                if (k == 0) {
                    return i;
                }
            }
        }
        return -1;

=======

        int count = 0;
        for (int i = 1; i <= n; i++) {
            if (n % i == 0) {
                count++;
                if (count == k) {
                    return i;
                }
            }
        }
        return -1;

=======

        for (int i = 1; i <= n; i++) {
            if (n % i == 0) {
                k--;
            }
            if (k == 0) {
                return i;
            }
        }
        return -1;

=======

        int count = 0;
        for (int i = 1; i <= n; i++) {
            if (n % i == 0) {
                count++;
            }
            if (count == k) {
                return i;
            }
        }
        return -1;

=======

        int count = 1;
        for (int i = 1; i <= n; i++) {
            if (n % i == 0) {
                if (count == k) {
                    return i;
                }
                count++;
            }
        }
        return -1;

=======

        int cnt = 0;
        for (int i = 1; i * i <= n; i++) {
            if (n % i == 0) {
                cnt++;
                if (cnt == k) {
                    return i;
                }
            }
        }
        for (int i = (int) Math.sqrt(n); i >= 1; i--) {
            if (n % i == 0) {
                cnt++;
                if (cnt == k) {
                    return n / i;
                }
            }
        }
        return -1;

=======

        int[] factors = new int[n];
        int count = 0;
        for (int i = 1; i <= n; i++) {
            if (n % i == 0) {
                factors[count++] = i;
            }
        }
        if (count < k) {
            return -1;
        }
        return factors[k - 1];

=======

        int i = 1;
        int j = 0;
        while (i <= n) {
            if (n % i == 0) {
                j++;
                if (j == k) {
                    return i;
                }
            }
            i++;
        }
        return -1;
