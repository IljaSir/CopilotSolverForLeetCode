Synthesizing 10/10 solutions

=======

        int xor = 0;
        for (int num : nums) {
            xor ^= num;
        }
        int mask = 1;
        while ((xor & mask) == 0) {
            mask <<= 1;
        }
        int[] result = new int[2];
        for (int num : nums) {
            if ((num & mask) == 0) {
                result[0] ^= num;
            } else {
                result[1] ^= num;
            }
        }
        return result;

=======

        int xor = 0;
        for (int num : nums) {
            xor ^= num;
        }
        int diff = xor & (-xor);
        int[] res = new int[2];
        for (int num : nums) {
            if ((num & diff) == 0) {
                res[0] ^= num;
            } else {
                res[1] ^= num;
            }
        }
        return res;

=======

        int[] result = new int[2];
        int xor = 0;
        for (int num : nums) {
            xor ^= num;
        }
        int mask = 1;
        while ((xor & mask) == 0) {
            mask <<= 1;
        }
        int xor1 = 0;
        int xor2 = 0;
        for (int num : nums) {
            if ((num & mask) == 0) {
                xor1 ^= num;
            } else {
                xor2 ^= num;
            }
        }
        result[0] = xor1;
        result[1] = xor2;
        return result;

=======

        int xor = 0;
        for (int num : nums) {
            xor ^= num;
        }
        int lastBit = xor & (-xor);
        int a = 0, b = 0;
        for (int num : nums) {
            if ((num & lastBit) == 0) {
                a ^= num;
            } else {
                b ^= num;
            }
        }
        return new int[]{a, b};

=======

        int xor = 0;
        for (int i : nums) {
            xor ^= i;
        }
        int bit = 1;
        while ((xor & bit) == 0) {
            bit <<= 1;
        }
        int[] res = new int[2];
        for (int i : nums) {
            if ((i & bit) == 0) {
                res[0] ^= i;
            } else {
                res[1] ^= i;
            }
        }
        return res;

=======

        int[] result = new int[2];
        int xor = 0;
        for (int i = 0; i < nums.length; i++) {
            xor ^= nums[i];
        }
        int index = 0;
        for (int i = 0; i < 32; i++) {
            if (((xor >> i) & 1) == 1) {
                index = i;
                break;
            }
        }
        int a = 0;
        int b = 0;
        for (int i = 0; i < nums.length; i++) {
            if (((nums[i] >> index) & 1) == 1) {
                a ^= nums[i];
            } else {
                b ^= nums[i];
            }
        }
        result[0] = a;
        result[1] = b;
        return result;

=======

        int[] result = new int[2];
        int xor = 0;
        for (int num: nums) {
            xor ^= num;
        }
        int lastBit = xor & (-xor);
        for (int num: nums) {
            if ((num & lastBit) == 0) {
                result[0] ^= num;
            } else {
                result[1] ^= num;
            }
        }
        return result;

=======

        int[] result = new int[2];
        int temp = 0;
        for (int i = 0; i < nums.length; i++) {
            temp = temp ^ nums[i];
        }
        int mask = 1;
        while ((temp & mask) == 0) {
            mask = mask << 1;
        }
        for (int i = 0; i < nums.length; i++) {
            if ((nums[i] & mask) == 0) {
                result[0] = result[0] ^ nums[i];
            } else {
                result[1] = result[1] ^ nums[i];
            }
        }
        return result;

=======

        int xor = 0;
        for (int num : nums) {
            xor ^= num;
        }
        int mask = 1;
        while (mask != (xor & mask)) {
            mask <<= 1;
        }
        int[] res = new int[2];
        for (int num : nums) {
            if ((num & mask) == 0) {
                res[0] ^= num;
            } else {
                res[1] ^= num;
            }
        }
        return res;

=======

        int[] result = new int[2];
        int xor = 0;
        for(int i = 0; i < nums.length; i++) {
            xor ^= nums[i];
        }
        int bit = 0;
        for(int i = 0; i < 32; i++) {
            if((xor & (1 << i)) != 0) {
                bit = i;
                break;
            }
        }
        int x = 0;
        int y = 0;
        for(int i = 0; i < nums.length; i++) {
            if((nums[i] & (1 << bit)) == 0) {
                x ^= nums[i];
            } else {
                y ^= nums[i];
            }
        }
        result[0] = x;
        result[1] = y;
        return result;
