Synthesizing 10/10 solutions

=======

        int ans = 0;
        int carry = 0;
        for (int i = s.length() - 1; i > 0; --i) {
            ans++;
            if (s.charAt(i) - '0' + carry == 1) {
                ans++;
                carry = 1;
            }
        }
        return ans + carry;

=======

        int steps = 0;
        int carry = 0;
        for (int i = s.length() - 1; i > 0; i--) {
            if (s.charAt(i) == '0' && carry == 0) {
                steps++;
            } else if (s.charAt(i) == '0' && carry == 1) {
                steps += 2;
                carry = 1;
            } else if (s.charAt(i) == '1' && carry == 0) {
                steps++;
                carry = 1;
            } else if (s.charAt(i) == '1' && carry == 1) {
                steps++;
            }
        }
        return steps + carry;

=======

        int steps = 0;
        int carry = 0;
        int i = s.length() - 1;
        while (i > 0) {
            if (s.charAt(i) == '0') {
                if (carry == 1) {
                    steps += 2;
                } else {
                    steps += 1;
                }
            } else {
                if (carry == 1) {
                    steps += 1;
                } else {
                    steps += 2;
                    carry = 1;
                }
            }
            i--;
        }
        return steps + carry;

=======

        int n = s.length();
        int count = 0;
        int carry = 0;
        for (int i = n - 1; i > 0; i--) {
            count++;
            if (s.charAt(i) == '1') {
                count++;
                carry = 1;
            }
        }
        return count + carry;

=======

        int count = 0;
        int i = s.length() - 1;
        while (i > 0) {
            if (s.charAt(i) == '0') {
                i--;
            } else {
                while (i >= 0 && s.charAt(i) == '1') {
                    i--;
                    count++;
                }
                if (i > 0) {
                    count++;
                }
            }
        }
        return count;

=======

        int i = s.length() - 1;
        int count = 0;
        while (i > 0) {
            if (s.charAt(i) == '1') {
                count++;
                while (i >= 0 && s.charAt(i) == '1') {
                    count++;
                    i--;
                }
                if (i >= 0) {
                    s = s.substring(0, i) + "1" + s.substring(i + 1);
                }
            } else {
                i--;
            }
        }
        return count;

=======

        int step = 0;
        int carry = 0;
        for (int i = s.length() - 1; i > 0; i--) {
            int cur = s.charAt(i) - '0';
            if (carry == 0) {
                if (cur == 0) {
                    step++;
                } else {
                    step += 2;
                    carry = 1;
                }
            } else {
                if (cur == 0) {
                    step += 2;
                } else {
                    step++;
                    carry = 1;
                }
            }
        }
        return step + carry;

=======

        int steps = 0;
        char[] arr = s.toCharArray();
        int len = arr.length;
        int i = len - 1;
        while (i > 0) {
            if (arr[i] == '0') {
                i--;
            } else {
                int j = i;
                while (j >= 0 && arr[j] == '1') {
                    arr[j] = '0';
                    j--;
                }
                if (j == -1) {
                    arr = new char[len + 1];
                    arr[0] = '1';
                    for (int k = 1; k < len + 1; k++) {
                        arr[k] = '0';
                    }
                    i = len;
                } else {
                    arr[j] = '1';
                    i = j;
                }
            }
            steps++;
        }
        return steps;

=======

        int count = 0;
        char[] arr = s.toCharArray();
        int n = arr.length;
        while (n > 1) {
            count++;
            if (arr[n - 1] == '0') {
                n--;
            } else {
                int i = n - 1;
                while (i >= 0 && arr[i] == '1') {
                    arr[i] = '0';
                    i--;
                }
                if (i == -1) {
                    n++;
                    arr = new char[n];
                    arr[0] = '1';
                } else {
                    arr[i] = '1';
                }
            }
        }
        return count;

=======

        int steps = 0;
        int carry = 0;
        for(int i = s.length() - 1; i >= 1; i--) {
            if(s.charAt(i) == '0' && carry == 1) {
                steps++;
            } else if(s.charAt(i) == '1' && carry == 1) {
                steps += 2;
            } else if(s.charAt(i) == '1' && carry == 0) {
                steps++;
            }
            carry = s.charAt(i) == '1' ? 1 : 0;
        }
        
        return steps + carry;
