Synthesizing 10/10 solutions (Duplicates hidden)

=======

        while (nums.length > 1) {
            int[] newNums = new int[nums.length - 1];
            for (int i = 0; i < nums.length - 1; i++) {
                newNums[i] = (nums[i] + nums[i + 1]) % 10;
            }
            nums = newNums;
        }
        return nums[0];

=======

        while (nums.length > 1) {
            int[] newNums = new int[nums.length - 1];
            for (int i = 0; i < newNums.length; i++) {
                newNums[i] = (nums[i] + nums[i+1]) % 10;
            }
            nums = newNums;
        }
        return nums[0];

=======

        if (nums.length == 1) {
            return nums[0];
        }
        int[] newNums = new int[nums.length - 1];
        for (int i = 0; i < nums.length - 1; i++) {
            newNums[i] = (nums[i] + nums[i + 1]) % 10;
        }
        return triangularSum(newNums);

=======

        int n = nums.length;
        while (n > 1) {
            int[] newNums = new int[n - 1];
            for (int i = 0; i < n - 1; i++) {
                newNums[i] = (nums[i] + nums[i + 1]) % 10;
            }
            nums = newNums;
            n = newNums.length;
        }
        return nums[0];

=======

        int n = nums.length;
        if (n == 1) {
            return nums[0];
        }
        int[] newNums = new int[n - 1];
        for (int i = 0; i < n - 1; i++) {
            newNums[i] = (nums[i] + nums[i + 1]) % 10;
        }
        return triangularSum(newNums);

=======

        while(nums.length > 1){
            int[] temp = new int[nums.length - 1];
            for(int i = 0; i < nums.length - 1; i++){
                temp[i] = (nums[i] + nums[i+1])%10;
            }
            nums = temp;
        }
        return nums[0];

=======

        while(nums.length != 1) {
            int[] newNums = new int[nums.length - 1];
            for(int i = 0; i < newNums.length; i++) {
                newNums[i] = (nums[i] + nums[i+1]) % 10;
            }
            nums = newNums;
        }
        return nums[0];

=======

        int sum = 0;
        int n = nums.length;
        while(n > 1){
            int[] newNums = new int[n-1];
            for(int i = 0; i < n-1; i++){
                newNums[i] = (nums[i] + nums[i+1]) % 10;
            }
            nums = newNums;
            n--;
        }
        return nums[0];
