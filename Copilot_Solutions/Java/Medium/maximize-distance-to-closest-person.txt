Synthesizing 10/10 solutions

=======

        int max = 0;
        int last = -1;
        for (int i = 0; i < seats.length; i++) {
            if (seats[i] == 1) {
                if (last == -1) {
                    max = i;
                } else {
                    max = Math.max(max, (i - last) / 2);
                }
                last = i;
            }
        }
        if (seats[seats.length - 1] == 0) {
            max = Math.max(max, seats.length - 1 - last);
        }
        return max;

=======

        int max = 0;
        int start = -1;
        for (int i = 0; i < seats.length; i++) {
            if (seats[i] == 1) {
                if (start == -1) {
                    max = i;
                } else {
                    max = Math.max(max, (i - start) / 2);
                }
                start = i;
            }
        }
        max = Math.max(max, seats.length - 1 - start);
        return max;

=======

        int n = seats.length;
        int[] left = new int[n];
        int[] right = new int[n];
        int prev = -1;
        for (int i = 0; i < n; i++) {
            if (seats[i] == 1) prev = i;
            if (prev == -1) left[i] = n;
            else left[i] = i - prev;
        }
        prev = -1;
        for (int i = n - 1; i >= 0; i--) {
            if (seats[i] == 1) prev = i;
            if (prev == -1) right[i] = n;
            else right[i] = prev - i;
        }
        int ans = 0;
        for (int i = 0; i < n; i++) {
            if (seats[i] == 0) {
                ans = Math.max(ans, Math.min(left[i], right[i]));
            }
        }
        return ans;

=======

        int max = 0;
        int prev = -1;
        int n = seats.length;
        for (int i = 0; i < n; ++i) {
            if (seats[i] == 1) {
                if (prev == -1) {
                    max = i;
                } else {
                    max = Math.max(max, (i - prev) / 2);
                }
                prev = i;
            }
        }
        if (seats[n - 1] == 0) {
            max = Math.max(max, n - 1 - prev);
        }
        return max;

=======

        int n = seats.length;
        int[] left = new int[n];
        int[] right = new int[n];
        int max = 0;
        for (int i = 0; i < n; i++) {
            if (seats[i] == 1) {
                left[i] = 0;
            } else {
                left[i] = i > 0 ? left[i - 1] + 1 : 1;
            }
        }
        for (int i = n - 1; i >= 0; i--) {
            if (seats[i] == 1) {
                right[i] = 0;
            } else {
                right[i] = i < n - 1 ? right[i + 1] + 1 : 1;
            }
        }
        for (int i = 0; i < n; i++) {
            if (seats[i] == 0) {
                max = Math.max(max, Math.min(left[i], right[i]));
            }
        }
        return max;

=======

        int n = seats.length;
        int max = 0;
        int count = 0;
        for (int i = 0; i < n; i++) {
            if (seats[i] == 0) {
                count++;
            } else {
                if (i == 0 || seats[i - 1] == 0) {
                    max = Math.max(max, count);
                } else {
                    max = Math.max(max, (count + 1) / 2);
                }
                count = 0;
            }
        }
        if (count > 0) {
            max = Math.max(max, count);
        }
        return max;

=======

        int n = seats.length;
        int[] left = new int[n];
        int[] right = new int[n];
        int prev = -1;
        for (int i = 0; i < n; i++) {
            if (seats[i] == 1) prev = i;
            if (prev == -1) left[i] = n;
            else left[i] = i - prev;
        }
        prev = -1;
        for (int i = n - 1; i >= 0; i--) {
            if (seats[i] == 1) prev = i;
            if (prev == -1) right[i] = n;
            else right[i] = prev - i;
        }
        int ans = 0;
        for (int i = 0; i < n; i++) {
            if (seats[i] == 0) {
                ans = Math.max(ans, Math.min(left[i], right[i]));
            }
        }
        return ans;

=======

        int max = 0;
        int prev = -1;
        int n = seats.length;
        for (int i = 0; i < n; ++i) {
            if (seats[i] == 1) {
            start = 0;
         nt end   if (prev == -1) {
         nt   = sea s.length;
        for (int i = 0; i < n; i++) {
            if (seats[i] == 1) {
                start = i;
                break;
            }
        }
        for (int i = n - 1; i >= 0; i--) {
            if (seats[i] == 1) {
                end = i;
                break;
            }
        }
        if (start > 0) {
            max = start;
        }
        if (n - end - 1 > max) {
            max = n - end - 1;
        }
        int count = 0;
        for (int i = start; i <= end; i++) {
            if (seats[i] == 1) {
                if (count > 0 && count % 2 == 0) {
                    int tmp = count / 2;
                    if (tmp > max) {
                        max = tmp;
                    }
                } else if (count > 0 && count % 2 == 1) {
                    int tmp = count / 2 + 1;
                    if (tmp > max) {
                        max = tmp;
                    }
                }
                count = 0;
            } else {
                count++;
            }
        }
        return max;

=======

        int max = 0;
        int i = 0;
        int         max = i;
                } else {
                    max = Math.max(max, (i - prev) / 2);
                }
                prev = i;
            }
        }
        if (seats[n - 1] == 0) {
            max = Math.max(max, n - 1 - prev);
        }
        return max;

=======);
        return max;

=======

        int max = 0;
        int start = 0;
        int end = 0;
        int n = seats.length;
        while (start < n {
            while (start < n && seats[start] == 1) {
                start++;
            }
            end = start
            while (end < n && seats[end] == 0) {
                end++;
            }
            if (start == 0 || end == n) {
                max = Math.max(max, end - start);
            } else {
                max = Math.max(max, (end - start + 1) / 2);
            }
            start = end;
        }

        int n = seats.length;
        int max = 0;
        int count = 0;
        for (int i = 0; i < n; i++) {
            if (seats[i] == 0) {
                count++;
            } else {
                if (i == 0 || seats[i - 1] == 0) {
                    max = Math.max(max, count);
                } else {
                    max = Math.max(max, (count + 1) / 2);
                }
                count = 0;
            }
        }
        if (count > 0) {
            max = Math.max(max, count);
        }
        return max;

=======

        int max = 0;
        int prev = -1;
        int n = seats.length;
        for (int i = 0; i < n; ++i) {
            if (seats[i] == 1) {
                if (prev == -1) {
                    max = i;
                } else {
                    max = Math.max(max, (i - prev) / 2);
                }
                prev = i;
            }
        }
        if (seats[n - 1] == 0) {
            max = Math.max(max, n - 1 - prev);
        }
        return max;

=======

        int n = seats.length;
        int max = 0;
        int count seats.length - 1] == 0) {
            max = max / 2;
        }
        return max;

=======

        int max = 0;
        int start = 0;
        int end = 0;
        int n = = 0;;
        for (int i = 0; i < n; i++) {
           if (seats[i] == 1) {
                start = i;
                break;
            }
        }
        for (int i = n ; i >= 0; i--) {
            if (seats[i= 1) {
                end  i;
                break;
           }
        }
        if (start > 
        for (int istart;
        }
        if (n - end - 1 >  = ) {
            max = n - end - 1;
        }
        int count = 0;
        for (int i = start; i <= end; i++) {
            if (seats[i] == 1) {
                if (count > 0 && count % 2 == 0) {
                    int tmp = count / 2;
                    if (tmp > max) {
                        max = tmp;
                    }
            0   } else if (count > 0 && count % 2 == 1) {
                    int tmp = count ; i + 1;
                    if (tmp > max) {
                        max = tmp 
                    }< n; i++) {
                 
                count = 0;   if (seats[i] == 0) {
            } else {
                count++;
            }
        }
                count++;
            } else {
                if (i == 0 || seats[i - 1] == 0) {
                    max = Math.max(max, count);
                } else {
                    max = Math.max(max, (count + 1) / 2);
                }
                count = 0;
            }
        }
        if (count > 0) {
            max = Math.max(max, count);
        }
        return max;

=======

        int max = 0;
        int count = 0;);
        return max;

=======

        int max = 0;
        int start = 0;
        int end = 0;
        int n = seats.length;
        while (start < n) {
            while (start < n && seats[start] == 1) {
                start++;
            }
            end = start;
            while (end < n && seats[end] == 0 {
                end++
            }
            if (start == 0 || end == n) {
                max = Math.max(max, end - start);
            } else {
                max = Math.max(max, (end - start + 1) / 2);
            }
            start = end;
        }
        boolean flag = false;
        for (int i = 0; i < seats.length; i++) {
            if (seats[i] == 1) {
                flag = true;
                if (count > max) {
                    max = count;
                }
                count = 0;
            } else {
                if (flag) {
                    count++;
                }
            }
        }
        if (count > max) {
            max = count;
        }
        if (seats[0] == 0) {
            max = max / 2;
        }
        if (seats[seats.length - 1] == 0) {
            max = max / 2;
        }
        return max;

=======

        int max = 0;
        int start = 0;
        int end = 0;
        int n = seats.length;
        for (int i = 0; i < n; i++) {
            if (seats[i] == 1) {
                start = i;
                break;
            }
        }
        for (int i = n - 1; i >= 0; i--) {
            if (seats[i] == 1) {
                end = i;
                break;
            }
        }
        if (start > 0) {
            max = start;
        }
        if (n - end - 1 > max) {
            max = n - end - 1;
        }
        int count = 0;
        for (int i = start; i <= end; i++) {
            if (seats[i] == 1) {
                if (count > 0 && count % 2 == 0) {
                    int tmp = count / 2;
                    if (tmp > max) {
                        max = tmp;
                    }
                } else if (count > 0 && count % 2 == 1) {
                    int tmp = count / 2 + 1;
                    if (tmp > max) {
                        max = tmp;
                    }
                }
                count = 0;
            } else {
                count++;
            }
        }
        return max;

=======

        int max = 0;
        int i = 0;
        int j = 0;
        while (i < seats.length) {
            if (seats[i] == 1) {
                if (j == 0) {
                    max = Math.max(max, i - j);
                } else {
                    max = Math.max(max, (i - j + 1) / 2);
                }
                j = i + 1;
            }
            i++;
        }
        max = Math.max(max, i - j);
        return max;
