Synthesizing 10/10 solutions

=======

        if (s1.length() > s2.length()) return false;
        int[] count = new int[26];
        for (int i = 0; i < s1.length(); i++) {
            count[s1.charAt(i) - 'a']++;
            count[s2.charAt(i) - 'a']--;
        }
        if (allZero(count)) return true;
        for (int i = s1.length(); i < s2.length(); i++) {
            count[s2.charAt(i) - 'a']--;
            count[s2.charAt(i - s1.length()) - 'a']++;
            if (allZero(count)) return true;
        }
        return false;
    }
    private boolean allZero(int[] count) {
        for (int i = 0; i < count.length; i++) {
            if (count[i] != 0) return false;
        }
        return true;

=======

        int[] s1Count = new int[26];
        int[] s2Count = new int[26];
        for (int i = 0; i < s1.length(); i++) {
            s1Count[s1.charAt(i) - 'a']++;
            s2Count[s2.charAt(i) - 'a']++;
        }
        for (int i = s1.length(); i < s2.length(); i++) {
            if (Arrays.equals(s1Count, s2Count)) {
                return true;
            }
            s2Count[s2.charAt(i) - 'a']++;
            s2Count[s2.charAt(i - s1.length()) - 'a']--;
        }
        return Arrays.equals(s1Count, s2Count);

=======

        int[] s1map = new int[26];
        int[] s2map = new int[26];
        for (int i = 0; i < s1.length(); i++) {
            s1map[s1.charAt(i) - 'a']++;
        }
        for (int i = 0; i < s2.length(); i++) {
            s2map[s2.charAt(i) - 'a']++;
            if (i >= s1.length()) {
                s2map[s2.charAt(i - s1.length()) - 'a']--;
            }
            if (Arrays.equals(s1map, s2map)) {
                return true;
            }
        }
        return false;

=======

        if (s1.length() > s2.length()) {
            return false;
        }
        int[] s1Freq = new int[26];
        int[] s2Freq = new int[26];
        for (int i = 0; i < s1.length(); i++) {
            s1Freq[s1.charAt(i) - 'a']++;
            s2Freq[s2.charAt(i) - 'a']++;
        }
        for (int i = 0; i < s2.length() - s1.length(); i++) {
            if (Arrays.equals(s1Freq, s2Freq)) {
                return true;
            }
            s2Freq[s2.charAt(i) - 'a']--;
            s2Freq[s2.charAt(i + s1.length()) - 'a']++;
        }
        return Arrays.equals(s1Freq, s2Freq);

=======

        int n = s1.length();
        int m = s2.length();
        int[] count = new int[26];
        for (int i = 0; i < n; i++) {
            count[s1.charAt(i) - 'a']++;
            count[s2.charAt(i) - 'a']--;
        }
        if (allZero(count)) return true;
        for (int i = n; i < m; i++) {
            count[s2.charAt(i) - 'a']--;
            count[s2.charAt(i - n) - 'a']++;
            if (allZero(count)) return true;
        }
        return false;
    }
    private boolean allZero(int[] count) {
        for (int i : count) {
            if (i != 0) return false;
        }
        return true;

=======

        int[] s1Count = new int[26];
        int[] s2Count = new int[26];
        for (char c : s1.toCharArray()) {
            s1Count[c - 'a']++;
        }
        for (int i = 0; i < s2.length(); i++) {
            s2Count[s2.charAt(i) - 'a']++;
            if (i >= s1.length()) {
                s2Count[s2.charAt(i - s1.length()) - 'a']--;
            }
            if (Arrays.equals(s1Count, s2Count)) {
                return true;
            }
        }
        return false;

=======

        int[] s1Count = new int[26];
        int[] s2Count = new int[26];
        int len1 = s1.length();
        int len2 = s2.length();
        if (len1 > len2) {
            return false;
        }
        for (int i = 0; i < len1; i++) {
            s1Count[s1.charAt(i) - 'a']++;
            s2Count[s2.charAt(i) - 'a']++;
        }
        for (int i = len1; i < len2; i++) {
            if (check(s1Count, s2Count)) {
                return true;
            }
            s2Count[s2.charAt(i) - 'a']++;
            s2Count[s2.charAt(i - len1) - 'a']--;
        }
        return check(s1Count, s2Count);
    }
    private boolean check(int[] s1Count, int[] s2Count) {
        for (int i = 0; i < 26; i++) {
            if (s1Count[i] != s2Count[i]) {
                return false;
            }
        }
        return true;

=======

        int[] count = new int[26];
        for (char c : s1.toCharArray()) {
            count[c - 'a']++;
        }
        int left = 0;
        int right = 0;
        int n = s2.length();
        int m = s1.length();
        int diff = m;
        while (right < n) {
            if (count[s2.charAt(right)-'a'] > 0) {
                diff--;
            }
            count[s2.charAt(right)-'a']--;
            right++;
            if (diff == 0) {
                return true;
            }
            if (right - left == m) {
                if (count[s2.charAt(left)-'a'] >= 0) {
                    diff++;
                }
                count[s2.charAt(left)-'a']++;
                left++;
            }
        }
        return false;

=======

        int[] cnt = new int[26];
        for (char c : s1.toCharArray()) {
            cnt[c - 'a']++;
        }
        int n = s1.length();
        int m = s2.length();
        for (int i = 0; i < m; ++i) {
            if (cnt[s2.charAt(i) - 'a']-- > 0) {
                n--;
            }
            if (i >= s1.length() && cnt[s2.charAt(i - s1.length()) - 'a']++ >= 0) {
                n++;
            }
            if (n == 0) {
                return true;
            }
        }
        return false;

=======

        int[] s1arr = new int[26];
        for(char c : s1.toCharArray()){
            s1arr[c - 'a']++;
        }
        int[] s2arr = new int[26];
        int left = 0;
        int right = 0;
        while(right < s2.length()){
            s2arr[s2.charAt(right) - 'a']++;
            if(right - left + 1 > s1.length()){
                s2arr[s2.charAt(left) - 'a']--;
                left++;
            }
            if(right - left + 1 == s1.length() && Arrays.equals(s1arr, s2arr)){
                return true;
            }
            right++;
        }
        return false;
