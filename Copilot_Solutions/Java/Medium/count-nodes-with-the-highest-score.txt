Synthesizing 9/10 solutions

=======

        int n = parents.length;
        Map<Integer, List<Integer>> map = new HashMap<>();
        for (int i = 0; i < n; i++) {
            map.putIfAbsent(parents[i], new ArrayList<>());
            map.get(parents[i]).add(i);
        }
        int[] count = new int[n];
        int[] score = new int[n];
        int maxScore = 0;
        int maxCount = 0;
        for (int i = n - 1; i >= 0; i--) {
            int nodeScore = 1;
            for (int child : map.getOrDefault(i, new ArrayList<>())) {
                nodeScore *= (score[child] + 1);
            }
            score[i] = nodeScore;
            if (nodeScore > maxScore) {
                maxScore = nodeScore;
                maxCount = 1;
            } else if (nodeScore == maxScore) {
                maxCount++;
            }
        }
        return maxCount;

=======

        int n = parents.length;
        Map<Integer, List<Integer>> map = new HashMap<>();
        for (int i = 0; i < n; i++) {
            map.putIfAbsent(parents[i], new ArrayList<>());
            map.get(parents[i]).add(i);
        }
        int[] cnt = new int[n];
        int[] score = new int[n];
        dfs(map, cnt, score, 0);
        int max = 0;
        for (int i = 0; i < n; i++) {
            max = Math.max(max, score[i]);
        }
        int res = 0;
        for (int i = 0; i < n; i++) {
            if (score[i] == max) {
                res++;
            }
        }
        return res;
    }
    private void dfs(Map<Integer, List<Integer>> map, int[] cnt, int[] score, int node) {
        cnt[node] = 1;
        score[node] = 1;
        if (!map.containsKey(node)) {
            return;
        }
        for (int child : map.get(node)) {
            dfs(map, cnt, score, child);
            cnt[node] += cnt[child];
            score[node] *= score[child];
        }
        score[node] *= cnt[node];

=======

        int n = parents.length;
        int[] count = new int[n];
        int[] score = new int[n];
        for (int i = n - 1; i >= 0; i--) {
            count[i] = 1;
            score[i] = 1;
            if (parents[i] != -1) {
                count[parents[i]] += count[i];
                score[parents[i]] *= score[i] + count[i];
            }
        }
        int max = 0;
        for (int i = 0; i < n; i++) {
            max = Math.max(max, score[i]);
        }
        int ans = 0;
        for (int i = 0; i < n; i++) {
            if (score[i] == max) {
                ans++;
            }
        }
        return ans;

=======

        int n = parents.length;
        int[] count = new int[n];
        int[] score = new int[n];
        for (int i = n - 1; i >= 0; i--) {
            int p = parents[i];
            if (p != -1) {
                count[p]++;
            }
        }
        int max = 0;
        for (int i = n - 1; i >= 0; i--) {
            int p = parents[i];
            if (p != -1) {
                score[p] += score[i] + 1;
            }
            max = Math.max(max, score[i] + 1);
        }
        int res = 0;
        for (int i = 0; i < n; i++) {
            if (score[i] + 1 == max) {
                res++;
            }
        }
        return res;

=======

        int n = parents.length;
        int[] count = new int[n];
        int[] score = new int[n];
        int max = 0;
        int res = 0;
        for (int i = n - 1; i >= 0; i--) {
            count[i] = 1;
            score[i] = 1;
            if (parents[i] >= 0) {
                count[parents[i]] += count[i];
                score[parents[i]] *= score[i] + count[i];
            }
            if (score[i] > max) {
                max = score[i];
                res = count[i];
            } else if (score[i] == max) {
                res += count[i];
            }
        }
        return res;

=======

        int n = parents.length;
        int[] count = new int[n];
        int[] score = new int[n];
        int maxScore = 0;
        int res = 0;
        for (int i = n - 1; i >= 0; i--) {
            count[i] = 1;
            score[i] = 1;
            int p = parents[i];
            if (p != -1) {
                count[p] += count[i];
                score[p] *= count[i];
            }
            if (score[i] > maxScore) {
                maxScore = score[i];
                res = count[i];
            } else if (score[i] == maxScore) {
                res += count[i];
            }
        }
        return res;

=======

        int n = parents.length;
        int[] children = new int[n];
        for(int i = 0; i < n; i++){
            if(parents[i] != -1){
                children[parents[i]]++;
            }
        }
        int[] scores = new int[n];
        int max = 0;
        for(int i = n - 1; i >= 0; i--){
            if(children[i] == 0){
                scores[i] = 1;
            }else{
                int max1 = 0;
                int max2 = 0;
                for(int j = 0; j < n; j++){
                    if(parents[j] == i){
                        if(scores[j] >= max1){
                            max2 = max1;
                            max1 = scores[j];
                        }else if(scores[j] > max2){
                            max2 = scores[j];
                        }
                    }
                }
                scores[i] = (max1 + 1) * (max2 + 1);
                max = Math.max(max, scores[i]);
            }
        }
        int count = 0;
        for(int i = 0; i < n; i++){
            if(scores[i] == max){
                count++;
            }
        }
        return count;

=======

        int n = parents.length;
        int[] subtreeSize = new int[n];
        int[] score = new int[n];
        int maxScore = 0;
        for (int i = n - 1; i >= 0; i--) {
            subtreeSize[i]++;
            if (parents[i] != -1) {
                subtreeSize[parents[i]] += subtreeSize[i];
            }
            score[i] = subtreeSize[i];
            if (parents[i] != -1) {
                score[parents[i]] *= score[i];
            }
            maxScore = Math.max(maxScore, score[i]);
        }
        int res = 0;
        for (int i = 0; i < n; i++) {
            if (score[i] == maxScore) {
                res++;
            }
        }
        return res;

=======

        int n = parents.length;
        int[] childCount = new int[n];
        int[] score = new int[n];
        int maxScore = 0;
        int maxScoreCount = 0;
        for (int i = n - 1; i >= 0; i--) {
            childCount[i]++;
            if (parents[i] != -1) {
                childCount[parents[i]] += childCount[i];
                score[parents[i]] += score[i] + childCount[i];
            }
            if (score[i] > maxScore) {
                maxScore = score[i];
                maxScoreCount = 1;
            } else if (score[i] == maxScore) {
                maxScoreCount++;
            }
        }
        return maxScoreCount;
