Synthesizing 10/10 solutions

=======

        List<Integer> result = new ArrayList<>();
        int n = arr.length;
        int[] sorted = new int[n];
        for (int i = 0; i < n; i++) {
            sorted[i] = i + 1;
        }
        for (int i = n - 1; i >= 0; i--) {
            if (arr[i] != sorted[i]) {
                for (int j = 0; j < i; j++) {
                    if (arr[j] == sorted[i]) {
                        flip(arr, j);
                        result.add(j + 1);
                        break;
                    }
                }
                flip(arr, i);
                result.add(i + 1);
            }
        }
        return result;
    }

    private void flip(int[] arr, int k) {
        for (int i = 0, j = k; i < j; i++, j--) {
            int temp = arr[i];
            arr[i] = arr[j];
            arr[j] = temp;
        }

=======

        List<Integer> res = new ArrayList<>();
        int n = arr.length;
        for (int i = n; i > 0; i--) {
            int j = 0;
            while (arr[j] != i) {
                j++;
            }
            res.add(j + 1);
            res.add(i);
            reverse(arr, j + 1);
            reverse(arr, i);
        }
        return res;
    }

    private void reverse(int[] arr, int k) {
        int i = 0;
        int j = k - 1;
        while (i < j) {
            int tmp = arr[i];
            arr[i] = arr[j];
            arr[j] = tmp;
            i++;
            j--;
        }

=======

        List<Integer> ans = new ArrayList<>();
        for (int i = arr.length; i > 0; i--) {
            int index = find(arr, i);
            if (index == i - 1) {
                continue;
            }
            if (index != 0) {
                ans.add(index + 1);
                reverse(arr, index);
            }
            ans.add(i);
            reverse(arr, i - 1);
        }
        return ans;
    }
    private int find(int[] arr, int target) {
        for (int i = 0; i < arr.length; i++) {
            if (arr[i] == target) {
                return i;
            }
        }
        return -1;
    }
    private void reverse(int[] arr, int index) {
        for (int i = 0; i <= index / 2; i++) {
            int temp = arr[i];
            arr[i] = arr[index - i];
            arr[index - i] = temp;
        }

=======

        List<Integer> result = new ArrayList<>();
        for (int i = arr.length; i > 0; i--) {
            int index = find(arr, i);
            if (index != i - 1) {
                reverse(arr, index);
                result.add(index + 1);
                reverse(arr, i - 1);
                result.add(i);
            }
        }
        return result;
    }
    private int find(int[] arr, int target) {
        for (int i = 0; i < arr.length; i++) {
            if (arr[i] == target) {
                return i;
            }
        }
        return -1;
    }
    private void reverse(int[] arr, int end) {
        int start = 0;
        while (start < end) {
            int temp = arr[start];
            arr[start] = arr[end];
            arr[end] = temp;
            start++;
            end--;
        }

=======

        List<Integer> ans = new ArrayList<>();
        for (int i = arr.length; i > 0; i--) {
            int idx = find(arr, i);
            if (idx == i - 1) continue;
            if (idx > 0) {
                flip(arr, idx + 1);
                ans.add(idx + 1);
            }
            flip(arr, i);
            ans.add(i);
        }
        return ans;
    }
    private int find(int[] arr, int target) {
        for (int i = 0; i < arr.length; i++) {
            if (arr[i] == target) return i;
        }
        return -1;
    }
    private void flip(int[] arr, int k) {
        for (int i = 0; i < k / 2; i++) {
            int temp = arr[i];
            arr[i] = arr[k - i - 1];
            arr[k - i - 1] = temp;
        }

=======

        List<Integer> result = new ArrayList<>();
        for(int i = arr.length - 1; i > 0; i--) {
            int index = 0;
            for(int j = 0; j <= i; j++) {
                if(arr[j] == i + 1) {
                    index = j;
                    break;
                }
            }
            if(index == i) continue;
            if(index != 0) {
                result.add(index + 1);
                reverse(arr, index);
            }
            result.add(i + 1);
            reverse(arr, i);
        }
        return result;
    }
    
    private void reverse(int[] arr, int index) {
        int i = 0;
        while(i < index) {
            int temp = arr[i];
            arr[i] = arr[index];
            arr[index] = temp;
            i++;
            index--;
        }

=======

        List<Integer> result = new ArrayList<Integer>();
        int n = arr.length;
        for (int i = n; i > 0; i--) {
            int index = findIndex(arr, i);
            if (index == i - 1) {
                continue;
            }
            result.add(index + 1);
            flip(arr, index + 1);
            result.add(i);
            flip(arr, i);
        }
        return result;
    }

    public int findIndex(int[] arr, int target) {
        for (int i = 0; i < arr.length; i++) {
            if (arr[i] == target) {
                return i;
            }
        }
        return -1;
    }

    public void flip(int[] arr, int k) {
        int i = 0, j = k - 1;
        while (i < j) {
            int temp = arr[i];
            arr[i] = arr[j];
            arr[j] = temp;
            i++;
            j--;
        }

=======

        List<Integer> res = new ArrayList<>();
        int n = arr.length;
        for (int i = n - 1; i >= 1; i--) {
            int index = 0;
            for (int j = 0; j <= i; j++) {
                if (arr[j] == i + 1) {
                    index = j;
                    break;
                }
            }
            if (index == i) {
                continue;
            }
            if (index != 0) {
                res.add(index + 1);
                reverse(arr, index + 1);
            }
            res.add(i + 1);
            reverse(arr, i + 1);
        }
        return res;
    }

    private void reverse(int[] arr, int k) {
        int i = 0, j = k - 1;
        while (i < j) {
            int temp = arr[i];
            arr[i] = arr[j];
            arr[j] = temp;
            i++;
            j--;
        }

=======

        List<Integer> res = new ArrayList<>();
        int n = arr.length;
        for (int i = n; i >= 2; i--) {
            int maxIdx = 0;
            for (int j = 1; j < i; j++) {
                if (arr[j] > arr[maxIdx]) {
                    maxIdx = j;
                }
            }
            if (maxIdx == i - 1) {
                continue;
            }
            if (maxIdx != 0) {
                res.add(maxIdx + 1);
                reverse(arr, maxIdx);
            }
            res.add(i);
            reverse(arr, i - 1);
        }
        return res;
    }
    private void reverse(int[] arr, int i) {
        int l = 0, r = i;
        while (l < r) {
            int t = arr[l];
            arr[l] = arr[r];
            arr[r] = t;
            l++;
            r--;
        }

=======

        List<Integer> ans = new ArrayList<>();
        for(int i = 0; i < arr.length; i++){
            int max = arr[i];
            int maxIndex = i;
            for(int j = i; j < arr.length; j++){
                if(arr[j] > max){
                    max = arr[j];
                    maxIndex = j;
                }
            }
            if(maxIndex != i){
                reverse(arr, maxIndex);
                ans.add(maxIndex+1);
                reverse(arr, i);
                ans.add(i+1);
            }
        }
        return ans;
    }
    
    public void reverse(int[] arr, int index){
        int i = 0;
        int j = index;
        while(i < j){
            int temp = arr[i];
            arr[i] = arr[j];
            arr[j] = temp;
            i++;
            j--;
        }
