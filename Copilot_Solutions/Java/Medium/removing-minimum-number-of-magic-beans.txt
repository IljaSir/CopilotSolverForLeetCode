Synthesizing 10/10 solutions

=======

        int n = beans.length;
        long[] sum = new long[n];
        sum[0] = beans[0];
        for (int i = 1; i < n; i++) {
            sum[i] = sum[i - 1] + beans[i];
        }
        long ans = Long.MAX_VALUE;
        for (int i = 0; i < n; i++) {
            long min = Long.MAX_VALUE;
            for (int j = 0; j < n; j++) {
                long cur = sum[j] - (i == 0 ? 0 : sum[i - 1]);
                if (cur % (j - i + 1) == 0) {
                    min = Math.min(min, cur / (j - i + 1) * (i) - (i == 0 ? 0 : sum[i - 1]));
                }
            }
            ans = Math.min(ans, min);
        }
        return ans;

=======

        int max = 0;
        for (int bean : beans) {
            max = Math.max(max, bean);
        }
        int[] counts = new int[max + 1];
        for (int bean : beans) {
            counts[bean]++;
        }
        long[] sums = new long[max + 1];
        for (int i = 1; i < sums.length; i++) {
            sums[i] = sums[i - 1] + counts[i];
        }
        int[] divisors = new int[max + 1];
        for (int i = 1; i < divisors.length; i++) {
            divisors[i] = 1;
        }
        for (int i = 2; i < divisors.length; i++) {
            if (divisors[i] == 1) {
                for (int j = i; j < divisors.length; j += i) {
                    divisors[j]++;
                }
            }
        }
        long[] dp = new long[max + 1];
        for (int i = 1; i < dp.length; i++) {
            dp[i] = sums[i];
            for (int j = 2; j * j <= i; j++) {
                if (i % j == 0) {
                    dp[i] = Math.min(dp[i], dp[j] + dp[i / j] - sums[j] - sums[i / j]);
                }
            }
        }
        long result = Long.MAX_VALUE;
        for (int i = 1; i <= max; i++) {
            result = Math.min(result, dp[i] - sums[i] + counts[i]);
        }
        return result;

=======

        long sum = 0;
        for (int bean : beans) {
            sum += bean;
        }
        long avg = sum / beans.length;
        long rem = sum % beans.length;
        long res = 0;
        for (int bean : beans) {
            if (bean > avg) {
                res += bean - avg;
            }
            if (bean > avg + 1) {
                res += bean - avg - 1;
            }
        }
        return res;

=======

        long sum = 0;
        for (int bean : beans) {
            sum += bean;
        }
        long avg = sum / beans.length;
        long rem = sum % beans.length;
        long res = 0;
        for (int bean : beans) {
            if (bean > avg) {
                res += bean - avg - 1;
            } else if (rem > 0) {
                res += avg - bean;
                rem--;
            } else {
                res += avg - bean;
            }
        }
        return res;

=======

        int n = beans.length;
        long sum = 0;
        for (int bean : beans) {
            sum += bean;
        }
        long avg = sum / n;
        long res = 0;
        for (int bean : beans) {
            if (bean > avg) {
                res += bean - avg;
            }
        }
        return res;

=======

        int n = beans.length;
        int sum = 0;
        for (int i = 0; i < n; i++) {
            sum += beans[i];
        }
        int avg = sum / n;
        int rem = sum % n;
        int[] b = new int[n];
        for (int i = 0; i < n; i++) {
            b[i] = beans[i] - avg;
        }
        long ans = 0;
        for (int i = 0; i < rem; i++) {
            ans += Math.abs(b[i]);
        }
        for (int i = rem; i < n; i++) {
            ans += Math.abs(b[i]);
        }
        return ans / 2;

=======

        long total = 0;
        int max = 0;
        for (int b : beans) {
            total += b;
            max = Math.max(max, b);
        }
        long[] count = new long[max + 1];
        for (int b : beans) {
            count[b]++;
        }
        long[] sum = new long[max + 1];
        for (int i = 1; i <= max; i++) {
            sum[i] = sum[i - 1] + count[i];
        }
        long result = total;
        for (int i = 1; i <= max; i++) {
            long c = total;
            for (int j = i; j <= max; j += i) {
                c -= sum[Math.min(max, j + i - 1)] - sum[j - 1];
            }
            result = Math.min(result, c);
        }
        return result;

=======

        long ans = Long.MAX_VALUE;
        int n = beans.length;
        long[] pre = new long[n + 1];
        for (int i = 1; i <= n; ++i) {
            pre[i] = pre[i - 1] + beans[i - 1];
        }
        for (int i = 1; i <= n; ++i) {
            long l = 0, r = beans[i - 1];
            while (l < r) {
                long m = l + r >> 1;
                long sum = pre[i] + m;
                if (sum % (i + 1) == 0) {
                    r = m;
                } else {
                    l = m + 1;
                }
            }
            long sum = pre[i] + l;
            if (sum % (i + 1) == 0) {
                ans = Math.min(ans, l);
            }
        }
        return ans;

=======

        int n = beans.length;
        long sum = 0;
        for (int bean : beans) {
            sum += bean;
        }
        long min = Long.MAX_VALUE;
        for (int i = 2; i * i <= sum; i++) {
            if (sum % i == 0) {
                min = Math.min(min, minRemoval(beans, i));
                min = Math.min(min, minRemoval(beans, (int) (sum / i)));
            }
        }
        return min;
    }

    private long minRemoval(int[] beans, int k) {
        long[] remainders = new long[k];
        for (int bean : beans) {
            remainders[bean % k]++;
        }
        long sum = 0;
        for (int i = 0; i < k; i++) {
            if (remainders[i] > 0) {
                sum += (remainders[i] - 1) * k + i;
            }
        }
        return sum;

=======

        int n = beans.length;
        long sum = 0;
        for (int b : beans) {
            sum += b;
        }
        long avg = sum / n;
        long mod = sum % n;
        long res = 0;
        for (int i = 0; i < n; i++) {
            if (i < mod) {
                res += Math.abs(beans[i] - avg - 1);
            } else {
                res += Math.abs(beans[i] - avg);
            }
        }
        return res / 2;
