Synthesizing 10/10 solutions

=======

        int max = 0;
        int count = 1;
        for (int i = 1; i < s.length(); i++) {
            if (s.charAt(i) - s.charAt(i - 1) == 1) {
                count++;
            } else {
                max = Math.max(max, count);
                count = 1;
            }
        }
        return Math.max(max, count);

=======

        int max = 0;
        int count = 1;
        for (int i = 1; i < s.length(); i++) {
            if (s.charAt(i) - s.charAt(i - 1) == 1) {
                count++;
            } else {
                count = 1;
            }
            max = Math.max(max, count);
        }
        return max;

=======

        int max = 1;
        int cur = 1;
        for (int i = 1; i < s.length(); i++) {
            if (s.charAt(i) > s.charAt(i - 1)) {
                cur++;
            } else {
                cur = 1;
            }
            max = Math.max(max, cur);
        }
        return max;

=======

        int count = 0;
        int max = 0;
        for (int i = 0; i < s.length() - 1; i++) {
            if (s.charAt(i) <= s.charAt(i + 1)) {
                count++;
            } else {
                count = 0;
            }
            max = Math.max(max, count);
        }
        return max + 1;

=======

        int res = 0, count = 0;
        for (int i = 0; i < s.length(); i++) {
            if (i > 0 && s.charAt(i) > s.charAt(i - 1)) {
                count++;
            } else {
                count = 1;
            }
            res = Math.max(res, count);
        }
        return res;

=======

        int longest = 0, current = 1;
        for (int i = 1; i < s.length(); i++) {
            if (s.charAt(i) > s.charAt(i - 1)) {
                current++;
            } else {
                longest = Math.max(longest, current);
                current = 1;
            }
        }
        return Math.max(longest, current);

=======

        int res = 0;
        int count = 0;
        for (int i = 0; i < s.length(); i++) {
            if (i > 0 && s.charAt(i) > s.charAt(i - 1)) {
                count++;
            } else {
                count = 1;
            }
            res = Math.max(res, count);
        }
        return res;

=======

        int max = 0, count = 1;
        for (int i = 0; i < s.length() - 1; ++i) {
            if (s.charAt(i) < s.charAt(i + 1)) {
                max = Math.max(max, ++count);
            } else {
                count = 1;
            }
        }
        return max;

=======

        int max = 0;
        int count = 0;
        char[] arr = s.toCharArray();
        for (int i = 0; i < arr.length; i++) {
            if (i > 0 && arr[i] > arr[i - 1]) {
                count++;
            } else {
                count = 1;
            }
            max = Math.max(max, count);
        }
        return max;

=======

        int n = s.length();
        int max = 0;
        int count = 1;
        for(int i = 1; i < n; i++) {
            if(s.charAt(i) - s.charAt(i - 1) == 1) {
                count++;
            } else {
                max = Math.max(max, count);
                count = 1;
            }
        }
        return Math.max(max, count);
