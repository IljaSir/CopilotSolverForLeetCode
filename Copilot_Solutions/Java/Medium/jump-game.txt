Synthesizing 10/10 solutions

=======

        int lastGoodIndex = nums.length - 1;
        for (int i = nums.length - 1; i >= 0; i--) {
            if (i + nums[i] >= lastGoodIndex) {
                lastGoodIndex = i;
            }
        }
        return lastGoodIndex == 0;

=======

        int max = 0;
        for (int i = 0; i < nums.length; i++) {
            if (max < i) {
                return false;
            }
            max = Math.max(max, i + nums[i]);
        }
        return true;

=======

        int n = nums.length;
        boolean[] dp = new boolean[n];
        dp[0] = true;
        for (int i = 0; i < n; ++i) {
            if (dp[i]) {
                for (int j = 1; j <= nums[i]; ++j) {
                    if (i + j >= n) {
                        break;
                    }
                    dp[i + j] = true;
                }
            }
        }
        return dp[n - 1];

=======

        int n = nums.length;
        int max = 0;
        for (int i = 0; i < n; i++) {
            if (i > max) {
                return false;
            }
            max = Math.max(max, i + nums[i]);
        }
        return true;

=======

        int n = nums.length;
        int[] dp = new int[n];
        dp[0] = nums[0];
        for (int i = 1; i < n; i++) {
            dp[i] = Math.max(dp[i - 1], nums[i]) - 1;
            if (dp[i] < 0) {
                return false;
            }
        }
        return true;

=======

        int n = nums.length;
        int maxReach = 0;
        for (int i = 0; i < n; i++) {
            if (i > maxReach) {
                return false;
            }
            maxReach = Math.max(maxReach, i + nums[i]);
        }
        return true;

=======

        int n = nums.length;
        if (n == 1) {
            return true;
        }
        int max = 0;
        for (int i = 0; i < n; i++) {
            if (i > max) {
                return false;
            }
            max = Math.max(max, i + nums[i]);
            if (max >= n - 1) {
                return true;
            }
        }
        return false;

=======

        int n = nums.length;
        int[] dp = new int[n];
        Arrays.fill(dp, -1);
        dp[0] = 0;
        for (int i = 0; i < n; i++) {
            int max = Math.min(i + nums[i], n - 1);
            for (int j = i + 1; j <= max; j++) {
                if (dp[j] == -1) {
                    dp[j] = dp[i] + 1;
                } else {
                    dp[j] = Math.min(dp[i] + 1, dp[j]);
                }
            }
        }
        return dp[n - 1] != -1;
    }
}

=======

        int n = nums.length;
        int max = 0;
        for (int i = 0; i < n; i++) {
            if (i > max) {
                return false;
            } else {
                max = Math.max(max, i + nums[i]);
                if (max >= n - 1) {
                    return true;
                }
            }
        }
        return false;

=======

        int n = nums.length;
        int[] dp = new int[n];
        for (int i = 0; i < n; i++) {
            dp[i] = i + nums[i];
        }
        int max = 0;
        for (int i = 0; i < n; i++) {
            if (i > max) {
                return false;
            }
            max = Math.max(max, dp[i]);
        }
        return true;
