Synthesizing 10/10 solutions

=======

        int l = 0, r = removable.length;
        while (l < r) {
            int m = (l + r + 1) / 2;
            if (check(s, p, removable, m)) {
                l = m;
            } else {
                r = m - 1;
            }
        }
        return l;
    }
    private boolean check(String s, String p, int[] removable, int k) {
        boolean[] removed = new boolean[s.length()];
        for (int i = 0; i < k; i++) {
            removed[removable[i]] = true;
        }
        int j = 0;
        for (int i = 0; i < s.length() && j < p.length(); i++) {
            if (!removed[i] && s.charAt(i) == p.charAt(j)) {
                j++;
            }
        }
        return j == p.length();

=======

        int l = 0, r = removable.length;
        while (l < r) {
            int mid = (l + r + 1) / 2;
            if (check(s, p, removable, mid)) {
                l = mid;
            } else {
                r = mid - 1;
            }
        }
        return l;
    }

    private boolean check(String s, String p, int[] removable, int k) {
        boolean[] remove = new boolean[s.length()];
        for (int i = 0; i < k; i++) {
            remove[removable[i]] = true;
        }
        int j = 0;
        for (int i = 0; i < s.length() && j < p.length(); i++) {
            if (!remove[i] && s.charAt(i) == p.charAt(j)) {
                j++;
            }
        }
        return j == p.length();

=======

        int l = 0;
        int r = removable.length;
        while (l < r) {
            int mid = (l + r + 1) / 2;
            if (check(s, p, removable, mid)) {
                l = mid;
            } else {
                r = mid - 1;
            }
        }
        return l;
    }

    private boolean check(String s, String p, int[] removable, int k) {
        boolean[] removed = new boolean[s.length()];
        for (int i = 0; i < k; i++) {
            removed[removable[i]] = true;
        }
        int j = 0;
        for (int i = 0; i < s.length() && j < p.length(); i++) {
            if (!removed[i] && s.charAt(i) == p.charAt(j)) {
                j++;
            }
        }
        return j == p.length();

=======

        int l = 0;
        int r = removable.length;
        while (l < r) {
            int m = l + (r - l + 1) / 2;
            if (isSubsequence(s, p, removable, m)) {
                l = m;
            } else {
                r = m - 1;
            }
        }
        return l;
    }
    public boolean isSubsequence(String s, String p, int[] removable, int m) {
        boolean[] removed = new boolean[s.length()];
        for (int i = 0; i < m; i++) {
            removed[removable[i]] = true;
        }
        int j = 0;
        for (int i = 0; i < s.length() && j < p.length(); i++) {
            if (!removed[i] && s.charAt(i) == p.charAt(j)) {
                j++;
            }
        }
        return j == p.length();

=======

        int n = removable.length;
        int l = 0, r = n;
        while (l < r) {
            int m = (l + r + 1) / 2;
            if (check(s, p, removable, m)) {
                l = m;
            } else {
                r = m - 1;
            }
        }
        return l;
    }
    private boolean check(String s, String p, int[] removable, int k) {
        int n = s.length();
        boolean[] remove = new boolean[n];
        for (int i = 0; i < k; i++) {
            remove[removable[i]] = true;
        }
        int j = 0;
        for (int i = 0; i < n && j < p.length(); i++) {
            if (remove[i]) {
                continue;
            }
            if (s.charAt(i) == p.charAt(j)) {
                j++;
            }
        }
        return j == p.length();

=======

        int n = removable.length;
        int left = 0, right = n;
        while (left < right) {
            int mid = left + (right - left + 1) / 2;
            if (check(s, p, removable, mid)) {
                left = mid;
            } else {
                right = mid - 1;
            }
        }
        return left;
    }

    private boolean check(String s, String p, int[] removable, int k) {
        Set<Integer> set = new HashSet<>();
        for (int i = 0; i < k; i++) {
            set.add(removable[i]);
        }
        int i = 0, j = 0;
        while (i < s.length() && j < p.length()) {
            if (!set.contains(i) && s.charAt(i) == p.charAt(j)) {
                j++;
            }
            i++;
        }
        return j == p.length();

=======

        int lo = 0, hi = removable.length;
        while (lo < hi) {
            int mid = (lo + hi + 1) >>> 1;
            if (isSubsequence(s, p, removable, mid)) lo = mid;
            else hi = mid - 1;
        }
        return lo;
    }

    public boolean isSubsequence(String s, String p, int[] removable, int k) {
        boolean[] marked = new boolean[s.length()];
        for (int i = 0; i < k; i++) marked[removable[i]] = true;
        int i = 0, j = 0;
        while (i < s.length() && j < p.length()) {
            if (!marked[i] && s.charAt(i) == p.charAt(j)) j++;
            i++;
        }
        return j == p.length();

=======

        int left = 0, right = removable.length, mid;
        while (left < right) {
            mid = left + (right - left + 1) / 2;
            if (check(s, p, removable, mid)) {
                left = mid;
            } else {
                right = mid - 1;
            }
        }
        return left;
    }
    private boolean check(String s, String p, int[] removable, int k) {
        boolean[] removed = new boolean[s.length()];
        for (int i = 0; i < k; i++) {
            removed[removable[i]] = true;
        }
        int j = 0;
        for (int i = 0; i < s.length() && j < p.length(); i++) {
            if (!removed[i] && s.charAt(i) == p.charAt(j)) {
                j++;
            }
        }
        return j == p.length();

=======

        int lo = 0, hi = removable.length;
        while (lo < hi) {
            int mid = (lo + hi + 1) / 2;
            if (isSubsequence(s, p, mid, removable)) {
                lo = mid;
            } else {
                hi = mid - 1;
            }
        }
        return lo;
    }

    private boolean isSubsequence(String s, String p, int k, int[] removable) {
        Set<Integer> set = new HashSet<>();
        for (int i = 0; i < k; i++) {
            set.add(removable[i]);
        }
        int j = 0;
        for (int i = 0; i < s.length() && j < p.length(); i++) {
            if (!set.contains(i) && s.charAt(i) == p.charAt(j)) {
                j++;
            }
        }
        return j == p.length();

=======

        int[] rs = new int[removable.length];
        for (int i = 0; i < removable.length; i++) {
            rs[i] = removable[i];
        }
        int lo = 0, hi = removable.length;
        while (lo < hi) {
            int mi = lo + (hi - lo + 1) / 2;
            if (isSub(s, p, rs, mi)) {
                lo = mi;
            } else {
                hi = mi - 1;
            }
        }
        return lo;
    }
    private boolean isSub(String s, String p, int[] rs, int k) {
        int j = 0;
        boolean[] rm = new boolean[s.length()];
        for (int i = 0; i < k; i++) {
            rm[rs[i]] = true;
        }
        for (int i = 0; i < s.length() && j < p.length(); i++) {
            if (!rm[i] && s.charAt(i) == p.charAt(j)) {
                j++;
            }
        }
        return j == p.length();
