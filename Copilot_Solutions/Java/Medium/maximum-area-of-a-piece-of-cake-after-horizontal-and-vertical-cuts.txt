Synthesizing 10/10 solutions (Duplicates hidden)

=======

        Arrays.sort(horizontalCuts);
        Arrays.sort(verticalCuts);
        int maxHeight = Math.max(horizontalCuts[0], h - horizontalCuts[horizontalCuts.length - 1]);
        int maxWidth = Math.max(verticalCuts[0], w - verticalCuts[verticalCuts.length - 1]);
        for (int i = 1; i < horizontalCuts.length; i++) {
            maxHeight = Math.max(maxHeight, horizontalCuts[i] - horizontalCuts[i - 1]);
        }
        for (int i = 1; i < verticalCuts.length; i++) {
            maxWidth = Math.max(maxWidth, verticalCuts[i] - verticalCuts[i - 1]);
        }
        return (int)((long)maxHeight * maxWidth % 1000000007);

=======

        Arrays.sort(horizontalCuts);
        Arrays.sort(verticalCuts);
        int maxH = Math.max(horizontalCuts[0], h - horizontalCuts[horizontalCuts.length - 1]);
        int maxV = Math.max(verticalCuts[0], w - verticalCuts[verticalCuts.length - 1]);
        for (int i = 1; i < horizontalCuts.length; i++) {
            maxH = Math.max(maxH, horizontalCuts[i] - horizontalCuts[i - 1]);
        }
        for (int i = 1; i < verticalCuts.length; i++) {
            maxV = Math.max(maxV, verticalCuts[i] - verticalCuts[i - 1]);
        }
        return (int) ((long) maxH * maxV % 1000000007);

=======

        Arrays.sort(horizontalCuts);
        Arrays.sort(verticalCuts);
        int maxH = Math.max(horizontalCuts[0], h - horizontalCuts[horizontalCuts.length - 1]);
        int maxW = Math.max(verticalCuts[0], w - verticalCuts[verticalCuts.length - 1]);
        for (int i = 1; i < horizontalCuts.length; i++) {
            maxH = Math.max(maxH, horizontalCuts[i] - horizontalCuts[i - 1]);
        }
        for (int i = 1; i < verticalCuts.length; i++) {
            maxW = Math.max(maxW, verticalCuts[i] - verticalCuts[i - 1]);
        }
        return (int) ((long) maxH * maxW % 1000000007);

=======

        Arrays.sort(horizontalCuts);
        Arrays.sort(verticalCuts);
        long maxH = Math.max(horizontalCuts[0], h - horizontalCuts[horizontalCuts.length - 1]);
        long maxV = Math.max(verticalCuts[0], w - verticalCuts[verticalCuts.length - 1]);
        for (int i = 1; i < horizontalCuts.length; i++) {
            maxH = Math.max(maxH, horizontalCuts[i] - horizontalCuts[i - 1]);
        }
        for (int i = 1; i < verticalCuts.length; i++) {
            maxV = Math.max(maxV, verticalCuts[i] - verticalCuts[i - 1]);
        }
        return (int)(maxH * maxV % 1000000007);

=======

        int modulo = 1000000007;
        Arrays.sort(horizontalCuts);
        Arrays.sort(verticalCuts);
        int maxH = Math.max(horizontalCuts[0], h - horizontalCuts[horizontalCuts.length - 1]);
        int maxV = Math.max(verticalCuts[0], w - verticalCuts[verticalCuts.length - 1]);
        for (int i = 1; i < horizontalCuts.length; i++) {
            maxH = Math.max(maxH, horizontalCuts[i] - horizontalCuts[i - 1]);
        }
        for (int i = 1; i < verticalCuts.length; i++) {
            maxV = Math.max(maxV, verticalCuts[i] - verticalCuts[i - 1]);
        }
        return (int) ((long) maxH * maxV % modulo);

=======

        int[] horizontalCuts2 = new int[horizontalCuts.length + 2];
        int[] verticalCuts2 = new int[verticalCuts.length + 2];
        System.arraycopy(horizontalCuts, 0, horizontalCuts2, 1, horizontalCuts.length);
        System.arraycopy(verticalCuts, 0, verticalCuts2, 1, verticalCuts.length);
        horizontalCuts2[0] = 0;
        horizontalCuts2[horizontalCuts2.length - 1] = h;
        verticalCuts2[0] = 0;
        verticalCuts2[verticalCuts2.length - 1] = w;
        Arrays.sort(horizontalCuts2);
        Arrays.sort(verticalCuts2);
        int maxHeight = 0;
        int maxWidth = 0;
        for (int i = 1; i < horizontalCuts2.length; i++) {
            maxHeight = Math.max(maxHeight, horizontalCuts2[i] - horizontalCuts2[i - 1]);
        }
        for (int i = 1; i < verticalCuts2.length; i++) {
            maxWidth = Math.max(maxWidth, verticalCuts2[i] - verticalCuts2[i - 1]);
        }
        return (int) ((long) maxHeight * maxWidth % 1000000007);

=======

        int mod = (int) (Math.pow(10,9)+7);
        Arrays.sort(horizontalCuts);
        Arrays.sort(verticalCuts);
        int maxH = Math.max(horizontalCuts[0], h-horizontalCuts[horizontalCuts.length-1]);
        int maxW = Math.max(verticalCuts[0], w-verticalCuts[verticalCuts.length-1]);
        for(int i=1;i<horizontalCuts.length;i++){
            maxH = Math.max(maxH, horizontalCuts[i]-horizontalCuts[i-1]);
        }
        for(int i=1;i<verticalCuts.length;i++){
            maxW = Math.max(maxW, verticalCuts[i]-verticalCuts[i-1]);
        }
        return (int)(((long)maxH*(long)maxW)%mod);
