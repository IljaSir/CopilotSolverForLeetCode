Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int[] inDegree = new int[n];
        for (List<Integer> edge : edges) {
            inDegree[edge.get(1)]++;
        }
        List<Integer> result = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            if (inDegree[i] == 0) {
                result.add(i);
            }
        }
        return result;

=======

        int[] inDegree = new int[n];
        for (List<Integer> edge : edges) {
            inDegree[edge.get(1)]++;
        }
        List<Integer> res = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            if (inDegree[i] == 0) {
                res.add(i);
            }
        }
        return res;

=======

        List<Integer> result = new ArrayList<>();
        boolean[] visited = new boolean[n];
        for (List<Integer> edge : edges) {
            visited[edge.get(1)] = true;
        }
        for (int i = 0; i < visited.length; i++) {
            if (!visited[i]) {
                result.add(i);
            }
        }
        return result;

=======

        int[] indegree = new int[n];
        for (List<Integer> edge : edges) {
            indegree[edge.get(1)]++;
        }
        List<Integer> ans = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            if (indegree[i] == 0) {
                ans.add(i);
            }
        }
        return ans;

=======

        List<Integer> res = new ArrayList<>();
        int[] inDegree = new int[n];
        for (List<Integer> edge : edges) {
            inDegree[edge.get(1)]++;
        }
        for (int i = 0; i < n; i++) {
            if (inDegree[i] == 0) {
                res.add(i);
            }
        }
        return res;

=======

        List<Integer> result = new ArrayList<>();
        int[] degree = new int[n];
        for (List<Integer> edge : edges) {
            degree[edge.get(1)]++;
        }
        for (int i = 0; i < n; i++) {
            if (degree[i] == 0) {
                result.add(i);
            }
        }
        return result;

=======

        int[] count = new int[n];
        for (List<Integer> edge : edges) {
            count[edge.get(1)]++;
        }
        List<Integer> ans = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            if (count[i] == 0) {
                ans.add(i);
            }
        }
        return ans;

=======

        List<Integer> ans = new ArrayList<Integer>();
        int[] indegree = new int[n];
        for (List<Integer> edge : edges) {
            indegree[edge.get(1)]++;
        }
        for (int i = 0; i < n; i++) {
            if (indegree[i] == 0) {
                ans.add(i);
            }
        }
        return ans;

=======

        List<Integer> res = new ArrayList<>();
        int[] inDegree = new int[n];
        for (List<Integer> edge: edges)
            inDegree[edge.get(1)]++;
        for (int i = 0; i < n; i++)
            if (inDegree[i] == 0)
                res.add(i);
        return res;
