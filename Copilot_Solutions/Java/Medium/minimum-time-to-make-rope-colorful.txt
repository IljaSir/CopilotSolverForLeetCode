Synthesizing 10/10 solutions

=======

        int n = colors.length();
        int[][] dp = new int[n][3];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < 3; j++) {
                dp[i][j] = Integer.MAX_VALUE;
            }
        }
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < 3; j++) {
                int c = colors.charAt(i) - 'a';
                if (c == j) {
                    dp[i][j] = neededTime[i];
                    if (i > 0) {
                        for (int k = 0; k < 3; k++) {
                            if (k != j) {
                                dp[i][j] = Math.min(dp[i][j], dp[i - 1][k]);
                            }
                        }
                    }
                } else {
                    if (i > 0) {
                        dp[i][j] = dp[i - 1][j] + neededTime[i];
                    }
                }
            }
        }
        int ans = Integer.MAX_VALUE;
        for (int i = 0; i < 3; i++) {
            ans = Math.min(ans, dp[n - 1][i]);
        }
        return ans;

=======

        int n = colors.length();
        int[][] dp = new int[n][3];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < 3; j++) {
                dp[i][j] = Integer.MAX_VALUE;
            }
        }
        for (int j = 0; j < 3; j++) {
            dp[0][j] = j == colors.charAt(0) - 'a' ? neededTime[0] : 0;
        }
        for (int i = 1; i < n; i++) {
            int c = colors.charAt(i) - 'a';
            for (int j = 0; j < 3; j++) {
                if (c == j) {
                    dp[i][j] = Math.min(dp[i][j], dp[i - 1][j] + neededTime[i]);
                } else {
                    dp[i][j] = Math.min(dp[i][j], dp[i - 1][j]);
                }
            }
        }
        int ans = Integer.MAX_VALUE;
        for (int j = 0; j < 3; j++) {
            ans = Math.min(ans, dp[n - 1][j]);
        }
        return ans;

=======

        int n = colors.length();
        int[][] dp = new int[n][26];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < 26; j++) {
                dp[i][j] = i == 0 ? 0 : dp[i - 1][j];
            }
            dp[i][colors.charAt(i) - 'a'] += neededTime[i];
        }
        int res = Integer.MAX_VALUE;
        for (int i = 0; i < 26; i++) {
            res = Math.min(res, dp[n - 1][i]);
        }
        return res;

=======

        int n = colors.length();
        int[][] dp = new int[n][26];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < 26; j++) {
                dp[i][j] = Integer.MAX_VALUE;
            }
        }
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < 26; j++) {
                if (i == 0) {
                    if (colors.charAt(i) - 'a' == j) {
                        dp[i][j] = neededTime[i];
                    } else {
                        dp[i][j] = 0;
                    }
                } else {
                    if (colors.charAt(i) - 'a' == j) {
                        dp[i][j] = dp[i - 1][j] + neededTime[i];
                    } else {
                        dp[i][j] = Math.min(dp[i - 1][colors.charAt(i) - 'a'], dp[i - 1][j]);
                    }
                }
            }
        }
        int ans = Integer.MAX_VALUE;
        for (int i = 0; i < 26; i++) {
            ans = Math.min(ans, dp[n - 1][i]);
        }
        return ans;

=======

        int n = colors.length();
        int[][] dp = new int[n][3];
        for(int i=0; i<n; i++){
            for(int j=0; j<3; j++){
                dp[i][j] = Integer.MAX_VALUE;
            }
        }
        for(int i=0; i<n; i++){
            int c = colors.charAt(i)-'a';
            for(int j=0; j<3; j++){
                if(i==0){
                    if(c==j){
                        dp[i][j] = neededTime[i];
                    }
                }else{
                    if(c==j){
                        dp[i][j] = Math.min(dp[i-1][j], dp[i-1][(j+1)%3]+neededTime[i]);
                    }else{
                        dp[i][j] = dp[i-1][j];
                    }
                }
            }
        }
        return Math.min(dp[n-1][0], Math.min(dp[n-1][1], dp[n-1][2]));

=======

        int n = colors.length();
        int[] dp = new int[n];
        int[] last = new int[26];
        Arrays.fill(last, -1);
        int ans = 0;
        for (int i = 0; i < n; i++) {
            int c = colors.charAt(i) - 'a';
            dp[i] = neededTime[i];
            if (last[c] >= 0) dp[i] = Math.min(dp[i], dp[last[c]] + neededTime[i]);
            if (i > 0) dp[i] = Math.min(dp[i], dp[i-1]);
            last[c] = i;
            ans = Math.max(ans, dp[i]);
        }
        return ans;

=======

        int n = colors.length();
        int[][] dp = new int[n][3];
        for (int[] d: dp) {
            Arrays.fill(d, Integer.MAX_VALUE);
        }
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < 3; j++) {
                if (i == 0) {
                    dp[i][j] = (colors.charAt(i) - 'a' == j ? 0 : neededTime[i]);
                }
                else {
                    for (int k = 0; k < 3; k++) {
                        if (j != k) {
                            dp[i][j] = Math.min(dp[i][j], dp[i - 1][k] + (colors.charAt(i) - 'a' == j ? 0 : neededTime[i]));
                        }
                    }
                }
            }
        }
        return Math.min(dp[n - 1][0], Math.min(dp[n - 1][1], dp[n - 1][2]));

=======

        int n = colors.length();
        int[][] dp = new int[n][3];
        int[] last = new int[3];
        for (int i = 0; i < n; i++) {
            int c = colors.charAt(i) - 'a';
            for (int j = 0; j < 3; j++) {
                dp[i][j] = dp[i - 1][j];
            }
            dp[i][c] = Math.max(dp[i - 1][c], last[c]) + neededTime[i];
            last[c] = dp[i][c];
        }
        return Math.min(dp[n - 1][0], Math.min(dp[n - 1][1], dp[n - 1][2]));

=======

        int n = colors.length();
        int dp[][] = new int[n][26];
        for (int i = 0; i < n; i++) {
            Arrays.fill(dp[i], -1);
        }
        return minCost(colors, neededTime, 0, -1, dp);
    }
    
    private int minCost(String colors, int[] neededTime, int i, int prev, int[][] dp) {
        if (i == colors.length()) {
            return 0;
        }
        if (dp[i][prev] != -1) {
            return dp[i][prev];
        }
        int min = Integer.MAX_VALUE;
        for (int j = 0; j < 26; j++) {
            if (j == prev) {
                min = Math.min(min, minCost(colors, neededTime, i + 1, prev, dp));
            } else {
                min = Math.min(min, minCost(colors, neededTime, i + 1, j, dp) + neededTime[i]);
            }
        }
        dp[i][prev] = min;
        return min;

=======

        int n = colors.length();
        int[] dp = new int[n];
        int sum = 0;
        int max = 0;
        for (int i = 0; i < n; i++) {
            dp[i] = neededTime[i];
            if (i > 0 && colors.charAt(i) == colors.charAt(i - 1)) {
                dp[i] = Math.max(dp[i], dp[i - 1]);
            }
            max = Math.max(max, dp[i]);
            sum += neededTime[i];
        }
        return sum - max;
