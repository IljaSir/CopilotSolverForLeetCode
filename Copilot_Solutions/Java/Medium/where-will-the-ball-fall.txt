Synthesizing 10/10 solutions

=======

        int m = grid.length;
        int n = grid[0].length;
        int[] res = new int[n];
        for (int i = 0; i < n; i++) {
            res[i] = i;
        }
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == 1) {
                    if (j == n - 1 || grid[i][j + 1] == -1) {
                        res[j] = -1;
                    } else {
                        res[j] = j + 1;
                    }
                } else {
                    if (j == 0 || grid[i][j - 1] == 1) {
                        res[j] = -1;
                    } else {
                        res[j] = j - 1;
                    }
                }
            }
        }
        return res;

=======

        int m = grid.length;
        int n = grid[0].length;
        int[] res = new int[n];
        for (int i = 0; i < n; i++) {
            res[i] = i;
        }
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (res[j] == -1) {
                    continue;
                }
                if (grid[i][res[j]] == 1) {
                    if (res[j] + 1 >= n || grid[i][res[j] + 1] == -1) {
                        res[j] = -1;
                    } else {
                        res[j]++;
                    }
                } else {
                    if (res[j] - 1 < 0 || grid[i][res[j] - 1] == 1) {
                        res[j] = -1;
                    } else {
                        res[j]--;
                    }
                }
            }
        }
        return res;

=======

        int m = grid.length;
        int n = grid[0].length;
        int[] result = new int[n];
        for (int i = 0; i < n; i++) {
            result[i] = i;
        }
        for (int i = 0; i < m; i++) {
            int[] temp = new int[n];
            for (int j = 0; j < n; j++) {
                temp[j] = -1;
            }
            for (int j = 0; j < n; j++) {
                if (result[j] == -1) {
                    continue;
                }
                if (grid[i][j] == 1) {
                    if (j + 1 == n) {
                        temp[j] = -1;
                    } else if (grid[i][j + 1] == -1) {
                        temp[j] = -1;
                    } else {
                        temp[j + 1] = result[j];
                    }
                } else {
                    if (j - 1 < 0) {
                        temp[j] = -1;
                    } else if (grid[i][j - 1] == 1) {
                        temp[j] = -1;
                    } else {
                        temp[j - 1] = result[j];
                    }
                }
            }
            result = temp;
        }
        return result;

=======

        int m = grid.length;
        int n = grid[0].length;
        int[] result = new int[n];
        for (int i = 0; i < n; i++) {
            result[i] = i;
        }
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == 1) {
                    if (j == n - 1 || grid[i][j + 1] == -1) {
                        result[j] = -1;
                    } else {
                        result[j] = result[j + 1];
                    }
                } else {
                    if (j == 0 || grid[i][j - 1] == 1) {
                        result[j] = -1;
                    } else {
                        result[j] = result[j - 1];
                    }
                }
            }
        }
        return result;

=======

        int m = grid.length;
        int n = grid[0].length;
        int[] ans = new int[n];
        for (int i = 0; i < n; i++) {
            int x = 0;
            int y = i;
            while (x < m) {
                if (grid[x][y] == 1) {
                    if (y == n - 1 || grid[x][y + 1] == -1) {
                        ans[i] = -1;
                        break;
                    } else {
                        y++;
                    }
                } else {
                    if (y == 0 || grid[x][y - 1] == 1) {
                        ans[i] = -1;
                        break;
                    } else {
                        y--;
                    }
                }
                x++;
            }
            if (x == m) {
                ans[i] = y;
            }
        }
        return ans;

=======

        int m = grid.length;
        int n = grid[0].length;
        int[] ans = new int[n];
        for (int i = 0; i < n; i++) {
            int x = 0;
            int y = i;
            while (x < m) {
                if (grid[x][y] == 1) {
                    if (y + 1 < n && grid[x][y + 1] == 1) {
                        y++;
                    } else {
                        ans[i] = -1;
                        break;
                    }
                } else {
                    if (y - 1 >= 0 && grid[x][y - 1] == -1) {
                        y--;
                    } else {
                        ans[i] = -1;
                        break;
                    }
                }
                x++;
            }
            if (x == m) {
                ans[i] = y;
            }
        }
        return ans;

=======

        int m = grid.length;
        int n = grid[0].length;
        int[] res = new int[n];
        for (int i = 0; i < n; i++) {
            int cur = i;
            for (int j = 0; j < m; j++) {
                if (grid[j][cur] == 1) {
                    if (cur == n - 1 || grid[j][cur + 1] == -1) {
                        cur = -1;
                        break;
                    }
                    cur++;
                } else {
                    if (cur == 0 || grid[j][cur - 1] == 1) {
                        cur = -1;
                        break;
                    }
                    cur--;
                }
            }
            res[i] = cur;
        }
        return res;

=======

        int m = grid.length;
        int n = grid[0].length;
        int[] result = new int[n];
        for (int i = 0; i < n; i++) {
            int c = i;
            for (int j = 0; j < m; j++) {
                if (grid[j][c] == 1 && c < n - 1 && grid[j][c + 1] == 1) {
                    c++;
                } else if (grid[j][c] == -1 && c > 0 && grid[j][c - 1] == -1) {
                    c--;
                } else {
                    c = -1;
                    break;
                }
            }
            result[i] = c;
        }
        return result;

=======

        int m = grid.length;
        int n = grid[0].length;
        int[] res = new int[n];
        for (int i = 0; i < n; ++i) {
            int x = 0;
            int y = i;
            while (x < m) {
                if (grid[x][y] == 1) {
                    if (y + 1 == n || grid[x][y + 1] == -1) {
                        res[i] = -1;
                        break;
                    } else {
                        ++y;
                        ++x;
                    }
                } else {
                    if (y - 1 == -1 || grid[x][y - 1] == 1) {
                        res[i] = -1;
                        break;
                    } else {
                        --y;
                        ++x;
                    }
                }
            }
            if (x == m) {
                res[i] = y;
            }
        }
        return res;

=======

        int[] ans = new int[grid[0].length];
        for (int i = 0; i < grid[0].length; i++) {
            int r = 0, c = i;
            while (r < grid.length) {
                if (grid[r][c] == 1) {
                    if (c == grid[0].length - 1 || grid[r][c + 1] == -1) {
                        ans[i] = -1;
                        break;
                    }
                    r++;
                    c++;
                } else {
                    if (c == 0 || grid[r][c - 1] == 1) {
                        ans[i] = -1;
                        break;
                    }
                    r++;
                    c--;
                }
            }
            if (r == grid.length) {
                ans[i] = c;
            }
        }
        return ans;
