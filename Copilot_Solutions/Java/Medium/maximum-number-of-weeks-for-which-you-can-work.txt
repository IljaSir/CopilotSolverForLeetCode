Synthesizing 10/10 solutions

=======

        long sum = 0;
        long max = 0;
        for (int i = 0; i < milestones.length; i++) {
            sum += milestones[i];
            max = Math.max(max, milestones[i]);
        }
        if (sum - max < max) {
            return sum - max;
        }
        return 2 * (sum - max) + 1;

=======

        long sum = 0;
        long max = 0;
        for (int i = 0; i < milestones.length; i++) {
            sum += milestones[i];
            max = Math.max(max, milestones[i]);
        }
        long diff = sum - max;
        if (diff >= max) {
            return sum;
        } else {
            return 2 * diff + 1;
        }

=======

        long sum = 0;
        long max = 0;
        for (int i = 0; i < milestones.length; i++) {
            sum += milestones[i];
            max = Math.max(max, milestones[i]);
        }
        long left = sum - max;
        return left < max ? left * 2 + 1 : sum;

=======

        long max = 0;
        long sum = 0;
        for (int i = 0; i < milestones.length; i++) {
            max = Math.max(max, milestones[i]);
            sum += milestones[i];
        }
        return Math.min(sum, 2 * max - 1);

=======

        long max = 0;
        long sum = 0;
        for (int i = 0; i < milestones.length; i++) {
            max = Math.max(max, milestones[i]);
            sum += milestones[i];
        }
        return Math.min(sum, (max << 1) - 1);

=======

        long max = 0;
        long sum = 0;
        for (int i = 0; i < milestones.length; i++) {
            max = Math.max(max, milestones[i]);
            sum += milestones[i];
        }
        long remain = sum - max;
        return remain >= max ? sum : remain * 2 + 1;

=======

        long sum = 0;
        long max = 0;
        for (int m : milestones) {
            sum += m;
            max = Math.max(max, m);
        }
        return Math.min(sum, max * 2 - 1);

=======

        long sum = 0;
        long max = 0;
        for (int m : milestones) {
            sum += m;
            max = Math.max(max, m);
        }
        return Math.min(sum, (max << 1) - 1);

=======

        long sum = 0;
        long max = 0;
        for (int i : milestones) {
            sum += i;
            max = Math.max(max, i);
        }
        return Math.min(sum, 2 * (sum - max) + 1);

=======

        long sum = 0;
        long max = 0;
        for (int x : milestones) {
            sum += x;
            max = Math.max(max, x);
        }
        if (max > sum - max) {
            return 2 * (sum - max) + 1;
        }
        return sum;
