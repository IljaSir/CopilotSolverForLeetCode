Synthesizing 10/10 solutions (Duplicates hidden)

=======

        List<String> list = new ArrayList<>();
        backtrack(list, "", 0, 0, n);
        return list;
    }
    
    public void backtrack(List<String> list, String str, int open, int close, int max){
        if (str.length() == max * 2) {
            list.add(str);
            return;
        }
        if (open < max) {
            backtrack(list, str + "(", open + 1, close, max);
        }
        if (close < open) {
            backtrack(list, str + ")", open, close + 1, max);
        }

=======

        List<String> result = new ArrayList<>();
        generateParenthesis(result, "", 0, 0, n);
        return result;
    }
    
    private void generateParenthesis(List<String> result, String current, int open, int close, int n) {
        if (current.length() == n * 2) {
            result.add(current);
            return;
        }
        
        if (open < n) {
            generateParenthesis(result, current + "(", open + 1, close, n);
        }
        if (close < open) {
            generateParenthesis(result, current + ")", open, close + 1, n);
        }

=======

        List<String> result = new ArrayList<String>();
        generateParenthesis(result, "", 0, 0, n);
        return result;
    }
    
    private void generateParenthesis(List<String> result, String current, int open, int close, int n) {
        if (current.length() == n * 2) {
            result.add(current);
            return;
        }
        
        if (open < n) {
            generateParenthesis(result, current + "(", open + 1, close, n);
        }
        
        if (close < open) {
            generateParenthesis(result, current + ")", open, close + 1, n);
        }

=======

        List<String> res = new ArrayList();
        backTrack(res, "", 0, 0, n);
        return res;
    }
    
    public void backTrack(List<String> res, String cur, int open, int close, int max) {
        if (cur.length() == 2*max) {
            res.add(cur);
            return;
        }
        if (open < max) {
            backTrack(res, cur+"(", open+1, close, max);
        }
        if (close < open) {
            backTrack(res, cur+")", open, close+1, max);
        }

=======

        List<String> result = new ArrayList<>();
        generateParenthesis(result, "", n, n);
        return result;
    }
    
    public void generateParenthesis(List<String> result, String str, int open, int close) {
        if (open == 0 && close == 0) {
            result.add(str);
            return;
        }
        if (open > 0) {
            generateParenthesis(result, str + "(", open - 1, close);
        }
        if (close > open) {
            generateParenthesis(result, str + ")", open, close - 1);
        }

=======

        List<String> res = new ArrayList<>();
        dfs(n, 0, 0, res, "");
        return res;
    }

    private void dfs(int n, int left, int right, List<String> res, String cur) {
        if (left == n && right == n) {
            res.add(cur);
            return;
        }
        if (left < n) {
            dfs(n, left + 1, right, res, cur + "(");
        }
        if (right < left) {
            dfs(n, left, right + 1, res, cur + ")");
        }

=======

        List<String> res = new ArrayList<>();
        if (n == 0) return res;
        dfs(n, 0, 0, new StringBuilder(), res);
        return res;
    }
    
    private void dfs(int n, int left, int right, StringBuilder sb, List<String> res) {
        if (left == n && right == n) {
            res.add(sb.toString());
            return;
        }
        
        if (left < n) {
            sb.append("(");
            dfs(n, left + 1, right, sb, res);
            sb.deleteCharAt(sb.length() - 1);
        }
        
        if (right < left) {
            sb.append(")");
            dfs(n, left, right + 1, sb, res);
            sb.deleteCharAt(sb.length() - 1);
        }

=======

        List<String> res = new ArrayList<>();
        generateParenthesis(n, 0, 0, "", res);
        return res;
    }
    
    public void generateParenthesis(int n, int left, int right, String cur, List<String> res) {
        if (left == n && right == n) {
            res.add(cur);
            return;
        }
        if (left < n) {
            generateParenthesis(n, left + 1, right, cur + "(", res);
        }
        if (right < left) {
            generateParenthesis(n, left, right + 1, cur + ")", res);
        }

=======

        List<String> result = new ArrayList<>();
        if (n == 0) {
            return result;
        }
        helper(result, "", n, n);
        return result;
    }
    public void helper(List<String> result, String cur, int left, int right) {
        if (left == 0 && right == 0) {
            result.add(cur);
            return;
        }
        if (left > 0) {
            helper(result, cur + "(", left - 1, right);
        }
        if (right > left) {
            helper(result, cur + ")", left, right - 1);
        }
