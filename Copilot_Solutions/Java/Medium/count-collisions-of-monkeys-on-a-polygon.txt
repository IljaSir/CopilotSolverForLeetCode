Synthesizing 9/10 solutions

=======

        long[] dp = new long[n];
        dp[0] = 1;
        dp[1] = 2;
        dp[2] = 4;
        for (int i = 3; i < n; i++) {
            dp[i] = (dp[i - 1] + dp[i - 2] + dp[i - 3]) % 1000000007;
        }
        return (int) (2 * (dp[n - 1] + dp[n - 2]) % 1000000007);

=======

        if (n == 3) return 6;
        if (n == 4) return 14;
        long[] dp = new long[n + 1];
        dp[3] = 6;
        dp[4] = 14;
        for (int i = 5; i <= n; i++) {
            dp[i] = (2 * dp[i - 1] + dp[i - 2]) % 1000000007;
        }
        return (int)dp[n];

=======

        long[] dp = new long[n + 1];
        dp[0] = 1;
        dp[1] = 0;
        dp[2] = 1;
        for (int i = 3; i <= n; i++) {
            dp[i] = (dp[i - 1] * (i - 1) + dp[i - 2] * (i - 1)) % 1000000007;
        }
        return (int) dp[n];

=======

        if (n == 3) {
            return 6;
        }
        if (n == 4) {
            return 14;
        }
        long[] dp = new long[n + 1];
        dp[3] = 6;
        dp[4] = 14;
        for (int i = 5; i <= n; i++) {
            dp[i] = (dp[i - 1] * 2 + dp[i - 2]) % 1000000007;
        }
        return (int) dp[n];

=======

        long[] dp = new long[n];
        dp[0] = 1;
        dp[1] = 2;
        for (int i = 2; i < n; i++) {
            dp[i] = (dp[i - 1] + dp[i - 2]) * (i + 1) % 1000000007;
        }
        return (int) dp[n - 1];

=======

        long[] dp = new long[n + 1];
        dp[3] = 6;
        int mod = 1000000007;
        for (int i = 4; i <= n; i++) {
            dp[i] = (dp[i - 1] * 2 + (i - 2) * (i - 1)) % mod;
        }
        return (int)dp[n];

=======

        long[] dp = new long[3];
        dp[0] = 1;
        dp[1] = 1;
        dp[2] = 2;
        for (int i = 3; i <= n; i++) {
            long next = (dp[0] + dp[1] + dp[2]) % 1000000007;
            dp[0] = dp[1];
            dp[1] = dp[2];
            dp[2] = next;
        }
        return (int) dp[2];

=======

        int mod = 1000000007;
        long dp[] = new long[n+1];
        dp[3] = 6;
        for (int i = 4; i <= n; i++) {
            dp[i] = (dp[i-1]*2 + dp[i-2])%mod;
        }
        return (int)dp[n];

=======

        int mod = 1000000007;
        return (int) ((long) (n - 2) * (long) (n - 2) % mod);
