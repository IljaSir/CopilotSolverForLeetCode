Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int i = 0, j = numbers.length - 1;
        while (i < j) {
            int sum = numbers[i] + numbers[j];
            if (sum == target) {
                return new int[]{i + 1, j + 1};
            } else if (sum > target) {
                j--;
            } else {
                i++;
            }
        }
        return new int[]{};

=======

        int[] result = new int[2];
        int i = 0;
        int j = numbers.length - 1;
        while (i < j) {
            if (numbers[i] + numbers[j] == target) {
                result[0] = i + 1;
                result[1] = j + 1;
                break;
            } else if (numbers[i] + numbers[j] > target) {
                j--;
            } else {
                i++;
            }
        }
        return result;

=======

        int[] result = new int[2];
        int i = 0, j = numbers.length - 1;
        while (i < j) {
            int sum = numbers[i] + numbers[j];
            if (sum == target) {
                result[0] = i + 1;
                result[1] = j + 1;
                return result;
            }
            if (sum < target) {
                i++;
            } else {
                j--;
            }
        }
        return result;

=======

        int[] result = new int[2];
        int i = 0, j = numbers.length - 1;
        while (i < j) {
            int sum = numbers[i] + numbers[j];
            if (sum == target) {
                result[0] = i + 1;
                result[1] = j + 1;
                break;
            } else if (sum < target) {
                i++;
            } else {
                j--;
            }
        }
        return result;

=======

        int[] result = new int[2];
        int i = 0, j = numbers.length - 1;
        while (i < j) {
            int sum = numbers[i] + numbers[j];
            if (sum == target) {
                result[0] = i + 1;
                result[1] = j + 1;
                break;
            } else if (sum > target) {
                j--;
            } else {
                i++;
            }
        }
        return result;

=======

        int i = 0, j = numbers.length - 1;
        while (i < j) {
            if (numbers[i] + numbers[j] == target) return new int[] {i + 1, j + 1};
            else if (numbers[i] + numbers[j] < target) i++;
            else j--;
        }
        return new int[] {-1, -1};

=======

        int[] result = new int[2];
        int left = 0;
        int right = numbers.length - 1;
        while(left < right){
            int sum = numbers[left] + numbers[right];
            if(sum == target){
                result[0] = left + 1;
                result[1] = right + 1;
                break;
            }else if(sum < target){
                left++;
            }else{
                right--;
            }
        }
        return result;

=======

        int[] result = new int[2];
        Map<Integer, Integer> map = new HashMap<>();
        for (int i = 0; i < numbers.length; i++) {
            int num = numbers[i];
            if (map.containsKey(num)) {
                result[0] = map.get(num) + 1;
                result[1] = i + 1;
                break;
            }
            map.put(target - num, i);
        }
        return result;

=======

        int[] result = new int[2];
        for (int i = 0; i < numbers.length; i++) {
            int diff = target - numbers[i];
            int index = binarySearch(numbers, i + 1, numbers.length - 1, diff);
            if (index != -1) {
                result[0] = i + 1;
                result[1] = index + 1;
                break;
            }
        }
        return result;
    }
    
    private int binarySearch(int[] numbers, int start, int end, int target) {
        while (start <= end) {
            int mid = start + (end - start) / 2;
            if (numbers[mid] == target) {
                return mid;
            } else if (numbers[mid] < target) {
                start = mid + 1;
            } else {
                end = mid - 1;
            }
        }
        return -1;
