Synthesizing 9/10 solutions

=======

        int n = colsum.length;
        int[] row1 = new int[n];
        int[] row2 = new int[n];
        for (int i = 0; i < n; i++) {
            if (colsum[i] == 2) {
                row1[i] = 1;
                row2[i] = 1;
                upper--;
                lower--;
            }
        }
        for (int i = 0; i < n; i++) {
            if (colsum[i] == 1) {
                if (upper > 0) {
                    row1[i] = 1;
                    upper--;
                } else {
                    row2[i] = 1;
                    lower--;
                }
            }
        }
        if (upper != 0 || lower != 0) {
            return new ArrayList<>();
        }
        List<List<Integer>> res = new ArrayList<>();
        List<Integer> list1 = new ArrayList<>();
        List<Integer> list2 = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            list1.add(row1[i]);
            list2.add(row2[i]);
        }
        res.add(list1);
        res.add(list2);
        return res;

=======

        int n = colsum.length;
        List<List<Integer>> res = new ArrayList<>();
        res.add(new ArrayList<>());
        res.add(new ArrayList<>());
        for (int i = 0; i < n; i++) {
            res.get(0).add(0);
            res.get(1).add(0);
        }
        for (int i = 0; i < n; i++) {
            if (colsum[i] == 2) {
                res.get(0).set(i, 1);
                res.get(1).set(i, 1);
                upper--;
                lower--;
            }
        }
        for (int i = 0; i < n; i++) {
            if (colsum[i] == 1) {
                if (upper > 0) {
                    res.get(0).set(i, 1);
                    upper--;
                } else if (lower > 0) {
                    res.get(1).set(i, 1);
                    lower--;
                } else {
                    return new ArrayList<>();
                }
            }
        }
        if (upper == 0 && lower == 0) {
            return res;
        } else {
            return new ArrayList<>();
        }

=======

        List<List<Integer>> result = new ArrayList<>();
        int[][] matrix = new int[2][colsum.length];
        for (int i = 0; i < colsum.length; i++) {
            if (colsum[i] == 2) {
                matrix[0][i] = 1;
                matrix[1][i] = 1;
                upper--;
                lower--;
            }
        }
        if (upper < 0 || lower < 0) {
            return result;
        }
        for (int i = 0; i < colsum.length; i++) {
            if (colsum[i] == 1) {
                if (upper > 0) {
                    matrix[0][i] = 1;
                    upper--;
                } else if (lower > 0) {
                    matrix[1][i] = 1;
                    lower--;
                } else {
                    return result;
                }
            }
        }
        if (upper != 0 || lower != 0) {
            return result;
        }
        for (int i = 0; i < 2; i++) {
            List<Integer> list = new ArrayList<>();
            for (int j = 0; j < colsum.length; j++) {
                list.add(matrix[i][j]);
            }
            result.add(list);
        }
        return result;

=======

        List<List<Integer>> result = new ArrayList<>();
        result.add(new ArrayList<>());
        result.add(new ArrayList<>());
        for (int i = 0; i < colsum.length; i++) {
            if (colsum[i] == 2) {
                upper--;
                lower--;
                result.get(0).add(1);
                result.get(1).add(1);
            } else {
                result.get(0).add(0);
                result.get(1).add(0);
            }
        }
        if (upper < 0 || lower < 0) {
            return new ArrayList<>();
        }
        for (int i = 0; i < colsum.length; i++) {
            if (colsum[i] == 1) {
                if (upper > 0) {
                    upper--;
                    result.get(0).set(i, 1);
                } else {
                    lower--;
                    result.get(1).set(i, 1);
                }
            }
        }
        if (upper > 0 || lower > 0) {
            return new ArrayList<>();
        }
        return result;

=======

        List<List<Integer>> result = new ArrayList<>();
        int n = colsum.length;
        int[] upperRow = new int[n];
        int[] lowerRow = new int[n];
        for (int i = 0; i < n; i++) {
            if (colsum[i] == 2) {
                upperRow[i] = 1;
                lowerRow[i] = 1;
                upper--;
                lower--;
            }
        }
        if (upper < 0 || lower < 0) {
            return result;
        }
        for (int i = 0; i < n; i++) {
            if (colsum[i] == 1) {
                if (upper > 0) {
                    upperRow[i] = 1;
                    upper--;
                } else if (lower > 0) {
                    lowerRow[i] = 1;
                    lower--;
                } else {
                    return result;
                }
            }
        }
        if (upper > 0 || lower > 0) {
            return result;
        }
        result.add(new ArrayList<>());
        result.add(new ArrayList<>());
        for (int i = 0; i < n; i++) {
            result.get(0).add(upperRow[i]);
            result.get(1).add(lowerRow[i]);
        }
        return result;

=======

        List<List<Integer>> result = new ArrayList<>();
        List<Integer> upperList = new ArrayList<>();
        List<Integer> lowerList = new ArrayList<>();
        int sum = 0;
        for (int i = 0; i < colsum.length; i++) {
            sum += colsum[i];
            upperList.add(0);
            lowerList.add(0);
        }
        if (sum != upper + lower) {
            return result;
        }
        for (int i = 0; i < colsum.length; i++) {
            if (colsum[i] == 2) {
                upperList.set(i, 1);
                lowerList.set(i, 1);
                upper--;
                lower--;
            }
        }
        if (upper < 0 || lower < 0) {
            return result;
        }
        for (int i = 0; i < colsum.length; i++) {
            if (colsum[i] == 1) {
                if (upper > 0) {
                    upperList.set(i, 1);
                    upper--;
                } else if (lower > 0) {
                    lowerList.set(i, 1);
                    lower--;
                } else {
                    return result;
                }
            }
        }
        result.add(upperList);
        result.add(lowerList);
        return result;

=======

        List<List<Integer>> res = new ArrayList<>();
        int[] row = new int[2];
        for (int i = 0; i < colsum.length; i++) {
            if (colsum[i] == 2) {
                row[0]++;
                row[1]++;
            } else if (colsum[i] == 1) {
                if (row[0] < upper) {
                    row[0]++;
                } else {
                    row[1]++;
                }
            }
        }
        if (row[0] != upper || row[1] != lower) {
            return res;
        }
        List<Integer> row1 = new ArrayList<>();
        List<Integer> row2 = new ArrayList<>();
        for (int i = 0; i < colsum.length; i++) {
            if (colsum[i] == 2) {
                row1.add(1);
                row2.add(1);
            } else if (colsum[i] == 1) {
                if (row[0] < upper) {
                    row1.add(1);
                    row2.add(0);
                    row[0]++;
                } else {
                    row1.add(0);
                    row2.add(1);
                    row[1]++;
                }
            } else {
                row1.add(0);
                row2.add(0);
            }
        }
        res.add(row1);
        res.add(row2);
        return res;

=======

        int[] row = new int[2];
        List<List<Integer>> res = new ArrayList<List<Integer>>();
        for (int i = 0; i < colsum.length; i++) {
            if (colsum[i] == 2) {
                row[0]++;
                row[1]++;
            }
        }
        if (row[0] > upper || row[1] > lower) {
            return res;
        }
        upper -= row[0];
        lower -= row[1];
        for (int i = 0; i < colsum.length; i++) {
            if (colsum[i] == 1) {
                if (upper > 0) {
                    row[0]++;
                    upper--;
                } else {
                    row[1]++;
                    lower--;
                }
            }
        }
        if (upper != 0 || lower != 0) {
            return res;
        }
        List<Integer> l1 = new ArrayList<Integer>();
        List<Integer> l2 = new ArrayList<Integer>();
        for (int i = 0; i < colsum.length; i++) {
            if (colsum[i] == 0) {
                l1.add(0);
                l2.add(0);
            } else if (colsum[i] == 1) {
                if (row[0] > 0) {
                    l1.add(1);
                    l2.add(0);
                    row[0]--;
                } else {
                    l1.add(0);
                    l2.add(1);
                    row[1]--;
                }
            } else {
                l1.add(1);
                l2.add(1);
            }
        }
        res.add(l1);
        res.add(l2);
        return res;

=======

        List<List<Integer>> result = new ArrayList<>();
        int[] row1 = new int[colsum.length];
        int[] row2 = new int[colsum.length];
        int sum = upper + lower;
        for (int i = 0; i < colsum.length; i++) {
            sum -= colsum[i];
        }
        if (sum != 0) {
            return result;
        }
        for (int i = 0; i < colsum.length; i++) {
            if (colsum[i] == 2) {
                row1[i] = 1;
                row2[i] = 1;
                upper--;
                lower--;
            }
        }
        for (int i = 0; i < colsum.length; i++) {
            if (colsum[i] == 1) {
                if (upper > 0) {
                    row1[i] = 1;
                    upper--;
                } else {
                    row2[i] = 1;
                    lower--;
                }
            }
        }
        if (upper != 0 || lower != 0) {
            return result;
        }
        List<Integer> list1 = new ArrayList<>();
        for (int i = 0; i < row1.length; i++) {
            list1.add(row1[i]);
        }
        List<Integer> list2 = new ArrayList<>();
        for (int i = 0; i < row2.length; i++) {
            list2.add(row2[i]);
        }
        result.add(list1);
        result.add(list2);
        return result;
