Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int n = nums.length;
        int[] max = new int[n];
        max[n - 1] = nums[n - 1];
        for (int i = n - 2; i >= 0; i--) {
            max[i] = Math.max(max[i + 1], nums[i]);
        }
        int res = 0;
        for (int i = 0; i < n; i++) {
            if (i < n - 1 && max[i + 1] > nums[i]) {
                res++;
            }
        }
        return res;

=======

        int n = nums.length;
        int[] max = new int[n];
        max[n - 1] = nums[n - 1];
        for (int i = n - 2; i >= 0; i--) {
            max[i] = Math.max(nums[i], max[i + 1]);
        }
        int res = 0;
        for (int i = 0; i < n; i++) {
            if (nums[i] < max[i]) {
                res++;
            }
        }
        return res;

=======

        int n = nums.length;
        int[] max = new int[n];
        max[n - 1] = nums[n - 1];
        for (int i = n - 2; i >= 0; i--) {
            max[i] = Math.max(max[i + 1], nums[i]);
        }
        int ans = 0;
        for (int i = 0; i < n; i++) {
            if (max[i] > nums[i]) {
                ans++;
            }
        }
        return ans;

=======

        int max = nums[0];
        int count = 0;
        for (int i = 1; i < nums.length; i++) {
            if (nums[i] > max) {
                max = nums[i];
                count++;
            }
        }
        return count;

=======

        int n = nums.length;
        Arrays.sort(nums);
        int[] suffix = new int[n];
        suffix[n - 1] = nums[n - 1];
        for (int i = n - 2; i >= 0; --i) {
            suffix[i] = Math.max(suffix[i + 1], nums[i]);
        }
        int res = 0;
        for (int i = 0; i < n; ++i) {
            if (i < n - 1 && nums[i] < suffix[i + 1]) {
                res++;
            }
        }
        return res;

=======

        int n = nums.length;
        int[] sorted = nums.clone();
        Arrays.sort(sorted);
        int ans = 0;
        for (int i = 0; i < n; i++) {
            if (nums[i] != sorted[i]) {
                ans++;
            }
        }
        return ans;

=======

        int n = nums.length;
        int[] sorted = nums.clone();
        Arrays.sort(sorted);
        int ans = 0;
        for (int i = 0; i < n; i++) {
            if (sorted[i] > nums[i]) {
                ans++;
            }
        }
        return ans;

=======

        int n = nums.length;
        int[] dp = new int[n + 1];
        Arrays.sort(nums);
        for (int i = 1; i <= n; i++) {
            dp[i] = dp[i - 1] + nums[i - 1];
        }
        int ans = 0;
        for (int i = 1; i <= n; i++) {
            ans = Math.max(ans, dp[i - 1] + (n - i) * 1L * nums[i - 1]);
        }
        return ans;

=======

        int[] count = new int[1000001];
        int n = nums.length;
        for (int i = 0; i < n; i++) {
            count[nums[i]]++;
        }
        int[] prefix = new int[1000001];
        for (int i = 1; i < 1000001; i++) {
            prefix[i] = prefix[i - 1] + count[i];
        }
        int res = 0;
        for (int i = 0; i < n; i++) {
            int cur = nums[i];
            int left = prefix[cur - 1];
            int right = n - prefix[cur] - 1;
            res = Math.max(res, left + right);
        }
        return res;
