Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int[] dp = new int[5];
        Arrays.fill(dp, 1);
        for (int i = 1; i < n; i++) {
            for (int j = 1; j < 5; j++) {
                dp[j] += dp[j - 1];
            }
        }
        return dp[4];

=======

        int[][] dp = new int[n + 1][5];
        for (int i = 0; i < 5; i++) {
            dp[1][i] = 1;
        }
        for (int i = 2; i <= n; i++) {
            for (int j = 0; j < 5; j++) {
                for (int k = 0; k <= j; k++) {
                    dp[i][j] += dp[i - 1][k];
                }
            }
        }
        int ans = 0;
        for (int i = 0; i < 5; i++) {
            ans += dp[n][i];
        }
        return ans;

=======

        int[][] dp = new int[n + 1][6];
        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= 5; j++) {
                if (i == 1) {
                    dp[i][j] = 1;
                } else {
                    dp[i][j] = dp[i - 1][j] + dp[i][j - 1];
                }
            }
        }
        return dp[n][5];

=======

        int[] dp = new int[5];
        Arrays.fill(dp, 1);
        for (int i = 1; i <= n; i++) {
            for (int j = 1; j < 5; j++) {
                dp[j] += dp[j - 1];
            }
        }
        return dp[4];

=======

        int[] dp = {1, 1, 1, 1, 1};
        for (int i = 2; i <= n; i++) {
            for (int j = 1; j < 5; j++) {
                dp[j] += dp[j - 1];
            }
        }
        return dp[4];

=======

        int[][] dp = new int[n+1][5];
        for (int i = 0; i <= n; i++) {
            for (int j = 0; j < 5; j++) {
                if (i == 0) {
                    dp[i][j] = 1;
                } else {
                    dp[i][j] = dp[i][j-1] + dp[i-1][j];
                }
            }
        }
        return dp[n][4];

=======

        int[][] dp = new int[n+1][5];
        for (int i = 0; i < 5; i++) {
            dp[1][i] = 1;
        }
        for (int i = 2; i <= n; i++) {
            for (int j = 0; j < 5; j++) {
                int sum = 0;
                for (int k = j; k < 5; k++) {
                    sum += dp[i-1][k];
                }
                dp[i][j] = sum;
            }
        }
        int sum = 0;
        for (int i = 0; i < 5; i++) {
            sum += dp[n][i];
        }
        return sum;

=======

        int[][] dp = new int[n + 1][5];
        for (int i = 0; i < 5; ++i) {
            dp[1][i] = 1;
        }
        for (int i = 2; i <= n; ++i) {
            for (int j = 0; j < 5; ++j) {
                for (int k = j; k < 5; ++k) {
                    dp[i][j] += dp[i - 1][k];
                }
            }
        }
        int sum = 0;
        for (int i = 0; i < 5; ++i) {
            sum += dp[n][i];
        }
        return sum;

=======

        int[] counts = new int[]{1, 1, 1, 1, 1};
        for (int i = 2; i <= n; i++) {
            for (int j = 1; j < counts.length; j++) {
                counts[j] += counts[j - 1];
            }
        }
        return counts[4];
