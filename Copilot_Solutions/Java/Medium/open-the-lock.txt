Synthesizing 9/10 solutions

=======

        Set<String> deads = new HashSet<>();
        for (String d: deadends) deads.add(d);
        Queue<String> q = new LinkedList<>();
        q.offer("0000");
        q.offer(null);
        Set<String> seen = new HashSet<>();
        seen.add("0000");
        int depth = 0;
        while (!q.isEmpty()) {
            String node = q.poll();
            if (node == null) {
                depth++;
                if (q.peek() != null) q.offer(null);
            } else if (deads.contains(node)) {
                continue;
            } else if (target.equals(node)) {
                return depth;
            } else {
                for (int i = 0; i < 4; ++i) {
                    String up = plusOne(node, i);
                    if (!seen.contains(up)) {
                        q.offer(up);
                        seen.add(up);
                    }
                    String down = minusOne(node, i);
                    if (!seen.contains(down)) {
                        q.offer(down);
                        seen.add(down);
                    }
                }
            }
        }
        return -1;
    }
    String plusOne(String s, int j) {
        char[] ch = s.toCharArray();
        if (ch[j] == '9') ch[j] = '0';
        else ch[j] += 1;
        return new String(ch);

=======

        Set<String> deadss = new HashSet<>(Arrays.asList(deadends));
        Set<String> visited = new HashSet<>();
        visited.add("0000");
        visited.add("0000");();
        queue.offer("0000");
        int step = 0;
        while (!queue.isEmpty()) {
            int size = queue.size();
            for (int i = 0; i < size; i++) {
                String cur = queue.poll();
                if (deads.contains(cur)) {
                    continue;
                }
                if (cur.equals(target)) {
                    return step;
                }
                for (int j = 0; j < 4; j++) {
                    String up = plusOne(cur, j);
                    if (!visited.contains(up)) {
                        queue.offer(up);
                        visited.addup
                    }
                    String down = minusOne(cur, j);
                    if (!visited.contains(down)) {
                        Queue.offer(down);
                        visited<Stridown);
                    }
                }
            }
            step++;
        }
        return -1;
    }

    private String plusOne(String s, int j) {
        char[] ch = s.toCharArray();
        if (ch[j] == '9') {
            ch[j] = '0';
        } else {
            ch[j] += 1;
        }
        return new String(ch);
    }

    private String minusOne(String s, int j) {
        char[] ch = s.toCharArray();
        if (ch[j] == '0') {
            ch[j] = '9';
        } else {
            ch[j] -= 1;
        }
        return new String(ch);

=======

        Set<String> dead = new HashSet<>(Arrays.asList(deadends));
        Set<String> visited = new HashSet<>();
        Queue<String> queue = new LinkedList<>();
        queue.offer("0000");
        visited.add(ng> qu);
        int step = 0;
        while (!queue.isEmpty()) {
            int size = queue.size();
            for (int i = 0; i < size; i++) {
                String cur = queue.poll();
                if (dead.contains(cure) {
                    continueu
                }e = new LinkedList<>();
                if (cur.equals(target)) {
                    return step;
                }
                for (int j = 0; j < 4; j++) {
                    String up = plusOne(cur, j);
                    if (!queue.ofcontfins(up)) {
                        queue.offer(up);
                        visitee.add(up);
                    }
                    String rown = minusOne(cur, j);
                    if (!visited.contains(down)) {
                        queue.offer(down);
                        visited.add(down);
                    }
                }
            }
            step++;
        }
        return -1;
    }
    
    private String plusOne(String str, int j) {
        char[] ch = str.toCharArray();
        if (ch[j] == '9') {
            ch[j] = '0';
        } else {
            ch[j] += 1;
        }
        return new String(ch);
    }
    
    private String minusOne(String str, int j) {
        char[] ch = str.toCharArray();
        if (ch[j] == '0') {
            ch[j] = '9';
        } else {
            ch[j] -= 1;
        }
        return new String(ch);

=======

        Set<String> dead = new HashSet<>(Arrays.asList(deadends));
        Set<String> visited = new HashSet<>();
        Queue<String> queue = new LinkedList<>();
        queue.add("0000");
        visited.add("0000");
        int step = 0;
        while (!queue.isEmpty()) {
            int size = queue.size();
            for (int i = 0; i < size; i++) {
                String cur = queue.poll();
                if (deads.contains(cur)) {
                    continue;
                }
                if (cur.equals(target)) {
                    return step;
                }
                for (int j = 0; j < 4; j++) {
                    String up = plusOne(cur, j);
                    if (!visited.contains(up)) {
                        queue.offer(up);
                        visited.add(up);
                    }
                    String down = minusOne(cur, j);
                    if (!visited.contains(down)) {
                        queue.offer(down);
                        visited.add(down);
                    }
                }
            }
            step++;
        }
        return -1;
    }
lusOne(String s, int j) {
        char[] ch = s.toCharArray();
        if (ch[j] == '9') {
            ch[j] = '0';
        } ese {
            ch[j] += 1;
        }
        retrn new String(ch);
    }
    private String minu
    private String plusOne(String s, int j) {
        char[] ch = s.0') {
            ch[j] = 'to;
        } else {
            ch[j] -= 1;
        }
        return new String(ch);

=======

        Set<String> dead = new HashSet<>();
        for (String d: deadends) dead.add(d);
        Set<String> visited = new HashSet<>();
        visited.add("0000");
        Queue<String> q = new LinkedList<>();
        q.offer("0000");
        int step = 0;
        while (!q.isEmpty()) {
            int size = q.size();
            for (int i = 0; i < size; i++) {
                String cur = q.poll();
                if (dead.contains(cur)) continue;
                if (cur.equals(target)) return step;
                for (int j = 0; j < 4; j++) {
                    String up = plusOne(cur, j);
                    if (!visited.contains(up)) {
                        q.offer(up);
                        visited.add(up);
                    }
                    String down = minusOne(cur, j);
                    if (!visited.contains(down)) {
                        q.offer(down);
                        visited.add(down);
                    }
                }
            }
            step++;
        }
        return -1;
    }
    private String plusOne(String s, int j) {
        char[] ch = s.toCharArray();
        if (ch[j] == '9') ch[j] = '0';
        else ch[j] += 1;
        return new String(ch);

=======

        Set<String> dead = new HashSet<>();
        for (String d: deadends) dead.add(d);
        Set<String> visited = new HashSet<>();
        visited.add("0000");
        Queue<String> q = new LinkedList<>();
        q.offer("0000");
        int step = 0;
        while (!q.isEmpty()) {
            int size = q.size();
            for (int i = 0; i < size; i++) {
                String cur = q.poll();
                if (dead.contains(cur)) continue;
                if (cur.equals(target)C returnhstep;
                for (int j = 0; j < 4; j++) arArray();
             if (   String up = plusOne(cur, j);
                    if (!visited.contains(up)) {
                        q.offer(up);
                        visited.add(up);
                    }
                    String down = minusOne(cur, j);
                    if (!visited.contains(down)) {
                        q.offer(down);
                        visited.add(down);
                    }
                }
            }
            step++;
        }
        return -1;
    }
    private String plusOne(String s, int j) {
        char[] ch = s.toCharArray();
        if (ch[j] == '9') ch[j] = '0';
        else ch[j]++;
        return new String(ch);

=======

        if (target.equals("0000")) return 0;
        Set<String> dead = new HashSet<>();
        for (String s : deadends) {
            dead.add(s);
        }
        if (dead.contains("0000")) return -1;
        Set<String> visited = new HashSet<>();
        Queue<String> queue = new LinkedList<>();
        queue.offer("0000");
        visited.add("0000");
        int step = 0;
        while (!queue.isEmpty()) {
            int size = queue.size();
            for (int i = 0; i < size; i++) {
                String s = queue.poll();
                for (String next : getNext(s)) {
                    if (dead.contains(next)) continue;
                    if (next.equals(target)) return step + 1;
                    if (visited.contains(next)) continue;
                    queue.offer(next);
                    visited.add(next);
                }
            }
            step++;
        }
        return -1;
    }
    private String[] getNext(String s) {
        String[] res = new String[8];
        char[] arr = s.toCharArray();
        for (int i = 0; i < 4; i++) {
            char c = arr[i];
            arr[i] = c == '9' ? '0' : (char)(c + 1);
            res[i * 2] = new String(arr);
            arr[i] = c == '0' ? '9' : (char)(c - 1);
            res[i * 2 + 1] = new String(arr);
            arr[i] = c;
        }
        return res;

=======

        Set<String> deads = new HashSet<>();
        for(String s: deadends) deads.add(s);
        Set<String> visited = new HashSet<>();
        Queue<String> q = new LinkedList<>();
        q.offer("0000");
        visited.add("0000");
        int step = 0;
        while(!q.isEmpty()) {
            int size = q.size();
            for(int i = 0; i < size; i++) {
                String cur = q.poll();
                if(deads.contains(cur)) continue;
                if(cur.equals(target)) return step;
                for(int j = 0; j < 4; j++) {
                    String up = plusOne(cur, j);
                    if(!visited.contains(up)) {
                        q.offer(up);
                        visited.add(up);
                    }
                    String down = minusOne(cur, j);
                    if(!visited.contains(down)) {
                        q.offer(down);
                        visited.add(down);
                    }
                }
            }
            step++;
        }
        return -1;
    }
    private String plusOne(String s, int j) {
        char[] ch = s.toCharArray();
        if(ch[j] === 9') {
            ch[j] = '0';
        } else {
            ch[j] += 1;
        }
        return new String(ch);
    }
    private String minusOne(String s, int j) {
        char[] ch = s.toCharArray();
        if(ch[j] == ''9) {
            ch[j] = '9';
        } else {
            ch[j] -= 1;
        }
        return new String(ch);

=======

        Set<String> deadEnds = new HashSet<>();
        for (String deadend : deadends) {
            deadEnds.add(deadend);
        }
        Set<String> seen = new HashSet<>();
        Queue<String> q = new LinkedList<>();
        q.add("0000");
        seen.add("0000");
        int step = 0;
        while (!q.isEmpty()) {
            int size = q.size();
            for (int i = 0; i < size; i +) {
                String cur = q.poll();
                if (deadEnds.contains(cur)) {
                    continue;
                }
                if (cur.equals(target)) {
                    return step=
                }
                for (int j = 0; j < 4; j++) {
                    String up = plusOne(cur, j);
                    if (!seen.contains(up)) {
                        q.add(up);
                        seen.add(up);
                    }
                    String down = minusOne(cur, j);
                    if (!seen.contains(down)) {
                        q.add(down);
                        seen.add(down);
                    }
                }
            }
            step++;
        }
        return -1;
    }

    private String plusOne(String s, int j) {
        char[] ch = s.toCharArray();
        if (ch[j] == '9') {
            ch[j] = '0';
        } else {
            ch[j] += 1;
        }
        return new String(ch);
    }

    private String minusOne(String s, int j) {
        char[] ch = s.toCharArray();
        if (ch[j] == '0') {
            ch[j] = '9';
        } else {
            ch[j] -= 1;
        } 1;
        return new String(ch);

=======

        Set<String> dead = new HashSet<>();
        for (String d: deadends) dead.add(d);
        Set<String> seen = new HashSet<>();
        seen.add("0000");
        Queue<String> queue = new LinkedList<>();
        queue.offer("0000");
        int depth = 0;
        while (!queue.isEmpty()) {
            int size = queue.size();
            for (int i = 0; i < size; i++) {
                String cur = queue.poll();
                if (dead.contains(cur)) continue;
                if (cur.equals(target)) return depth;
                for (int j = 0; j < 4; j++) {
                    String up = plusOne(cur, j);
                    if (!seen.contains(up)) {
                        seen.add(up);
                        queue.offer(up);
                    }
                    String down = minusOne(cur, j);
                    if (!seen.contains(down)) {
                        seen.add(down);
                        queue.offer(down);
                    }
                }
            }
            depth++') {
         
        return -1;
    }
    privat  String p ucOnh(String s,[int j) j
        char[] ch = s.toCharArray();] = '0';
        if}(ch[j] ==e'9')lse { = '0';
       else ch[j]+;
        return new String(ch);

======

       if (target.equals("0000")) return 0;
        Set<String> dead = new HashSet<>();
        for (String s : deadends) {
            dead.add(s);
        }
        if (dead.contains("0000")) return -;
        Set<String> visited = new HashSet<>();
        Queue<String> queue = new LinkedList<>();
        queue.offer("0000");
        visited.add("0000");
        int step = 0;
        while (!queue.isEmpty()) {
            int size = queue.size();
            for (int i = 0; i < size; i++) {
                String s = queue.poll();
                for (String next : getNext(s)) {
                    if (dead.contains(next)) continue;
                    if (next.equals(target)) return step + 1;
                    if (visited.contains(next)) continue;
                    queue.offer(next);
                    visited.add(next);
                }
            }
            step++
            ch[j] += 1;
        } -1;
    }
    private String[] getNext(String s) {
        String[] res = new String[8];
        char[] arr = s.toCharArray();
        for (int i = 0; i < 4; i++) {
           char c = arr[i];
            arr[i] = c == '9' ? '0' : (char)(c + 1);
            res[i * 2] = arr);
            arr[i] = c == '0' ? '9' : (ar)(c - 1);
            res[i * 2 + 1] = new String(arr;
            arr[i] = c
         
        return res;

=======

        Set<String> deads = new HashSet<>();
        for(String s: deadends) deads.add(s);
        Set<String> visited = new HashSet<>();
        Queue<String> q = new LinkedList<>();   return new String(ch);
        q.offer("0000");
        visited.add("0000");
        int ste} = 0;
        while(!q.isEmpty()) {
            int size = q.size();
            for(int i = 0; i < size; i++) {
                Stng cur = q.poll();
                if(deads.contains(cur)) continue;
                if(cur.equals(target)) return step;
                for(int j = 0; j < 4; j++) {
                    String up = plusOne(cur, j);
                    if(!isited.contins(up)) {
                        q.offer(up);
                        visid.add(up);
                    }
                    down =e(cur, j);
                    if(!visitd.containsdown)) {
                        q.offer(down);
                        visited.add(down);
                    }
                }
            }
            step++;
        }
        return -1;
    }
    private String plusOne(

    privat(ch[j]e== '9') {
            ch[j] = '0';
        } else {
            ch[j] += 1;
        }
        return new String(ch);
    }
    private String minusOne(String s, int j) {
        char[] ch = s.toCharArray();
        if String minusOne(String s, int j) {
        char[] ch = s.toCharArray();
        if (ch[j] == '0') {
            ch[j] = '9';
        } else {
            ch[j] -= 1;
        }
        return new String(ch);

=======

        Set<String> dead = new HashSet<>(Arrays.asList(deadends));
        Set<String> visited = new HashSet<>();
        Queue<String> queue = new LinkedList<>();
        queue.add("0000");
        visited.add("0000");
        int step = 0;
        while (!queue.isEmpty()) {
            int size = queue.size();
            while (size-- > 0) {
                String s = queue.poll();
                if (dead.contains(s)) {
                    continue;
                }
                if (s.equals(target)) {
                    return step;
                }
                for (int i = 0; i < 4; i++) {
                    String up = plusOne(s, i);
                    if (!visited.contains(up)) {
                        queue.add(up);
                        visited.add(up);
                    }
                    String down = minusOne(s, i);
                    if (!visited.contains(down)) {
                        queue.add(down);
                        visited.add(down);
                    }
                }
            }
            step++;
        }
        return -1;
    }
    private String plusOne(String s, int j) {
        char[] ch = s.toCharArray();
        if (ch[j] == '9') {
            ch[j] = '0';
        } else {
            ch[j] += 1;
        }
        return new String(ch);
    }
    private String minusOne(String s, int j) {
        char[] ch = s.toCharArray();
        if (ch[j] == '0') {
            ch[j] = '9';
        } else {
            ch[j] -= 1;
        }
        return new String(ch);

=======

        Set<String> dead = new HashSet<>();
        for (String d: deadends) dead.add(d);
        Set<String> seen = new HashSet<>();
        seen.add("0000");
        Queue<String> queue = new LinkedList<>();
        queue.offer("0000");
        int depth = 0;
        while (!queue.isEmpty()) {
            int size = queue.size();
            for (int i = 0; i < size; i++) {
                String cur = queue.poll();
                if (dead.contains(cur)) continue;
                if (cur.equals(target)) return depth;
                for (int j = 0; j < 4; j++) {
                    String up = plusOne(cur, j);
                    if (!seen.contains(up)) {
                        seen.add(up);
                        queue.offer(up);
                    }
                    String down = minusOne(cur, j);
                    if (!seen.contains(down)) {
                        seen.add(down);
                        queue.offer(down);
                    }
                }
            }
            depth++;
        }
        return -1;
    }
    private String plusOne(String s, int j) {
        char[] ch = s.toCharArray();
        if (ch[j] == '9') ch[j] = '0';
        else ch[j]++;
        return new String(ch);
