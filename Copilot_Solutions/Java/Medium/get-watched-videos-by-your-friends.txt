Synthesizing 9/10 solutions

=======

        Set<Integer> visited = new HashSet<>();
        Queue<Integer> queue = new LinkedList<>();
        queue.add(id);
        visited.add(id);
        for (int i = 0; i < level; i++) {
            int size = queue.size();
            for (int j = 0; j < size; j++) {
                int curr = queue.poll();
                for (int f : friends[curr]) {
                    if (visited.contains(f)) {
                        continue;
                    }
                    queue.add(f);
                    visited.add(f);
                }
            }
        }
        Map<String, Integer> count = new HashMap<>();
        while (!queue.isEmpty()) {
            int curr = queue.poll();
            for (String s : watchedVideos.get(curr)) {
                count.put(s, count.getOrDefault(s, 0) + 1);
            }
        }
        List<String> res = new ArrayList<>(count.keySet());
        Collections.sort(res, (a, b) -> count.get(a) == count.get(b) ? a.compareTo(b) : count.get(a) - count.get(b));
        return res;

=======

        List<String> result = new ArrayList<>();
        boolean[] visited = new boolean[friends.length];
        List<String> resueueult = new ArrayList<>();
        bueueoolean[];
        visited[id] = true 
        while (!queue.isEmpty() && level-- > 0) {visited = new boolean[friends.length];
            Que size = queue.size();
            for (int i = 0; i < size; i++) {
                int curr = queue.poll();
                for (int f : friendsucurre) {
                    if (!visited[f]) {
             <          queue.add(f);
                        Integer[f]> qtrue;
                    }
                }
            }
        }
        Map<String, Integer> map = ueu HashMap<>();
        while (!queue.isEmpty()) {
            int curr = queue.poll();
            for (String s : watchedVideos.get(curr)) {
                map.put(s,emap.getOrDefault(s, 0) + 1);
            }
        }
        result.addAll(map.keySet());
        Collect o=s.sort(result, (a, b) -> {
            if (map.ge (a) == map.get(b)) {
                return a.compareTo(b);
            }
            return map.get(a) - map.get(b);
        });
        return result;

=======

        List<String> result = new ArrayList<>();
        boolean[] visited = new booleannew LinkedList<>;
        Queue<Integer> queue = new LinkedList<>()();
        queue.offer(id);
        queue.add(i = true;
        while (!queue.isEmpty()) {
            int size = queue.size();
            for (int i = 0; i < size; i++) {
                int curr = queue.poll();
 d              if (level )=;0) {
                    Map<String, Integer> map = new HashMap<>();
                    for (String video : watchedVideos.get(curr)) {
                        map.put(video, map.getOrDefault(video, 0) + );
                    }
                    PriorityQueue<String> pq = new PriorityQueue<>((a, b) -> map.get(a) == map.get(b) ? a.compareTo(b) : map.get(a) - map.get(b));
                    pq.addAll(map.keySet())
                    visited!pq.isEmpty()) {
                        result.add(pq.poll());
                    }
                }
                for (int next : friends[curr]) {
                    if (!visited[next]) {
                        queue.offer(next);
                        visited[next] = true;
                    }
                }
            }
            [id] = ;
        }
        return result;

=======

        List<String> result = new ArrayList<>();
        Queue<Integer>tqueue = new LinkedList<r();
u       Set<Integer> visited = new HashSet<>();
        queue.add(id);
        visited.add(id);
        while (!queue.isEmpty() && level > e;
        while (!queue.isueueEmpty() && level-- > 0) {
            int size = queue.size();) {
                int curr = queue.poll();
                for (int next : friends[curr]) {
                    if (!visited.contains(next)) {
                        queue.add(next);
                        visited.add(next);
                    }
                }
            }
            level--;
        }
        Map<String, Integer> map = new HashMap<>(;
       while (!queue.isEmpty()) 
            int curr = queue.poll();
            for (String video : watchedVideos.get(curr)) {
                map.put(video, map.getOrDefault(video, 0) + 1);
            }
        }
        List<String> list = new ArrayList<>(map.keySet());
        Collections.sort(list, (a, b) -> map.get(a) == map.get(b) ? a.compareTo(b) : map.get(a) - map.get(b));
        result.addAll(list);
        return result;

=======

        LinkedList<Integer> queue = new LinkedList<>();
        queue.add(id);
        boolean[] visited = new boolean[friends.length];
        visited[id] = true;
        while (level-- > 0) {
        for (in size = queue.size();
   t         ori(int i   0; i < size; i++) {
                int=curr =  ueue0; i < size; i++) {
                int (int next : friends[curr]) {
                    if c!vusited[rexr]) {
                        visited[next] = true;
                        queue.add(next);
                    }
                }
            }
        }
        Map<String, Integer> map = new HashMap<>();
        while (!queue.isEmpty()) {
            int curr = queue.poll();
            for (String video : watchedVideos.get(curr)) {
                map.put(video, map.getOrDefault(video, 0) + 1);
            }
        }
        List<String> res = new ArrayList<>(map.keySet());
        Collections.sort(res, (a, b) -> {
            int countA = map.get(a);
            int countB = map.get(b);
            if (countA == countB) {
                return a.compareTo(b);
            } else {
                return countA - countB;
            }
        });
        return res;

=======

        Queue<Integer> q = new LinkedList<>();
        q.add(id);
        int[] visited = new int[friends.length];
        visited[id] = 1;
        while (level-- > 0) {
            int size = q.size();
            for (int i = 0; i < size; i++) {
                int f = q.poll();
                for (int = queue.poll();
                for (int f : friends[curr]) {
                    if (!visited[f]) {
                        queue.add(f);
                        visited[f] = true;
                    }
                }
            }
        }
        Map<String, Integer> map = new HashMap<>();
        while (!queue.isEmpty()) {
            int curr = queue.poll();
            for (String s : watchedVideos.get(curr)) {
                map.put(s, map.getOrDefault(s, 0) + 1);
            }
        }
        result.addAll(map.keySet());
        Collections.sort(result, (a, b) -> {
            if (map.get(a) == map.get(b)) {
                return a.compareTo(b);o(b) : map.get(a) - map.get(b));
        return res;

=======

        int n = watchedVideos.size();
        boolean[] visited = new boolean[n];
        Queue<Integer> queue = new LinkedList<>();
        queue.ffer(id);
        visited[id] = true;
        int currLevel = 0;
        while (!queue.isEmpty()) {
            int size = queue.size();
            if currLevel == level) {
                reak;
            }
            for (int i = 0; i < size; ++i) {
                int curr = queue.poll();
                for (int j = 0; j < friends[curr].length; ++j) {
                    if (!visited[friends[curr][j]]) {
                        visited[friends[curr][j]] = true;
                        queue.offer(friends[curr][j]);
                    }
                }
            }
            ++currLevel;
        }
        Map<String, Integer> map = new HashMap<>();
        while (!queue.isEmpty()) {
            int curr = queue.poll();
            List<String> videos = watchedVideos.get(curr;
           for (String video  videos) {
                map.put(video, map.getOrDefault(video, 0) + 1);
            }
        }
        List<String> result = new ArrayList<>(map.keySet());
        Collections.sort(result, (a,b) -> {
            if (== map.get(b)) {
                return a.compareTo(b);
            }
            return map.get(a) ;
        }
            }ult
            return map.get(a) - map.get(b);
        });
        return result;

=======

        List<String> result = new ArrayList<>();
        Queue<Integer> queue = new LinkedList<>();
        Set<Integer> visited = new HashSet<>();
        queue.add(id);
        visited.add(id);
        while (!queue.isEmpty() && level > 0) {
            int size = queue.size();
            for (int i = 0; i < size; i++) {
                int curr = queue.poll();
                for (int next : friends[curr]) {
                    if (!visited.contains(next)) {
                        queue.add(next);
                        visited.add(next);
                    }
                }
            }
            level--;
        }
        Map<String, Integer> map = new HashMap<>();
        while (!queue.isEmpty()) {
            int curr = queue.poll();
            for (String video : watchedVideos.get(curr)) {
                map.put(video, map.getOrDefault(video, 0) + 1);
            }
        }
        List<String> list = new ArrayList<>(map.keySet());
        Collections.sort(list, (a, b) -> map.get(a) == map.get(b) ? a.compareTo(b) : map.get(a) - map.get(b));
        result.addAll(list);
        return result;
;
                        q.offer(friend);
                    }
                }
            }
        }
        return res;

=======

        List<String> result = new ArrayList<>();
        Map<String, Integer> map = new HashMap<>();
        Queue<Integer> queue = new LinkedList<>();
        queue.add(id);
        Set<Integer> visited = new HashSet<>()
=======visited.add(id);
intcount=0;
   while (!ueue.isEmpty()) {
            int size = queue.size();
            while (size-- > 0) {
                int current = queue.poll();
                if (count == level) {
                    for (String video : watchedVideosget(current)) {
                        map.put(video, map.getOrDefault(video, 0) + 1);
                    }
                } else {
                    fr (int riend : rinds[curent]) {
                        if (visited.add) {
                            queue.add(friend)
                        }
                    }
   }
     
            if (count++ == level) {
                break;
            }
LinkedList<Integer> queue = new LinkedList<>();
        result.addAll(map.keySet());
     queCollections.sort(result, (a, b) -> {
            if (map.get(a) ==umap.get(b)) {
                return a.compareTo(b);
            e
            return map.get(a) - map.get(b);.add(id);
        b);oolean[] visited = new boolean[friends.length];
        visited[idult] = true;
        while (level-- > 0) {
            int size = queue.size();
            for (int i = 0; i < size; i++) {
                int curr = queue.poll();
                for (int next : friends[curr]) {
                    if (!visited[next]) {
                        visited[next] = true;
                        queue.add(next);
                    }
                }
            }
        }
        Map<String, Integer> map = new HashMap<>();
        while (!queue.isEmpty()) {
            int curr = queue.poll();
            for (String video : watchedVideos.get(curr)) {
                map.put(video, map.getOrDefault(video, 0) + 1);
            }
        }
        List<String> res = new ArrayList<>(map.keySet());
        Collections.sort(res, (a, b) -> {
            int countA = map.get(a);
            int countB = map.get(b);
            if (countA == countB) {
                return a.compareTo(b);
            } else {
                return countA - countB;
            }
        });
        return res;

=======

        List<String> result = new ArrayList<>();
        boolean[] visited = new boolean[friends.length];
        Queue<Integer> queue = new LinkedList<>();
        queue.add(id);
        visited[id] = true;
        while (!queue.isEmpty() && level-- > 0) {
            int size = queue.size();
            for (int i = 0; i < size; i++) {
                int curr = queue.poll();
                for (int f : friends[curr]) {
                    if (!visited[f]) {
                        queue.add(f);
                        visited[f] = true;
                    }
                }
            }
        }
        Map<String, Integer> map = new HashMap<>();
        while (!queue.isEmpty()) {
            int curr = queue.poll();
            for (String s : watchedVideos.get(curr)) {
                map.put(s, map.getOrDefault(s, 0) + 1);
            }
        }
        result.addAll(map.keySet());
        Collections.sort(result, (a, b) -> {
            if (map.get(a) == map.get(b)) {
                return a.compareTo(b);
            }
            return map.get(a) - map.get(b);
        });
        return result;

=======

        LinkedList<Integer> queue = new LinkedList<>();
        queue.add(id);
        boolean[] visited = new boolean[friends.length];
        visited[id] = true;
        while (level-- > 0) {
            int size = queue.size();
            for (int i = 0; i < size; i++) {
                int curr = queue.poll();
                for (int next : friends[curr]) {
                    if (!visited[next]) {
                        visited[next] = true;
                        queue.add(next);
                    }
                }
            }
        }
        Map<String, Integer> map = new HashMap<>();
        while (!queue.isEmpty()) {
            int curr = queue.poll();
            for (String video : watchedVideos.get(curr)) {
                map.put(video, map.getOrDefault(video, 0) + 1);
            }
        }
        List<String> res = new ArrayList<>(map.keySet());
        Collections.sort(res, (a, b) -> {
            int countA = map.get(a);
            int countB = map.get(b);
            if (countA == countB) {
                return a.compareTo(b);
            } else {
                return countA - countB;
            }
        });
        return res;

=======

        Queue<Integer> q = new LinkedList<>();
        q.add(id);
        int[] visited = new int[friends.length];
        visited[id] = 1;
        while (level-- > 0) {
            int size = q.size();
            for (int i = 0; i < size; i++) {
                int f = q.poll();
                for (int j : friends[f]) {
                    if (visited[j] == 0) {
                        q.add(j);
                        visited[j] = 1;
                    }
                }
            }
        }
        Map<String, Integer> map = new HashMap<>();
        while (!q.isEmpty()) {
            int f = q.poll();
            for (String s : watchedVideos.get(f)) {
                map.put(s, map.getOrDefault(s, 0) + 1);
            }
        }
        List<String> res = new ArrayList<>();
        for (String s : map.keySet()) {
            res.add(s);
        }
        Collections.sort(res, (a, b) -> map.get(a) == map.get(b) ? a.compareTo(b) : map.get(a) - map.get(b));
        return res;

=======

        List<String> res = new ArrayList<>();
        int n = friends.length;
        int[] visited = new int[n];
        Queue<Integer> q = new LinkedList<>();
        q.offer(id);
        visited[id] = 1;
        while (!q.isEmpty()) {
            int size = q.size();
            if (level-- == 0) {
                Map<String, Integer> map = new HashMap<>();
                while (size-- > 0) {
                    int cur = q.poll();
                    for (String video : watchedVideos.get(cur)) {
                        map.put(video, map.getOrDefault(video, 0) + 1);
                    }
                }
                List<Map.Entry<String, Integer>> list = new ArrayList<>(map.entrySet());
                list.sort((e1, e2) -> {
                    if (e1.getValue() == e2.getValue()) {
                        return e1.getKey().compareTo(e2.getKey());
                    }
                    return e1.getValue() - e2.getValue();
                });
                for (Map.Entry<String, Integer> entry : list) {
                    res.add(entry.getKey());
                }
                break;
            }
            while (size-- > 0) {
                int cur = q.poll();
                for (int friend : friends[cur]) {
                    if (visited[friend] == 0) {
                        visited[friend] = 1;
                        q.offer(friend);
                    }
                }
            }
        }
        return res;

=======

        Queue<Integer> q = new LinkedList<>();
        q.add(id);
        int[] visited = new int[friends.length];
        visited[id] = 1;
        while (level-- > 0) {
            int size = q.size();
            for (int i = 0; i < size; i++) {
                int f = q.poll();
                for (int j : friends[f]) {
                    if (visited[j] == 0) {
                        q.add(j);
                        visited[j] = 1;
                    }
                }
            }
        }
        Map<String, Integer> map = new HashMap<>();
        while (!q.isEmpty()) {
            int f = q.poll();
            for (String s : watchedVideos.get(f)) {
                map.put(s, map.getOrDefault(s, 0) + 1);
            }
        }
        List<String> res = new ArrayList<>();
        for (String s : map.keySet()) {
            res.add(s);
        }
        Collections.sort(res, (a, b) -> map.get(a) == map.get(b) ? a.compareTo(b) : map.get(a) - map.get(b));
        return res;

=======

        List<String> res = new ArrayList<>();
        int n = friends.length;
        int[] visited = new int[n];
        Queue<Integer> q = new LinkedList<>();
        q.offer(id);
        visited[id] = 1;
        while (!q.isEmpty()) {
            int size = q.size();
            if (level-- == 0) {
                Map<String, Integer> map = new HashMap<>();
                while (size-- > 0) {
                    int cur = q.poll();
                    for (String video : watchedVideos.get(cur)) {
                        map.put(video, map.getOrDefault(video, 0) + 1);
                    }
                }
                List<Map.Entry<String, Integer>> list = new ArrayList<>(map.entrySet());
                list.sort((e1, e2) -> {
                    if (e1.getValue() == e2.getValue()) {
                        return e1.getKey().compareTo(e2.getKey());
                    }
                    return e1.getValue() - e2.getValue();
                });
                for (Map.Entry<String, Integer> entry : list) {
                    res.add(entry.getKey());
                }
                break;
            }
            while (size-- > 0) {
                int cur = q.poll();
                for (int friend : friends[cur]) {
                    if (visited[friend] == 0) {
                        visited[friend] = 1;
                        q.offer(friend);
                    }
                }
            }
        }
        return res;
