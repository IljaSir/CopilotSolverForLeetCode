Synthesizing 10/10 solutions

=======

        int n = s.length();
        int[] sum = new int[n];
        sum[n - 1] = shifts[n - 1][2];
        for (int i = n - 2; i >= 0; i--) {
            sum[i] = sum[i + 1] + shifts[i][2];
        }
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < n; i++) {
            int offset = sum[i] % 26;
            char c = s.charAt(i);
            for (int j = 0; j < offset; j++) {
                if (c == 'z') {
                    c = 'a';
                } else {
                    c++;
                }
            }
            sb.append(c);
        }
        return sb.toString();

=======

        int n = s.length();
        int[] sum = new int[n];
        sum[n - 1] = shifts[n - 1][2];
        for (int i = n - 2; i >= 0; i--) {
            sum[i] = sum[i + 1] + shifts[i][2];
        }
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < n; i++) {
            int c = s.charAt(i) - 'a';
            c = (c + sum[i]) % 26;
            sb.append((char) (c + 'a'));
        }
        return sb.toString();

=======

        int n = s.length();
        int[] sums = new int[n];
        sums[n-1] = shifts[n-1][2];
        for (int i = n-2; i >= 0; i--) {
            sums[i] = sums[i+1] + shifts[i][2];
        }
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < n; i++) {
            int start = shifts[i][0];
            int end = shifts[i][1];
            int sum = sums[i];
            int shift = sum % 26;
            if (shifts[i][2] == 0) {
                shift = 26 - shift;
            }
            int c = s.charAt(i) - 'a';
            c = (c + shift) % 26;
            sb.append((char)(c+'a'));
        }
        return sb.toString();

=======

        int n = s.length();
        int[] arr = new int[n];
        for (int i = 0; i < n; i++) {
            arr[i] = s.charAt(i) - 'a';
        }
        int sum = 0;
        for (int i = n - 1; i >= 0; i--) {
            sum += shifts[i][2];
            arr[i] = (arr[i] + sum) % 26;
        }
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < n; i++) {
            sb.append((char) ('a' + arr[i]));
        }
        return sb.toString();

=======

        char[] ch = s.toCharArray();
        int n = s.length();
        for (int i = n - 2; i >= 0; i--) {
            shifts[i][2] += shifts[i + 1][2];
            shifts[i][2] %= 26;
        }
        for (int i = 0; i < n; i++) {
            ch[i] = (char)(((ch[i] - 'a') + shifts[i][2]) % 26 + 'a');
        }
        return new String(ch);

=======

        int n = s.length();
        long[] shift = new long[n];
        for (int i = 0; i < shifts.length; i++) {
            shift[shifts[i][0]] += shifts[i][2];
            if (shifts[i][1] != n-1) {
                shift[shifts[i][1] + 1] -= shifts[i][2];
            }
        }
        for (int i = 1; i < n; i++) {
            shift[i] += shift[i-1];
        }
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < n; i++) {
            sb.append((char) ((s.charAt(i) - 'a' + shift[i]) % 26 + 'a'));
        }
        return sb.toString();

=======

        int n = s.length();
        int[] sum = new int[n];
        sum[n-1] = shifts[n-1][2];
        for(int i = n-2; i >= 0; i--) {
            sum[i] = sum[i+1] + shifts[i][2];
        }
        char[] ch = s.toCharArray();
        for(int i = 0; i < n; i++) {
            if(sum[i] % 26 != 0) {
                ch[i] = (char)('a' + (ch[i] - 'a' + sum[i]) % 26);
            }
        }
        return new String(ch);

=======

        char[] ch = s.toCharArray();
        int n = shifts.length;
        int[] sum = new int[n];
        sum[n - 1] = shifts[n - 1][2];
        for (int i = n - 2; i >= 0; i--) {
            sum[i] = sum[i + 1] + shifts[i][2];
        }
        for (int i = 0; i < n; i++) {
            int start = shifts[i][0];
            int end = shifts[i][1];
            int direction = shifts[i][2];
            for (int j = start; j <= end; j++) {
                int val = ch[j] - 'a';
                val = (val + sum[i]) % 26;
                ch[j] = (char) (val + 'a');
            }
        }
        return new String(ch);

=======

        int[] shift = new int[s.length()];
        for(int i = 0; i < shifts.length; i++){
            shift[shifts[i][0]] += shifts[i][2] == 0 ? -shifts[i][2] : 26 - shifts[i][2];
            if(shifts[i][1] + 1 < s.length()){
                shift[shifts[i][1] + 1] -= shifts[i][2] == 0 ? -shifts[i][2] : 26 - shifts[i][2];
            }
        }
        int sum = 0;
        for(int i = 0; i < s.length(); i++){
            sum += shift[i];
            s = s.substring(0, i) + (char)((s.charAt(i) - 'a' + sum) % 26 + 'a') + s.substring(i + 1);
        }
        return s;

=======

        int n = s.length();
        long[] sums = new long[n];
        for (int i = n - 1; i >= 0; i--) {
            sums[i] = (i < n - 1 ? sums[i + 1] : 0) + shifts[i][2];
        }
        char[] chars = s.toCharArray();
        for (int i = 0; i < n; i++) {
            chars[i] = (char) ((chars[i] - 'a' + sums[i]) % 26 + 'a');
        }
        return new String(chars);
