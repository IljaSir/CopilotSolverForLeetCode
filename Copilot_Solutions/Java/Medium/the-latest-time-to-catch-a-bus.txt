Synthesizing 10/10 solutions (Duplicates hidden)

=======

        Arrays.sort(buses);
        Arrays.sort(passengers);
        int i = 0;
        int j = 0;
        int n = buses.length;
        int m = passengers.length;
        while (i < n && j < m) {
            int wait = 0;
            while (j < m && wait < capacity && passengers[j] <= buses[i]) {
                j++;
                wait++;
            }
            i++;
        }
        return passengers[j - 1];

=======

        Arrays.sort(buses);
        Arrays.sort(passengers);
        int i = 0;
        int j = 0;
        int result = 0;
        while (i < buses.length && j < passengers.length) {
            int count = 0;
            while (j < passengers.length && passengers[j] <= buses[i] && count < capacity) {
                j++;
                count++;
            }
            if (count > 0) {
                result = buses[i];
            }
            i++;
        }
        return result;

=======

        Arrays.sort(buses);
        Arrays.sort(passengers);
        int n = buses.length;
        int m = passengers.length;
        int i = 0;
        int j = 0;
        int count = 0;
        int max = 0;
        while (i < n && j < m) {
            if (buses[i] < passengers[j]) {
                count++;
                i++;
            } else {
                count--;
                j++;
            }
            if (count == capacity) {
                max = Math.max(max, passengers[j - 1]);
            }
        }
        return max;

=======

        Arrays.sort(buses);
        Arrays.sort(passengers);
        int i = 0, j = 0, n = buses.length, m = passengers.length;
        while (i < n && j < m) {
            int bus = buses[i];
            int count = 0;
            while (j < m && passengers[j] <= bus && count < capacity) {
                count++;
                j++;
            }
            i++;
        }
        return j == m ? passengers[j - 1] : -1;

=======

        Arrays.sort(buses);
        Arrays.sort(passengers);
        int i = 0, j = 0;
        int res = 0;
        while (i < buses.length && j < passengers.length) {
            int count = 0;
            while (j < passengers.length && count < capacity && passengers[j] <= buses[i]) {
                count++;
                j++;
            }
            res = buses[i];
            i++;
        }
        return res;

=======

        int n = buses.length;
        int m = passengers.length;
        Arrays.sort(buses);
        Arrays.sort(passengers);
        int ans = -1;
        int j = 0;
        for (int i = 0; i < n; i++) {
            int bus = buses[i];
            int count = 0;
            while (j < m && passengers[j] <= bus && count < capacity) {
                ans = Math.max(ans, passengers[j]);
                j++;
                count++;
            }
        }
        return ans;

=======

        Arrays.sort(buses);
        Arrays.sort(passengers);
        int i = 0, j = 0;
        int n = buses.length, m = passengers.length;
        int ans = -1;
        while (i < n && j < m) {
            int bus = buses[i], passenger = passengers[j];
            if (bus >= passenger) {
                int cnt = 0;
                while (j < m && passenger <= bus && cnt < capacity) {
                    ans = Math.max(ans, passenger);
                    passenger = passengers[++j];
                    cnt++;
                }
            }
            i++;
        }
        return ans;

=======

        int n = buses.length;
        int m = passengers.length;
        Arrays.sort(buses);
        Arrays.sort(passengers);
        int i = 0;
        int j = 0;
        int ans = 0;
        for (int k = 0; k < m; k++) {
            if (i < n && buses[i] <= passengers[k]) {
                i++;
            } else {
                j++;
            }
            if (j == capacity) {
                j = 0;
                i--;
            }
            ans = Math.max(ans, passengers[k]);
        }
        return ans;

=======

        int n = buses.length;
        int m = passengers.length;
        Arrays.sort(passengers);
        Arrays.sort(buses);
        int i = 0;
        int j = 0;
        int count = 0;
        int res = 0;
        while(i < n && j < m) {
            while(j < m && passengers[j] <= buses[i]) {
                count++;
                j++;
            }
            if(count >= capacity) {
                res = buses[i];
                count -= capacity;
            } else {
                res = passengers[j - 1];
                count = 0;
            }
            i++;
        }
        return res;
