Synthesizing 10/10 solutions

=======

        int n = nums.length;
        long sum = 0;
        for (int num : nums) {
            sum = (sum + num) % p;
        }
        if (sum == 0) {
            return 0;
        }
        long cur = 0;
        int res = n;
        Map<Long, Integer> map = new HashMap<>();
        map.put(0L, -1);
        for (int i = 0; i < n; i++) {
            cur = (cur + nums[i]) % p;
            map.put(cur, i);
            long need = (cur - sum + p) % p;
            if (map.containsKey(need)) {
                res = Math.min(res, i - map.get(need));
            }
        }
        return res < n ? res : -1;

=======

        int n = nums.length;
        long sum = 0;
        for (int num : nums) {
            sum += num;
        }
        if (sum % p == 0) {
            return 0;
        }
        long mod = sum % p;
        long target = sum - mod;
        long cur = 0;
        int ans = n;
        Map<Long, Integer> map = new HashMap<>();
        map.put(0L, -1);
        for (int i = 0; i < n; i++) {
            cur += nums[i];
            if (map.containsKey(cur - target)) {
                ans = Math.min(ans, i - map.get(cur - target));
            }
            map.put(cur, i);
        }
        return ans == n ? -1 : ans;

=======

        int n = nums.length;
        long sum = 0;
        for (int num : nums) {
            sum += num;
        }
        if (sum % p == 0) {
            return 0;
        }
        long need = sum % p;
        long cur = 0;
        int ans = n;
        Map<Long, Integer> last = new HashMap();
        last.put(0L, -1);
        for (int i = 0; i < n; ++i) {
            cur += nums[i];
            last.put(cur % p, i);
        }
        cur = 0;
        for (int i = n - 1; i >= 0; --i) {
            cur += nums[i];
            long want = (cur - need) % p;
            if (want < 0) {
                want += p;
            }
            if (last.containsKey(want)) {
                ans = Math.min(ans, i - last.get(want) - 1);
            }
        }
        return ans < n ? ans : -1;

=======

        int n = nums.length;
        long sum = 0;
        for (int i = 0; i < n; i++) {
            sum = (sum + nums[i]) % p;
        }
        if (sum == 0) {
            return 0;
        }
        Map<Long, Integer> map = new HashMap<>();
        map.put(0L, -1);
        long cur = 0;
        int ans = n;
        for (int i = 0; i < n; i++) {
            cur = (cur + nums[i]) % p;
            map.put(cur, i);
            long target = (cur - sum + p) % p;
            if (map.containsKey(target)) {
                ans = Math.min(ans, i - map.get(target));
            }
        }
        return ans < n ? ans : -1;

=======

        long sum = 0;
        for (int num : nums) {
            sum = (sum + num) % p;
        }
        if (sum == 0) {
            return 0;
        }
        Map<Long, Integer> map = new HashMap<>();
        map.put(0L, -1);
        long cur = 0;
        int res = nums.length;
        for (int i = 0; i < nums.length; i++) {
            cur = (cur + nums[i]) % p;
            map.put(cur, i);
            long target = (cur - sum + p) % p;
            if (map.containsKey(target)) {
                res = Math.min(res, i - map.get(target));
            }
        }
        return res < nums.length ? res : -1;

=======

        int n = nums.length;
        long sum = 0;
        for (int i = 0; i < n; i++) {
            sum += nums[i];
        }
        if (sum % p == 0) {
            return 0;
        }
        int target = (int) (sum % p);
        int ans = n;
        int cur = 0;
        Map<Integer, Integer> map = new HashMap<>();
        map.put(0, -1);
        for (int i = 0; i < n; i++) {
            cur = (cur + nums[i]) % p;
            map.put(cur, i);
            int need = (cur - target + p) % p;
            if (map.containsKey(need)) {
                ans = Math.min(ans, i - map.get(need));
            }
        }
        return ans == n ? -1 : ans;

=======

        int n = nums.length;
        long sum = 0;
        for (int num : nums) {
            sum += num;
        }
        long mod = sum % p;
        if (mod == 0) {
            return 0;
        }
        Map<Long, Integer> map = new HashMap<>();
        map.put(0l, -1);
        long cur = 0;
        int ans = n;
        for (int i = 0; i < n; i++) {
            cur += nums[i];
            long remain = cur % p;
            long target = (remain - mod + p) % p;
            if (map.containsKey(target)) {
                ans = Math.min(ans, i - map.get(target));
            }
            map.put(remain, i);
        }
        return ans == n ? -1 : ans;

=======

        int n = nums.length;
        long sum = 0;
        for (int i = 0; i < n; i++) {
            sum += nums[i];
        }
        long mod = sum % p;
        if (mod == 0) return 0;
        Map<Long, Integer> map = new HashMap<>();
        map.put(0L, -1);
        long cur = 0;
        int ans = n;
        for (int i = 0; i < n; i++) {
            cur = (cur + nums[i]) % p;
            map.put(cur, i);
            if (map.containsKey((cur - mod + p) % p)) {
                ans = Math.min(ans, i - map.get((cur - mod + p) % p));
            }
        }
        return ans == n ? -1 : ans;

=======

        int n = nums.length;
        int sum = 0;
        for (int num : nums) {
            sum += num;
            sum %= p;
        }
        if (sum == 0) {
            return 0;
        }
        int res = n;
        int cur = 0;
        Map<Integer, Integer> map = new HashMap();
        map.put(0, -1);
        for (int i = 0; i < n; i++) {
            cur += nums[i];
            cur %= p;
            map.put(cur, i);
            int need = (cur - sum + p) % p;
            if (map.containsKey(need)) {
                res = Math.min(res, i - map.get(need));
            }
        }
        return res < n ? res : -1;

=======

        int n = nums.length;
        int mod = 0;
        for(int i=0;i<n;i++){
            mod += nums[i];
            mod %= p;
        }
        if(mod == 0) return 0;
        int ans = n;
        HashMap<Integer, Integer> map = new HashMap<>();
        map.put(0, -1);
        int curr = 0;
        for(int i=0;i<n;i++){
            curr += nums[i];
            curr %= p;
            map.put(curr, i);
            int need = (curr - mod + p) % p;
            if(map.containsKey(need)){
                ans = Math.min(ans, i - map.get(need));
            }
        }
        if(ans == n) return -1;
        return ans;
