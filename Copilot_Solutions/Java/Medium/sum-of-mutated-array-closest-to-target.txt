Synthesizing 10/10 solutions

=======

        int sum = 0;
        int max = 0;
        for (int i = 0; i < arr.length; i++) {
            sum += arr[i];
            max = Math.max(max, arr[i]);
        }
        if (sum <= target) {
            return max;
        }
        int l = 0;
        int r = max;
        while (l < r) {
            int mid = (l + r) / 2;
            int newSum = 0;
            for (int i = 0; i < arr.length; i++) {
                newSum += Math.min(arr[i], mid);
            }
            if (newSum >= target) {
                r = mid;
            } else {
                l = mid + 1;
            }
        }
        int sum1 = 0;
        for (int i = 0; i < arr.length; i++) {
            sum1 += Math.min(arr[i], l - 1);
        }
        int sum2 = 0;
        for (int i = 0; i < arr.length; i++) {
            sum2 += Math.min(arr[i], l);
        }
        return Math.abs(sum1 - target) <= Math.abs(sum2 - target) ? l - 1 : l;

=======

        Arrays.sort(arr);
        int n = arr.length;
        int[] sum = new int[n];
        sum[0] = arr[0];
        for (int i = 1; i < n; i++) {
            sum[i] = sum[i - 1] + arr[i];
        }
        int left = 0;
        int right = arr[n - 1];
        int ans = -1;
        while (left <= right) {
            int mid = (left + right) / 2;
            int index = Arrays.binarySearch(arr, mid);
            if (index < 0) {
                index = -index - 1;
            }
            int cur = sum[index - 1] + (n - index) * mid;
            if (cur <= target) {
                ans = mid;
                left = mid + 1;
            } else {
                right = mid - 1;
            }
        }
        int l1 = getAbs(arr, target, ans);
        int l2 = getAbs(arr, target, ans + 1);
        return l1 <= l2 ? ans : ans + 1;
    }

    private int getAbs(int[] arr, int target, int x) {
        int sum = 0;
        for (int num : arr) {
            sum += Math.min(num, x);
        }
        return Math.abs(sum - target);

=======

        int sum = 0;
        int max = 0;
        for (int i = 0; i < arr.length; i++) {
            sum += arr[i];
            max = Math.max(arr[i], max);
        }
        if (sum <= target) {
            return max;
        }
        int l = 0, r = max;
        while (l < r) {
            int mid = (l + r) / 2;
            int curSum = 0;
            for (int i = 0; i < arr.length; i++) {
                if (arr[i] > mid) {
                    curSum += mid;
                } else {
                    curSum += arr[i];
                }
            }
            if (curSum <= target) {
                l = mid + 1;
            } else {
                r = mid;
            }
        }
        int s1 = 0;
        for (int i = 0; i < arr.length; i++) {
            if (arr[i] > l - 1) {
                s1 += l - 1;
            } else {
                s1 += arr[i];
            }
        }
        int s2 = 0;
        for (int i = 0; i < arr.length; i++) {
            if (arr[i] > l) {
                s2 += l;
            } else {
                s2 += arr[i];
            }
        }
        return Math.abs(s1 - target) <= Math.abs(s2 - target) ? l - 1 : l;

=======

        int n = arr.length;
        Arrays.sort(arr);
        int[] preSum = new int[n + 1];
        for (int i = 1; i <= n; i++) {
            preSum[i] = preSum[i - 1] + arr[i - 1];
        }
        int l = 0, r = arr[n - 1];
        int ans = -1;
        while (l <= r) {
            int mid = l + ((r - l) >> 1);
            int idx = Arrays.binarySearch(arr, mid);
            if (idx < 0) {
                idx = -idx - 1;
            }
            int cur = preSum[idx] + (n - idx) * mid;
            if (cur <= target) {
                ans = mid;
                l = mid + 1;
            } else {
                r = mid - 1;
            }
        }
        int sum1 = getSum(arr, ans);
        int sum2 = getSum(arr, ans + 1);
        return Math.abs(sum1 - target) <= Math.abs(sum2 - target) ? ans : ans + 1;
    }

    public int getSum(int[] arr, int x) {
        int sum = 0;
        for (int num : arr) {
            sum += Math.min(num, x);
        }
        return sum;

=======

        int l = 0, r = 0;
        for (int i = 0; i < arr.length; i++) {
            r = Math.max(r, arr[i]);
        }
        while (l < r) {
            int m = l + (r - l) / 2;
            int sum = 0;
            for (int i = 0; i < arr.length; i++) {
                sum += Math.min(arr[i], m);
            }
            if (sum < target) {
                l = m + 1;
            } else {
                r = m;
            }
        }
        int sum = 0;
        for (int i = 0; i < arr.length; i++) {
            sum += Math.min(arr[i], l);
        }
        if (sum == target) {
            return l;
        }
        int sum2 = 0;
        for (int i = 0; i < arr.length; i++) {
            sum2 += Math.min(arr[i], l + 1);
        }
        if (Math.abs(target - sum) <= Math.abs(target - sum2)) {
            return l;
        }
        return l + 1;

=======

        int sum = 0;
        int max = 0;
        for (int a: arr) {
            sum += a;
            max = Math.max(max, a);
        }
        if (sum <= target) return max;
        int l = 0, r = max;
        while (l < r) {
            int mid = l + (r - l) / 2;
            sum = 0;
            for (int a: arr) {
                sum += Math.min(mid, a);
            }
            if (sum >= target) {
                r = mid;
            } else {
                l = mid + 1;
            }
        }
        sum = 0;
        for (int a: arr) {
            sum += Math.min(l, a);
        }
        return Math.abs(sum - target) <= Math.abs(sum - l - target) ? l : l + 1;

=======

        int l = 0, r = 0;
        for (int a : arr) {
            r = Math.max(r, a);
        }
        while (l < r) {
            int m = (l + r) / 2;
            int sum = 0;
            for (int a : arr) {
                sum += Math.min(a, m);
            }
            if (sum < target) {
                l = m + 1;
            } else {
                r = m;
            }
        }
        int sum1 = 0, sum2 = 0;
        for (int a : arr) {
            sum1 += Math.min(a, l - 1);
            sum2 += Math.min(a, l);
        }
        return Math.abs(sum1 - target) <= Math.abs(sum2 - target) ? l - 1 : l;

=======

        Arrays.sort(arr);
        int n = arr.length;
        int[] prefix = new int[n+1];
        for(int i=1; i<=n; i++){
            prefix[i] = prefix[i-1] + arr[i-1];
        }
        int ans = 0;
        int diff = Integer.MAX_VALUE;
        for(int i=0; i<=arr[n-1]; i++){
            int idx = Arrays.binarySearch(arr, i);
            if(idx < 0){
                idx = -idx - 1;
            }
            int cur = prefix[idx] + (n-idx)*i;
            if(Math.abs(cur-target) < diff){
                ans = i;
                diff = Math.abs(cur-target);
            }
        }
        return ans;

=======

        int n = arr.length;
        int l = 0, r = 100000;
        while (l < r) {
            int mid = (l + r) / 2;
            int sum = 0;
            for (int i = 0; i < n; i++) {
                sum += Math.min(arr[i], mid);
            }
            if (sum >= target) {
                r = mid;
            } else {
                l = mid + 1;
            }
        }
        int sum1 = 0;
        for (int i = 0; i < n; i++) {
            sum1 += Math.min(arr[i], l);
        }
        int sum2 = 0;
        for (int i = 0; i < n; i++) {
            sum2 += Math.min(arr[i], l - 1);
        }
        return Math.abs(sum1 - target) <= Math.abs(sum2 - target) ? l : l - 1;

=======

        int l = 0;
        int r = 100000;
        while (l < r) {
            int mid = (l + r) / 2;
            int sum = 0;
            for (int i = 0; i < arr.length; i++) {
                if (arr[i] > mid) {
                    sum += mid;
                } else {
                    sum += arr[i];
                }
            }
            if (sum < target) {
                l = mid + 1;
            } else {
                r = mid;
            }
        }
        int sum1 = 0;
        int sum2 = 0;
        for (int i = 0; i < arr.length; i++) {
            if (arr[i] > l) {
                sum1 += l;
            } else {
                sum1 += arr[i];
            }
            if (arr[i] > l - 1) {
                sum2 += l - 1;
            } else {
                sum2 += arr[i];
            }
        }
        if (Math.abs(sum1 - target) <= Math.abs(sum2 - target)) {
            return l;
        } else {
            return l - 1;
        }
