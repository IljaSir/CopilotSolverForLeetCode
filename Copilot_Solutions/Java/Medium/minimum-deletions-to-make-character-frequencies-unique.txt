Synthesizing 10/10 solutions

=======

        int[] freq = new int[26];
        for (int i = 0; i < s.length(); i++) {
            freq[s.charAt(i) - 'a']++;
        }
        Set<Integer> set = new HashSet<>();
        int count = 0;
        for (int i = 0; i < 26; i++) {
            while (freq[i] > 0 && !set.add(freq[i])) {
                freq[i]--;
                count++;
            }
        }
        return count;

=======

        int[] freq = new int[26];
        for (int i = 0; i < s.length(); i++) {
            freq[s.charAt(i) - 'a']++;
        }
        Arrays.sort(freq);
        int res = 0;
        for (int i = 25; i > 0; i--) {
            if (freq[i] == 0) {
                continue;
            }
            if (freq[i] > freq[i - 1]) {
                continue;
            }
            res += freq[i - 1] - freq[i] + 1;
            freq[i - 1] = freq[i] - 1;
        }
        return res;

=======

        int[] freq = new int[26];
        for (char c : s.toCharArray()) {
            freq[c - 'a']++;
        }
        Arrays.sort(freq);
        int ans = 0;
        for (int i = 24; i >= 0; i--) {
            if (freq[i] == 0) {
                break;
            }
            if (freq[i] > freq[i + 1]) {
                ans += freq[i] - freq[i + 1];
                freq[i] = freq[i + 1];
            }
            if (freq[i] == freq[i + 1]) {
                ans += freq[i];
                freq[i] = 0;
            }
        }
        return ans;

=======

        int[] freq = new int[26];
        for (char c : s.toCharArray()) {
            freq[c - 'a']++;
        }
        Arrays.sort(freq);
        int ans = 0;
        for (int i = freq.length - 1; i > 0; i--) {
            if (freq[i] > 0 && freq[i] == freq[i - 1]) {
                freq[i - 1]--;
                ans++;
                i++;
            }
        }
        return ans;

=======

        int[] freq = new int[26];
        for (char c : s.toCharArray()) {
            freq[c - 'a']++;
        }
        Arrays.sort(freq);
        int ans = 0;
        for (int i = freq.length - 1; i > 0; i--) {
            if (freq[i] == 0) {
                break;
            }
            if (freq[i] > freq[i - 1]) {
                continue;
            }
            ans += freq[i - 1] - freq[i] + 1;
            freq[i - 1] = freq[i] - 1;
        }
        return ans;

=======

        int[] freq = new int[26];
        for (int i = 0; i < s.length(); i++) {
            freq[s.charAt(i) - 'a']++;
        }
        int ans = 0;
        boolean[] used = new boolean[s.length() + 1];
        for (int i = 0; i < 26; i++) {
            while (freq[i] > 0 && used[freq[i]]) {
                freq[i]--;
                ans++;
            }
            used[freq[i]] = true;
        }
        return ans;

=======

        int[] cnts = new int[26];
        for (char c : s.toCharArray()) {
            cnts[c - 'a']++;
        }
        Arrays.sort(cnts);
        int res = 0;
        for (int i = 25; i > 0; i--) {
            if (cnts[i] > 0) {
                if (cnts[i] > cnts[i - 1]) {
                    if (cnts[i - 1] == 0) {
                        cnts[i - 1] = cnts[i] - 1;
                    } else {
                        res += cnts[i] - cnts[i - 1];
                    }
                } else {
                    res += cnts[i];
                }
            }
        }
        return res;

=======

        int[] freq = new int[26];
        for (char c : s.toCharArray()) {
            freq[c - 'a']++;
        }
        int[] cnt = new int[s.length() + 1];
        for (int i = 0; i < freq.length; i++) {
            if (freq[i] > 0) {
                cnt[freq[i]]++;
            }
        }
        int ans = 0;
        for (int i = cnt.length - 1; i > 0; i--) {
            if (cnt[i] > 1) {
                int t = cnt[i] - 1;
                ans += t;
                cnt[i - 1] += t;
            }
        }
        return ans;

=======

        int[] freq = new int[26];
        for (char c : s.toCharArray()) {
            freq[c - 'a']++;
        }
        Arrays.sort(freq);
        int n = s.length();
        int ans = 0;
        for (int i = 25; i >= 0; i--) {
            if (freq[i] == 0) {
                continue;
            }
            int j = i - 1;
            while (j >= 0 && freq[j] >= freq[i]) {
                if (freq[j] == freq[i]) {
                    freq[j]--;
                    ans++;
                }
                j--;
            }
        }
        return ans;

=======

        int[] charCount = new int[26];
        for (char c : s.toCharArray()) {
            charCount[c - 'a']++;
        }
        Arrays.sort(charCount);
        int ans = 0;
        int prev = 0;
        for (int i = 25; i >= 0; i--) {
            if (charCount[i] == 0) {
                break;
            }
            if (charCount[i] > prev) {
                prev = charCount[i];
            } else {
                ans += Math.max(0, prev - charCount[i] + 1);
                prev = Math.max(0, charCount[i] - 1);
            }
        }
        return ans;
