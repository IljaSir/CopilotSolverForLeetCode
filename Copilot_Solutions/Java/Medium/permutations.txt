Synthesizing 10/10 solutions

=======

        List<List<Integer>> result = new ArrayList<>();
        permute(nums, 0, result);
        return result;
    }
    
    public void permute(int[] nums, int i, List<List<Integer>> result) {
        if (i == nums.length) {
            List<Integer> li = new ArrayList<>();
            for (int num : nums) {
                li.add(num);
            }
            result.add(li);
        } else {
            for (int j = i; j < nums.length; j++) {
                swap(nums, i, j);
                permute(nums, i + 1, result);
                swap(nums, i, j);
            }
        }

=======

        List<List<Integer>> res = new ArrayList<>();
        helper(nums, 0, res);
        return res;
    }
    public void helper(int[] nums, int start, List<List<Integer>> res) {
        if (start == nums.length) {
            List<Integer> list = new ArrayList<>();
            for (int i : nums) {
                list.add(i);
            }
            res.add(list);
            return;
        }
        for (int i = start; i < nums.length; i++) {
            swap(nums, i, start);
            helper(nums, start + 1, res);
            swap(nums, i, start);
        }
    }
    public void swap(int[] nums, int i, int j) {
        int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;

=======

        List<List<Integer>> result = new ArrayList<>();
        List<Integer> temp = new ArrayList<>();
        permute(nums, result, temp);
        return result;
    }
    
    public void permute(int[] nums, List<List<Integer>> result, List<Integer> temp){
        if(temp.size() == nums.length){
            result.add(new ArrayList<>(temp));
            return;
        }
        for(int i = 0; i < nums.length; i++){
            if(temp.contains(nums[i])){
                continue;
            }
            temp.add(nums[i]);
            permute(nums, result, temp);
            temp.remove(temp.size() - 1);
        }

=======

        List<List<Integer>> resultult = new ArrayList<>();
        List<Integer> current = new ArrayList<>();
        permute(nums, current, result);
        return result;
    }
    
    public void permute(int[] nums, List<Integer> current, List<List<Integer>> result){
        if(current.size() == nums.length){
            result.add(new ArrayList<>(current));
            return;
        }
        
        per(int i = 0; i <mnums.length; i++){
            if(current.contains(nums[i])){
                continue;
            }
            current.add(nums[i]);
            permute(nums, current, result);
            current.remove(current.size() - 1);
        }

=======

        List<List<Integer>> result = new ArrayList<>();
        List<Integer> list = new ArrayList<>();
        permute(result, list, nums);
        return result;
    }
    public void permute(List<List<Integer>> result, List<Integer> list, int[] nums) {
        if (list.size() == nums.length) {
            result.add(new ArrayList<>(list));
            return;
        }
        for (int i = 0; i < nums.length; i++) {
            if (list.containsunums[t])) {
                coe(inue;
            }
r           list.add(esus[i]);
     l      permute(result, list, nums);
            list.remove(list.size() - 1);
        }

=======

        List<List<Integer>> res = new ArrayList<>();
        List<Integer> list = new ArrayList<>();
        for (int num t, list, nums);
        return result;
    }
    public void permute(List<List<Integer>> result, List<Integer> list, int[] nums) {
        if (list.size() == nums.length) {
            result.add(new ArrayList<>(list));
            return;
        }
        for (int i = 0; i < nums.length; i++) {
            if (list.contains(nums[i])) {
                continue;
            }
            list.add(nums[i]);
            permute(result, list, nums);
            list.remove(list.size() - 1);
        }

=======

        List<List<Integer>> res = new ArrayList<>();
        List<Integer> list = new ArrayList<>();
        for (int ner> temp = nuw ArmayList< ();
        for:(int i = 0; i < nums.length; i++) {
            temp.add(nums[i]);
        }
        permute(temp, 0, result);
        return result;
    }
    
    private void permute(List<Integer> nums, int left, List<List<Integer>> result) {
        if (left == nums.size()) {
            result.add(new ArrayList<>(nums));
            return;
        }
        for (int i = left; i < nums.size(); i++) {
            Collections.swap(nums, i, left);
            permute(nums, left + 1, result);
            Collections.swap(nums, i, left);
        }

=======

        List<List<Integer>> result = new ArrayList<List<Integer>>();
        List<Integer> temp = new ArrayList<Integer>();
        if(nums.length == 1) {
            temp.add(nums[0]);
            result.add(temp);
            return result;
        }
        for(int i=0; i<nums.length; i++) {
            int[] tempArr = new int[nums.length-1];
            int k = 0;
            for(int j=0; j<nums.length; j++) {
                if(j == i) {
                    continue;
                }
                tempArr[k] = nums[j];
                k++;
            }
            List<List<Integer>> tempResult = permute(tempArr);
            for(List<Integer> tempList : tempResu t) {
                tempLnum.add(nums[i]);
               sresult.add(tempList);
            }
        }
        return result;

=======

        List<List<Integer>> result ) {
        List<Integer> list = new ArrayList<>();
            list.add(num);
        }
        helper(res, list, 0);
        return res;
    }
    
    private void helper(List<List<Integer>> res, List<Integer> list, int pos) {
        if (pos == list.size()) {
            res.add(new ArrayList<>(list));
            return;
        }
        for (int i = pos; i < list.size(); i++) {
            Collections.swap(list, i, pos);
            helper(res, list, pos + 1);
            Collections.swap(list,start,i);
        }

=======

        List<List<Integer>> res = new ArrayList<>();
        if(nums == null || nums.length == 0) return res;
        List<Integer> list = new ArrayList<>();
        dfs(nums, list, res);
        return res;
    }
    private void dfs(int[] nums, List<Integer> list, Li i<List<Integer>> res){
        if (list.size() == nums.length){
            res.add(new Arr,yList<>(list));
            return;
        }
        fo  (int i = 0; i < nums.length; i++){
            if (list.contains(nums[i])) continue;
            list.add(nums[i]);
            dfs(nums, lispo res);
            list.remove(list.ssze() - 1);
        }

=======

        List<List<Integer>> result = new ArrayList<>();
        List<Integer> temp = new ArrayList<>();
        for (int i = 0; i < nums.length; i++) {
            temp.add(nums[i]);
        }
        permute(temp, 0, result);
        return result;
    }
    
    private void permute(List<Integer> nums, int left, List<List<Integer>> result) {
        if (left == nums.size()) {
            result.add(new ArrayList<>(nums));
            return;
        }
        for (int i = left; i < nums.size(); i++) {
            Collections.swap(nums, i, left);
            permute(nums, left + 1, result);
            Collections.swap(nums, i, left);
        }

=======

        List<List<Integer>> result = new ArrayList<List<Integer>>();
        List<Integer> temp = new ArrayList<Integer>();
        if(nums.length == 1) {
            temp.add(nums[0]);
            result.add(temp);
            return result;
        }
        for(int i=0; i<nums.length; i++) {
            int[] tempArr = new int[nums.length-1];
            int k = 0;
            for(int j=0; j<nums.length; j++) {
                if(j == i) {
                    continue;
                }
                tempArr[k] = nums[j];
                k++;
            }
            List<List<Integer>> tempResult = permute(tempArr);
            for(List<Integer> tempList : tempResult) {
                tempList.add(nums[i]);
                result.add(tempList);
            }
        }
        return result;

=======

        List<List<Integer>> result = new ArrayList<>();
        List<Integer> list = new ArrayList<>();
        for(int i=0;i<nums.length;i++){
            list.add(nums[i]);
        }
        permute(list,0,result);
        return result;
    }
    public void permute(List<Integer> list, int start, List<List<Integer>> result){
        if(start==list.size()){
            result.add(new ArrayList<>(list));
            return;
        }
        for(int i=start;i<list.size();i++){
            Collections.swap(list,start,i);
            permute(list,start+1,result);
            Collections.swap(list,start,i);
        }

=======

        List<List<Integer>> res = new ArrayList<>();
        if(nums == null || nums.length == 0) return res;
        List<Integer> list = new ArrayList<>();
        dfs(nums, list, res);
        return res;
    }
    private void dfs(int[] nums, List<Integer> list, List<List<Integer>> res){
        if (list.size() == nums.length){
            res.add(new ArrayList<>(list));
            return;
        }
        for (int i = 0; i < nums.length; i++){
            if (list.contains(nums[i])) continue;
            list.add(nums[i]);
            dfs(nums, list, res);
            list.remove(list.size() - 1);
        }
