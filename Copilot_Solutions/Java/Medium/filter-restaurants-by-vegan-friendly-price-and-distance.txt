Synthesizing 10/10 solutions

=======

        List<int[]> list = new ArrayList<>();
        for (int[] r : restaurants) {
            if (veganFriendly == 1 && r[2] == 0) {
                continue;
            }
            if (r[3] <= maxPrice && r[4] <= maxDistance) {
                list.add(r);
            }
        }
        Collections.sort(list, (a, b) -> {
            if (a[1] == b[1]) {
                return b[0] - a[0];
            }
            return b[1] - a[1];
        });
        List<Integer> res = new ArrayList<>();
        for (int[] r : list) {
            res.add(r[0]);
        }
        return res;

=======

        List<int[]> list = new ArrayList<>();
        for (int[] r : restaurants) {
            if (veganFriendly == 1 && r[2] == 0) continue;
            if (r[3] > maxPrice || r[4] > maxDistance) continue;
            list.add(r);
        }
        Collections.sort(list, (a, b) -> {
            if (a[1] == b[1]) return b[0] - a[0];
            return b[1] - a[1];
        });
        List<Integer> res = new ArrayList<>();
        for (int[] r : list) res.add(r[0]);
        return res;

=======

        List<Integer> result = new ArrayList<>();
        for (int[] restaurant : restaurants) {
            if (veganFriendly == 1 && restaurant[2] == 0) {
                continue;
            }
            if (restaurant[3] > maxPrice || restaurant[4] > maxDistance) {
                continue;
            }
            result.add(restaurant[0]);
        }
        Collections.sort(result, (a, b) -> {
            for (int[] restaurant : restaurants) {
                if (restaurant[0] == a) {
                    a = restaurant[1];
                }
                if (restaurant[0] == b) {
                    b = restaurant[1];
                }
            }
            return b - a;
        });
        return result;

=======

        List<Integer> result = new ArrayList<>();
        for (int i = 0; i < restaurants.length; i++) {
            int[] restaurant = restaurants[i];
            if (restaurant[2] >= veganFriendly && restaurant[3] <= maxPrice && restaurant[4] <= maxDistance) {
                result.add(restaurant[0]);
            }
        }
        result.sort((a, b) -> {
            int ratingA = 0;
            int ratingB = 0;
            for (int i = 0; i < restaurants.length; i++) {
                int[] restaurant = restaurants[i];
                if (restaurant[0] == a) {
                    ratingA = restaurant[1];
                }
                if (restaurant[0] == b) {
                    ratingB = restaurant[1];
                }
            }
            if (ratingA == ratingB) {
                return b - a;
            } else {
                return ratingB - ratingA;
            }
        });
        return result;

=======

        List<Integer> ids = new ArrayList<>();
        for (int i = 0; i < restaurants.length; i++) {
            if (restaurants[i][2] < veganFriendly) {
                continue;
            }
            if (restaurants[i][3] > maxPrice) {
                continue;
            }
            if (restaurants[i][4] > maxDistance) {
                continue;
            }
            ids.add(restaurants[i][0]);
        }
        Collections.sort(ids, (a, b) -> {
            for (int i = 0; i < restaurants.length; i++) {
                if (restaurants[i][0] == a) {
                    for (int j = 0; j < restaurants.length; j++) {
                        if (restaurants[j][0] == b) {
                            if (restaurants[i][1] != restaurants[j][1]) {
                                return restaurants[j][1] - restaurants[i][1];
                            } else {
                                return restaurants[j][0] - restaurants[i][0];
                            }
                        }
                    }
                }
            }
            return 0;
        });
        return ids;

=======

        List<Integer> result = new ArrayList<>();
        for (int[] restaurant : restaurants) {
            if (restaurant[2] < veganFriendly) continue;
            if (restaurant[3] > maxPrice) continue;
            if (restaurant[4] > maxDistance) continue;
            result.add(restaurant[0]);
        }
        result.sort((a, b) -> {
            for (int[] restaurant : restaurants) {
                if (restaurant[0] == a) {
                    for (int[] restaurant2 : restaurants) {
                        if (restaurant2[0] == b) {
                            if (restaurant[1] > restaurant2[1]) return -1;
                            if (restaurant[1] < restaurant2[1]) return 1;
                            if (restaurant[0] > restaurant2[0]) return -1;
                            if (restaurant[0] < restaurant2[0]) return 1;
                        }
                    }
                }
            }
            return 0;
        });
        return result;

=======

        List<int[]> filtered = new ArrayList<>();
        for (int[] r : restaurants) {
            if (veganFriendly == 1 && r[2] == 0) {
                continue;
            }
            if (r[3] > maxPrice || r[4] > maxDistance) {
                continue;
            }
            filtered.add(r);
        }
        Collections.sort(filtered, new Comparator<int[]>() {
            @Override
            public int compare(int[] r1, int[] r2) {
                if (r1[1] > r2[1]) {
                    return -1;
                } else if (r1[1] < r2[1]) {
                    return 1;
                } else {
                    return r2[0] - r1[0];
                }
            }
        });
        List<Integer> result = new ArrayList<>();
        for (int[] r : filtered) {
            result.add(r[0]);
        }
        return result;

=======

        List<Integer> result = new ArrayList<>();
        if (restaurants.length == 0) {
            return result;
        }
        for (int i = 0; i < restaurants.length; i++) {
            if (veganFriendly == 1 && restaurants[i][2] == 0) {
                continue;
            }
            if (restaurants[i][3] > maxPrice || restaurants[i][4] > maxDistance) {
                continue;
            }
            result.add(restaurants[i][0]);
        }
        Collections.sort(result, new Comparator<Integer>() {
            @Override
            public int compare(Integer o1, Integer o2) {
                int o1Rating = 0;
                int o2Rating = 0;
                for (int i = 0; i < restaurants.length; i++) {
                    if (restaurants[i][0] == o1) {
                        o1Rating = restaurants[i][1];
                    }
                    if (restaurants[i][0] == o2) {
                        o2Rating = restaurants[i][1];
                    }
                }
                if (o1Rating == o2Rating) {
                    return o2 - o1;
                }
                return o2Rating - o1Rating;
            }
        });
        return result;

=======

        List<Integer> res = new ArrayList();
        for (int[] restaurant : restaurants) {
            if (veganFriendly == 1 && restaurant[2] == 0) {
                continue;
            }
            if (restaurant[3] > maxPrice || restaurant[4] > maxDistance) {
                continue;
            }
            res.add(restaurant[0]);
        }
        Collections.sort(res, new Comparator<Integer>() {
            @Override
            public int compare(Integer id1, Integer id2) {
                for (int[] restaurant : restaurants) {
                    if (restaurant[0] == id1) {
                        for (int[] restaurant2 : restaurants) {
                            if (restaurant2[0] == id2) {
                                if (restaurant[1] != restaurant2[1]) {
                                    return restaurant2[1] - restaurant[1];
                                }
                                return restaurant2[0] - restaurant[0];
                            }
                        }
                    }
                }
                return 0;
            }
        });
        return res;

=======

        List<Integer> result = new ArrayList();
        List<Integer> temp = new ArrayList();
        for (int i = 0; i < restaurants.length; i++) {
            if (restaurants[i][2] >= veganFriendly && restaurants[i][3] <= maxPrice && restaurants[i][4] <= maxDistance) {
                temp.add(i);
            }
        }
        int[] rating = new int[temp.size()];
        for (int i = 0; i < temp.size(); i++) {
            rating[i] = restaurants[temp.get(i)][1];
        }
        Arrays.sort(rating);
        for (int i = rating.length - 1; i >= 0; i--) {
            for (int j = 0; j < temp.size(); j++) {
                if (restaurants[temp.get(j)][1] == rating[i]) {
                    result.add(restaurants[temp.get(j)][0]);
                }
            }
        }
        return result;
