Synthesizing 10/10 solutions

=======

        int n = piles.length;
        int[] sum = new int[n];
        sum[n - 1] = piles[n - 1];
        for (int i = n - 2; i >= 0; i--) {
            sum[i] = sum[i + 1] + piles[i];
        }
        int[][] dp = new int[n][n + 1];
        for (int i = 0; i < n; i++) {
            Arrays.fill(dp[i], -1);
        }
        return dfs(0, 1, dp, sum);
    }

    private int dfs(int i, int m, int[][] dp, int[] sum) {
        if (i == dp.length) {
            return 0;
        }
        if (2 * m >= dp.length - i) {
            return sum[i];
        }
        if (dp[i][m] != -1) {
            return dp[i][m];
        }
        int res = 0;
        for (int x = 1; x <= 2 * m; x++) {
            res = Math.max(res, sum[i] - dfs(i + x, Math.max(m, x), dp, sum));
        }
        dp[i][m] = res;
        return res;

=======

        int n = piles.length;
        int[] sum = new int[n];
        sum[n - 1] = piles[n - 1];
        for (int i = n - 2; i >= 0; i--) {
            sum[i] = sum[i + 1] + piles[i];
        }
        int[][] dp = new int[n][n];
        for (int i = 0; i < n; i++) {
            Arrays.fill(dp[i], Integer.MIN_VALUE);
        }
        return dfs(0, 1, sum, dp);
    }

    private int dfs(int i, int M, int[] sum, int[][] dp) {
        if (i == dp.length) {
            return 0;
        }
        if (2 * M >= dp.length - i) {
            return sum[i];
        }
        if (dp[i][M] != Integer.MIN_VALUE) {
            return dp[i][M];
        }
        int res = 0;
        for (int x = 1; x <= 2 * M; x++) {
            res = Math.max(res, sum[i] - dfs(i + x, Math.max(M, x), sum, dp));
        }
        dp[i][M] = res;
        return res;

=======

        int n = piles.length;
        int[] sum = new int[n + 1];
        for (int i = n - 1; i >= 0; i--) {
            sum[i] = sum[i + 1] + piles[i];
        }
        int[][] dp = new int[n][n];
        return stoneGameII(piles, sum, 0, 1, dp);
    }

    private int stoneGameII(int[] piles, int[] sum, int i, int M, int[][] dp) {
        if (i + 2 * M >= piles.length) {
            return sum[i];
        }
        if (dp[i][M] != 0) {
            return dp[i][M];
        }
        int min = Integer.MAX_VALUE;
        for (int x = 1; x <= 2 * M; x++) {
            min = Math.min(min, stoneGameII(piles, sum, i + x, Math.max(M, x), dp));
        }
        dp[i][M] = sum[i] - min;
        return dp[i][M];

=======

        int n = piles.length;
        int[] sum = new int[n + 1];
        for (int i = n - 1; i >= 0; i--) {
            sum[i] = sum[i + 1] + piles[i];
        }
        int[][] dp = new int[n][n];
        return dfs(dp, sum, 0, 1);
    }
    
    private int dfs(int[][] dp, int[] sum, int i, int M) {
        if (i == dp.length) {
            return 0;
        }
        if (2 * M >= dp.length - i) {
            return sum[i];
        }
        if (dp[i][M] > 0) {
            return dp[i][M];
        }
        int res = 0;
        for (int x = 1; x <= 2 * M; x++) {
            res = Math.max(res, sum[i] - dfs(dp, sum, i + x, Math.max(M, x)));
        }
        dp[i][M] = res;
        return res;

=======

        int n = piles.length;
        int[] sum = new int[n + 1];
        for (int i = n - 1; i >= 0; i--) {
            sum[i] = sum[i + 1] + piles[i];
        }
        int[][] memo = new int[n][n];
        return dfs(piles, 0, 1, sum, memo);
    }
    
    private int dfs(int[] piles, int i, int M, int[] sum, int[][] memo) {
        if (i == piles.length) {
            return 0;
        }
        if (2 * M >= piles.length - i) {
            return sum[i];
        }
        if (memo[i][M] > 0) {
            return memo[i][M];
        }
        int res = 0;
        for (int x = 1; x <= 2 * M; x++) {
            res = Math.max(res, sum[i] - dfs(piles, i + x, Math.max(M, x), sum, memo));
        }
        memo[i][M] = res;
        return res;

=======

        int n = piles.length;
        int[] sum = new int[n + 1];
        for (int i = n - 1; i >= 0; i--) {
            sum[i] = sum[i + 1] + piles[i];
        }
        int[][] dp = new int[n][n];
        return dfs(piles, 0, 1, sum, dp);
    }
    private int dfs(int[] piles, int i, int M, int[] sum, int[][] dp) {
        if (i == piles.length) return 0;
        if (2 * M >= piles.length - i) return sum[i];
        if (dp[i][M] != 0) return dp[i][M];
        int res = 0;
        for (int x = 1; x <= 2 * M; x++) {
            res = Math.max(res, sum[i] - dfs(piles, i + x, Math.max(x, M), sum, dp));
        }
        dp[i][M] = res;
        return res;

=======

        int n = piles.length;
        int[] sum = new int[n + 1];
        for (int i = n - 1; i >= 0; i--) {
            sum[i] = sum[i + 1] + piles[i];
        }
        int[][] memo = new int[n][n];
        return dfs(piles, 0, 1, sum, memo);
    }
    public int dfs(int[] piles, int i, int m, int[] sum, int[][] memo) {
        if (i == piles.length) {
            return 0;
        }
        if (2 * m >= piles.length - i) {
            return sum[i];
        }
        if (memo[i][m] != 0) {
            return memo[i][m];
        }
        int res = 0;
        for (int x = 1; x <= 2 * m; x++) {
            res = Math.max(res, sum[i] - dfs(piles, i + x, Math.max(m, x), sum, memo));
        }
        memo[i][m] = res;
        return res;

=======

        int n = piles.length;
        int[] dp = new int[n];
        dp[n - 1] = piles[n - 1];
        for (int i = n - 2; i >= 0; i--) {
            dp[i] = dp[i + 1] + piles[i];
        }
        int[][] memo = new int[n][n];
        return dfs(piles, 0, 1, dp, memo);
    }

    private int dfs(int[] piles, int i, int M, int[] dp, int[][] memo) {
        if (i == piles.length) {
            return 0;
        }
        if (2 * M >= piles.length - i) {
            return dp[i];
        }
        if (memo[i][M] > 0) {
            return memo[i][M];
        }
        int res = 0;
        for (int x = 1; x <= 2 * M; x++) {
            res = Math.max(res, dp[i] - dfs(piles, i + x, Math.max(x, M), dp, memo));
        }
        memo[i][M] = res;
        return res;

=======

        int n = piles.length;
        int[] preSum = new int[n + 1];
        for (int i = 0; i < n; i++) {
            preSum[i + 1] = preSum[i] + piles[i];
        }
        int[][] dp = new int[n][n + 1];
        for (int i = 0; i < n; i++) {
            Arrays.fill(dp[i], -1);
        }
        return dfs(0, 1, preSum, dp);
    }

    private int dfs(int i, int M, int[] preSum, int[][] dp) {
        if (i == preSum.length - 1) {
            return 0;
        }
        if (2 * M >= preSum.length - i - 1) {
            return preSum[preSum.length - 1] - preSum[i];
        }
        if (dp[i][M] != -1) {
            return dp[i][M];
        }
        int res = 0;
        for (int x = 1; x <= 2 * M; x++) {
            res = Math.max(res, preSum[i + x] - preSum[i] + preSum[preSum.length - 1] - preSum[i + x] - dfs(i + x, Math.max(M, x), preSum, dp));
        }
        dp[i][M] = res;
        return res;

=======

        int n = piles.length;
        int[] sum = new int[n];
        sum[n-1] = piles[n-1];
        for (int i = n-2; i >= 0; i--) {
            sum[i] = sum[i+1] + piles[i];
        }
        int[][] memo = new int[n][n];
        return helper(0, 1, sum, memo);
    }
    
    public int helper(int i, int M, int[] sum, int[][] memo) {
        if (i == sum.length) return 0;
        if (2*M >= sum.length - i) return sum[i];
        if (memo[i][M] > 0) return memo[i][M];
        int res = 0;
        for (int x = 1; x <= 2*M; x++) {
            res = Math.max(res, sum[i] - helper(i+x, Math.max(M, x), sum, memo));
        }
        memo[i][M] = res;
        return res;
