Synthesizing 9/10 solutions

=======

        int[] ans = new int[n];
        ans[0] = 1;
        int i = 1;
        while (i < n) {
            for (int j = 0; j < i; j++) {
                ans[i + j] = ans[j] * 2;
            }
            for (int j = 0; j < i; j++) {
                ans[i + j + i] = ans[j] * 2 - 1;
            }
            i *= 2;
        }
        return ans;

=======

        int[] arr = new int[n];
        for (int i = 0; i < n; i++) {
            arr[i] = i + 1;
        }
        return beautifulArray(arr);
    }
    private int[] beautifulArray(int[] nums) {
        int len = nums.length;
        if (len == 1) {
            return nums;
        }
        int[] arr1 = new int[len / 2];
        int[] arr2 = new int[len - len / 2];
        int i1 = 0, i2 = 0;
        for (int i = 0; i < len; i++) {
            if (i % 2 == 0) {
                arr1[i1++] = nums[i];
            } else {
                arr2[i2++] = nums[i];
            }
        }
        arr1 = beautifulArray(arr1);
        arr2 = beautifulArray(arr2);
        int[] arr = new int[len];
        System.arraycopy(arr1, 0, arr, 0, arr1.length);
        System.arraycopy(arr2, 0, arr, arr1.length, arr2.length);
        return arr;

=======

        int[] ans = new int[n];
        ans[0] = 1;
        int m = 1;
        while (m < n) {
            int t = 0;
            for (int i = 0; i < m; i++) {
                if (2 * ans[i] - 1 <= n) {
                    ans[t++] = 2 * ans[i] - 1;
                }
            }
            for (int i = 0; i < m; i++) {
                if (2 * ans[i] <= n) {
                    ans[t++] = 2 * ans[i];
                }
            }
            m = t;
        }
        return ans;

=======

        int[] arr = new int[n];
        for (int i = 0; i < n; i++) {
            arr[i] = i + 1;
        }
        return beautifulArray(arr);
    }
    
    public int[] beautifulArray(int[] arr) {
        if (arr.length < 3) {
            return arr;
        }
        int[] left = new int[arr.length / 2];
        int[] right = new int[arr.length - left.length];
        for (int i = 0; i < arr.length; i++) {
            if (i % 2 == 0) {
                left[i / 2] = arr[i];
            } else {
                right[i / 2] = arr[i];
            }
        }
        int[] leftSorted = beautifulArray(left);
        int[] rightSorted = beautifulArray(right);
        int[] result = new int[arr.length];
        for (int i = 0; i < leftSorted.length; i++) {
            result[i] = leftSorted[i];
        }
        for (int i = 0; i < rightSorted.length; i++) {
            result[i + leftSorted.length] = rightSorted[i];
        }
        return result;

=======

        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = i + 1;
        }
        return beautifulArray(a);
    }

    private int[] beautifulArray(int[] a) {
        if (a.length <= 1) {
            return a;
        }
        int[] odd = new int[a.length / 2 + 1];
        int[] even = new int[a.length / 2];
        int k = 0, l = 0;
        for (int i = 0; i < a.length; i++) {
            if (i % 2 == 0) {
                even[k++] = a[i];
            } else {
                odd[l++] = a[i];
            }
        }
        int[] left = beautifulArray(even);
        int[] right = beautifulArray(odd);
        int[] res = new int[a.length];
        for (int i = 0; i < left.length; i++) {
            res[i] = left[i];
        }
        for (int i = 0; i < right.length; i++) {
            res[left.length + i] = right[i];
        }
        return res;

=======

        int[] result = new int[n];
        result[0] = 1;
        for (int i = 1; i < n; i *= 2) {
            int j = 0;
            for (int k = 0; k < i; k++) {
                result[i + j++] = result[k] * 2 - 1;
            }
            for (int k = 0; k < i; k++) {
                result[i + j++] = result[k] * 2;
            }
        }
        return result;

=======

        int[] res = new int[n];
        res[0] = 1;
        int size = 1;
        while (size < n) {
            int[] tmp = new int[n];
            int j = 0;
            for (int i = 0; i < size; i++) {
                if (2 * res[i] - 1 <= n) {
                    tmp[j++] = 2 * res[i] - 1;
                }
            }
            for (int i = 0; i < size; i++) {
                if (2 * res[i] <= n) {
                    tmp[j++] = 2 * res[i];
                }
            }
            res = tmp;
            size = j;
        }
        return res;

=======

        int[] result = new int[n];
        result[0] = 1;
        for (int m = 1; m < n; m <<= 1) {
            for (int i = 0, j = m; j < n; ++i, ++j) {
                result[j] = result[i] + m;
            }
        }
        return result;

=======

        int[] result = new int[n];
        result[0] = 1;
        int i = 1;
        while (i < n) {
            int j = 0;
            for (int k = 0; k < i; k++) {
                if (result[k] * 2 - 1 <= n) {
                    result[j++] = result[k] * 2 - 1;
                }
            }
            for (int k = 0; k < i; k++) {
                if (result[k] * 2 <= n) {
                    result[j++] = result[k] * 2;
                }
            }
            i *= 2;
        }
        return result;
