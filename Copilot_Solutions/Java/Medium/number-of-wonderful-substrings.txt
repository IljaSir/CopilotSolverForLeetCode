Synthesizing 10/10 solutions

=======

        long ans = 0;
        int[] count = new int[1024];
        count[0] = 1;
        int mask = 0;
        for (int i = 0; i < word.length(); i++) {
            mask ^= 1 << (word.charAt(i) - 'a');
            ans += count[mask];
            for (int j = 0; j < 10; j++) {
                ans += count[mask ^ (1 << j)];
            }
            count[mask]++;
        }
        return ans;

=======

        long[] count = new long[1024];
        count[0] = 1;
        int mask = 0;
        long ans = 0;
        for (int i = 0; i < word.length(); i++) {
            mask ^= 1 << (word.charAt(i) - 'a');
            ans += count[mask];
            for (int j = 0; j < 10; j++) {
                ans += count[mask ^ (1 << j)];
            }
            count[mask]++;
        }
        return ans;

=======

        int[] cnt = new int[1 << 10];
        cnt[0] = 1;
        int mask = 0;
        long ans = 0;
        for (char c : word.toCharArray()) {
            mask ^= 1 << (c - 'a');
            ans += cnt[mask];
            for (int i = 0; i < 10; i++) {
                ans += cnt[mask ^ (1 << i)];
            }
            cnt[mask]++;
        }
        return ans;

=======

        long[] count = new long[1024];
        count[0] = 1;
        long res = 0;
        int mask = 0;
        for (char c : word.toCharArray()) {
            mask ^= 1 << (c - 'a');
            for (int i = 0; i < 10; i++) {
                res += count[mask ^ (1 << i)];
            }
            res += count[mask];
            count[mask]++;
        }
        return res;

=======

        long[] dp = new long[1024];
        dp[0] = 1;
        int mask = 0;
        long res = 0;
        for (int i = 0; i < word.length(); i++) {
            mask ^= 1 << (word.charAt(i) - 'a');
            res += dp[mask];
            for (int j = 0; j < 10; j++) {
                res += dp[mask ^ (1 << j)];
            }
            dp[mask]++;
        }
        return res;

=======

        long[] count = new long[1024];
        count[0] = 1;
        long result = 0;
        int mask = 0;
        for (char c : word.toCharArray()) {
            mask ^= 1 << (c - 'a');
            result += count[mask];
            for (int i = 0; i < 10; i++) {
                result += count[mask ^ (1 << i)];
            }
            count[mask]++;
        }
        return result;

=======

        long[] cnt = new long[1024];
        cnt[0] = 1;
        long ans = 0;
        int mask = 0;
        for (char c : word.toCharArray()) {
            mask ^= (1 << (c - 'a'));
            ans += cnt[mask];
            for (int i = 0; i < 10; i++) {
                ans += cnt[mask ^ (1 << i)];
            }
            cnt[mask]++;
        }
        return ans;

=======

        int[] cnt = new int[1024];
        cnt[0] = 1;
        int status = 0;
        long ans = 0;
        for (int i = 0; i < word.length(); i++) {
            status ^= 1 << (word.charAt(i) - 'a');
            ans += cnt[status];
            for (int j = 0; j < 10; j++) {
                ans += cnt[status ^ (1 << j)];
            }
            cnt[status]++;
        }
        return ans;

=======

        int n = word.length();
        long ans = 0;
        long[] cnt = new long[1 << 10];
        cnt[0] = 1;
        int status = 0;
        for (int i = 0; i < n; i++) {
            status ^= (1 << (word.charAt(i) - 'a'));
            ans += cnt[status];
            for (int j = 0; j < 10; j++) {
                ans += cnt[status ^ (1 << j)];
            }
            cnt[status]++;
        }
        return ans;

=======

        int[] seen = new int[1024];
        seen[0] = 1;
        int mask = 0;
        long ans = 0;
        for (char c : word.toCharArray()) {
            mask ^= 1 << (c - 'a');
            ans += seen[mask];
            for (int i = 0; i < 10; i++) {
                ans += seen[mask ^ (1 << i)];
            }
            seen[mask]++;
        }
        return ans;
