Synthesizing 10/10 solutions

=======

        int n = nums.length;
        int[] prefix = new int[n];
        int[] suffix = new int[n];
        prefix[0] = nums[0];
        suffix[n - 1] = nums[n - 1];
        for (int i = 1; i < n; ++i) {
            prefix[i] = prefix[i - 1] + nums[i];
        }
        for (int i = n - 2; i >= 0; --i) {
            suffix[i] = suffix[i + 1] + nums[i];
        }
        int[] result = new int[n];
        for (int i = 0; i < n; ++i) {
            int left = i * nums[i] - (i > 0 ? prefix[i - 1] : 0);
            int right = (n - i - 1) * nums[i] - (i < n - 1 ? suffix[i + 1] : 0);
            result[i] = left + right;
        }
        return result;

=======

        int n = nums.length;
        int[] result = new int[n];
        int[] sum = new int[n];
        sum[0] = nums[0];
        for (int i = 1; i < n; i++) {
            sum[i] = sum[i - 1] + nums[i];
        }
        for (int i = 0; i < n; i++) {
            int leftSum = sum[i] - nums[i];
            int rightSum = sum[n - 1] - sum[i];
            result[i] = i * nums[i] - leftSum + rightSum - (n - i - 1) * nums[i];
        }
        return result;

=======

        int n = nums.length;
        int[] result = new int[n];
        int[] prefixSum = new int[n];
        prefixSum[0] = nums[0];
        for (int i = 1; i < n; i++) {
            prefixSum[i] = prefixSum[i - 1] + nums[i];
        }
        int[] suffixSum = new int[n];
        suffixSum[n - 1] = nums[n - 1];
        for (int i = n - 2; i >= 0; i--) {
            suffixSum[i] = suffixSum[i + 1] + nums[i];
        }
        for (int i = 0; i < n; i++) {
            int left = i == 0 ? 0 : prefixSum[i - 1];
            int right = i == n - 1 ? 0 : suffixSum[i + 1];
            result[i] = nums[i] * i - left + right - nums[i] * (n - i - 1);
        }
        return result;

=======

        int n = nums.length;
        int[] res = new int[n];
        int sum = 0;
        for (int i = 1; i < n; i++) {
            sum += (nums[i] - nums[i - 1]) * i;
        }
        res[0] = sum;
        for (int i = 1; i < n; i++) {
            sum = sum + (nums[i] - nums[i - 1]) * (i - (n - i));
            res[i] = sum;
        }
        return res;

=======

        int n = nums.length;
        int[] res = new int[n];
        int sum = 0;
        for (int i = 0; i < n; i++) {
            sum += nums[i];
        }
        int leftSum = 0;
        for (int i = 0; i < n; i++) {
            res[i] = (nums[i] * i - leftSum) + (sum - leftSum - nums[i] * (n - i));
            leftSum += nums[i];
        }
        return res;

=======

        int n = nums.length;
        int[] ans = new int[n];
        int[] prefix = new int[n];
        prefix[0] = nums[0];
        for (int i = 1; i < n; i++) {
            prefix[i] = prefix[i - 1] + nums[i];
        }

        for (int i = 0; i < n; i++) {
            // |a - b| = |a - c| + |c - b|
            // |a - c| = |a - b| - |c - b|
            ans[i] = (nums[i] * i - prefix[i - 1])
                + (prefix[n - 1] - prefix[i] - nums[i] * (n - i - 1));
        }
        return ans;

=======

        int[] res = new int[nums.length];
        int sum = 0;
        for (int i = 1; i < nums.length; i++) {
            sum += (nums[i] - nums[i - 1]) * i;
        }
        res[0] = sum;
        for (int i = 1; i < nums.length; i++) {
            sum += nums[i] - nums[i - 1];
            sum -= (nums.length - i) * (nums[i] - nums[i - 1]);
            res[i] = sum;
        }
        return res;

=======

        int n = nums.length;
        int[] ans = new int[n];
        int sum = 0;
        for (int i = 0; i < n; i++) {
            ans[0] += nums[i] - nums[0];
            sum += nums[i];
        }
        for (int i = 1; i < n; i++) {
            ans[i] = ans[i - 1] + (nums[i] - nums[i - 1]) * i - (sum - nums[i] * (n - i));
        }
        return ans;

=======

        int n = nums.length;
        int[] ans = new int[n];
        int sum = 0;
        for (int i = 0; i < n; i++) {
            ans[0] += nums[i];
        }
        for (int i = 1; i < n; i++) {
            ans[i] = ans[i - 1] - (n - i) * nums[i - 1] + (i) * nums[i - 1];
        }
        return ans;

=======

        int n = nums.length;
        int[] ans = new int[n];
        int[] pre = new int[n];
        int[] suf = new int[n];
        pre[0] = nums[0];
        suf[n-1] = nums[n-1];
        for (int i = 1; i < n; i++) {
            pre[i] = pre[i-1] + nums[i];
            suf[n-i-1] = suf[n-i] + nums[n-i-1];
        }
        for (int i = 0; i < n; i++) {
            int left = i;
            int right = n-1-i;
            int leftSum = left * nums[i] - (left == 0 ? 0 : pre[left-1]);
            int rightSum = suf[i+1] - right * nums[i];
            ans[i] = leftSum + rightSum;
        }
        return ans;
