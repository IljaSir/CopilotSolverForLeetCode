Synthesizing 10/10 solutions

=======

        int MOD = 1000000007;
        int maxVal = 0;
        for (int val: deliciousness) {
            maxVal = Math.max(maxVal, val);
        }
        int maxSum = maxVal * 2;
        int pairs = 0;
        Map<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (int val: deliciousness) {
            for (int sum = 1; sum <= maxSum; sum <<= 1) {
                int count = map.getOrDefault(sum - val, 0);
                pairs = (pairs + count) % MOD;
            }
            map.put(val, map.getOrDefault(val, 0) + 1);
        }
        return pairs;

=======

        int MOD = 1000000007;
        int maxVal = 0;
        for (int val: deliciousness) {
            maxVal = Math.max(maxVal, val);
        }
        int maxSum = maxVal * 2;
        int pairs = 0;
        Map<Integer, Integer> map = new HashMap();
        int n = deliciousness.length;
        for (int val: deliciousness) {
            for (int sum = 1; sum <= maxSum; sum <<= 1) {
                int count = map.getOrDefault(sum - val, 0);
                pairs = (pairs + count) % MOD;
            }
            map.put(val, map.getOrDefault(val, 0) + 1);
        }
        return pairs;

=======

        int mod = 1000000007;
        int maxVal = 0;
        for (int val : deliciousness) {
            maxVal = Math.max(maxVal, val);
        }
        int maxSum = maxVal * 2;
        int pairs = 0;
        Map<Integer, Integer> map = new HashMap<>();
        for (int val : deliciousness) {
            for (int sum = 1; sum <= maxSum; sum <<= 1) {
                int count = map.getOrDefault(sum - val, 0);
                pairs = (pairs + count) % mod;
            }
            map.put(val, map.getOrDefault(val, 0) + 1);
        }
        return pairs;

=======

        int mod = 1000000007;
        int max = 0;
        for (int i = 0; i < deliciousness.length; i++) {
            max = Math.max(max, deliciousness[i]);
        }
        int maxSum = max * 2;
        int pairs = 0;
        Map<Integer, Integer> map = new HashMap<>();
        for (int i = 0; i < deliciousness.length; i++) {
            for (int sum = 1; sum <= maxSum; sum <<= 1) {
                int count = map.getOrDefault(sum - deliciousness[i], 0);
                pairs = (pairs + count) % mod;
            }
            map.put(deliciousness[i], map.getOrDefault(deliciousness[i], 0) + 1);
        }
        return pairs;

=======

        int max = 0;
        for (int i = 0; i < deliciousness.length; i++) {
            max = Math.max(max, deliciousness[i]);
        }
        int maxSum = max * 2;
        int count = 0;
        Map<Integer, Integer> map = new HashMap<>();
        for (int i = 0; i < deliciousness.length; i++) {
            int value = deliciousness[i];
            for (int sum = 1; sum <= maxSum; sum <<= 1) {
                int count2 = map.getOrDefault(sum - value, 0);
                count = (count + count2) % 1000000007;
            }
            map.put(value, map.getOrDefault(value, 0) + 1);
        }
        return count;

=======

        int MOD = 1000000007;
        Map<Integer, Integer> map = new HashMap<>();
        int maxVal = 0;
        for (int val: deliciousness) {
            maxVal = Math.max(maxVal, val);
            map.put(val, map.getOrDefault(val, 0) + 1);
        }
        int maxSum = maxVal * 2;
        int pairs = 0;
        for (int val: deliciousness) {
            for (int sum = 1; sum <= maxSum; sum <<= 1) {
                int count = map.getOrDefault(sum - val, 0);
                pairs = (pairs + count) % MOD;
            }
            map.put(val, map.get(val) - 1);
        }
        return pairs;

=======

        int mod = 1000000007;
        Map<Integer, Integer> map = new HashMap<>();
        int max = 0;
        for (int d : deliciousness) {
            map.put(d, map.getOrDefault(d, 0) + 1);
            max = Math.max(max, d);
        }
        int res = 0;
        for (int d : deliciousness) {
            for (int i = 0; i <= 21; i++) {
                int target = (1 << i) - d;
                if (target < 0) continue;
                if (target == d) {
                    res += map.get(d) - 1;
                } else {
                    res += map.getOrDefault(target, 0);
                }
            }
        }
        return res / 2 % mod;

=======

        int mod = 1000000007;
        int maxVal = 0;
        for (int i = 0; i < deliciousness.length; i++) {
            maxVal = Math.max(deliciousness[i], maxVal);
        }
        int maxSum = maxVal * 2;
        int pairs = 0;
        Map<Integer, Integer> map = new HashMap<>();
        for (int i = 0; i < deliciousness.length; i++) {
            int val = deliciousness[i];
            for (int sum = 1; sum <= maxSum; sum <<= 1) {
                int count = map.getOrDefault(sum - val, 0);
                pairs = (pairs + count) % mod;
            }
            map.put(val, map.getOrDefault(val, 0) + 1);
        }
        return pairs;

=======

        int count = 0;
        int mod = 1000000007;
        Map<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (int i = 0; i < deliciousness.length; i++) {
            int power = 1;
            for (int j = 0; j <= 21; j++) {
                int x = power - deliciousness[i];
                if (map.containsKey(x)) {
                    count = (count + map.get(x)) % mod;
                }
                power *= 2;
            }
            map.put(deliciousness[i], map.getOrDefault(deliciousness[i], 0) + 1);
        }
        return count;

=======

        int mod = 1_000_000_007;
        int max = 0;
        for (int i: deliciousness) {
            max = Math.max(max, i);
        }
        int maxSum = max * 2;
        int count = 0;
        Map<Integer, Integer> map = new HashMap<>();
        for (int i: deliciousness) {
            for (int sum = 1; sum <= maxSum; sum <<= 1) {
                count = (count + map.getOrDefault(sum - i, 0)) % mod;
            }
            map.put(i, map.getOrDefault(i, 0) + 1);
        }
        return count;
