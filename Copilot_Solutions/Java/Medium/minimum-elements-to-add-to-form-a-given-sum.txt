Synthesizing 10/10 solutions (Duplicates hidden)

=======

        long sum = 0;
        for (int num : nums) {
            sum += num;
        }
        long diff = Math.abs(goal - sum);
        return (int) ((diff + limit - 1) / limit);

=======

        long sum = 0;
        for (int num : nums) {
            sum += num;
        }
        long diff = Math.abs(sum - goal);
        return (int) (diff / limit + (diff % limit == 0 ? 0 : 1));

=======

        long sum = 0;
        for (int num : nums) {
            sum += num;
        }
        long diff = Math.abs(sum - goal);
        return (int) (diff / limit + (diff % limit > 0 ? 1 : 0));

=======

        long sum = 0;
        for (int num: nums) {
            sum += num;
        }
        long diff = Math.abs(goal - sum);
        return (int) (diff / limit + (diff % limit == 0 ? 0 : 1));

=======

        long sum = 0;
        for (int num : nums)
            sum += num;
        long diff = Math.abs(goal - sum);
        return (int) (diff / limit + (diff % limit == 0 ? 0 : 1));

=======

        long sum = 0;
        for (int x : nums) {
            sum += x;
        }
        long diff = Math.abs(goal - sum);
        return (int) (diff / limit + (diff % limit == 0 ? 0 : 1));

=======

        long sum = 0;
        for (int n : nums) {
            sum += n;
        }
        sum = Math.abs(goal - sum);
        return (int) (sum / limit + (sum % limit == 0 ? 0 : 1));

=======

        long sum = 0;
        for (int num : nums) {
            sum += num;
        }
        int diff = (int) Math.abs(sum - goal);
        return (int) Math.ceil((double) diff / limit);

=======

        long sum = 0;
        for(int num: nums) {
            sum += num;
        }
        long diff = Math.abs(goal - sum);
        if(diff == 0) {
            return 0;
        }
        return (int) (diff / limit + (diff % limit == 0 ? 0 : 1));
