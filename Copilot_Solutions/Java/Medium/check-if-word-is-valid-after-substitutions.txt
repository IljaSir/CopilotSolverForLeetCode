Synthesizing 10/10 solutions

=======

        Stack<Character> stack = new Stack<>();
        for (char c : s.toCharArray()) {
            if (c == 'c') {
                if (stack.isEmpty() || stack.pop() != 'b') return false;
                if (stack.isEmpty() || stack.pop() != 'a') return false;
            } else {
                stack.push(c);
            }
        }
        return stack.isEmpty();

=======

        Stack<Character> stack = new Stack<>();
        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            if (c == 'c') {
                if (stack.isEmpty() || stack.pop() != 'b') {
                    return false;
                }
                if (stack.isEmpty() || stack.pop() != 'a') {
                    return false;
                }
            } else {
                stack.push(c);
            }
        }
        return stack.isEmpty();

=======

        Stack<Character> stack = new Stack<Character>();
        for (char c : s.toCharArray()) {
            if (c == 'c') {
                if (stack.isEmpty() || stack.pop() != 'b') {
                    return false;
                }
                if (stack.isEmpty() || stack.pop() != 'a') {
                    return false;
                }
            } else {
                stack.push(c);
            }
        }
        return stack.isEmpty();

=======

        if (s.length() % 3 != 0) {
            return false;
        }
        Stack<Integer> stack = new Stack<>();
        for (int i = 0; i < s.length(); i++) {
            if (s.charAt(i) == 'c') {
                if (stack.isEmpty() || stack.pop() != 1) {
                    return false;
                }
                if (stack.isEmpty() || stack.pop() != 0) {
                    return false;
                }
            } else {
                stack.push(s.charAt(i) - 'a');
            }
        }
        return stack.isEmpty();

=======

        Stack<Character> st = new Stack<>();
        for(char c : s.toCharArray()){
            if(c == 'c'){
                if(st.isEmpty() || st.pop() != 'b') return false;
                if(st.isEmpty() || st.pop() != 'a') return false;
            } else {
                st.push(c);
            }
        }
        return st.isEmpty();

=======

        if (s.length() % 3 != 0) {
            return false;
        }
        Stack<Character> stack = new Stack<>();
        for (char c : s.toCharArray()) {
            if (stack.isEmpty()) {
                stack.push(c);
            } else {
                if (c == 'c') {
                    if (stack.size() < 2) {
                        return false;
                    }
                    char b = stack.pop();
                    char a = stack.pop();
                    if (a != 'a' || b != 'b') {
                        return false;
                    }
                } else {
                    stack.push(c);
                }
            }
        }
        return stack.isEmpty();

=======

        if (s.length() % 3 != 0) {
            return false;
        }
        int count = 0;
        for (char c : s.toCharArray()) {
            if (c == 'a') {
                count++;
            } else if (c == 'b') {
                count--;
            } else {
                if (count != 0) {
                    return false;
                }
            }
        }
        return count == 0;

=======

        int n = s.length();
        if (n % 3 != 0) {
            return false;
        }
        int i = 0;
        while (i < n) {
            if (s.charAt(i) == 'a') {
                if (i + 2 < n && s.charAt(i + 1) == 'b' && s.charAt(i + 2) == 'c') {
                    i += 3;
                } else {
                    return false;
                }
            } else {
                return false;
            }
        }
        return true;

=======

        if (s.length() % 3 != 0) {
            return false;
        }
        int[] counts = new int[3];
        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            if (c == 'a') {
                counts[0]++;
            } else if (c == 'b') {
                counts[1]++;
            } else {
                counts[2]++;
            }
            if (counts[1] > counts[0] || counts[2] > counts[1]) {
                return false;
            }
        }
        return counts[0] == counts[1] && counts[1] == counts[2];

=======

        // 1. use a stack to store the previous characters
        // 2. if the current character is 'c', check if the previous 2 characters are 'a' and 'b'
        // 3. if not, return false
        // 4. if yes, pop the previous 2 characters and continue
        // 5. if the stack is empty at the end, return true
        // 6. else, return false
        Stack<Character> stack = new Stack<>();
        for (int i = 0; i < s.length(); i++) {
            if (s.charAt(i) == 'c') {
                if (!stack.isEmpty() && stack.peek() == 'b') {
                    stack.pop();
                    if (!stack.isEmpty() && stack.peek() == 'a') {
                        stack.pop();
                    } else {
                        return false;
                    }
                } else {
                    return false;
                }
            } else {
                stack.push(s.charAt(i));
            }
        }
        return stack.isEmpty();
