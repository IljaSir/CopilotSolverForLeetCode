Synthesizing 10/10 solutions

=======

        if (connections.length < n - 1) {
            return -1;
        }
        int[] parent = new int[n];
        for (int i = 0; i < n; i++) {
            parent[i] = i;
        }
        for (int[] edge : connections) {
            int u = edge[0];
            int v = edge[1];
            while (u != parent[u]) {
                u = parent[u];
            }
            while (v != parent[v]) {
                v = parent[v];
            }
            if (u != v) {
                parent[u] = v;
                n--;
            }
        }
        return n - 1;

=======

        if (connections.length < n - 1) {
            return -1;
        }
        int[] parent = new int[n];
        for (int i = 0; i < n; i++) {
            parent[i] = i;
        }
        int count = 0;
        for (int[] c : connections) {
            int x = find(parent, c[0]);
            int y = find(parent, c[1]);
            if (x != y) {
                parent[x] = y;
            }
        }
        for (int i = 0; i < n; i++) {
            if (parent[i] == i) {
                count++;
            }
        }
        return count - 1;
    }
    private int find(int[] parent, int i) {
        if (parent[i] != i) {
            parent[i] = find(parent, parent[i]);
        }
        return parent[i];

=======

        if (connections.length < n - 1) {
            return -1;
        }
        int[] parent = new int[n];
        for (int i = 0; i < n; i++) {
            parent[i] = i;
        }
        for (int[] connection : connections) {
            union(connection[0], connection[1], parent);
        }
        int count = 0;
        for (int i = 0; i < n; i++) {
            if (parent[i] == i) {
                count++;
            }
        }
        return count - 1;
    }
    private void union(int x, int y, int[] parent) {
        int rootX = find(x, parent);
        int rootY = find(y, parent);
        if (rootX != rootY) {
            parent[rootX] = rootY;
        }
    }
    private int find(int x, int[] parent) {
        if (x != parent[x]) {
            parent[x] = find(parent[x], parent);
        }
        return parent[x];

=======

        if (connections.length < n - 1) {
            return -1;
        }
        UnionFind uf = new UnionFind(n);
        for (int[] connection : connections) {
            uf.union(connection[0], connection[1]);
        }
        return uf.count - 1;
    }
}

=======

        if (connections.length < n - 1) {
            return -1;
        }
        UnionFind uf = new UnionFind(n);
        for (int[] connection : connections) {
            uf.union(connection[0], connection[1]);
        }
        return uf.count() - 1;
    }
}

=======

        if (connections.length < n - 1) {
            return -1;
        }
        int[] parents = new int[n];
        for (int i = 0; i < n; i++) {
            parents[i] = i;
        }
        for (int[] connection : connections) {
            int root1 = find(connection[0], parents);
            int root2 = find(connection[1], parents);
            if (root1 != root2) {
                parents[root1] = root2;
                n--;
            }
        }
        return n - 1;
    }
    
    private int find(int i, int[] parents) {
        if (parents[i] == i) {
            return i;
        }
        return parents[i] = find(parents[i], parents);

=======

        if (connections.length < n - 1) {
            return -1;
        }
        UnionFind uf = new UnionFind(n);
        for (int[] conn : connections) {
            uf.union(conn[0], conn[1]);
        }
        return uf.count() - 1;
    }
}

=======

        if (connections.length < n - 1) return -1;
        UnionFind uf = new UnionFind(n);
        for (int[] connection : connections) {
            uf.union(connection[0], connection[1]);
        }
        return uf.count - 1;
    }
    
    class UnionFind {
        int[] parent;
        int[] rank;
        int count;
        
        UnionFind(int n) {
            parent = new int[n];
            rank = new int[n];
            count = n;
            for (int i = 0; i < n; i++) {
                parent[i] = i;
            }
        }
        
        int find(int x) {
            if (x != parent[x]) {
                parent[x] = find(parent[x]);
            }
            return parent[x];
        }
        
        void union(int x, int y) {
            int rootX = find(x);
            int rootY = find(y);
            if (rootX == rootY) return;
            if (rank[rootX] < rank[rootY]) {
                parent[rootX] = rootY;
            } else if (rank[rootX] > rank[rootY]) {
                parent[rootY] = rootX;
            } else {
                parent[rootX] = rootY;
                rank[rootY]++;
            }
            count--;
        }

=======

        int[] parent = new int[n];
        for (int i = 0; i < n; i++) {
            parent[i] = i;
        }
        int extra = 0;
        for (int[] connection : connections) {
            int root1 = findRoot(connection[0], parent);
            int root2 = findRoot(connection[1], parent);
            if (root1 == root2) {
                extra++;
            } else {
                parent[root1] = root2;
            }
        }
        int[] count = new int[n];
        for (int i = 0; i < n; i++) {
            count[findRoot(i, parent)]++;
        }
        int result = 0;
        for (int i = 0; i < n; i++) {
            if (count[i] > 0) {
                result++;
            }
        }
        return extra >= result - 1 ? result - 1 : -1;
    }
    private int findRoot(int i, int[] parent) {
        while (i != parent[i]) {
            i = parent[i];
        }
        return i;

=======

        int[] parent = new int[n];
        int[] rank = new int[n];
        int components = n;
        for (int i = 0; i < n; i++) {
            parent[i] = i;
        }
        for (int[] connection: connections) {
            int root1 = find(parent, rank, connection[0]);
            int root2 = find(parent, rank, connection[1]);
            if (root1 != root2) {
                union(parent, rank, root1, root2);
                components--;
            }
        }
        return components - 1 <= connections.length - components + 1 ? components - 1 : -1;
    }
    
    private int find(int[] parent, int[] rank, int x) {
        if (parent[x] != x) {
            parent[x] = find(parent, rank, parent[x]);
        }
        return parent[x];
    }
    
    private void union(int[] parent, int[] rank, int x, int y) {
        if (rank[x] > rank[y]) {
            parent[y] = x;
        } else if (rank[x] < rank[y]) {
            parent[x] = y;
        } else {
            parent[y] = x;
            rank[x]++;
        }
