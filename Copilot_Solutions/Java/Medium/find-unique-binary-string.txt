Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int n = nums.length;
        int[] arr = new int[n];
        for (int i = 0; i < n; i++) {
            arr[i] = Integer.parseInt(nums[i], 2);
        }
        Arrays.sort(arr);
        for (int i = 0; i < n; i++) {
            if (arr[i] != i) {
                return Integer.toBinaryString(i);
            }
        }
        return Integer.toBinaryString(n);

=======

        int n = nums.length;
        int[] arr = new int[n];
        for (int i = 0; i < n; i++) {
            arr[i] = Integer.parseInt(nums[i], 2);
        }
        Arrays.sort(arr);
        int res = 0;
        for (int i = 0; i < n; i++) {
            if (arr[i] != res) {
                break;
            }
            res++;
        }
        return Integer.toBinaryString(res);

=======

        int n = nums.length;
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = Integer.parseInt(nums[i], 2);
        }
        Arrays.sort(a);
        for (int i = 0; i < n; i++) {
            if (a[i] != i) {
                return Integer.toBinaryString(i);
            }
        }
        return Integer.toBinaryString(n);

=======

        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < nums.length; i++) {
            sb.append(nums[i].charAt(i) == '1' ? '0' : '1');
        }
        return sb.toString();

=======

        int n = nums.length;
        int ans = 0;
        for (int i = 0; i < n; ++i) {
            ans = ans * 2 + nums[i].charAt(i) - '0';
        }
        return Integer.toBinaryString((1 << n) + ans).substring(1);

=======

        int n = nums.length;
        int mask = (1 << n) - 1;
        int sum = 0;
        for (String num : nums) {
            sum += Integer.parseInt(num, 2);
        }
        return Integer.toBinaryString(mask ^ sum);

=======

        int n = nums.length;
        int x = 0;
        for (String s : nums) {
            x ^= Integer.parseInt(s, 2);
        }
        return String.format("%0" + n + "d", Integer.parseInt(Integer.toBinaryString(x)));

=======

        int n = nums.length;
        int max = 1 << n;
        int mask = max - 1;
        int val = 0;
        for (String num : nums) {
            val |= Integer.parseInt(num, 2);
        }
        int diff = mask ^ val;
        return String.format("%" + n + "s", Integer.toBinaryString(diff)).replace(' ', '0');
