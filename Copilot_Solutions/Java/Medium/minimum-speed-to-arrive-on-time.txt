Synthesizing 10/10 solutions

=======

        int n = dist.length;
        if (hour <= n - 1) return -1;
        int lo = 1, hi = (int) 1e7;
        while (lo < hi) {
            int mid = (lo + hi) / 2;
            if (canFinish(mid, dist, hour)) {
                hi = mid;
            } else {
                lo = mid + 1;
            }
        }
        return lo;
    }
    private boolean canFinish(int speed, int[] dist, double hour) {
        double time = 0;
        for (int i = 0; i < dist.length - 1; i++) {
            time += Math.ceil((double) dist[i] / speed);
        }
        time += (double) dist[dist.length - 1] / speed;
        return time <= hour;

=======

        int n = dist.length;
        int lo = 1;
        int hi = 10000000;
        while (lo < hi) {
            int mid = lo + (hi - lo) / 2;
            if (canFinish(mid, dist, hour)) {
                hi = mid;
            } else {
                lo = mid + 1;
            }
        }
        return lo == 10000000 ? -1 : lo;
    }
    
    private boolean canFinish(int speed, int[] dist, double hour) {
        double time = 0;
        for (int i = 0; i < dist.length - 1; i++) {
            time += Math.ceil(dist[i] * 1.0 / speed);
        }
        time += dist[dist.length - 1] * 1.0 / speed;
        return time <= hour;

=======

        int n = dist.length;
        if (n - 1 > hour) {
            return -1;
        }
        int l = 1;
        int r = 10000000;
        while (l < r) {
            int m = (l + r) / 2;
            if (check(dist, m, hour)) {
                r = m;
            } else {
                l = m + 1;
            }
        }
        return l;
    }
    private boolean check(int[] dist, int speed, double hour) {
        double sum = 0;
        for (int i = 0; i < dist.length - 1; i++) {
            sum += Math.ceil(dist[i] * 1.0 / speed);
        }
        sum += dist[dist.length - 1] * 1.0 / speed;
        return sum <= hour;

=======

        int n = dist.length;
        if (hour < n - 1) return -1;
        int left = 1, right = (int) 1e7;
        while (left < right) {
            int mid = left + (right - left) / 2;
            double d = 0;
            for (int i = 0; i < n - 1; i++) {
                d += Math.ceil(dist[i] * 1.0 / mid);
            }
            d += dist[n - 1] * 1.0 / mid;
            if (d <= hour) {
                right = mid;
            } else {
                left = mid + 1;
            }
        }
        return left;

=======

        int n = dist.length;
        if (n - 1 > hour) return -1;
        int left = 1, right = (int) 1e7;
        while (left < right) {
            int mid = left + (right - left) / 2;
            double time = 0;
            for (int i = 0; i < n - 1; ++i) {
                time += Math.ceil((double) dist[i] / mid);
            }
            time += (double) dist[n - 1] / mid;
            if (time > hour) {
                left = mid + 1;
            } else {
                right = mid;
            }
        }
        return left;

=======

        int min = 1;
        int max = 10000000;
        while (min < max) {
            int mid = (min + max) / 2;
            double time = 0;
            for (int i = 0; i < dist.length; i++) {
                if (i == dist.length - 1) {
                    time += (double) dist[i] / mid;
                } else {
                    time += Math.ceil((double) dist[i] / mid);
                }
            }
            if (time <= hour) {
                max = mid;
            } else {
                min = mid + 1;
            }
        }
        return min == 10000000 ? -1 : min;

=======

        int n = dist.length;
        int maxSpeed = 10000000;
        int minSpeed = 1;
        while (minSpeed < maxSpeed) {
            int speed = minSpeed + (maxSpeed - minSpeed) / 2;
            double travelTime = 0;
            for (int i = 0; i < n - 1; i++) {
                travelTime += Math.ceil((double)dist[i] / speed);
            }
            travelTime += (double)dist[n - 1] / speed;
            if (travelTime <= hour) {
                maxSpeed = speed;
            } else {
                minSpeed = speed + 1;
            }
        }
        return minSpeed > 10000000 ? -1 : minSpeed;

=======

        int n = dist.length;
        int lo = 1;
        int hi = (int)1e7;
        while (lo < hi) {
            int mid = (lo + hi) / 2;
            double time = 0;
            for (int i = 0; i < n - 1; i++) {
                time += Math.ceil(dist[i] * 1.0 / mid);
            }
            time += dist[n - 1] * 1.0 / mid;
            if (time > hour) {
                lo = mid + 1;
            } else {
                hi = mid;
            }
        }
        return lo > 1e7 ? -1 : lo;

=======

        int max = 10000000;
        int min = 1;
        while (min < max) {
            int mid = (max + min) / 2;
            double time = 0;
            for (int i = 0; i < dist.length - 1; i++) {
                time += Math.ceil(dist[i] * 1.0 / mid);
            }
            time += dist[dist.length - 1] * 1.0 / mid;
            if (time <= hour) {
                max = mid;
            } else {
                min = mid + 1;
            }
        }
        return min == 10000000 ? -1 : min;

=======

        long left = 1;
        long right = 10000000;
        while (left < right) {
            long mid = (left + right) / 2;
            if (canFinish(dist, hour, mid)) {
                right = mid;
            } else {
                left = mid + 1;
            }
        }
        return left <= 10000000 ? (int) left : -1;
    }
    private boolean canFinish(int[] dist, double hour, long speed) {
        double time = 0;
        for (int i = 0; i < dist.length - 1; i++) {
            time += Math.ceil((double) dist[i] / speed);
        }
        time += (double) dist[dist.length - 1] / speed;
        return time <= hour;
