Synthesizing 10/10 solutions

=======

        int max = -1;
        for(int i = 0; i < nums.length; i++){
            for(int j = i+1; j < nums.length; j++){
                if(sumOfDigits(nums[i]) == sumOfDigits(nums[j])){
                    max = Math.max(max, nums[i] + nums[j]);
                }
            }
        }
        return max;
    }
    
    private int sumOfDigits(int n){
        int sum = 0;
        while(n > 0){
            sum += n%10;
            n /= 10;
        }
        return sum;

=======

        int max = -1;
        for(int i=0; i<nums.length; i++){
            for(int j=i+1; j<nums.length; j++){
                if(sumOfDigits(nums[i]) == sumOfDigits(nums[j])){
                    max = Math.max(max, nums[i]+nums[j]);
                }
            }
        }
        return max;
    }
    
    public int sumOfDigits(int num){
        int sum = 0;
        while(num > 0){
            sum += num % 10;
            num /= 10;
        }
        return sum;

=======

        int max = -1;
        for(int i = 0; i < nums.length; i++) {
            int sum1 = sumOfDigits(nums[i]);
            for(int j = i + 1; j < nums.length; j++) {
                int sum2 = sumOfDigits(nums[j]);
                if(sum1 == sum2) {
                    max = Math.max(max, nums[i] + nums[j]);
                }
            }
        }
        return max;
    }
    
    public int sumOfDigits(int num) {
        int sum = 0;
        while(num > 0) {
            sum += num % 10;
            num /= 10;
        }
        return sum;

=======

        int[] digits = new int[91];
        for (int num : nums) {
            digits[sumOfDigits(num)] = Math.max(digits[sumOfDigits(num)], num);
        }
        int maxSum = -1;
        for (int i = 0; i < digits.length; i++) {
            for (int j = 0; j < digits.length; j++) {
                if (i != j && digits[i] > 0 && digits[j] > 0) {
                    maxSum = Math.max(maxSum, digits[i] + digits[j]);
                }
            }
        }
        return maxSum;
    }
    
    private int sumOfDigits(int num) {
        int sum = 0;
        while (num > 0) {
            sum += num % 10;
            num /= 10;
        }
        return sum;

=======

        int[] digits = new int[81];
        for (int num : nums) {
            int sum = 0;
            for (int n = num; n > 0; n /= 10) {
                sum += n % 10;
            }
            digits[sum] = Math.max(digits[sum], num);
        }
        int max = -1;
        for (int i = 0; i < 81; i++) {
            for (int j = i + 1; j < 81; j++) {
                max = Math.max(max, digits[i] + digits[j]);
            }
        }
        return max;

=======

        int[] count = new int[100];
        Arrays.fill(count, -1);
        int res = -1;
        for (int num: nums) {
            int sum = getSum(num);
            if (count[sum] != -1) {
                res = Math.max(res, count[sum] + num);
            }
            count[sum] = Math.max(count[sum], num);
        }
        return res;
    }
    
    private int getSum(int num) {
        int sum = 0;
        while (num > 0) {
            sum += num % 10;
            num /= 10;
        }
        return sum;

=======

        int[] sum = new int[100];
        int max = -1;
        for (int n : nums) {
            int s = sum(n);
            max = Math.max(max, sum[s] + n);
            sum[s] = Math.max(sum[s], n);
        }
        return max;
    }
    
    int sum(int n) {
        int s = 0;
        while (n > 0) {
            s += n % 10;
            n /= 10;
        }
        return s;

=======

        int max = -1;
        int maxSum = -1;
        for(int i = 0; i < nums.length; i++) {
            int sum = 0;
            int n = nums[i];
            while(n > 0) {
                sum += n % 10;
                n /= 10;
            }
            if (sum > max) {
                max = sum;
                maxSum = nums[i];
            } else if (sum == max) {
                maxSum = Math.max(maxSum, nums[i]);
            }
        }
        return maxSum;

=======

        int[] arr = new int[100];
        for(int i: nums) {
            int sum = 0;
            int tmp = i;
            while(tmp > 0) {
                sum += tmp % 10;
                tmp /= 10;
            }
            arr[sum] = Math.max(arr[sum], i);
        }
        int max = -1;
        for(int i = 0; i < 100; i++) {
            for(int j = i + 1; j < 100; j++) {
                if(arr[i] > 0 && arr[j] > 0) {
                    max = Math.max(max, arr[i] + arr[j]);
                }
            }
        }
        return max;

=======

        int ans = -1;
        int[] sum = new int[91];
        Arrays.fill(sum, -1);
        for (int i = 0; i < nums.length; i++) {
            int a = nums[i];
            int s = 0;
            while (a > 0) {
                s += a % 10;
                a /= 10;
            }
            if (sum[s] != -1) {
                ans = Math.max(ans, sum[s] + nums[i]);
            }
            sum[s] = Math.max(sum[s], nums[i]);
        }
        return ans;
