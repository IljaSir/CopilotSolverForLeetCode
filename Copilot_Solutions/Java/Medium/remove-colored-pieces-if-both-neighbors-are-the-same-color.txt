Synthesizing 10/10 solutions

=======

        int a = 0;
        int b = 0;
        for (int i = 0; i < colors.length() - 2; i++) {
            if (colors.charAt(i) == 'A' && colors.charAt(i + 1) == 'A' && colors.charAt(i + 2) == 'A') {
                a++;
            }
            if (colors.charAt(i) == 'B' && colors.charAt(i + 1) == 'B' && colors.charAt(i + 2) == 'B') {
                b++;
            }
        }
        return a > b;

=======

        int a = 0, b = 0;
        for (int i = 1; i < colors.length() - 1; i++) {
            if (colors.charAt(i) == 'A' && colors.charAt(i - 1) == 'A' && colors.charAt(i + 1) == 'A') {
                a++;
            } else if (colors.charAt(i) == 'B' && colors.charAt(i - 1) == 'B' && colors.charAt(i + 1) == 'B') {
                b++;
            }
        }
        return a > b;

=======

        int a = 0;
        int b = 0;
        for (int i = 1; i < colors.length() - 1; i++) {
            if (colors.charAt(i) == 'A' && colors.charAt(i - 1) == 'A' && colors.charAt(i + 1) == 'A') {
                a++;
            }
            if (colors.charAt(i) == 'B' && colors.charAt(i - 1) == 'B' && colors.charAt(i + 1) == 'B') {
                b++;
            }
        }
        return a > b;

=======

        int a = 0, b = 0;
        for (int i = 1; i < colors.length() - 1; i++) {
            if (colors.charAt(i) == 'A' && colors.charAt(i - 1) == 'A' && colors.charAt(i + 1) == 'A') {
                a++;
            }
            if (colors.charAt(i) == 'B' && colors.charAt(i - 1) == 'B' && colors.charAt(i + 1) == 'B') {
                b++;
            }
        }
        return a > b;

=======

        int n = colors.length();
        int[] a = new int[n];
        int[] b = new int[n];
        if (colors.charAt(0) == 'A') {
            a[0] = 1;
        } else {
            b[0] = 1;
        }
        for (int i = 1; i < n; i++) {
            if (colors.charAt(i) == 'A') {
                a[i] = a[i - 1] + 1;
                b[i] = b[i - 1];
            } else {
                b[i] = b[i - 1] + 1;
                a[i] = a[i - 1];
            }
        }
        int cnt = 0;
        for (int i = 2; i < n; i++) {
            if (a[i] > a[i - 1] && a[i - 1] > a[i - 2]) {
                cnt++;
            }
            if (b[i] > b[i - 1] && b[i - 1] > b[i - 2]) {
                cnt++;
            }
        }
        return cnt > n / 2;

=======

        int count = 0;
        for(int i = 1; i < colors.length() - 1; i++) {
            if(colors.charAt(i) == 'A' && colors.charAt(i - 1) == 'A' && colors.charAt(i + 1) == 'A') {
                count++;
            }
            if(colors.charAt(i) == 'B' && colors.charAt(i - 1) == 'B' && colors.charAt(i + 1) == 'B') {
                count--;
            }
        }
        return count > 0;

=======

        int len = colors.length();
        int a = 0, b = 0;
        for (int i = 0; i < len - 2; i++) {
            if (colors.charAt(i) == 'A' && colors.charAt(i + 1) == 'A' && colors.charAt(i + 2) == 'A') {
                a++;
            }
            if (colors.charAt(i) == 'B' && colors.charAt(i + 1) == 'B' && colors.charAt(i + 2) == 'B') {
                b++;
            }
        }
        return a > b;

=======

        int n = colors.length();
        int countA = 0;
        int countB = 0;
        for(int i = 1; i < n - 1; i++) {
            if(colors.charAt(i) == 'A' && colors.charAt(i - 1) == 'A' && colors.charAt(i + 1) == 'A') {
                countA++;
            }
            if(colors.charAt(i) == 'B' && colors.charAt(i - 1) == 'B' && colors.charAt(i + 1) == 'B') {
                countB++;
            }
        }
        return countA > countB;

=======

        int n = colors.length();
        int a = 0;
        int b = 0;
        for (int i = 0; i < n; i++) {
            int j = i;
            while (j < n && colors.charAt(j) == colors.charAt(i)) {
                j++;
            }
            if (j - i > 2) {
                if (colors.charAt(i) == 'A') {
                    a += j - i - 2;
                } else {
                    b += j - i - 2;
                }
            }
            i = j - 1;
        }
        return a > b;

=======

        int n = colors.length();
        int[] left = new int[n];
        int[] right = new int[n];
        for (int i = 1; i < n; i++) {
            left[i] = left[i - 1] + (colors.charAt(i - 1) == colors.charAt(i) ? 1 : 0);
        }
        for (int i = n - 2; i >= 0; i--) {
            right[i] = right[i + 1] + (colors.charAt(i + 1) == colors.charAt(i) ? 1 : 0);
        }
        int a = 0;
        int b = 0;
        for (int i = 0; i < n; i++) {
            if (colors.charAt(i) == 'A') {
                a += left[i] * right[i];
            } else {
                b += left[i] * right[i];
            }
        }
        return a > b;
