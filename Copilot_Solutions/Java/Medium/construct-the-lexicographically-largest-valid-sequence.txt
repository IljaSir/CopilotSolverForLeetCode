Synthesizing 10/10 solutions

=======

        int[] ans = new int[2 * n - 1];
        boolean[] used = new boolean[n + 1];
        dfs(ans, used, 0);
        return ans;
    }
    
    private boolean dfs(int[] ans, boolean[] used, int pos) {
        if (pos == ans.length) {
            return true;
        }
        if (ans[pos] > 0) {
            return dfs(ans, used, pos + 1);
        }
        for (int i = used.length - 1; i > 0; i--) {
            if (used[i]) {
                continue;
            }
            if (i != 1 && (pos + i >= ans.length || ans[pos + i] > 0)) {
                continue;
            }
            ans[pos] = i;
            if (i != 1) {
                ans[pos + i] = i;
            }
            used[i] = true;
            if (dfs(ans, used, pos + 1)) {
                return true;
            }
            ans[pos] = 0;
            if (i != 1) {
                ans[pos + i] = 0;
            }
            used[i] = false;
        }
        return false;

=======

        int[] ans = new int[2 * n - 1];
        boolean[] used = new boolean[n + 1];
        dfs(ans, used, 0);
        return ans;
    }
    
    private boolean dfs(int[] ans, boolean[] used, int idx) {
        if (idx == ans.length) return true;
        if (ans[idx] != 0) return dfs(ans, used, idx + 1);
        for (int i = used.length - 1; i > 0; i--) {
            if (used[i]) continue;
            if (i != 1 && idx + i >= ans.length) continue;
            if (i != 1 && ans[idx + i] != 0) continue;
            ans[idx] = i;
            used[i] = true;
            if (i != 1) ans[idx + i] = i;
            if (dfs(ans, used, idx + 1)) return true;
            ans[idx] = 0;
            used[i] = false;
            if (i != 1) ans[idx + i] = 0;
        }
        return false;

=======

        int[] ans = new int[2 * n - 1];
        boolean[] used = new boolean[n + 1];
        dfs(ans, used, 0);
        return ans;
    }
    private boolean dfs(int[] ans, boolean[] used, int idx) {
        if (idx == ans.length) return true;
        if (ans[idx] != 0) return dfs(ans, used, idx + 1);
        for (int i = used.length - 1; i >= 1; --i) {
            if (used[i]) continue;
            if (i == 1) {
                ans[idx] = 1;
                used[i] = true;
                if (dfs(ans, used, idx + 1)) return true;
                ans[idx] = 0;
                used[i] = false;
                return false;
            } else if (idx + i < ans.length && ans[idx + i] == 0) {
                ans[idx] = i;
                ans[idx + i] = i;
                used[i] = true;
                if (dfs(ans, used, idx + 1)) return true;
                ans[idx] = 0;
                ans[idx + i] = 0;
                used[i] = false;
            }
        }
        return false;

=======

        int[] res = new int[n * 2 - 1];
        boolean[] visited = new boolean[n + 1];
        dfs(res, visited, 0);
        return res;
    }
    
    private boolean dfs(int[] res, boolean[] visited, int index) {
        if (index == res.length) {
            return true;
        }
        if (res[index] != 0) {
            return dfs(res, visited, index + 1);
        }
        for (int i = visited.length - 1; i > 0; i--) {
            if (visited[i]) {
                continue;
            }
            if (i == 1) {
                res[index] = 1;
                visited[i] = true;
                if (dfs(res, visited, index + 1)) {
                    return true;
                }
                res[index] = 0;
                visited[i] = false;
            } else if (index + i < res.length && res[index + i] == 0) {
                res[index] = i;
                res[index + i] = i;
                visited[i] = true;
                if (dfs(res, visited, index + 1)) {
                    return true;
                }
                res[index] = 0;
                res[index + i] = 0;
                visited[i] = false;
            }
        }
        return false;

=======

        int[] ans = new int[2 * n - 1];
        int[] count = new int[n + 1];
        Arrays.fill(count, 2);
        count[1] = 1;
        dfs(ans, count, 0);
        return ans;
    }

    private boolean dfs(int[] ans, int[] count, int index) {
        if (index == ans.length) {
            return true;
        }
        if (ans[index] != 0) {
            return dfs(ans, count, index + 1);
        }
        for (int i = count.length - 1; i > 0; i--) {
            if (count[i] > 0) {
                if (i == 1 || index + i < ans.length && ans[index + i] == 0) {
                    ans[index] = i;
                    if (i > 1) {
                        ans[index + i] = i;
                    }
                    count[i]--;
                    if (dfs(ans, count, index + 1)) {
                        return true;
                    }
                    ans[index] = 0;
                    if (i > 1) {
                        ans[index + i] = 0;
                    }
                    count[i]++;
                }
            }
        }
        return false;

=======

        int[] res = new int[n * 2 - 1];
        boolean[] used = new boolean[n + 1];
        dfs(res, 0, used);
        return res;
    }
    
    private boolean dfs(int[] res, int idx, boolean[] used) {
        if (idx == res.length) {
            return true;
        }
        if (res[idx] != 0) {
            return dfs(res, idx + 1, used);
        }
        for (int i = used.length - 1; i > 0; i--) {
            if (used[i]) {
                continue;
            }
            if (i != 1 && (idx + i >= res.length || res[idx + i] != 0)) {
                continue;
            }
            res[idx] = i;
            used[i] = true;
            if (i != 1) {
                res[idx + i] = i;
            }
            if (dfs(res, idx + 1, used)) {
                return true;
            }
            res[idx] = 0;
            used[i] = false;
            if (i != 1) {
                res[idx + i] = 0;
            }
        }
        return false;

=======

        int[] result = new int[n * 2 - 1];
        boolean[] used = new boolean[n + 1];
        if (dfs(result, used, 0)) {
            return result;
        }
        return new int[0];
    }

    private boolean dfs(int[] result, boolean[] used, int start) {
        if (start == result.length) {
            return true;
        }
        if (result[start] > 0) {
            return dfs(result, used, start + 1);
        }
        for (int i = used.length - 1; i > 0; i--) {
            if (used[i]) {
                continue;
            }
            if (i == 1) {
                result[start] = 1;
                used[1] = true;
                if (dfs(result, used, start + 1)) {
                    return true;
                }
                result[start] = 0;
                used[1] = false;
            } else if (start + i < result.length && result[start + i] == 0) {
                result[start] = i;
                result[start + i] = i;
                used[i] = true;
                if (dfs(result, used, start + 1)) {
                    return true;
                }
                result[start] = 0;
                result[start + i] = 0;
                used[i] = false;
            }
        }
        return false;

=======

        int[] ans = new int[2 * n - 1];
        boolean[] visited = new boolean[n + 1];
        
        dfs(ans, visited, 0);
        
        return ans;
    }
    
    private boolean dfs(int[] ans, boolean[] visited, int index) {
        if (index == ans.length) {
            return true;
        }
        
        if (ans[index] != 0) {
            return dfs(ans, visited, index + 1);
        }
        
        for (int i = visited.length - 1; i > 0; i--) {
            if (visited[i]) {
                continue;
            }
            
            if (i == 1) {
                ans[index] = 1;
                visited[i] = true;
                if (dfs(ans, visited, index + 1)) {
                    return true;
                }
                ans[index] = 0;
                visited[i] = false;
            } else if (index + i < ans.length && ans[index + i] == 0) {
                ans[index] = i;
                ans[index + i] = i;
                visited[i] = true;
                if (dfs(ans, visited, index + 1)) {
                    return true;
                }
                ans[index] = 0;
                ans[index + i] = 0;
                visited[i] = false;
            }
        }
        
        return false;

=======

        int[] result = new int[n * 2 - 1];
        boolean[] used = new boolean[n + 1];
        boolean found = dfs(result, used, 0);
        return result;
    }
    
    private boolean dfs(int[] result, boolean[] used, int index) {
        if (index == result.length) {
            return true;
        }
        if (result[index] != 0) {
            return dfs(result, used, index + 1);
        }
        for (int i = used.length - 1; i >= 1; i--) {
            if (used[i]) {
                continue;
            }
            if (i != 1 && index + i >= result.length) {
                continue;
            }
            if (i != 1 && result[index + i] != 0) {
                continue;
            }
            result[index] = i;
            if (i != 1) {
                result[index + i] = i;
            }
            used[i] = true;
            if (dfs(result, used, index + 1)) {
                return true;
            }
            result[index] = 0;
            if (i != 1) {
                result[index + i] = 0;
            }
            used[i] = false;
        }
        return false;

=======

        int[] ret = new int[2 * n - 1];
        boolean[] used = new boolean[n + 1];
        dfs(n, used, ret, 0);
        return ret;
    }
    
    boolean dfs(int n, boolean[] used, int[] ret, int pos) {
        if (pos == ret.length) {
            return true;
        }
        if (ret[pos] != 0) {
            return dfs(n, used, ret, pos + 1);
        }
        for (int i = n; i >= 1; i--) {
            if (used[i]) {
                continue;
            }
            if (i == 1 || pos + i < ret.length && ret[pos + i] == 0) {
                used[i] = true;
                ret[pos] = i;
                if (i > 1) {
                    ret[pos + i] = i;
                }
                if (dfs(n, used, ret, pos + 1)) {
                    return true;
                }
                used[i] = false;
                ret[pos] = 0;
                if (i > 1) {
                    ret[pos + i] = 0;
                }
            }
        }
        return false;
