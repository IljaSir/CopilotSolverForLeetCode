Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int x = 0, y = 0, z = 0;
        for (int[] t : triplets) {
            if (t[0] <= target[0] && t[1] <= target[1] && t[2] <= target[2]) {
                x = Math.max(x, t[0]);
                y = Math.max(y, t[1]);
                z = Math.max(z, t[2]);
            }
        }
        return x == target[0] && y == target[1] && z == target[2];

=======

        int a = 0;
        int b = 0;
        int c = 0;
        for (int[] triplet : triplets) {
            if (triplet[0] <= target[0] && triplet[1] <= target[1] && triplet[2] <= target[2]) {
                a = Math.max(a, triplet[0]);
                b = Math.max(b, triplet[1]);
                c = Math.max(c, triplet[2]);
            }
        }
        return a == target[0] && b == target[1] && c == target[2];

=======

        int[] res = new int[3];
        for (int[] triplet : triplets) {
            if (triplet[0] <= target[0] && triplet[1] <= target[1] && triplet[2] <= target[2]) {
                res[0] = Math.max(res[0], triplet[0]);
                res[1] = Math.max(res[1], triplet[1]);
                res[2] = Math.max(res[2], triplet[2]);
            }
        }
        return res[0] == target[0] && res[1] == target[1] && res[2] == target[2];

=======

        int[] max = new int[3];
        for (int[] t : triplets) {
            if (t[0] <= target[0] && t[1] <= target[1] && t[2] <= target[2]) {
                max[0] = Math.max(max[0], t[0]);
                max[1] = Math.max(max[1], t[1]);
                max[2] = Math.max(max[2], t[2]);
            }
        }
        return max[0] == target[0] && max[1] == target[1] && max[2] == target[2];

=======

        int[] t = new int[3];
        for (int[] triplet : triplets) {
            if (triplet[0] <= target[0] && triplet[1] <= target[1] && triplet[2] <= target[2]) {
                t[0] = Math.max(t[0], triplet[0]);
                t[1] = Math.max(t[1], triplet[1]);
                t[2] = Math.max(t[2], triplet[2]);
            }
        }
        return t[0] == target[0] && t[1] == target[1] && t[2] == target[2];

=======

        int x = target[0];
        int y = target[1];
        int z = target[2];
        int xMax = 0;
        int yMax = 0;
        int zMax = 0;
        for (int[] triplet : triplets) {
            if (triplet[0] <= x && triplet[1] <= y && triplet[2] <= z) {
                xMax = Math.max(xMax, triplet[0]);
                yMax = Math.max(yMax, triplet[1]);
                zMax = Math.max(zMax, triplet[2]);
            }
        }
        return xMax == x && yMax == y && zMax == z;

=======

        int x = target[0];
        int y = target[1];
        int z = target[2];
        int a = 0;
        int b = 0;
        int c = 0;
        for(int[] triplet: triplets) {
            if(triplet[0] <= x && triplet[1] <= y && triplet[2] <= z) {
                a = Math.max(a, triplet[0]);
                b = Math.max(b, triplet[1]);
                c = Math.max(c, triplet[2]);
            }
        }
        return a == x && b == y && c == z;

=======

        int[] res = new int[3];
        for(int[] t : triplets) {
            if(t[0] <= target[0] && t[1] <= target[1] && t[2] <= target[2]) {
                res[0] = Math.max(res[0], t[0]);
                res[1] = Math.max(res[1], t[1]);
                res[2] = Math.max(res[2], t[2]);
            }
        }
        return res[0] == target[0] && res[1] == target[1] && res[2] == target[2];

=======

        int[] targetCount = new int[3];
        for (int[] triplet : triplets) {
            if (triplet[0] <= target[0] && triplet[1] <= target[1] && triplet[2] <= target[2]) {
                targetCount[0] = Math.max(targetCount[0], triplet[0]);
                targetCount[1] = Math.max(targetCount[1], triplet[1]);
                targetCount[2] = Math.max(targetCount[2], triplet[2]);
            }
        }
        return targetCount[0] == target[0] && targetCount[1] == target[1] && targetCount[2] == target[2];
