Synthesizing 10/10 solutions

=======

        PriorityQueue<Integer> pq = new PriorityQueue<>((a, b) -> b - a);
        for (int i = 0; i < piles.length; i++) {
            pq.add(piles[i]);
        }
        while (k > 0) {
            int max = pq.poll();
            pq.add(max - max / 2);
            k--;
        }
        int sum = 0;
        while (!pq.isEmpty()) {
            sum += pq.poll();
        }
        return sum;

=======

        PriorityQueue<Integer> maxHeap = new PriorityQueue<>((a, b) -> b - a);
        for (int pile : piles) {
            maxHeap.offer(pile);
        }
        while (k > 0) {
            int max = maxHeap.poll();
            maxHeap.offer(max - max / 2);
            k--;
        }
        int res = 0;
        while (!maxHeap.isEmpty()) {
            res += maxHeap.poll();
        }
        return res;

=======

        PriorityQueue<Integer> pq = new PriorityQueue<>((a, b) -> b - a);
        int sum = 0;
        for (int p : piles) {
            sum += p;
            pq.offer(p);
        }
        while (k-- > 0) {
            int p = pq.poll();
            int half = p / 2;
            sum -= half;
            pq.offer(p - half);
        }
        return sum;

=======

        PriorityQueue<Integer> pq = new PriorityQueue<Integer>((a, b) -> b - a);
        for (int i = 0; i < piles.length; i++) {
            pq.offer(piles[i]);
        }
        while (k > 0) {
            int max = pq.poll();
            pq.offer(max - max / 2);
            k--;
        }
        int sum = 0;
        while (!pq.isEmpty()) {
            sum += pq.poll();
        }
        return sum;

=======

        PriorityQueue<Integer> pq = new PriorityQueue<>(Collections.reverseOrder());
        int sum = 0;
        for (int pile : piles) {
            pq.offer(pile);
            sum += pile;
        }
        while (k > 0) {
            int pile = pq.poll();
            sum -= pile / 2;
            pq.offer(pile - pile / 2);
            k--;
        }
        return sum;

=======

        PriorityQueue<Integer> pq = new PriorityQueue<Integer>(Collections.reverseOrder());
        int total = 0;
        for (int i = 0; i < piles.length; i++) {
            total += piles[i];
            pq.add(piles[i]);
        }
        for (int i = 0; i < k; i++) {
            int max = pq.poll();
            int newMax = max - (max / 2);
            total -= (max - newMax);
            pq.add(newMax);
        }
        return total;

=======

        PriorityQueue<Integer> queue = new PriorityQueue<>((a,b)->b-a);
        int sum = 0;
        for (int i = 0; i < piles.length; i++) {
            queue.offer(piles[i]);
            sum += piles[i];
        }
        while (k-- > 0) {
            int max = queue.poll();
            sum -= max / 2;
            queue.offer(max - max / 2);
        }
        return sum;

=======

        PriorityQueue<Integer> pq = new PriorityQueue<>((a,b) -> b-a);
        for (int x : piles) {
            pq.add(x);
        }
        while (k > 0) {
            int x = pq.poll();
            int y = (x + 1) / 2;
            x -= y;
            pq.add(x);
            k--;
        }
        int ans = 0;
        while (!pq.isEmpty()) {
            ans += pq.poll();
        }
        return ans;

=======

        int sum = 0;
        PriorityQueue<Integer> pq = new PriorityQueue<Integer>((a,b)->b-a);
        for(int i=0;i<piles.length;i++){
            pq.add(piles[i]);
            sum += piles[i];
        }
        for(int i=0;i<k;i++){
            int val = pq.poll();
            int diff = val/2;
            sum -= diff;
            pq.add(val-diff);
        }
        return sum;

=======

        if(k == 0) return 0;
        PriorityQueue<Integer> pq = new PriorityQueue<>((a,b) -> b - a);
        for(int p : piles) pq.add(p);
        while(k-- > 0) {
            int p = pq.poll();
            pq.add(p - p/2);
        }
        int res = 0;
        while(!pq.isEmpty()) res += pq.poll();
        return res;
