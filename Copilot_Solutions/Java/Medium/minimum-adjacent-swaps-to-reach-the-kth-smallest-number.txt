Synthesizing 10/10 solutions

=======

        char[] arr = num.toCharArray();
        for (int i = 0; i < k; i++) {
            nextPermutation(arr);
        }
        int res = 0;
        for (int i = 0; i < num.length(); i++) {
            if (arr[i] != num.charAt(i)) {
                for (int j = i + 1; j < num.length(); j++) {
                    if (arr[j] == num.charAt(i)) {
                        while (j > i) {
                            swap(arr, j, j - 1);
                            j--;
                            res++;
                        }
                        break;
                    }
                }
            }
        }
        return res;
    }
    
    private void nextPermutation(char[] arr) {
        int i = arr.length - 2;
        while (i >= 0 && arr[i] >= arr[i + 1]) i--;
        if (i >= 0) {
            int j = arr.length - 1;
            while (j >= 0 && arr[j] <= arr[i]) j--;
            swap(arr, i, j);
        }
        reverse(arr, i + 1);
    }
    
    private void swap(char[] arr, int i, int j) {
        char tmp = arr[i];
        arr[i] = arr[j];
        arr[j] = tmp;
    }
    
    private void reverse(char[] arr, int start) {
        int i = start, j = arr.length - 1;
        while (i < j) {
            swap(arr, i, j);
            i++;
            j--;
        }

=======

        char[] c = num.toCharArray();
        for (int i = 0; i < k; i++) {
            nextPermutation(c);
        }
        int ans = 0;
        for (int i = 0; i < c.length; i++) {
            if (c[i] != num.charAt(i)) {
                int j = i + 1;
                while (c[j] != num.charAt(i)) {
                    j++;
                }
                while (j > i) {
                    char t = c[j];
                    c[j] = c[j - 1];
                    c[j - 1] = t;
                    ans++;
                    j--;
                }
            }
        }
        return ans;
    }
    private void nextPermutation(char[] nums) {
        int n = nums.length;
        int i = n - 2;
        while (i >= 0 && nums[i + 1] <= nums[i]) {
            i--;
        }
        if (i >= 0) {
            int j = n - 1;
            while (j >= 0 && nums[j] <= nums[i]) {
                j--;
            }
            swap(nums, i, j);
        }
        reverse(nums, i + 1);
    }
    private void reverse(char[] nums, int start) {
        int i = start, j = nums.length - 1;
        while (i < j) {
            swap(nums, i, j);
            i++;
            j--;
        }

=======

        char[] c = num.toCharArray();
        while (k-- > 0) {
            nextPermutation(c);
        }
        int res = 0;
        for (int i = 0; i < c.length; i++) {
            if (c[i] != num.charAt(i)) {
                int j = i + 1;
                while (c[j] != num.charAt(i)) {
                    j++;
                }
                while (j > i) {
                    swap(c, j, j - 1);
                    j--;
                    res++;
                }
            }
        }
        return res;
    }
    private void nextPermutation(char[] c) {
        int i = c.length - 2;
        while (i >= 0 && c[i] >= c[i + 1]) {
            i--;
        }
        if (i >= 0) {
            int j = c.length - 1;
            while (j >= 0 && c[j] <= c[i]) {
                j--;
            }
            swap(c, i, j);
        }
        reverse(c, i + 1, c.length - 1);
    }
    private void reverse(char[] c, int i, int j) {
        while (i < j) {
            swap(c, i, j);
            i++;
            j--;
        }

=======

        int[] a = new int[num.length()];
        for (int i = 0; i < num.length(); i++) {
            a[i] = num.charAt(i) - '0';
        }
        int[] b = new int[num.length()];
        for (int i = 0; i < k; i++) {
            nextPermutation(a);
        }
        for (int i = 0; i < num.length(); i++) {
            b[i] = a[i];
        }
        Arrays.sort(a);
        int ans = 0;
        for (int i = 0; i < num.length(); i++) {
            if (a[i] == b[i]) {
                continue;
            }
            int j = i + 1;
            while (a[j] != b[i]) {
                j++;
            }
            while (j > i) {
                int temp = a[j];
                a[j] = a[j - 1];
                a[j - 1] = temp;
                j--;
                ans++;
            }
        }
        return ans;
    }

    public void nextPermutation(int[] nums) {
        int n = nums.length;
        int i = n - 2;
        while (i >= 0 && nums[i] >= nums[i + 1]) {
            i--;
        }
        if (i >= 0) {
            int j = n - 1;
            while (j >= 0 && nums[i] >= nums[j]) {
                j--;
            }
            swap(nums, i, j);
        }
        reverse(nums, i + 1);
    }

    public void reverse(int[] nums, int start) {
        int left = start, right = nums.length - 1;
        while (left < right) {
            swap(nums, left, right);
            left++;
            right--;
        }

=======

        char[] c = num.toCharArray();
        int n = c.length;
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = c[i] - '0';
        }
        for (int i = 0; i < k; i++) {
            nextPermutation(a);
        }
        int ans = 0;
        for (int i = 0; i < n; i++) {
            if (a[i] == c[i] - '0') {
                continue;
            }
            for (int j = i + 1; j < n; j++) {
                if (a[j] == c[i] - '0') {
                    for (int k1 = j; k1 > i; k1--) {
                        int t = a[k1];
                        a[k1] = a[k1 - 1];
                        a[k1 - 1] = t;
                        ans++;
                    }
                    break;
                }
            }
        }
        return ans;
    }
    public void nextPermutation(int[] nums) {
        int n = nums.length;
        int i = n - 2;
        while (i >= 0 && nums[i] >= nums[i + 1]) {
            i--;
        }
        if (i >= 0) {
            int j = n - 1;
            while (j >= 0 && nums[j] <= nums[i]) {
                j--;
            }
            swap(nums, i, j);
        }
        reverse(nums, i + 1);
    }
    public void swap(int[] nums, int i, int j) {
        int t = nums[i];
        nums[i] = nums[j];
        nums[j] = t;
    }
    public void reverse(int[] nums, int start) {
        int i = start, j = nums.length - 1;
        while (i < j) {
            swap(nums, i, j);
            i++;
            j--;
        }

=======

        String target = num;
        for (int i = 0; i < k; i++) {
            target = nextPermutation(target);
        }
        int swaps = 0;
        for (int i = 0; i < num.length(); i++) {
            if (num.charAt(i) != target.charAt(i)) {
                for (int j = i + 1; j < num.length(); j++) {
                    if (num.charAt(j) == target.charAt(i)) {
                        for (int k1 = j; k1 > i; k1--) {
                            num = swap(num, k1, k1 - 1);
                            swaps++;
                        }
                        break;
                    }
                }
            }
        }
        return swaps;
    }
    private String swap(String num, int i, int j) {
        char[] chars = num.toCharArray();
        char temp = chars[i];
        chars[i] = chars[j];
        chars[j] = temp;
        return new String(chars);
    }
    private String nextPermutation(String num) {
        char[] chars = num.toCharArray();
        int i = chars.length - 2;
        while (i >= 0 && chars[i + 1] <= chars[i]) {
            i--;
        }
        if (i >= 0) {
            int j = chars.length - 1;
            while (j >= 0 && chars[j] <= chars[i]) {
                j--;
            }
            swap(chars, i, j);
        }
        reverse(chars, i + 1);
        return new String(chars);
    }
    private void reverse(char[] chars, int start) {
        int i = start, j = chars.length - 1;
        while (i < j) {
            swap(chars, i, j);
            i++;
            j--;
        }

=======

        int n = num.length();
        char[] s = num.toCharArray();
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = s[i] - '0';
        }
        while (k-- > 0) {
            nextPermutation(a);
        }
        int ans = 0;
        for (int i = 0; i < n; i++) {
            if (a[i] == s[i] - '0') {
                continue;
            }
            for (int j = i + 1; j < n; j++) {
                if (a[i] == s[j] - '0') {
                    while (j > i) {
                        swap(s, j, j - 1);
                        j--;
                        ans++;
                    }
                    break;
                }
            }
        }
        return ans;
    }

    public void nextPermutation(int[] a) {
        int n = a.length;
        int i = n - 2;
        while (i >= 0 && a[i] >= a[i + 1]) {
            i--;
        }
        if (i >= 0) {
            int j = n - 1;
            while (j >= 0 && a[j] <= a[i]) {
                j--;
            }
            swap(a, i, j);
        }
        reverse(a, i + 1, n - 1);
    }

    public void swap(int[] a, int i, int j) {
        int t = a[i];
        a[i] = a[j];
        a[j] = t;
    }

    public void reverse(int[] a, int i, int j) {
        while (i < j) {
            swap(a, i, j);
            i++;
            j--;
        }
    }

    public void swap(char[] s, int i, int j) {
        char t = s[i];
        s[i] = s[j];
        s[j] = t;
    }

    public void reverse(char[] s, int i, int j) {
        while (i < j) {
            swap(s, i, j);
            i++;
            j--;
        }

=======

        String target = num;
        while (k-- > 0) {
            target = nextPermutation(target);
        }
        int n = num.length();
        int[] pos = new int[n];
        for (int i = 0; i < n; i++) {
            pos[i] = target.indexOf(num.charAt(i));
        }
        int ans = 0;
        for (int i = 0; i < n; i++) {
            while (pos[i] != i) {
                swap(pos, i, pos[i]);
                ans++;
            }
        }
        return ans;
    }

    private String nextPermutation(String s) {
        int n = s.length();
        int i = n - 2;
        while (i >= 0 && s.charAt(i) >= s.charAt(i + 1)) {
            i--;
        }
        if (i < 0) {
            return s;
        }
        int j = n - 1;
        while (j >= 0 && s.charAt(j) <= s.charAt(i)) {
            j--;
        }
        s = swap(s, i, j);
        return s.substring(0, i + 1) + new StringBuilder(s.substring(i + 1)).reverse().toString();
    }

    private String swap(String s, int i, int j) {
        char[] chars = s.toCharArray();
        char tmp = chars[i];
        chars[i] = chars[j];
        chars[j] = tmp;
        return new String(chars);

=======

        char[] numArray = num.toCharArray();
        char[] sortedNum = num.toCharArray();
        Arrays.sort(sortedNum);
        for (int i = 0; i < k; i++) {
            nextPermutation(sortedNum);
        }
        int swaps = 0;
        for (int i = 0; i < numArray.length; i++) {
            if (numArray[i] != sortedNum[i]) {
                for (int j = i + 1; j < numArray.length; j++) {
                    if (numArray[j] == sortedNum[i]) {
                        for (int k = j; k > i; k--) {
                            char temp = numArray[k];
                            numArray[k] = numArray[k - 1];
                            numArray[k - 1] = temp;
                            swaps++;
                        }
                        break;
                    }
                }
            }
        }
        return swaps;
    }
    
    public void nextPermutation(char[] nums) {
        int i = nums.length - 2;
        while (i >= 0 && nums[i + 1] <= nums[i]) {
            i--;
        }
        if (i >= 0) {
            int j = nums.length - 1;
            while (j >= 0 && nums[j] <= nums[i]) {
                j--;
            }
            swap(nums, i, j);
        }
        reverse(nums, i + 1);
    }
    
    public void swap(char[] nums, int i, int j) {
        char temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
    }
    
    public void reverse(char[] nums, int start) {
        int i = start, j = nums.length - 1;
        while (i < j) {
            swap(nums, i, j);
            i++;
            j--;
        }

=======

        int n = num.length();
        char[] numChar = num.toCharArray();
        char[] sortedNumChar = num.toCharArray();
        for (int i = 0; i < k; i++) {
            nextPermutation(sortedNumChar);
        }
        int ans = 0;
        for (int i = 0; i < n; i++) {
            if (numChar[i] != sortedNumChar[i]) {
                for (int j = i + 1; j < n; j++) {
                    if (numChar[j] == sortedNumChar[i]) {
                        ans += j - i;
                        while (j > i) {
                            char temp = numChar[j];
                            numChar[j] = numChar[j - 1];
                            numChar[j - 1] = temp;
                            j--;
                        }
                        break;
                    }
                }
            }
        }
        return ans;
    }

    public void nextPermutation(char[] nums) {
        int n = nums.length;
        int i = n - 2;
        while (i >= 0 && nums[i] >= nums[i + 1]) {
            i--;
        }
        if (i >= 0) {
            int j = n - 1;
            while (j >= 0 && nums[j] <= nums[i]) {
                j--;
            }
            swap(nums, i, j);
        }
        reverse(nums, i + 1);
    }

    public void reverse(char[] nums, int start) {
        int left = start, right = nums.length - 1;
        while (left < right) {
            swap(nums, left, right);
            left++;
            right--;
        }
