Synthesizing 10/10 solutions

=======

        List<List<Integer>> result = new ArrayList<>();
        combinationSum3(k, n, 1, new ArrayList<>(), result);
        return result;
    }
    private void combinationSum3(int k, int n, int start, List<Integer> current, List<List<Integer>> result) {
        if (k == 0) {
            if (n == 0) {
                result.add(new ArrayList<>(current));
            }
            return;
        }
        for (int i = start; i <= 9; i++) {
            current.add(i);
            combinationSum3(k - 1, n - i, i + 1, current, result);
            current.remove(current.size() - 1);
        }

=======

        List<List<Integer>> res = new ArrayList<>();
        List<Integer> path = new ArrayList<>();
        dfs(k, n, 1, path, res);
        return res;
    }

    private void dfs(int k, int n, int start, List<Integer> path, List<List<Integer>> res) {
        if (path.size() == k) {
            if (n == 0) {
                res.add(new ArrayList<>(path));
            }
            return;
        }
        if (n <= 0) {
            return;
        }
        for (int i = start; i <= 9; i++) {
            path.add(i);
            dfs(k, n - i, i + 1, path, res);
            path.remove(path.size() - 1);
        }

=======

        List<List<Integer>> result = new ArrayList<>();
        dfs(result, new ArrayList<>(), k, n, 1);
        return result;
    }

    private void dfs(List<List<Integer>> result, List<Integer> temp, int k, int n, int start) {
        if (temp.size() == k) {
            if (n == 0) {
                result.add(new ArrayList<>(temp));
            }
            return;
        }
        for (int i = start; i <= 9; i++) {
            temp.add(i);
            dfs(result, temp, k, n - i, i + 1);
            temp.remove(temp.size() - 1);
        }

=======

        List<List<Integer>> result = new ArrayList<>();
        helper(result, new ArrayList<>(), k, n, 1);
        return result;
    }
    public void helper(List<List<Integer>> result, List<Integer> list, int k, int n, int start) {
        if (list.size() == k) {
            if (n == 0) {
                result.add(new ArrayList<>(list));
            }
            return;
        }
        for (int i = start; i <= 9; i++) {
            list.add(i);
            helper(result, list, k, n - i, i + 1);
            list.remove(list.size() - 1);
        }

=======

        List<List<Integer>> result = new ArrayList<>();
        List<Integer> combination = new ArrayList<>();
        backtrack(result, combination, k, n, 1);
        return result;
    }

    public void backtrack(List<List<Integer>> result, List<Integer> combination, int k, int n, int start) {
        if (combination.size() == k) {
            if (n == 0) {
                result.add(new ArrayList<>(combination));
            }
            return;
        }
        for (int i = start; i <= 9; i++) {
            combination.add(i);
            backtrack(result, combination, k, n - i, i + 1);
            combination.remove(combination.size() - 1);
        }

=======

        List<List<Integer>> result = new ArrayList<>();
        combinationSum3(k, n, new ArrayList<>(), result, 1);
        return result;
    }

    private void combinationSum3(int k, int n, List<Integer> list, List<List<Integer>> result, int start) {
        if (n < 0 || list.size() > k) {
            return;
        }
        if (n == 0 && list.size() == k) {
            result.add(new ArrayList<>(list));
            return;
        }
        for (int i = start; i <= 9; i++) {
            list.add(i);
            combinationSum3(k, n - i, list, result, i + 1);
            list.remove(list.size() - 1);
        }

=======

        List<List<Integer>> result = new ArrayList<>();
        combinationSum3(k, n, new ArrayList<>(), result, 1);
        return result;
    }

    private void combinationSum3(int k, int n, List<Integer> list, List<List<Integer>> result, int start) {
        if (n < 0 || list.size() > k) {
            return;
        }
        if (n == 0 && list.size() == k) {
            result.add(new ArrayList<>(list));
            return;
        }
        for (int i = start; i <= 9; i++) {
            list.add(i);
            combinationSum3(k, n - i, list, result, i + 1);
            list.remove(list.size() - 1);
        }

=======

        List<List<Integer>> result = new ArrayList<>();
        int[] nums = {1,2,3,4,5,6,7,8,9};
        backtrack(result, new ArrayList<>(), nums, n, k, 0);
        return result;
    }
    
    private void backtrack(List<List<Integer>> result, List<Integer> temp, int[] nums, int remain, int k, int start){
        if(remain < 0 || temp.size() > k){
            return;
        }
        if(remain == 0 && temp.size() == k){
            result.add(new ArrayList<>(temp));
            return;
        }
        for(int i = start; i < nums.length; i++){
            temp.add(nums[i]);
            backtrack(result, temp, nums, remain - nums[i], k, i + 1);
            temp.remove(temp.size() - 1);
        }

=======

        List<List<Integer>> result = new ArrayList<>();
        List<Integer> list = new ArrayList<>();
        helper(k, n, result, list, 1);
        return result;
    }
    
    private void helper(int k, int n, List<List<Integer>> result, List<Integer> list, int start) {
        if (k == 0 && n == 0) {
            result.add(new ArrayList<>(list));
            return;
        }
        if (k < 0 || n < 0) {
            return;
        }
        for (int i = start; i <= 9; i++) {
            list.add(i);
            helper(k - 1, n - i, result, list, i + 1);
            list.remove(list.size() - 1);
        }

=======

        List<List<Integer>> ans = new ArrayList<>();
        dfs(ans, new ArrayList<>(), 1, k, n);
        return ans;
    }

    public void dfs(List<List<Integer>> ans, List<Integer> path, int start, int k, int n) {
        if (n == 0 && path.size() == k) {
            ans.add(new ArrayList<>(path));
            return;
        }
        if (n < 0 || path.size() > k) {
            return;
        }
        for (int i = start; i <= 9; i++) {
            path.add(i);
            dfs(ans, path, i + 1, k, n - i);
            path.remove(path.size() - 1);
        }

=======

        List<List<Integer>> result = new ArrayList<>();
        int[] nums = {1,2,3,4,5,6,7,8,9};
        backtrack(result, new ArrayList<>(), nums, n, k, 0);
        return result;
    }
    
    private void backtrack(List<List<Integer>> result, List<Integer> temp, int[] nums, int remain, int k, int start){
        if(remain < 0 || temp.size() > k){
            return;
        }
        if(remain == 0 && temp.size() == k){
            result.add(new ArrayList<>(temp));
            return;
        }
        for(int i = start; i < nums.length; i++){
            temp.add(nums[i]);
            backtrack(result, temp, nums, remain - nums[i], k, i + 1);
            temp.remove(temp.size() - 1);
        }

=======

        List<List<Integer>> result = new ArrayList<>();
        List<Integer> temp = new ArrayList<>();
        combinationSum3Helper(k, n, 1, temp, result);
        return result;
    }

    public void combinationSum3Helper(int k, int n, int start, List<Integer> temp, List<List<Integer>> result) {
        if (k == 0 && n == 0) {
            result.add(new ArrayList<>(temp));
            return;
        }
        if (k == 0) {
            return;
        }
        for (int i = start; i <= 9; i++) {
            temp.add(i);
            combinationSum3Helper(k - 1, n - i, i + 1, temp, result);
            temp.remove(temp.size() - 1);
        }
