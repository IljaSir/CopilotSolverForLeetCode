Synthesizing 10/10 solutions

=======

        int n = nums.length;
        int[][] dp = new int[n][101];
        for (int i = 0; i < n; i++) {
            for (int j = 1; j <= 100; j++) {
                if (i > 0) {
                    dp[i][j] = dp[i - 1][j];
                }
                if (nums[i] == j) {
                    dp[i][j] = i + 1;
                }
            }
        }
        int[] ans = new int[queries.length];
        for (int i = 0; i < queries.length; i++) {
            int prev = 0;
            int min = Integer.MAX_VALUE;
            for (int j = 1; j <= 100; j++) {
                int idx = dp[queries[i][1]][j];
                if (idx == 0 || idx <= queries[i][0]) {
                    continue;
                }
                if (prev != 0) {
                    min = Math.min(min, j - prev);
                }
                prev = j;
            }
            ans[i] = min == Integer.MAX_VALUE ? -1 : min;
        }
        return ans;

=======

        int[] ans = new int[queries.length];
        int[][] dp = new int[nums.length][101];
        dp[0][nums[0]] = 1;
        for (int i = 1; i < nums.length; i++) {
            for (int j = 1; j <= 100; j++) {
                dp[i][j] = dp[i - 1][j];
            }
            dp[i][nums[i]]++;
        }
        for (int i = 0; i < queries.length; i++) {
            int min = Integer.MAX_VALUE;
            int prev = -1;
            for (int j = 1; j <= 100; j++) {
                int count = dp[queries[i][1]][j];
                if (queries[i][0] > 0) {
                    count -= dp[queries[i][0] - 1][j];
                }
                if (count > 0) {
                    if (prev != -1) {
                        min = Math.min(min, j - prev);
                    }
                    prev = j;
                }
            }
            ans[i] = min == Integer.MAX_VALUE ? -1 : min;
        }
        return ans;

=======

        int n = nums.length;
        int[][] freq = new int[n][101];
        for (int i = 0; i < n; i++) {
            for (int j = 1; j <= 100; j++) {
                freq[i][j] = i > 0 ? freq[i - 1][j] : 0;
            }
            freq[i][nums[i]]++;
        }
        int m = queries.length;
        int[] ans = new int[m];
        for (int i = 0; i < m; i++) {
            int l = queries[i][0], r = queries[i][1];
            int prev = -1, min = Integer.MAX_VALUE;
            for (int j = 1; j <= 100; j++) {
                if (freq[r][j] - (l > 0 ? freq[l - 1][j] : 0) > 0) {
                    if (prev != -1) {
                        min = Math.min(min, j - prev);
                    }
                    prev = j;
                }
            }
            ans[i] = min == Integer.MAX_VALUE ? -1 : min;
        }
        return ans;

=======

        int n = nums.length;
        int q = queries.length;
        int[] ans = new int[q];
        int[][] dp = new int[n][101];
        for (int i = 0; i < n; i++) {
            for (int j = 1; j <= 100; j++) {
                dp[i][j] = i > 0 ? dp[i - 1][j] : 0;
            }
            dp[i][nums[i]]++;
        }
        for (int i = 0; i < q; i++) {
            int l = queries[i][0];
            int r = queries[i][1];
            int prev = -1;
            int min = Integer.MAX_VALUE;
            for (int j = 1; j <= 100; j++) {
                if (l > 0) {
                    if (dp[r][j] - dp[l - 1][j] > 0) {
                        if (prev != -1) {
                            min = Math.min(min, j - prev);
                        }
                        prev = j;
                    }
                } else {
                    if (dp[r][j] > 0) {
                        if (prev != -1) {
                            min = Math.min(min, j - prev);
                        }
                        prev = j;
                    }
                }
            }
            ans[i] = min == Integer.MAX_VALUE ? -1 : min;
        }
        return ans;

=======

        int n = nums.length;
        int[] res = new int[queries.length];
        int[][] dp = new int[n + 1][101];
        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= 100; j++) {
                dp[i][j] = dp[i - 1][j];
            }
            dp[i][nums[i - 1]]++;
        }
        for (int i = 0; i < queries.length; i++) {
            int l = queries[i][0];
            int r = queries[i][1];
            int prev = -1;
            int min = Integer.MAX_VALUE;
            for (int j = 1; j <= 100; j++) {
                if (dp[r + 1][j] - dp[l][j] > 0) {
                    if (prev != -1) {
                        min = Math.min(min, j - prev);
                    }
                    prev = j;
                }
            }
            res[i] = min == Integer.MAX_VALUE ? -1 : min;
        }
        return res;

=======

        int[] result = new int[queries.length];
        for (int i = 0; i < queries.length; i++) {
            int[] query = queries[i];
            int[] subArray = Arrays.copyOfRange(nums, query[0], query[1] + 1);
            Arrays.sort(subArray);
            int min = Integer.MAX_VALUE;
            for (int j = 0; j < subArray.length - 1; j++) {
                if (subArray[j] != subArray[j + 1]) {
                    min = Math.min(min, subArray[j + 1] - subArray[j]);
                }
            }
            result[i] = min == Integer.MAX_VALUE ? -1 : min;
        }
        return result;

=======

        int[] ans = new int[queries.length];
        int[][] pre = new int[nums.length][101];
        for (int i = 0; i < nums.length; i++) {
            for (int j = 1; j <= 100; j++) {
                pre[i][j] = i == 0 ? 0 : pre[i - 1][j];
                if (nums[i] == j) {
                    pre[i][j]++;
                }
            }
        }
        for (int i = 0; i < queries.length; i++) {
            int[] q = queries[i];
            int preL = q[0] == 0 ? 0 : q[0] - 1;
            int preR = q[1];
            int preVal = 0;
            int min = Integer.MAX_VALUE;
            for (int j = 1; j <= 100; j++) {
                int val = pre[preR][j] - pre[preL][j];
                if (val > 0) {
                    if (preVal > 0) {
                        min = Math.min(min, j - preVal);
                    }
                    preVal = j;
                }
            }
            ans[i] = min == Integer.MAX_VALUE ? -1 : min;
        }
        return ans;

=======

        int n = nums.length;
        int m = queries.length;
        int[] ans = new int[m];
        int[][] last = new int[n][101];
        for (int i = 0; i < n; i++) {
            for (int j = 1; j <= 100; j++) {
                last[i][j] = i > 0 ? last[i - 1][j] : -1;
            }
            last[i][nums[i]] = i;
        }
        for (int i = 0; i < m; i++) {
            int l = queries[i][0], r = queries[i][1];
            int prev = -1;
            int min = Integer.MAX_VALUE;
            for (int j = 1; j <= 100; j++) {
                if (last[r][j] >= l) {
                    if (prev >= 0) {
                        min = Math.min(min, j - prev);
                    }
                    prev = j;
                }
            }
            ans[i] = min == Integer.MAX_VALUE ? -1 : min;
        }
        return ans;

=======

        int[] ans = new int[queries.length];
        int[][][] pre = new int[nums.length][101][2];
        for (int i = 0; i < nums.length; i++) {
            for (int j = 0; j < 101; j++) {
                if (i > 0) {
                    pre[i][j][0] = pre[i - 1][j][0];
                }
                if (nums[i] == j) {
                    pre[i][j][0] = i;
                }
            }
        }
        for (int i = nums.length - 1; i >= 0; i--) {
            for (int j = 0; j < 101; j++) {
                if (i < nums.length - 1) {
                    pre[i][j][1] = pre[i + 1][j][1];
                }
                if (nums[i] == j) {
                    pre[i][j][1] = i;
                }
            }
        }
        for (int i = 0; i < queries.length; i++) {
            int l = queries[i][0], r = queries[i][1];
            int min = Integer.MAX_VALUE;
            int preMin = -1;
            for (int j = 0; j < 101; j++) {
                int left = pre[l][j][0];
                int right = pre[r][j][1];
                if (left <= r && right >= l) {
                    if (preMin != -1) {
                        min = Math.min(min, j - preMin);
                    }
                    preMin = j;
                }
            }
            if (min == Integer.MAX_VALUE) {
                ans[i] = -1;
            } else {
                ans[i] = min;
            }
        }
        return ans;

=======

        int[] ans = new int[queries.length];
        int[][] numsIndex = new int[101][];
        int[] count = new int[101];
        for (int i = 0; i < nums.length; i++) {
            count[nums[i]]++;
        }
        for (int i = 1; i <= 100; i++) {
            numsIndex[i] = new int[count[i]];
        }
        for (int i = 0; i < nums.length; i++) {
            numsIndex[nums[i]][--count[nums[i]]] = i;
        }
        for (int i = 0; i < queries.length; i++) {
            int[] query = queries[i];
            int minDiff = Integer.MAX_VALUE;
            int last = -1;
            for (int j = 1; j <= 100; j++) {
                int[] index = numsIndex[j];
                int index1 = binarySearch(index, query[0]);
                int index2 = binarySearch(index, query[1]);
                if (index1 < index.length && index1 <= index2) {
                    if (last != -1) {
                        minDiff = Math.min(minDiff, j - last);
                    }
                    last = j;
                }
            }
            ans[i] = minDiff == Integer.MAX_VALUE ? -1 : minDiff;
        }
        return ans;
    }

    private int binarySearch(int[] nums, int target) {
        int left = 0;
        int right = nums.length;
        while (left < right) {
            int mid = left + (right - left) / 2;
            if (nums[mid] < target) {
                left = mid + 1;
            } else {
                right = mid;
            }
        }
        return left;
