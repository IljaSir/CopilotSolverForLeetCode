Synthesizing 10/10 solutions

=======

        if (divisor1 > divisor2) {
            return minimizeSet(divisor2, divisor1, uniqueCnt2, uniqueCnt1);
        }
        long low = 0, high = (long) 1e18;
        while (low < high) {
            long mid = (low + high) / 2;
            if (check(divisor1, divisor2, uniqueCnt1, uniqueCnt2, mid)) {
                high = mid;
            } else {
                low = mid + 1;
            }
        }
        return (int) low;
    }

    private boolean check(int divisor1, int divisor2, int uniqueCnt1, int uniqueCnt2, long max) {
        long cnt1 = max / divisor1 - (max / lcm(divisor1, divisor2));
        long cnt2 = max / divisor2 - (max / lcm(divisor1, divisor2));
        return cnt1 + cnt2 >= uniqueCnt1 + uniqueCnt2 && cnt1 >= uniqueCnt1 && cnt2 >= uniqueCnt2;
    }

    private long lcm(long a, long b) {
        return a * b / gcd(a, b);

=======

        int gcd = gcd(divisor1, divisor2);
        int lcm = divisor1 * divisor2 / gcd;
        int[] arr1 = new int[uniqueCnt1];
        int[] arr2 = new int[uniqueCnt2];
        int i = 0, j = 0;
        int num = 1;
        while (i < uniqueCnt1 && j < uniqueCnt2) {
            if (num % divisor1 == 0 && num % divisor2 == 0) {
                num++;
                continue;
            }
            if (num % divisor1 == 0) {
                arr1[i++] = num;
            } else if (num % divisor2 == 0) {
                arr2[j++] = num;
            }
            num++;
        }
        while (i < uniqueCnt1) {
            arr1[i++] = num;
            num++;
        }
        while (j < uniqueCnt2) {
            arr2[j++] = num;
            num++;
        }
        return Math.max(arr1[uniqueCnt1 - 1], arr2[uniqueCnt2 - 1]);
    }

    private int gcd(int a, int b) {
        if (b == 0) {
            return a;
        }
        return gcd(b, a % b);

=======

        int l = 1, r = 1000000000;
        while (l < r) {
            int mid = l + (r - l) / 2;
            if (check(mid, divisor1, divisor2, uniqueCnt1, uniqueCnt2))
                r = mid;
            else
                l = mid + 1;
        }
        return l;

=======

        int l = 1, r = Integer.MAX_VALUE;
        while (l < r) {
            int mid = l + (r - l) / 2;
            int cnt1 = mid / divisor1, cnt2 = mid / divisor2;
            int both = mid / (divisor1 * divisor2);
            if (cnt1 + cnt2 - both >= uniqueCnt1 + uniqueCnt2) {
                r = mid;
            } else {
                l = mid + 1;
            }
        }
        return l;

=======

        int min = 0;
        int max = Integer.MAX_VALUE;
        while (min < max) {
            int mid = (min + max) / 2;
            if (valid(mid, divisor1, divisor2, uniqueCnt1, uniqueCnt2)) {
                max = mid;
            } else {
                min = mid + 1;
            }
        }
        return min;

=======

        int lo = 0, hi = 1000000000;
        while (lo < hi) {
            int mid = (lo + hi) / 2;
            int cnt1 = mid / divisor1;
            int cnt2 = mid / divisor2;
            int cnt12 = mid / lcm(divisor1, divisor2);
            if (cnt1 + cnt2 - cnt12 >= uniqueCnt1 + uniqueCnt2) {
                hi = mid;
            } else {
                lo = mid + 1;
            }
        }
        return lo;
    }
    private int lcm(int a, int b) {
        return a * b / gcd(a, b);

=======

        int low = 0;
        int high = (int) 1e9;
        int ans = 0;
        while (low <= high) {
            int mid = (low + high) / 2;
            if (check(mid, divisor1, divisor2, uniqueCnt1, uniqueCnt2)) {
                ans = mid;
                high = mid - 1;
            } else {
                low = mid + 1;
            }
        }
        return ans;
    }
    
    private boolean check(int mid, int divisor1, int divisor2, int uniqueCnt1, int uniqueCnt2) {
        int cnt1 = mid / divisor1 + mid / divisor2;
        int cnt2 = mid / lcm(divisor1, divisor2);
        return cnt1 - cnt2 + uniqueCnt1 + uniqueCnt2 >= mid;
    }
    
    private int lcm(int a, int b) {
        return a * b / gcd(a, b);
    }
    
    private int gcd(int a, int b) {
        if (b == 0) {
            return a;
        }
        return gcd(b, a % b);

=======

        int min = 0;
        int max = (int) Math.pow(10, 9);
        while (min < max) {
            int mid = min + (max - min) / 2;
            int cnt1 = mid / divisor1 - mid / lcm(divisor1, divisor2);
            int cnt2 = mid / divisor2 - mid / lcm(divisor1, divisor2);
            if (cnt1 + cnt2 < uniqueCnt1 + uniqueCnt2) {
                min = mid + 1;
            } else {
                max = mid;
            }
        }
        return min;
    }

    private int lcm(int a, int b) {
        return a * b / gcd(a, b);
    }

    private int gcd(int a, int b) {
        if (b == 0) {
            return a;
        }
        return gcd(b, a % b);

=======

        int gcd = gcd(divisor1, divisor2);
        int lcm = divisor1 * divisor2 / gcd;
        int n1 = (int) Math.ceil((double) uniqueCnt1 / (double) lcm);
        int n2 = (int) Math.ceil((double) uniqueCnt2 / (double) lcm);
        int max = Math.max((n1 * divisor1), (n2 * divisor2));
        return max;
    }
    
    private int gcd(int a, int b) {
        if (a < b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        while (b != 0) {
            int r = a % b;
            a = b;
            b = r;
        }
        return a;

=======

        return 0;
