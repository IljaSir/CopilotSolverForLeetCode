Synthesizing 9/10 solutions

=======

        int n = encodedText.length();
        int cols = n / rows;
        char[][] matrix = new char[rows][cols];
        int k = 0;
        for (int i = 0; i < cols; i++) {
            for (int j = 0; j < rows; j++) {
                if (k < n) {
                    matrix[j][i] = encodedText.charAt(k);
                    k++;
                }
            }
        }
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                if (matrix[i][j] != ' ') {
                    sb.append(matrix[i][j]);
                }
            }
        }
        return sb.toString();
    }
}

=======

        int n = encodedText.length();
        int cols = (n + rows - 1) / rows;
        char[][] matrix = new char[rows][cols];
        int idx = 0;
        for (int j = 0; j < cols; j++) {
            for (int i = 0; i < rows && idx < n; i++) {
                if (j % 2 == 0) {
                    matrix[i][j] = encodedText.charAt(idx++);
                } else {
                    matrix[rows - i - 1][j] = encodedText.charAt(idx++);
                }
            }
        }
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                if (matrix[i][j] != ' ') {
                    sb.append(matrix[i][j]);
                }
            }
        }
        return sb.toString();

=======

        int len = encodedText.length();
        if (rows == 1) {
            return encodedText;
        }
        int cols = len / rows + 1;
        char[][] matrix = new char[rows][cols];
        int index = 0;
        for (int i = 0; i < cols; i++) {
            for (int j = 0; j < rows; j++) {
                if (index < len) {
                    matrix[j][i] = encodedText.charAt(index++);
                }
            }
        }
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                if (matrix[i][j] != ' ') {
                    sb.append(matrix[i][j]);
                }
            }
        }
        return sb.toString();

=======

        int cols = encodedText.length() / rows;
        char[][] matrix = new char[rows][cols];
        int row = 0, col = 0;
        boolean down = true;
        for (char c : encodedText.toCharArray()) {
            matrix[row][col] = c;
            if (row == rows - 1) {
                down = false;
            } else if (row == 0) {
                down = true;
            }
            if (down) {
                row++;
            } else {
                row--;
                col++;
            }
        }
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                if (matrix[i][j] != ' ') {
                    sb.append(matrix[i][j]);
                }
            }
        }
        return sb.toString();

=======

        int columns = encodedText.length() / rows;
        char[][] matrix = new char[rows][columns];
        int i = 0, j = 0;
        boolean down = true;
        for (char c : encodedText.toCharArray()) {
            matrix[i][j] = c;
            if (down) {
                i++;
                if (i == rows) {
                    i -= 2;
                    down = false;
                }
            } else {
                i--;
                if (i == -1) {
                    i += 2;
                    down = true;
                }
            }
            if (down) {
                j++;
            }
        }
        StringBuilder sb = new StringBuilder();
        for (int k = 0; k < rows; k++) {
            for (int l = 0; l < columns; l++) {
                if (matrix[k][l] != ' ') {
                    sb.append(matrix[k][l]);
                }
            }
        }
        return sb.toString();

=======

        int n = encodedText.length();
        int cols = n/rows;
        char[][] mat = new char[rows][cols];
        int k = 0;
        for (int i = 0; i < cols; i++) {
            for (int j = 0; j < rows; j++) {
                if (k < n) {
                    mat[j][i] = encodedText.charAt(k++);
                } else {
                    mat[j][i] = ' ';
                }
            }
        }
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                if (mat[i][j] != ' ') {
                    sb.append(mat[i][j]);
                }
            }
        }
        return sb.toString();

=======

        int n = encodedText.length();
        int cols = n / rows;
        int[][] matrix = new int[rows][cols];
        int k = 0;
        for (int i = 0; i < cols; i++) {
            for (int j = 0; j < rows; j++) {
                matrix[j][i] = k++;
            }
        }
        int[] count = new int[rows];
        for (int i = 0; i < cols; i++) {
            for (int j = 0; j < rows; j++) {
                count[j]++;
            }
        }
        int[] pos = new int[rows];
        int[] pos2 = new int[rows];
        for (int i = 0; i < rows; i++) {
            pos[i] = count[i] - 1;
            pos2[i] = count[i] - 1;
        }
        char[] res = new char[n];
        for (int i = 0; i < n; i++) {
            int p = -1;
            for (int j = 0; j < rows; j++) {
                if (pos[j] >= 0) {
                    p = j;
                    break;
                }
            }
            res[matrix[p][pos[p]]] = encodedText.charAt(i);
            pos[p]--;
        }
        return new String(res);

=======

        int len = encodedText.length();
        int cols = len / rows;
        if (len % rows != 0) cols++;
        char[][] mat = new char[rows][cols];
        int r = 0, c = 0;
        for (int i = 0; i < len; i++) {
            mat[r][c] = encodedText.charAt(i);
            if (r == 0) {
                c++;
                r++;
            } else {
                r--;
            }
        }
        char[] ans = new char[len];
        int idx = 0;
        r = 0;
        c = 0;
        for (int i = 0; i < len; i++) {
            ans[idx++] = mat[r][c];
            if (r == 0) {
                c++;
                r++;
            } else {
                r--;
            }
        }
        return new String(ans);

=======

        if (rows == 1) return encodedText;
        int cols = encodedText.length() / rows;
        int[][] matrix = new int[rows][cols];
        int i = 0, j = 0;
        int dir = 1;
        for (int k = 0; k < encodedText.length(); k++) {
            matrix[i][j] = encodedText.charAt(k);
            i += dir;
            if (i == 0 || i == rows - 1) dir *= -1;
            j++;
        }
        StringBuilder sb = new StringBuilder();
        for (int k = 0; k < cols; k++) {
            for (i = 0; i < rows; i++) {
                if (matrix[i][k] != 0) sb.append((char) matrix[i][k]);
            }
        }
        return sb.toString();
