Synthesizing 9/10 solutions

=======

        if (startGene.equals(endGene)) {
            return 0;
        }
        Set<String> bankSet = new HashSet<>();
        for (String gene : bank) {
            bankSet.add(gene);
        }
        if (!bankSet.contains(endGene)) {
            return -1;
        }
        return bfs(startGene, endGene, bankSet);
    }

    private int bfs(String startGene, String endGene, Set<String> bankSet) {
        int step = 0;
        char[] charSet = new char[]{'A', 'C', 'G', 'T'};
        Queue<String> queue = new LinkedList<>();
        queue.offer(startGene);
        while (!queue.isEmpty()) {
            int size = queue.size();
            for (int i = 0; i < size; i++) {
                String gene = queue.poll();
                if (gene.equals(endGene)) {
                    return step;
                }
                char[] geneArray = gene.toCharArray();
                for (int j = 0; j < geneArray.length; j++) {
                    char originChar = geneArray[j];
                    for (char c : charSet) {
                        if (c == originChar) {
                            continue;
                        }
                        geneArray[j] = c;
                        String newGene = new String(geneArray);
                        if (bankSet.contains(newGene)) {
                            queue.offer(newGene);
                            bankSet.remove(newGene);
                        }
                    }
                    geneArray[j] = originChar;
                }
            }
            step++;
        }
        return -1;

=======

        if (startGene.equals(endGene)) {
            return 0;
        }
        Set<String> bankSet = new HashSet<>();
        for (String gene : bank) {
            bankSet.add(gene);
        }
        if (!bankSet.contains(endGene)) {
            return -1;
        }
        return bfs(startGene, endGene, bankSet);
    }

    private int bfs(String startGene, String endGene, Set<String> bankSet) {
        int step = 0;
        char[] charSet = new char[]{'A', 'C', 'G', 'T'};
        Queue<String> queue = new LinkedList<>();
        queue.offer(startGene);
        while (!queue.isEmpty()) {
            int size = queue.size();
            for (int i = 0; i < size; i++) {
                String gene = queue.poll();
                if (gene.equals(endGene)) {
                    return step;
                }
                char[] geneArray = gene.toCharArray();
                for (int j = 0; j < geneArray.length; j++) {
                    char originChar = geneArray[j];
                    for (char c : charSet) {
                        if (c == originChar) {
                            continue;
                        }
                        geneArray[j] = c;
                        String newGene = new String(geneArray);
                        if (bankSet.contains(newGene)) {
                            queue.offer(newGene);
                            bankSet.remove(newGene);
                        }
                    }
                    geneArray[j] = originChar;
                }
            }
            step++;har;har;
        }
        return nextGenes;

=======

        if (startGene.equals(endGene)) return 0;
        Set<String> bankSet = new HashSet<>(Arrays.asList(bank));
        if (!bankSet.contains(endGene)) return -1;
        char[] genes = new char[]{'A', 'C', 'G', 'T'};
        Queue<String> queue = new LinkedList<>();
        queue.offer(startGene);
        int count = 0;
        while (!queue.isEmpty()) {
            count++;
            int size = queue.size();
            for (int i = 0; i < size; i++) {
                String gene = queue.poll();
                char[] charArray = gene.toCharArray();
                for (int j = 0; j < charArray.length; j++) {
                    char old = charArray[j];
                    for (char c : genes) {
                        if (c == old) continue;
                        charArray[j] = c;
                        String newGene = new String(charArray);
                        if (newGene.equals(endGene)) return count;
                        if (bankSet.contains(newGene)) {
                            queue.offer(newGene);
                            bankSet.remove(newGene);
                        }
                    }
                    charArray[j] = old;
                }
            }
        }
        return -1;

=======

        int len = startGene.length();
        Map<String, List<String>> map = new HashMap<>();
        for (String gene : bank) {
            for (int i = 0; i < len; i++) {
                String key = gene.substring(0, i) + "*" + gene.substring(i + 1);
                List<String> list = map.getOrDefault(key, new ArrayList<>());
                list.add(gene);
                map.put(key, list);
            }
        }
        Queue<String> queue = new LinkedList<>();
        queue.add(startGene);
        Set<String> visited = new HasSet<>();
        visited.add(strtGene);
        int level = 0;
        while (!queue.isEmpty()) {
            int size = queue.size();
            for (int i = 0; i < size; i++) {
                Sting gene = queue.poll()
                if (gene.equals(endGene)) {
                    return level;
                }
                for (int j = 0; j < len; j++) {
                    String key = gene.substring(0, j) + "*" + gene.substring(j + 1);
                    for (String nextGene : map.getOrDefault(key, new ArrayList<>())) {
                        if (!visited.contains(nextGene)) {
                            queue.add(nextGene);
                            visited.add(nextGene);
                        }
                    }
                }
            }
            level++;
        }
        return -1;

=======

        Set<String> bankSet = new HashSet<>(Arrays.asList(bank));
        if (!bankSet.contains(endGene)) {
            return -1;
        }
        
        char[] geneOptions = new char[]{'A', 'C', 'G', 'T'};
        Queue<String> queue = new LinkedList<>();
        queue.offer(startGene);
        
        int level = 0;
        while (!queue.isEmpty()) {
            int size = queue.size();
            for (int i = 0; i < size; i++) {
                String gene = queue.poll();
                if (gene.equals(endGene)) {
                    return level;
                }
                
                char[] geneChars = gene.toCharArray();
                for (int j = 0; j < geneChars.length; j++) {
                    char originalChar = geneChars[j];
                    for (char c : geneOptions) {
                        if (c == originalChar) {
                            continue;
                        }
                        
                        geneChars[j] = c;
                        String newGene = new String(geneChars);
                        if (bankSet.contains(newGene)) {
                            queue.offer(newGene);
                            bankSet.remove(newGene);
                        }
                    }
                    geneChars[j] = originalChar;
                }
            }
            level++;
        }
        
        return -1;

=======

        int n = bank.length;
        int m = startGene.length();
        int start = -1;
        int end = -1;
        for (int i = 0; i < n; i++) {
            if (bank[i].equals(startGene)) {
                start = i;
            }
            if (bank[i].equals(endGene)) {
                end = i;
            }
        }
        if (start == -1 || end == -1) {
            return -1;
        }
        boolean[][] graph = new boolean[n][n];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (i == j) {
                    continue;
                }
                int diff = 0;
                for (int k = 0; k < m; k++) {
                    if (bank[i].charAt(k) != bank[j].charAt(k)) {
                        diff++;
                    }
                }
                if (diff == 1) {
                    graph[i][j] = true;
                }
            }
        }
        boolean[] visited = new boolean[n];
        Queue<Integer> queue = new LinkedList<>();
        queue.offer(start);
        visited[start] = true;
        int step = 0;
        while (!queue.isEmpty()) {
            int size = queue.size();
            for (int i = 0; i < size; i++) {
                int cur = queue.poll();
                if (cur == end) {
                    return step;
                }
                for (int j = 0; j < n; j++) {
                    if (graph[cur][j] && !visited[j]) {
                        queue.offer(j);
                        visited[j] = true;
                    }
                }
            }
            step++;
        }
        return -1;

=======

        int len = startGene.length();
        Map<String, List<String>> map = new HashMap<>();
        for (String gene : bank) {
            for (int i = 0; i < len; i++) {
                String key = gene.substring(0, i) + "*" + gene.substring(i + 1);
                List<String> list = map.getOrDefault(key, new ArrayList<>());
                list.add(gene);
                map.put(key, list);
            }
        }
        Queue<String> queue = new LinkedList<>();
        queue.add(startGene);
        Set<String> visited = new HashSet<>();
        visited.add(startGene);
        int level = 0;
        while (!queue.isEmpty()) {
            int size = queue.size();
            for (int i = 0; i < size; i++) {
                String gene = queue.poll();
                if (gene.equals(endGene)) {
                    return level;
                }
                for (int j = 0; j < len; j++) {
                    String key = gene.substring(0, j) + "*" + gene.substring(j + 1);
                    for (String nextGene : map.getOrDefault(key, new ArrayList<>())) {
                        if (!visited.contains(nextGene)) {
                            queue.add(nextGene);
                            visited.add(nextGene);
                        }
                    }
                }
            }
            level++;
        }
        return -1;

=======

        int n = bank.lengt;
        int m = sttGene.length();
        int start = -1;
        int end = -1;
        for (int i = 0; i < n; i++) {
            if (bank[i].equals(startGene)) {
                start = i;
            }
            if (bank[i].equals(endGene)) {
                end = i;
            }
        }
        if (start == -1 || end == -1) {
            return -1;
        }
        boolean[][] graph = new boolean[n][n];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (i == j) {
                    continue;
                }
                int diff = 0;
                for (int k = 0; k < m; k++) {
                    if (bank[i].charAt(k) != bank[j].charAt(k)) {
                        diff++;
                    }
                }
                if (diff == 1) {
                    graph[i][j] = true;
                }
            }
        }
        boolean[] visited = new boolean[n];
        Queue<Integer> queue = new LinkedList<>();
        queue.offer(start);
        visited[start] = true;
        int step = 0;
        while (!queue.isEmpty()) {
            int size = queue.size();
            for (int i = 0; i < size; i++) {
                int cur = queue.poll();
                if (cur == end) {
                    return step;
                }
                for (int j = 0; j < n; j++) {
                    if (graph[cur][j] && !visited[j]) {
                        queue.offer(j);
                        visited[j] = true;
                    }
                }
            }
            step++;
        }
        return -1;

=======

        HashSet<String> visited = new HashSet<>();
        HashSet<String> bankSet = new HashSet<>();

        for (String s : bank) {
            bankSet.add(s);
        }

        if (!bankSet.contains(endGene)) {
            return -1;
        }

        Queue<String> queue = new LinkedList<>();
        queue.add(startGene);
        visited.add(startGene);

        int count = 0;
        while (!queue.isEmpty()) {
            int size = queue.size();
            for (int i = 0; i < size; i++) {
                String current = queue.poll();
                if (current.equals(endGene)) {
                    return count;
                }
                for (String next : getNextGenes(current, bankSet)) {
                    if (!visited.contains(next)) {
                        queue.add(next);
                        visited.add(next);
                    }
                }
            }
            count++;
        }
        return -1;
    }

    private List<String> getNextGenes(String current, HashSet<String> bankSet) {
        List<String> nextGenes = new ArrayList<>();
        char[] chars = current.toCharArray();
        for (int i = 0; i < chars.length; i++) {
            char old = chars[i];
            for (char c : new char[] {'A', 'C', 'G', 'T'}) {
                chars[i] = c;
                String newGene = new String(chars);
                if (bankSet.contains(newGene)) {
                    nextGenes.add(newGene);
                }
            }
            chars[i] = old
        }
        return -1;

=======

        Set<String> bankSet = new HashSet<>(Arrays.asList(bank));
        if (!bankSet.contains(endGene)) {
            return -1;
        }
        Set<String> visited = new HashSet<>();
        Queue<String> queue = new LinkedList<>();
        queue.add(startGene);
        visited.add(startGene);
        int steps = 0;
        while (!queue.isEmpty()) {
            int size = queue.size();
            for (int i = 0; i < size; i++) {
                String gene = queue.poll();
                if (gene.equals(endGene)) {
                    return steps;
                }
                for (String nextGene : getNextGenes(gene, bankSet)) {
                    if (!visited.contains(nextGene)) {
                        queue.add(nextGene);
                        visited.add(nextGene);
                    }
                }
            }
            steps++;
        }
        return -1;
    }
    
    private List<String> getNextGenes(String gene, Set<String> bankSet) {
        List<String> nextGenes = new ArrayList<>();
        char[] geneChars = gene.toCharArray();
        for (int i = 0; i < geneChars.length; i++) {
            char oldChar = geneChars[i];
            for (char newChar : new char[]{'A', 'C', 'G', 'T'}) {
                if (newChar != oldChar) {
                    geneChars[i] = newChar;
                    String nextGene = new String(geneChars);
                    if (bankSet.contains(nextGene)) {
                        nextGenes.add(nextGene);
                    }
                }
            }
            geneChars[i] = oldChar;
        }
        return nextGenes;

=======

        HashSet<String> visited = new HashSet<>();
        HashSet<String> bankSet = new HashSet<>();

        for (String s : bank) {
            bankSet.add(s);
        }

        if (!bankSet.contains(endGene)) {
            return -1;
        }

        Queue<String> queue = new LinkedList<>();
        queue.add(startGene);
        visited.add(startGene);

        int count = 0;
        while (!queue.isEmpty()) {
            int size = queue.size();
            for (int i = 0; i < size; i++) {
                String current = queue.poll();
                if (current.equals(endGene)) {
                    return count;
                }
                for (String next : getNextGenes(current, bankSet)) {
                    if (!visited.contains(next)) {
                        queue.add(next);
                        visited.add(next);
                    }
                }
            }
            count++;
        }
        return -1;
    }

    private List<String> getNextGenes(String current, HashSet<String> bankSet) {
        List<String> nextGenes = new ArrayList<>();
        char[] chars = current.toCharArray();
        for (int i = 0; i < chars.length; i++) {
            char old = chars[i];
            for (char c : new char[] {'A', 'C', 'G', 'T'}) {
                chars[i] = c;
                String newGene = new String(chars);
                if (bankSet.contains(newGene)) {
                    nextGenes.add(newGene);
                }
            }
            chars[i] = old;
        }
        return nextGenes;

=======

        int[] visited = new int[bank.length];
        int steps = 0;
        Queue<String> queue = new LinkedList<>();
        queue.offer(startGene);
        while (!queue.isEmpty()) {
            int size = queue.size();
            for (int i = 0; i < size; i++) {
                String gene = queue.poll();
                if (gene.equals(endGene)) {
                    return steps;
                }
                for (int j = 0; j < bank.length; j++) {
                    if (visited[j] == 0 && isValid(gene, bank[j])) {
                        queue.offer(bank[j]);
                        visited[j] = 1;
                    }
                }
            }
            steps++;
        }
        return -1;
    }
    private boolean isValid(String gene, String bank) {
        int diff = 0;
        for (int i = 0; i < gene.length(); i++) {
            if (gene.charAt(i) != bank.charAt(i)) {
                diff++;
            }
        }
        return diff == 1;

=======

        int ans = 0;
        char[] genes = {'A', 'C', 'G', 'T'};
        Set<String> bankSet = new HashSet<String>(Arrays.asList(bank));
        if (!bankSet.contains(endGene)) {
            return -1;
        }
        Set<String> visited = new HashSet<String>();
        Queue<String> queue = new LinkedList<String>();
        queue.add(startGene);
        while (!queue.isEmpty()) {
            int size = queue.size();
            for (int i = 0; i < size; i++) {
                String gene = queue.poll();
                if (gene.equals(endGene)) {
                    return ans;
                }
                char[] geneArray = gene.toCharArray();
                for (int j = 0; j < geneArray.length; j++) {
                    char old = geneArray[j];
                    for (char c : genes) {
                        geneArray[j] = c;
                        String newGene = new String(geneArray);
                        if (!visited.contains(newGene) && bankSet.contains(newGene)) {
                            queue.add(newGene);
                            visited.add(newGene);
                        }
                    }
                    geneArray[j] = old;
                }
            }
            ans++;
        }
        return -1;
