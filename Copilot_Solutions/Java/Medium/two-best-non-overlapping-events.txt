Synthesizing 10/10 solutions

=======

        Arrays.sort(events, (a, b) -> {
            if (a[1] == b[1]) {
                return a[0] - b[0];
            }
            return a[1] - b[1];
        });
        int n = events.length;
        int[] dp = new int[n];
        for (int i = 0; i < n; i++) {
            dp[i] = events[i][2];
        }
        for (int i = 1; i < n; i++) {
            int start = events[i][0];
            int end = events[i][1];
            int index = binarySearch(events, start);
            if (index >= 0) {
                dp[i] = Math.max(dp[i], events[i][2] + dp[index]);
            }
            dp[i] = Math.max(dp[i], dp[i - 1]);
        }
        return dp[n - 1];
    }

    private int binarySearch(int[][] events, int target) {
        int left = 0;
        int right = events.length - 1;
        while (left <= right) {
            int mid = (left + right) / 2;
            if (events[mid][1] < target) {
                left = mid + 1;
            } else {
                right = mid - 1;
            }
        }
        return left - 1;

=======

        Arrays.sort(events, (a, b) -> a[1] - b[1]);
        int n = events.length;
        int[] dp = new int[n];
        dp[0] = events[0][2];
        int res = dp[0];
        for (int i = 1; i < n; i++) {
            int val = events[i][2];
            int l = 0;
            int r = i - 1;
            while (l < r) {
                int m = l + (r - l + 1) / 2;
                if (events[m][1] < events[i][0]) {
                    l = m;
                } else {
                    r = m - 1;
                }
            }
            if (events[l][1] < events[i][0]) {
                val += dp[l];
            }
            dp[i] = Math.max(val, dp[i-1]);
            res = Math.max(res, dp[i]);
        }
        return res;

=======

        Arrays.sort(events, (a, b) -> a[0] - b[0]);
        int n = events.length;
        int[] dp = new int[n];
        dp[0] = events[0][2];
        int max = dp[0];
        int prev = 0;
        for (int i = 1; i < n; i++) {
            int[] event = events[i];
            int start = event[0];
            int end = event[1];
            int value = event[2];
            int left = 0;
            int right = i - 1;
            while (left < right) {
                int mid = left + (right - left + 1) / 2;
                if (events[mid][1] < start) {
                    left = mid;
                } else {
                    right = mid - 1;
                }
            }
            if (events[left][1] < start) {
                prev = left;
            } else {
                prev = -1;
            }
            dp[i] = Math.max(dp[i - 1], value + (prev < 0 ? 0 : dp[prev]));
            max = Math.max(max, dp[i]);
        }
        return max;

=======

        Arrays.sort(events, (a, b) -> a[0] - b[0]);
        int n = events.length;
        int[] dp = new int[n];
        dp[0] = events[0][2];
        int prev = 0;
        for (int i = 1; i < n; i++) {
            int[] cur = events[i];
            int[] prevEvent = events[prev];
            int val = cur[2];
            if (cur[0] != prevEvent[0]) {
                dp[i] = Math.max(dp[i - 1], val);
            } else {
                dp[i] = dp[i - 1];
            }
            if (cur[0] > prevEvent[1]) {
                dp[i] = Math.max(dp[i], dp[prev] + val);
            }
            if (cur[0] > prevEvent[0] && cur[1] < prevEvent[1]) {
                dp[i] = Math.max(dp[i], dp[prev] + val);
            }
            if (cur[1] < prevEvent[1]) {
                prev = i;
            }
        }
        return dp[n - 1];

=======

        Arrays.sort(events, (a, b) -> a[0] - b[0]);
        int n = events.length;
        int[] dp = new int[n];
        dp[0] = events[0][2];
        for (int i = 1; i < n; i++) {
            int val = events[i][2];
            int start = events[i][0];
            int end = events[i][1];
            int pos = find(events, start - 1);
            if (pos != -1) {
                val += dp[pos];
            }
            dp[i] = Math.max(val, dp[i - 1]);
        }
        return dp[n - 1];
    }
    
    private int find(int[][] events, int val) {
        int l = 0;
        int r = events.length - 1;
        while (l <= r) {
            int mid = l + (r - l) / 2;
            if (events[mid][1] <= val) {
                if (mid == events.length - 1 || events[mid + 1][1] > val) {
                    return mid;
                } else {
                    l = mid + 1;
                }
            } else {
                r = mid - 1;
            }
        }
        return -1;

=======

        Arrays.sort(events, (a, b) -> a[0] - b[0]);
        int n = events.length;
        int[] dp = new int[n];
        dp[0] = events[0][2];
        for (int i = 1; i < n; i++) {
            int value = events[i][2];
            int j = i - 1;
            while (j >= 0 && events[j][1] >= events[i][0]) {
                j--;
            }
            if (j >= 0) {
                value += dp[j];
            }
            dp[i] = Math.max(dp[i - 1], value);
        }
        return dp[n - 1];

=======

        int n = events.length;
        Arrays.sort(events, (a, b) -> a[1] - b[1]);
        int[] dp = new int[n];
        dp[0] = events[0][2];
        for(int i = 1; i < n; i++) {
            dp[i] = Math.max(dp[i-1], events[i][2]);
            int l = 0, r = i-1;
            while(l <= r) {
                int mid = l + (r - l)/2;
                if(events[mid][1] < events[i][0]) {
                    l = mid + 1;
                } else {
                    r = mid - 1;
                }
            }
            if(r >= 0) {
                dp[i] = Math.max(dp[i], dp[r] + events[i][2]);
            }
        }
        return dp[n-1];

=======

        Arrays.sort(events, (a, b) -> Integer.compare(a[0], b[0]));
        PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> Integer.compare(a[1], b[1]));
        int max = 0;
        int n = events.length;
        int[] dp = new int[n];
        for (int i = 0; i < n; i++) {
            while (!pq.isEmpty() && pq.peek()[1] < events[i][0]) {
                max = Math.max(max, pq.poll()[2]);
            }
            dp[i] = max + events[i][2];
            if (i < n - 1) {
                dp[i] = Math.max(dp[i], dp[i + 1]);
            }
            pq.offer(events[i]);
        }
        return dp[n - 1];

=======

        int n = events.length;
        Arrays.sort(events, (a, b) -> a[0] - b[0]);
        int[][] dp = new int[n][n];
        for (int i = 0; i < n; i++) {
            Arrays.fill(dp[i], -1);
        }
        return dfs(events, dp, 0, -1);
    }
    private int dfs(int[][] events, int[][] dp, int idx, int last) {
        if (idx == events.length) {
            return 0;
        }
        if (dp[idx][last + 1] != -1) {
            return dp[idx][last + 1];
        }
        int res = dfs(events, dp, idx + 1, last);
        if (last == -1 || events[idx][0] > events[last][1]) {
            res = Math.max(res, events[idx][2] + dfs(events, dp, idx + 1, idx));
        }
        return dp[idx][last + 1] = res;

=======

        int n = events.length;
        int[] dp = new int[n];
        Arrays.sort(events, (a, b) -> a[1] - b[1]);
        for (int i = 0; i < n; i++) {
            dp[i] = events[i][2];
            for (int j = i - 1; j >= 0; j--) {
                if (events[j][1] < events[i][0]) {
                    dp[i] = Math.max(dp[i], dp[j] + events[i][2]);
                    break;
                }
            }
            if (i > 0) {
                dp[i] = Math.max(dp[i], dp[i - 1]);
            }
        }
        return dp[n - 1];
