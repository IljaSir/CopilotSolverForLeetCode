Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int sum = a;
        while (b != 0) {
            sum = a ^ b;
            b = (a & b) << 1;
            a = sum;
        }
        return sum;

=======

        int carry = 0;
        while (b != 0) {
            carry = a & b;
            a = a ^ b;
            b = carry << 1;
        }
        return a;

=======

        int sum = a ^ b;
        int carry = (a & b) << 1;
        if (carry != 0) {
            return getSum(sum, carry);
        }
        return sum;

=======

        while(b!=0){
            int carry = a&b;
            a = a^b;
            b = carry<<1;
        }
        return a;

=======

        int sum = 0;
        int carry = 0;
        for (int i = 0; i < 32; i++) {
            int x = (a >> i) & 1;
            int y = (b >> i) & 1;
            int cur = (x ^ y ^ carry) << i;
            sum |= cur;
            carry = (x & y) | (x & carry) | (y & carry);
        }
        return sum;

=======

        int sum = a ^ b;
        int carry = (a & b) << 1;
        if (carry != 0) return getSum(sum, carry);
        return sum;

=======

        int sum = 0;
        int carry = 0;
        for(int i = 0; i < 32; i++) {
            int aBit = a & 1;
            int bBit = b & 1;
            if(aBit == 1 && bBit == 1) {
                if(carry == 1) {
                    sum = sum | (1 << i);
                }
                carry = 1;
            } else if(aBit == 1 || bBit == 1) {
                if(carry == 1) {
                    carry = 1;
                } else {
                    sum = sum | (1 << i);
                    carry = 0;
                }
            } else {
                if(carry == 1) {
                    sum = sum | (1 << i);
                }
                carry = 0;
            }
            a = a >> 1;
            b = b >> 1;
        }
        return sum;
