Synthesizing 10/10 solutions

=======

        Map<Integer, Integer> map = new HashMap<>();
        for (int answer : answers) {
            map.put(answer, map.getOrDefault(answer, 0) + 1);
        }
        int res = 0;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            int x = entry.getKey(), y = entry.getValue();
            res += (x + y) / (x + 1) * (x + 1);
        }
        return res;

=======

        int[] count = new int[1000];
        for (int answer : answers) {
            count[answer]++;
        }
        int ans = 0;
        for (int i = 0; i < 1000; i++) {
            ans += (count[i] + i) / (i + 1) * (i + 1);
        }
        return ans;

=======

        int[] count = new int[1000];
        for (int answer : answers) {
            count[answer]++;
        }
        int res = 0;
        for (int i = 0; i < 1000; i++) {
            res += count[i] / (i + 1) * (i + 1);
            if (count[i] % (i + 1) != 0) {
                res += i + 1;
            }
        }
        return res;

=======

        int[] count = new int[1000];
        for (int i : answers) {
            count[i]++;
        }
        int ans = 0;
        for (int i = 0; i < 1000; i++) {
            ans += (count[i] + i) / (i + 1) * (i + 1);
        }
        return ans;

=======

        int[] count = new int[1000];
        for (int i : answers) {
            count[i]++;
        }
        int res = 0;
        for (int i = 0; i < count.length; i++) {
            if (count[i] > 0) {
                res += (count[i] + i) / (i + 1) * (i + 1);
            }
        }
        return res;

=======

        int ans = 0;
        Map<Integer, Integer> map = new HashMap<>();
        for (int x : answers) {
            map.put(x, map.getOrDefault(x, 0) + 1);
        }
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            int key = entry.getKey();
            int value = entry.getValue();
            ans += (value + key) / (key + 1) * (key + 1);
        }
        return ans;

=======

        if (answers == null || answers.length == 0) {
            return 0;
        }
        int[] count = new int[1000];
        for (int a : answers) {
            count[a]++;
        }
        int result = 0;
        for (int i = 0; i < 1000; i++) {
            if (count[i] > 0) {
                result += (count[i] / (i + 1)) * (i + 1);
                if (count[i] % (i + 1) > 0) {
                    result += i + 1;
                }
            }
        }
        return result;

=======

        int[] counts = new int[1000];
        for (int i : answers) {
            counts[i]++;
        }
        int res = 0;
        for (int i = 0; i < 1000; i++) {
            if (counts[i] > 0) {
                res += (i + 1) * (counts[i] / (i + 1) + (counts[i] % (i + 1) > 0 ? 1 : 0));
            }
        }
        return res;

=======

        int[] count = new int[1000];
        for (int i : answers) count[i]++;
        int res = 0;
        for (int i = 0; i < 1000; i++) {
            res += (count[i] + i) / (i + 1) * (i + 1);
        }
        return res;

=======

        int[] count = new int[1000];
        for(int a : answers) {
            count[a]++;
        }
        int res = 0;
        for(int i = 0; i < 1000; i++) {
            if(count[i] > 0) {
                res += (i + 1) * ((count[i] + i) / (i + 1));
            }
        }
        return res;
