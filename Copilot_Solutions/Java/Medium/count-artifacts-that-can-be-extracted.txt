Synthesizing 4/10 solutions

=======

        int[][] grid = new int[n][n];
        for (int[] artifact : artifacts) {
            for (int i = artifact[0]; i <= artifact[2]; i++) {
                for (int j = artifact[1]; j <= artifact[3]; j++) {
                    grid[i][j]++;
                }
            }
        }
        int res = 0;
        for (int[] digCell : dig) {
            int x = digCell[0], y = digCell[1];
            if (grid[x][y] > 0) {
                res++;
                for (int i = 0; i < n; i++) {
                    for (int j = 0; j < n; j++) {
                        if (grid[i][j] > 0) {
                            if (i >= x && j >= y && i <= x + 1 && j <= y + 1) {
                                grid[i][j]--;
                            }
                        }
                    }
                }
            }
        }
        return res;

=======

        int[][] grid = new int[n][n];
        for(int[] artifact : artifacts) {
            for(int i = artifact[0]; i <= artifact[2]; i++) {
                for(int j = artifact[1]; j <= artifact[3]; j++) {
                    grid[i][j]++;
                }
            }
        }
        int count = 0;
        for(int[] d : dig) {
            if(grid[d[0]][d[1]] > 0) {
                grid[d[0]][d[1]]--;
                if(grid[d[0]][d[1]] == 0) {
                    count++;
                }
            }
        }
        return count;

=======

        int[][] grid = new int[n][n];
        for(int[] a : artifacts){
            for(int i=a[0]; i<=a[2]; i++){
                for(int j=a[1]; j<=a[3]; j++){
                    grid[i][j] = 1;
                }
            }
        }
        int count = 0;
        for(int[] d : dig){
            if(grid[d[0]][d[1]] == 1){
                count++;
                grid[d[0]][d[1]] = 0;
            }
        }
        return count;

=======

        int count = 0;
        boolean[] extracted = new boolean[artifacts.length];
        for (int[] d : dig) {
            for (int i = 0; i < artifacts.length; i++) {
                if (!extracted[i]) {
                    if (d[0] >= artifacts[i][0] && d[0] <= artifacts[i][2]
                            && d[1] >= artifacts[i][1] && d[1] <= artifacts[i][3]) {
                        extracted[i] = true;
                        count++;
                    }
                }
            }
        }
        return count;
