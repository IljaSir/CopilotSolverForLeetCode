Synthesizing 10/10 solutions

=======

        int count = 0;
        for (String word : words) {
            if (isSubsequence(s, word)) {
                count++;
            }
        }
        return count;
    }
    private boolean isSubsequence(String s, String word) {
        int i = 0, j = 0;
        while (i < s.length() && j < word.length()) {
            if (s.charAt(i) == word.charAt(j)) {
                j++;
            }
            i++;
        }
        return j == word.length();

=======

        int res = 0;
        Map<Character, List<String>> map = new HashMap<>();
        for (String word : words) {
            map.putIfAbsent(word.charAt(0), new ArrayList<>());
            map.get(word.charAt(0)).add(word);
        }
        for (char c : s.toCharArray()) {
            if (map.containsKey(c)) {
                List<String> list = map.remove(c);
                for (String word : list) {
                    if (word.length() == 1) {
                        res++;
                    } else {
                        map.putIfAbsent(word.charAt(1), new ArrayList<>());
                        map.get(word.charAt(1)).add(word.substring(1));
                    }
                }
            }
        }
        return res;

=======

        int count = 0;
        for (String word : words) {
            if (isSubsequence(word, s)) {
                count++;
            }
        }
        return count;
    }
    
    private boolean isSubsequence(String word, String s) {
        int i = 0;
        for (char c : s.toCharArray()) {
            if (i < word.length() && c == word.charAt(i)) {
                i++;
            }
        }
        return i == word.length();

=======

        int count = 0;
        Map<String, Integer> map = new HashMap<>();
        for (String word : words) {
            map.put(word, map.getOrDefault(word, 0) + 1);
        }
        for (String word : map.keySet()) {
            if (isSubsequence(s, word)) {
                count += map.get(word);
            }
        }
        return count;
    }
    
    private boolean isSubsequence(String s, String word) {
        int i = 0;
        for (char c : s.toCharArray()) {
            if (i < word.length() && c == word.charAt(i)) {
                i++;
            }
        }
        return i == word.length();

=======

        int res = 0;
        List<Integer>[] lists = new List[26];
        for (int i = 0; i < 26; i++) {
            lists[i] = new ArrayList<>();
        }
        for (int i = 0; i < s.length(); i++) {
            lists[s.charAt(i) - 'a'].add(i);
        }
        for (String word : words) {
            int index = -1;
            boolean isSubsequence = true;
            for (int i = 0; i < word.length(); i++) {
                char c = word.charAt(i);
                List<Integer> list = lists[c - 'a'];
                int j = Collections.binarySearch(list, index + 1);
                if (j < 0) {
                    j = -j - 1;
                }
                if (j >= list.size()) {
                    isSubsequence = false;
                    break;
                }
                index = list.get(j);
            }
            if (isSubsequence) {
                res++;
            }
        }
        return res;

=======

        int count = 0;
        for(String word : words){
            int i = 0;
            int j = 0;
            while(i < s.length() && j < word.length()){
                if(s.charAt(i) == word.charAt(j)){
                    i++;
                    j++;
                }else{
                    i++;
                }
            }
            if(j == word.length()){
                count++;
            }
        }
        return count;

=======

        int ans = 0;
        Map<String, Integer> map = new HashMap<>();
        for (String word : words) {
            if (map.containsKey(word)) {
                if (map.get(word) == 1) {
                    ans++;
                }
                map.put(word, map.get(word) + 1);
            } else {
                map.put(word, 1);
            }
        }
        for (String word : map.keySet()) {
            if (isSubSequence(s, word)) {
                ans += map.get(word) - 1;
            }
        }
        return ans;
    }

    private boolean isSubSequence(String s, String word) {
        int i = 0;
        for (char c : s.toCharArray()) {
            if (i < word.length() && c == word.charAt(i)) {
                i++;
            }
        }
        return i == word.length();

=======

        int result = 0;
        for (String word : words) {
            if (isSubsequence(word, s)) {
                result++;
            }
        }
        return result;
    }
    private boolean isSubsequence(String s, String t) {
        int i = 0;
        int j = 0;
        while (i < s.length() && j < t.length()) {
            if (s.charAt(i) == t.charAt(j)) {
                i++;
            }
            j++;
        }
        return i == s.length();

=======

        int ans = 0;
        for (String word : words) {
            if (isSubseq(s, word)) ans++;
        }
        return ans;
    }

    public boolean isSubseq(String s, String t) {
        int j = 0;
        for (int i = 0; i < s.length() && j < t.length(); i++) {
            if (s.charAt(i) == t.charAt(j)) {
                j++;
            }
        }
        return j == t.length();

=======

        int n = s.length();
        int m = words.length;
        int ans = 0;
        int[] pos = new int[n + 1];
        for (int i = 0; i < n; i++) {
            pos[i] = i;
        }
        pos[n] = n;
        for (String word : words) {
            int i = 0;
            for (char c : word.toCharArray()) {
                i = pos[i] + 1;
                while (i < n && s.charAt(i) != c) {
                    i++;
                }
            }
            if (i < n) {
                ans++;
            }
        }
        return ans;
