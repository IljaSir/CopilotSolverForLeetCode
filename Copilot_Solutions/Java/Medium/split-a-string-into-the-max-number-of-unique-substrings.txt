Synthesizing 10/10 solutions

=======

        return maxUniqueSplit(s, 0, new HashSet<String>());
    }
    
    private int maxUniqueSplit(String s, int start, Set<String> set) {
        if (start == s.length()) {
            return 0;
        }
        
        int max = 0;
        for (int i = start; i < s.length(); i++) {
            String sub = s.substring(start, i + 1);
            if (set.contains(sub)) {
                continue;
            }
            set.add(sub);
            max = Math.max(max, 1 + maxUniqueSplit(s, i + 1, set));
            set.remove(sub);
        }
        return max;

=======

        return dfs(s, 0, new HashSet<>());
    }
    
    private int dfs(String s, int start, Set<String> set) {
        if (start == s.length()) {
            return set.size();
        }
        int max = 0;
        for (int i = start; i < s.length(); i++) {
            String sub = s.substring(start, i + 1);
            if (set.contains(sub)) {
                continue;
            }
            set.add(sub);
            max = Math.max(max, dfs(s, i + 1, set));
            set.remove(sub);
        }
        return max;

=======

        return maxUniqueSplit(s, 0, new HashSet<>());
    }
    private int maxUniqueSplit(String s, int start, Set<String> set) {
        if (start == s.length()) {
            return 0;
        }
        int res = 0;
        for (int i = start; i < s.length(); i++) {
            String sub = s.substring(start, i + 1);
            if (!set.contains(sub)) {
                set.add(sub);
                res = Math.max(res, maxUniqueSplit(s, i + 1, set) + 1);
                set.remove(sub);
            }
        }
        return res;

=======

        return dfs(s, 0, new HashSet<>());
    }
    
    private int dfs(String s, int start, Set<String> seen) {
        if (start == s.length()) {
            return 0;
        }
        int max = 0;
        for (int i = start; i < s.length(); i++) {
            String curr = s.substring(start, i + 1);
            if (!seen.contains(curr)) {
                seen.add(curr);
                max = Math.max(max, 1 + dfs(s, i + 1, seen));
                seen.remove(curr);
            }
        }
        return max;

=======

        return dfs(s, 0, new HashSet<String>());
    }
    
    private int dfs(String s, int start, HashSet<String> set) {
        if (start == s.length()) {
            return 0;
        }
        int res = 0;
        for (int i = start; i < s.length(); i++) {
            String sub = s.substring(start, i + 1);
            if (!set.contains(sub)) {
                set.add(sub);
                res = Math.max(res, 1 + dfs(s, i + 1, set));
                set.remove(sub);
            }
        }
        return res;

=======

        return maxUniqueSplit(s, 0, new HashSet<String>());
    }
    private int maxUniqueSplit(String s, int start, Set<String> seen) {
        if (start == s.length()) {
            return 0;
        }
        int max = 0;
        for (int i = start + 1; i <= s.length(); i++) {
            String sub = s.substring(start, i);
            if (!seen.contains(sub)) {
                seen.add(sub);
                max = Math.max(max, 1 + maxUniqueSplit(s, i, seen));
                seen.remove(sub);
            }
        }
        return max;

=======

        return maxUniqueSplit(s, 0, new HashSet<>());
    }
    
    private int maxUniqueSplit(String s, int index, Set<String> set) {
        if (index == s.length()) {
            return set.size();
        }
        
        int max = 0;
        for (int i = index; i < s.length(); i++) {
            String sub = s.substring(index, i + 1);
            if (set.add(sub)) {
                max = Math.max(max, maxUniqueSplit(s, i + 1, set));
                set.remove(sub);
            }
        }
        return max;

=======

        return maxUniqueSplit(s, 0, new HashSet<String>());
    }
    
    private int maxUniqueSplit(String s, int start, Set<String> set) {
        if (start >= s.length()) {
            return 0;
        }
        int max = 0;
        for (int i = start; i < s.length(); i++) {
            String sub = s.substring(start, i + 1);
            if (set.add(sub)) {
                int count = maxUniqueSplit(s, i + 1, set);
                max = Math.max(max, count + 1);
                set.remove(sub);
            }
        }
        return max;

=======

        int n = s.length();
        Set<String> seen = new HashSet<>();
        return dfs(s, 0, seen);
    }
    
    private int dfs(String s, int i, Set<String> seen) {
        if (i == s.length()) {
            return 0;
        }
        int res = 0;
        for (int j = i; j < s.length(); j++) {
            String sub = s.substring(i, j + 1);
            if (seen.contains(sub)) {
                continue;
            }
            seen.add(sub);
            res = Math.max(res, 1 + dfs(s, j + 1, seen));
            seen.remove(sub);
        }
        return res;

=======

        return split(s, new HashSet<String>());
    }
    
    private int split(String s, Set<String> set) {
        if (s.length() == 0) {
            return 0;
        }
        
        int max = 0;
        for (int i = 0; i < s.length(); i++) {
            String sub = s.substring(0, i + 1);
            if (!set.contains(sub)) {
                set.add(sub);
                max = Math.max(max, 1 + split(s.substring(i + 1), set));
                set.remove(sub);
            }
        }
        return max;
