Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int n = plants.length;
        int steps = 0;
        int water = 0;
        for (int i = 0; i < n; i++) {
            if (water < plants[i]) {
                steps += 2 * (i + 1);
                water = capacity;
            }
            water -= plants[i];
            steps++;
        }
        return steps - 1;

=======

        int steps = 0;
        int water = 0;
        for (int i = 0; i < plants.length; i++) {
            if (water < plants[i]) {
                steps += 2 * (i + 1);
                water = capacity;
            }
            water -= plants[i];
            steps++;
        }
        return steps - 1;

=======

        int n = plants.length;
        int i = 0;
        int steps = 0;
        int water = capacity;
        while (i < n) {
            if (water >= plants[i]) {
                water -= plants[i];
                i++;
            } else {
                water = capacity;
                steps += 2;
            }
            steps++;
        }
        return steps;

=======

        int n = plants.length;
        int ans = 0;
        int water = capacity;
        for (int i = 0; i < n; i++) {
            if (water < plants[i]) {
                ans += 2 * (i + 1);
                water = capacity;
            }
            water -= plants[i];
            ans++;
        }
        return ans;

=======

        int steps = 0;
        int water = 0;
        for (int i = 0; i < plants.length; i++) {
            if (water < plants[i]) {
                int refill = plants[i] - water;
                steps += refill;
                water += refill;
            }
            water -= plants[i];
            steps++;
        }
        return steps - 1;

=======

        int steps = 0;
        int currentWater = capacity;
        for (int i = 0; i < plants.length; i++) {
            if (currentWater < plants[i]) {
                steps += 2 * (i + 1);
                currentWater = capacity;
            }
            steps++;
            currentWater -= plants[i];
        }
        return steps;

=======

        int res = 0;
        int cur = 0;
        for (int i = 0; i < plants.length; i++) {
            if (cur < plants[i]) {
                int d = plants[i] - cur;
                res += 2 * (i - 1);
                res += 1 + d / capacity + (d % capacity == 0 ? 0 : 1);
                cur = capacity - d % capacity;
            } else {
                cur -= plants[i];
            }
        }
        return res;

=======

        int n = plants.length;
        int[] dp = new int[n + 1];
        dp[0] = 0;
        for (int i = 0; i < n; i++) {
            int j = i + 1;
            int water = capacity;
            while (j < n && water >= plants[j]) {
                water -= plants[j];
                j++;
            }
            dp[j] = Math.max(dp[j], dp[i] + j - i + Math.max(0, j - i - 1) * 2);
        }
        return dp[n];

=======

        int n = plants.length;
        int[] dp = new int[n];
        int cur = 0;
        for (int i = 1; i < n; i++) {
            if (cur + plants[i - 1] < plants[i]) {
                int diff = plants[i] - cur - plants[i - 1];
                dp[i] = dp[i - 1] + diff + 2 * i;
                cur = capacity - diff;
            } else {
                dp[i] = dp[i - 1] + 2 * i;
                cur = cur + plants[i - 1] - plants[i];
            }
        }
        return dp[n - 1] + n;
