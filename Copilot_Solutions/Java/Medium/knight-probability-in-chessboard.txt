Synthesizing 10/10 solutions

=======

        double[][][] dp = new double[n][n][k + 1];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                Arrays.fill(dp[i][j], -1);
            }
        }
        return dfs(n, k, row, column, dp);
    }

    private double dfs(int n, int k, int row, int column, double[][][] dp) {
        if (row < 0 || row >= n || column < 0 || column >= n) {
            return 0;
        }
        if (k == 0) {
            return 1;
        }
        if (dp[row][column][k] != -1) {
            return dp[row][column][k];
        }
        double result = 0;
        result += dfs(n, k - 1, row - 2, column - 1, dp) / 8;
        result += dfs(n, k - 1, row - 2, column + 1, dp) / 8;
        result += dfs(n, k - 1, row - 1, column - 2, dp) / 8;
        result += dfs(n, k - 1, row - 1, column + 2, dp) / 8;
        result += dfs(n, k - 1, row + 1, column - 2, dp) / 8;
        result += dfs(n, k - 1, row + 1, column + 2, dp) / 8;
        result += dfs(n, k - 1, row + 2, column - 1, dp) / 8;
        result += dfs(n, k - 1, row + 2, column + 1, dp) / 8;
        dp[row][column][k] = result;
        return result;

=======

        double[][][] dp = new double[n][n][k+1];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                for (int l = 0; l <= k; l++) {
                    dp[i][j][l] = -1;
                }
            }
        }
        return knightProbability(n, k, row, column, dp);
    }
    public double knightProbability(int n, int k, int row, int column, double[][][] dp) {
        if (row < 0 || row >= n || column < 0 || column >= n) {
            return 0;
        }
        if (k == 0) {
            return 1;
        }
        if (dp[row][column][k] != -1) {
            return dp[row][column][k];
        }
        double p = 0;
        p += knightProbability(n, k-1, row-1, column-2, dp);
        p += knightProbability(n, k-1, row-1, column+2, dp);
        p += knightProbability(n, k-1, row+1, column-2, dp);
        p += knightProbability(n, k-1, row+1, column+2, dp);
        p += knightProbability(n, k-1, row-2, column-1, dp);
        p += knightProbability(n, k-1, row-2, column+1, dp);
        p += knightProbability(n, k-1, row+2, column-1, dp);
        p += knightProbability(n, k-1, row+2, column+1, dp);
        dp[row][column][k] = p * 0.125;
        return dp[row][column][k];

=======

        double[][][] dp = new double[n][n][k+1];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                Arrays.fill(dp[i][j], -1);
            }
        }
        return dfs(n, k, row, column, dp);
    }
    
    private double dfs(int n, int k, int row, int column, double[][][] dp) {
        int[][] directions = new int[][]{{1,2},{2,1},{2,-1},{1,-2},{-1,-2},{-2,-1},{-2,1},{-1,2}};
        if (row < 0 || row >= n || column < 0 || column >= n) return 0;
        if (k == 0) return 1;
        if (dp[row][column][k] != -1) return dp[row][column][k];
        double res = 0;
        for (int[] direction : directions) {
            res += dfs(n, k-1, row+direction[0], column+direction[1], dp);
        }
        dp[row][column][k] = res / 8;
        return dp[row][column][k];

=======

        double[][][] dp = new double[n][n][k+1];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                Arrays.fill(dp[i][j], -1);
            }
        }
        return dfs(n, k, row, column, dp);
    }
    
    private double dfs(int n, int k, int row, int column, double[][][] dp) {
        if (row < 0 || row >= n || column < 0 || column >= n) {
            return 0;
        }
        if (k == 0) {
            return 1;
        }
        if (dp[row][column][k] != -1) {
            return dp[row][column][k];
        }
        double res = 0;
        res += dfs(n, k - 1, row - 1, column - 2, dp) * 0.125;
        res += dfs(n, k - 1, row - 2, column - 1, dp) * 0.125;
        res += dfs(n, k - 1, row - 2, column + 1, dp) * 0.125;
        res += dfs(n, k - 1, row - 1, column + 2, dp) * 0.125;
        res += dfs(n, k - 1, row + 1, column + 2, dp) * 0.125;
        res += dfs(n, k - 1, row + 2, column + 1, dp) * 0.125;
        res += dfs(n, k - 1, row + 2, column - 1, dp) * 0.125;
        res += dfs(n, k - 1, row + 1, column - 2, dp) * 0.125;
        dp[row][column][k] = res;
        return res;

=======

        int[][] dirs = {{-1, -2}, {-1, 2}, {1, -2}, {1, 2}, {-2, -1}, {-2, 1}, {2, -1}, {2, 1}};
        double[][][] dp = new double[k+1][n][n];
        dp[0][row][column] = 1;
        for (int i = 1; i <= k; i++) {
            for (int j = 0; j < n; j++) {
                for (int l = 0; l < n; l++) {
                    for (int[] dir : dirs) {
                        int x = j + dir[0];
                        int y = l + dir[1];
                        if (x >= 0 && x < n && y >= 0 && y < n) {
                            dp[i][j][l] += dp[i-1][x][y];
                        }
                    }
                }
            }
        }
        double sum = 0;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                sum += dp[k][i][j];
            }
        }
        return sum / Math.pow(8, k);

=======

        int[][][] dp = new int[n][n][k + 1];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                for (int m = 0; m <= k; m++) {
                    dp[i][j][m] = -1;
                }
            }
        }
        return 1.0 * dfs(n, k, row, column, dp) / Math.pow(8, k);
    }

    public int dfs(int n, int k, int row, int column, int[][][] dp) {
        if (row < 0 || row >= n || column < 0 || column >= n) {
            return 0;
        }
        if (k == 0) {
            return 1;
        }
        if (dp[row][column][k] != -1) {
            return dp[row][column][k];
        }
        dp[row][column][k] = dfs(n, k - 1, row - 2, column - 1, dp) + dfs(n, k - 1, row - 2, column + 1, dp) + dfs(n, k - 1, row - 1, column - 2, dp) + dfs(n, k - 1, row - 1, column + 2, dp) + dfs(n, k - 1, row + 1, column - 2, dp) + dfs(n, k - 1, row + 1, column + 2, dp) + dfs(n, k - 1, row + 2, column - 1, dp) + dfs(n, k - 1, row + 2, column + 1, dp);
        return dp[row][column][k];

=======

        int[][] dirs = new int[][]{{-1, -2}, {-2, -1}, {-2, 1}, {-1, 2}, {1, 2}, {2, 1}, {2, -1}, {1, -2}};
        double[][] dp = new double[n][n];
        dp[row][column] = 1;
        for (int i = 0; i < k; i++) {
            double[][] dp2 = new double[n][n];
            for (int r = 0; r < n; r++) {
                for (int c = 0; c < n; c++) {
                    for (int[] dir : dirs) {
                        int nr = r + dir[0];
                        int nc = c + dir[1];
                        if (0 <= nr && nr < n && 0 <= nc && nc < n) {
                            dp2[nr][nc] += dp[r][c] / 8.0;
                        }
                    }
                }
            }
            dp = dp2;
        }
        double ans = 0.0;
        for (double[] row1 : dp) {
            for (double x : row1) {
                ans += x;
            }
        }
        return ans;

=======

        double[][] dp = new double[n][n];
        dp[row][column] = 1;
        int[][] dirs = {{1, 2}, {-1, 2}, {1, -2}, {-1, -2}, {2, 1}, {-2, 1}, {2, -1}, {-2, -1}};
        for (int step = 0; step < k; step++) {
            double[][] dp2 = new double[n][n];
            for (int r = 0; r < n; r++) {
                for (int c = 0; c < n; c++) {
                    for (int[] dir : dirs) {
                        int r2 = r + dir[0];
                        int c2 = c + dir[1];
                        if (r2 >= 0 && r2 < n && c2 >= 0 && c2 < n) {
                            dp2[r2][c2] += dp[r][c] / 8.0;
                        }
                    }
                }
            }
            dp = dp2;
        }
        double ans = 0.0;
        for (double[] row: dp) {
            for (double x: row) {
                ans += x;
            }
        }
        return ans;

=======

        double[][] dp = new double[n][n];
        dp[row][column] = 1;
        int[][] dirs = {{1,2},{2,1},{-1,2},{-2,1},{1,-2},{2,-1},{-1,-2},{-2,-1}};
        for (int i = 0; i < k; i++) {
            double[][] dp2 = new double[n][n];
            for (int r = 0; r < n; r++) {
                for (int c = 0; c < n; c++) {
                    for (int[] dir : dirs) {
                        int nr = r + dir[0];
                        int nc = c + dir[1];
                        if (nr >= 0 && nr < n && nc >= 0 && nc < n) {
                            dp2[nr][nc] += dp[r][c] / 8.0;
                        }
                    }
                }
            }
            dp = dp2;
        }
        double ans = 0.0;
        for (double[] row : dp) {
            for (double x : row) {
                ans += x;
            }
        }
        return ans;

=======

        int[][] dir = {{1,2},{2,1},{-1,2},{-2,1},{1,-2},{2,-1},{-1,-2},{-2,-1}};
        double[][][] dp = new double[n][n][k+1];
        return helper(n, k, row, column, dir, dp);
    }
    
    public double helper(int n, int k, int row, int column, int[][] dir, double[][][] dp) {
        if (row < 0 || row >= n || column < 0 || column >= n) {
            return 0;
        }
        if (k == 0) {
            return 1;
        }
        if (dp[row][column][k] != 0) {
            return dp[row][column][k];
        }
        double res = 0;
        for (int i = 0; i < dir.length; i++) {
            res += helper(n, k-1, row + dir[i][0], column + dir[i][1], dir, dp) * 0.125;
        }
        dp[row][column][k] = res;
        return res;
    }
}
