Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int n = s.length();
        int[] pos = new int[1 << 5];
        Arrays.fill(pos, -1);
        pos[0] = 0;
        int ans = 0, status = 0;
        for (int i = 0; i < n; i++) {
            char ch = s.charAt(i);
            if (ch == 'a') {
                status ^= 1 << 0;
            } else if (ch == 'e') {
                status ^= 1 << 1;
            } else if (ch == 'i') {
                status ^= 1 << 2;
            } else if (ch == 'o') {
                status ^= 1 << 3;
            } else if (ch == 'u') {
                status ^= 1 << 4;
            }
            if (pos[status] >= 0) {
                ans = Math.max(ans, i + 1 - pos[status]);
            } else {
                pos[status] = i + 1;
            }
        }
        return ans;

=======

        int[] pos = new int[1 << 5];
        Arrays.fill(pos, -1);
        pos[0] = 0;
        int ans = 0, status = 0;
        for (int i = 0; i < s.length(); ++i) {
            char ch = s.charAt(i);
            if (ch == 'a') {
                status ^= 1 << 0;
            } else if (ch == 'e') {
                status ^= 1 << 1;
            } else if (ch == 'i') {
                status ^= 1 << 2;
            } else if (ch == 'o') {
                status ^= 1 << 3;
            } else if (ch == 'u') {
                status ^= 1 << 4;
            }
            if (pos[status] >= 0) {
                ans = Math.max(ans, i + 1 - pos[status]);
            } else {
                pos[status] = i + 1;
            }
        }
        return ans;

=======

        int[] pos = new int[1 << 5];
        Arrays.fill(pos, -1);
        pos[0] = 0;
        int ans = 0, status = 0;
        for (int i = 0; i < s.length(); ++i) {
            char ch = s.charAt(i);
            if (ch == 'a') {
                status ^= 1;
            } else if (ch == 'e') {
                status ^= 2;
            } else if (ch == 'i') {
                status ^= 4;
            } else if (ch == 'o') {
                status ^= 8;
            } else if (ch == 'u') {
                status ^= 16;
            }
            if (pos[status] >= 0) {
                ans = Math.max(ans, i + 1 - pos[status]);
            } else {
                pos[status] = i + 1;
            }
        }
        return ans;

=======

        int[] pos = new int[1 << 5];
        Arrays.fill(pos, -1);
        int res = 0, status = 0;
        pos[0] = 0;
        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            if (c == 'a') {
                status ^= 1 << 0;
            } else if (c == 'e') {
                status ^= 1 << 1;
            } else if (c == 'i') {
                status ^= 1 << 2;
            } else if (c == 'o') {
                status ^= 1 << 3;
            } else if (c == 'u') {
                status ^= 1 << 4;
            }
            if (pos[status] >= 0) {
                res = Math.max(res, i + 1 - pos[status]);
            } else {
                pos[status] = i + 1;
            }
        }
        return res;

=======

        int[] first = new int[32];
        Arrays.fill(first, -1);
        int n = s.length();
        int cur = 0;
        int max = 0;
        first[0] = 0;
        for (int i = 0; i < n; i++) {
            char c = s.charAt(i);
            if (c == 'a') {
                cur ^= 1;
            } else if (c == 'e') {
                cur ^= 2;
            } else if (c == 'i') {
                cur ^= 4;
            } else if (c == 'o') {
                cur ^= 8;
            } else if (c == 'u') {
                cur ^= 16;
            }
            if (first[cur] != -1) {
                max = Math.max(max, i + 1 - first[cur]);
            } else {
                first[cur] = i + 1;
            }
        }
        return max;
