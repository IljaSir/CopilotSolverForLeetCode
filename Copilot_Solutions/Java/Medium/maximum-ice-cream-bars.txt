Synthesizing 10/10 solutions

=======

        int[] count = new int[100001];
        for (int i = 0; i < costs.length; i++) {
            count[costs[i]]++;
        }
        int res = 0;
        for (int i = 1; i < count.length; i++) {
            if (coins >= i) {
                int c = Math.min(count[i], coins / i);
                res += c;
                coins -= c * i;
            }
        }
        return res;

=======

        int[] count = new int[100001];
        for (int cost : costs) {
            count[cost]++;
        }
        int ans = 0;
        for (int i = 1; i <= 100000; i++) {
            int cur = Math.min(count[i], coins / i);
            ans += cur;
            coins -= cur * i;
        }
        return ans;

=======

        int[] count = new int[100001];
        for (int cost : costs) {
            count[cost]++;
        }
        int res = 0;
        for (int i = 1; i <= 100000; i++) {
            if (count[i] > 0) {
                int c = Math.min(count[i], coins / i);
                res += c;
                coins -= c * i;
            }
        }
        return res;

=======

        int[] count = new int[100001];
        for (int cost : costs) {
            count[cost]++;
        }
        int ans = 0;
        for (int i = 1; i < count.length; i++) {
            int c = Math.min(count[i], coins / i);
            ans += c;
            coins -= c * i;
        }
        return ans;

=======

        int[] count = new int[100001];
        for (int cost : costs) {
            count[cost]++;
        }
        int ans = 0;
        for (int i = 1; i < 100001; i++) {
            if (coins >= i) {
                int c = Math.min(count[i], coins / i);
                ans += c;
                coins -= i * c;
            }
        }
        return ans;

=======

        int[] count = new int[100001];
        for (int cost : costs) {
            count[cost]++;
        }
        int result = 0;
        for (int i = 1; i < count.length; i++) {
            if (count[i] == 0) {
                continue;
            }
            if (coins >= i) {
                int num = Math.min(count[i], coins / i);
                result += num;
                coins -= num * i;
            } else {
                break;
            }
        }
        return result;

=======

        int[] count = new int[100001];
        for (int cost : costs) {
            count[cost]++;
        }
        int res = 0;
        for (int i = 1; i < count.length && coins >= i; i++) {
            int c = Math.min(count[i], coins / i);
            res += c;
            coins -= c * i;
        }
        return res;

=======

        int[] count = new int[100001];
        for (int cost: costs) {
            count[cost]++;
        }
        int res = 0;
        for (int i = 1; i <= 100000; i++) {
            if (coins >= i) {
                int canBuy = Math.min(count[i], coins / i);
                res += canBuy;
                coins -= canBuy * i;
            }
        }
        return res;

=======

        int[] counts = new int[100001];
        for (int cost : costs) {
            counts[cost]++;
        }
        int result = 0;
        for (int i = 1; i < counts.length; i++) {
            if (counts[i] == 0) {
                continue;
            }
            if (i <= coins) {
                int count = Math.min(counts[i], coins / i);
                result += count;
                coins -= count * i;
            } else {
                break;
            }
        }
        return result;

=======

        int[] count = new int[100001];
        for (int c : costs) {
            count[c]++;
        }
        int ans = 0;
        int i = 1;
        while (coins > 0 && i < count.length) {
            if (count[i] > 0) {
                if (coins >= i) {
                    int t = Math.min(count[i], coins / i);
                    ans += t;
                    coins -= t * i;
                } else {
                    break;
                }
            }
            i++;
        }
        return ans;
