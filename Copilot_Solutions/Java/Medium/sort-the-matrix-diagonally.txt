Synthesizing 10/10 solutions

=======

        int m = mat.length;
        int n = mat[0].length;
        Map<Integer, List<Integer>> map = new HashMap<>();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                map.putIfAbsent(i - j, new ArrayList<>());
                map.get(i - j).add(mat[i][j]);
            }
        }
        for (List<Integer> list : map.values()) {
            Collections.sort(list);
        }
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                mat[i][j] = map.get(i - j).remove(0);
            }
        }
        return mat;

=======

        int m = mat.length;
        int n = mat[0].length;
        for (int i = 0; i < m; i++) {
            sort(mat, i, 0);
        }
        for (int j = 1; j < n; j++) {
            sort(mat, 0, j);
        }
        return mat;
    }
    
    private void sort(int[][] mat, int i, int j) {
        int m = mat.length;
        int n = mat[0].length;
        int[] temp = new int[Math.min(m - i, n - j)];
        int k = 0;
        while (i < m && j < n) {
            temp[k++] = mat[i++][j++];
        }
        Arrays.sort(temp);
        i--;
        j--;
        while (i >= 0 && j >= 0) {
            mat[i--][j--] = temp[--k];
        }

=======

        int m = mat.length;
        int n = mat[0].length;
        for (int i = m - 1; i >= 0; i--) {
            int x = i;
            int y = 0;
            List<Integer> list = new ArrayList<>();
            while (x < m && y < n) {
                list.add(mat[x][y]);
                x++;
                y++;
            }
            Collections.sort(list);
            x = i;
            y = 0;
            int idx = 0;
            while (x < m && y < n) {
                mat[x][y] = list.get(idx);
                x++;
                y++;
                idx++;
            }
        }
        for (int i = 1; i < n; i++) {
            int x = 0;
            int y = i;
            List<Integer> list = new ArrayList<>();
            while (x < m && y < n) {
                list.add(mat[x][y]);
                x++;
                y++;
            }
            Collections.sort(list);
            x = 0;
            y = i;
            int idx = 0;
            while (x < m && y < n) {
                mat[x][y] = list.get(idx);
                x++;
                y++;
                idx++;
            }
        }
        return mat;

=======

        int m = mat.length;
        int n = mat[0].length;
        for (int i = 0; i < m; i++) {
            int x = i;
            int y = 0;
            int[] tmp = new int[Math.min(m - x, n - y)];
            for (int j = 0; j < tmp.length; j++) {
                tmp[j] = mat[x + j][y + j];
            }
            Arrays.sort(tmp);
            for (int j = 0; j < tmp.length; j++) {
                mat[x + j][y + j] = tmp[j];
            }
        }
        for (int i = 1; i < n; i++) {
            int x = 0;
            int y = i;
            int[] tmp = new int[Math.min(m - x, n - y)];
            for (int j = 0; j < tmp.length; j++) {
                tmp[j] = mat[x + j][y + j];
            }
            Arrays.sort(tmp);
            for (int j = 0; j < tmp.length; j++) {
                mat[x + j][y + j] = tmp[j];
            }
        }
        return mat;

=======

        int m = mat.length;
        int n = mat[0].length;
        for (int i = 0; i < m; i++) {
            int[] temp = new int[Math.min(m - i, n)];
            for (int j = 0; j < temp.length; j++) {
                temp[j] = mat[i + j][j];
            }
            Arrays.sort(temp);
            for (int j = 0; j < temp.length; j++) {
                mat[i + j][j] = temp[j];
            }
        }
        for (int j = 1; j < n; j++) {
            int[] temp = new int[Math.min(m, n - j)];
            for (int i = 0; i < temp.length; i++) {
                temp[i] = mat[i][j + i];
            }
            Arrays.sort(temp);
            for (int i = 0; i < temp.length; i++) {
                mat[i][j + i] = temp[i];
            }
        }
        return mat;

=======

        int m = mat.length;
        int n = mat[0].length;
        for (int i = 0; i < m; i++) {
            Arrays.sort(mat[i]);
        }
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                int k = i;
                int l = j;
                List<Integer> temp = new ArrayList<>();
                while (k < m && l < n) {
                    temp.add(mat[k++][l++]);
                }
                Collections.sort(temp);
                k = i;
                l = j;
                for (int x : temp) {
                    mat[k++][l++] = x;
                }
            }
        }
        return mat;

=======

        int m = mat.length;
        int n = mat[0].length;
        for (int i = 0; i < m; i++) {
            int[] diag = new int[Math.min(m - i, n)];
            for (int j = 0; j < diag.length; j++) {
                diag[j] = mat[i + j][j];
            }
            Arrays.sort(diag);
            for (int j = 0; j < diag.length; j++) {
                mat[i + j][j] = diag[j];
            }
        }
        for (int j = 1; j < n; j++) {
            int[] diag = new int[Math.min(n - j, m)];
            for (int i = 0; i < diag.length; i++) {
                diag[i] = mat[i][j + i];
            }
            Arrays.sort(diag);
            for (int i = 0; i < diag.length; i++) {
                mat[i][j + i] = diag[i];
            }
        }
        return mat;

=======

        int m = mat.length;
        int n = mat[0].length;
        int[][] result = new int[m][n];
        for (int i = 0; i < m; i++) {
            List<Integer> list = new ArrayList<>();
            for (int j = i, k = 0; j < m && k < n; j++, k++) {
                list.add(mat[j][k]);
            }
            Collections.sort(list);
            for (int j = i, k = 0; j < m && k < n; j++, k++) {
                result[j][k] = list.get(k);
            }
        }
        for (int i = 1; i < n; i++) {
            List<Integer> list = new ArrayList<>();
            for (int j = 0, k = i; j < m && k < n; j++, k++) {
                list.add(mat[j][k]);
            }
            Collections.sort(list);
            for (int j = 0, k = i; j < m && k < n; j++, k++) {
                result[j][k] = list.get(j);
            }
        }
        return result;

=======

        int row = mat.length;
        int col = mat[0].length;
        for(int i=0; i<row; i++){
            int[] temp = new int[Math.min(row-i, col)];
            for(int j=0; j<temp.length; j++){
                temp[j] = mat[i+j][j];
            }
            Arrays.sort(temp);
            for(int j=0; j<temp.length; j++){
                mat[i+j][j] = temp[j];
            }
        }
        for(int i=1; i<col; i++){
            int[] temp = new int[Math.min(row, col-i)];
            for(int j=0; j<temp.length; j++){
                temp[j] = mat[j][i+j];
            }
            Arrays.sort(temp);
            for(int j=0; j<temp.length; j++){
                mat[j][i+j] = temp[j];
            }
        }
        return mat;

=======

        int m = mat.length;
        int n = mat[0].length;
        int[][] res = mat;
        for (int i = 0; i < m; i++) {
            int[] temp = new int[Math.min(m - i, n)];
            int k = 0;
            for (int j = 0; j < Math.min(m - i, n); j++) {
                temp[k++] = mat[i + j][j];
            }
            Arrays.sort(temp);
            k = 0;
            for (int j = 0; j < Math.min(m - i, n); j++) {
                res[i + j][j] = temp[k++];
            }
        }
        for (int j = 1; j < n; j++) {
            int[] temp = new int[Math.min(m, n - j)];
            int k = 0;
            for (int i = 0; i < Math.min(m, n - j); i++) {
                temp[k++] = mat[i][j + i];
            }
            Arrays.sort(temp);
            k = 0;
            for (int i = 0; i < Math.min(m, n - j); i++) {
                res[i][j + i] = temp[k++];
            }
        }
        return res;
