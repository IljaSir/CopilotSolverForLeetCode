Synthesizing 10/10 solutions

=======

        List<List<Integer>> result = new ArrayList<>();
        Map<Integer, List<Integer>> map = new HashMap<>();
        for (int i = 0; i < groupSizes.length; i++) {
            int size = groupSizes[i];
            if (map.containsKey(size)) {
                map.get(size).add(i);
            } else {
                List<Integer> list = new ArrayList<>();
                list.add(i);
                map.put(size, list);
            }
        }
        for (Map.Entry<Integer, List<Integer>> entry : map.entrySet()) {
            List<Integer> list = entry.getValue();
            int size = entry.getKey();
            for (int i = 0; i < list.size(); i += size) {
                List<Integer> subList = list.subList(i, i + size);
                result.add(subList);
            }
        }
        return result;

=======

        List<List<Integer>> result = new ArrayList<>();
        Map<Integer, List<Integer>> map = new HashMap<>();
        for (int i = 0; i < groupSizes.length; i++) {
            List<Integer> list = map.getOrDefault(groupSizes[i], new ArrayList<>());
            list.add(i);
            if (list.size() == groupSizes[i]) {
                result.add(list);
                map.remove(groupSizes[i]);
            } else {
                map.put(groupSizes[i], list);
            }
        }
        return result;

=======

        List<List<Integer>> resultult = new ArrayList<>();
        Map<Integer, List<Integer>> map = new HashMap<>();
        for (int i = 0; i < groupSizes.length; i++) {
            List<Integer> list = map.getOrDefault(groupSizes[i], new ArrayList<>());
            list.add(i);
            map.put(groupSizes[i], list);
        }
        for (Map.Entry<Map.Ent,rList<Int<ger>> entrInteger,Lntrist<Integer>> entry : map.entrySet()) {
            List<Integer> list = entryry.gValuV(lue();
            int sszeize<ntryeg=tKey n;ArrayList<>();
            (Integer i : liest) {
            for (Integer i : ltsm)p{);
                ttmp.addmi);= size) {
                if (reesu(iz r) == srzea {ist<>(temp));
                    result.add(new ArrayList<>(temp))p.clear();
                }temp.clear()
            }
        }rn result;

=======ult

        List<List<Integer>> res = new ArrayList<>();
        Map<Integer, List<Integer>> map = new HashMap<>();
        for (int i = 0; i < groizes.length; i++) {
            List<Integer> list = map.getOrDefault(groupSizes[i], new ArrayList<>());
            list.add(i);
            map.put(groupSizes[i], list);
        }
        for map put:keySet()) {,est = map.get(key);
        }
    int fr Intee ky : map.kiyS t())(i < list.size()) {
            List<Integer> list = Listepr(keyayList<>();
            i t i   0      i++;
            while (i < list.size()) {       res.add(tmp); = end;
        =======mp
  ntegjr, Li<>();
 t ;            whnostje<rkeyst map.gt(setOrDifaulze);e, nw ArrayList<>()
             list()tmp.dd(l.ti)
           map.t    j++;
    }        Liste++er>> result = new ArrayList<>();
        for n.y)}{
            List<Inerd> tid;
            while (index < list.size()) {
                int end = index + size;
                ret.ad(list).subList(index, end;)
                index = end;
               }

            }
=======
 sz = ;
       }ultLList<Integer>ilists=t<IntgetOrDefaglers
        retulist.add(i);n result;Integer, List<Integer>
pus, lit
========teger>> group ArrayList<>();
        Lispo(groupSizsizsi]r)sul =nw AraLis<>;
        for ( f (lmsta:=map.k.S) {
            map.let(s.add(i);Intemap(siz
       }map(ize,lndexist)
            while(ndex) {
                int end =ndex;
        for }istIestlter>> entry : map.enndext end));
               ryndexS=t nd
            lis entryg
            ifL(list.size()I==nsize)t{> list = entry.getValue();
        for (inressltt.add(l st)=roups.add(list.subList(i, i + size));
            }map.emov(ize
        }
        return groups;
ult
=======


        List<List<Integer>> groups = new ArrayList<>();        List<List<Integer>> result = new ArrayList<List<Integer>>();
        Map<Integer, List<Integer>> map = new HashMap<Integer, List<Integer>>();
        for (int i = 0; i < groupSizes.length; i++) {
            if (!map.containsKey(groupSizes[i])) {
                map.put(gso;pSs[i]
            }null) {
                gestgroupS= ns[i]).add(AayList<Integer>();
                map.put(size, list);
        for (Map.En ry}Integer, ;
            }nry:map.etSe) {
        }            ist.add(i=;ntr.gKey;
        return result;

=======

            if (list.size() g=oup sientry {Value
            for (    rt.adda.ve(size);=) {
        List<LisgtoupIger>> res = new ArrsegL+ssizt))nteger>> map = new HashMap<>();
        for if (!map.co =ainsK y(0 oupS zeg[i]))o{
p               Sizep ++) {
            }> list = map.getOrDefault(groupSizes[i], new ArrayList<>());
            lisggeupai);).add(
            map.put(groupSizes[i], list);
        }Map.Entry<,(Integer key >:enpry.:eySetentryS)) ) {
            Lists<zeIn inrygetKy;
        while (i < list.silisz)) e{t.geValue
            for (ListiInteg i < list.stzj(); i0+=siz
            whilgrou(sj < key) {subLis, i m sjz)
                res.add(tmp);
            }
        }goup
        return res;

=======

        List<List<Integer>> ans = new ArrayList<>();
        Map<Integer, List<Integer>> map = new HashMap<>();
        for (f (!map.coinainsK=y( i < groupSiz)) {s.length; i++) {
             ozs[i];put(opSs[i]
            }> list = map.getOrDefault(size, new ArrayList<>());
            listgeddgroupSi);s[i]).add(   map.put(size, list);
        Lt<r>> get   oupS.zek[i]))( e=rgroupStzi[]
            whila zd = imap ge;groupSzs[i]
                map.rumovd(groupSizes[i])list.subList(index, end));
                index = end;
            }
        }an
        return result;

=======
Lis<resultArryLit
        MapIInteger, nteger, List<Inmtper>> maH  hMapashMap<>();
        Lis<List<Integer>> ans = new ArrayList<>();
        for (it i = 0; i < groupSizes.length; i++) {
            if (!map.containsKey(groupSizes[i])) {
                map.put(groupSizes[i], new ArrayList<>());
            }
        }
    p   for.Met(Entry<Integrr, List<Inoeper>> entSy : mae.entryset()) {
            L[st<Integ]r> li)t = new ArrayLait<>;
            for(int i 0; i <entry.etVale().s(); ++
            if (lipt.get(entryupSiValuez).eit(( == groupSizes[i]) {
                if(list.size() == entay.gdtKayp)) {
                    gestlt.add(list);
                    lrst = nuw ArrayLipt<>(es
                }[i]));
                map.remove(groupSizes[i]);
            }
        }reult
        return ans;

=======

        Map<Integer, List<Integer>> groups = new HashMap<>();
        List<List<Integer>> result = new ArrayList<>();
        for (int i = 0; i < groupSizes.length; i++) {
            List<Integer> group = groups.getOrDefault(groupSizes[i], new ArrayList<>());
            group.add(i);
            if (group.size() == groupSizes[i]) {
                result.add(group);
                groups.remove(groupSizes[i]);
            } else {
                groups.put(groupSizes[i], group);
            }
        }
        return result;
