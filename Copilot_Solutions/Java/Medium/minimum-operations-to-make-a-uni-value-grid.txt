Synthesizing 10/10 solutions

=======

        List<Integer> list = new ArrayList<>();
        int m = grid.length;
        int n = grid[0].length;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                list.add(grid[i][j]);
            }
        }
        Collections.sort(list);
        int mid = list.get((m * n) / 2);
        int count = 0;
        for (int i = 0; i < m * n; i++) {
            int mod = Math.abs(list.get(i) - mid) % x;
            if (mod != 0) {
                return -1;
            }
            count += Math.abs(list.get(i) - mid) / x;
        }
        return count;

=======

        int n = grid.length;
        int m = grid[0].length;
        int[] arr = new int[n * m];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                arr[i * m + j] = grid[i][j];
            }
        }
        Arrays.sort(arr);
        int mid = arr[(n * m) / 2];
        int res = 0;
        for (int i : arr) {
            if ((i - mid) % x != 0) {
                return -1;
            }
            res += Math.abs(i - mid) / x;
        }
        return res;

=======

        int m = grid.length;
        int n = grid[0].length;
        int[] nums = new int[m * n];
        int i = 0;
        for (int[] row : grid) {
            for (int num : row) {
                nums[i++] = num;
            }
        }
        Arrays.sort(nums);
        int median = nums[nums.length / 2];
        int steps = 0;
        for (int num : nums) {
            int diff = Math.abs(num - median);
            if (diff % x != 0) return -1;
            steps += diff / x;
        }
        return steps;

=======

        int m = grid.length;
        int n = grid[0].length;
        int[] nums = new int[m * n];
        int i = 0;
        for (int[] row : grid) {
            for (int num : row) {
                nums[i++] = num;
            }
        }
        Arrays.sort(nums);
        int median = nums[nums.length / 2];
        int res = 0;
        for (int num : nums) {
            if ((num - median) % x != 0) {
                return -1;
            }
            res += Math.abs(num - median) / x;
        }
        return res;

=======

        int n = grid.length;
        int m = grid[0].length;
        int[] arr = new int[n * m];
        int index = 0;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                arr[index++] = grid[i][j];
            }
        }
        Arrays.sort(arr);
        int target = arr[(n * m) / 2];
        int ans = 0;
        for (int i = 0; i < n * m; i++) {
            int diff = Math.abs(arr[i] - target);
            if (diff % x != 0) {
                return -1;
            }
            ans += diff / x;
        }
        return ans;

=======

        int m = grid.length;
        int n = grid[0].length;
        int[] nums = new int[m*n];
        int k = 0;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                nums[k++] = grid[i][j];
            }
        }
        Arrays.sort(nums);
        int median = nums[(m*n)/2];
        int res = 0;
        for (int i = 0; i < m*n; i++) {
            if ((nums[i]-median)%x != 0) {
                return -1;
            }
            res += Math.abs(nums[i]-median)/x;
        }
        return res;

=======

        int n = grid.length;
        int m = grid[0].length;
        int[] a = new int[n*m];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                a[i*m+j] = grid[i][j];
            }
        }
        Arrays.sort(a);
        int mid = a[n*m/2];
        int sum = 0;
        for (int i = 0; i < n*m; i++) {
            int diff = Math.abs(a[i]-mid);
            if (diff%x != 0) {
                return -1;
            }
            sum += diff/x;
        }
        return sum;

=======

        int n = grid.length;
        int m = grid[0].length;
        int[] arr = new int[n * m];
        int idx = 0;
        for (int[] row : grid) {
            for (int v : row) {
                arr[idx++] = v;
            }
        }
        Arrays.sort(arr);
        int mid = arr[(n * m) / 2];
        int ans = 0;
        for (int v : arr) {
            int diff = Math.abs(mid - v);
            if (diff % x != 0) {
                return -1;
            }
            ans += diff / x;
        }
        return ans;

=======

        int n = grid.length;
        int m = grid[0].length;
        int[] arr = new int[n*m];
        int k = 0;
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                arr[k++] = grid[i][j];
            }
        }
        Arrays.sort(arr);
        int mid = arr[(n*m)/2];
        int res = 0;
        for(int i=0;i<n*m;i++){
            if(Math.abs(arr[i]-mid)%x!=0){
                return -1;
            }
            res+=Math.abs(arr[i]-mid)/x;
        }
        return res;

=======

        int m = grid.length;
        int n = grid[0].length;
        int[] a = new int[m*n];
        int i = 0;
        for (int[] row : grid) {
            for (int v : row) {
                a[i++] = v;
            }
        }
        Arrays.sort(a);
        int mid = a[m*n/2];
        int ans = 0;
        for (int v : a) {
            if (Math.abs(v - mid) % x != 0) {
                return -1;
            }
            ans += Math.abs(v - mid) / x;
        }
        return ans;
    }
}
