Synthesizing 10/10 solutions

=======

        int m = grid.length;
        int n = grid[0].length;
        boolean[][] visited = new boolean[m][n];
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (!visited[i][j] && dfs(grid, i, j, i, j, visited)) {
                    return true;
                }
            }
        }
        return false;
    }
    private boolean dfs(char[][] grid, int i, int j, int pi, int pj, boolean[][] visited) {
        if (i < 0 || i >= grid.length || j < 0 || j >= grid[0].length || grid[i][j] != grid[pi][pj]) {
            return false;
        }
        if (visited[i][j]) {
            return true;
        }
        visited[i][j] = true;
        return dfs(grid, i + 1, j, i, j, visited) || dfs(grid, i - 1, j, i, j, visited) || dfs(grid, i, j + 1, i, j, visited) || dfs(grid, i, j - 1, i, j, visited);

=======

        int m = grid.length;
        int n = grid[0].length;
        boolean[][] visited = new boolean[m][n];
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (!visited[i][j]) {
                    if (dfs(grid, visited, i, j, -1, -1)) {
                        return true;
                    }
                }
            }
        }
        return false;
    }
    private boolean dfs(char[][] grid, boolean[][] visited, int i, int j, int pi, int pj) {
        if (i < 0 || i >= grid.length || j < 0 || j >= grid[0].length) {
            return false;
        }
        if (visited[i][j]) {
            return true;
        }
        if (grid[i][j] == grid[pi][pj]) {
            visited[i][j] = true;
            if (dfs(grid, visited, i + 1, j, i, j) || dfs(grid, visited, i - 1, j, i, j) || dfs(grid, visited, i, j + 1, i, j) || dfs(grid, visited, i, j - 1, i, j)) {
                return true;
            }
        }
        return false;

=======

        int m = grid.length;
        int n = grid[0].length;
        boolean[][] visited = new boolean[m][n];
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (!visited[i][j] && dfs(grid, visited, i, j, i, j, 0)) {
                    return true;
                }
            }
        }
        return false;
    }
    
    private boolean dfs(char[][] grid, boolean[][] visited, int i, int j, int pi, int pj, int cnt) {
        if (i < 0 || i >= grid.length || j < 0 || j >= grid[0].length || grid[i][j] != grid[pi][pj]) {
            return false;
        }
        if (visited[i][j]) {
            return cnt >= 4;
        }
        visited[i][j] = true;
        if (dfs(grid, visited, i + 1, j, i, j, cnt + 1)
            || dfs(grid, visited, i - 1, j, i, j, cnt + 1)
            || dfs(grid, visited, i, j + 1, i, j, cnt + 1)
            || dfs(grid, visited, i, j - 1, i, j, cnt + 1)) {
            return true;
        }
        return false;

=======

        int m = grid.length;
        int n = grid[0].length;
        boolean[][] visited = new boolean[m][n];
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (!visited[i][j] && dfs(grid, i, j, visited, -1, -1)) {
                    return true;
                }
            }
        }
        return false;
    }
    
    private boolean dfs(char[][] grid, int i, int j, boolean[][] visited, int pi, int pj) {
        if (i < 0 || i >= grid.length || j < 0 || j >= grid[0].length || visited[i][j]) {
            return false;
        }
        if (grid[i][j] != grid[pi][pj]) {
            return false;
        }
        visited[i][j] = true;
        if (dfs(grid, i - 1, j, visited, i, j) || dfs(grid, i + 1, j, visited, i, j) || dfs(grid, i, j - 1, visited, i, j) || dfs(grid, i, j + 1, visited, i, j)) {
            return true;
        }
        return false;

=======

        int m = grid.length;
        int n = grid[0].length;
        boolean[][] visited = new boolean[m][n];
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (!visited[i][j]) {
                    if (dfs(grid, i, j, visited, i, j, -1)) {
                        return true;
                    }
                }
            }
        }
        return false;
    }
    
    private boolean dfs(char[][] grid, int i, int j, boolean[][] visited, int prevI, int prevJ, int dir) {
        if (visited[i][j]) {
            return false;
        }
        visited[i][j] = true;
        int[][] dirs = {{0, 1}, {0, -1}, {1, 0}, {-1, 0}};
        for (int k = 0; k < 4; k++) {
            int nextI = i + dirs[k][0];
            int nextJ = j + dirs[k][1];
            if (nextI == prevI && nextJ == prevJ) {
                continue;
            }
            if (nextI >= 0 && nextI < grid.length && nextJ >= 0 && nextJ < grid[0].length && grid[nextI][nextJ] == grid[i][j]) {
                if (dfs(grid, nextI, nextJ, visited, i, j, k)) {
                    return true;
                }
            }
        }
        return false;

=======

        int m = grid.length;
        int n = grid[0].length;
        boolean[][] visited = new boolean[m][n];
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (!visited[i][j]) {
                    if (dfs(grid, visited, i, j, -1, -1)) {
                        return true;
                    }
                }
            }
        }
        return false;
    }
    
    private boolean dfs(char[][] grid, boolean[][] visited, int i, int j, int prevI, int prevJ) {
        if (i < 0 || i >= grid.length || j < 0 || j >= grid[0].length || visited[i][j]) {
            return false;
        }
        if (grid[i][j] != grid[prevI][prevJ]) {
            return false;
        }
        visited[i][j] = true;
        return dfs(grid, visited, i + 1, j, i, j) ||
            dfs(grid, visited, i - 1, j, i, j) ||
            dfs(grid, visited, i, j + 1, i, j) ||
            dfs(grid, visited, i, j - 1, i, j);

=======

        int m = grid.length, n = grid[0].length;
        boolean[][] visited = new boolean[m][n];
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (!visited[i][j]) {
                    if (dfs(grid, i, j, -1, -1, visited)) {
                        return true;
                    }
                }
            }
        }
        return false;
    }
    
    private boolean dfs(char[][] grid, int i, int j, int pi, int pj, boolean[][] visited) {
        if (i < 0 || i >= grid.length || j < 0 || j >= grid[0].length || grid[i][j] != grid[pi][pj]) {
            return false;
        }
        if (visited[i][j]) {
            return true;
        }
        visited[i][j] = true;
        return dfs(grid, i + 1, j, i, j, visited) ||
            dfs(grid, i - 1, j, i, j, visited) ||
            dfs(grid, i, j + 1, i, j, visited) ||
            dfs(grid, i, j - 1, i, j, visited);

=======

        int m = grid.length, n = grid[0].length;
        boolean[][] visited = new boolean[m][n];
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (!visited[i][j]) {
                    if (dfs(grid, visited, i, j, -1, -1, grid[i][j])) {
                        return true;
                    }
                }
            }
        }
        return false;
    }
    
    private boolean dfs(char[][] grid, boolean[][] visited, int i, int j, int pi, int pj, char c) {
        if (i < 0 || i >= grid.length || j < 0 || j >= grid[0].length || grid[i][j] != c) {
            return false;
        }
        if (visited[i][j]) {
            return true;
        }
        visited[i][j] = true;
        boolean flag = dfs(grid, visited, i + 1, j, i, j, c) || dfs(grid, visited, i - 1, j, i, j, c) || dfs(grid, visited, i, j + 1, i, j, c) || dfs(grid, visited, i, j - 1, i, j, c);
        visited[i][j] = false;
        return flag;

=======

        for (int i = 0; i < grid.length; i++) {
            for (int j = 0; j < grid[0].length; j++) {
                if (dfs(grid, i, j, i, j, 0)) {
                    return true;
                }
            }
        }
        return false;
    }
    
    private boolean dfs(char[][] grid, int i, int j, int pi, int pj, int count) {
        if (i < 0 || i >= grid.length || j < 0 || j >= grid[0].length || grid[i][j] != grid[pi][pj]) {
            return false;
        }
        if (count >= 4) {
            return true;
        }
        char temp = grid[i][j];
        grid[i][j] = '0';
        boolean res = dfs(grid, i + 1, j, i, j, count + 1) ||
            dfs(grid, i - 1, j, i, j, count + 1) ||
            dfs(grid, i, j + 1, i, j, count + 1) ||
            dfs(grid, i, j - 1, i, j, count + 1);
        grid[i][j] = temp;
        return res;

=======

        int m = grid.length;
        int n = grid[0].length;
        boolean[][] visited = new boolean[m][n];
        int[][] dirs = {{1, 0}, {0, 1}, {-1, 0}, {0, -1}};
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (!visited[i][j]) {
                    if (dfs(grid, visited, i, j, -1, -1, dirs)) {
                        return true;
                    }
                }
            }
        }
        return false;
    }
    
    private boolean dfs(char[][] grid, boolean[][] visited, int i, int j, int pi, int pj, int[][] dirs) {
        visited[i][j] = true;
        for (int[] dir : dirs) {
            int x = i + dir[0];
            int y = j + dir[1];
            if (x >= 0 && x < grid.length && y >= 0 && y < grid[0].length) {
                if (grid[x][y] == grid[i][j]) {
                    if (x == pi && y == pj) {
                        continue;
                    }
                    if (visited[x][y]) {
                        return true;
                    }
                    if (dfs(grid, visited, x, y, i, j, dirs)) {
                        return true;
                    }
                }
            }
        }
        return false;
