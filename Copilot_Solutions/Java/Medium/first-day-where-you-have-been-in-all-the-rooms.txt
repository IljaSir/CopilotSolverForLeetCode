Synthesizing 9/10 solutions

=======

        int mod = 1000000007;
        int n = nextVisit.length;
        long[] dp = new long[n];
        for (int i = 1; i < n; i++) {
            dp[i] = (2 * dp[i - 1] - dp[nextVisit[i - 1]] + 2 + mod) % mod;
        }
        return (int) dp[n - 1];

=======

        int mod = (int) 1e9 + 7;
        int n = nextVisit.length;
        long[] dp = new long[n];
        for (int i = 1; i < n; i++) {
            dp[i] = (2 * dp[i - 1] - dp[nextVisit[i - 1]] + 2 + mod) % mod;
        }
        return (int) dp[n - 1];

=======

        int n = nextVisit.length;
        int mod = 1000000007;
        long[] dp = new long[n];
        for (int i = 1; i < n; i++) {
            dp[i] = (dp[i - 1] + 2 + n - 1 + mod - nextVisit[i - 1]) % mod;
        }
        long res = 0;
        for (int i = 1; i < n; i++) {
            res = (res + dp[i]) % mod;
        }
        return (int)res;

=======

        int n = nextVisit.length;
        int mod = 1000000007;
        long[] dp = new long[n];
        dp[0] = 0;
        for (int i = 1; i < n; i++) {
            dp[i] = (2 * dp[i - 1] - dp[nextVisit[i - 1]] + 2 + mod) % mod;
        }
        return (int) dp[n - 1];

=======

        int n = nextVisit.length;
        int mod = 1_000_000_007;
        long[] dp = new long[n];
        for (int i = 1; i < n; i++) {
            dp[i] = 2 * dp[i - 1] + i - nextVisit[i] + 2;
            dp[i] %= mod;
        }
        return (int) dp[n - 1];

=======

        int n = nextVisit.length;
        long[] dp = new long[n];
        int mod = 1000000007;
        for (int i = 1; i < n; i++) {
            dp[i] = (2 * dp[i - 1] - dp[nextVisit[i - 1]] + 2 + mod) % mod;
        }
        return (int) dp[n - 1];

=======

        int n = nextVisit.length;
        long[] dp = new long[n];
        int mod = 1000000007;
        for (int i = 1; i < n; i++) {
            dp[i] = (dp[i - 1] * 2 - dp[nextVisit[i - 1]] + 2 + mod) % mod;
        }
        return (int) dp[n - 1];

=======

        int mod = 1000000007;
        int[] dp = new int[nextVisit.length];
        for (int i = 1; i < nextVisit.length; i++) {
            dp[i] = (dp[i - 1] * 2 - dp[nextVisit[i - 1]] + 2 + mod) % mod;
        }
        return dp[nextVisit.length - 1];

=======

        int n = nextVisit.length;
        long[] dp = new long[n];
        dp[0] = 0;
        for (int i = 1; i < n; i++) {
            dp[i] = (2 * dp[i - 1] - dp[nextVisit[i - 1]] + 2 + 2 * n) % 1000000007;
        }
        return (int) dp[n - 1];
