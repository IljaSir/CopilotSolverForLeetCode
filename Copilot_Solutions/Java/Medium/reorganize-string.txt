Synthesizing 10/10 solutions

=======

        int[] count = new int[26];
        for (char c : s.toCharArray()) {
            count[c - 'a'] += 100;
        }
        for (int i = 0; i < 26; i++) {
            count[i] += i;
        }
        Arrays.sort(count);
        char[] res = new char[s.length()];
        int t = 1;
        for (int code : count) {
            int ct = code / 100;
            char ch = (char) ('a' + (code % 100));
            if (ct > (s.length() + 1) / 2) return "";
            for (int i = 0; i < ct; i++) {
                if (t >= s.length()) t = 0;
                res[t] = ch;
                t += 2;
            }
        }
        return String.valueOf(res);

=======

        int[] count = new int[26];
        int max = 0;
        int length = s.length();
        for (char c : s.toCharArray()) {
            count[c - 'a']++;
            max = Math.max(max, count[c - 'a']);
        }
        if (max > (length + 1) / 2) {
            return "";
        }
        char[] reorg = new char[length];
        int even = 0, odd = 1;
        int halfLength = length / 2;
        for (int i = 0; i < 26; i++) {
            char c = (char) ('a' + i);
            while (count[i] > 0 && count[i] <= halfLength && odd < length) {
                reorg[odd] = c;
                count[i]--;
                odd += 2;
            }
            while (count[i] > 0) {
                reorg[even] = c;
                count[i]--;
                even += 2;
            }
        }
        return String.valueOf(reorg);

=======

        int[] count = new int[26];
        for (int i = 0; i < s.length(); i++) {
            count[s.charAt(i) - 'a']++;
        }
        PriorityQueue<Character> pq = new PriorityQueue<>((a, b) -> count[b - 'a'] - count[a - 'a']);
        for (int i = 0; i < 26; i++) {
            if (count[i] > 0) {
                pq.add((char)('a' + i));
            }
        }
        StringBuilder sb = new StringBuilder();
        while (pq.size() > 1) {
            char c1 = pq.poll();
            char c2 = pq.poll();
            sb.append(c1);
            sb.append(c2);
            count[c1 - 'a']--;
            count[c2 - 'a']--;
            if (count[c1 - 'a'] > 0) {
                pq.add(c1);
            }
            if (count[c2 - 'a'] > 0) {
                pq.add(c2);
            }
        }
        if (pq.size() > 0) {
            char c = pq.poll();
            if (count[c - 'a'] > 1) {
                return "";
            }
            sb.append(c);
        }
        return sb.toString();

=======

        int[] cnt = new int[26];
        for (char c : s.toCharArray()) {
            cnt[c - 'a']++;
        }
        PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> b[1] - a[1]);
        for (int i = 0; i < 26; i++) {
            if (cnt[i] > 0) {
                pq.add(new int[] {i, cnt[i]});
            }
        }
        StringBuilder sb = new StringBuilder();
        while (pq.size() >= 2) {
            int[] first = pq.poll();
            int[] second = pq.poll();
            sb.append((char) ('a' + first[0]));
            sb.append((char) ('a' + second[0]));
            if (--first[1] > 0) {
                pq.add(first);
            }
            if (--second[1] > 0) {
                pq.add(second);
            }
        }
        if (pq.size() > 0) {
            int[] last = pq.poll();
            if (last[1] > 1) {
                return "";
            }
            sb.append((char) ('a' + last[0]));
        }
        return sb.toString();

=======

        int[] cnt = new int[26];
        for (char c : s.toCharArray()) {
            cnt[c - 'a']++;
        }
        PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> b[1] - a[1]);
        for (int i = 0; i < 26; i++) {
            if (cnt[i] > 0) {
                pq.add(new int[]{i, cnt[i]});
            }
        }
        StringBuilder sb = new StringBuilder();
        while (pq.size() >= 2) {
            int[] c1 = pq.poll();
            int[] c2 = pq.poll();
            sb.append((char)(c1[0] + 'a'));
            sb.append((char)(c2[0] + 'a'));
            c1[1]--;
            c2[1]--;
            if (c1[1] > 0) {
                pq.add(c1);
            }
            if (c2[1] > 0) {
                pq.add(c2);
            }
        }
        if (pq.size() > 0) {
            int[] c = pq.poll();
            if (c[1] > 1) {
                return "";
            }
            sb.append((char)(c[0] + 'a'));
        }
        return sb.toString();

=======

        int[] count = new int[26];
        int max = 0;
        char[] sc = s.toCharArray();
        for (char c : sc) {
            count[c - 'a']++;
            max = Math.max(max, count[c - 'a']);
        }
        if (max > (s.length() + 1) / 2) {
            return "";
        }
        PriorityQueue<Character> pq = new PriorityQueue<>((a, b) -> count[b - 'a'] - count[a - 'a']);
        for (char c = 'a'; c <= 'z'; c++) {
            if (count[c - 'a'] > 0) {
                pq.add(c);
            }
        }
        StringBuilder sb = new StringBuilder();
        while (pq.size() > 1) {
            char c1 = pq.poll();
            char c2 = pq.poll();
            sb.append(c1);
            sb.append(c2);
            count[c1 - 'a']--;
            count[c2 - 'a']--;
            if (count[c1 - 'a'] > 0) {
                pq.add(c1);
            }
            if (count[c2 - 'a'] > 0) {
                pq.add(c2);
            }
        }
        if (pq.size() > 0) {
            sb.append(pq.poll());
        }
        return sb.toString();

=======

        int[] count = new int[26];
        int max = 0;
        char[] sc = s.toCharArray();
        for (char c : sc) {
            count[c - 'a']++;
            max = Math.max(max, count[c - 'a']);
        }
        if (max > (sc.length + 1) / 2) {
            return "";
        }
        char[] res = new char[sc.length];
        int even = 0, odd = 1;
        int halfLen = sc.length / 2;
        for (int i = 0; i < 26; i++) {
            char c = (char) ('a' + i);
            while (count[i] > 0 && count[i] <= halfLen && odd < sc.length) {
                res[odd] = c;
                count[i]--;
                odd += 2;
            }
            while (count[i] > 0) {
                res[even] = c;
                count[i]--;
                even += 2;
            }
        }
        return String.valueOf(res);

=======

        int[] count = new int[26];
        int max = 0;
        int maxChar = 0;
        for (int i = 0; i < s.length(); i++) {
            count[s.charAt(i) - 'a']++;
            if (count[s.charAt(i) - 'a'] > max) {
                max = count[s.charAt(i) - 'a'];
                maxChar = s.charAt(i) - 'a';
            }
        }
        if (max > (s.length() + 1) / 2) {
            return "";
        }
        char[] res = new char[s.length()];
        int idx = 0;
        while (count[maxChar] > 0) {
            res[idx] = (char) (maxChar + 'a');
            idx += 2;
            count[maxChar]--;
        }
        for (int i = 0; i < count.length; i++) {
            while (count[i] > 0) {
                if (idx >= s.length()) {
                    idx = 1;
                }
                res[idx] = (char) (i + 'a');
                idx += 2;
                count[i]--;
            }
        }
        return new String(res);

=======

        int[] cnt = new int[26];
        for (char c : s.toCharArray()) {
            cnt[c - 'a']++;
        }
        int maxCnt = 0;
        for (int i = 0; i < 26; i++) {
            maxCnt = Math.max(maxCnt, cnt[i]);
        }
        if (maxCnt > (s.length() + 1) / 2) {
            return "";
        }
        char[] ans = new char[s.length()];
        int even = 0, odd = 1;
        int halfLen = s.length() / 2;
        for (int i = 0; i < 26; i++) {
            char c = (char) (i + 'a');
            while (cnt[i] > 0 && cnt[i] <= halfLen && odd < s.length()) {
                ans[odd] = c;
                cnt[i]--;
                odd += 2;
            }
            while (cnt[i] > 0) {
                ans[even] = c;
                cnt[i]--;
                even += 2;
            }
        }
        return String.valueOf(ans);

=======

        // count the frequency of each character
        int[] count = new int[26];
        int max = 0;
        int len = s.length();
        for (int i = 0; i < len; i++) {
            char c = s.charAt(i);
            count[c - 'a']++;
            max = Math.max(max, count[c - 'a']);
        }
        // if the max frequency is larger than (len + 1) / 2, it is impossible to satisfy the requirement
        if (max > (len + 1) / 2) {
            return "";
        }
        // build the result string
        char[] res = new char[len];
        int even = 0, odd = 1;
        int halfLen = len / 2;
        for (int i = 0; i < 26; i++) {
            char c = (char)('a' + i);
            while (count[i] > 0 && count[i] <= halfLen && odd < len) {
                res[odd] = c;
                count[i]--;
                odd += 2;
            }
            while (count[i] > 0) {
                res[even] = c;
                count[i]--;
                even += 2;
            }
        }
        return new String(res);
