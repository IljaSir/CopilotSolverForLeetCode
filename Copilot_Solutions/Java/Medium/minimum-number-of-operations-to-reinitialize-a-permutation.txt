Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int[] perm = new int[n];
        for (int i = 0; i < n; i++) {
            perm[i] = i;
        }
        int[] arr = new int[n];
        int count = 0;
        while (true) {
            for (int i = 0; i < n; i++) {
                if (i % 2 == 0) {
                    arr[i] = perm[i / 2];
                } else {
                    arr[i] = perm[n / 2 + (i - 1) / 2];
                }
            }
            count++;
            if (Arrays.equals(arr, perm)) {
                break;
            }
            for (int i = 0; i < n; i++) {
                perm[i] = arr[i];
            }
        }
        return count;

=======

        int[] perm = new int[n];
        for (int i = 0; i < n; i++) {
            perm[i] = i;
        }
        int[] arr = new int[n];
        int count = 0;
        while (true) {
            for (int i = 0; i < n; i++) {
                if (i % 2 == 0) {
                    arr[i] = perm[i / 2];
                } else {
                    arr[i] = perm[n / 2 + (i - 1) / 2];
                }
            }
            count++;
            if (Arrays.equals(arr, perm)) {
                break;
            }
            perm = arr;
            arr = new int[n];
        }
        return count;

=======

        int[] perm = new int[n];
        for (int i = 0; i < n; i++) {
            perm[i] = i;
        }
        int[] arr = new int[n];
        int count = 0;
        while (count == 0 || !Arrays.equals(perm, arr)) {
            for (int i = 0; i < n; i++) {
                if (i % 2 == 0) {
                    arr[i] = perm[i / 2];
                } else {
                    arr[i] = perm[n / 2 + (i - 1) / 2];
                }
            }
            int[] tmp = perm;
            perm = arr;
            arr = tmp;
            count++;
        }
        return count - 1;

=======

        int[] perm = new int[n];
        for (int i = 0; i < n; i++) {
            perm[i] = i;
        }
        int[] arr = new int[n];
        int count = 0;
        while (true) {
            count++;
            for (int i = 0; i < n; i++) {
                if (i % 2 == 0) {
                    arr[i] = perm[i / 2];
                } else {
                    arr[i] = perm[n / 2 + (i - 1) / 2];
                }
            }
            if (Arrays.equals(arr, perm)) {
                break;
            }
            System.arraycopy(arr, 0, perm, 0, n);
        }
        return count;

=======

        int[] perm = new int[n];
        for (int i = 0; i < n; i++) {
            perm[i] = i;
        }
        int[] arr = new int[n];
        int count = 0;
        do {
            count++;
            for (int i = 0; i < n; i++) {
                if (i % 2 == 0) {
                    arr[i] = perm[i / 2];
                } else {
                    arr[i] = perm[n / 2 + (i - 1) / 2];
                }
            }
            int[] temp = perm;
            perm = arr;
            arr = temp;
        } while (perm[0] != 0);
        return count;

=======

        int[] perm = new int[n];
        for (int i = 0; i < n; i++) {
            perm[i] = i;
        }
        int[] arr = new int[n];
        int count = 0;
        while (true) {
            for (int i = 0; i < n; i++) {
                if (i % 2 == 0) {
                    arr[i] = perm[i / 2];
                } else {
                    arr[i] = perm[n / 2 + (i - 1) / 2];
                }
            }
            count++;
            if (Arrays.equals(arr, perm)) {
                break;
            }
            perm = arr;
        }
        return count;

=======

        int[] perm = new int[n];
        for(int i = 0; i < n; i++) {
            perm[i] = i;
        }
        int[] arr = new int[n];
        int count = 0;
        while(true) {
            count++;
            for(int i = 0; i < n; i++) {
                if(i % 2 == 0) {
                    arr[i] = perm[i / 2];
                } else {
                    arr[i] = perm[n / 2 + (i - 1) / 2];
                }
            }
            if(Arrays.equals(arr, perm)) {
                return count;
            }
            perm = arr;
            arr = new int[n];
        }

=======

        int count = 0;
        int index = 1;
        do {
            if (index % 2 == 0) {
                index /= 2;
            } else {
                index = n / 2 + (index - 1) / 2;
            }
            count++;
        } while (index != 1);
        return count;

=======

        int[] arr = new int[n];
        for (int i = 0; i < n; i++) {
            arr[i] = i;
        }
        int[] perm = new int[n];
        int[] arr2 = new int[n];
        int count = 0;
        while (true) {
            for (int i = 0; i < n; i++) {
                if (i % 2 == 0) {
                    arr2[i] = arr[i / 2];
                } else {
                    arr2[i] = arr[n / 2 + (i - 1) / 2];
                }
            }
            count++;
            if (Arrays.equals(arr2, perm)) {
                return count;
            }
            System.arraycopy(arr2, 0, arr, 0, n);
        }
