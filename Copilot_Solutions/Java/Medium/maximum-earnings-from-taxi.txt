Synthesizing 10/10 solutions

=======

        Arrays.sort(rides, (a, b) -> a[0] - b[0]);
        long[] dp = new long[n + 1];
        int i = 0;
        for (int j = 1; j <= n; j++) {
            dp[j] = Math.max(dp[j], dp[j - 1]);
            while (i < rides.length && rides[i][0] == j) {
                int end = rides[i][1];
                dp[end] = Math.max(dp[end], dp[j] + rides[i][1] - rides[i][0] + rides[i][2]);
                i++;
            }
        }
        return dp[n];

=======

        long[] dp = new long[n + 1];
        Arrays.sort(rides, (a, b) -> a[0] - b[0]);
        int j = 0;
        for (int i = 1; i <= n; i++) {
            dp[i] = dp[i - 1];
            while (j < rides.length && rides[j][0] == i) {
                int start = rides[j][0];
                int end = rides[j][1];
                int tip = rides[j][2];
                dp[end] = Math.max(dp[end], dp[start] + end - start + tip);
                j++;
            }
        }
        return dp[n];

=======

        long[] dp = new long[n + 1];
        Arrays.sort(rides, (a, b) -> a[1] - b[1]);
        int j = 0;
        for (int i = 1; i <= n; i++) {
            dp[i] = Math.max(dp[i], dp[i - 1]);
            while (j < rides.length && rides[j][1] == i) {
                int start = rides[j][0];
                dp[i] = Math.max(dp[i], dp[start] + (long) (rides[j][1] - start + rides[j][2]));
                j++;
            }
        }
        return dp[n];

=======

        long[] dp = new long[n + 1];
        Arrays.sort(rides, (a, b) -> a[1] - b[1]);
        int j = 0;
        for (int i = 1; i <= n; i++) {
            dp[i] = Math.max(dp[i - 1], dp[i]);
            while (j < rides.length && rides[j][1] == i) {
                dp[rides[j][1]] = Math.max(dp[rides[j][1]], dp[rides[j][0]] + rides[j][1] - rides[j][0] + rides[j][2]);
                j++;
            }
        }
        return dp[n];

=======

        long[] dp = new long[n + 1];
        Arrays.sort(rides, (a, b) -> a[0] - b[0]);
        int j = 0;
        for (int i = 1; i <= n; i++) {
            dp[i] = Math.max(dp[i], dp[i - 1]);
            while (j < rides.length && rides[j][0] == i) {
                dp[rides[j][1]] = Math.max(dp[rides[j][1]], dp[i] + rides[j][1] - rides[j][0] + rides[j][2]);
                j++;
            }
        }
        return dp[n];

=======

        long[] dp = new long[n + 1];
        Arrays.sort(rides, (a, b) -> a[1] - b[1]);
        for (int i = 0; i < rides.length; i++) {
            int[] ride = rides[i];
            int start = ride[0], end = ride[1], tip = ride[2];
            dp[end] = Math.max(dp[end], dp[start] + end - start + tip);
            int j = i + 1;
            for (; j < rides.length && rides[j][1] == end; j++) {
                dp[end] = Math.max(dp[end], dp[start] + rides[j][1] - rides[j][0] + rides[j][2]);
            }
            i = j - 1;
        }
        for (int i = 1; i <= n; i++) {
            dp[i] = Math.max(dp[i], dp[i - 1]);
        }
        return dp[n];

=======

        Arrays.sort(rides, (a, b) -> a[1] - b[1]);
        long[] dp = new long[n + 1];
        for (int i = 0; i < n; i++) {
            dp[i + 1] = Math.max(dp[i + 1], dp[i]);
            int idx = Arrays.binarySearch(rides, new int[]{0, i + 1, 0}, (a, b) -> a[1] - b[1]);
            if (idx < 0) {
                idx = -idx - 2;
            }
            if (idx >= 0) {
                dp[rides[idx][1]] = Math.max(dp[rides[idx][1]], dp[rides[idx][0]] + rides[idx][1] - rides[idx][0] + rides[idx][2]);
            }
        }
        return dp[n];

=======

        int m = rides.length;
        Arrays.sort(rides, (a, b) -> a[0] - b[0]);
        long[] f = new long[m + 1];
        int j = 0;
        for (int i = 1; i <= m; i++) {
            f[i] = Math.max(f[i - 1], f[i]);
            while (j < m && rides[j][0] <= rides[i - 1][1]) {
                j++;
            }
            f[j] = Math.max(f[j], f[i - 1] + (long)(rides[i - 1][1] - rides[i - 1][0]) + rides[i - 1][2]);
        }
        return f[m];

=======

        Arrays.sort(rides, (a, b) -> (a[1] - b[1]));
        int[] dp = new int[n+1];
        int j = 0;
        for (int i = 1; i <= n; i++) {
            dp[i] = dp[i-1];
            while (j < rides.length && rides[j][1] == i) {
                int start = rides[j][0];
                int profit = rides[j][1] - rides[j][0] + rides[j][2];
                dp[i] = Math.max(dp[i], dp[start] + profit);
                j++;
            }
        }
        return dp[n];

=======

        // Sort the rides by the end time
        Arrays.sort(rides, (a, b) -> a[1] - b[1]);
        // dp[i] is the maximum earnings for the first i rides
        // dp[i] = max(dp[i], dp[j] + rides[i][1] - rides[j][0] + rides[i][2]) for all j < i
        long[] dp = new long[rides.length + 1];
        for (int i = 1; i <= rides.length; i++) {
            dp[i] = Math.max(dp[i - 1], dp[i]);
            int j = i - 1;
            while (j >= 0 && rides[j][1] > rides[i - 1][0]) {
                j--;
            }
            dp[i] = Math.max(dp[i], dp[j + 1] + rides[i - 1][1] - rides[i - 1][0] + rides[i - 1][2]);
        }
        return dp[rides.length];
