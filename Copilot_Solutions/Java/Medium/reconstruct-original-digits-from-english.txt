Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int[] count = new int[10];
        for (char c : s.toCharArray()) {
            if (c == 'z') count[0]++;
            if (c == 'w') count[2]++;
            if (c == 'u') count[4]++;
            if (c == 'x') count[6]++;
            if (c == 'g') count[8]++;
            if (c == 'o') count[1]++; // 1, 0, 2, 4
            if (c == 'h') count[3]++; // 3, 8
            if (c == 'f') count[5]++; // 5, 4
            if (c == 's') count[7]++; // 7, 6
            if (c == 'i') count[9]++; // 9, 5, 6, 8
        }
        count[1] -= count[0] + count[2] + count[4];
        count[3] -= count[8];
        count[5] -= count[4];
        count[7] -= count[6];
        count[9] -= count[5] + count[6] + count[8];
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < 10; i++) {
            for (int j = 0; j < count[i]; j++) {
                sb.append(i);
            }
        }
        return sb.toString();

=======

        int[] count = new int[10];
        for (char c : s.toCharArray()) {
            if (c == 'z') count[0]++;
            if (c == 'w') count[2]++;
            if (c == 'u') count[4]++;
            if (c == 'x') count[6]++;
            if (c == 'g') count[8]++;
            if (c == 'o') count[1]++; // 1, 0, 2, 4
            if (c == 'h') count[3]++; // 3, 8
            if (c == 'f') count[5]++; // 5, 4
            if (c == 's') count[7]++; // 7, 6
            if (c == 'i') count[9]++; // 9, 5, 6, 8
        }
        count[1] -= count[0] + count[2] + count[4];
        count[3] -= count[8];
        count[5] -= count[4];
        count[7] -= count[6];
        count[9] -= count[5] + count[6] + count[8];
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i <= 9; i++) {
            for (int j = 0; j < count[i]; j++) {
                sb.append(i);
            }
        }
        return sb.toString();

=======

        int[] count = new int[10];
        for (char c : s.toCharArray()) {
            if (c == 'z') {
                count[0]++;
            } else if (c == 'w') {
                count[2]++;
            } else if (c == 'x') {
                count[6]++;
            } else if (c == 's') {
                count[7]++;
            } else if (c == 'g') {
                count[8]++;
            } else if (c == 'u') {
                count[4]++;
            } else if (c == 'f') {
                count[5]++;
            } else if (c == 'h') {
                count[3]++;
            } else if (c == 'o') {
                count[1]++;
            } else if (c == 'i') {
                count[9]++;
            }
        }
        count[7] -= count[6];
        count[5] -= count[4];
        count[3] -= count[8];
        count[1] -= count[0] + count[2] + count[4];
        count[9] -= count[5] + count[6] + count[8];
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < 10; i++) {
            for (int j = 0; j < count[i]; j++) {
                sb.append(i);
            }
        }
        return sb.toString();

=======

        int[] count = new int[10];
        for (char c : s.toCharArray()) {
            if (c == 'z') {
                count[0]++;
            }
            if (c == 'w') {
                count[2]++;
            }
            if (c == 'u') {
                count[4]++;
            }
            if (c == 'x') {
                count[6]++;
            }
            if (c == 'g') {
                count[8]++;
            }
            if (c == 'o') {
                count[1]++;
            }
            if (c == 't') {
                count[3]++;
            }
            if (c == 'f') {
                count[5]++;
            }
            if (c == 's') {
                count[7]++;
            }
            if (c == 'i') {
                count[9]++;
            }
        }
        count[1] -= count[0] + count[2] + count[4];
        count[3] -= count[2] + count[8];
        count[5] -= count[4];
        count[7] -= count[6];
        count[9] -= count[6] + count[8] + count[5];
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < 10; i++) {
            for (int j = 0; j < count[i]; j++) {
                sb.append(i);
            }
        }
        return sb.toString();

=======

        int[] cnt = new int[10];
        for (char c : s.toCharArray()) {
            if (c == 'z') cnt[0]++;
            if (c == 'w') cnt[2]++;
            if (c == 'x') cnt[6]++;
            if (c == 's') cnt[7]++; //7-6
            if (c == 'g') cnt[8]++;
            if (c == 'u') cnt[4]++;
            if (c == 'f') cnt[5]++; //5-4
            if (c == 'h') cnt[3]++; //3-8
            if (c == 'i') cnt[9]++; //9-8-5-6
            if (c == 'o') cnt[1]++; //1-0-2-4
        }
        cnt[7] -= cnt[6];
        cnt[5] -= cnt[4];
        cnt[3] -= cnt[8];
        cnt[9] = cnt[9] - cnt[8] - cnt[5] - cnt[6];
        cnt[1] = cnt[1] - cnt[0] - cnt[2] - cnt[4];
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < 10; i++) {
            for (int j = 0; j < cnt[i]; j++) {
                sb.append(i);
            }
        }
        return sb.toString();

=======

        int[] cnt = new int[10];
        for (char c : s.toCharArray()) {
            switch (c) {
                case 'z': cnt[0]++; break;
                case 'w': cnt[2]++; break;
                case 'u': cnt[4]++; break;
                case 'f': cnt[5]++; break;
                case 'x': cnt[6]++; break;
                case 's': cnt[7]++; break;
                case 'g': cnt[8]++; break;
                case 'h': cnt[3]++; break;
                case 'i': cnt[9]++; break;
                case 'o': cnt[1]++; break;
            }
        }
        cnt[3] -= cnt[8];
        cnt[5] -= cnt[4];
        cnt[7] -= cnt[6];
        cnt[9] -= cnt[5] + cnt[6] + cnt[8];
        cnt[1] -= cnt[0] + cnt[2] + cnt[4];
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < 10; i++) {
            while (cnt[i]-- > 0) sb.append(i);
        }
        return sb.toString();

=======

        int[] count = new int[26];
        for (char c: s.toCharArray()) {
            count[c - 'a']++;
        }
        int[] digits = new int[10];
        digits[0] = count['z' - 'a'];
        digits[2] = count['w' - 'a'];
        digits[4] = count['u' - 'a'];
        digits[6] = count['x' - 'a'];
        digits[8] = count['g' - 'a'];
        digits[3] = count['h' - 'a'] - digits[8];
        digits[5] = count['f' - 'a'] - digits[4];
        digits[7] = count['s' - 'a'] - digits[6];
        digits[9] = count['i' - 'a'] - digits[5] - digits[6] - digits[8];
        digits[1] = count['n' - 'a'] - digits[7] - 2 * digits[9];
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < 10; i++) {
            for (int j = 0; j < digits[i]; j++) {
                sb.append(i);
            }
        }
        return sb.toString();

=======

        int[] count = new int[10];
        for(int i = 0; i < s.length(); i++){
            char c = s.charAt(i);
            if(c == 'z') count[0]++;
            if(c == 'w') count[2]++;
            if(c == 'u') count[4]++;
            if(c == 'x') count[6]++;
            if(c == 'g') count[8]++;
            if(c == 'o') count[1]++; // 1, 0, 2, 4
            if(c == 'h') count[3]++; // 3, 8
            if(c == 'f') count[5]++; // 5, 4
            if(c == 's') count[7]++; // 7, 6
            if(c == 'i') count[9]++; // 9, 5, 6, 8
        }
        count[1] -= count[0] + count[2] + count[4];
        count[3] -= count[8];
        count[5] -= count[4];
        count[7] -= count[6];
        count[9] -= count[5] + count[6] + count[8];
        
        StringBuilder sb = new StringBuilder();
        for(int i = 0; i <= 9; i++){
            for(int j = 0; j < count[i]; j++){
                sb.append(i);
            }
        }
        return sb.toString();

=======

        String[] digits = {"zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine"};
        int[] count = new int[26];
        for (char c: s.toCharArray()) count[c - 'a']++;
        int[] out = new int[10];
        out[0] = count['z' - 'a'];
        out[2] = count['w' - 'a'];
        out[4] = count['u' - 'a'];
        out[6] = count['x' - 'a'];
        out[8] = count['g' - 'a'];
        out[3] = count['h' - 'a'] - out[8];
        out[5] = count['f' - 'a'] - out[4];
        out[7] = count['s' - 'a'] - out[6];
        out[1] = count['o' - 'a'] - out[0] - out[2] - out[4];
        out[9] = count['i' - 'a'] - out[5] - out[6] - out[8];
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < 10; i++) {
            for (int j = 0; j < out[i]; j++) {
                sb.append(i);
            }
        }
        return sb.toString();
