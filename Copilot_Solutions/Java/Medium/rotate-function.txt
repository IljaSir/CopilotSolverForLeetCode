Synthesizing 10/10 solutions

=======

        int sum = 0;
        int f = 0;
        for (int i = 0; i < nums.length; i++) {
            sum += nums[i];
            f += i * nums[i];
        }
        int max = f;
        for (int i = 1; i < nums.length; i++) {
            f += sum - nums.length * nums[nums.length - i];
            max = Math.max(max, f);
        }
        return max;

=======

        int n = nums.length;
        int sum = 0;
        int f = 0;
        for (int i = 0; i < n; i++) {
            sum += nums[i];
            f += i * nums[i];
        }
        int ans = f;
        for (int i = n - 1; i >= 1; i--) {
            f += sum - n * nums[i];
            ans = Math.max(ans, f);
        }
        return ans;

=======

        int n = nums.length;
        int sum = 0;
        int f = 0;
        for (int i = 0; i < n; i++) {
            sum += nums[i];
            f += i * nums[i];
        }
        int max = f;
        for (int i = n - 1; i >= 1; i--) {
            f = f + sum - n * nums[i];
            max = Math.max(max, f);
        }
        return max;

=======

        int n = nums.length;
        int sum = 0;
        int f = 0;
        for (int i = 0; i < n; i++) {
            sum += nums[i];
            f += i * nums[i];
        }
        int max = f;
        for (int i = 1; i < n; i++) {
            f = f + sum - n * nums[n - i];
            max = Math.max(max, f);
        }
        return max;

=======

        int n = nums.length;
        int sum = 0;
        int f = 0;
        for (int i = 0; i < n; i++) {
            sum += nums[i];
            f += i * nums[i];
        }
        int max = f;
        for (int i = 1; i < n; i++) {
            f = f + sum - n * nums[n - i];
            max = Math.max(max, f);
        }
        return max;

=======

        int sum = 0;
        int f = 0;
        int n = nums.length;
        for (int i = 0; i < n; i++) {
            sum += nums[i];
            f += i * nums[i];
        }
        int max = f;
        for (int i = n - 1; i >= 1; i--) {
            f = f + sum - n * nums[i];
            max = Math.max(max, f);
        }
        return max;

=======

        int n = nums.length;
        int sum = 0, f = 0;
        for (int i = 0; i < n; i++) {
            sum += nums[i];
            f += i * nums[i];
        }
        int max = f;
        for (int i = n - 1; i > 0; i--) {
            f = f + sum - n * nums[i];
            max = Math.max(max, f);
        }
        return max;

=======

        int n = nums.length;
        int sum = 0;
        int f0 = 0;
        for (int i = 0; i < n; i++) {
            f0 += i * nums[i];
            sum += nums[i];
        }
        int max = f0;
        for (int i = 1; i < n; i++) {
            int fi = f0 + sum - n * nums[n - i];
            max = Math.max(max, fi);
            f0 = fi;
        }
        return max;

=======

        int n = nums.length;
        int sum = 0;
        int f = 0;
        for(int i = 0; i < n; i++){
            sum += nums[i];
            f += i * nums[i];
        }
        int max = f;
        for(int i = n - 1; i > 0; i--){
            f = f + sum - n * nums[i];);
        }
        return max;

=======

        int n = nums.length;
        int max = 0;
        int sum = 0;
        int f = 0;
        for (int i = 0; i < n; i++) {
            f += i * nums[i];
            sum += nums[i];
        }
        max = f;
        for (int i = n - 1; i > 0; i--) {
            f = f + sum - n * nums[i];
            max = Math.max(max, f
            max = Math.max(f, max);
        }
        return max;

=======

        int n = nums.length;
        int sum = 0;
        int f0 = 0;
        for (int i = 0; i < n; i++) {
            f0 += i * nums[i];
            sum += nums[i];
        }
        int max = f0;
        for (int i = 1; i < n; i++) {
            int fi = f0 + sum - n * nums[n - i];
            max = Math.max(max, fi);
            f0 = fi;
        }
        return max;

=======

        int[] arr = new int[nums.length];
        int sum = 0;
        for (int i = 0; i < nums.length; i++) {
            sum += nums[i];
            arr[0] += i * nums[i];
        }
        int max = arr[0];
        for (int i = 1; i < nums.length; i++) {
            arr[i] = arr[i - 1] + sum - nums.length * nums[nums.length - i];
            max = Math.max(max, arr[i]);
        }
        return max;

=======

        int n = nums.length;
        int max = 0;
        int sum = 0;
        int f = 0;
        for (int i = 0; i < n; i++) {
            f += i * nums[i];
            sum += nums[i];
        }
        max = f;
        for (int i = n - 1; i > 0; i--) {
            f = f + sum - n * nums[i];
            max = Math.max(max, f);
        }
        return max;

=======

        int n = nums.length;
        int sum = 0, f = 0;
        for (int i = 0; i < n; i++) {
            sum += nums[i];
            f += i * nums[i];
        }
        int max = f;
        for (int i = n - 1; i > 0; i--) {
            f = f + sum - n * nums[i];
            max = Math.max(max, f);
        }
        return max;

=======

        int n = nums.length;
        int sum = 0;
        int f = 0;
        for(int i = 0; i < n; i++){
            sum += nums[i];
            f += i * nums[i];
        }
        int max = f;
        for(int i = n - 1; i > 0; i--){
            f = f + sum - n * nums[i];
            max = Math.max(f, max);
        }
        return max;

=======

        int[] arr = new int[nums.length];
        int sum = 0;
        for (int i = 0; i < nums.length; i++) {
            sum += nums[i];
            arr[0] += i * nums[i];
        }
        int max = arr[0];
        for (int i = 1; i < nums.length; i++) {
            arr[i] = arr[i - 1] + sum - nums.length * nums[nums.length - i];
            max = Math.max(max, arr[i]);
        }
        return max;
