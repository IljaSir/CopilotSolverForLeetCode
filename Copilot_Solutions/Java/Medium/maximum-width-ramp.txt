Synthesizing 10/10 solutions

=======

        int max = 0;
        for (int i = 0; i < nums.length - 1; i++) {
            for (int j = nums.length - 1; j > i; j--) {
                if (nums[j] >= nums[i]) {
                    max = Math.max(max, j - i);
                    break;
                }
            }
        }
        return max;

=======

        int max = 0;
        for (int i = 0; i < nums.length; i++) {
            for (int j = i + 1; j < nums.length; j++) {
                if (nums[i] <= nums[j]) {
                    max = Math.max(max, j - i);
                }
            }
        }
        return max;

=======

        int n = nums.length;
        int[] min = new int[n];
        min[0] = nums[0];
        for (int i = 1; i < n; i++) {
            min[i] = Math.min(min[i - 1], nums[i]);
        }
        int ans = 0;
        int j = n - 1;
        for (int i = n - 1; i >= 0; i--) {
            while (j > 0 && min[j] > nums[i]) {
                j--;
            }
            ans = Math.max(ans, j - i);
        }
        return ans;

=======

        int max = 0;
        for (int i = 0; i < nums.length; i++) {
            for (int j = nums.length - 1; j > max; j--) {
                if (nums[i] <= nums[j]) {
                    max = Math.max(max, j - i);
                }
            }
        }
        return max;

=======

        int n = nums.length;
        int[] left = new int[n];
        int[] right = new int[n];
        left[0] = nums[0];
        for (int i = 1; i < n; i++) {
            left[i] = Math.min(left[i - 1], nums[i]);
        }
        right[n - 1] = nums[n - 1];
        for (int i = n - 2; i >= 0; i--) {
            right[i] = Math.max(right[i + 1], nums[i]);
        }
        int i = 0, j = 0, res = 0;
        while (i < n && j < n) {
            if (left[i] <= right[j]) {
                res = Math.max(res, j - i);
                j++;
            } else {
                i++;
            }
        }
        return res;

=======

        int n = nums.length;
        int[] min = new int[n];
        min[0] = nums[0];
        for (int i = 1; i < n; ++i) {
            min[i] = Math.min(min[i - 1], nums[i]);
        }
        int ans = 0;
        int j = n - 1;
        for (int i = n - 2; i >= 0; --i) {
            while (j > 0 && min[j] > nums[i]) {
                --j;
            }
            ans = Math.max(ans, j - i);
        }
        return ans;

=======

        int n = nums.length;
        int[] min = new int[n];
        min[0] = nums[0];
        for (int i = 1; i < n; ++i) {
            min[i] = Math.min(min[i-1], nums[i]);
        }
        int ans = 0, j = n - 1;
        for (int i = n - 1; i >= 0; --i) {
            while (j >= 0 && min[j] > nums[i]) {
                --j;
            }
            ans = Math.max(ans, i - j);
        }
        return ans;

=======

        int n = nums.length;
        int[] left = new int[n];
        int[] right = new int[n];
        left[0] = 0;
        for (int i = 1; i < n; i++) {
            if (nums[i] < nums[left[i - 1]]) {
                left[i] = i;
            } else {
                left[i] = left[i - 1];
            }
        }
        right[n - 1] = n - 1;
        for (int i = n - 2; i >= 0; i--) {
            if (nums[i] > nums[right[i + 1]]) {
                right[i] = i;
            } else {
                right[i] = right[i + 1];
            }
        }
        int max = 0;
        for (int i = 0; i < n; i++) {
            max = Math.max(max, right[i] - left[i]);
        }
        return max;

=======

        int n = nums.length;
        int[] left = new int[n];
        int[] right = new int[n];
        left[0] = 0;
        for (int i = 1; i < n; i++) {
            left[i] = nums[i] < nums[left[i - 1]] ? i : left[i - 1];
        }
        right[n - 1] = n - 1;
        for (int i = n - 2; i >= 0; i--) {
            right[i] = nums[i] > nums[right[i + 1]] ? i : right[i + 1];
        }
        int i = 0, j = 0, ans = 0;
        while (i < n && j < n) {
            if (nums[left[i]] <= nums[right[j]]) {
                ans = Math.max(ans, right[j] - left[i]);
                j++;
            } else {
                i++;
            }
        }
        return ans;

=======

        int n = nums.length;
        int[] minLeft = new int[n];
        int[] maxRight = new int[n];
        minLeft[0] = nums[0];
        maxRight[n - 1] = nums[n - 1];
        for (int i = 1; i < n; ++i) {
            minLeft[i] = Math.min(minLeft[i - 1], nums[i]);
            maxRight[n - i - 1] = Math.max(maxRight[n - i], nums[n - i - 1]);
        }
        int ans = 0;
        int i = 0;
        int j = 0;
        while (i < n && j < n) {
            if (minLeft[i] <= maxRight[j]) {
                ans = Math.max(ans, j - i);
                ++j;
            } else {
                ++i;
            }
        }
        return ans;
