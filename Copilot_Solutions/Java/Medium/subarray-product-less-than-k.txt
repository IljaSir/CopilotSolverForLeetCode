Synthesizing 10/10 solutions

=======

        if (k <= 1) return 0;
        int prod = 1, ans = 0, left = 0;
        for (int right = 0; right < nums.length; right++) {
            prod *= nums[right];
            while (prod >= k) prod /= nums[left++];
            ans += right - left + 1;
        }
        return ans;

=======

        if (k <= 1) {
            return 0;
        }
        int prod = 1;
        int ans = 0;
        int left = 0;
        for (int right = 0; right < nums.length; right++) {
            prod *= nums[right];
            while (prod >= k) {
                prod /= nums[left++];
            }
            ans += right - left + 1;
        }
        return ans;

=======

        if (k <= 1) {
            return 0;
        }
        int count = 0;
        int product = 1;
        int left = 0;
        for (int right = 0; right < nums.length; right++) {
            product *= nums[right];
            while (product >= k) {
                product /= nums[left];
                left++;
            }
            count += right - left + 1;
        }
        return count;

=======

        int i = 0, j = 0, product = 1, count = 0;
        while (j < nums.length) {
            product *= nums[j];
            while (i <= j && product >= k) {
                product /= nums[i];
                i++;
            }
            count += j - i + 1;
            j++;
        }
        return count;

=======

        int n = nums.length;
        int ans = 0;
        int left = 0;
        int right = 0;
        int prod = 1;
        while (right < n) {
            prod *= nums[right];
            while (left <= right && prod >= k) {
                prod /= nums[left];
                left++;
            }
            ans += right - left + 1;
            right++;
        }
        return ans;

=======

        int n = nums.length;
        int ans = 0;
        int left = 0, right = 0;
        int prod = 1;
        while (right < n) {
            prod *= nums[right];
            while (left <= right && prod >= k) {
                prod /= nums[left];
                left++;
            }
            ans += right - left + 1;
            right++;
        }
        return ans;

=======

        int n = nums.length;
        int i = 0;
        int j = 0;
        int product = 1;
        int count = 0;
        while (j < n) {
            product *= nums[j];
            while (i <= j && product >= k) {
                product /= nums[i];
                i++;
            }
            count += j - i + 1;
            j++;
        }
        return count;

=======

        int n = nums.length;
        int left = 0, right = 0;
        int res = 0;
        int product = 1;
        while (right < n) {
            product *= nums[right];
            while (left <= right && product >= k) {
                product /= nums[left];
                left++;
            }
            res += right - left + 1;
            right++;
        }
        return res;

=======

        int count = 0;
        int i = 0;
        int j = 0;
        int prod = 1;
        while (j < nums.length) {
            prod = prod * nums[j];
            while (i <= j && prod >= k) {
                prod = prod / nums[i];
                i++;
            }
            count = count + j - i + 1;
            j++;
        }
        return count;

=======

        int n = nums.length;
        int ans = 0, product = 1;
        int left = 0, right = 0;
        while (right < n) {
            product *= nums[right];
            while (left <= right && product >= k) {
                product /= nums[left++];
            }
            ans += right - left + 1;
            right++;
        }
        return ans;
