Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int distance = Math.abs(target[0]) + Math.abs(target[1]);
        for (int[] ghost : ghosts) {
            if (distance >= Math.abs(ghost[0] - target[0]) + Math.abs(ghost[1] - target[1])) {
                return false;
            }
        }
        return true;

=======

        int dist = Math.abs(target[0]) + Math.abs(target[1]);
        for (int i = 0; i < ghosts.length; i++) {
            if (dist >= Math.abs(ghosts[i][0] - target[0]) + Math.abs(ghosts[i][1] - target[1])) {
                return false;
            }
        }
        return true;

=======

        int minDistance = Math.abs(target[0]) + Math.abs(target[1]);
        for (int[] ghost : ghosts) {
            int distance = Math.abs(ghost[0] - target[0]) + Math.abs(ghost[1] - target[1]);
            if (distance <= minDistance) {
                return false;
            }
        }
        return true;

=======

        int min = Integer.MAX_VALUE;
        for (int i = 0; i < ghosts.length; i++) {
            min = Math.min(min, Math.abs(ghosts[i][0] - target[0]) + Math.abs(ghosts[i][1] - target[1]));
        }
        return Math.abs(target[0]) + Math.abs(target[1]) < min;

=======

        int min = Math.abs(target[0]) + Math.abs(target[1]);
        for (int[] ghost: ghosts) {
            int distance = Math.abs(ghost[0] - target[0]) + Math.abs(ghost[1] - target[1]);
            if (distance <= min) {
                return false;
            }
        }
        return true;

=======

        int[] pacman = new int[]{0, 0};
        int dist = getDistance(pacman, target);
        for (int[] ghost : ghosts) {
            if (getDistance(ghost, target) <= dist) {
                return false;
            }
        }
        return true;

=======

        int[] start = {0, 0};
        int d = distance(start, target);
        for (int[] g : ghosts) {
            int d1 = distance(g, target);
            if (d1 <= d) {
                return false;
            }
        }
        return true;
