Synthesizing 10/10 solutions

=======

        int[] count = new int[50001];
        int max = 0;
        for (int num : nums) {
            count[num]++;
            max = Math.max(max, num);
        }
        int res = 0;
        for (int i = max - 1; i > 0; i--) {
            count[i] += count[i + 1];
            res += count[i];
        }
        return res;

=======

        Arrays.sort(nums);
        int count = 0;
        int i = nums.length - 1;
        while (i > 0) {
            if (nums[i] != nums[i - 1]) {
                count += nums.length - i;
            }
            i--;
        }
        return count;

=======

        int[] count = new int[50001];
        int max = 0;
        for (int num : nums) {
            count[num]++;
            max = Math.max(max, num);
        }
        int result = 0;
        int operations = 0;
        for (int i = max; i > 0; i--) {
            operations += count[i];
            result += operations;
        }
        return result;

=======

        int[] count = new int[50001];
        for (int num : nums) {
            count[num]++;
        }
        int res = 0, sum = 0;
        for (int i = 50000; i >= 0; i--) {
            if (count[i] > 0) {
                res += sum;
                sum += count[i];
            }
        }
        return res;

=======

        int[] count = new int[50001];
        for (int num : nums) {
            count[num]++;
        }
        int ans = 0;
        int sum = 0;
        for (int i = 50000; i >= 1; i--) {
            if (count[i] > 0) {
                ans += sum;
                sum += count[i];
            }
        }
        return ans;

=======

        int[] count = new int[50001];
        for (int num : nums) {
            count[num]++;
        }
        int sum = 0;
        for (int i = 50000; i >= 1; i--) {
            count[i] += count[i + 1];
            sum += count[i];
        }
        return sum;

=======

        int[] count = new int[50001];
        for (int n : nums) {
            count[n]++;
        }
        int ans = 0;
        int sum = 0;
        for (int i = 50000; i >= 1; i--) {
            sum += count[i];
            ans += sum;
        }
        return ans;

=======

        int[] count = new int[50001];
        for (int num: nums) {
            count[num]++;
        }
        int ans = 0, sum = 0;
        for (int i = 50000; i >= 1; i--) {
            sum += count[i];
            ans += sum;
        }
        return ans;

=======

        int[] count = new int[50001];
        for (int i = 0; i < nums.length; i++) {
            count[nums[i]]++;
        }
        int result = 0;
        int total = 0;
        for (int i = count.length - 1; i >= 0; i--) {
            if (count[i] == 0) continue;
            total += count[i];
            result += total - count[i];
        }
        return result;

=======

        int[] count = new int[50001];
        int max = 0;
        for(int num : nums){
            count[num]++;
            max = Math.max(max, num);
        }
        int ans = 0;
        int sum = 0;
        for(int i = max; i > 0; i--){
            sum += count[i];
            ans += sum;
        }
        return ans;
