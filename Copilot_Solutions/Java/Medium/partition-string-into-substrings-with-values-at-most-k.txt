Synthesizing 10/10 solutions

=======

        int n = s.length();
        int[] dp = new int[n + 1];
        Arrays.fill(dp, n + 1);
        dp[0] = 0;
        for (int i = 1; i <= n; ++i) {
            int max = 0;
            for (int j = i; j >= 1; --j) {
                max = Math.max(max, s.charAt(j - 1) - '0');
                if (max <= k) {
                    dp[i] = Math.min(dp[i], dp[j - 1] + 1);
                }
            }
        }
        return dp[n] == n + 1 ? -1 : dp[n];

=======

        int n = s.length();
        int[] a = new int[n + 1];
        for (int i = 0; i < n; ++i) {
            a[i + 1] = a[i] + s.charAt(i) - '0';
        }
        int[] dp = new int[n + 1];
        for (int i = 1; i <= n; ++i) {
            dp[i] = i;
            for (int j = i - 1; j >= 0; --j) {
                if (a[i] - a[j] > k) {
                    break;
                }
                dp[i] = Math.min(dp[i], (j == 0 ? 0 : dp[j]) + 1);
            }
        }
        return dp[n] == n + 1 ? -1 : dp[n];

=======

        int n = s.length();
        int[] dp = new int[n];
        Arrays.fill(dp, Integer.MAX_VALUE);
        dp[0] = 1;
        for (int i = 0; i < n; i++) {
            if (dp[i] == Integer.MAX_VALUE) {
                continue;
            }
            int max = 0;
            for (int j = i; j < n; j++) {
                max = Math.max(max, s.charAt(j) - '0');
                if (max <= k) {
                    dp[j] = Math.min(dp[j], dp[i - 1] + 1);
                }
            }
        }
        return dp[n - 1] == Integer.MAX_VALUE ? -1 : dp[n - 1];

=======

        int n = s.length();
        int[] dp = new int[n];
        Arrays.fill(dp, Integer.MAX_VALUE);
        dp[0] = 1;
        for (int i = 0; i < n; i++) {
            int max = 0;
            int min = Integer.MAX_VALUE;
            for (int j = i; j < n; j++) {
                max = Math.max(max, s.charAt(j) - '0');
                min = Math.min(min, s.charAt(j) - '0');
                if (max - min <= k) {
                    if (i == 0) {
                        dp[j] = 1;
                    } else if (dp[i - 1] != Integer.MAX_VALUE) {
                        dp[j] = Math.min(dp[j], dp[i - 1] + 1);
                    }
                }
            }
        }
        return dp[n - 1] == Integer.MAX_VALUE ? -1 : dp[n - 1];

=======

        int[] nums = new int[s.length()];
        for (int i = 0; i < s.length(); i++) {
            nums[i] = s.charAt(i) - '0';
        }
        int count = 0;
        int max = 0;
        int start = 0;
        for (int i = 0; i < s.length(); i++) {
            max = Math.max(max, nums[i]);
            if (max > k) {
                count++;
                start = i;
                max = nums[i];
            }
        }
        return count + 1;

=======

        int n = s.length();
        int[] dp = new int[n + 1];
        dp[0] = 0;
        for (int i = 1; i <= n; i++) {
            int max = 0;
            dp[i] = Integer.MAX_VALUE;
            for (int j = i; j >= 1; j--) {
                max = Math.max(max, s.charAt(j - 1) - '0');
                if (max <= k) {
                    dp[i] = Math.min(dp[i], dp[j - 1] + 1);
                }
            }
        }
        return dp[n] == Integer.MAX_VALUE ? -1 : dp[n];

=======

        int[] dp = new int[s.length()];
        int[] max = new int[s.length()];
        max[0] = s.charAt(0) - '0';
        for (int i = 1; i < s.length(); i++) {
            max[i] = Math.max(max[i - 1], s.charAt(i) - '0');
        }
        for (int i = 0; i < s.length(); i++) {
            if (max[i] <= k) {
                dp[i] = 1;
                continue;
            }
            dp[i] = Integer.MAX_VALUE;
            for (int j = 0; j < i; j++) {
                if (max[j] <= k && dp[j] != Integer.MAX_VALUE) {
                    dp[i] = Math.min(dp[i], dp[j] + 1);
                }
            }
        }
        return dp[s.length() - 1] == Integer.MAX_VALUE ? -1 : dp[s.length() - 1];

=======

        int n = s.length();
        int[] dp = new int[n + 1];
        Arrays.fill(dp, n + 1);
        dp[0] = 1;
        for (int i = 0; i < n; i++) {
            int max = 0;
            int min = 10;
            for (int j = i; j < n; j++) {
                max = Math.max(max, s.charAt(j) - '0');
                min = Math.min(min, s.charAt(j) - '0');
                if (max - min <= k) {
                    dp[j + 1] = Math.min(dp[j + 1], dp[i] + 1);
                }
            }
        }
        return dp[n] == n + 1 ? -1 : dp[n] - 1;

=======

        int[] nums = new int[s.length()];
        for (int i = 0; i < nums.length; i++) {
            nums[i] = s.charAt(i) - '0';
        }
        return minPartition(nums, k);
    }
    
    private int minPartition(int[] nums, int k) {
        int n = nums.length;
        int[] dp = new int[n];
        Arrays.fill(dp, n + 1);
        dp[0] = 1;
        for (int i = 0; i < n; i++) {
            int sum = 0;
            int max = 0;
            for (int j = i; j >= 0; j--) {
                max = Math.max(max, nums[j]);
                sum += nums[j];
                if (max * (i - j + 1) - sum > k) break;
                dp[i] = Math.min(dp[i], (j > 0 ? dp[j - 1] : 0) + 1);
            }
        }
        return dp[n - 1] == n + 1 ? -1 : dp[n - 1];

=======

        int[] digits = new int[10];
        for (char c : s.toCharArray()) {
            digits[c - '0']++;
        }
        int ans = 0;
        for (int i = 1; i < 10; i++) {
            ans += digits[i] / k + (digits[i] % k == 0 ? 0 : 1);
        }
        return ans;
