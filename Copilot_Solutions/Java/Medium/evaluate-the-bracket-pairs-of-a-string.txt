Synthesizing 10/10 solutions

=======

        Map<String, String> map = new HashMap<>();
        for (List<String> list : knowledge) {
            map.put(list.get(0), list.get(1));
        }
        StringBuilder sb = new StringBuilder();
        int i = 0;
        while (i < s.length()) {
            if (s.charAt(i) == '(') {
                int j = i + 1;
                while (s.charAt(j) != ')') {
                    j++;
                }
                String sub = s.substring(i + 1, j);
                if (map.containsKey(sub)) {
                    sb.append(map.get(sub));
                } else {
                    sb.append('?');
                }
                i = j + 1;
            } else {
                sb.append(s.charAt(i++));
            }
        }
        return sb.toString();

=======

        Map<String, String> map = new HashMap<>();
        for (List<String> list : knowledge) {
            map.put(list.get(0), list.get(1));
        }
        StringBuilder sb = new StringBuilder();
        int i = 0;
        while (i < s.length()) {
            if (s.charAt(i) == '(') {
                int j = i + 1;
                while (s.charAt(j) != ')') {
                    j++;
                }
                String key = s.substring(i + 1, j);
                sb.append(map.getOrDefault(key, "?"));
                i = j + 1;
            } else {
                sb.append(s.charAt(i++));
            }
        }
        return sb.toString();

=======

        Map<String, String> map = new HashMap<>();
        for (List<String> list : knowledge) {
            map.put(list.get(0), list.get(1));
        }
        StringBuilder sb = new StringBuilder();
        int i = 0;
        while (i < s.length()) {
            if (s.charAt(i) == '(') {
                int j = i + 1;
                while (j < s.length() && s.charAt(j) != ')') {
                    j++;
                }
                String key = s.substring(i + 1, j);
                String val = map.getOrDefault(key, "?");
                sb.append(val);
                i = j + 1;
            } else {
                sb.append(s.charAt(i++));
            }
        }
        return sb.toString();

=======

        Map<String, String> map = new HashMap<>();
        for (List<String> list : knowledge) {
            map.put(list.get(0), list.get(1));
        }
        StringBuilder sb = new StringBuilder();
        int i = 0;
        while (i < s.length()) {
            if (s.charAt(i) == '(') {
                int j = i + 1;
                while (j < s.length() && s.charAt(j) != ')') {
                    j++;
                }
                String key = s.substring(i + 1, j);
                sb.append(map.getOrDefault(key, "?"));
                i = j + 1;
            } else {
                sb.append(s.charAt(i++));
            }
        }
        return sb.toString();

=======

        Map<String, String> map = new HashMap<>();
        for (List<String> list : knowledge) {
            map.put(list.get(0), list.get(1));
        }
        StringBuilder sb = new StringBuilder();
        int i = 0;
        while (i < s.length()) {
            if (s.charAt(i) == '(') {
                int j = i + 1;
                while (s.charAt(j) != ')') {
                    j++;
                }
                String key = s.substring(i + 1, j);
                if (map.containsKey(key)) {
                    sb.append(map.get(key));
                } else {
                    sb.append('?');
                }
                i = j + 1;
            } else {
                sb.append(s.charAt(i++));
            }
        }
        return sb.toString();

=======

        Map<String, String> map = new HashMap<>();
        for (List<String> kv : knowledge) {
            map.put(kv.get(0), kv.get(1));
        }
        StringBuilder sb = new StringBuilder();
        int i = 0;
        while (i < s.length()) {
            char c = s.charAt(i);
            if (c == '(') {
                int j = i + 1;
                while (j < s.length() && s.charAt(j) != ')') {
                    j++;
                }
                String key = s.substring(i + 1, j);
                sb.append(map.getOrDefault(key, "?"));
                i = j + 1;
            } else {
                sb.append(c);
                i++;
            }
        }
        return sb.toString();

=======

        Map<String, String> map = new HashMap<String, String>();
        for (List<String> list : knowledge) {
            map.put(list.get(0), list.get(1));
        }
        StringBuilder sb = new StringBuilder();
        int i = 0;
        while (i < s.length()) {
            if (s.charAt(i) == '(') {
                int j = i + 1;
                while (j < s.length() && s.charAt(j) != ')') {
                    j++;
                }
                String key = s.substring(i + 1, j);
                String value = map.getOrDefault(key, "?");
                sb.append(value);
                i = j + 1;
            } else {
                sb.append(s.charAt(i++));
            }
        }
        return sb.toString();

=======

        Map<String, String> map = new HashMap<>();
        for (List<String> list : knowledge) {
            map.put(list.get(0), list.get(1));
        }
        StringBuilder sb = new StringBuilder();
        char[] cs = s.toCharArray();
        for (int i = 0; i < cs.length; i++) {
            if (cs[i] == '(') {
                int j = i + 1;
                while (cs[j] != ')') {
                    j++;
                }
                String key = s.substring(i + 1, j);
                sb.append(map.getOrDefault(key, "?"));
                i = j;
            } else {
                sb.append(cs[i]);
            }
        }
        return sb.toString();

=======

        Map<String, String> map = new HashMap<>();
        for (List<String> list : knowledge) {
            map.put(list.get(0), list.get(1));
        }
        StringBuilder sb = new StringBuilder();
        int idx = 0;
        while (idx < s.length()) {
            char c = s.charAt(idx);
            if (c == '(') {
                int next = s.indexOf(')', idx + 1);
                String key = s.substring(idx + 1, next);
                sb.append(map.getOrDefault(key, "?"));
                idx = next + 1;
            } else {
                sb.append(c);
                idx++;
            }
        }
        return sb.toString();

=======

        HashMap<String, String> map = new HashMap<>();
        for(List<String> l : knowledge){
            map.put(l.get(0), l.get(1));
        }
        StringBuffer sb = new StringBuffer();
        int n = s.length();
        for(int i=0; i<n; i++){
            char c = s.charAt(i);
            if(c == '('){
                StringBuffer key = new StringBuffer();
                while(s.charAt(++i) != ')'){
                    key.append(s.charAt(i));
                }
                if(map.containsKey(key.toString())){
                    sb.append(map.get(key.toString()));
                }else{
                    sb.append('?');
                }
            }else{
                sb.append(c);
            }
        }
        return sb.toString();
