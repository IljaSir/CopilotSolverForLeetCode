Synthesizing 10/10 solutions

=======

        int max = 0;
        for (int i : nums) {
            max = Math.max(max, i);
        }
        int[] sum = new int[max + 1];
        for (int i : nums) {
            sum[i] += i;
        }
        int[] dp = new int[max + 1];
        dp[1] = sum[1];
        for (int i = 2; i <= max; i++) {
            dp[i] = Math.max(dp[i - 1], dp[i - 2] + sum[i]);
        }
        return dp[max];

=======

        int[] count = new int[10001];
        for (int num : nums) {
            count[num]++;
        }
        int[] dp = new int[10001];
        dp[1] = count[1];
        for (int i = 2; i <= 10000; i++) {
            dp[i] = Math.max(dp[i - 1], dp[i - 2] + i * count[i]);
        }
        return dp[10000];

=======

        int[] count = new int[10001];
        for (int num : nums) {
            count[num] += num;
        }
        int[] dp = new int[10001];
        dp[1] = count[1];
        for (int i = 2; i <= 10000; i++) {
            dp[i] = Math.max(dp[i - 1], dp[i - 2] + count[i]);
        }
        return dp[10000];

=======

        int[] count = new int[10001];
        int[] dp = new int[10001];
        for (int num : nums) {
            count[num]++;
        }
        dp[1] = count[1];
        for (int i = 2; i <= 10000; i++) {
            dp[i] = Math.max(dp[i - 1], dp[i - 2] + i * count[i]);
        }
        return dp[10000];

=======

        int[] count = new int[10001];
        for (int x: nums) count[x]++;
        int[] dp = new int[10001];
        dp[1] = count[1];
        for (int i = 2; i <= 10000; i++) {
            dp[i] = Math.max(dp[i - 2] + i * count[i], dp[i - 1]);
        }
        return dp[10000];

=======

        int[] arr = new int[10001];
        for (int i = 0; i < nums.length; i++) {
            arr[nums[i]] += nums[i];
        }
        int[] dp = new int[10001];
        dp[1] = arr[1];
        for (int i = 2; i < 10001; i++) {
            dp[i] = Math.max(dp[i - 1], dp[i - 2] + arr[i]);
        }
        return dp[10000];

=======

        int max = 0;
        for (int n: nums) {
            max = Math.max(max, n);
        }
        int[] sum = new int[max+1];
        for (int n: nums) {
            sum[n] += n;
        }
        int take = 0, skip = 0;
        for (int n: sum) {
            int takei = skip + n;
            int skipi = Math.max(skip, take);
            take = takei;
            skip = skipi;
        }
        return Math.max(take, skip);

=======

        int[] sum = new int[10001];
        for (int num : nums) {
            sum[num] += num;
        }
        int skip = 0;
        int take = 0;
        for (int i = 0; i < sum.length; i++) {
            int takei = skip + sum[i];
            int skipi = Math.max(skip, take);
            skip = skipi;
            take = takei;
        }
        return Math.max(skip, take);

=======

        int[] sum = new int[10001];
        for (int i : nums) {
            sum[i] += i;
        }
        int avoid = 0, using = 0, prev = -1;
        for (int i = 0; i <= 10000; i++) {
            if (sum[i] > 0) {
                int m = Math.max(avoid, using);
                if (i - 1 != prev) {
                    using = m + sum[i];
                    avoid = m;
                } else {
                    using = avoid + sum[i];
                    avoid = m;
                }
                prev = i;
            }
        }
        return Math.max(avoid, using);

=======

        int max = 0;
        for(int i = 0; i < nums.length; i++) {
            max = Math.max(max, nums[i]);
        }
        int[] count = new int[max + 1];
        for(int i = 0; i < nums.length; i++) {
            count[nums[i]]++;
        }
        int[] dp = new int[max + 1];
        dp[1] = count[1];
        for(int i = 2; i <= max; i++) {
            dp[i] = Math.max(dp[i - 1], dp[i - 2] + count[i] * i);
        }
        return dp[max];
