Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int count = 0;
        while (s.contains("01")) {
            s = s.replace("01", "10");
            count++;
        }
        return count;

=======

        int n = s.length();
        int count = 0;
        for (int i = 0; i < n; i++) {
            if (s.charAt(i) == '1') {
                count++;
            }
        }
        return Math.min(count, n - count);

=======

        int count = 0;
        for(int i = 0; i < s.length(); i++){
            if(s.charAt(i) == '0'){
                count++;
            }
        }
        return Math.min(count, s.length() - count);

=======

        int one = 0;
        int zero = 0;
        for(char c : s.toCharArray()) {
            if(c == '1') {
                one++;
            } else {
                zero++;
            }
        }
        return Math.min(one, zero);

=======

        int count = 0;
        int i = 0;
        while (i < s.length()) {
            if (s.charAt(i) == '0') {
                i++;
                continue;
            }
            int j = i;
            while (j < s.length() && s.charAt(j) == '1') {
                j++;
            }
            count++;
            i = j;
        }
        return count;

=======

        int count = 0;
        int len = s.length();
        int i = 0;
        while (i < len) {
            if (s.charAt(i) == '0') {
                i++;
            } else {
                i++;
                while (i < len && s.charAt(i) == '1') {
                    i++;
                }
                count++;
            }
        }
        return count;

=======

        int count = 0;
        int i = 0;
        while(i < s.length()) {
            if(s.charAt(i) == '0') {
                count++;
            } else {
                count--;
            }
            i++;
        }
        return Math.abs(count);

=======

        int count = 0;
        int n = s.length();
        int i = 0;
        int j = 0;
        while (j < n) {
            while (j < n && s.charAt(j) == '0') {
                j++;
            }
            count += (j - i) / 2;
            i = j;
            while (j < n && s.charAt(j) == '1') {
                j++;
            }
            i = j;
        }
        return count;

=======

        int count = 0;
        int len = s.length();
        while (len > 0) {
            int temp = len;
            s = s.replaceAll("01", "");
            len = s.length();
            count++;
            if (len == temp) {
                return -1;
            }
        }
        return count - 1;
