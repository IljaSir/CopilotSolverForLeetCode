Synthesizing 10/10 solutions

=======

        int sum = 0;
        for (int num : nums) {
            int divisors = 0;
            for (int i = 1; i <= Math.sqrt(num); i++) {
                if (num % i == 0) {
                    divisors += 2;
                    if (i * i == num) {
                        divisors--;
                    }
                }
            }
            if (divisors == 4) {
                sum += num + 1;
                for (int i = 2; i <= Math.sqrt(num); i++) {
                    if (num % i == 0) {
                        sum += i;
                        if (i * i != num) {
                            sum += num / i;
                        }
                    }
                }
            }
        }
        return sum;

=======

        int sum = 0;
        for (int num : nums) {
            sum += getSum(num);
        }
        return sum;
    }
    
    private int getSum(int num) {
        int sum = 0;
        int count = 0;
        for (int i = 1; i <= Math.sqrt(num); i++) {
            if (num % i == 0) {
                count++;
                sum += i;
                if (i != num / i) {
                    count++;
                    sum += num / i;
                }
            }
        }
        if (count == 4) {
            return sum;
        } else {
            return 0;
        }

=======

        int sum = 0;
        for (int num : nums) {
            int count = 0;
            int div = 0;
            for (int i = 1; i * i <= num; i++) {
                if (num % i == 0) {
                    count++;
                    div += i;
                    if (i * i != num) {
                        count++;
                        div += num / i;
                    }
                    if (count > 4) {
                        break;
                    }
                }
            }
            if (count == 4) {
                sum += div;
            }
        }
        return sum;

=======

        int sum = 0;
        for (int num : nums) {
            int divisors = 0;
            int sumDivisors = 0;
            for (int i = 1; i <= Math.sqrt(num); i++) {
                if (num % i == 0) {
                    divisors += 2;
                    sumDivisors += i;
                    if (i * i != num) {
                        sumDivisors += num / i;
                    }
                }
            }
            if (divisors == 4) {
                sum += sumDivisors;
            }
        }
        return sum;

=======

        int sum = 0;
        for (int i = 0; i < nums.length; i++) {
            int n = nums[i];
            int count = 0;
            int total = 0;
            for (int j = 1; j <= Math.sqrt(n); j++) {
                if (n % j == 0) {
                    count++;
                    total += j;
                    if (j != n / j) {
                        count++;
                        total += n / j;
                    }
                }
            }
            if (count == 4) {
                sum += total;
            }
        }
        return sum;

=======

        int sum = 0;
        for (int num : nums) {
            sum += getDivisorsSum(num);
        }
        return sum;
    }
    
    private int getDivisorsSum(int num) {
        int sum = 0;
        int count = 0;
        for (int i = 1; i <= Math.sqrt(num); i++) {
            if (num % i == 0) {
                if (num / i == i) {
                    sum += i;
                    count++;
                } else {
                    sum += i;
                    sum += num / i;
                    count += 2;
                }
            }
        }
        return count == 4 ? sum : 0;

=======

        int sum = 0;
        for (int num : nums) {
            int count = 0;
            int sumDivisor = 0;
            for (int i = 1; i <= Math.sqrt(num); i++) {
                if (num % i == 0) {
                    sumDivisor += i;
                    count++;
                    if (i != num / i) {
                        sumDivisor += num / i;
                        count++;
                    }
                }
            }
            if (count == 4) {
                sum += sumDivisor;
            }
        }
        return sum;

=======

        int result = 0;
        for (int i : nums) {
            result += getSumOfDivisors(i);
        }
        return result;
    }
    
    private int getSumOfDivisors(int num) {
        int count = 0;
        int sum = 0;
        for (int i = 1; i <= num; i++) {
            if (num % i == 0) {
                count++;
                sum += i;
            }
        }
        return count == 4 ? sum : 0;

=======

        int count = 0;
        for (int num : nums) {
            int temp = 0;
            int sum = 0;
            for (int i = 1; i <= num; i++) {
                if (num % i == 0) {
                    temp++;
                    sum += i;
                }
            }
            if (temp == 4) {
                count += sum;
            }
        }
        return count;

=======

        int sum = 0;
        for (int num : nums) {
            if (num == 1) continue;
            int divisors = 0;
            int divisor = 1;
            int total = 0;
            while (divisor * divisor <= num) {
                if (num % divisor == 0) {
                    divisors++;
                    total += divisor;
                    if (divisor * divisor != num) {
                        divisors++;
                        total += num / divisor;
                    }
                }
                divisor++;
            }
            if (divisors == 4) {
                sum += total;
            }
        }
        return sum;
