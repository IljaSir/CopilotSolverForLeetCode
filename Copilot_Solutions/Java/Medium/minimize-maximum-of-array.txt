Synthesizing 10/10 solutions

=======

        int sum = 0;
        int min = Integer.MAX_VALUE;
        for (int i = 0; i < nums.length; i++) {
            sum += nums[i];
            min = Math.min(min, nums[i]);
        }
        return Math.max(sum / (nums.length - 1), (sum + nums.length - 2) / (nums.length - 1));

=======

        int min = Integer.MAX_VALUE;
        int sum = 0;
        for (int i = 0; i < nums.length; i++) {
            sum += nums[i];
            min = Math.min(min, nums[i]);
        }
        return Math.max(min, (sum - 1) / (nums.length - 1));

=======

        int max = Integer.MIN_VALUE;
        int sum = 0;
        for (int i = 0; i < nums.length; i++) {
            max = Math.max(max, nums[i]);
            sum += nums[i];
        }
        int result = max;
        while (result < sum) {
            result++;
            sum -= nums.length - 1;
        }
        return result;

=======

        int sum = 0;
        int min = Integer.MAX_VALUE;
        for (int num : nums) {
            sum += num;
            min = Math.min(min, num);
        }
        return sum - min * nums.length;

=======

        int sum = 0, max = 0;
        for (int num : nums) {
            sum += num;
            max = Math.max(max, num);
        }
        return (sum + nums.length - 2) / (nums.length - 1);

=======

        int sum = 0;
        for (int num : nums) {
            sum += num;
        }
        int n = nums.length;
        return (sum + n - 2) / (n - 1);

=======

        int n = nums.length;
        int sum = 0;
        for (int i = 0; i < n; i++) {
            sum += nums[i];
        }
        int m = sum / (n - 1);
        if (sum % (n - 1) != 0) {
            m++;
        }
        return m;

=======

        int n = nums.length;
        int sum = 0;
        for (int num : nums) {
            sum += num;
        }
        int max = 0;
        for (int num : nums) {
            max = Math.max(max, num);
        }
        int l = 0;
        int r = max;
        while (l < r) {
            int mid = (l + r) >> 1;
            if (check(nums, mid, sum)) {
                r = mid;
            } else {
                l = mid + 1;
            }
        }
        return l;
    }

    private boolean check(int[] nums, int limit, int sum) {
        int cur = 0;
        for (int num : nums) {
            cur += num;
            if (cur > limit) {
                sum -= cur - limit;
                cur = limit;
                if (sum < limit) {
                    return false;
                }
            }
        }
        return true;

=======

        int n = nums.length;
        int sum = 0;
        for (int i = 0; i < n; i++) {
            sum += nums[i];
        }
        int min = sum;
        int max = 0;
        for (int i = 0; i < n; i++) {
            sum -= nums[i];
            min = Math.min(min, Math.max(sum, max));
            max = Math.max(max, nums[i]);
        }
        return min;

=======

        int sum = 0;
        for(int i = 0; i < nums.length; i++) {
            sum += nums[i];
        }
        int n = nums.length;
        int max = sum / (n - 1);
        int rem = sum % (n - 1);
        if(rem == 0) {
            return max;
        } else {
            return max + 1;
        }
