Synthesizing 10/10 solutions

=======

        int[] count = new int[26];
        int start = 0, maxCount = 0, maxLength = 0;
        for (int end = 0; end < s.length(); end++) {
            maxCount = Math.max(maxCount, ++count[s.charAt(end) - 'A']);
            while (end - start + 1 - maxCount > k) {
                count[s.charAt(start) - 'A']--;
                start++;
            }
            maxLength = Math.max(maxLength, end - start + 1);
        }
        return maxLength;

=======

        int n = s.length();
        int[] count = new int[26];
        int start = 0, maxCount = 0, maxLength = 0;
        for (int end = 0; end < n; end++) {
            maxCount = Math.max(maxCount, ++count[s.charAt(end) - 'A']);
            while (end - start + 1 - maxCount > k) {
                count[s.charAt(start) - 'A']--;
                start++;
            }
            maxLength = Math.max(maxLength, end - start + 1);
        }
        return maxLength;

=======

        int[] count = new int[26];
        int start = 0;
        int maxCount = 0;
        int maxLen = 0;
        for (int end = 0; end < s.length(); end++) {
            maxCount = Math.max(maxCount, ++count[s.charAt(end) - 'A']);
            while (end - start + 1 - maxCount > k) {
                count[s.charAt(start) - 'A']--;
                start++;
            }
            maxLen = Math.max(maxLen, end - start + 1);
        }
        return maxLen;

=======

        int[] count = new int[26];
        int max = 0;
        int left = 0;
        for (int right = 0; right < s.length(); right++) {
            max = Math.max(max, ++count[s.charAt(right) - 'A']);
            if (right - left + 1 - max > k) {
                count[s.charAt(left) - 'A']--;
                left++;
            }
        }
        return s.length() - left;

=======

        int[] count = new int[26];
        int start = 0, end = 0, maxCount = 0, maxLength = 0;
        while (end < s.length()) {
            maxCount = Math.max(maxCount, ++count[s.charAt(end) - 'A']);
            while (end - start + 1 - maxCount > k) {
                count[s.charAt(start++) - 'A']--;
            }
            maxLength = Math.max(maxLength, end - start + 1);
            end++;
        }
        return maxLength;

=======

        int[] count = new int[26];
        int maxCount = 0;
        int left = 0;
        int right = 0;
        int res = 0;
        while (right < s.length()) {
            int index = s.charAt(right) - 'A';
            count[index]++;
            maxCount = Math.max(maxCount, count[index]);
            right++;
            if (right - left > maxCount + k) {
                count[s.charAt(left) - 'A']--;
                left++;
            }
            res = Math.max(res, right - left);
        }
        return res;

=======

        int max = 0;
        int[] count = new int[26];
        int start = 0, end = 0;
        while (end < s.length()) {
            count[s.charAt(end) - 'A']++;
            max = Math.max(max, count[s.charAt(end) - 'A']);
            if (end - start + 1 - max > k) {
                count[s.charAt(start) - 'A']--;
                start++;
            }
            end++;
        }
        return end - start;

=======

        int start = 0;
        int end = 0;
        int[] count = new int[26];
        int max = 0;
        while (end < s.length()) {
            count[s.charAt(end) - 'A']++;
            max = Math.max(max, count[s.charAt(end) - 'A']);
            if (end - start + 1 - max > k) {
                count[s.charAt(start) - 'A']--;
                start++;
            }
            end++;
        }
        return end - start;

=======

        int[] freq = new int[26];
        int max = 0, left = 0, right = 0;
        while (right < s.length()) {
            max = Math.max(max, ++freq[s.charAt(right) - 'A']);
            if (right - left + 1 - max > k) {
                freq[s.charAt(left++) - 'A']--;
            }
            right++;
        }
        return right - left;

=======

        int[] cnt = new int[26];
        int i = 0;
        int j = 0;
        int maxCnt = 0;
        while (j < s.length()) {
            maxCnt = Math.max(maxCnt, ++cnt[s.charAt(j) - 'A']);
            if (j - i + 1 - maxCnt > k) {
                cnt[s.charAt(i) - 'A']--;
                i++;
            }
            j++;
        }
        return j - i;
