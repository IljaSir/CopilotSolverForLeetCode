Synthesizing 10/10 solutions

=======

        int MOD = 1000000007;
        long[] count = new long[101];
        for (int x: arr)
            count[x]++;

        long ans = 0;
        for (int i = 0; i <= 100; ++i)
            for (int j = i; j <= 100; ++j) {
                int k = target - i - j;
                if (k < 0 || k > 100) continue;
                if (i == j && j == k)
                    ans += count[i] * (count[i] - 1) * (count[i] - 2) / 6;
                else if (i == j && j != k)
                    ans += count[i] * (count[i] - 1) / 2 * count[k];
                else if (j < k)
                    ans += count[i] * count[j] * count[k];
            }

        return (int) (ans % MOD);

=======

        int MOD = 1_000_000_007;
        long[] count = new long[101];
        for (int x: arr)
            count[x]++;

        long ans = 0;
        for (int i = 0; i <= 100; ++i)
            for (int j = i; j <= 100; ++j) {
                int k = target - i - j;
                if (k < 0 || k > 100) continue;
                if (i == j && j == k)
                    ans += count[i] * (count[i] - 1) * (count[i] - 2) / 6;
                else if (i == j && j != k)
                    ans += count[i] * (count[i] - 1) / 2 * count[k];
                else if (j < k)
                    ans += count[i] * count[j] * count[k];
            }

        return (int) (ans % MOD);

=======

        int[] count = new int[101];
        for (int a : arr) {
            count[a]++;
        }
        long ans = 0;
        for (int i = 0; i <= 100; i++) {
            for (int j = i; j <= 100; j++) {
                int k = target - i - j;
                if (k < 0 || k > 100) {
                    continue;
                }
                if (i == j && j == k) {
                    ans += (long) count[i] * (count[i] - 1) * (count[i] - 2) / 6;
                } else if (i == j && j != k) {
                    ans += (long) count[i] * (count[i] - 1) / 2 * count[k];
                } else if (j < k) {
                    ans += (long) count[i] * count[j] * count[k];
                }
            }
        }
        return (int) (ans % 1000000007);

=======

        int[] count = new int[101];
        for (int a : arr) {
            count[a]++;
        }
        long ans = 0;
        for (int i = 0; i <= 100; i++) {
            for (int j = i; j <= 100; j++) {
                int k = target - i - j;
                if (k < 0 || k > 100) {
                    continue;
                }
                if (i == j && j == k) {
                    ans += (long) count[i] * (count[i] - 1) * (count[i] - 2) / 6;
                } else if (i == j && j != k) {
                    ans += (long) count[i] * (count[i] - 1) / 2 * count[k];
                } else if (i < j && j < k) {
                    ans += (long) count[i] * count[j] * count[k];
                }
            }
        }
        return (int) (ans % 1_000_000_007);

=======

        int[] count = new int[101];
        for (int num : arr) {
            count[num]++;
        }
        long res = 0;
        for (int i = 0; i <= 100; i++) {
            for (int j = i; j <= 100; j++) {
                int k = target - i - j;
                if (k < 0 || k > 100) {
                    continue;
                }
                if (i == j && j == k) {
                    res += (long)count[i] * (count[i] - 1) * (count[i] - 2) / 6;
                } else if (i == j && j != k) {
                    res += (long)count[i] * (count[i] - 1) / 2 * count[k];
                } else if (j < k) {
                    res += (long)count[i] * count[j] * count[k];
                }
            }
        }
        return (int)(res % 1000000007);

=======

        int mod = 1000000007;
        long[] c = new long[101];
        for (int x: arr) c[x]++;
        long res = 0;
        for (int i = 0; i <= 100; i++)
            for (int j = i; j <= 100; j++) {
                int k = target - i - j;
                if (k < 0 || k > 100) continue;
                if (i == j && j == k) res += c[i] * (c[i] - 1) * (c[i] - 2) / 6;
                else if (i == j && j != k) res += c[i] * (c[i] - 1) / 2 * c[k];
                else if (i < j && j < k) res += c[i] * c[j] * c[k];
            }
        return (int) (res % mod);

=======

        int mod = 1000000007;
        int[] count = new int[101];
        for (int a: arr) {
            count[a]++;
        }
        long ans = 0;
        for (int i = 0; i <= 100; i++) {
            for (int j = i; j <= 100; j++) {
                int k = target - i - j;
                if (k < j || k > 100) {
                    continue;
                }
                if (i == j && j == k) {
                    ans += (long)count[i] * (count[i] - 1) * (count[i] - 2) / 6;
                } else if (i == j && j != k) {
                    ans += (long)count[i] * (count[i] - 1) / 2 * count[k];
                } else if (j < k) {
                    ans += (long)count[i] * count[j] * count[k];
                }
            }
        }
        return (int)(ans % mod);

=======

        int mod = (int) 1e9 + 7;
        long res = 0;
        Arrays.sort(arr);
        for (int i = 0; i < arr.length; i++) {
            int t = target - arr[i];
            int l = i + 1;
            int r = arr.length - 1;
            while (l < r) {
                if (arr[l] + arr[r] < t) {
                    l++;
                } else if (arr[l] + arr[r] > t) {
                    r--;
                } else if (arr[l] != arr[r]) {
                    int left = 1;
                    int right = 1;
                    while (l + 1 < r && arr[l] == arr[l + 1]) {
                        left++;
                        l++;
                    }
                    while (r - 1 > l && arr[r] == arr[r - 1]) {
                        right++;
                        r--;
                    }
                    res += left * right;
                    res %= mod;
                    l++;
                    r--;
                } else {
                    res += (r - l + 1) * (r - l) / 2;
                    res %= mod;
                    break;
                }
            }
        }
        return (int) res;

=======

        int[] count = new int[101];
        long res = 0;
        for (int i = 0; i < arr.length; i++) {
            res += count[target - arr[i]];
            for (int j = 0; j < i; j++) {
                count[arr[i] + arr[j]]++;
            }
        }
        return (int)(res % 1000000007);

=======

        // 1. sort array
        Arrays.sort(arr);
        // 2. loop array
        int result = 0;
        int mod = 1000000007;
        for (int i = 0; i < arr.length - 2; i++) {
            int j = i + 1;
            int k = arr.length - 1;
            while (j < k) {
                int sum = arr[i] + arr[j] + arr[k];
                if (sum == target) {
                    if (arr[j] == arr[k]) {
                        result += (k - j + 1) * (k - j) / 2;
                        result %= mod;
                        break;
                    } else {
                        int left = 1;
                        int right = 1;
                        while (j + 1 < k && arr[j] == arr[j + 1]) {
                            left++;
                            j++;
                        }
                        while (k - 1 > j && arr[k] == arr[k - 1]) {
                            right++;
                            k--;
                        }
                        result += left * right;
                        result %= mod;
                        j++;
                        k--;
                    }
                } else if (sum < target) {
                    j++;
                } else {
                    k--;
                }
            }
        }
        return result;
