Synthesizing 9/10 solutions (Duplicates hidden)

=======

        if (n == 0) return "0";
        StringBuilder sb = new StringBuilder();
        while (n != 0) {
            sb.append(n & 1);
            n = -(n >> 1);
        }
        return sb.reverse().toString();

=======

        if (n == 0) {
            return "0";
        }
        StringBuilder sb = new StringBuilder();
        while (n != 0) {
            sb.append(n & 1);
            n = -(n >> 1);
        }
        return sb.reverse().toString();

=======

        if (n == 0) {
            return "0";
        }
        StringBuilder sb = new StringBuilder();
        while (n != 0) {
            int remainder = n % -2;
            n /= -2;
            if (remainder < 0) {
                remainder += 2;
                n += 1;
            }
            sb.append(remainder);
        }
        return sb.reverse().toString();

=======

        if (n == 0) return "0";
        StringBuilder sb = new StringBuilder();
        while (n != 0) {
            int r = n % (-2);
            n /= (-2);
            if (r < 0) {
                r += 2;
                n += 1;
            }
            sb.append(r);
        }
        return sb.reverse().toString();

=======

        if (n == 0) {
            return "0";
        }
        StringBuilder sb = new StringBuilder();
        while (n != 0) {
            int r = n % (-2);
            n /= (-2);
            if (r < 0) {
                r += 2;
                n += 1;
            }
            sb.append(r);
        }
        return sb.reverse().toString();

=======

        StringBuilder sb = new StringBuilder();
        while (n != 0) {
            sb.append(Math.abs(n % -2));
            n = (n - n % -2) / -2;
        }
        return sb.length() == 0 ? "0" : sb.reverse().toString();

=======

        String result = "";
        while(n != 0) {
            result = n % 2 + result;
            n = -(n / 2);
        }
        return result.isEmpty() ? "0" : result;

=======

        if (n == 0) return "0";
        int[] x = new int[32];
        int i = 0;
        while (n != 0) {
            x[i] = n & 1;
            n = -(n >> 1);
            i++;
        }
        StringBuilder sb = new StringBuilder();
        for (int j = i-1; j >= 0; j--) {
            sb.append(x[j]);
        }
        return sb.toString();
