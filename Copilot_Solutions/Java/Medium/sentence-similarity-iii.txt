Synthesizing 10/10 solutions (Duplicates hidden)

=======

        if (sentence1.equals(sentence2)) {
            return true;
        }
        String[] words1 = sentence1.split(" ");
        String[] words2 = sentence2.split(" ");
        if (words1.length < words2.length) {
            String[] temp = words1;
            words1 = words2;
            words2 = temp;
        }
        int i = 0;
        while (i < words2.length && words1[i].equals(words2[i])) {
            i++;
        }
        int j = words1.length - 1;
        int k = words2.length - 1;
        while (j >= i && k >= i && words1[j].equals(words2[k])) {
            j--;
            k--;
        }
        return j < i;

=======

        if (sentence1.equals(sentence2)) {
            return true;
        }
        String[] words1 = sentence1.split(" ");
        String[] words2 = sentence2.split(" ");
        if (words1.length < words2.length) {
            String[] temp = words1;
            words1 = words2;
            words2 = temp;
        }
        int i = 0;
        while (i < words2.length && words1[i].equals(words2[i])) {
            i++;
        }
        int j = 0;
        while (j < words2.length && words1[words1.length - 1 - j].equals(words2[words2.length - 1 - j])) {
            j++;
        }
        return i + j == words2.length;

=======

        if (sentence1.equals(sentence2)) {
            return true;
        }
        String[] s1 = sentence1.split(" ");
        String[] s2 = sentence2.split(" ");
        if (s1.length < s2.length) {
            String[] tmp = s1;
            s1 = s2;
            s2 = tmp;
        }
        int i = 0;
        for (; i < s2.length; i++) {
            if (!s1[i].equals(s2[i])) {
                break;
            }
        }
        if (i == s2.length) {
            return true;
        }
        for (int j = s2.length - 1; j >= 0; j--) {
            if (!s1[s1.length - s2.length + j].equals(s2[j])) {
                return false;
            }
        }
        return true;

=======

        String[] s1 = sentence1.split(" ");
        String[] s2 = sentence2.split(" ");
        int i = 0, j = 0;
        while (i < s1.length && j < s2.length && s1[i].equals(s2[j])) {
            i++;
            j++;
        }
        i = s1.length - 1;
        j = s2.length - 1;
        while (i >= 0 && j >= 0 && s1[i].equals(s2[j])) {
            i--;
            j--;
        }
        return i < 0 || j < 0;

=======

        if (sentence1.equals(sentence2)) {
            return true;
        }
        String[] words1 = sentence1.split(" ");
        String[] words2 = sentence2.split(" ");
        int i = 0;
        int j = 0;
        while (i < words1.length && j < words2.length) {
            if (words1[i].equals(words2[j])) {
                i++;
                j++;
            } else {
                break;
            }
        }
        while (i < words1.length && j < words2.length) {
            if (words1[words1.length - (i + 1)].equals(words2[words2.length - (j + 1)])) {
                i++;
                j++;
            } else {
                break;
            }
        }
        return i == words1.length && j == words2.length;

=======

        if (sentence1.equals(sentence2)) return true;
        String[] arr1 = sentence1.split(" ");
        String[] arr2 = sentence2.split(" ");
        if (arr1.length < arr2.length) {
            String[] arr3 = arr2;
            arr2 = arr1;
            arr1 = arr3;
        }
        int i = 0;
        int j = 0;
        while (i < arr1.length && j < arr2.length) {
            if (arr1[i].equals(arr2[j])) {
                i++;
                j++;
                continue;
            }
            if (j == 0) {
                return false;
            }
            if (arr1[i].equals(arr2[j - 1])) {
                i++;
                continue;
            }
            if (arr1[i].equals(arr2[j + 1])) {
                j++;
                continue;
            }
            return false;
        }
        return true;

=======

        String[] s1 = sentence1.split(" ");
        String[] s2 = sentence2.split(" ");
        int l1 = s1.length;
        int l2 = s2.length;
        if (l1 > l2) {
            return areSentencesSimilar(sentence2, sentence1);
        }
        for (int i = 0; i < l1; i++) {
            if (!s1[i].equals(s2[i])) {
                for (int j = 0; j < l1 - i; j++) {
                    if (!s1[l1 - j - 1].equals(s2[l2 - j - 1])) {
                        return false;
                    }
                }
                return true;
            }
        }
        return true;

=======

        if (sentence1.equals(sentence2)) return true;
        if (sentence1.length() > sentence2.length()) {
            return areSentencesSimilar(sentence2, sentence1);
        }
        String[] words1 = sentence1.split(" ");
        String[] words2 = sentence2.split(" ");
        int i = 0;
        for (; i < words1.length; i++) {
            if (!words1[i].equals(words2[i])) {
                break;
            }
        }
        int j = 0;
        for (; j < words1.length - i; j++) {
            if (!words1[words1.length - j - 1].equals(words2[words2.length - j - 1])) {
                break;
            }
        }
        return i + j >= words1.length;

=======

        // check if sentences are equal
        if(sentence1.equals(sentence2)) {
            return true;
        }
        // split sentences into words
        String[] words1 = sentence1.split(" ");
        String[] words2 = sentence2.split(" ");
        // check if sentence1 is shorter than sentence2
        if(words1.length < words2.length) {
            // check for similarity
            return isSimilar(words1, words2);
        } else {
            // check for similarity
            return isSimilar(words2, words1);
        }
    }
    
    // check for similarity
    private boolean isSimilar(String[] words1, String[] words2) {
        int i = 0;
        int j = 0;
        while(i < words1.length && j < words2.length) {
            // check if words are equal
            if(words1[i].equals(words2[j])) {
                i++;
                j++;
            } else {
                // check if words are similar
                if(i == 0) {
                    j++;
                } else {
                    return false;
                }
            }
        }
        return true;
