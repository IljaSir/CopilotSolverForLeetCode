Synthesizing 10/10 solutions

=======

        List<List<Integer>> graph = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            graph.add(new ArrayList<>());
        }
        for (int[] edge : edges) {
            graph.get(edge[0]).add(edge[1]);
            graph.get(edge[1]).add(edge[0]);
        }
        boolean[] visited = new boolean[n];
        return dfs(graph, visited, 0, hasApple);
    }
    int dfs(List<List<Integer>> graph, boolean[] visited, int node, List<Boolean> hasApple) {
        visited[node] = true;
        int ret = 0;
        for (int next : graph.get(node)) {
            if (!visited[next]) {
                int sub = dfs(graph, visited, next, hasApple);
                if (sub > 0 || hasApple.get(next)) {
                    ret += sub + 2;
                }
            }
        }
        return ret;

=======

        Map<Integer, List<Integer>> graph = new HashMap<>();
        for (int[] edge : edges) {
            graph.putIfAbsent(edge[0], new ArrayList<>());
            graph.putIfAbsent(edge[1], new ArrayList<>());
            graph.get(edge[0]).add(edge[1]);
            graph.get(edge[1]).add(edge[0]);
        }
        Set<Integer> visited = new HashSet<>();
        visited.add(0);
        return dfs(0, graph, hasApple, visited);
    }
    private int dfs(int node, Map<Integer, List<Integer>> graph, List<Boolean> hasApple, Set<Integer> visited) {
        int time = 0;
        if (hasApple.get(node)) {
            time += 2;
        }
        for (int neighbor : graph.get(node)) {
            if (visited.contains(neighbor)) {
                continue;
            }
            visited.add(neighbor);
            time += dfs(neighbor, graph, hasApple, visited);
        }
        return time;

=======

        Map<Integer, List<Integer>> graph = new HashMap<>();
        for (int[] edge : edges) {
            graph.computeIfAbsent(edge[0], x -> new ArrayList<>()).add(edge[1]);
            graph.computeIfAbsent(edge[1], x -> new ArrayList<>()).add(edge[0]);
        }
        Set<Integer> visited = new HashSet<>();
        return dfs(graph, visited, hasApple, 0);
    }
    
    private int dfs(Map<Integer, List<Integer>> graph, Set<Integer> visited, List<Boolean> hasApple, int node) {
        visited.add(node);
        int time = 0;
        for (int neighbor : graph.getOrDefault(node, new ArrayList<>())) {
            if (!visited.contains(neighbor)) {
                time += dfs(graph, visited, hasApple, neighbor);
            }
        }
        if (time > 0 || hasApple.get(node)) {
            time += 2;
        }
        return time;

=======

        Map<Integer, List<Integer>> graph = new HashMap<>();
        for (int[] edge : edges) {
            graph.putIfAbsent(edge[0], new ArrayList<>());
            graph.get(edge[0]).add(edge[1]);
            graph.putIfAbsent(edge[1], new ArrayList<>());
            graph.get(edge[1]).add(edge[0]);
        }
        boolean[] visited = new boolean[n];
        return dfs(graph, 0, visited, hasApple);
    }
    
    private int dfs(Map<Integer, List<Integer>> graph, int curr, boolean[] visited, List<Boolean> hasApple) {
        visited[curr] = true;
        int time = 0;
        for (int next : graph.get(curr)) {
            if (!visited[next]) {
                time += dfs(graph, next, visited, hasApple);
            }
        }
        if (time == 0) {
            return hasApple.get(curr) ? 2 : 0;
        } else {
            return time + 2;
        }

=======

        List<List<Integer>> adj = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            adj.add(new ArrayList<>());
        }
        for (int[] e : edges) {
            adj.get(e[0]).add(e[1]);
            adj.get(e[1]).add(e[0]);
        }
        boolean[] visited = new boolean[n];
        return dfs(adj, visited, 0, hasApple);
    }
    private int dfs(List<List<Integer>> adj, boolean[] visited, int node, List<Boolean> hasApple) {
        visited[node] = true;
        int res = 0;
        for (int nei : adj.get(node)) {
            if (!visited[nei]) {
                res += dfs(adj, visited, nei, hasApple);
            }
        }
        if (res > 0 || hasApple.get(node)) {
            return res + 2;
        }
        return 0;

=======

        Map<Integer, Set<Integer>> tree = new HashMap<>();
        for (int i = 0; i < n; i++) {
            tree.put(i, new HashSet<>());
        }
        for (int[] edge : edges) {
            tree.get(edge[0]).add(edge[1]);
            tree.get(edge[1]).add(edge[0]);
        }
        return dfs(tree, 0, new HashSet<>(), hasApple);
    }
    
    private int dfs(Map<Integer, Set<Integer>> tree, int node, Set<Integer> visited, List<Boolean> hasApple) {
        int time = 0;
        visited.add(node);
        for (int child : tree.get(node)) {
            if (!visited.contains(child)) {
                time += dfs(tree, child, visited, hasApple);
            }
        }
        if (time > 0 || hasApple.get(node)) {
            time += 2;
        }
        return time;

=======

        List<Integer>[] tree = new ArrayList[n];
        for (int i = 0; i < n; i++) {
            tree[i] = new ArrayList<>();
        }
        for (int[] edge: edges) {
            tree[edge[0]].add(edge[1]);
            tree[edge[1]].add(edge[0]);
        }
        boolean[] visited = new boolean[n];
        return dfs(tree, 0, visited, hasApple);
    }
    
    private int dfs(List<Integer>[] tree, int node, boolean[] visited, List<Boolean> hasApple) {
        visited[node] = true;
        int res = 0;
        for (int next: tree[node]) {
            if (!visited[next]) {
                res += dfs(tree, next, visited, hasApple);
            }
        }
        if (res > 0 || hasApple.get(node)) {
            res += 2;
        }
        return res;

=======

        Map<Integer, List<Integer>> graph = new HashMap<>();
        for (int[] edge : edges) {
            List<Integer> l1 = graph.getOrDefault(edge[0], new ArrayList<>());
            l1.add(edge[1]);
            graph.put(edge[0], l1);
            List<Integer> l2 = graph.getOrDefault(edge[1], new ArrayList<>());
            l2.add(edge[0]);
            graph.put(edge[1], l2);
        }
        return dfs(0, -1, graph, hasApple);
    }
    
    private int dfs(int node, int parent, Map<Integer, List<Integer>> graph, List<Boolean> hasApple) {
        int time = 0;
        for (int child : graph.get(node)) {
            if (child != parent) {
                time += dfs(child, node, graph, hasApple);
            }
        }
        if (time == 0 && !hasApple.get(node)) {
            return 0;
        }
        return time + 2;

=======

        int[] parent = new int[n];
        List<Integer>[] graph = new List[n];
        for (int i = 0; i < n; i++) {
            graph[i] = new ArrayList<>();
        }
        for (int[] edge : edges) {
            int u = edge[0];
            int v = edge[1];
            parent[v] = u;
            graph[u].add(v);
        }
        boolean[] visited = new boolean[n];
        return dfs(0, graph, hasApple, visited, parent);
    }
    
    private int dfs(int u, List<Integer>[] graph, List<Boolean> hasApple, boolean[] visited, int[] parent) {
        if (visited[u]) {
            return 0;
        }
        visited[u] = true;
        int ans = 0;
        for (int v : graph[u]) {
            ans += dfs(v, graph, hasApple, visited, parent);
        }
        if (ans == 0 && !hasApple.get(u)) {
            return 0;
        }
        if (u == 0) {
            return ans;
        }
        return ans + 2;

=======

        int[] parent = new int[n];
        int[] count = new int[n];
        int[] appleCount = new int[n];
        for (int i = 0; i < n; i++) {
            parent[i] = i;
            count[i] = 1;
            appleCount[i] = hasApple.get(i) ? 1 : 0;
        }
        for (int[] edge : edges) {
            int p1 = findParent(parent, edge[0]);
            int p2 = findParent(parent, edge[1]);
            if (p1 != p2) {
                parent[p2] = p1;
                count[p1] += count[p2];
                appleCount[p1] += appleCount[p2];
            }
        }
        int res = 0;
        for (int i = 0; i < n; i++) {
            if (appleCount[i] > 0) {
                res += 2 * (count[i] - 1);
            }
        }
        return res;
    }
    private int findParent(int[] parent, int i) {
        if (parent[i] != i) {
            parent[i] = findParent(parent, parent[i]);
        }
        return parent[i];
