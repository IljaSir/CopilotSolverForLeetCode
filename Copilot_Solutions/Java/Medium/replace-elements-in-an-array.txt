Synthesizing 10/10 solutions

=======

        int[] result = new int[nums.length];
        for (int i = 0; i < nums.length; i++) {
            result[i] = nums[i];
        }
        for (int i = 0; i < operations.length; i++) {
            int[] operation = operations[i];
            int index = getIndex(result, operation[0]);
            if (index != -1) {
                result[index] = operation[1];
            }
        }
        return result;
    }
    
    private int getIndex(int[] nums, int n) {
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] == n) {
                return i;
            }
        }
        return -1;
    }
}

=======

        int[] result = new int[nums.length];
        for (int i = 0; i < operations.length; i++) {
            for (int j = 0; j < nums.length; j++) {
                if (nums[j] == operations[i][0]) {
                    nums[j] = operations[i][1];
                }
            }
        }
        for (int i = 0; i < nums.length; i++) {
            result[i] = nums[i];
        }
        return result;

=======

        int[] result = new int[nums.length];
        for (int i = 0; i < nums.length; i++) {
            result[i] = nums[i];
        }
        for (int[] operation : operations) {
            int index = operation[0] - 1;
            int value = operation[1];
            result[index] = value;
        }
        return result;

=======

        int n = nums.length;
        int m = operations.length;
        int[] ans = new int[n];
        for (int i = 0; i < n; i++) {
            ans[i] = nums[i];
        }
        for (int i = 0; i < m; i++) {
            int index = operations[i][0];
            int value = operations[i][1];
            ans[index] = value;
        }
        return ans;

=======

        int n = nums.length;
        int m = operations.length;
        int[] ans = new int[n];
        for (int i = 0; i < n; i++) {
            ans[i] = nums[i];
        }
        for (int i = 0; i < m; i++) {
            int index = operations[i][0] - 1;
            int value = operations[i][1];
            ans[index] = value;
        }
        return ans;

=======

        int[] result = new int[nums.length];
        for (int[] operation : operations) {
            int from = operation[0];
            int to = operation[1];
            for (int i = 0; i < nums.length; i++) {
                if (nums[i] == from) {
                    result[i] = to;
                }
            }
        }
        return result;

=======

        int[] res = new int[nums.length];
        for (int i = 0; i < operations.length; i++) {
            int index = operations[i][0];
            int val = operations[i][1];
            nums[index] = val;
        }
        Arrays.sort(nums);
        for (int i = 0; i < nums.length; i++) {
            res[i] = nums[i];
        }
        return res;

=======

        int[] res = new int[nums.length];
        for (int i = 0; i < operations.length; i++) {
            int idx = Arrays.binarySearch(nums, operations[i][0]);
            if (idx >= 0) {
                nums[idx] = operations[i][1];
            }
        }
        Arrays.sort(nums);
        for (int i = 0; i < nums.length; i++) {
            res[i] = nums[i];
        }
        return res;

=======

        int[] res = new int[nums.length];
        for (int[] op : operations) {
            int i = op[0]-1, j = op[1]-1;
            res[i]--;
            if (j+1 < nums.length) res[j+1]++;
        }
        for (int i = 1; i < nums.length; i++) res[i] += res[i-1];
        for (int i = 0; i < nums.length; i++) res[i] += nums[i];
        return res;

=======

        int[] result = new int[nums.length];
        int[] count = new int[nums.length + 1];
        for (int[] operation : operations) {
            int index = operation[0];
            int value = operation[1];
            count[index - 1]--;
            count[value]++;
        }
        int sum = 0;
        for (int i = 0; i < count.length; i++) {
            sum += count[i];
            if (i < nums.length) {
                result[i] = nums[i] + sum;
            }
        }
        return result;
