Synthesizing 10/10 solutions

=======

        PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> (b[0] * b[0] + b[1] * b[1] - a[0] * a[0] - a[1] * a[1]));
        for (int[] point : points) {
            pq.offer(point);
            if (pq.size() > k) {
                pq.poll();
            }
        }
        int[][] res = new int[k][2];
        while (k > 0) {
            res[--k] = pq.poll();
        }
        return res;

=======

        Arrays.sort(points, new Comparator<int[]>() {
            @Override
            public int compare(int[] a, int[] b) {
                return (a[0] * a[0] + a[1] * a[1]) - (b[0] * b[0] + b[1] * b[1]);
            }
        });
        int[][] result = new int[k][2];
        for (int i = 0; i < k; i++) {
            result[i] = points[i];
        }
        return result;

=======

        int n = points.length;
        int[] distances = new int[n];
        for (int i = 0; i < n; i++) {
            distances[i] = (points[i][0] * points[i][0]) + (points[i][1] * points[i][1]);
        }
        Arrays.sort(distances);
        int maxDistance = distances[k - 1];
        int[][] ans = new int[k][2];
        int t = 0;
        for (int i = 0; i < n; i++) {
            int distance = (points[i][0] * points[i][0]) + (points[i][1] * points[i][1]);
            if (distance <= maxDistance) {
                ans[t++] = points[i];
            }
        }
        return ans;

=======

        int[][] result = new int[k][2];
        int[] distance = new int[points.length];
        for (int i = 0; i < points.length; i++) {
            distance[i] = points[i][0] * points[i][0] + points[i][1] * points[i][1];
        }
        Arrays.sort(distance);
        int distanceK = distance[k - 1];
        int index = 0;
        for (int i = 0; i < points.length; i++) {
            if (points[i][0] * points[i][0] + points[i][1] * points[i][1] <= distanceK) {
                result[index] = points[i];
                index++;
            }
        }
        return result;

=======

        PriorityQueue<int[]> pq = new PriorityQueue<int[]>(new Comparator<int[]>(){
            @Override
            public int compare(int[] a, int[] b){
                return (b[0]*b[0] + b[1]*b[1]) - (a[0]*a[0] + a[1]*a[1]);
            }
        });
        for(int[] p : points){
            pq.add(p);
            if(pq.size() > k) pq.poll();
        }
        int[][] res = new int[k][2];
        while(k > 0){
            res[--k] = pq.poll();
        }
        return res;

=======

        int[][] res = new int[k][2];
        PriorityQueue<int[]> pq = new PriorityQueue<>(new Comparator<int[]>(){
            public int compare(int[] a, int[] b){
                return (b[0]*b[0] + b[1]*b[1]) - (a[0]*a[0] + a[1]*a[1]);
            }
        });
        for(int i = 0; i < points.length; i++){
            pq.add(points[i]);
            if(pq.size() > k){
                pq.poll();
            }
        }
        int index = 0;
        while(!pq.isEmpty()){
            res[index++] = pq.poll();
        }
        return res;

=======

        int[][] result = new int[k][2];
        PriorityQueue<int[]> pq = new PriorityQueue<>(new Comparator<int[]>() {
            public int compare(int[] a, int[] b) {
                return (b[0] * b[0] + b[1] * b[1]) - (a[0] * a[0] + a[1] * a[1]);
            }
        });
        for (int[] point : points) {
            pq.add(point);
            if (pq.size() > k) {
                pq.poll();
            }
        }
        int i = 0;
        while (!pq.isEmpty()) {
            result[i++] = pq.poll();
        }
        return result;

=======

        int[][] result = new int[k][2];
        int[] dist = new int[points.length];
        for(int i=0;i<points.length;i++){
            dist[i] = points[i][0]*points[i][0] + points[i][1]*points[i][1];
        }
        Arrays.sort(dist);
        int dist_k = dist[k-1];
        int t = 0;
        for(int i=0;i<points.length;i++){
            if(points[i][0]*points[i][0] + points[i][1]*points[i][1] <= dist_k){
                result[t][0] = points[i][0];
                result[t][1] = points[i][1];
                t++;
            }
        }
        return result;

=======

        PriorityQueue<int[]> pq = new PriorityQueue<int[]>((a, b) -> b[0] - a[0]);

        for (int[] point : points) {
            pq.offer(new int[]{point[0] * point[0] + point[1] * point[1], point[0], point[1]});
            if (pq.size() > k) {
                pq.poll();
            }
        }

        int[][] ans = new int[k][2];
        while (k-- > 0) {
            int[] point = pq.poll();
            ans[k][0] = point[1];
            ans[k][1] = point[2];
        }
        return ans;

=======

        int[][] result = new int[k][2];
        PriorityQueue<int[]> pq = new PriorityQueue<int[]>((a,b) -> b[0] - a[0]);
        for (int[] point : points) {
            int distance = point[0] * point[0] + point[1] * point[1];
            pq.add(new int[]{distance, point[0], point[1]});
            if (pq.size() > k) {
                pq.poll();
            }
        }
        int i = 0;
        while (!pq.isEmpty()) {
            int[] point = pq.poll();
            result[i++] = new int[]{point[1], point[2]};
        }
        return result;
