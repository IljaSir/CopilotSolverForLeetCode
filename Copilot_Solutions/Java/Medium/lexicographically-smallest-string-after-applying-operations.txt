Synthesizing 10/10 solutions

=======

        Set<String> visited = new HashSet<>();
        Queue<String> queue = new LinkedList<>();
        queue.offer(s);
        visited.add(s);
        String ans = s;
        while (!queue.isEmpty()) {
            String cur = queue.poll();
            ans = ans.compareTo(cur) < 0 ? ans : cur;
            String s1 = add(cur, a);
            String s2 = rotate(cur, b);
            if (!visited.contains(s1)) {
                queue.offer(s1);
                visited.add(s1);
            }
            if (!visited.contains(s2)) {
                queue.offer(s2);
                visited.add(s2);
            }
        }
        return ans;
    }
    
    private String add(String s, int a) {
        char[] chars = s.toCharArray();
        for (int i = 1; i < chars.length; i += 2) {
            chars[i] = (char) ((chars[i] - '0' + a) % 10 + '0');
        }
        return new String(chars);

=======

        Set<String> visited = new HashSet<>();
        visited.add(s);
        Queue<String> queue = new LinkedList<>();
        queue.offer(s);
        String res = s;
        while (!queue.isEmpty()) {
            String cur = queue.poll();
            res = res.compareTo(cur) < 0 ? res : cur;
            String next1 = add(cur, a);
            if (!visited.contains(next1)) {
                visited.add(next1);
                queue.offer(next1);
            }
            String next2 = rotate(cur, b);
            if (!visited.contains(next2)) {
                visited.add(next2);
                queue.offer(next2);
            }
        }
        return res;
    }

    private String add(String s, int a) {
        char[] chars = s.toCharArray();
        for (int i = 1; i < chars.length; i += 2) {
            chars[i] += a;
            if (chars[i] > '9') {
                chars[i] -= 10;
            }
        }
        return new String(chars);

=======

        Set<String> visited = new HashSet<>();
        visited.add(s);
        Queue<String> queue = new LinkedList<>();
        queue.add(s);
        String ans = s;
        while (!queue.isEmpty()) {
            String cur = queue.poll();
            ans = ans.compareTo(cur) < 0 ? ans : cur;
            String rotate = rotate(cur, b);
            if (!visited.contains(rotate)) {
                visited.add(rotate);
                queue.add(rotate);
            }
            String add = add(cur, a);
            if (!visited.contains(add)) {
                visited.add(add);
                queue.add(add);
            }
        }
        return ans;
    }

    private String rotate(String s, int b) {
        int n = s.length();
        b = b % n;
        return s.substring(n - b) + s.substring(0, n - b);
    }

    private String add(String s, int a) {
        char[] chars = s.toCharArray();
        for (int i = 1; i < chars.length; i += 2) {
            chars[i] = (char) ((chars[i] - '0' + a) % 10 + '0');
        }
        return new String(chars);

=======

        Set<String> set = new HashSet<>();
        set.add(s);
        Queue<String> queue = new LinkedList<>();
        queue.offer(s);
        String res = s;
        while (!queue.isEmpty()) {
            String cur = queue.poll();
            String add = add(cur, a);
            String rotate = rotate(cur, b);
            if (set.add(add)) {
                queue.offer(add);
            }
            if (set.add(rotate)) {
                queue.offer(rotate);
            }
            res = res.compareTo(cur) < 0 ? res : cur;
        }
        return res;
    }

    private String add(String s, int a) {
        char[] chs = s.toCharArray();
        for (int i = 1; i < chs.length; i += 2) {
            chs[i] = (char) ((chs[i] - '0' + a) % 10 + '0');
        }
        return new String(chs);

=======

        Set<String> set = new HashSet<>();
        set.add(s);
        Queue<String> queue = new LinkedList<>();
        queue.offer(s);
        String res = s;
        while (!queue.isEmpty()) {
            String cur = queue.poll();
            String next = add(cur, a);
            if (set.add(next)) {
                queue.offer(next);
            }
            next = rotate(cur, b);
            if (set.add(next)) {
                queue.offer(next);
            }
            if (next.compareTo(res) < 0) {
                res = next;
            }
        }
        return res;
    }
    private String add(String s, int a) {
        char[] chars = s.toCharArray();
        for (int i = 1; i < chars.length; i += 2) {
            chars[i] = (char) ((chars[i] - '0' + a) % 10 + '0');
        }
        return new String(chars);

=======

        Set<String> visited = new HashSet<>();
        Queue<String> queue = new LinkedList<>();
        queue.offer(s);
        String res = s;
        while (!queue.isEmpty()) {
            String cur = queue.poll();
            if (!visited.contains(cur)) {
                res = res.compareTo(cur) < 0 ? res : cur;
                visited.add(cur);
                queue.offer(add(cur, a));
                queue.offer(rotate(cur, b));
            }
        }
        return res;
    }
    
    private String add(String s, int a) {
        char[] ch = s.toCharArray();
        for (int i = 1; i < ch.length; i += 2) {
            ch[i] = (char)((ch[i] - '0' + a) % 10 + '0');
        }
        return new String(ch);

=======

        int n = s.length();
        int[] p = new int[n];
        for (int i = 0; i < n; i++) {
            p[i] = i;
        }
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                if (s.charAt(p[i]) > s.charAt(p[j])) {
                    int t = p[i];
                    p[i] = p[j];
                    p[j] = t;
                }
            }
        }
        int[] q = new int[n];
        for (int i = 0; i < n; i++) {
            q[i] = (i + b) % n;
        }
        int[] r = new int[n];
        for (int i = 0; i < n; i++) {
            r[i] = (s.charAt(i) - '0' + a * (i & 1)) % 10;
        }
        String ans = s;
        int[] perm = new int[n];
        for (int i = 0; i < n; i++) {
            perm[i] = i;
        }
        do {
            char[] t = new char[n];
            for (int i = 0; i < n; i++) {
                t[i] = (char) (r[perm[i]] + '0');
            }
            for (int i = 0; i < n; i++) {
                t[q[i]] = t[i];
            }
            String cur = new String(t);
            if (cur.compareTo(ans) < 0) {
                ans = cur;
            }
        } while (nextPermutation(perm));
        return ans;
    }

    private boolean nextPermutation(int[] a) {
        int n = a.length;
        int i = n - 1;
        while (i > 0 && a[i - 1] >= a[i]) {
            i--;
        }
        if (i <= 0) {
            return false;
        }
        int j = n - 1;
        while (a[j] <= a[i - 1]) {
            j--;
        }
        int temp = a[i - 1];
        a[i - 1] = a[j];
        a[j] = temp;
        j = n - 1

=======

        String ans = s;
        char[] chars = s.toCharArray();
        int n = chars.length;
        for (int i = 0; i < n; i++) {
            for (int j = 1; j < n; j += 2) {
                chars[j] = (char) ((chars[j] - '0' + a) % 10 + '0');
            }
            s = new String(chars);
            ans = ans.compareTo(s) > 0 ? s : ans;
        }
        for (int i = 0; i < n; i++) {
            s = s.substring(n - b) + s.substring(0, n - b);
            ans = ans.compareTo(s) > 0 ? s : ans;
        }
        return ans;

=======

        String res = s;
        Queue<String> q = new LinkedList<>();
        q.offer(s);
        Set<String> seen = new HashSet<>();
        while (!q.isEmpty()) {
            String cur = q.poll();
            if (seen.add(cur)) {
                res = res.compareTo(cur) < 0 ? res : cur;
                q.offer(add(cur, a));
                q.offer(rotate(cur, b));
            }
        }
        return res;
    }
    private String add(String s, int a) {
        char[] arr = s.toCharArray();
        for (int i = 1; i < arr.length; i += 2) {
            arr[i] = (char) ((arr[i] - '0' + a) % 10 + '0');
        }
        return new String(arr);

=======

        char[] arr = s.toCharArray();
        int n = arr.length;
        for (int i = 0; i < n; i++) {
            arr[i] -= '0';
        }
        char[] res = Arrays.copyOf(arr, n);
        dfs(arr, res, 0, a, b);
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < n; i++) {
            sb.append(res[i]);
        }
        return sb.toString();
    }
    private void dfs(char[] arr, char[] res, int start, int a, int b) {
        if (start == arr.length) {
            for (int i = 0; i < arr.length; i++) {
                if (arr[i] < res[i]) {
                    System.arraycopy(arr, 0, res, 0, arr.length);
                    break;
                } else if (arr[i] > res[i]) {
                    break;
                }
            }
            return;
        }
        dfs(arr, res, start + 1, a, b);
        if (start % 2 == 1) {
            arr[start] = (char) ((arr[start] + a) % 10);
        }
        dfs(arr, res, start + 1, a, b);
        if (start % 2 == 1) {
            arr[start] = (char) ((arr[start] - a + 10) % 10);
        }
        char temp = arr[arr.length - 1];
        for (int i = arr.length - 1; i > 0; i--) {
            arr[i] = arr[i - 1];
        }
        arr[0] = temp;
        dfs(arr, res, start, a, b);
        temp = arr[0];
        for (int i = 0; i < arr.length - 1; i++) {
            arr[i] = arr[i + 1];
        }
        arr[arr.length - 1] = temp;
