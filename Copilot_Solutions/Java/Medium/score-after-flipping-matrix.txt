Synthesizing 10/10 solutions

=======

        int m = grid.length;
        int n = grid[0].length;
        for (int i = 0; i < m; i++) {
            if (grid[i][0] == 0) {
                for (int j = 0; j < n; j++) {
                    grid[i][j] = 1 - grid[i][j];
                }
            }
        }
        int sum = 0;
        for (int j = 0; j < n; j++) {
            int count = 0;
            for (int i = 0; i < m; i++) {
                if (grid[i][j] == 1) {
                    count++;
                }
            }
            sum += (Math.max(count, m - count) * (1 << (n - j - 1)));
        }
        return sum;

=======

        int m = grid.length;
        int n = grid[0].length;
        int res = m * (1 << (n - 1));
        for (int j = 1; j < n; j++) {
            int nOnes = 0;
            for (int i = 0; i < m; i++) {
                if (grid[i][0] == 1) {
                    nOnes += grid[i][j];
                } else {
                    nOnes += (1 - grid[i][j]);
                }
            }
            int k = Math.max(nOnes, m - nOnes);
            res += k * (1 << (n - j - 1));
        }
        return res;

=======

        int m = grid.length;
        int n = grid[0].length;
        int res = 0;
        for (int i = 0; i < m; i++) {
            if (grid[i][0] == 0) {
                for (int j = 0; j < n; j++) {
                    grid[i][j] = 1 - grid[i][j];
                }
            }
        }
        for (int j = 1; j < n; j++) {
            int count = 0;
            for (int i = 0; i < m; i++) {
                if (grid[i][j] == 1) {
                    count++;
                }
            }
            if (count < (m + 1) / 2) {
                for (int i = 0; i < m; i++) {
                    grid[i][j] = 1 - grid[i][j];
                }
            }
        }
        for (int i = 0; i < m; i++) {
            int num = 0;
            for (int j = 0; j < n; j++) {
                num = num * 2 + grid[i][j];
            }
            res += num;
        }
        return res;

=======

        int m = grid.length;
        int n = grid[0].length;
        int res = 0;
        for (int i = 0; i < m; i++) {
            if (grid[i][0] == 0) {
                for (int j = 0; j < n; j++) {
                    grid[i][j] = 1 - grid[i][j];
                }
            }
        }
        for (int j = 0; j < n; j++) {
            int sum = 0;
            for (int i = 0; i < m; i++) {
                sum += grid[i][j];
            }
            sum = Math.max(sum, m - sum);
            res += sum * (1 << (n - j - 1));
        }
        return res;

=======

        int m = grid.length;
        int n = grid[0].length;
        int sum = 0;
        for (int i = 0; i < m; i++) {
            if (grid[i][0] == 0) {
                for (int j = 0; j < n; j++) {
                    grid[i][j] = grid[i][j] == 0 ? 1 : 0;
                }
            }
        }
        for (int i = 1; i < n; i++) {
            int c = 0;
            for (int j = 0; j < m; j++) {
                if (grid[j][i] == 1) {
                    c++;
                }
            }
            if (c < m - c) {
                for (int j = 0; j < m; j++) {
                    grid[j][i] = grid[j][i] == 0 ? 1 : 0;
                }
            }
        }
        for (int i = 0; i < m; i++) {
            int p = 1;
            for (int j = n - 1; j >= 0; j--) {
                sum += grid[i][j] * p;
                p *= 2;
            }
        }
        return sum;

=======

        int m = grid.length;
        int n = grid[0].length;
        int sum = 0;
        for (int i = 0; i < m; i++) {
            if (grid[i][0] == 0) {
                for (int j = 0; j < n; j++) {
                    grid[i][j] = grid[i][j] == 0 ? 1 : 0;
                }
            }
        }
        for (int i = 0; i < n; i++) {
            int count = 0;
            for (int j = 0; j < m; j++) {
                if (grid[j][i] == 1) {
                    count++;
                }
            }
            sum += Math.max(count, m - count) * (1 << (n - i - 1));
        }
        return sum;

=======

        int m = grid.length, n = grid[0].length;
        int ans = 0;
        for (int i = 0; i < m; i++) {
            if (grid[i][0] == 0) {
                for (int j = 0; j < n; j++) {
                    grid[i][j] = 1 - grid[i][j];
                }
            }
        }
        for (int j = 0; j < n; j++) {
            int c = 0;
            for (int i = 0; i < m; i++) {
                if (grid[i][j] == 1) {
                    c++;
                }
            }
            ans += Math.max(c, m - c) * (1 << (n - j - 1));
        }
        return ans;

=======

        int rows = grid.length;
        int cols = grid[0].length;
        int sum = 0;
        for (int i = 0; i < rows; i++) {
            if (grid[i][0] == 0) {
                for (int j = 0; j < cols; j++) {
                    grid[i][j] = 1 - grid[i][j];
                }
            }
        }
        for (int i = 1; i < cols; i++) {
            int count = 0;
            for (int j = 0; j < rows; j++) {
                if (grid[j][i] == 1) {
                    count++;
                }
            }
            if (count < rows - count) {
                for (int j = 0; j < rows; j++) {
                    grid[j][i] = 1 - grid[j][i];
                }
            }
        }
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                sum += grid[i][j] * Math.pow(2, cols - 1 - j);
            }
        }
        return sum;

=======

        int M = grid.length, N = grid[0].length;
        int ans = 0;
        for (int i = 0; i < M; i++) {
            if (grid[i][0] == 0) {
                for (int j = 0; j < N; j++) {
                    grid[i][j] ^= 1;
                }
            }
        }
        for (int j = 0; j < N; j++) {
            int c = 0;
            for (int i = 0; i < M; i++) {
                if (grid[i][j] == 1) {
                    c++;
                }
            }
            ans += Math.max(c, M - c) * (1 << (N - j - 1));
        }
        return ans;

=======

        int m = grid.length, n = grid[0].length;
        int res = 0;
        for(int i = 0; i < m; i++) {
            if(grid[i][0] == 0) {
                for(int j = 0; j < n; j++) {
                    grid[i][j] = 1 - grid[i][j];
                }
            }
        }
        for(int j = 0; j < n; j++) {
            int count = 0;
            for(int i = 0; i < m; i++) {
                if(grid[i][j] == 1) count++;
            }
            res += Math.max(count, m - count) * (1 << (n - j - 1));
        }
        return res;
