Synthesizing 10/10 solutions

=======

        Map<List<Integer>, Integer> map = new HashMap<>();
        return dfs(price, special, needs, map);
    }
    
    public int dfs(List<Integer> price, List<List<Integer>> special, List<Integer> needs, Map<List<Integer>, Integer> map) {
        if (map.containsKey(needs)) {
            return map.get(needs);
        }
        int j = 0, res = dot(needs, price);
        for (List<Integer> s : special) {
            ArrayList<Integer> clone = new ArrayList<>(needs);
            for (j = 0; j < needs.size(); j++) {
                int diff = clone.get(j) - s.get(j);
                if (diff < 0) {
                    break;
                }
                clone.set(j, diff);
            }
            if (j == needs.size()) {
                res = Math.min(res, s.get(j) + dfs(price, special, clone, map));
            }
        }
        map.put(needs, res);
        return res;
    }
    
    public int dot(List<Integer> a, List<Integer> b) {
        int sum = 0;
        for (int i = 0; i < a.size(); i++) {
            sum += a.get(i) * b.get(i);
        }
        return sum;

=======

        return shopping(price, special, needs, 0);
    }
    
    private int shopping(List<Integer> price, List<List<Integer>> special, List<Integer> needs, int pos) {
        int min = directPurchase(price, needs);
        for (int i = pos; i < special.size(); i++) {
            List<Integer> offer = special.get(i);
            List<Integer> temp = new ArrayList<>();
            for (int j = 0; j < needs.size(); j++) {
                if (needs.get(j) < offer.get(j)) {
                    temp = null;
                    break;
                }
                temp.add(needs.get(j) - offer.get(j));
            }
            if (temp != null) {
                min = Math.min(min, offer.get(offer.size() - 1) + shopping(price, special, temp, i));
            }
        }
        return min;
    }
    
    private int directPurchase(List<Integer> price, List<Integer> needs) {
        int sum = 0;
        for (int i = 0; i < needs.size(); i++) {
            sum += needs.get(i) * price.get(i);
        }
        return sum;

=======

        return shopping(price, special, needs, 0);
    }
    
    private int shopping(List<Integer> price, List<List<Integer>> special, List<Integer> needs, int start) {
        int res = directPurchase(price, needs);
        for (int i = start; i < special.size(); i++) {
            List<Integer> offer = special.get(i);
            List<Integer> clone = new ArrayList<>(needs);
            int j = 0;
            for (; j < needs.size(); j++) {
                int diff = clone.get(j) - offer.get(j);
                if (diff < 0) {
                    break;
                }
                clone.set(j, diff);
            }
            if (j == needs.size()) {
                res = Math.min(res, offer.get(j) + shopping(price, special, clone, i));
            }
        }
        return res;
    }
    
    private int directPurchase(List<Integer> price, List<Integer> needs) {
        int res = 0;
        for (int i = 0; i < price.size(); i++) {
            res += price.get(i) * needs.get(i);
        }
        return res;

=======

        return shopping(price, special, needs, 0);
    }
    
    private int shopping(List<Integer> price, List<List<Integer>> special, List<Integer> needs, int pos) {
        int min = directPurchase(price, needs);
        for (int i = pos; i < special.size(); i++) {
            List<Integer> offer = special.get(i);
            List<Integer> tmp = new ArrayList<>();
            for (int j = 0; j < needs.size(); j++) {
                if (needs.get(j) < offer.get(j)) {
                    tmp = null;
                    break;
                }
                tmp.add(needs.get(j) - offer.get(j));
            }
            if (tmp != null) {
                min = Math.min(min, offer.get(offer.size() - 1) + shopping(price, special, tmp, i));
            }
        }
        return min;
    }
    
    private int directPurchase(List<Integer> price, List<Integer> needs) {
        int total = 0;
        for (int i = 0; i < price.size(); i++) {
            total += price.get(i) * needs.get(i);
        }
        return total;

=======

        return shopping(price, special, needs, 0);
    }
    
    public int shopping(List<Integer> price, List<List<Integer>> special, List<Integer> needs, int i) {
        int min = directPurchase(price, needs);
        for(; i < special.size(); i++) {
            List<Integer> offer = special.get(i);
            List<Integer> temp = new ArrayList<>();
            for(int j = 0; j < needs.size(); j++) {
                if(needs.get(j) < offer.get(j)) {
                    temp = null;
                    break;
                }
                temp.add(needs.get(j) - offer.get(j));
            }
            if(temp != null) {
                min = Math.min(min, offer.get(offer.size() - 1) + shopping(price, special, temp, i));
            }
        }
        return min;
    }
    
    public int directPurchase(List<Integer> price, List<Integer> needs) {
        int total = 0;
        for(int i = 0; i < price.size(); i++) {
            total += price.get(i) * needs.get(i);
        }
        return total;

=======

        return shopping(price, special, needs, 0);
    }
    
    private int shopping(List<Integer> price, List<List<Integer>> special, List<Integer> needs, int index) {
        int min = directPurchase(price, needs);
        for (int i = index; i < special.size(); i++) {
            List<Integer> offer = special.get(i);
            List<Integer> temp = new ArrayList<>();
            for (int j = 0; j < needs.size(); j++) {
                if (needs.get(j) < offer.get(j)) {
                    temp = null;
                    break;
                }
                temp.add(needs.get(j) - offer.get(j));
            }
            if (temp != null) {
                min = Math.min(min, offer.get(offer.size() - 1) + shopping(price, special, temp, i));
            }
        }
        return min;
    }
    
    private int directPurchase(List<Integer> price, List<Integer> needs) {
        int sum = 0;
        for (int i = 0; i < needs.size(); i++) {
            sum += needs.get(i) * price.get(i);
        }
        return sum;

=======

        int[] p = new int[price.size()];
        int[] n = new int[needs.size()];
        for (int i = 0; i < price.size(); i++) {
            p[i] = price.get(i);
        }
        for (int i = 0; i < needs.size(); i++) {
            n[i] = needs.get(i);
        }
        int[][] s = new int[special.size()][];
        for (int i = 0; i < special.size(); i++) {
            s[i] = new int[special.get(i).size()];
            for (int j = 0; j < special.get(i).size(); j++) {
                s[i][j] = special.get(i).get(j);
            }
        }
        return shoppingOffers(p, s, n);
    }
    public int shoppingOffers(int[] price, int[][] special, int[] needs) {
        return shopping(price, special, needs, 0);
    }
    private int shopping(int[] price, int[][] special, int[] needs, int pos) {
        int n = price.length;
        int min = directPurchase(price, needs);
        for (int i = pos; i < special.length; i++) {
            int[] clone = needs.clone();
            for (int j = 0; j < n; j++) {
                int diff = clone[j] - special[i][j];
                if (diff < 0) {
                    break;
                }
                clone[j] = diff;
            }
            min = Math.min(min, shopping(price, special, clone, i) + special[i][n]);
        }
        return min;
    }
    private int directPurchase(int[] price, int[] needs) {
        int sum = 0;
        for (int i = 0; i < price.length; i++) {
            sum += price[i] * needs[i];
        }
        return sum;

=======

        return shopping(price, special, needs, 0);
    }
    
    public int shopping(List<Integer> price, List<List<Integer>> special, List<Integer> needs, int start) {
        int j = 0, localMin = dot(needs, price);
        for (int i = start; i < special.size(); i++) {
            List<Integer> offer = special.get(i);
            ArrayList<Integer> clone = new ArrayList<Integer>(needs);
            for (j = 0; j < needs.size(); j++) {
                int diff = needs.get(j) - offer.get(j);
                if (diff < 0) break;
                clone.set(j, diff);
            }
            if (j == needs.size())
                localMin = Math.min(localMin, offer.get(j) + shopping(price, special, clone, i));
        }
        return localMin;
    }
    
    public int dot(List<Integer> a, List<Integer> b) {
        int sum = 0;
        for (int i = 0; i < a.size(); i++) {
            sum += a.get(i) * b.get(i);
        }
        return sum;

=======

        return shopping(price, special, needs, 0);
    }
    public int shopping(List<Integer> price, List<List<Integer>> special, List<Integer> needs, int start) {
        int min = 0;
        for (int i = 0; i < needs.size(); i++) {
            min += price.get(i) * needs.get(i);
        }
        for (int i = start; i < special.size(); i++) {
            List<Integer> offer = special.get(i);
            List<Integer> clone = new ArrayList<Integer>(needs);
            int j = 0;
            for (; j < needs.size(); j++) {
                int diff = clone.get(j) - offer.get(j);
                if (diff < 0) {
                    break;
                }
                clone.set(j, diff);
            }
            if (j == needs.size()) {
                min = Math.min(min, shopping(price, special, clone, i) + offer.get(j));
            }
        }
        return min;

=======

        return shopping(price, special, needs, 0);
    }
    private int shopping(List<Integer> price, List<List<Integer>> special, List<Integer> needs, int pos) {
        int noOffer = directPurchase(price, needs);
        int min = noOffer;
        for (int i = pos; i < special.size(); i++) {
            List<Integer> offer = special.get(i);
            List<Integer> clone = new ArrayList<>(needs);
            for (int j = 0; j < needs.size(); j++) {
                int diff = clone.get(j) - offer.get(j);
                if (diff < 0) {
                    clone = null;
                    break;
                }
                clone.set(j, diff);
            }
            if (clone != null) {
                min = Math.min(min, offer.get(needs.size()) + shopping(price, special, clone, i));
            }
        }
        return min;
    }
    private int directPurchase(List<Integer> price, List<Integer> needs) {
        int sum = 0;
        for (int i = 0; i < price.size(); i++) {
            sum += price.get(i) * needs.get(i);
        }
        return sum;
