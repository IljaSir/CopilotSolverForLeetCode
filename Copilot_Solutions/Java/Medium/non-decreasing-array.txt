Synthesizing 10/10 solutions

=======

        int count = 0;
        for (int i = 0; i < nums.length - 1; i++) {
            if (nums[i] > nums[i + 1]) {
                if (i == 0) {
                    nums[i] = nums[i + 1];
                } else {
                    if (nums[i - 1] <= nums[i + 1]) {
                        nums[i] = nums[i - 1];
                    } else {
                        nums[i + 1] = nums[i];
                    }
                }
                count++;
            }
        }
        return count <= 1;

=======

        int n = nums.length;
        int count = 0;
        for (int i = 1; i < n; i++) {
            if (nums[i] < nums[i - 1]) {
                count++;
                if (count > 1) {
                    return false;
                }
                if (i - 2 < 0 || nums[i - 2] <= nums[i]) {
                    nums[i - 1] = nums[i];
                } else {
                    nums[i] = nums[i - 1];
                }
            }
        }
        return true;

=======

        int count = 0;
        for(int i = 0; i < nums.length - 1; i++) {
            if(nums[i] > nums[i + 1]) {
                count++;
                if(count > 1) {
                    return false;
                }
                if(i + 2 < nums.length && nums[i] > nums[i + 2]) {
                    nums[i + 1] = nums[i];
                }
            }
        }
        return true;

=======

        if (nums.length == 1) {
            return true;
        }
        int count = 0;
        for (int i = 1; i < nums.length; i++) {
            if (nums[i] < nums[i - 1]) {
                if (i - 2 < 0 || nums[i - 2] <= nums[i]) {
                    nums[i - 1] = nums[i];
                } else {
                    nums[i] = nums[i - 1];
                }
                count++;
                if (count > 1) {
                    return false;
                }
            }
        }
        return true;

=======

        int count = 0;
        for(int i = 1; i < nums.length; i++) {
            if(nums[i] < nums[i - 1]) {
                count++;
                if(count > 1) {
                    return false;
                }
                if(i - 2 < 0 || nums[i] >= nums[i - 2]) {
                    nums[i - 1] = nums[i];
                } else {
                    nums[i] = nums[i - 1];
                }
            }
        }
        return true;

=======

        int count = 0;
        for(int i = 0; i < nums.length - 1; i++){
            if(nums[i] > nums[i+1]){
                count++;
                if(count > 1) return false;
                if(i > 0 && nums[i+1] < nums[i-1]){
                    nums[i+1] = nums[i];
                }
            }
        }
        return true;

=======

        int count = 0;
        for(int i = 0; i < nums.length - 1; i++) {
            if(nums[i] > nums[i + 1]) {
                if(count++ > 0) {
                    return false;
                }
                if(i > 0 && nums[i - 1] > nums[i + 1]) {
                    nums[i + 1] = nums[i];
                }
            }
        }
        return true;

=======

        int n = nums.length;
        int count = 0;
        for(int i=0; i<n-1; i++){
            if(nums[i] > nums[i+1]){
                count++;
                if(count > 1) return false;
                if(i > 0 && nums[i-1] > nums[i+1]) nums[i+1] = nums[i];
                else nums[i] = nums[i+1];
            }
        }
        return true;

=======

        int count = 0;
        for(int i=1; i<nums.length; i++) {
            if(nums[i-1] > nums[i]) {
                if(count == 1) {
                    return false;
                }
                if(i-2 >= 0 && nums[i-2] > nums[i]) {
                    nums[i] = nums[i-1];
                }
                count++;
            }
        }
        return true;

=======

        int count = 0;
        for(int i=0; i<nums.length-1; i++) {
            if(nums[i] > nums[i+1]) {
                if(i-1 >= 0 && nums[i+1] < nums[i-1]) {
                    nums[i+1] = nums[i];
                }
                count++;
            }
            if(count > 1) {
                break;
            }
        }
        return count <= 1;
