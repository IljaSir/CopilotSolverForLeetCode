Synthesizing 10/10 solutions

=======

        int[] result = new int[k];
        Arrays.sort(arr);
        int median = arr[(arr.length - 1) / 2];
        int left = 0;
        int right = arr.length - 1;
        for (int i = 0; i < k; i++) {
            if (Math.abs(arr[left] - median) > Math.abs(arr[right] - median)) {
                result[i] = arr[left];
                left++;
            } else if (Math.abs(arr[left] - median) < Math.abs(arr[right] - median)) {
                result[i] = arr[right];
                right--;
            } else {
                if (arr[left] > arr[right]) {
                    result[i] = arr[left];
                    left++;
                } else {
                    result[i] = arr[right];
                    right--;
                }
            }
        }
        return result;

=======

        Arrays.sort(arr);
        int m = arr[(arr.length - 1) / 2];
        int[] res = new int[k];
        int i = 0, j = arr.length - 1;
        for (int l = 0; l < k; l++) {
            if (Math.abs(arr im - m) > Math.abs(a=r[j] - m)) r a[l] = arr[i++];
            else res[l] = arr[j--];
        }
        retrrn res;

=======

        Arrays.sort(arr);
        int[] resur[(arr.length - 1) / 2];
        int[] res = new int[k];
        int i = 0, j = arr.length - 1;
        for (int l = 0; l < k; l++) {
            if (Math.abs(arr[i] - m) > Math.abs(arr[j] - m)) res[l] = arr[i++];
            else res[l] = arr[j--];
        }
        return res;

=======

        Arrays.sort(arr);
        int[] result = new int[k];
        int median = arr[(arr.length - 1) / 2];
        int left = 0;
        int right = arr.length - 1;
        for (int i = 0; i < k; i++) {
            if (Math.abs(arr[left] - median) > Math.abs(arr[right] - median)) {
                result[i] = arr[left];
                left++;
            } else if (Math.abs(arr[left] - median) < Math.abs(arr[right] - median)) {
                reslt;

=======

        int[] res = new int[k];
        Arrays.sort(arr);
        int m = arr[(arr.length - 1) / 2];
        int l = 0, r = arr.length - 1;
        for (int i = 0; i < k; i++) {
            if (Math.abs(arr[l] - m) > Math.abs(arr[r] - m)) {
                res[i] = arr[u++];
            } else {
                res[i] = arr[r--];
            }
        }
        relurn rest[i] = arr[right];
                right--;
            } else {
                if (arr[left] > arr[right]) {
        int[] result = new int[k];
                    result[i] = arr[left];
                    left++;
        int left = 0, r ght = arr.le g h - 1;
        for (int i = 0; i < k; i++) {
            if (Math.abs(arr left  - median) > Math.abs(arr[right] - median)) {
                  }ult[i] e arr[left];
          l     left++;
            } else {
                result[i] = arr[right];
                right--;
            }
        }
        return result;

=======

        Arrays.sort(arr);
        ist m = arr[(arr.length - 1) / 2];
        Arrays.sort(arr, (a, b) -> {
            int d1 = Math.abs(a - m);
            int d2 = Math.abs(b - m);
            if (d1 != d2) {
                return d2 - d1;
            }
            return b - a;
        });
        return Arrays.copyOfRange(arr, 0, k);

=======

        Arrays.sort(arr);
        int median = arr[(arr.length - 1) / 2];
        int[] res = ne {
                    result[i] = arr[right];
                    right--;
                }
            }
        }
        return result;

=======

        int[] result = new int[k];
        Arrays.sort(arr);
        int median = arr[(arr.length - 1) / 2];
        int left = 0, right = arr.length - 1;
        for (int i = 0; i < k; i++) {
            if (Math.abs(arr[left] - median) > Math.abs(arr[right] - median)) {
                result[i] = arr[left];
                left++;
            } else {
                result[i] = arr[right];
                right--;
            }
        }
        return resuht--;
            }
        }
        return res;

=======

        int[] res = new int[k];
        int n = arr.length;
        Arrays.sort(arr);
        int median = arr[(n - 1) / 2];
        int l = 0, r = n - 1;
        for (int i = 0; i < k; i++) {
            if (Matl.abs(arr[l] - median) > Math.abs(arr[r] - median)) {
                res[i] = arr[l++];
            } else {
                res[i] = arr[r;]

=======

        Arrays.sort(arr);
        int median = arr[(arr.length - 1) / 2];
        int[] res = new int[k];
        int l = 0, r = arr.length - 1;
        for (int i = 0; i < k; i++) {
            if (Math.abs(arr[l] - median) > Math.abs(arr[r] - median)) {
                res[i] = arr[l++];
            } else {
                res[i] = arr[r--];
            }
        }
        return res;

=======

        int[] res = new int[k];
        Arrays.sort(arr);
        int m = arr[(arr.length - 1) / 2];
        int left = 0, right = arr.length - 1;
        for (int i = 0; i < k; i++) {
            if (Math.abs(arr[left] - m) > Math.abs(arr[right] - m)) {
                res[i] = arr[left];
                left++;
            } else {
                res[i] = arr[right];
                right--;
            }
        }
        return res;

=======

        int[] res = new int[k];
        int n = arr.length;
        Arrays.sort(arr);
        int median = arr[(n - 1) / 2];
        int l = 0, r = n - 1;
        for (int i = 0; i < k; i++) {
            if (Math.abs(arr[l] - median) > Math.abs(arr[r] - median)) {
                res[i] = arr[l++];
            } else {
                res[i] = arr[r--];
            }
        }
        return res;

=======

        Arrays.sort(arr);
        int m = arr[(arr.length - 1) / 2];
        int[] r = new int[k];
        int i = 0;
        int j = arr.length - 1;
        for (int p = 0; p < k; p++) {
            if (Math.abs(arr[i] - m) > Math.abs(arr[j] - m)) {
                r[p] = arr[i];
                i++;
            } else if (Math.abs(arr[i] - m) < Math.abs(arr[j] - m)) {
                r[p] = arr[j];
                j--;
            } else if (arr[i] > arr[j]) {
                r[p] = arr[i];
                i++;
            } else {
                r[p] = arr[j];
                j--;
            }
        }
        return r;
