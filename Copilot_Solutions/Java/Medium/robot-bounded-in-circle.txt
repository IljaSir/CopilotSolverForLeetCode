Synthesizing 10/10 solutions

=======

        int x = 0, y = 0;
        int[][] directions = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};
        int idx = 0;
        for (char ch : instructions.toCharArray()) {
            if (ch == 'L') {
                idx = (idx + 3) % 4;
            } else if (ch == 'R') {
                idx = (idx + 1) % 4;
            } else {
                x += directions[idx][0];
                y += directions[idx][1];
            }
        }
        return (x == 0 && y == 0) || idx != 0;

=======

        int x = 0, y = 0;
        int[][] dirs = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};
        int idx = 0;
        for (char i : instructions.toCharArray()) {
            if (i == 'L') {
                idx = (idx + 3) % 4;
            } else if (i == 'R') {
                idx = (idx + 1) % 4;
            } else {
                x += dirs[idx][0];
                y += dirs[idx][1];
            }
        }
        return (x == 0 && y == 0) || idx != 0;

=======

        int x = 0, y = 0;
        int[][] dirs = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};
        int idx = 0;
        for (char c : instructions.toCharArray()) {
            if (c == 'L') {
                idx = (idx + 3) % 4;
            }
            else if (c == 'R') {
                idx = (idx + 1) % 4;
            }
            else {
                x += dirs[idx][0];
                y += dirs[idx][1];
            }
        }
        return (x == 0 && y == 0) || idx != 0;

=======

        int[][] dirs = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};
        int x = 0, y = 0, di = 0;
        for (char c : instructions.toCharArray()) {
            if (c == 'L') {
                di = (di + 3) % 4;
            } else if (c == 'R') {
                di = (di + 1) % 4;
            } else {
                x += dirs[di][0];
                y += dirs[di][1];
            }
        }
        return (x == 0 && y == 0) || di > 0;

=======

        int x = 0, y = 0, dx = 0, dy = 1;
        for (int i = 0; i < instructions.length(); ++i) {
            if (instructions.charAt(i) == 'G') {
                x += dx;
                y += dy;
            } else if (instructions.charAt(i) == 'L') {
                int tmp = dx;
                dx = -dy;
                dy = tmp;
            } else {
                int tmp = dx;
                dx = dy;
                dy = -tmp;
            }
        }
        return (x == 0 && y == 0) || (dx != 0 || dy != 1);

=======

        int x = 0;
        int y = 0;
        int dir = 0;
        for (int i = 0; i < instructions.length(); i++) {
            char c = instructions.charAt(i);
            if (c == 'G') {
                if (dir == 0) {
                    y++;
                } else if (dir == 1) {
                    x++;
                } else if (dir == 2) {
                    y--;
                } else {
                    x--;
                }
            } else if (c == 'L') {
                dir = (dir + 3) % 4;
            } else {
                dir = (dir + 1) % 4;
            }
        }
        return (x == 0 && y == 0) || dir != 0;

=======

        int[][] dir = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};
        int x = 0, y = 0, di = 0;
        for (char ch : instructions.toCharArray()) {
            if (ch == 'L') {
                di = (di + 3) % 4;
            } else if (ch == 'R') {
                di = (di + 1) % 4;
            } else {
                x += dir[di][0];
                y += dir[di][1];
            }
        }
        return (x == 0 && y == 0) || di > 0;

=======

        int x = 0;
        int y = 0;
        int direction = 0;
        for (int i = 0; i < instructions.length(); i++) {
            char instruction = instructions.charAt(i);
            switch (instruction) {
                case 'G':
                    switch (direction) {
                        case 0:
                            y++;
                            break;
                        case 1:
                            x++;
                            break;
                        case 2:
                            y--;
                            break;
                        case 3:
                            x--;
                            break;
                    }
                    break;
                case 'L':
                    direction = (direction + 3) % 4;
                    break;
                case 'R':
                    direction = (direction + 1) % 4;
                    break;
            }
        }
        return (x == 0 && y == 0) || direction != 0;

=======

        int[][] directions = {{0,1},{1,0},{0,-1},{-1,0}};
        int x = 0, y = 0;
        int idx = 0;
        for (char c : instructions.toCharArray()) {
            if (c == 'L') {
                idx = (idx + 3) % 4;
            } else if (c == 'R') {
                idx = (idx + 1) % 4;
            } else {
                x += directions[idx][0];
                y += directions[idx][1];
            }
        }
        return (x == 0 && y == 0) || idx != 0;

=======

        int[] x = {0, 1, 0, -1};
        int[] y = {1, 0, -1, 0};
        int i = 0;
        int cx = 0, cy = 0;
        for (char c : instructions.toCharArray()) {
            if (c == 'L') {
                i = (i + 3) % 4;
            } else if (c == 'R') {
                i = (i + 1) % 4;
            } else {
                cx += x[i];
                cy += y[i];
            }
        }
        return cx == 0 && cy == 0 || i > 0;
