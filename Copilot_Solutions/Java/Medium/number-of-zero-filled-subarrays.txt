Synthesizing 10/10 solutions

=======

        long result = 0;
        long count = 0;
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] == 0) {
                count++;
            } else {
                result += count * (count + 1) / 2;
                count = 0;
            }
        }
        result += count * (count + 1) / 2;
        return result;

=======

        long result = 0;
        int count = 0;
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] == 0) {
                count++;
            } else {
                result += (long) count * (count + 1) / 2;
                count = 0;
            }
        }
        result += (long) count * (count + 1) / 2;
        return result;

=======

        long ans = 0;
        int cnt = 0;
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] == 0) {
                cnt++;
            } else {
                ans += cnt * (cnt + 1L) / 2;
                cnt = 0;
            }
        }
        ans += cnt * (cnt + 1L) / 2;
        return ans;

=======

        long count = 0;
        long zeroCount = 0;
        for (int num : nums) {
            if (num == 0) {
                zeroCount++;
            } else {
                count += zeroCount * (zeroCount + 1) / 2;
                zeroCount = 0;
            }
        }
        count += zeroCount * (zeroCount + 1) / 2;
        return count;

=======

        long total = 0;
        long count = 0;
        for (int n : nums) {
            if (n == 0) {
                count++;
            } else {
                total += count * (count + 1) / 2;
                count = 0;
            }
        }
        total += count * (count + 1) / 2;
        return total;

=======

        long ans = 0;
        int n = nums.length;
        int[] dp = new int[n];
        for (int i = 0; i < n; i++) {
            if (nums[i] == 0) {
                if (i == 0) {
                    dp[i] = 1;
                } else {
                    dp[i] = dp[i - 1] + 1;
                }
                ans += dp[i];
            }
        }
        return ans;

=======

        long count = 0;
        int zeroCount = 0;
        for (int n : nums) {
            if (n == 0) {
                zeroCount++;
            } else {
                count += (long) zeroCount * (zeroCount + 1) / 2;
                zeroCount = 0;
            }
        }
        count += (long) zeroCount * (zeroCount + 1) / 2;
        return count;

=======

        int[] prefixSum = new int[nums.length+1];
        for (int i = 1; i <= nums.length; i++) {
            prefixSum[i] = prefixSum[i-1] + nums[i-1];
        }
        long ans = 0;
        int[] count = new int[nums.length+1];
        for (int i = 0; i <= nums.length; i++) {
            ans += count[prefixSum[i]];
            count[prefixSum[i]]++;
        }
        return ans;

=======

        long count = 0;
        int n = nums.length;
        long sum = 0;
        Map<Long, Integer> map = new HashMap<>();
        map.put(0l, 1);
        for (int i = 0; i < n; i++) {
            sum += nums[i];
            if (map.containsKey(sum)) {
                count += map.get(sum);
                map.put(sum, map.get(sum) + 1);
            } else {
                map.put(sum, 1);
            }
        }
        return count;

=======

        int n = nums.length;
        int[] count = new int[n + 1];
        int sum = 0, res = 0;
        for (int num : nums) {
            sum += num;
            int i = sum - n;
            if (i >= 0) {
                res += count[i];
            }
            count[sum]++;
        }
        return (long) res + (long) count[0] * (long) (n + 1);
