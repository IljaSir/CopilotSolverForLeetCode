Synthesizing 10/10 solutions

=======

        int max = Integer.MIN_VALUE;
        for (int i = 0; i < grid.length - 2; i++) {
            for (int j = 0; j < grid[i].length - 2; j++) {
                int sum = grid[i][j] + grid[i][j+1] + grid[i][j+2] + grid[i+1][j+1] + grid[i+2][j] + grid[i+2][j+1] + grid[i+2][j+2];
                if (sum > max) {
                    max = sum;
                }
            }
        }
        return max;

=======

        int max = Integer.MIN_VALUE;
        for (int i = 0; i < grid.length - 2; i++) {
            for (int j = 0; j < grid[i].length - 2; j++) {
                int sum = grid[i][j] + grid[i][j + 1] + grid[i][j + 2] + grid[i + 1][j + 1] + grid[i + 2][j] + grid[i + 2][j + 1] + grid[i + 2][j + 2];
                max = Math.max(max, sum);
            }
        }
        return max;

=======

        int max = Integer.MIN_VALUE;
        for (int i = 0; i < grid.length - 2; i++) {
            for (int j = 0; j < grid[0].length - 2; j++) {
                int sum = grid[i][j] + grid[i][j + 1] + grid[i][j + 2] + grid[i + 1][j + 1] + grid[i + 2][j] + grid[i + 2][j + 1] + grid[i + 2][j + 2];
                if (sum > max) {
                    max = sum;
                }
            }
        }
        return max;

=======

        int max = Integer.MIN_VALUE;
        for (int i = 0; i < grid.length - 2; i++) {
            for (int j = 0; j < grid[0].length - 2; j++) {
                int sum = grid[i][j] + grid[i][j + 1] + grid[i][j + 2] + grid[i + 1][j + 1] + grid[i + 2][j] + grid[i + 2][j + 1] + grid[i + 2][j + 2];
                max = Math.max(max, sum);
            }
        }
        return max;

=======

        int maxSum = Integer.MIN_VALUE;
        for (int i = 0; i < grid.length - 2; i++) {
            for (int j = 0; j < grid[0].length - 2; j++) {
                int sum = grid[i][j] + grid[i][j + 1] + grid[i][j + 2]
                        + grid[i + 1][j + 1]
                        + grid[i + 2][j] + grid[i + 2][j + 1] + grid[i + 2][j + 2];
                if (sum > maxSum) {
                    maxSum = sum;
                }
            }
        }
        return maxSum;

=======

        int maxSum = 0;
        for (int i = 0; i < grid.length - 2; i++) {
            for (int j = 0; j < grid[i].length - 2; j++) {
                int sum = grid[i][j] + grid[i][j + 1] + grid[i][j + 2] + grid[i + 1][j + 1] + grid[i + 2][j] + grid[i + 2][j + 1] + grid[i + 2][j + 2];
                if (sum > maxSum) {
                    maxSum = sum;
                }
            }
        }
        return maxSum;

=======

        int sum = Integer.MIN_VALUE;
        for (int i = 1; i < grid.length - 1; i++) {
            for (int j = 1; j < grid[i].length - 1; j++) {
                int curr = grid[i][j] + grid[i - 1][j] + grid[i + 1][j] + grid[i - 1][j - 1] + grid[i - 1][j + 1] + grid[i + 1][j - 1] + grid[i + 1][j + 1];
                sum = Math.max(curr, sum);
            }
        }
        return sum;

=======

        int m = grid.length;
        int n = grid[0].length;
        int maxSum = Integer.MIN_VALUE;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (i + 2 < m && j + 2 < n) {
                    int sum = grid[i][j] + grid[i][j + 1] + grid[i][j + 2] + grid[i + 1][j + 1] + grid[i + 2][j] + grid[i + 2][j + 1] + grid[i + 2][j + 2];
                    maxSum = Math.max(maxSum, sum);
                }
            }
        }
        return maxSum;

=======

        int m = grid.length;
        int n = grid[0].length;
        int max = Integer.MIN_VALUE;
        for(int i = 0; i < m - 2; i++){
            for(int j = 0; j < n - 2; j++){
                int sum = grid[i][j] + grid[i][j+1] + grid[i][j+2] + grid[i+1][j+1] + grid[i+2][j] + grid[i+2][j+1] + grid[i+2][j+2];
                if(sum > max) max = sum;
            }
        }
        return max;

=======

        int max = Integer.MIN_VALUE;
        for(int i = 0; i < grid.length-2; i++) {
            for(int j = 0; j < grid[i].length-2; j++) {
                int sum = 0;
                sum += grid[i][j] + grid[i][j+1] + grid[i][j+2];
                sum += grid[i+1][j+1];
                sum += grid[i+2][j] + grid[i+2][j+1] + grid[i+2][j+2];
                max = Math.max(max, sum);
            }
        }
        return max;
