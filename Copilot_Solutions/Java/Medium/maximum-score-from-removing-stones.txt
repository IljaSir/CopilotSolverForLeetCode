Synthesizing 10/10 solutions

=======

        int[] arr = {a, b, c};
        Arrays.sort(arr);
        return Math.min((arr[0] + arr[1] + arr[2]) / 2, arr[0] + arr[1]);

=======

        int[] arr = new int[]{a, b, c};
        Arrays.sort(arr);
        if (arr[2] >= arr[0] + arr[1] + 1) {
            return arr[0] + arr[1];
        }
        return (arr[0] + arr[1] + arr[2]) / 2;

=======

        int[] arr = {a, b, c};
        Arrays.sort(arr);
        int sum = arr[0] + arr[1] + arr[2];
        return Math.min(sum / 2, arr[0] + arr[1]);

=======

        int[] arr = new int[]{a, b, c};
        Arrays.sort(arr);
        int ans = 0;
        while (arr[0] > 0 && arr[1] > 0) {
            arr[0]--;
            arr[1]--;
            ans++;
        }
        if (arr[0] == 0) {
            ans += (arr[1] + arr[2]) / 2;
        }
        return ans;

=======

        int[] arr = new int[]{a, b, c};
        Arrays.sort(arr);
        int max = arr[2];
        int mid = arr[1];
        int min = arr[0];
        if (max >= mid + min) {
            return mid + min;
        } else {
            return (max + mid + min) / 2;
        }

=======

        int[] arr = new int[] {a, b, c};
        Arrays.sort(arr);
        int sum = arr[0] + arr[1] + arr[2];
        if (sum - arr[2] >= arr[2]) {
            return arr[2];
        } else {
            return (sum - arr[2]) + (arr[2] - (sum - arr[2])) / 2;
        }

=======

        int[] arr = new int[]{a, b, c};
        Arrays.sort(arr);
        int min = arr[0];
        int mid = arr[1];
        int max = arr[2];
        
        if (min + mid <= max) {
            return min + mid;
        }
        return (min + mid + max) / 2;

=======

        int[] arr = new int[]{a, b, c};
        Arrays.sort(arr);
        int max = arr[2];
        int mid = arr[1];
        int min = arr[0];
        int res = min;
        max -= min;
        if (max >= mid) {
            res += mid;
        } else {
            res += max;
            res += (mid - max) / 2;
        }
        return res;

=======

        int[] arr = new int[] {a, b, c};
        Arrays.sort(arr);
        int max = arr[2];
        int min = arr[0];
        int mid = arr[1];
        
        if (min + mid <= max) {
            return min + mid;
        } else {
            return (min + mid + max) / 2;
        }

=======

        int[] nums = {a, b, c};
        Arrays.sort(nums);
        int res = 0;
        while(nums[2] > nums[1] + nums[0]) {
            nums[2]--;
            nums[0]--;
            res++;
        }
        return res + nums[0] + nums[1];
