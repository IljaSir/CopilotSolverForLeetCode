Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int max = arr[0];
        int count = 0;
        for (int i = 1; i < arr.length; i++) {
            if (arr[i] > max) {
                max = arr[i];
                count = 1;
            } else {
                count++;
            }
            if (count == k) {
                break;
            }
        }
        return max;

=======

        int max = arr[0];
        int cnt = 0;
        for (int i = 1; i < arr.length; i++) {
            if (arr[i] > max) {
                max = arr[i];
                cnt = 0;
            }
            if (++cnt == k) {
                break;
            }
        }
        return max;

=======

        int max = arr[0];
        int count = 0;
        for(int i = 1; i < arr.length; i++) {
            if(arr[i] > max) {
                max = arr[i];
                count = 1;
            } else {
                count++;
            }
            if(count == k) {
                return max;
            }
        }
        return max;

=======

        int n = arr.length;
        int winner = arr[0];
        int count = 0;
        for (int i = 1; i < n; i++) {
            if (arr[i] > winner) {
                winner = arr[i];
                count = 0;
            }
            if (++count == k) {
                break;
            }
        }
        return winner;

=======

        int n = arr.length;
        int winner = arr[0];
        int count = 0;
        for (int i = 1; i < n; i++) {
            if (arr[i] > winner) {
                count = 1;
                winner = arr[i];
            } else {
                count++;
            }
            if (count == k) {
                break;
            }
        }
        return winner;

=======

        int max = 0;
        int count = 0;
        for(int i = 1; i < arr.length; i++){
            if(arr[i] > arr[max]){
                max = i;
                count = 1;
            }else{
                count++;
            }
            if(count == k){
                break;
            }
        }
        return arr[max];

=======

        int n = arr.length;
        int max = arr[0];
        int counter = 0;
        for (int i = 1; i < n; i++) {
            if (arr[i] > max) {
                max = arr[i];
                counter = 1;
            } else {
                counter++;
            }
            if (counter == k) {
                return max;
            }
        }
        return max;

=======

        int i = 0, j = 1;
        int count = 0;
        while (i < arr.length && j < arr.length) {
            if (arr[i] > arr[j]) {
                j++;
                count++;
            } else {
                i = j;
                j++;
                count = 1;
            }
            if (count == k) {
                return arr[i];
            }
        }
        return arr[i];

=======

        int i = 0, j = 1, win = 0;
        while (win < k) {
            if (arr[i] < arr[j]) {
                arr[i] = arr[j] - arr[i];
                arr[j] = arr[j] - arr[i];
                arr[i] = arr[j] + arr[i];
                i = j;
                win = 1;
            } else {
                win++;
            }
            j = (j + 1) % arr.length;
            if (i == 0 && j == 1) {
                return arr[i];
            }
        }
        return arr[i];
