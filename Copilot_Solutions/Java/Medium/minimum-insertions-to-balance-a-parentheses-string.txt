Synthesizing 10/10 solutions

=======

        int left = 0;
        int right = 0;
        int ans = 0;
        for (int i = 0; i < s.length(); i++) {
            if (s.charAt(i) == '(') {
                left++;
                if (right == 1) {
                    ans += 1;
                    right = 0;
                }
            } else {
                if (right == 1) {
                    right = 0;
                    ans += 1;
                } else {
                    right = 1;
                }
                if (left > 0) {
                    left--;
                } else {
                    ans += 1;
                }
            }
        }
        ans += left * 2 + right;
        return ans;

=======

        int left = 0;
        int right = 0;
        int ans = 0;
        for (int i = 0; i < s.length(); i++) {
            if (s.charAt(i) == '(') {
                left++;
                if (right % 2 == 1) {
                    ans++;
                    right--;
                }
            } else {
                right++;
                if (right == 2) {
                    left--;
                    right = 0;
                }
            }
        }
        ans += left * 2;
        ans += right;
        return ans;

=======

        int left = 0;
        int right = 0;
        int res = 0;
        for (int i = 0; i < s.length(); i++) {
            if (s.charAt(i) == '(') {
                left++;
                if (right % 2 == 1) {
                    res++;
                    right--;
                }
            } else {
                right++;
                if (right == 2) {
                    if (left > 0) {
                        left--;
                        right = 0;
                    } else {
                        res++;
                    }
                }
            }
        }
        return res + left * 2 + right;

=======

        int result = 0;
        int open = 0;
        for (int i = 0; i < s.length(); i++) {
            if (s.charAt(i) == '(') {
                open++;
            } else {
                if (i + 1 < s.length() && s.charAt(i + 1) == ')') {
                    i++;
                } else {
                    result++;
                }
                if (open > 0) {
                    open--;
                    result--;
                } else {
                    result++;
                }
            }
        }
        return result + open * 2;

=======

        int ans = 0, open = 0;
        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            if (c == '(') {
                open++;
            } else {
                if (i + 1 < s.length() && s.charAt(i + 1) == ')') {
                    i++;
                } else {
                    ans++;
                }
                open--;
                if (open < 0) {
                    ans++;
                    open = 0;
                }
            }
        }
        return ans + 2 * open;

=======

        int left = 0, right = 0;
        int ans = 0;
        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            if (c == '(') {
                left++;
                if (right % 2 == 1) {
                    ans++;
                    right--;
                }
            } else {
                right++;
                if (right == 2) {
                    if (left > 0) {
                        left--;
                        right = 0;
                    } else {
                        ans += 2;
                        right = 0;
                    }
                }
            }
        }
        ans += left * 2;
        ans += right;
        return ans;

=======

        int ans = 0;
        int open = 0;
        for (int i = 0; i < s.length(); i++) {
            if (s.charAt(i) == '(') {
                if (open % 2 != 0) {
                    ans++;
                    open--;
                }
                open += 2;
            } else {
                open--;
                if (open < 0) {
                    ans++;
                    open += 2;
                }
                if (i + 1 < s.length() && s.charAt(i + 1) == ')') {
                    i++;
                } else {
                    ans++;
                }
            }
        }
        ans += open;
        return ans;

=======

        int open = 0;
        int close = 0;
        int insertions = 0;
        for (int i = 0; i < s.length(); i++) {
            if (s.charAt(i) == '(') {
                open++;
            } else {
                close++;
            }
            if (close > open) {
                insertions++;
                open++;
            }
            if (close == open) {
                close = 0;
                open = 0;
            }
        }
        return insertions + 2 * open;

=======

        int n = s.length();
        int count = 0;
        int result = 0;
        for (int i = 0; i < n; i++) {
            if (s.charAt(i) == '(') {
                count++;
            } else {
                if (i + 1 < n && s.charAt(i + 1) == ')') {
                    i++;
                } else {
                    result++;
                }
                if (count > 0) {
                    count--;
                } else {
                    result++;
                }
            }
        }
        return result + count * 2;

=======

        int open = 0;
        int close = 0;
        int res = 0;
        for (char c : s.toCharArray()) {
            if (c == '(') {
                open++;
                if (close % 2 == 1) {
                    close--;
                    open++;
                    res++;
                }
            } else {
                close++;
                if (close == 2) {
                    close = 0;
                    open--;
                }
            }
            if (open < 0) {
                open += 2;
                res += 2;
            }
        }
        return res + open * 2;
