Synthesizing 10/10 solutions

=======

        List<String> res = new ArrayList<>();
        for (int i = 2; i < s.length() - 1; ++i) {
            List<String> A = f(s.substring(1, i)), B = f(s.substring(i, s.length() - 1));
            for (String a: A) for (String b: B)
                res.add("(" + a + ", " + b + ")");
        }
        return res;
    }

    public List<String> f(String s) {
        int n = s.length();
        List<String> res = new ArrayList<>();
        for (int i = 1; i <= n; ++i) {
            String left = s.substring(0, i), right = s.substring(i);
            if ((left.length() == 1 || left.charAt(0) != '0') && right.charAt(right.length() - 1) != '0')
                res.add(left + (i == n ? "" : ".") + right);
        }
        return res;

=======

        List<String> res = new ArrayList<String>();
        for (int i = 2; i < s.length() - 1; ++i) {
            List<String> A = f(s.substring(1, i)), B = f(s.substring(i, s.length() - 1));
            for (String a: A) for (String b: B)
                res.add("(" + a + ", " + b + ")");
        }
        return res;
    }
    public List<String> f(String s) {
        int n = s.length();
        List<String> res = new ArrayList<String>();
        for (int i = 1; i <= n; ++i) {
            String left = s.substring(0, i), right = s.substring(i);
            if ((!left.startsWith("0") || left.equals("0")) && !right.endsWith("0"))
                res.add(left + (i == n ? "" : ".") + right);
        }
        return res;

=======

        List<String> res = new ArrayList<>();
        int n = s.length();
        for (int i = 1; i < n - 2; ++i) {
            List<String> A = f(s.substring(1, i + 1)), B = f(s.substring(i + 1, n - 1));
            for (String a : A) for (String b : B) res.add("(" + a + ", " + b + ")");
        }
        return res;
    }

    public List<String> f(String s) {
        int n = s.length();
        List<String> res = new ArrayList<>();
        if (n == 0 || n > 1 && s.charAt(0) == '0' && s.charAt(n - 1) == '0') return res;
        if (n > 1 && s.charAt(0) == '0') {
            res.add("0." + s.substring(1));
            return res;
        }
        res.add(s);
        if (n == 1 || s.charAt(n - 1) == '0') return res;
        for (int i = 1; i < n; ++i) res.add(s.substring(0, i) + '.' + s.substring(i));
        return res;

=======

        int n = s.length();
        List<String> res = new ArrayList<>();
        for (int i = 2; i < n - 1; i++) {
            List<String> A = f(s.substring(1, i)), B = f(s.substring(i, n - 1));
            for (String a : A) for (String b : B) res.add("(" + a + ", " + b + ")");
        }
        return res;
    }
    List<String> f(String s) {
        int n = s.length();
        List<String> res = new ArrayList<>();
        for (int i = 1; i <= n; i++) {
            String L = s.substring(0, i), R = s.substring(i);
            if ((!L.startsWith("0") || L.equals("0")) && !R.endsWith("0")) res.add(L + (i == n ? "" : "." + R));
        }
        return res;

=======

        List<String> result = new ArrayList<>();
        for (int i = 2; i < s.length() - 1; i++) {
            List<String> left = getValid(s.substring(1, i));
            List<String> right = getValid(s.substring(i, s.length() - 1));
            for (String l : left) {
                for (String r : right) {
                    result.add("(" + l + ", " + r + ")");
                }
            }
        }
        return result;
    }
    
    private List<String> getValid(String s) {
        List<String> result = new ArrayList<>();
        if (s.length() == 1) {
            result.add(s);
            return result;
        }
        
        if (s.charAt(0) != '0') {
            result.add(s);
        }
        
        for (int i = 1; i < s.length(); i++) {
            String left = s.substring(0, i);
            String right = s.substring(i);
            if (left.charAt(0) == '0' && left.charAt(left.length() - 1) == '0') {
                continue;
            }
            if (right.charAt(right.length() - 1) == '0') {
                continue;
            }
            result.add(left + "." + right);
        }
        return result;

=======

        List<String> result = new ArrayList<>();
        for (int i = 2; i < s.length() - 1; i++) {
            List<String> left = generate(s, 1, i);
            List<String> right = generate(s, i, s.length() - 1);
            for (String l : left) {
                for (String r : right) {
                    result.add("(" + l + ", " + r + ")");
                }
            }
        }
        return result;
    }
    private List<String> generate(String s, int start, int end) {
        List<String> result = new ArrayList<>();
        for (int i = start; i < end; i++) {
            String left = s.substring(start, i);
            String right = s.substring(i, end);
            if ((left.length() > 1 && left.charAt(0) == '0' && left.charAt(left.length() - 1) == '0') ||
                (right.length() > 1 && right.charAt(0) == '0' && right.charAt(right.length() - 1) == '0')) {
                continue;
            }
            if (left.length() > 1 && left.charAt(0) == '0') {
                left = "0." + left.substring(1);
            }
            if (right.length() > 1 && right.charAt(right.length() - 1) == '0') {
                right = right.substring(0, right.length() - 1);
            }
            result.add(left + right);
        }
        if (s.charAt(end - 1) != '0') {
            result.add(s.substring(start, end));
        }
        return result;

=======

        List<String> result = new ArrayList<>();
        int n = s.length();
        for (int i = 2; i < n - 1; i++) {
            List<String> left = helper(s.substring(1, i));
            List<String> right = helper(s.substring(i, n - 1));
            for (String l : left) {
                for (String r : right) {
                    result.add("(" + l + ", " + r + ")");
                }
            }
        }
        return result;
    }
    
    private List<String> helper(String s) {
        List<String> result = new ArrayList<>();
        if (s.length() == 1) {
            result.add(s);
            return result;
        }
        if (s.charAt(0) != '0') {
            result.add(s);
        }
        for (int i = 1; i < s.length(); i++) {
            if (s.charAt(0) == '0' && s.charAt(i) != '0') {
                break;
            }
            String left = s.substring(0, i);
            String right = s.substring(i);
            if (right.charAt(right.length() - 1) != '0') {
                result.add(left + "." + right);
            }
        }
        return result;

=======

        List<String> res = new ArrayList<>();
        s = s.substring(1, s.length() - 1);
        for (int i = 1; i < s.length(); i++) {
            List<String> left = generateValid(s.substring(0, i));
            List<String> right = generateValid(s.substring(i));
            for (String l : left) {
                for (String r : right) {
                    res.add("(" + l + ", " + r + ")");
                }
            }
        }
        return res;
    }

    private List<String> generateValid(String s) {
        List<String> res = new ArrayList<>();
        int n = s.length();
        if (n == 0 || n > 1 && s.charAt(0) == '0' && s.charAt(n - 1) == '0') {
            return res;
        }
        if (n > 1 && s.charAt(0) == '0') {
            res.add("0." + s.substring(1));
            return res;
        }
        if (s.charAt(n - 1) == '0') {
            res.add(s);
            return res;
        }
        res.add(s);
        for (int i = 1; i < n; i++) {
            res.add(s.substring(0, i) + "." + s.substring(i));
        }
        return res;

=======

        List<String> res = new ArrayList<>();
        for (int i = 2; i < s.length() - 1; i++) {
            List<String> left = getValidCoordinate(s.substring(1, i));
            List<String> right = getValidCoordinate(s.substring(i, s.length() - 1));
            for (String l : left) {
                for (String r : right) {
                    res.add("(" + l + ", " + r + ")");
                }
            }
        }
        return res;
    }
    private List<String> getValidCoordinate(String s) {
        List<String> res = new ArrayList<>();
        for (int i = 0; i < s.length(); i++) {
            String left = s.substring(0, i);
            String right = s.substring(i);
            if ((left.length() > 1 && left.charAt(0) == '0' && left.charAt(left.length() - 1) == '0') || (right.length() > 0 && right.charAt(right.length() - 1) == '0')) {
                continue;
            }
            res.add(left + (i < s.length() ? "." : "") + right);
        }
        return res;

=======

        List<String> result = new ArrayList<String>();
        int n = s.length();
        for (int i = 2; i < n - 1; i++) {
            List<String> left = getValidNums(s.substring(1, i));
            List<String> right = getValidNums(s.substring(i, n - 1));
            for (String l : left) {
                for (String r : right) {
                    result.add("(" + l + ", " + r + ")");
                }
            }
        }
        return result;
    }

    private List<String> getValidNums(String s) {
        List<String> result = new ArrayList<String>();
        int n = s.length();
        if (n == 1) {
            result.add(s);
            return result;
        }
        if (s.charAt(0) == '0' && s.charAt(n - 1) == '0') {
            return result;
        }
        if (s.charAt(0) == '0') {
            result.add("0." + s.substring(1));
            return result;
        }
        if (s.charAt(n - 1) == '0') {
            result.add(s);
            return result;
        }
        result.add(s);
        for (int i = 1; i < n; i++) {
            result.add(s.substring(0, i) + "." + s.substring(i));
        }
        return result;
