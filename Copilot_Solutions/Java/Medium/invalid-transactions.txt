Synthesizing 10/10 solutions

=======

        List<String> result = new ArrayList<>();
        for (int i = 0; i < transactions.length; i++) {
            String[] transaction = transactions[i].split(",");
            if (Integer.parseInt(transaction[2]) > 1000) {
                result.add(transactions[i]);
                continue;
            }
            for (int j = 0; j < transactions.length; j++) {
                if (j != i) {
                    String[] anotherTransaction = transactions[j].split(",");
                    if (transaction[0].equals(anotherTransaction[0]) && Math.abs(Integer.parseInt(transaction[1]) - Integer.parseInt(anotherTransaction[1])) <= 60 && !transaction[3].equals(anotherTransaction[3])) {
                        result.add(transactions[i]);
                        break;
                    }
                }
            }
        }
        return result;

=======

        List<String> result = new ArrayList<>();
        for (int i = 0; i < transactions.length; i++) {
            String[] t1 = transactions[i].split(",");
            for (int j = i + 1; j < transactions.length; j++) {
                String[] t2 = transactions[j].split(",");
                if (t1[0].equals(t2[0]) && !t1[3].equals(t2[3]) && Math.abs(Integer.parseInt(t1[1]) - Integer.parseInt(t2[1])) <= 60) {
                    result.add(transactions[i]);
                    result.add(transactions[j]);
                }
            }
            if (Integer.parseInt(t1[2]) > 1000) {
                result.add(transactions[i]);
            }
        }
        return result;

=======

        List<String> list = new ArrayList<>();
        for (int i = 0; i < transactions.length; i++) {
            String[] t1 = transactions[i].split(",");
            if (Integer.parseInt(t1[2]) > 1000) {
                list.add(transactions[i]);
                continue;
            }
            for (int j = 0; j < transactions.length; j++) {
                if (i == j) continue;
                String[] t2 = transactions[j].split(",");
                if (t1[0].equals(t2[0]) && Math.abs(Integer.parseInt(t1[1]) - Integer.parseInt(t2[1])) <= 60 && !t1[3].equals(t2[3])) {
                    list.add(transactions[i]);
                    break;
                }
            }
        }
        return list;

=======

        List<String> result = new ArrayList<String>();
        for (int i = 0; i < transactions.length; i++) {
            String[] t = transactions[i].split(",");
            if (Integer.parseInt(t[2]) > 1000) {
                result.add(transactions[i]);
                continue;
            }
            for (int j = 0; j < transactions.length; j++) {
                if (i == j) {
                    continue;
                }
                String[] t2 = transactions[j].split(",");
                if (t[0].equals(t2[0]) && !t[3].equals(t2[3]) && Math.abs(Integer.parseInt(t[1]) - Integer.parseInt(t2[1])) <= 60) {
                    result.add(transactions[i]);
                    break;
                }
            }
        }
        return result;

=======

        List<String> res = new ArrayList<>();
        Map<String, List<int[]>> map = new HashMap<>();
        for (String transaction : transactions) {
            String[] strs = transaction.split(",");
            String name = strs[0];
            int time = Integer.parseInt(strs[1]);
            int amount = Integer.parseInt(strs[2]);
            String city = strs[3];
            map.putIfAbsent(name, new ArrayList<>());
            map.get(name).add(new int[]{time, amount, city});
        }
        for (String name : map.keySet()) {
            List<int[]> list = map.get(name);
            Collections.sort(list, (a, b) -> a[0] - b[0]);
            int n = list.size();
            int[] prev = list.get(0);
            boolean invalid = false;
            for (int i = 1; i < n; i++) {
                int[] cur = list.get(i);
                if (prev[2] != cur[2] && cur[0] - prev[0] <= 60) {
                    invalid = true;
                    break;
                }
                prev = cur;
            }
            if (invalid) {
                for (int[] arr : list) {
                    res.add(name + "," + arr[0] + "," + arr[1] + "," + arr[2]);
                }
            } else {
                for (int[] arr : list) {
                    if (arr[1] > 1000) {
                        res.add(name + "," + arr[0] + "," + arr[1] + "," + arr[2]);
                    }
                }
            }
        }
        return res;

=======

        List<String> res = new ArrayList<>();
        Map<String, List<int[]>> map = new HashMap<>();
        for (String s : transactions) {
            String[] arr = s.split(",");
            String name = arr[0];
            int time = Integer.parseInt(arr[1]);
            int amount = Integer.parseInt(arr[2]);
            String city = arr[3];
            if (amount > 1000) {
                res.add(s);
            }
            if (!map.containsKey(name)) {
                map.put(name, new ArrayList<>());
            }
            map.get(name).add(new int[]{time, amount, city});
        }
        for (String name : map.keySet()) {
            List<int[]> list = map.get(name);
            Collections.sort(list, (a,b) -> (a[0] - b[0]));
            for (int i = 0; i < list.size(); i++) {
                int[] a = list.get(i);
                if (a[1] > 1000) {
                    res.add(name + "," + a[0] + "," + a[1] + "," + a[2]);
                }
                for (int j = i + 1; j < list.size(); j++) {
                    int[] b = list.get(j);
                    if (b[0] - a[0] <= 60 && !a[2].equals(b[2])) {
                        res.add(name + "," + a[0] + "," + a[1] + "," + a[2]);
                        res.add(name + "," + b[0] + "," + b[1] + "," + b[2]);
                    }
                }
            }
        }
        return res;

=======

        List<String> result = new ArrayList<>();
        for(int i=0;i<transactions.length;i++){
            String[] t1 = transactions[i].split(",");
            if(Integer.parseInt(t1[2])>1000){
                result.add(transactions[i]);
                continue;
            }
            for(int j=i+1;j<transactions.length;j++){
                String[] t2 = transactions[j].split(",");
                if(t1[0].equals(t2[0]) && !t1[3].equals(t2[3]) && Math.abs(Integer.parseInt(t1[1])-Integer.parseInt(t2[1]))<=60){
                    result.add(transactions[i]);
                    result.add(transactions[j]);
                }
            }
        }
        return result;

=======

        List<String> invalidTransactions = new ArrayList<>();
        Map<String, List<Transaction>> map = new HashMap<>();
        for (String transaction : transactions) {
            Transaction t = new Transaction(transaction);
            if (t.amount > 1000) {
                invalidTransactions.add(transaction);
            }
            map.putIfAbsent(t.name, new ArrayList<>());
            map.get(t.name).add(t);
        }
        for (List<Transaction> list : map.values()) {
            Collections.sort(list, (a, b) -> a.time - b.time);
            for (int i = 0; i < list.size(); i++) {
                Transaction t = list.get(i);
                for (int j = i + 1; j < list.size(); j++) {
                    Transaction t2 = list.get(j);
                    if (t2.time - t.time > 60) {
                        break;
                    }
                    if (!t.city.equals(t2.city)) {
                        invalidTransactions.add(t.toString());
                        invalidTransactions.add(t2.toString());
                    }
                }
            }
        }
        return invalidTransactions;
    }
}

=======

        List<String> invalid = new ArrayList();
        for(int i = 0; i < transactions.length; i++){
            String[] t1 = transactions[i].split(",");
            int time1 = Integer.parseInt(t1[1]);
            int amount1 = Integer.parseInt(t1[2]);
            String city1 = t1[3];
            if(amount1 > 1000){
                invalid.add(transactions[i]);
            }
            for(int j = i+1; j < transactions.length; j++){
                String[] t2 = transactions[j].split(",");
                int time2 = Integer.parseInt(t2[1]);
                int amount2 = Integer.parseInt(t2[2]);
                String city2 = t2[3];
                if(t1[0].equals(t2[0]) && (Math.abs(time1 - time2) <= 60) && !city1.equals(city2)){
                    invalid.add(transactions[i]);
                    invalid.add(transactions[j]);
                }
            }
        }
        return invalid;

=======

        List<String> result = new ArrayList<>();
        Map<String, List<String>> map = new HashMap<>();
        
        for(String transaction : transactions){
            String[] split = transaction.split(",");
            String name = split[0];
            String time = split[1];
            String amount = split[2];
            String city = split[3];
            
            List<String> list = map.getOrDefault(name, new ArrayList<>());
            list.add(transaction);
            map.put(name, list);
        }
        
        for(String transaction : transactions){
            String[] split = transaction.split(",");
            String name = split[0];
            String time = split[1];
            String amount = split[2];
            String city = split[3];
            
            if(Integer.parseInt(amount) > 1000){
                result.add(transaction);
            }else{
                List<String> list = map.get(name);
                for(String s : list){
                    String[] ssplit = s.split(",");
                    String stime = ssplit[1];
                    String scity = ssplit[3];
                    
                    if(!city.equals(scity) && Math.abs(Integer.parseInt(time) - Integer.parseInt(stime)) <= 60){
                        result.add(transaction);
                        break;
                    }
                }
            }
        }
        
        return result;
