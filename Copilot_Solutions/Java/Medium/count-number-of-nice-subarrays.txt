Synthesizing 10/10 solutions

=======

        int n = nums.length;
        int[] p = new int[n + 1];
        for (int i = 0; i < n; ++i) {
            p[i + 1] = p[i] + (nums[i] % 2);
        }
        int[] count = new int[n + 1];
        for (int x: p) {
            count[x]++;
        }
        int ans = 0;
        for (int x: p) {
            if (x >= k) {
                ans += count[x - k];
            }
        }
        return ans;

=======

        int n = nums.length;
        int[] odd = new int[n + 2];
        int cnt = 0;
        for (int i = 0; i < n; i++) {
            if (nums[i] % 2 == 1) {
                odd[++cnt] = i;
            }
        }
        odd[0] = -1;
        odd[++cnt] = n;
        int ans = 0;
        for (int i = 1; i + k <= cnt; i++) {
            ans += (odd[i] - odd[i - 1]) * (odd[i + k] - odd[i + k - 1]);
        }
        return ans;

=======

        int n = nums.length;
        int[] odd = new int[n + 2];
        int t = 0;
        for (int i = 0; i < n; i++) {
            if (nums[i] % 2 == 1) {
                odd[++t] = i;
            }
        }
        odd[0] = -1;
        odd[t + 1] = n;
        int ans = 0;
        for (int i = 1; i + k <= t; i++) {
            ans += (odd[i] - odd[i - 1]) * (odd[i + k] - odd[i + k - 1]);
        }
        return ans;

=======

        int[] count = new int[nums.length + 1];
        count[0] = 1;
        int odd = 0;
        int res = 0;
        for (int i = 0; i < nums.length; i++) {
            odd += nums[i] % 2;
            if (odd >= k) {
                res += count[odd - k];
            }
            count[odd]++;
        }
        return res;

=======

        int n = nums.length;
        int[] odd = new int[n + 2];
        int cnt = 0;
        for (int i = 0; i < n; i++) {
            if ((nums[i] & 1) != 0) {
                odd[++cnt] = i;
            }
        }
        odd[0] = -1;
        odd[++cnt] = n;
        int ans = 0;
        for (int i = 1; i + k <= cnt; i++) {
            ans += (odd[i] - odd[i - 1]) * (odd[i + k] - odd[i + k - 1]);
        }
        return ans;

=======

        int n = nums.length;
        int[] odd = new int[n + 2];
        int m = 0;
        for (int i = 0; i < n; i++) {
            if (nums[i] % 2 == 1) {
                odd[++m] = i;
            }
        }
        odd[0] = -1;
        odd[m + 1] = n;
        int res = 0;
        for (int i = 1; i + k <= m + 1; i++) {
            res += (odd[i] - odd[i - 1]) * (odd[i + k] - odd[i + k - 1]);
        }
        return res;

=======

        int n = nums.length;
        int[] odd = new int[n+2];
        int t = 0;
        for (int i = 0; i < n; i++) {
            if (nums[i] % 2 == 1) {
                odd[++t] = i;
            }
        }
        odd[0] = -1;
        odd[++t] = n;
        int ans = 0;
        for (int i = 1; i + k <= t; i++) {
            ans += (odd[i] - odd[i-1]) * (odd[i+k] - odd[i+k-1]);
        }
        return ans;

=======

        int[] odd = new int[nums.length + 2];
        int t = 0;
        odd[t++] = -1;
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] % 2 == 1) {
                odd[t++] = i;
            }
        }
        odd[t++] = nums.length;
        int res = 0;
        for (int i = 1; i + k < t; i++) {
            res += (odd[i] - odd[i - 1]) * (odd[i + k] - odd[i + k - 1]);
        }
        return res;

=======

        int n = nums.length;
        int[] oddIndex = new int[n + 2];
        int odd = 0;
        for (int i = 0; i < n; i++) {
            if (nums[i] % 2 == 1) {
                oddIndex[++odd] = i;
            }
        }
        oddIndex[0] = -1;
        oddIndex[odd + 1] = n;
        int res = 0;
        for (int i = 1; i + k <= odd + 1; i++) {
            res += (oddIndex[i] - oddIndex[i - 1]) * (oddIndex[i + k] - oddIndex[i + k - 1]);
        }
        return res;

=======

        int left = 0, right = 0, oddCount = 0, result = 0;
        while (right < nums.length) {
            if (nums[right] % 2 != 0) {
                oddCount++;
            }
            right++;
            if (oddCount == k) {
                int temp = right;
                while (right < nums.length && nums[right] % 2 == 0) {
                    right++;
                }
                int rightEvenCount = right - temp;
                int leftEvenCount = 0;
                while (nums[left] % 2 == 0) {
                    left++;
                    leftEvenCount++;
                }
                result += (leftEvenCount + 1) * (rightEvenCount + 1);
                left++;
                oddCount--;
            }
        }
        return result;
