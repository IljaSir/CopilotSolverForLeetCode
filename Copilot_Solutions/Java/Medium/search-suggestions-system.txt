Synthesizing 10/10 solutions

=======

        TrieNode root = new TrieNode();
        for (String product: products) {
            TrieNode node = root;
            for (char c: product.toCharArray()) {
                if (node.children[c - 'a'] == null) {
                    node.children[c - 'a'] = new TrieNode();
                }
                node = node.children[c - 'a'];
                node.products.add(product);
            }
        }
        List<List<String>> result = new ArrayList<>();
        TrieNode node = root;
        for (char c: searchWord.toCharArray()) {
            if (node == null) {
                result.add(new ArrayList<>());
            } else {
                node = node.children[c - 'a'];
                if (node == null) {
                    result.add(new ArrayList<>());
                } else {
                    Collections.sort(node.products);
                    result.add(node.products.subList(0, Math.min(3, node.products.size())));
                }
            }
        }
        return result;
    }
}

=======

        List<List<String>> result = new ArrayList<>();
        Arrays.sort(products);
        for (int i = 1; i <= searchWord.length(); i++) {
            String sub = searchWord.substring(0, i);
            List<String> list = new ArrayList<>();
            for (String product : products) {
                if (product.length() < i) {
                    continue;
                }
                if (product.substring(0, i).equals(sub)) {
                    list.add(product);
                }
                if (list.size() == 3) {
                    break;
                }
            }
            result.add(list);
        }
        return result;

=======

        List<List<String>> res = new ArrayList<>();
        Arrays.sort(products);
        for (int i = 0; i < searchWord.length(); i++) {
            String sub = searchWord.substring(0, i + 1);
            List<String> list = new ArrayList<>();
            for (String product : products) {
                if (product.startsWith(sub)) {
                    list.add(product);
                }
                if (list.size() == 3) {
                    break;
                }
            }
            res.add(list);
        }
        return res;

=======

        List<List<String>> ans = new ArrayList<>();
        Arrays.sort(products);
        for (int i = 1; i <= searchWord.length(); i++) {
            String s = searchWord.substring(0, i);
            List<String> list = new ArrayList<>();
            for (String product : products) {
                if (product.startsWith(s)) {
                    list.add(product);
                    if (list.size() == 3) {
                        break;
                    }
                }
            }
            ans.add(list);
        }
        return ans;

=======

        List<List<String>> result = new ArrayList<>();
        Arrays.sort(products);
        for (int i = 1; i <= searchWord.length(); i++) {
            List<String> list = new ArrayList<>();
            for (String product : products) {
                if (product.length() >= i && product.substring(0, i).equals(searchWord.substring(0, i))) {
                    list.add(product);
                }
            }
            if (list.size() > 3) {
                list = list.subList(0, 3);
            }
            result.add(list);
        }
        return result;

=======

        Arrays.sort(products);
        List<List<String>> result = new ArrayList<>();
        for (int i = 1; i <= searchWord.length(); i++) {
            List<String> list = new ArrayList<>();
            String prefix = searchWord.substring(0, i);
            for (String product : products) {
                if (product.startsWith(prefix)) {
                    list.add(product);
                    if (list.size() == 3) break;
                }
            }
            result.add(list);
        }
        return result;

=======

        List<List<String>> ans = new ArrayList<>();
        for (int i = 0; i < searchWord.length(); i++) {
            String prefix = searchWord.substring(0, i + 1);
            List<String> list = new ArrayList<>();
            for (String product : products) {
                if (product.startsWith(prefix)) {
                    list.add(product);
                }
            }
            Collections.sort(list);
            if (list.size() > 3) {
                list = list.subList(0, 3);
            }
            ans.add(list);
        }
        return ans;

=======

        List<List<String>> result = new ArrayList<>();
        Arrays.sort(products);
        for (int i = 1; i <= searchWord.length(); i++) {
            List<String> list = new ArrayList<>();
            String str = searchWord.substring(0, i);
            for (String s : products) {
                if (s.startsWith(str)) {
                    list.add(s);
                    if (list.size() == 3) {
                        break;
                    }
                }
            }
            result.add(list);
        }
        return result;

=======

        Arrays.sort(products);
        List<List<String>> result = new ArrayList<>();
        for (int i = 1; i <= searchWord.length(); i++) {
            List<String> list = new ArrayList<>();
            String prefix = searchWord.substring(0, i);
            for (String product : products) {
                if (product.startsWith(prefix)) {
                    list.add(product);
                    if (list.size() == 3) break;
                }
            }
            result.add(list);
        }
        return result;

=======

        List<List<String>> result = new ArrayList<>();
        Arrays.sort(products);
        for (int i = 1; i <= searchWord.length(); i++) {
            List<String> list = new ArrayList<>();
            String str = searchWord.substring(0, i);
            for (String s : products) {
                if (s.startsWith(str)) {
                    list.add(s);
                    if (list.size() == 3) {
                        break;
                    }
                }
            }
            result.add(list);
        }
        return result;

=======

        List<List<String>> result = new ArrayList<>();
        Arrays.sort(products);
        int size = products.length;
        for (int i = 1; i <= searchWord.length(); i++) {
            List<String> list = new ArrayList<>();
            String sub = searchWord.substring(0, i);
            for (int j = 0; j < size; j++) {
                if (products[j].startsWith(sub)) {
                    list.add(products[j]);
                    if (list.size() == 3) {
                        break;
                    }
                }
            }
            result.add(list);
        }
        return result;

=======

        //sort products
        Arrays.sort(products);
        
        //create a list of list of string
        List<List<String>> result = new ArrayList<>();
        
        //create a stringbuilder
        StringBuilder sb = new StringBuilder();
        
        //loop through the search word
        for (char c : searchWord.toCharArray()) {
            //append the character to the stringbuilder
            sb.append(c);
            
            //create a list of string
            List<String> temp = new ArrayList<>();
            
            //loop through the products
            for (String product : products) {
                //if the product starts with the stringbuilder
                if (product.startsWith(sb.toString())) {
                    //add the product to the list
                    temp.add(product);
                }
                
                //if the list has 3 elements
                if (temp.size() == 3) {
                    //break out of the loop
                    break;
                }
            }
            
            //add the list to the result
            result.add(temp);
        }
        
        //return the result
        return result;

=======

        List<List<String>> result = new ArrayList<>();
        Arrays.sort(products);
        int size = products.length;
        for (int i = 1; i <= searchWord.length(); i++) {
            List<String> list = new ArrayList<>();
            String sub = searchWord.substring(0, i);
            for (int j = 0; j < size; j++) {
                if (products[j].startsWith(sub)) {
                    list.add(products[j]);
                    if (list.size() == 3) {
                        break;
                    }
                }
            }
            result.add(list);
        }
        return result;

=======

        //sort products
        Arrays.sort(products);
        
        //create a list of list of string
        List<List<String>> result = new ArrayList<>();
        
        //create a stringbuilder
        StringBuilder sb = new StringBuilder();
        
        //loop through the search word
        for (char c : searchWord.toCharArray()) {
            //append the character to the stringbuilder
            sb.append(c);
            
            //create a list of string
            List<String> temp = new ArrayList<>();
            
            //loop through the products
            for (String product : products) {
                //if the product starts with the stringbuilder
                if (product.startsWith(sb.toString())) {
                    //add the product to the list
                    temp.add(product);
                }
                
                //if the list has 3 elements
                if (temp.size() == 3) {
                    //break out of the loop
                    break;
                }
            }
            
            //add the list to the result
            result.add(temp);
        }
        
        //return the result
        return result;
