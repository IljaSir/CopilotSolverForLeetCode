Synthesizing 10/10 solutions

=======

        int[] parent = new int[edges.length + 1];
        for (int i = 0; i < parent.length; i++) {
            parent[i] = i;
        }
        for (int[] edge : edges) {
            int x = find(parent, edge[0]);
            int y = find(parent, edge[1]);
            if (x != y) {
                parent[y] = x;
            } else {
                return edge;
            }
        }
        return new int[0];
    }

    private int find(int[] parent, int x) {
        while (x != parent[x]) {
            x = parent[x];
        }
        return x;

=======

        int[] parent = new int[edges.length + 1];
        for (int i = 0; i < parent.length; i++) {
            parent[i] = i;
        }
        for (int[] edge : edges) {
            int p1 = find(edge[0], parent);
            int p2 = find(edge[1], parent);
            if (p1 == p2) {
                return edge;
            } else {
                union(p1, p2, parent);
            }
        }
        return null;
    }

    private int find(int i, int[] parent) {
        if (parent[i] == i) {
            return i;
        }
        return find(parent[i], parent);

=======

        int[] parent = new int[edges.length + 1];
        for (int i = 0; i < parent.length; i++) {
            parent[i] = i;
        }
        for (int[] edge : edges) {
            int p1 = findParent(parent, edge[0]);
            int p2 = findParent(parent, edge[1]);
            if (p1 == p2) {
                return edge;
            } else {
                parent[p1] = p2;
            }
        }
        return new int[0];
    }
    
    private int findParent(int[] parent, int node) {
        if (parent[node] != node) {
            parent[node] = findParent(parent, parent[node]);
        }
        return parent[node];

=======

        int[] parent = new int[edges.length + 1];
        for (int i = 0; i < parent.length; i++) {
            parent[i] = i;
        }
        for (int[] edge : edges) {
            int p1 = find(parent, edge[0]);
            int p2 = find(parent, edge[1]);
            if (p1 == p2) {
                return edge;
            }
            parent[p1] = p2;
        }
        return new int[2];
    }

    private int find(int[] parent, int x) {
        while (x != parent[x]) {
            x = parent[x];
        }
        return x;

=======

        int[] parents = new int[edges.length + 1];
        for (int i = 0; i < parents.length; i++) {
            parents[i] = i;
        }
        for (int[] edge : edges) {
            int x = find(parents, edge[0]);
            int y = find(parents, edge[1]);
            if (x == y) {
                return edge;
            }
            parents[x] = y;
        }
        return new int[]{-1, -1};
    }
    private int find(int[] parents, int i) {
        if (parents[i] != i) {
            parents[i] = find(parents, parents[i]);
        }
        return parents[i];

=======

        int[] parents = new int[edges.length + 1];
        for (int i = 0; i < parents.length; i++) {
            parents[i] = i;
        }
        for (int[] edge : edges) {
            if (find(parents, edge[0]) == find(parents, edge[1])) {
                return edge;
            }
            union(parents, edge[0], edge[1]);
        }
        return new int[2];
    }
    
    private void union(int[] parents, int i, int j) {
        int x = find(parents, i);
        int y = find(parents, j);
        parents[x] = y;
    }
    
    private int find(int[] parents, int i) {
        while (i != parents[i]) {
            parents[i] = parents[parents[i]];
            i = parents[i];
        }
        return i;

=======

        int[] parent = new int[edges.length + 1];
        for (int i = 1; i < parent.length; i++) {
            parent[i] = i;
        }
        for (int[] edge : edges) {
            int x = edge[0];
            int y = edge[1];
            if (find(parent, x) == find(parent, y)) {
                return edge;
            } else {
                union(parent, x, y);
            }
        }
        return new int[0];
    }
    
    private int find(int[] parent, int i) {
        if (parent[i] == i) {
            return i;
        }
        return find(parent, parent[i]);
    }
    
    private void union(int[] parent, int x, int y) {
        int xRoot = find(parent, x);
        int yRoot = find(parent, y);
        if (xRoot != yRoot) {
            parent[xRoot] = yRoot;
        }

=======

        int[] parent = new int[edges.length + 1];
        for (int i = 1; i < parent.length; i++) {
            parent[i] = i;
        }
        for (int[] edge : edges) {
            int root1 = find(edge[0], parent);
            int root2 = find(edge[1], parent);
            if (root1 == root2) {
                return edge;
            }
            parent[root1] = root2;
        }
        return new int[] {};
    }

    private int find(int node, int[] parent) {
        while (parent[node] != node) {
            parent[node] = parent[parent[node]];
            node = parent[node];
        }
        return node;

=======

        int n = edges.length;
        int[] parent = new int[n + 1];
        for (int i = 1; i <= n; i++) {
            parent[i] = i;
        }
        for (int[] edge : edges) {
            int fa = find(parent, edge[0]);
            int fb = find(parent, edge[1]);
            if (fa == fb) {
                return edge;
            }
            parent[fa] = fb;
        }
        return new int[0];
    }

    private int find(int[] parent, int x) {
        if (parent[x] != x) {
            parent[x] = find(parent, parent[x]);
        }
        return parent[x];

=======

        int n = edges.length;
        int[] parent = new int[n + 1];
        for (int i = 1; i <= n; i++) {
            parent[i] = i;
        }
        for (int[] edge : edges) {
            int x = edge[0], y = edge[1];
            if (find(parent, x) != find(parent, y)) {
                union(parent, x, y);
            } else {
                return edge;
            }
        }
        return new int[0];
    }

    public int find(int[] parent, int x) {
        if (parent[x] != x) {
            parent[x] = find(parent, parent[x]);
        }
        return parent[x];
