Synthesizing 9/10 solutions

=======

        int n = nums.length;
        int ans = 0;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                for (int k = 0; k < n; k++) {
                    ans ^= ((nums[i] | nums[j]) & nums[k]);
                }
            }
        }
        return ans;

=======

        int ans = 0;
        for (int i = 0; i < 30; i++) {
            int cnt = 0;
            for (int num : nums) {
                if (((num >> i) & 1) == 1) {
                    cnt++;
                }
            }
            ans |= ((cnt % 2) << i);
        }
        return ans;

=======

        int n = nums.length;
        int[] cnt = new int[32];
        for (int num : nums) {
            for (int i = 0; i < 32; i++) {
                if (((num >> i) & 1) == 1) {
                    cnt[i]++;
                }
            }
        }
        int ans = 0;
        for (int i = 0; i < 32; i++) {
            if (cnt[i] % 2 == 1) {
                ans |= (1 << i);
            }
        }
        return ans;

=======

        int ans = 0;
        for (int i = 0; i < 32; i++) {
            int c = 0;
            for (int num : nums) {
                if (((num >> i) & 1) == 1) {
                    c++;
                }
            }
            ans |= ((c % 2) << i);
        }
        return ans;

=======

        int ans = 0;
        for (int i = 0; i < nums.length; i++) {
            ans ^= nums[i];
        }
        return ans;

=======

        int n = nums.length;
        int ans = 0;
        for (int i = 0; i < n; i++) {
            int a = nums[i];
            for (int j = 0; j < n; j++) {
                int b = nums[j];
                for (int k = 0; k < n; k++) {
                    int c = nums[k];
                    ans ^= ((a | b) & c);
                }
            }
        }
        return ans;

=======

        int xor = 0;
        for (int i = 0; i < nums.length; i++) {
            int n = nums[i];
            for (int j = 0; j < nums.length; j++) {
                int m = nums[j];
                for (int k = 0; k < nums.length; k++) {
                    int l = nums[k];
                    xor = xor ^ ((n | m) & l);
                }
            }
        }
        return xor;

=======

        int ans = 0;
        int n = nums.length;
        int[] count = new int[32];
        for (int i = 0; i < n; i++) {
            int num = nums[i];
            for (int j = 0; j < 32; j++) {
                if ((num & (1 << j)) != 0) {
                    count[j] += 1;
                }
            }
        }
        for (int i = 0; i < n; i++) {
            int num = nums[i];
            int beauty = 0;
            for (int j = 0; j < 32; j++) {
                if ((num & (1 << j)) != 0) {
                    beauty += (1 << j) * (n - count[j]);
                } else {
                    beauty += (1 << j) * count[j];
                }
            }
            ans ^= beauty;
        }
        return ans;

=======

        int xor = 0;
        for (int n : nums) {
            xor ^= n;
        }
        return xor;
