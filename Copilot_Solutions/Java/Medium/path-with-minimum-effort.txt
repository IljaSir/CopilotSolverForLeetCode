Synthesizing 10/10 solutions

=======

        int m = heights.length;
        int n = heights[0].length;
        int[][] dist = new int[m][n];
        for (int i = 0; i < m; i++) {
            Arrays.fill(dist[i], Integer.MAX_VALUE);
        }
        dist[0][0] = 0;
        PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> a[0] - b[0]);
        pq.offer(new int[]{0, 0, 0});
        int[][] dirs = {{0, 1}, {0, -1}, {1, 0}, {-1, 0}};
        while (!pq.isEmpty()) {
            int[] cur = pq.poll();
            int x = cur[1];
            int y = cur[2];
            if (x == m - 1 && y == n - 1) {
                return dist[x][y];
            }
            for (int[] dir : dirs) {
                int nx = x + dir[0];
                int ny = y + dir[1];
                if (nx < 0 || nx >= m || ny < 0 || ny >= n) {
                    continue;
                }
                int d = Math.max(dist[x][y], Math.abs(heights[nx][ny] - heights[x][y]));
                if (d < dist[nx][ny]) {
                    dist[nx][ny] = d;
                    pq.offer(new int[]{d, nx, ny});
                }
            }
        }
        return -1;

=======

        int m = heights.length;
        int n = heights[0].length;
        int[][] dist = new int[m][n];
        for (int i = 0; i < m; i++) {
            Arrays.fill(dist[i], Integer.MAX_VALUE);
        }
        dist[0][0] = 0;
        PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> Integer.compare(a[2], b[2]));
        pq.offer(new int[]{0, 0, 0});
        int[][] dirs = new int[][]{{0, 1}, {0, -1}, {1, 0}, {-1, 0}};
        while (!pq.isEmpty()) {
            int[] curr = pq.poll();
            int x = curr[0];
            int y = curr[1];
            int d = curr[2];
            for (int[] dir: dirs) {
                int nx = x + dir[0];
                int ny = y + dir[1];
                if (nx < 0 || nx >= m || ny < 0 || ny >= n) {
                    continue;
                }
                int nd = Math.max(d, Math.abs(heights[nx][ny] - heights[x][y]));
                if (nd < dist[nx][ny]) {
                    dist[nx][ny] = nd;
                    pq.offer(new int[]{nx, ny, nd});
                }
            }
        }
        return dist[m - 1][n - 1];

=======

        int n = heights.length;
        int m = heights[0].length;
        int[][] dist = new int[n][m];
        for (int i = 0; i < n; i++) {
            Arrays.fill(dist[i], Integer.MAX_VALUE);
        }
        dist[0][0] = 0;
        PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> a[0] - b[0]);
        pq.add(new int[]{0, 0, 0});
        while (!pq.isEmpty()) {
            int[] top = pq.poll();
            int d = top[0];
            int x = top[1];
            int y = top[2];
            if (d > dist[x][y]) {
                continue;
            }
            if (x == n - 1 && y == m - 1) {
                break;
            }
            for (int i = 0; i < 4; i++) {
                int nx = x + dx[i];
                int ny = y + dy[i];
                if (nx >= 0 && nx < n && ny >= 0 && ny < m) {
                    int nd = Math.max(d, Math.abs(heights[nx][ny] - heights[x][y]));
                    if (nd < dist[nx][ny]) {
                        dist[nx][ny] = nd;
                        pq.add(new int[]{nd, nx, ny});
                    }
                }
            }
        }
        return dist[n - 1][m - 1];

=======

        int n = heights.length;
        int m = heights[0].length;
        int[][] visited = new int[n][m];
        for (int i = 0; i < n; i++) {
            Arrays.fill(visited[i], Integer.MAX_VALUE);
        }
        PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> a[0] - b[0]);
        pq.add(new int[]{0, 0, 0});
        while (!pq.isEmpty()) {
            int[] cur = pq.poll();
            int i = cur[1];
            int j = cur[2];
            if (i == n - 1 && j == m - 1) {
                return cur[0];
            }
            if (cur[0] > visited[i][j]) {
                continue;
            }
            visited[i][j] = cur[0];
            if (i - 1 >= 0) {
                int diff = Math.abs(heights[i][j] - heights[i - 1][j]);
                pq.add(new int[]{Math.max(diff, cur[0]), i - 1, j});
            }
            if (i + 1 < n) {
                int diff = Math.abs(heights[i][j] - heights[i + 1][j]);
                pq.add(new int[]{Math.max(diff, cur[0]), i + 1, j});
            }
            if (j - 1 >= 0) {
                int diff = Math.abs(heights[i][j] - heights[i][j - 1]);
                pq.add(new int[]{Math.max(diff, cur[0]), i, j - 1});
            }
            if (j + 1 < m) {
                int diff = Math.abs(heights[i][j] - heights[i][j + 1]);
                pq.add(new int[]{Math.max(diff, cur[0]), i, j + 1});
            }
        }
        return -1;

=======

        int n = heights.length;
        int m = heights[0].length;
        int[][] dp = new int[n][m];
        for(int i = 0; i < n; i++) {
            Arrays.fill(dp[i], Integer.MAX_VALUE);
        }
        dp[0][0] = 0;
        
        PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> a[2] - b[2]);
        pq.add(new int[]{0, 0, 0});
        
        while(!pq.isEmpty()) {
            int[] top = pq.poll();
            int x = top[0];
            int y = top[1];
            int cost = top[2];
            
            if(cost > dp[x][y]) continue;
            
            if(x == n - 1 && y == m - 1) return cost;
            
            if(x + 1 < n) {
                int diff = Math.abs(heights[x][y] - heights[x + 1][y]);
                if(dp[x + 1][y] > Math.max(diff, cost)) {
                    dp[x + 1][y] = Math.max(diff, cost);
                    pq.add(new int[]{x + 1, y, dp[x + 1][y]});
                }
            }
            
            if(x - 1 >= 0) {
                int diff = Math.abs(heights[x][y] - heights[x - 1][y]);
                if(dp[x - 1][y] > Math.max(diff, cost)) {
                    dp[x - 1][y] = Math.max(diff, cost);
                    pq.add(new int[]{x - 1, y, dp[x - 1][y]});
                }
            }
            
            if(y + 1 < m) {
                int diff = Math.abs(heights[x][y] - heights[x][y + 1]);
                if(dp[x][y + 1] > Math.max(diff, cost)) {
                    dp[x][y + 1] = Math.max(diff, cost);
                    pq.add(new int[]{x, y + 1, dp[x][y + 1]});
                }
            }
            
            if(y - 1 >= 0) {
                int diff = Math.abs(heights[x][y] - heights[x][y - 1]);
                if(dp[x][y - 1] > Math.max(diff,

=======

        int rows = heights.length;
        int cols = heights[0].length;
        int[][] minEffort = new int[rows][cols];
        for (int i = 0; i < rows; i++) {
            Arrays.fill(minEffort[i], Integer.MAX_VALUE);
        }
        minEffort[0][0] = 0;
        PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> a[2] - b[2]);
        int[] dirs = new int[]{-1, 0, 1, 0, -1};
        pq.offer(new int[]{0, 0, 0});
        while (!pq.isEmpty()) {
            int[] cur = pq.poll();
            int r = cur[0];
            int c = cur[1];
            int effort = cur[2];
            if (r == rows - 1 && c == cols - 1) {
                return effort;
            }
            for (int i = 0; i < 4; i++) {
                int nr = r + dirs[i];
                int nc = c + dirs[i + 1];
                if (nr >= 0 && nr < rows && nc >= 0 && nc < cols) {
                    int newEffort = Math.max(effort, Math.abs(heights[nr][nc] - heights[r][c]));
                    if (newEffort < minEffort[nr][nc]) {
                        minEffort[nr][nc] = newEffort;
                        pq.offer(new int[]{nr, nc, newEffort});
                    }
                }
            }
        }
        return 0;

=======

        int m = heights.length, n = heights[0].length;
        int[][] dp = new int[m][n];
        for (int[] row : dp) {
            Arrays.fill(row, Integer.MAX_VALUE);
        }
        dp[0][0] = 0;
        PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> a[0] - b[0]);
        pq.offer(new int[]{0, 0, 0});
        int[][] dirs = {{1, 0}, {0, 1}, {-1, 0}, {0, -1}};
        while (!pq.isEmpty()) {
            int[] cur = pq.poll();
            int effort = cur[0], r = cur[1], c = cur[2];
            if (r == m - 1 && c == n - 1) {
                return effort;
            }
            for (int[] dir : dirs) {
                int nr = r + dir[0], nc = c + dir[1];
                if (nr < 0 || nr >= m || nc < 0 || nc >= n) {
                    continue;
                }
                int newEffort = Math.max(effort, Math.abs(heights[nr][nc] - heights[r][c]));
                if (newEffort < dp[nr][nc]) {
                    dp[nr][nc] = newEffort;
                    pq.offer(new int[]{newEffort, nr, nc});
                }
            }
        }
        return -1;

=======

        int n = heights.length;
        int m = heights[0].length;
        int[][] dist = new int[n][m];
        for (int[] row : dist)
            Arrays.fill(row, Integer.MAX_VALUE);
        dist[0][0] = 0;
        PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> a[0] - b[0]);
        pq.offer(new int[] {0, 0, 0});
        int[][] dirs = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};
        while (!pq.isEmpty()) {
            int[] cur = pq.poll();
            int d = cur[0], r = cur[1], c = cur[2];
            if (r == n - 1 && c == m - 1) {
                return d;
            }
            for (int[] dir : dirs) {
                int nr = r + dir[0];
                int nc = c + dir[1];
                if (nr >= 0 && nr < n && nc >= 0 && nc < m) {
                    int nd = Math.max(d, Math.abs(heights[nr][nc] - heights[r][c]));
                    if (nd < dist[nr][nc]) {
                        dist[nr][nc] = nd;
                        pq.offer(new int[] {nd, nr, nc});
                    }
                }
            }
        }
        return -1;

=======

        int m = heights.length;
        int n = heights[0].length;
        int[][] dirs = {{1, 0}, {-1, 0}, {0, 1}, {0, -1}};
        int l = 0;
        int r = 1000000;
        while (l < r) {
            int mid = l + (r - l) / 2;
            if (dfs(0, 0, mid, heights, m, n, dirs)) {
                r = mid;
            } else {
                l = mid + 1;
            }
        }
        return l;
    }
    
    private boolean dfs(int i, int j, int mid, int[][] heights, int m, int n, int[][] dirs) {
        if (i < 0 || i >= m || j < 0 || j >= n || heights[i][j] == -1) {
            return false;
        }
        if (i == m - 1 && j == n - 1) {
            return true;
        }
        heights[i][j] = -1;
        for (int[] dir : dirs) {
            int x = i + dir[0];
            int y = j + dir[1];
            if (x < 0 || x >= m || y < 0 || y >= n || heights[x][y] == -1) {
                continue;
            }
            if (Math.abs(heights[i][j] - heights[x][y]) > mid) {
                continue;
            }
            if (dfs(x, y, mid, heights, m, n, dirs)) {
                return true;
            }
        }
        return false;

=======

        // Binary Search
        // Time: O(mnlog(max-min))
        // Space: O(mn)
        int m = heights.length;
        int n = heights[0].length;
        int left = 0, right = 1000000;
        while (left < right) {
            int mid = left + (right - left) / 2;
            if (!reachable(heights, mid)) {
                left = mid + 1;
            } else {
                right = mid;
            }
        }
        return left;
    }

    private boolean reachable(int[][] heights, int effort) {
        int m = heights.length;
        int n = heights[0].length;
        boolean[][] visited = new boolean[m][n];
        Queue<int[]> q = new LinkedList<>();
        q.offer(new int[]{0, 0});
        visited[0][0] = true;
        while (!q.isEmpty()) {
            int[] curr = q.poll();
            int i = curr[0];
            int j = curr[1];
            if (i == m - 1 && j == n - 1) {
                return true;
            }
            for (int[] dir : dirs) {
                int x = i + dir[0];
                int y = j + dir[1];
                if (x >= 0 && x < m && y >= 0 && y < n && !visited[x][y] && Math.abs(heights[x][y] - heights[i][j]) <= effort) {
                    q.offer(new int[]{x, y});
                    visited[x][y] = true;
                }
            }
        }
        return false;
