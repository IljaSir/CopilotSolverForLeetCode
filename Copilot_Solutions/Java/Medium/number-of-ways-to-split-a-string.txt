Synthesizing 10/10 solutions

=======

        int ones = 0;
        for (char c : s.toCharArray()) {
            if (c == '1') {
                ones++;
            }
        }
        if (ones % 3 != 0) {
            return 0;
        }
        if (ones == 0) {
            return (int) (((long) (s.length() - 1) * (s.length() - 2) / 2) % 1000000007);
        }
        ones /= 3;
        int first = 0;
        int second = 0;
        int current = 0;
        for (char c : s.toCharArray()) {
            if (c == '1') {
                current++;
            }
            if (current == ones) {
                first++;
            }
            if (current == ones * 2) {
                second++;
            }
        }
        return (int) ((long) first * second % 1000000007);

=======

        int n = s.length();
        int ones = 0;
        for (int i = 0; i < n; i++) {
            if (s.charAt(i) == '1') {
                ones++;
            }
        }
        if (ones == 0) {
            return (int) ((long) (n - 1) * (n - 2) / 2 % 1000000007);
        }
        if (ones % 3 != 0) {
            return 0;
        }
        int target = ones / 3;
        int cur = 0;
        int first = 0;
        int second = 0;
        for (int i = 0; i < n; i++) {
            if (s.charAt(i) == '1') {
                cur++;
                if (cur == target) {
                    first++;
                }
                if (cur == 2 * target) {
                    second++;
                }
            }
        }
        return (int) ((long) first * second % 1000000007);

=======

        int ones = 0;
        for (char c : s.toCharArray()) {
            if (c == '1') ones++;
        }
        if (ones % 3 != 0) return 0;
        if (ones == 0) {
            return (int)(((long)(s.length() - 1) * (s.length() - 2) / 2) % 1000000007);
        }
        int onePerPart = ones / 3;
        int firstPartEnd = 0;
        int secondPartEnd = 0;
        int cnt = 0;
        for (int i = 0; i < s.length(); i++) {
            if (s.charAt(i) == '1') cnt++;
            if (cnt == onePerPart) {
                firstPartEnd = i;
                break;
            }
        }
        cnt = 0;
        for (int i = firstPartEnd + 1; i < s.length(); i++) {
            if (s.charAt(i) == '1') cnt++;
            if (cnt == onePerPart) {
                secondPartEnd = i;
                break;
            }
        }
        int firstPartLength = firstPartEnd + 1;
        int secondPartLength = secondPartEnd - firstPartEnd;
        int thirdPartLength = s.length() - secondPartEnd - 1;
        return (int)(((long)firstPartLength * secondPartLength * thirdPartLength) % 1000000007);

=======

        int total = 0;
        for (int i = 0; i < s.length(); i++) {
            if (s.charAt(i) == '1') {
                total++;
            }
        }
        if (total == 0) {
            return (int) (((long) s.length() - 1) * (s.length() - 2) / 2 % 1000000007);
        }
        if (total % 3 != 0) {
            return 0;
        }
        int count = 0;
        int index = 0;
        for (int i = 0; i < s.length(); i++) {
            if (s.charAt(i) == '1') {
                count++;
                if (count == total / 3 + 1) {
                    index = i;
                    break;
                }
            }
        }
        int count2 = 0;
        int index2 = 0;
        for (int i = index; i < s.length(); i++) {
            if (s.charAt(i) == '1') {
                count2++;
                if (count2 == total / 3 + 1) {
                    index2 = i;
                    break;
                }
            }
        }
        return (int) ((long) (index2 - index) * (index2 - index + 1) / 2 % 1000000007);

=======

        int count = 0;
        for (int i = 0; i < s.length(); i++)
            if (s.charAt(i) == '1')
                count++;
        if (count % 3 != 0)
            return 0;
        if (count == 0) {
            long n = s.length() - 1;
            return (int) ((n * (n - 1) / 2) % 1000000007);
        }
        int k = count / 3;
        int i = 0;
        int j = s.length() - 1;
        int c1 = 0;
        int c2 = 0;
        while (k > 0) {
            if (s.charAt(i) == '1')
                k--;
            i++;
            c1++;
        }
        k = count / 3;
        while (k > 0) {
            if (s.charAt(j) == '1')
                k--;
            j--;
            c2++;
        }
        return (int) ((long) c1 * c2 % 1000000007);

=======

        int len = s.length();
        int sum = 0;
        for (int i = 0; i < len; i++) {
            if (s.charAt(i) == '1') {
                sum++;
            }
        }
        if (sum % 3 != 0) {
            return 0;
        }
        int div = sum / 3;
        if (div == 0) {
            return (int) (((long) len - 1) * (long) (len - 2) / 2 % 1000000007);
        }
        int count = 0;
        int num = 0;
        int[] index = new int[3];
        for (int i = 0; i < len; i++) {
            if (s.charAt(i) == '1') {
                count++;
                if (count == 1 || count == div + 1 || count == 2 * div + 1) {
                    index[num++] = i;
                }
            }
        }
        return (int) (((long) index[1] - index[0]) * ((long) index[2] - index[1]) % 1000000007);

=======

        int ones = 0;
        int mod = 1000000007;
        for (char c : s.toCharArray()) {
            if (c == '1') ones++;
        }
        if (ones == 0) {
            long n = s.length() - 1;
            return (int) ((n * (n - 1) / 2) % mod);
        }
        if (ones % 3 != 0) return 0;
        int target = ones / 3;
        int count = 0;
        int left = 0;
        int right = 0;
        int res = 0;
        for (char c : s.toCharArray()) {
            if (c == '1') count++;
            if (count == target) left++;
            if (count == target * 2) right++;
        }
        return (int) ((long) left * right % mod);

=======

        int n = s.length();
        int ones = 0;
        int mod = (int)1e9 + 7;
        for (int i = 0; i < n; i++) {
            if (s.charAt(i) == '1') {
                ones++;
            }
        }
        if (ones == 0) {
            return (int)(((long)(n - 2) * (n - 1) / 2) % mod);
        }
        if (ones % 3 != 0) {
            return 0;
        }
        int k = ones / 3;
        int cnt = 0;
        int first = 0;
        int second = 0;
        for (int i = 0; i < n; i++) {
            if (s.charAt(i) == '1') {
                cnt++;
            }
            if (cnt == k) {
                first++;
            }
            if (cnt == 2 * k) {
                second++;
            }
        }
        return (int)(((long)first * second) % mod);

=======

        int mod = (int)1e9 + 7;
        int n = s.length();
        int oneCount = 0;
        for (char c : s.toCharArray()) {
            if (c == '1') {
                oneCount++;
            }
        }
        if (oneCount % 3 != 0) {
            return 0;
        }
        if (oneCount == 0) {
            return (int)(((long)(n - 1) * (n - 2) / 2) % mod);
        }
        int oneCountPerPart = oneCount / 3;
        int count = 0;
        int i = 0;
        int firstPartEnd = -1;
        int secondPartEnd = -1;
        while (i < n) {
            if (s.charAt(i) == '1') {
                count++;
            }
            if (count == oneCountPerPart) {
                firstPartEnd = i;
                break;
            }
            i++;
        }
        count = 0;
        i++;
        while (i < n) {
            if (s.charAt(i) == '1') {
                count++;
            }
            if (count == oneCountPerPart) {
                secondPartEnd = i;
                break;
            }
            i++;
        }
        int firstPartLength = firstPartEnd + 1;
        int secondPartLength = secondPartEnd - firstPartEnd;
        int thirdPartLength = n - secondPartEnd;
        return (int)(((long)firstPartLength * secondPartLength) % mod);

=======

        int n = s.length();
        long mod = 1000000007;
        long count = 0;
        for (int i = 0; i < s.length(); i++) {
            if (s.charAt(i) == '1') {
                count++;
            }
        }
        if (count % 3 != 0) {
            return 0;
        }
        if (count == 0) {
            long res = 0;
            for (int i = 2; i < n; i++) {
                res += n - i;
                res %= mod;
            }
            return (int)res;
        }
        count /= 3;
        long c1 = 0, c2 = 0;
        for (int i = 0; i < n; i++) {
            if (s.charAt(i) == '1') {
                count--;
                if (count == 0) {
                    c1++;
                }
                if (count == -1) {
                    c2++;
                }
            }
        }
        return (int)((c1 + 1) * (c2 + 1) % mod);
