Synthesizing 10/10 solutions

=======

        int m = mat.length, n = mat[0].length;
        int lo = 0, hi = m - 1;
        while (lo < hi) {
            int mid = (lo + hi) / 2;
            int max = 0;
            for (int j = 1; j < n; ++j)
                if (mat[mid][j] > mat[mid][max])
                    max = j;
            if (mat[mid][max] < mat[mid + 1][max])
                lo = mid + 1;
            else
                hi = mid;
        }
        int max = 0;
        for (int j = 1; j < n; ++j)
            if (mat[lo][j] > mat[lo][max])
                max = j;
        return new int[]{lo, max};

=======

        int m = mat.length, n = mat[0].length;
        int left = 0, right = m - 1;
        while (left < right) {
            int mid = (left + right) / 2;
            int maxCol = 0;
            for (int j = 1; j < n; ++j) {
                if (mat[mid][j] > mat[mid][maxCol]) {
                    maxCol = j;
                }
            }
            if (mat[mid][maxCol] > mat[mid + 1][maxCol]) {
                right = mid;
            } else {
                left = mid + 1;
            }
        }
        int maxCol = 0;
        for (int j = 1; j < n; ++j) {
            if (mat[left][j] > mat[left][maxCol]) {
                maxCol = j;
            }
        }
        return new int[]{left, maxCol};

=======

        int m = mat.length;
        int n = mat[0].length;
        int[] res = new int[2];
        int l = 0;
        int r = m - 1;
        while (l < r) {
            int mid = l + (r - l) / 2;
            int maxIndex = 0;
            for (int i = 0; i < n; i++) {
                if (mat[mid][i] > mat[mid][maxIndex]) {
                    maxIndex = i;
                }
            }
            if (mat[mid][maxIndex] > mat[mid + 1][maxIndex]) {
                r = mid;
            } else {
                l = mid + 1;
            }
        }
        int maxIndex = 0;
        for (int i = 0; i < n; i++) {
            if (mat[l][i] > mat[l][maxIndex]) {
                maxIndex = i;
            }
        }
        res[0] = l;
        res[1] = maxIndex;
        return res;

=======

        int m = mat.length;
        int n = mat[0].length;
        int[] ans = new int[2];
        int l = 0;
        int r = m - 1;
        while (l < r) {
            int mid = (l + r) >> 1;
            int max = 0;
            int maxIndex = 0;
            for (int i = 0; i < n; i++) {
                if (mat[mid][i] > max) {
                    max = mat[mid][i];
                    maxIndex = i;
                }
            }
            if (mat[mid][maxIndex] > mat[mid + 1][maxIndex]) {
                r = mid;
            } else {
                l = mid + 1;
            }
        }
        ans[0] = l;
        ans[1] = 0;
        for (int i = 0; i < n; i++) {
            if (mat[l][i] > mat[l][ans[1]]) {
                ans[1] = i;
            }
        }
        return ans;

=======

        int m = mat.length;
        int n = mat[0].length;
        int[] res = new int[2];
        int l = 0, r = m - 1;
        while (l < r) {
            int mid = (l + r) / 2;
            int[] max = max(mat[mid]);
            if (mat[mid][max[1]] < mat[mid + 1][max[1]]) {
                l = mid + 1;
            } else {
                r = mid;
            }
        }
        int[] max = max(mat[l]);
        res[0] = l;
        res[1] = max[1];
        return res;
    }
    
    private int[] max(int[] row) {
        int idx = 0;
        int max = row[0];
        for (int i = 1; i < row.length; i++) {
            if (row[i] > max) {
                max = row[i];
                idx = i;
            }
        }
        return new int[] {max, idx};

=======

        int m = mat.length;
        int n = mat[0].length;
        int[] res = new int[2];
        int l = 0;
        int r = m - 1;
        while (l <= r) {
            int mid = (l + r) / 2;
            int maxIdx = 0;
            for (int i = 0; i < n; i++) {
                if (mat[mid][i] > mat[mid][maxIdx]) {
                    maxIdx = i;
                }
            }
            if (mid == 0 || mat[mid][maxIdx] > mat[mid - 1][maxIdx]) {
                if (mid == m - 1 || mat[mid][maxIdx] > mat[mid + 1][maxIdx]) {
                    res[0] = mid;
                    res[1] = maxIdx;
                    return res;
                } else {
                    l = mid + 1;
                }
            } else {
                r = mid - 1;
            }
        }
        return res;

=======

        int row = mat.length;
        int col = mat[0].length;
        int l = 0;
        int r = col - 1;
        while (l < r) {
            int mid = l + (r - l) / 2;
            int maxRow = 0;
            for (int i = 0; i < row; i++) {
                if (mat[i][mid] > mat[maxRow][mid]) {
                    maxRow = i;
                }
            }
            if (mat[maxRow][mid] < mat[maxRow][mid + 1]) {
                l = mid + 1;
            } else {
                r = mid;
            }
        }
        int maxRow = 0;
        for (int i = 0; i < row; i++) {
            if (mat[i][l] > mat[maxRow][l]) {
                maxRow = i;
            }
        }
        return new int[]{maxRow, l};

=======

        int m = mat.length;
        int n = mat[0].length;
        int[] result = new int[2];
        int start = 0;
        int end = m - 1;
        while (start < end) {
            int mid = (start + end) / 2;
            int max = 0;
            int index = 0;
            for (int j = 0; j < n; j++) {
                if (mat[mid][j] > max) {
                    max = mat[mid][j];
                    index = j;
                }
            }
            if (mat[mid][index] > mat[mid - 1][index] && mat[mid][index] > mat[mid + 1][index]) {
                result[0] = mid;
                result[1] = index;
                break;
            } else if (mat[mid][index] < mat[mid - 1][index]) {
                end = mid - 1;
            } else {
                start = mid + 1;
            }
        }
        return result;

=======

        int m = mat.length;
        int n = mat[0].length;
        int[] ans = new int[2];
        int l = 0;
        int r = m-1;
        while (l < r) {
            int mid = (l + r) / 2;
            int maxCol = 0;
            for (int i = 0; i < n; i++) {
                if (mat[mid][i] > mat[mid][maxCol]) {
                    maxCol = i;
                }
            }
            if (mat[mid][maxCol] < mat[mid+1][maxCol]) {
                l = mid + 1;
            } else {
                r = mid;
            }
        }
        int maxCol = 0;
        for (int i = 0; i < n; i++) {
            if (mat[l][i] > mat[l][maxCol]) {
                maxCol = i;
            }
        }
        ans[0] = l;
        ans[1] = maxCol;
        return ans;

=======

        int n = mat.length;
        int m = mat[0].length;
        int[] ans = new int[2];
        int left = 0;
        int right = m - 1;
        while (left < right) {
            int mid = (left + right) / 2;
            int max = 0;
            for (int i = 0; i < n; i++) {
                if (mat[i][mid] > mat[max][mid]) {
                    max = i;
                }
            }
            if (mid > 0 && mat[max][mid - 1] > mat[max][mid]) {
                right = mid - 1;
            } else if (mid < m - 1 && mat[max][mid + 1] > mat[max][mid]) {
                left = mid + 1;
            } else {
                ans[0] = max;
                ans[1] = mid;
                break;
            }
        }
        return ans;
