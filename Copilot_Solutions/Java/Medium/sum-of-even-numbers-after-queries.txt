Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int[] result = new int[queries.length];
        int sum = 0;
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] % 2 == 0) {
                sum += nums[i];
            }
        }
        for (int i = 0; i < queries.length; i++) {
            int index = queries[i][1];
            int val = queries[i][0];
            if (nums[index] % 2 == 0) {
                sum -= nums[index];
            }
            nums[index] += val;
            if (nums[index] % 2 == 0) {
                sum += nums[index];
            }
            result[i] = sum;
        }
        return result;

=======

        int[] result = new int[queries.length];
        int sum = 0;
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] % 2 == 0) {
                sum += nums[i];
            }
        }
        for (int i = 0; i < queries.length; i++) {
            int val = queries[i][0];
            int index = queries[i][1];
            if (nums[index] % 2 == 0) {
                sum -= nums[index];
            }
            nums[index] += val;
            if (nums[index] % 2 == 0) {
                sum += nums[index];
            }
            result[i] = sum;
        }
        return result;

=======

        int[] result = new int[queries.length];
        int sum = 0;
        for (int num : nums) {
            if (num % 2 == 0) {
                sum += num;
            }
        }
        for (int i = 0; i < queries.length; i++) {
            int val = queries[i][0];
            int index = queries[i][1];
            if (nums[index] % 2 == 0) {
                sum -= nums[index];
            }
            nums[index] += val;
            if (nums[index] % 2 == 0) {
                sum += nums[index];
            }
            result[i] = sum;
        }
        return result;

=======

        int[] ans = new int[queries.length];
        int sum = 0;
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] % 2 == 0) {
                sum += nums[i];
            }
        }
        for (int i = 0; i < queries.length; i++) {
            int val = queries[i][0];
            int index = queries[i][1];
            if (nums[index] % 2 == 0) {
                sum -= nums[index];
            }
            nums[index] += val;
            if (nums[index] % 2 == 0) {
                sum += nums[index];
            }
            ans[i] = sum;
        }
        return ans;

=======

        int[] result = new int[nums.length];
        int sum = 0;
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] % 2 == 0) {
                sum += nums[i];
            }
        }
        for (int i = 0; i < queries.length; i++) {
            if (nums[queries[i][1]] % 2 == 0) {
                sum -= nums[queries[i][1]];
            }
            nums[queries[i][1]] += queries[i][0];
            if (nums[queries[i][1]] % 2 == 0) {
                sum += nums[queries[i][1]];
            }
            result[i] = sum;
        }
        return result;

=======

        int sum = 0;
        for(int i = 0; i < nums.length; i++){
            if(nums[i] % 2 == 0){
                sum += nums[i];
            }
        }
        int[] result = new int[queries.length];
        for(int i = 0; i < queries.length; i++){
            int val = queries[i][0];
            int index = queries[i][1];
            if(nums[index] % 2 == 0){
                sum -= nums[index];
            }
            nums[index] += val;
            if(nums[index] % 2 == 0){
                sum += nums[index];
            }
            result[i] = sum;
        }
        return result;

=======

        int[] answer = new int[queries.length];
        int evenSum = 0;
        for(int num: nums) {
            if(num % 2 == 0) {
                evenSum += num;
            }
        }
        for(int i = 0; i < queries.length; i++) {
            int val = queries[i][0];
            int index = queries[i][1];
            if(nums[index] % 2 == 0) {
                evenSum -= nums[index];
            }
            nums[index] += val;
            if(nums[index] % 2 == 0) {
                evenSum += nums[index];
            }
            answer[i] = evenSum;
        }
        return answer;
