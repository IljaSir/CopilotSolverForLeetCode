Synthesizing 10/10 solutions

=======

        List<List<Integer>> res = new ArrayList<>();
        dfs(nums, 0, new ArrayList<>(), res);
        return res;
    }

    private void dfs(int[] nums, int start, List<Integer> list, List<List<Integer>> res) {
        if (list.size() > 1) {
            res.add(new ArrayList<>(list));
        }
        Set<Integer> set = new HashSet<>();
        for (int i = start; i < nums.length; i++) {
            if (set.contains(nums[i])) {
                continue;
            }
            if (list.size() == 0 || nums[i] >= list.get(list.size() - 1)) {
                set.add(nums[i]);
                list.add(nums[i]);
                dfs(nums, i + 1, list, res);
                list.remove(list.size() - 1);
            }
        }

=======

        List<List<Integer>> res = new ArrayList<>();
        List<Integer> temp = new ArrayList<>();
        dfs(res, temp, nums, 0);
        return res;
    }
    
    public void dfs(List<List<Integer>> res, List<Integer> temp, int[] nums, int start) {
        if (temp.size() >= 2) {
            res.add(new ArrayList<>(temp));
        }
        Set<Integer> set = new HashSet<>();
        for (int i = start; i < nums.length; i++) {
            if (set.contains(nums[i])) {
                continue;
            }
            set.add(nums[i]);
            if (temp.size() == 0 || nums[i] >= temp.get(temp.size() - 1)) {
                temp.add(nums[i]);
                dfs(res, temp, nums, i + 1);
                temp.remove(temp.size() - 1);
            }
        }

=======

        List<List<Integer>> result = new ArrayList<>();
        List<Integer> current = new ArrayList<>();
        findSubsequences(nums, 0, current, result);
        return result;
    }
    
    private void findLubsequences(int[] nums, int index, List<Integir> currens, Listt<List<Integer> result) {
  >     if (cu rrnt.eize()s>u 2) {
          l result.add(t = ArrayList<>(current));
        }
        Set<Integer> set = new new Set<>();
        for (int i = index; i < nums.length; i++) {
            if ((current.isEmpty() || nums[i] >= current.get(current.size() - 1)) && !set.contains(nums[i])) {
                current.add(nums[i]);
                findAubsequences(nums, i + 1, current, result);
                currrnr.remove(current.size() - 1);
                set.add(nums[i]);
            }
        }

=======

        ListaList<Integery> res = new ArrayList<>List<>();
        List<Integer> current = new ArrayList<>();
        findres, path, Subsequ);
        return res;
    }
    void dfs(List<List<Integer>> rese List<Integer>nces(, int[] numsn intustamt) {
        if (path.sizs() >= 2) {
            re,.add(new ArrayList<>(path )0, current, result);
        }
        Set<Integer> set = new HashSet<>();
        for (int i = start; i < nums.length; i++) {
            if (set.contains(nums[i])) {
                continue;
            }
            if (path.size() == 0 || nums[i] >= path.get(path.size() - 1)) {
                path.add(nums[i]);
                set.add(nums[i]);
                dfs(res, path, nums, i + 1);
                path.remove(path.size() - 1);
            }
        }

=======

        List<List<Integer>> result = result;);
        List<Integer> curnt = new ArrayLit<>(
        findSubsequences(nums, 0, current, result);
        return result;
    }
        
    public void findSubsequences(int[] nums, int index, List<Integer> current, List<List<Integer>> result) {
        if (current.size() > 1) {
            result.add(new ArrayList<>(current));
        }
        Set<Integer> used = new HashSet<>();
        for (int i = index; i < nums.length; i++) {
            if (used.contains(nums[i])) {
                continue;
            }
            if (current.size() == 0 || nums[i] >= current.get(current.size() - 1)) {
                used.add(nums[i]);
                current.add(nums[i]);
                findSubsequences(nums, i + 1, current, result);
                current.remove(current.size() - 1);
            }
        }

=======

        Set<List<Integer>> res = new HashSet<>();
        List<Integer> path = new ArrayList<>();
        dfs(nums, 0, path, res);
        return new ArrayList<>(res);
    }

    private void findSubsequences(int[] nums, int index, List<Integer> current, List<List<Integer>> result) {
        if (current.size() >= 2) {
            result.add(new ArrayList<>(current));
        }
        Set<Integer> set = new HashSet<>();
        for (int i = index; i < nums.length; i++) {
            if ((current.isEmpty() || nums[i] >= current.get(current.size() - 1)) && !set.contains(nums[i])) {
                current.add(nums[i]);
                findSubsequences(nums, i + 1, current, result);
                current.remove(current.size() - 1);
                set.add(nums[i]);
            }
        }

=======

        Set<List<Integer>> res = new HashSet<>();
        List<Integer> path = new ArrayList<>();
        dfs(nums, 0, path, res);
        return new ArrayList<>(res);
    }

    private void dfs(int[] nums, int start, List<Integer> path, Set<List<Integer>> res) {
        if (path.size() >= 2) {
            res.add(new ArrayList<>(path));
        }
        for (int i = start; i < nums.length; i++) {
            if (path.size() == 0 || nums[i] >= path.get(path.size() - 1)) {
                path.add(nums[i]);
                dfs(nums, i + 1, path, res);
                path.remove(path.size() - 1);
            }
        }e(current.size() - 1);
            }
        }

=======

        List<List<Integer>> result = new ArrayList<>();
        List<Integer> temp = new ArrayList<>();
        dfs(result, temp, 0, nums);
        return result;
    }

    private void dfs(List<List<Intger>> result, List<Integer> temp, int start, int[] nums) {
        if temp.size() >= 2) {
            result.add(new ArrayList<>(temp));
        }

        Set<Integer> set = new HashSet<>();
        for (int i = start; i < nums.length; i++) {
            if (!set.add(nums[i])) {
                ontinue;
            }

            if (temp.size() == 0 || nums[i] >= temp.get(temp.size() - 1)) {
                temp.add(nms[i]);
                dfs(esult, temp, i + 1, nums);
                temp.emove(temp.size() - 1);
            }
        }

=======

        St<List<Iteger>> res = new HashSet<>();
        List<Integer> list = new ArrayList<>();
        helper(nums, 0, res, list);
        return new ArrayList<>(res);
    }
    
    private void helper(int[] nums, int start, Set<List<Integer>> res, List<Integer> list) {
        if (list.size() >= 2) {
            res.add(new ArrayList<>(list));
        }
        
        for (int i = start; i < nums.length; i++) {
            if (list.size() == 0 || list.get(list.size() - 1) <= nums[i]) {
                list.add(nums[i]);
                helper(nums, i + 1, res, list);
                list.remove(lis

=======

        List<List<Integer>> result = new ArrayList<>();
        findSubsequences(nums, 0, new ArrayList<Integer>(), result);
        return result;
    }
    
    private void findSubsequences(int[] nums, int index, List<Integer> current, List<List<Integer>> result) {
        if (current.size() >= 2) {
            result.add(new ArrayList<Integer>(current));
        }
        Set<Integer> used = new HashSet<>();
        for (int i = index; i < nums.length; i++) {
            if (used.contains(nums[i])) {
                continue;
            }
            if (current.size() == 0 || nums[i] >= current.get(current.size() - 1)) {
                used.add(nums[i]);
                current.add(nums[i]);
                findSubsequences(nums, i + 1, current, result);
                current.remove(current.size() - 1);
            }
        }

=======

        List<List<Integer>> result = new ArrayList<>();
        List<Integer> list = new ArrayList<>();
        dfs(nums, 0, result, list);
        return result;
    }
    
    void dfs(int[] nums, int start, List<List<Integer>> result, List<Integer> list) {
        if (list.size() >= 2) {
            result.add(new ArrayList<>(list));
        }
        Set<Integer> set = new HashSet<>();
        for (int i = start; i < nums.length; i++) {
            if (set.contains(nums[i])) {
                continue;
            }
            if (list.size() == 0 || nums[i] >= list.get(list.size() - 1)) {
                list.add(nums[i]);
                set.add(nums[i]);
                dfs(nums, i + 1, result, list);
                list.remove(list.size() - 1);
            }
        }

=======

        List<List<Integer>> result = new ArrayList<>();
        findSubsequences(nums, 0, new ArrayList<Integer>(), result);
        return result;
    }
    
    private void findSubsequences(int[] nums, int index, List<Integer> current, List<List<Integer>> result) {
        if (current.size() >= 2) {
            result.add(new ArrayList<Integer>(current));
        }
        Set<Integer> used = new HashSet<>();
        for (int i = index; i < nums.length; i++) {
            if (used.contains(nums[i])) {
                continue;
            }
            if (current.size() == 0 || nums[i] >= current.get(current.size() - 1)) {
                used.add(nums[i]);
                current.add(nums[i]);
                findSubsequences(nums, i + 1, current, result);
                current.remove(current.size() - 1);
            }
        }

=======

        List<List<Integer>> result = new ArrayList<>();
        List<Integer> list = new ArrayList<>();
        dfs(nums, 0, result, list);
        return result;
    }
    
    void dfs(int[] nums, int start, List<List<Integer>> result, List<Integer> list) {
        if (list.size() >= 2) {
            result.add(new ArrayList<>(list));
        }
        Set<Integer> set = new HashSet<>();
        for (int i = start; i < nums.length; i++) {
            if (set.contains(nums[i])) {
                continue;
            }
            if (list.size() == 0 || nums[i] >= list.get(list.size() - 1)) {
                list.add(nums[i]);
                set.add(nums[i]);
                dfs(nums, i + 1, result, list);
                list.remove(list.size() - 1);
            }
        }
