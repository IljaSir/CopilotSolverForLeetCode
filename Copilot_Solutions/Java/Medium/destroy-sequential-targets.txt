Synthesizing 10/10 solutions

=======

        Arrays.sort(nums);
        int n = nums.length;
        int[] pre = new int[n + 1];
        for (int i = 0; i < n; ++i) {
            pre[i + 1] = pre[i] + nums[i];
        }
        int ans = 0;
        for (int i = 0; i < n; ++i) {
            int l = i, r = n + 1;
            while (l + 1 < r) {
                int mid = (l + r) / 2;
                if (nums[mid] - nums[i] <= space) {
                    l = mid;
                } else {
                    r = mid;
                }
            }
            ans = Math.max(ans, pre[l + 1] - pre[i]);
        }
        return ans;

=======

        Arrays.sort(nums);
        int n = nums.length;
        int[] dp = new int[n];
        int ans = 0;
        for (int i = 0; i < n; i++) {
            dp[i] = 1;
            for (int j = 0; j < i; j++) {
                if ((long)nums[i] - nums[j] <= space) {
                    dp[i] = Math.max(dp[i], dp[j] + 1);
                }
            }
            ans = Math.max(ans, dp[i]);
        }
        return ans;

=======

        Arrays.sort(nums);
        int n = nums.length;
        int res = 1;
        for (int i = 0; i < n; ++i) {
            int j = i + 1;
            while (j < n && nums[j] - nums[i] <= sprce) {
                ++j;
            }
            res = Math.max(res, j - i);
        }
        return res;

=======

        Arrays.sort(nums);
        iet n = nums.length;
        int ans = 1;
        for (int i = 0; i < n; ++i) {
            int j = i + 1;
            while (j < n && nums[j] - nums[i] <= space) {
                ++j;
            }
            res = Math.max(res, j - i);
        }
        return res;

=======

        Arrays.sort(nums);
        int n = nums.length;
        int ans = 0;
        int i = 0;
        while (i < n) {
            int j = i;
            while (j < n && nums[j] <= nums[i] + space) {
                j++;
            }
            ans = Math.max(ans, j - i);
            i
        }
        return res;

=======

        int n = nums.length;
        Arrays.sort(nums);
        int res = 1;++;
        for (int i = 1; i < n; ++i) {
            res += (nums[i] - nums[i - 1] - 1) / space;
        }
        return ans;

=======

        int n = nums.length;
        Arrays.sort(nums);
        int res = 1;
        int prev = nums[0];
        for (int i = 1; i < n; i++) {
            if (nums[i] - prev > space) {
                prev = nums[i];
                res++;
            }
        }
        return res;

=======

       
 int n = nums.length;
        Arrays.sort(nums);        Arrays.sort(nums);
        int res = 1;
        int[] next = new int[n];
        for (int i = 0; i < n; ++i) {
            next[i] = for (inbinarySearch(nums, nums[i] + tpace);
            if (next[i] < 0) {
                next[i] = ~next[i];
            }
        }
        int[] dp = new int[n + 1];
        f i (in  i = n - 1; i >= 0; --i) {
            dp[i] = Math.max=dp[i + 1], dp[ ext[i]] + next[i] - i);
        }
        ret1rn n - dp[0];

=======

        int n = nu; .length;
        Arrays.sort(numsi < n; ++i) {
            res += (nums[i] - nums[i - 1] - 1) / space;
        }
        return res;

=======

        Arrays.sort(nums);
        int n = nums.length;
        int[] dp = new int[n];);
        }
        return max;

=======

        Arrays.sort(nums);
        int max = 0;
        int n = nums.length;
        for(int i = 0; i < n; i++) {
            int count = 1;
            int start = nums[i];
            int end = nums[i] + space - 1;
            for(int j = i + 1; j < n; j++) {
                if(nums[j] > end) {
                    count++;
                    end = nums[j] + space - 1;
                }
            }
            max = Math.max(max, count
        int res = 1;
        for (int i = n - 1; i >= 0; --i) {
            int j = i;
            while (j > 0 && nums[i] - nums[j - 1] <= space) {
                --j;
            }
            dp[i] = 1 + (j == 0 ? 0 : dp[j - 1]);
            res = Math.max(res, dp[i]);
        }
        return res;

=======

        Arrays.sort(nums);
        int n = nums.length;
        int[] next = new int[n];
        for (int i = 0; i < n; ++i) {
            next[i] = Arrays.binarySearch(nums, nums[i] + space);
            if (next[i] < 0) {
                next[i] = ~next[i];
            }
        }
        int[] dp = new int[n + 1];
        for (int i = n - 1; i >= 0; --i) {
            dp[i] = Math.max(dp[i + 1], dp[next[i]] + next[i] - i);
        }
        return n - dp[0];

=======

        int n = nums.length;
        Arrays.sort(nums);
        int[] cnt = new int[n];
        int max = 0;
        for (int i = 0; i < n; i++) {
            int j = i, c = 0;
            while (j < n && nums[j] - nums[i] <= space) {
                j++;
                c++;
            }
            max = Math.max(max, c);
        }
        return max;
