Synthesizing 10/10 solutions

=======

        StringBuilder sb = new StringBuilder(s);
        for (int i = spaces.length - 1; i >= 0; i--) {
            sb.insert(spaces[i], ' ');
        }
        return sb.toString();

=======

        StringBuilder sb = new StringBuilder();
        int i = 0;
        for (int space : spaces) {
            sb.append(s.substring(i, space));
            sb.append(' ');
            i = space;
        }
        sb.append(s.substring(i));
        return sb.toString();

=======

        StringBuilder sb = new StringBuilder();
        int idx = 0;
        for (int i = 0; i < spaces.length; i++) {
            sb.append(s.substring(idx, spaces[i]));
            sb.append(" ");
            idx = spaces[i];
        }
        sb.append(s.substring(idx));
        return sb.toString();

=======

        StringBuilder sb = new StringBuilder();
        int index = 0;
        for (int space: spaces) {
            sb.append(s.substring(index, space));
            sb.append(" ");
            index = space;
        }
        sb.append(s.substring(index));
        return sb.toString();

=======

        StringBuilder sb = new StringBuilder();
        int i = 0;
        for (int space : spaces) {
            sb.append(s, i, space).append(' ');
            i = space;
        }
        sb.append(s, i, s.length());
        return sb.toString();

=======

        StringBuilder sb = new StringBuilder();
        int i = 0;
        int j = 0;
        while (i < s.length()) {
            if (j < spaces.length && spaces[j] == i) {
                sb.append(" ");
                j++;
            } else {
                sb.append(s.charAt(i));
                i++;
            }
        }
        return sb.toString();

=======

        StringBuilder sb = new StringBuilder();
        int n = spaces.length;
        int j = 0;
        for (int i = 0; i < s.length(); i++) {
            if (j < n && i == spaces[j]) {
                sb.append(' ');
                j++;
            }
            sb.append(s.charAt(i));
        }
        return sb.toString();

=======

        StringBuilder sb = new StringBuilder();
        int prev = 0;
        for (int space : spaces) {
            sb.append(s.substring(prev, space)).append(' ');
            prev = space;
        }
        sb.append(s.substring(prev));
        return sb.toString();

=======

        int n = spaces.length;
        StringBuilder sb = new StringBuilder();
        int j = 0;
        for (int i = 0; i < s.length(); i++) {
            if (j < n && i == spaces[j]) {
                sb.append(" ");
                j++;
            }
            sb.append(s.charAt(i));
        }
        return sb.toString();

=======

        int n = s.length();
        int m = spaces.length;
        int[] dp = new int[n];
        Arrays.fill(dp, -1);
        for (int i = 0; i < m; i++) {
            dp[spaces[i]] = 1;
        }
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < n; i++) {
            if (dp[i] == 1) {
                sb.append(' ');
            }
            sb.append(s.charAt(i));
        }
        return sb.toString();
