Synthesizing 10/10 solutions

=======

        int n = grid.length;
        int[] zeros = new int[n];
        for (int i = 0; i < n; i++) {
            for (int j = n - 1; j >= 0; j--) {
                if (grid[i][j] == 0) {
                    zeros[i]++;
                } else {
                    break;
                }
            }
        }
        int ans = 0;
        for (int i = 0; i < n; i++) {
            if (zeros[i] >= n - i - 1) {
                continue;
            }
            boolean found = false;
            for (int j = i + 1; j < n; j++) {
                if (zeros[j] >= n - i - 1) {
                    ans += j - i;
                    while (j > i) {
                        zeros[j] = zeros[j - 1];
                        j--;
                    }
                    zeros[i] = n - i - 1;
                    found = true;
                    break;
                }
            }
            if (!found) {
                return -1;
            }
        }
        return ans;

=======

        int n = grid.length;
        int[] zeros = new int[n];
        for (int i = 0; i < n; i++) {
            int count = 0;
            for (int j = n - 1; j >= 0; j--) {
                if (grid[i][j] == 1) {
                    break;
                }
                count++;
            }
            zeros[i] = count;
        }
        int res = 0;
        for (int i = 0; i < n; i++) {
            if (zeros[i] >= n - i - 1) {
                continue;
            }
            int j = i + 1;
            while (j < n && zeros[j] < n - i - 1) {
                j++;
            }
            if (j == n) {
                return -1;
            }
            res += j - i;
            while (j > i) {
                int tmp = zeros[j];
                zeros[j] = zeros[j - 1];
                zeros[j - 1] = tmp;
                j--;
            }
        }
        return res;

=======

        int n = grid.length;
        int[] zeros = new int[n];
        for (int i = 0; i < n; i++) {
            int count = 0;
            for (int j = n - 1; j >= 0; j--) {
                if (grid[i][j] == 0) {
                    count++;
                } else {
                    break;
                }
            }
            zeros[i] = count;
        }
        int ans = 0;
        for (int i = 0; i < n; i++) {
            if (n - i - 1 > zeros[i]) {
                int j = i;
                for (; j < n; j++) {
                    if (n - i - 1 <= zeros[j]) {
                        break;
                    }
                }
                if (j == n) {
                    return -1;
                }
                for (int k = j; k > i; k--) {
                    int temp = zeros[k];
                    zeros[k] = zeros[k - 1];
                    zeros[k - 1] = temp;
                    ans++;
                }
            }
        }
        return ans;

=======

        int n = grid.length;
        int[] zeros = new int[n];
        for (int i = 0; i < n; i++) {
            int count = 0;
            for (int j = n - 1; j >= 0; j--) {
                if (grid[i][j] == 0) count++;
                else break;
            }
            zeros[i] = count;
        }
        int ans = 0;
        for (int i = 0; i < n; i++) {
            if (zeros[i] >= n - i - 1) continue;
            boolean found = false;
            for (int j = i + 1; j < n; j++) {
                if (zeros[j] >= n - i - 1) {
                    found = true;
                    ans += j - i;
                    for (int k = j; k > i; k--) {
                        zeros[k] = zeros[k - 1];
                    }
                    zeros[i] = n - i - 1;
                    break;
                }
            }
            if (!found) return -1;
        }
        return ans;

=======

        int n = grid.length;
        int[] zeros = new int[n];
        for (int i = 0; i < n; i++) {
            int count = 0;
            for (int j = n - 1; j >= 0 && grid[i][j] == 0; j--) {
                count++;
            }
            zeros[i] = count;
        }
        int swaps = 0;
        for (int i = 0; i < n; i++) {
            if (zeros[i] >= n - i - 1) {
                continue;
            }
            int j = i + 1;
            for (; j < n; j++) {
                if (zeros[j] >= n - i - 1) {
                    break;
                }
            }
            if (j == n) {
                return -1;
            }
            swaps += j - i;
            for (; j > i; j--) {
                zeros[j] = zeros[j - 1];
            }
        }
        return swaps;

=======

        int n = grid.length;
        int[] arr = new int[n];
        for (int i = 0; i < n; i++) {
            int count = 0;
            for (int j = n - 1; j >= 0; j--) {
                if (grid[i][j] == 0) {
                    count++;
                } else {
                    break;
                }
            }
            arr[i] = count;
        }
        int ans = 0;
        for (int i = 0; i < n; i++) {
            int j = i;
            while (j < n && arr[j] < n - i - 1) {
                j++;
            }
            if (j == n) {
                return -1;
            }
            ans += j - i;
            while (j > i) {
                arr[j] = arr[j - 1];
                j--;
            }
        }
        return ans;

=======

        int n = grid.length;
        int[] zeroCount = new int[n];
        for (int i = 0; i < n; i++) {
            for (int j = n - 1; j >= 0 && grid[i][j] == 0; j--) {
                zeroCount[i]++;
            }
        }
        int swaps = 0;
        for (int i = 0; i < n; i++) {
            if (zeroCount[i] < n - i - 1) {
                int j;
                for (j = i + 1; j < n; j++) {
                    if (zeroCount[j] >= n - i - 1) {
                        break;
                    }
                }
                if (j == n) {
                    return -1;
                }
                while (j > i) {
                    int tmp = zeroCount[j];
                    zeroCount[j] = zeroCount[j - 1];
                    zeroCount[j - 1] = tmp;
                    j--;
                    swaps++;
                }
            }
        }
        return swaps;

=======

        int n = grid.length;
        int[] rightMostZeros = new int[n];
        for (int i = 0; i < n; i++) {
            for (int j = n - 1; j >= 0; j--) {
                if (grid[i][j] == 0) {
                    rightMostZeros[i] = j;
                } else {
                    break;
                }
            }
        }
        int swaps = 0;
        for (int i = 0; i < n; i++) {
            if (rightMostZeros[i] >= n - i - 1) {
                continue;
            }
            boolean found = false;
            for (int j = i + 1; j < n; j++) {
                if (rightMostZeros[j] >= n - i - 1) {
                    found = true;
                    for (int k = j; k > i; k--) {
                        int tmp = rightMostZeros[k];
                        rightMostZeros[k] = rightMostZeros[k - 1];
                        rightMostZeros[k - 1] = tmp;
                        swaps++;
                    }
                    break;
                }
            }
            if (!found) {
                return -1;
            }
        }
        return swaps;

=======

        int n = grid.length;
        int[] lastZero = new int[n];
        for (int i = 0; i < n; i++) {
            int j = n - 1;
            while (j >= 0 && grid[i][j] == 0) {
                j--;
            }
            lastZero[i] = j;
        }
        int res = 0;
        for (int i = 0; i < n; i++) {
            if (lastZero[i] >= n - i - 1) {
                continue;
            }
            int j = i + 1;
            while (j < n && lastZero[j] < n - i - 1) {
                j++;
            }
            if (j == n) {
                return -1;
            }
            while (j > i) {
                int temp = lastZero[j];
                lastZero[j] = lastZero[j - 1];
                lastZero[j - 1] = temp;
                j--;
                res++;
            }
        }
        return res;

=======

        int n = grid.length;
        int[] zeros = new int[n];
        for(int i=0; i<n; i++){
            int count = 0;
            for(int j=n-1; j>=0; j--){
                if(grid[i][j]==0){
                    count++;
                }else{
                    break;
                }
            }
            zeros[i] = count;
        }
        int ans = 0;
        for(int i=0; i<n; i++){
            if(zeros[i]>=n-i-1){
                continue;
            }
            int j=i+1;
            while(j<n && zeros[j]<n-i-1){
                j++;
            }
            if(j==n){
                return -1;
            }
            while(j>i){
                int temp = zeros[j];
                zeros[j] = zeros[j-1];
                zeros[j-1] = temp;
                j--;
                ans++;
            }
        }
        return ans;
