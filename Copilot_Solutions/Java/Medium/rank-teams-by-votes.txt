Synthesizing 10/10 solutions

=======

        int n = votes[0].length();
        int[][] count = new int[26][n + 1];
        for (int i = 0; i < 26; ++i) {
            count[i][0] = i;
        }
        for (String vote: votes) {
            for (int i = 0; i < n; ++i) {
                count[vote.charAt(i) - 'A'][i + 1]--;
            }
        }
        Arrays.sort(count, (a, b) -> {
            for (int i = 1; i < n + 1; ++i) {
                if (a[i] != b[i]) {
                    return a[i] - b[i];
                }
            }
            return a[0] - b[0];
        });
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < n; ++i) {
            sb.append((char)(count[i][0] + 'A'));
        }
        return sb.toString();

=======

        int n = votes[0].length();
        int[][] count = new int[26][n];
        for (String vote : votes) {
            for (int i = 0; i < n; i++) {
                count[vote.charAt(i) - 'A'][i]++;
            }
        }
        Character[] chars = new Character[n];
        for (int i = 0; i < n; i++) {
            chars[i] = votes[0].charAt(i);
        }
        Arrays.sort(chars, (a, b) -> {
            for (int i = 0; i < n; i++) {
                if (count[a - 'A'][i] != count[b - 'A'][i]) {
                    return count[b - 'A'][i] - count[a - 'A'][i];
                }
            }
            return a - b;
        });
        StringBuffer sb = new StringBuffer();
        for (int i = 0; i < n; i++) {
            sb.append(chars[i]);
        }
        return sb.toString();

=======

        int n = votes[0].length();
        int[][] count = new int[26][n];
        for (String vote : votes) {
            for (int i = 0; i < n; i++) {
                count[vote.charAt(i) - 'A'][i]++;
            }
        }
        Character[] t = new Character[n];
        for (int i = 0; i < n; i++) {
            t[i] = votes[0].charAt(i);
        }
        Arrays.sort(t, (a, b) -> {
            for (int i = 0; i < n; i++) {
                if (count[a - 'A'][i] != count[b - 'A'][i]) {
                    return count[b - 'A'][i] - count[a - 'A'][i];
                }
            }
            return a - b;
        });
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < n; i++) {
            sb.append(t[i]);
        }
        return sb.toString();

=======

        int n = votes[0].length();
        int[][] count = new int[26][n+1];
        for (int i = 0; i < 26; i++) {
            count[i][0] = i;
        }
        for (String vote : votes) {
            for (int i = 0; i < n; i++) {
                count[vote.charAt(i) - 'A'][i+1]++;
            }
        }
        Arrays.sort(count, (a, b) -> {
            for (int i = 1; i <= n; i++) {
                if (a[i] != b[i]) {
                    return b[i] - a[i];
                }
            }
            return a[0] - b[0];
        });
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < n; i++) {
            sb.append((char)('A' + count[i][0]));
        }
        return sb.toString();

=======

        int n = votes.length;
        int m = votes[0].length();
        int[][] count = new int[m][26];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                count[j][votes[i].charAt(j) - 'A']++;
            }
        }
        Character[] teams = new Character[m];
        for (int i = 0; i < m; i++) {
            teams[i] = votes[0].charAt(i);
        }
        Arrays.sort(teams, (t1, t2) -> {
            for (int i = 0; i < m; i++) {
                if (count[i][t1 - 'A'] != count[i][t2 - 'A']) {
                    return count[i][t2 - 'A'] - count[i][t1 - 'A'];
                }
            }
            return t1 - t2;
        });
        StringBuilder sb = new StringBuilder();
        for (char c : teams) {
            sb.append(c);
        }
        return sb.toString();

=======

        int n = votes[0].length();
        int[][] count = new int[26][n];
        for (int i = 0; i < votes.length; i++) {
            for (int j = 0; j < n; j++) {
                count[votes[i].charAt(j) - 'A'][j]++;
            }
        }
        int[] index = new int[26];
        for (int i = 0; i < 26; i++) {
            index[i] = i;
        }
        Arrays.sort(index, (a, b) -> {
            for (int i = 0; i < n; i++) {
                if (count[a][i] != count[b][i]) {
                    return count[b][i] - count[a][i];
                }
            }
            return a - b;
        });
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < 26; i++) {
            if (count[index[i]][0] == 0) {
                break;
            }
            sb.append((char) (index[i] + 'A'));
        }
        return sb.toString();

=======

        int n = votes.length;
        int m = votes[0].length();
        int[][] count = new int[m][26];
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                count[i][votes[j].charAt(i) - 'A']++;
            }
        }
        int[] order = new int[m];
        for (int i = 0; i < m; i++) {
            order[i] = i;
        }
        Arrays.sort(order, (i, j) -> {
            for (int k = 0; k < 26; k++) {
                if (count[i][k] != count[j][k]) {
                    return count[j][k] - count[i][k];
                }
            }
            return i - j;
        });
        char[] ans = new char[m];
        for (int i = 0; i < m; i++) {
            ans[i] = (char)(order[i] + 'A');
        }
        return new String(ans);

=======

        int n = votes[0].length();
        int[][] counts = new int[n][26];
        for (String vote: votes) {
            for (int i = 0; i < n; i++) {
                counts[i][vote.charAt(i) - 'A']++;
            }
        }
        Character[] rank = new Character[n];
        for (int i = 0; i < n; i++) {
            rank[i] = votes[0].charAt(i);
        }
        Arrays.sort(rank, (a, b) -> {
            for (int i = 0; i < n; i++) {
                if (counts[i][a - 'A'] != counts[i][b - 'A']) {
                    return counts[i][b - 'A'] - counts[i][a - 'A'];
                }
            }
            return a - b;
        });
        StringBuilder sb = new StringBuilder();
        for (char c: rank) {
            sb.append(c);
        }
        return sb.toString();

=======

        int n = votes[0].length();
        int[][] count = new int[n][26];
        for (int i = 0; i < n; ++i)
            for (int j = 0; j < 26; ++j)
                count[i][j] = 0;
        for (String vote : votes) {
            for (int i = 0; i < n; ++i)
                count[i][vote.charAt(i) - 'A'] -= 1;
        }
        Character[] teams = new Character[n];
        for (int i = 0; i < n; ++i)
            teams[i] = votes[0].charAt(i);
        Arrays.sort(teams, (a, b) -> {
            for (int i = 0; i < n; ++i) {
                if (count[i][a - 'A'] != count[i][b - 'A'])
                    return count[i][a - 'A'] - count[i][b - 'A'];
            }
            return a - b;
        });
        StringBuilder ans = new StringBuilder();
        for (char c : teams)
            ans.append(c);
        return ans.toString();

=======

        int len = votes[0].length();
        int[][] count = new int[len][26];
        for (int i = 0; i < len; i++) {
            for (String vote : votes) {
                count[i][vote.charAt(i) - 'A']++;
            }
        }
        Character[] chars = new Character[len];
        for (int i = 0; i < len; i++) {
            chars[i] = votes[0].charAt(i);
        }
        Arrays.sort(chars, (a, b) -> {
            for (int i = 0; i < len; i++) {
                if (count[i][a - 'A'] != count[i][b - 'A']) {
                    return count[i][b - 'A'] - count[i][a - 'A'];
                }
            }
            return a - b;
        });
        StringBuilder sb = new StringBuilder();
        for (char c : chars) {
            sb.append(c);
        }
        return sb.toString();
