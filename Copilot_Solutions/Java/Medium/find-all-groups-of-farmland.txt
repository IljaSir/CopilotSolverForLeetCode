Synthesizing 10/10 solutions

=======

        int m = land.length;
        int n = land[0].length;
        List<int[]> res = new ArrayList<>();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (land[i][j] == 1) {
                    int[] tmp = new int[4];
                    tmp[0] = i;
                    tmp[1] = j;
                    while (j < n && land[i][j] == 1) {
                        tmp[3] = j;
                        j++;
                    }
                    while (i < m && land[i][j - 1] == 1) {
                        tmp[2] = i;
                        i++;
                    }
                    i--;
                    res.add(tmp);
                }
            }
        }
        return res.toArray(new int[res.size()][]);

=======

        List<int[]> res = new ArrayList<>();
        int m = land.length;
        int n = land[0].length;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (land[i][j] == 1) {
                    int[] tmp = new int[4];
                    tmp[0] = i;
                    tmp[1] = j;
                    tmp[2] = i;
                    tmp[3] = j;
                    while (j < n && land[i][j] == 1) {
                        tmp[3] = j;
                        j++;
                    }
                    while (i < m && land[i][j - 1] == 1) {
                        tmp[2] = i;
                        i++;
                    }
                    res.add(tmp);
                    j--;
                }
            }
        }
        return res.toArray(new int[res.size()][]);

=======

        int m = land.length;
        int n = land[0].length;
        List<int[]> list = new ArrayList<>();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (land[i][j] == 1) {
                    int[] res = new int[4];
                    res[0] = i;
                    res[1] = j;
                    int x = i;
                    int y = j;
                    while (x < m && land[x][y] == 1) {
                        x++;
                    }
                    while (y < n && land[x - 1][y] == 1) {
                        y++;
                    }
                    res[2] = x - 1;
                    res[3] = y - 1;
                    list.add(res);
                }
            }
        }
        return list.toArray(new int[list.size()][]);

=======

        int m = land.length;
        int n = land[0].length;
        List<int[]> result = new ArrayList<>();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (land[i][j] == 1) {
                    int[] arr = new int[4];
                    arr[0] = i;
                    arr[1] = j;
                    land[i][j] = 0;
                    int x = i;
                    int y = j;
                    while (x < m && land[x][j] == 1) {
                        land[x][j] = 0;
                        x++;
                    }
                    while (y < n && land[i][y] == 1) {
                        land[i][y] = 0;
                        y++;
                    }
                    arr[2] = x - 1;
                    arr[3] = y - 1;
                    result.add(arr);
                }
            }
        }
        return result.toArray(new int[result.size()][]);

=======

        int m = land.length;
        int n = land[0].length;
        List<int[]> ans = new ArrayList<>();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (land[i][j] == 1) {
                    int[] res = new int[4];
                    res[0] = i;
                    res[1] = j;
                    while (j < n && land[i][j] == 1) {
                        j++;
                    }
                    res[3] = j - 1;
                    while (i < m && land[i][j - 1] == 1) {
                        i++;
                    }
                    res[2] = i - 1;
                    ans.add(res);
                }
            }
        }
        return ans.toArray(new int[ans.size()][]);

=======

        List<int[]> ans = new ArrayList<>();
        for (int i = 0; i < land.length; i++) {
            for (int j = 0; j < land[0].length; j++) {
                if (land[i][j] == 1) {
                    int[] group = new int[4];
                    group[0] = i;
                    group[1] = j;
                    group[2] = i;
                    group[3] = j;
                    dfs(land, i, j, group);
                    ans.add(group);
                }
            }
        }
        return ans.toArray(new int[0][]);

=======

        int m = land.length;
        int n = land[0].length;
        List<int[]> res = new ArrayList<>();
        for(int i = 0; i < m; i++){
            for(int j = 0; j < n; j++){
                if(land[i][j] == 1){
                    int[] r = new int[4];
                    r[0] = i;
                    r[1] = j;
                    r[2] = i;
                    r[3] = j;
                    int x = i;
                    int y = j;
                    while(x < m && land[x][y] == 1){
                        x++;
                    }
                    x--;
                    while(y < n && land[x][y] == 1){
                        y++;
                    }
                    y--;
                    r[2] = x;
                    r[3] = y;
                    res.add(r);
                    for(int k = i; k <= x; k++){
                        for(int l = j; l <= y; l++){
                            land[k][l] = 0;
                        }
                    }
                }
            }
        }
        int[][] r = new int[res.size()][4];
        for(int i = 0; i < res.size(); i++){
            r[i] = res.get(i);
        }
        return r;

=======

        int m = land.length;
        int n = land[0].length;
        boolean[][] visited = new boolean[m][n];
        List<int[]> res = new ArrayList<>();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (land[i][j] == 1 && !visited[i][j]) {
                    int[] r = new int[4];
                    r[0] = i;
                    r[1] = j;
                    dfs(land, visited, i, j, r);
                    res.add(r);
                }
            }
        }
        return res.toArray(new int[res.size()][]);
    }
    
    private void dfs(int[][] land, boolean[][] visited, int i, int j, int[] r) {
        int m = land.length;
        int n = land[0].length;
        if (i < 0 || i >= m || j < 0 || j >= n || visited[i][j] || land[i][j] == 0) {
            return;
        }
        visited[i][j] = true;
        r[2] = Math.max(r[2], i);
        r[3] = Math.max(r[3], j);
        dfs(land, visited, i - 1, j, r);
        dfs(land, visited, i + 1, j, r);
        dfs(land, visited, i, j - 1, r);
        dfs(land, visited, i, j + 1, r);

=======

        int m = land.length;
        int n = land[0].length;
        boolean[][] visited = new boolean[m][n];
        List<int[]> res = new ArrayList<>();
        for(int i = 0; i < m; i++){
            for(int j = 0; j < n; j++){
                if(visited[i][j] || land[i][j] == 0) continue;
                int[] temp = new int[4];
                temp[0] = i;
                temp[1] = j;
                int x = i;
                int y = j;
                while(x < m && land[x][y] == 1){
                    x++;
                }
                temp[2] = x - 1;
                while(y < n && land[x - 1][y] == 1){
                    y++;
                }
                temp[3] = y - 1;
                res.add(temp);
            }
        }
        int[][] ans = new int[res.size()][4];
        for(int i = 0; i < res.size(); i++){
            ans[i] = res.get(i);
        }
        return ans;

=======

        int m = land.length;
        int n = land[0].length;
        int[][] res = new int[m * n][4];
        int index = 0;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (land[i][j] == 1 && (i == 0 || land[i - 1][j] == 0) && (j == 0 || land[i][j - 1] == 0)) {
                    int x = i;
                    int y = j;
                    while (x < m && land[x][j] == 1) {
                        x++;
                    }
                    while (y < n && land[i][y] == 1) {
                        y++;
                    }
                    res[index++] = new int[]{i, j, x - 1, y - 1};
                }
            }
        }
        return Arrays.copyOf(res, index);
    }
}
