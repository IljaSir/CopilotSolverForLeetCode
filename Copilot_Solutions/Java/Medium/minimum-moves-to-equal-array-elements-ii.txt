Synthesizing 10/10 solutions (Duplicates hidden)

=======

        Arrays.sort(nums);
        int i = 0, j = nums.length - 1;
        int res = 0;
        while (i < j) {
            res += nums[j--] - nums[i++];
        }
        return res;

=======

        Arrays.sort(nums);
        int median = nums[nums.length / 2];
        int moves = 0;
        for (int num : nums) {
            moves += Math.abs(num - median);
        }
        return moves;

=======

        Arrays.sort(nums);
        int i = 0;
        int j = nums.length - 1;
        int res = 0;
        while (i < j) {
            res += nums[j--] - nums[i++];
        }
        return res;

=======

        Arrays.sort(nums);
        int median = nums[nums.length / 2];
        int moves = 0;
        for (int num : nums) {
            moves += Math.abs(median - num);
        }
        return moves;

=======

        Arrays.sort(nums);
        int median = nums[nums.length / 2];
        int result = 0;
        for (int i = 0; i < nums.length; i++) {
            result += Math.abs(nums[i] - median);
        }
        return result;

=======

        Arrays.sort(nums);
        int mid = nums[nums.length / 2];
        int sum = 0;
        for (int i = 0; i < nums.length; i++) {
            sum += Math.abs(nums[i] - mid);
        }
        return sum;

=======

        Arrays.sort(nums);
        int n = nums.length;
        int median = nums[n/2];
        int res = 0;
        for (int num : nums) {
            res += Math.abs(num - median);
        }
        return res;

=======

        int n = nums.length;
        int sum = 0;
        for (int i = 0; i < n; i++) {
            sum += nums[i];
        }
        Arrays.sort(nums);
        int median = nums[n / 2];
        int result = 0;
        for (int i = 0; i < n; i++) {
            result += Math.abs(nums[i] - median);
        }
        return result;
