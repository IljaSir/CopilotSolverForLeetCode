Synthesizing 10/10 solutions

=======

        int[] leftMax = new int[nums.length];
        leftMax[0] = nums[0];
        for (int i = 1; i < nums.length; i++) {
            leftMax[i] = Math.max(leftMax[i - 1], nums[i]);
        }
        int[] rightMin = new int[nums.length];
        rightMin[nums.length - 1] = nums[nums.length - 1];
        for (int i = nums.length - 2; i >= 0; i--) {
            rightMin[i] = Math.min(rightMin[i + 1], nums[i]);
        }
        for (int i = 1; i < nums.length; i++) {
            if (leftMax[i - 1] <= rightMin[i]) {
                return i;
            }
        }
        return -1;

=======

        int[] maxLeft = new int[nums.length];
        int[] minRight = new int[nums.length];
        maxLeft[0] = nums[0];
        for (int i = 1; i < nums.length; i++) {
            maxLeft[i] = Math.max(maxLeft[i - 1], nums[i]);
        }
        minRight[nums.length - 1] = nums[nums.length - 1];
        for (int i = nums.length - 2; i >= 0; i--) {
            minRight[i] = Math.min(minRight[i + 1], nums[i]);
        }
        for (int i = 0; i < nums.length - 1; i++) {
            if (maxLeft[i] <= minRight[i + 1]) {
                return i + 1;
            }
        }
        return -1;

=======

        int[] maxLeft = new int[nums.length];
        int[] minRight = new int[nums.length];
        maxLeft[0] = nums[0];
        for (int i = 1; i < nums.length; i++) {
            maxLeft[i] = Math.max(maxLeft[i-1], nums[i]);
        }
        minRight[nums.length-1] = nums[nums.length-1];
        for (int i = nums.length-2; i >= 0; i--) {
            minRight[i] = Math.min(minRight[i+1], nums[i]);
        }
        for (int i = 1; i < nums.length; i++) {
            if (maxLeft[i-1] <= minRight[i]) {
                return i;
            }
        }
        return -1;

=======

        int n = nums.length;
        int[] leftMax = new int[n];
        int[] rightMin = new int[n];
        leftMax[0] = nums[0];
        rightMin[n - 1] = nums[n - 1];
        for (int i = 1; i < n; i++) {
            leftMax[i] = Math.max(leftMax[i - 1], nums[i]);
            rightMin[n - i - 1] = Math.min(rightMin[n - i], nums[n - i - 1]);
        }
        for (int i = 1; i < n; i++) {
            if (leftMax[i - 1] <= rightMin[i]) {
                return i;
            }
        }
        return -1;

=======

        int n = nums.length;
        int[] left = new int[n];
        int[] right = new int[n];
        left[0] = nums[0];
        right[n-1] = nums[n-1];
        for(int i = 1; i < n; i++) {
            left[i] = Math.max(left[i-1], nums[i]);
        }
        for(int i = n-2; i >= 0; i--) {
            right[i] = Math.min(right[i+1], nums[i]);
        }
        for(int i = 1; i < n; i++) {
            if(left[i-1] <= right[i]) return i;
        }
        return -1;

=======

        int[] maxLeft = new int[nums.length];
        int[] minRight = new int[nums.length];
        int max = nums[0];
        for (int i = 0; i < nums.length; i++) {
            max = Math.max(max, nums[i]);
            maxLeft[i] = max;
        }
        int min = nums[nums.length - 1];
        for (int i = nums.length - 1; i >= 0; i--) {
            min = Math.min(min, nums[i]);
            minRight[i] = min;
        }
        for (int i = 1; i < nums.length; i++) {
            if (maxLeft[i - 1] <= minRight[i]) {
                return i;
            }
        }
        return -1;

=======

        int n = nums.length;
        int[] maxLeft = new int[n];
        int[] minRight = new int[n];
        int max = nums[0];
        for (int i = 0; i < n; i++) {
            max = Math.max(max, nums[i]);
            maxLeft[i] = max;
        }
        int min = nums[n - 1];
        for (int i = n - 1; i >= 0; i--) {
            min = Math.min(min, nums[i]);
            minRight[i] = min;
        }
        for (int i = 1; i < n; i++) {
            if (maxLeft[i - 1] <= minRight[i]) {
                return i;
            }
        }
        return 0;

=======

        int len = nums.length;
        int[] left = new int[len];
        int[] right = new int[len];
        left[0] = nums[0];
        right[len-1] = nums[len-1];
        for (int i = 1; i < len; i++) {
            left[i] = Math.max(left[i-1], nums[i]);
            right[len-1-i] = Math.min(right[len-i], nums[len-1-i]);
        }
        for (int i = 1; i < len; i++) {
            if (left[i-1] <= right[i]) {
                return i;
            }
        }
        return 1;

=======

        int n = nums.length;
        int[] maxLeft = new int[n];
        int[] minRight = new int[n];
        int m = nums[0];
        for (int i = 0; i < n; ++i) {
            m = Math.max(m, nums[i]);
            maxLeft[i] = m;
        }
        m = nums[n-1];
        for (int i = n - 1; i >= 0; --i) {
            m = Math.min(m, nums[i]);
            minRight[i] = m;
        }
        for (int i = 1; i < n; ++i) {
            if (maxLeft[i-1] <= minRight[i])
                return i;
        }
        return -1;

=======

        int[] max_left = new int[nums.length];
        int[] min_right = new int[nums.length];
        int max = Integer.MIN_VALUE;
        for (int i = 0; i < nums.length; i++) {
            max = Math.max(max, nums[i]);
            max_left[i] = max;
        }
        int min = Integer.MAX_VALUE;
        for (int i = nums.length - 1; i >= 0; i--) {
            min = Math.min(min, nums[i]);
            min_right[i] = min;
        }
        for (int i = 0; i < nums.length; i++) {
            if (max_left[i] <= min_right[i + 1]) {
                return i + 1;
            }
        }
        return 0;
