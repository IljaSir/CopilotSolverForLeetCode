Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int i = 0, j = 0;
        while (i < chars.length) {
            int count = 0;
            char cur = chars[i];
            while (i < chars.length && chars[i] == cur) {
                i++;
                count++;
            }
            chars[j++] = cur;
            if (count > 1) {
                for (char c : String.valueOf(count).toCharArray()) {
                    chars[j++] = c;
                }
            }
        }
        return j;

=======

        int n = chars.length;
        int i = 0;
        int j = 0;
        while (i < n) {
            int count = 0;
            char c = chars[i];
            while (i < n && chars[i] == c) {
                i++;
                count++;
            }
            chars[j++] = c;
            if (count > 1) {
                for (char ch: Integer.toString(count).toCharArray()) {
                    chars[j++] = ch;
                }
            }
        }
        return j;

=======

        int n = chars.length;
        int i = 0;
        int j = 0;
        while (i < n) {
            int count = 0;
            char c = chars[i];
            while (i < n && chars[i] == c) {
                i++;
                count++;
            }
            chars[j++] = c;
            if (count > 1) {
                for (char ch : String.valueOf(count).toCharArray()) {
                    chars[j++] = ch;
                }
            }
        }
        return j;

=======

        int i = 0;
        int j = 0;
        int n = chars.length;
        while (i < n) {
            int count = 0;
            char c = chars[i];
            while (i < n && chars[i] == c) {
                i++;
                count++;
            }
            chars[j++] = c;
            if (count > 1) {
                String s = String.valueOf(count);
                for (char ch : s.toCharArray()) {
                    chars[j++] = ch;
                }
            }
        }
        return j;

=======

        int i = 0, j = 0, n = chars.length;
        while (j < n) {
            int k = j;
            while (k < n && chars[k] == chars[j]) {
                k++;
            }
            chars[i++] = chars[j];
            if (k - j > 1) {
                String count = String.valueOf(k - j);
                for (int m = 0; m < count.length(); m++) {
                    chars[i++] = count.charAt(m);
                }
            }
            j = k;
        }
        return i;

=======

        int i = 0;
        int j = 0;
        int count = 0;
        while (j < chars.length) {
            count = 0;
            while (j < chars.length && chars[i] == chars[j]) {
                j++;
                count++;
            }
            chars[i] = chars[j - 1];
            i++;
            if (count > 1) {
                for (char c : String.valueOf(count).toCharArray()) {
                    chars[i] = c;
                    i++;
                }
            }
        }
        return i;

=======

        int n = chars.length;
        int count = 1;
        int idx = 0;
        for (int i = 0; i < n; i++) {
            if (i < n - 1 && chars[i] == chars[i + 1]) {
                count++;
            } else {
                chars[idx++] = chars[i];
                if (count > 1) {
                    String cnt = String.valueOf(count);
                    for (char c : cnt.toCharArray()) {
                        chars[idx++] = c;
                    }
                }
                count = 1;
            }
        }
        return idx;

=======

        if (chars.length < 2) return chars.length;
        int i = 0, j = 0, k = 0;
        while (j < chars.length) {
            while (j < chars.length && chars[i] == chars[j]) {
                j++;
            }
            chars[k++] = chars[i];
            if (j - i > 1) {
                for (char c : String.valueOf(j - i).toCharArray()) {
                    chars[k++] = c;
                }
            }
            i = j;
        }
        return k;

=======

        int n = chars.length;
        int i = 0;
        int j = 0;
        int k = 0;
        int count = 0;
        while (i < n) {
            count = 0;
            while (j < n && chars[i] == chars[j]) {
                j++;
                count++;
            }
            chars[k++] = chars[i];
            if (count > 1) {
                String s = String.valueOf(count);
                for (char c : s.toCharArray()) {
                    chars[k++] = c;
                }
            }
            i = j;
        }
        return k;
