Synthesizing 10/10 solutions

=======

        int n = nums.length;
        int[] dp = new int[1 << n];
        for (int i = 0; i < (1 << n); i++) {
            for (int j = 0; j < n; j++) {
                if ((i & (1 << j)) > 0) {
                    dp[i] = dp[i ^ (1 << j)] | nums[j];
                    break;
                }
            }
        }
        int max = 0;
        for (int i = 0; i < (1 << n); i++) {
            max = Math.max(max, dp[i]);
        }
        int res = 0;
        for (int i = 0; i < (1 << n); i++) {
            if (dp[i] == max) {
                res++;
            }
        }
        return res;

=======

        int n = nums.length;
        int max = 0;
        for (int i = 0; i < n; i++) {
            max |= nums[i];
        }
        int[] dp = new int[max + 1];
        dp[0] = 1;
        for (int i = 0; i < n; i++) {
            for (int j = max; j >= 0; j--) {
                if (dp[j] > 0) {
                    dp[j | nums[i]] += dp[j];
                }
            }
        }
        return dp[max];

=======

        int n = nums.length;
        int max = 0;
        int count = 0;
        for (int i = 0; i < 1 << n; i++) {
            int or = 0;
            for (int j = 0; j < n; j++) {
                if ((i & (1 << j)) != 0) {
                    or |= nums[j];
                }
            }
            if (or > max) {
                max = or;
                count = 1;
            } else if (or == max) {
                count++;
            }
        }
        return count;

=======

        int[] count = new int[1 << 17];
        count[0] = 1;
        for (int num : nums) {
            int[] newCount = new int[1 << 17];
            for (int i = 0; i < 1 << 17; i++) {
                newCount[i | num] += count[i];
            }
            count = newCount;
        }
        int max = 0;
        for (int i = 0; i < 1 << 17; i++) {
            max = Math.max(max, i);
        }
        return count[max];

=======

        int n = nums.length;
        int max = 0;
        for (int i = 0; i < n; ++i) {
            max |= nums[i];
        }
        int[] count = new int[max + 1];
        count[0] = 1;
        for (int i = 0; i < n; ++i) {
            for (int j = max; j >= 0; --j) {
                count[j | nums[i]] += count[j];
            }
        }
        return count[max];

=======

        int n = nums.length;
        int[] dp = new int[1<<n];
        int max = 0;
        for (int i = 0; i < (1<<n); i++) {
            for (int j = 0; j < n; j++) {
                if ((i & (1<<j)) != 0) {
                    dp[i] = dp[i ^ (1<<j)] | nums[j];
                    max = Math.max(max, dp[i]);
                }
            }
        }
        int count = 0;
        for (int i = 0; i < (1<<n); i++) {
            if (dp[i] == max) {
                count++;
            }
        }
        return count;

=======

        int n = nums.length;
        int max = 0;
        for (int i = 0; i < n; i++) {
            max = Math.max(max, nums[i]);
            for (int j = i + 1; j < n; j++) {
                max = Math.max(max, nums[i] | nums[j]);
            }
        }
        int cnt = 0;
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                if ((nums[i] | nums[j]) == max) {
                    cnt++;
                }
            }
        }
        return cnt;

=======

        int n = nums.length;
        int max = 0;
        int res = 0;
        for (int i = 0; i < (1 << n); i++) {
            int curr = 0;
            for (int j = 0; j < n; j++) {
                if ((i & (1 << j)) != 0) {
                    curr |= nums[j];
                }
            }
            if (curr > max) {
                max = curr;
                res = 1;
            } else if (curr == max) {
                res++;
            }
        }
        return res;

=======

        int n = nums.length;
        int max = 0;
        int[] count = new int[1 << n];
        int[] dp = new int[1 << n];
        for (int i = 0; i < (1 << n); i++) {
            for (int j = 0; j < n; j++) {
                if (((i >> j) & 1) == 1) {
                    dp[i] |= nums[j];
                }
            }
            count[dp[i]]++;
            max = Math.max(max, dp[i]);
        }
        return count[max];

=======

        int max = 0;
        int n = nums.length;
        int[] dp = new int[1 << n];
        for (int i = 0; i < (1 << n); i++) {
            int curr = 0;
            for (int j = 0; j < n; j++) {
                if (((i >> j) & 1) != 0) {
                    curr |= nums[j];
                }
            }
            dp[i] = curr;
            max = Math.max(max, curr);
        }
        int count = 0;
        for (int i = 0; i < (1 << n); i++) {
            if (dp[i] == max) {
                count++;
            }
        }
        return count;
