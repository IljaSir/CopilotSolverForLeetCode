Synthesizing 10/10 solutions

=======

        int sum = 0;
        for (int i = 0; i < s.length(); i++) {
            int[] freq = new int[26];
            for (int j = i; j < s.length(); j++) {
                int index = s.charAt(j) - 'a';
                freq[index]++;
                int max = -1;
                int min = Integer.MAX_VALUE;
                for (int k = 0; k < 26; k++) {
                    if (freq[k] > 0) {
                        max = Math.max(max, freq[k]);
                        min = Math.min(min, freq[k]);
                    }
                }
                sum += max - min;
            }
        }
        return sum;

=======

        int ans = 0;
        for (int i = 0; i < s.length(); i++) {
            int[] count = new int[26];
            for (int j = i; j < s.length(); j++) {
                count[s.charAt(j) - 'a']++;
                int min = Integer.MAX_VALUE;
                int max = Integer.MIN_VALUE;
                for (int k = 0; k < 26; k++) {
                    if (count[k] > 0) {
                        min = Math.min(min, count[k]);
                        max = Math.max(max, count[k]);
                    }
                }
                ans += max - min;
            }
        }
        return ans;

=======

        int sum = 0;
        for (int i = 0; i < s.length(); i++) {
            int[] counts = new int[26];
            for (int j = i; j < s.length(); j++) {
                counts[s.charAt(j) - 'a']++;
                int max = 0, min = Integer.MAX_VALUE;
                for (int k = 0; k < 26; k++) {
                    if (counts[k] > 0) {
                        max = Math.max(max, counts[k]);
                        min = Math.min(min, counts[k]);
                    }
                }
                sum += max - min;
            }
        }
        return sum;

=======

        int ans = 0;
        for (int i = 0; i < s.length(); ++i) {
            int[] cnt = new int[26];
            for (int j = i; j < s.length(); ++j) {
                cnt[s.charAt(j) - 'a']++;
                int max = 0;
                int min = 500;
                for (int k = 0; k < 26; ++k) {
                    if (cnt[k] > 0) {
                        max = Math.max(max, cnt[k]);
                        min = Math.min(min, cnt[k]);
                    }
                }
                ans += max - min;
            }
        }
        return ans;

=======

        int n = s.length();
        int ans = 0;
        for (int i = 0; i < n; i++) {
            int[] count = new int[26];
            for (int j = i; j < n; j++) {
                count[s.charAt(j) - 'a']++;
                int max = 0, min = n;
                for (int k = 0; k < 26; k++) {
                    if (count[k] > 0) {
                        max = Math.max(max, count[k]);
                        min = Math.min(min, count[k]);
                    }
                }
                ans += max - min;
            }
        }
        return ans;

=======

        int n = s.length();
        int sum = 0;
        for (int i = 0; i < n; i++) {
            int[] cnt = new int[26];
            for (int j = i; j < n; j++) {
                cnt[s.charAt(j) - 'a']++;
                int max = 0, min = 500;
                for (int k = 0; k < 26; k++) {
                    if (cnt[k] != 0) {
                        max = Math.max(max, cnt[k]);
                        min = Math.min(min, cnt[k]);
                    }
                }
                sum += max - min;
            }
        }
        return sum;

=======

        int sum = 0;
        for(int i = 0; i < s.length(); i++){
            int[] freq = new int[26];
            for(int j = i; j < s.length(); j++){
                freq[s.charAt(j) - 'a']++;
                sum += getBeauty(freq);
            }
        }
        return sum;
    }
    public int getBeauty(int[] freq){
        int max = 0;
        int min = Integer.MAX_VALUE;
        for(int i = 0; i < freq.length; i++){
            if(freq[i] > 0){
                max = Math.max(max, freq[i]);
                min = Math.min(min, freq[i]);
            }
        }
        return max - min;

=======

        int n = s.length();
        int res = 0;
        int[] freq = new int[26];
        for (int i = 0; i < n; i++) {
            Arrays.fill(freq, 0);
            for (int j = i; j < n; j++) {
                freq[s.charAt(j) - 'a']++;
                int max = 0;
                int min = 500;
                for (int k = 0; k < 26; k++) {
                    if (freq[k] == 0) continue;
                    max = Math.max(max, freq[k]);
                    min = Math.min(min, freq[k]);
                }
                res += max - min;
            }
        }
        return res;

=======

        int sum = 0;
        for (int i = 0; i < s.length(); i++) {
            int[] count = new int[26];
            int max = 0, min = 0;
            for (int j = i; j < s.length(); j++) {
                int index = s.charAt(j) - 'a';
                count[index]++;
                max = Math.max(max, count[index]);
                min = Math.min(min, count[index] == 0 ? Integer.MAX_VALUE : count[index]);
                sum += max - min;
            }
        }
        return sum;

=======

        int i, j, k, l, n = s.length();
        int[] cnt = new int[26];
        int[][] pre = new int[n][26];
        int ans = 0;
        for (i = 0; i < n; ++i) {
            ++cnt[s.charAt(i) - 'a'];
            for (j = 0; j < 26; ++j) {
                pre[i][j] = cnt[j];
            }
        }
        for (i = 0; i < n; ++i) {
            for (j = i; j < n; ++j) {
                int min = Integer.MAX_VALUE, max = Integer.MIN_VALUE;
                for (k = 0; k < 26; ++k) {
                    int c = pre[j][k] - (i > 0 ? pre[i - 1][k] : 0);
                    if (c > 0) {
                        min = Math.min(min, c);
                        max = Math.max(max, c);
                    }
                }
                ans += max - min;
            }
        }
        return ans;
