Synthesizing 10/10 solutions

=======

        int i = 0;
        for (int[] group : groups) {
            boolean found = false;
            for (int j = i; j < nums.length; j++) {
                if (nums[j] == group[0]) {
                    int k = 0;
                    while (k < group.length && j < nums.length && nums[j] == group[k]) {
                        j++;
                        k++;
                    }
                    if (k == group.length) {
                        found = true;
                        i = j;
                        break;
                    }
                }
            }
            if (!found) {
                return false;
            }
        }
        return true;

=======

        int i = 0;
        int j = 0;
        int k = 0;
        while (i < nums.length && j < groups.length) {
            if (nums[i] == groups[j][k]) {
                i++;
                k++;
                if (k == groups[j].length) {
                    k = 0;
                    j++;
                }
            } else {
                i = i - k + 1;
                k = 0;
            }
        }
        return j == groups.length;

=======

        int i = 0;
        for (int[] group : groups) {
            int j = 0;
            while (i < nums.length) {
                if (nums[i] == group[j]) {
                    j++;
                    if (j == group.length) {
                        i++;
                        break;
                    }
                }
                i++;
            }
            if (j != group.length) {
                return false;
            }
        }
        return true;

=======

        int n = groups.length;
        int m = nums.length;
        int i = 0;
        int j = 0;
        while (i < n && j < m) {
            int[] group = groups[i];
            int k = 0;
            while (j < m && k < group.length) {
                if (group[k] == nums[j]) {
                    k++;
                }
                j++;
            }
            if (k == group.length) {
                i++;
            } else {
                j = j - k + 1;
            }
        }
        return i == n;

=======

        int i = 0;
        int j = 0;
        while (i < groups.length && j < nums.length) {
            int[] group = groups[i];
            int k = 0;
            while (k < group.length && j < nums.length) {
                if (group[k] != nums[j]) {
                    j++;
                } else {
                    k++;
                    j++;
                }
            }
            if (k == group.length) {
                i++;
            }
        }
        return i == groups.length;

=======

        int i = 0;
        int j = 0;
        while (i < groups.length && j < nums.length) {
            int[] group = groups[i];
            if (group[0] != nums[j]) {
                j++;
                continue;
            }
            int k = 0;
            while (k < group.length && j < nums.length && group[k] == nums[j]) {
                k++;
                j++;
            }
            if (k == group.length) {
                i++;
            } else {
                j -= k - 1;
            }
        }
        return i == groups.length;

=======

        int j = 0;
        for (int[] group : groups) {
            int i = 0;
            while (j < nums.length) {
                if (nums[j] == group[i]) {
                    i++;
                    j++;
                    if (i == group.length) {
                        break;
                    }
                } else {
                    j++;
                }
            }
            if (i != group.length) {
                return false;
            }
        }
        return true;

=======

        int index = 0;
        for (int[] group : groups) {
            int i = 0;
            boolean found = false;
            while (index + i < nums.length) {
                if (nums[index + i] == group[i]) {
                    i++;
                    if (i == group.length) {
                        found = true;
                        break;
                    }
                } else {
                    i = 0;
                    index++;
                }
            }
            if (!found) {
                return false;
            }
            index += group.length;
        }
        return true;

=======

        int i = 0;
        for (int[] group : groups) {
            int n = group.length;
            int j = i;
            while (j <= nums.length - n) {
                boolean match = true;
                for (int k = 0; k < n; k++) {
                    if (nums[j + k] != group[k]) {
                        match = false;
                        break;
                    }
                }
                if (match) {
                    i = j + n;
                    break;
                }
                j++;
            }
            if (j == nums.length - n + 1) {
                return false;
            }
        }
        return true;

=======

        int n = groups.length;
        int i = 0;
        for (int j = 0; j < n; j++) {
            int[] group = groups[j];
            int m = group.length;
            boolean found = false;
            while (i + m <= nums.length) {
                boolean match = true;
                for (int k = 0; k < m; k++) {
                    if (nums[i + k] != group[k]) {
                        match = false;
                        break;
                    }
                }
                if (match) {
                    found = true;
                    break;
                }
                i++;
            }
            if (!found) {
                return false;
            }
            i += m;
        }
        return true;
