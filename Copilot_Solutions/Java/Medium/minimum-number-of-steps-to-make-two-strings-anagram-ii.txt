Synthesizing 10/10 solutions

=======

        int[] count = new int[26];
        for (int i = 0; i < s.length(); i++) {
            count[s.charAt(i) - 'a']++;
            count[t.charAt(i) - 'a']--;
        }
        int result = 0;
        for (int i = 0; i < 26; i++) {
            if (count[i] > 0) {
                result += count[i];
            }
        }
        return result;

=======

        int[] freq = new int[26];
        for (int i = 0; i < s.length(); i++) {
            freq[s.charAt(i) - 'a']++;
            freq[t.charAt(i) - 'a']--;
        }
        int ans = 0;
        for (int f : freq)
            ans += Math.max(0, f);
        return ans;

=======

        int[] count = new int[26];
        for (char c : s.toCharArray()) {
            count[c - 'a']++;
        }
        for (char c : t.toCharArray()) {
            count[c - 'a']--;
        }
        int res = 0;
        for (int i = 0; i < 26; i++) {
            if (count[i] > 0) {
                res += count[i];
            }
        }
        return res;

=======

        int[] count = new int[26];
        for (char c : s.toCharArray()) {
            count[c - 'a']++;
        }
        for (char c : t.toCharArray()) {
            count[c - 'a']--;
        }
        int diff = 0;
        for (int i : count) {
            diff += i > 0 ? i : 0;
        }
        return diff;

=======

        int[] cnt = new int[26];
        for (int i = 0; i < s.length(); i++) {
            cnt[s.charAt(i) - 'a']++;
            cnt[t.charAt(i) - 'a']--;
        }
        int ans = 0;
        for (int i = 0; i < 26; i++) {
            if (cnt[i] > 0) {
                ans += cnt[i];
            }
        }
        return ans;

=======

        int[] map = new int[26];
        for (int i = 0; i < s.length(); i++) {
            map[s.charAt(i) - 'a']++;
            map[t.charAt(i) - 'a']--;
        }
        int res = 0;
        for (int i = 0; i < 26; i++) {
            if (map[i] > 0) {
                res += map[i];
            }
        }
        return res;

=======

        int[] freqS = new int[26];
        int[] freqT = new int[26];
        for (int i = 0; i < s.length(); i++) {
            freqS[s.charAt(i) - 'a']++;
            freqT[t.charAt(i) - 'a']++;
        }
        int res = 0;
        for (int i = 0; i < 26; i++) {
            res += Math.max(freqS[i] - freqT[i], 0);
        }
        return res;

=======

        int[] cnts = new int[26];
        for (char c : s.toCharArray()) {
            cnts[c - 'a']++;
        }
        for (char c : t.toCharArray()) {
            cnts[c - 'a']--;
        }
        int ans = 0;
        for (int cnt : cnts) {
            ans += Math.abs(cnt);
        }
        return ans / 2;

=======

        int[] sChars = new int[26];
        int[] tChars = new int[26];
        for (int i = 0; i < s.length(); i++) {
            sChars[s.charAt(i) - 'a']++;
            tChars[t.charAt(i) - 'a']++;
        }
        int diff = 0;
        for (int i = 0; i < 26; i++) {
            diff += Math.max(0, tChars[i] - sChars[i]);
        }
        return diff;

=======

        int[] sArr = new int[26];
        int[] tArr = new int[26];
        for (char c : s.toCharArray()) {
            sArr[c - 'a']++;
        }
        for (char c : t.toCharArray()) {
            tArr[c - 'a']++;
        }
        int count = 0;
        for (int i = 0; i < 26; i++) {
            if (sArr[i] > tArr[i]) {
                count += sArr[i] - tArr[i];
            }
        }
        return count;
