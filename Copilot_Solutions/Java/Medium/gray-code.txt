Synthesizing 10/10 solutions (Duplicates hidden)

=======

        List<Integer> result = new ArrayList<>();
        result.add(0);
        for (int i = 0; i < n; i++) {
            int size = result.size();
            for (int j = size - 1; j >= 0; j--) {
                result.add(result.get(j) | (1 << i));
            }
        }
        return result;

=======

        List<Integer> result = new ArrayList<>();
        result.add(0);
        for (int i = 0; i < n; i++) {
            int size = result.size();
            for (int j = size - 1; j >= 0; j--) {
                result.add(result.get(j) | 1 << i);
            }
        }
        return result;

=======

        List<Integer> res = new ArrayList<>();
        res.add(0);
        for (int i = 0; i < n; i++) {
            int size = res.size();
            for (int j = size - 1; j >= 0; j--) {
                res.add(res.get(j) | 1 << i);
            }
        }
        return res;

=======

        List<Integer> res = new ArrayList<>();
        res.add(0);
        for (int i = 0; i < n; i++) {
            for (int j = res.size() - 1; j >= 0; j--) {
                res.add(res.get(j) | (1 << i));
            }
        }
        return res;

=======

        List<Integer> res = new ArrayList<Integer>();
        res.add(0);
        for (int i = 0; i < n; i++) {
            int size = res.size();
            for (int j = size - 1; j >= 0; j--) {
                res.add(res.get(j) | 1 << i);
            }
        }
        return res;

=======

        List<Integer> result = new ArrayList<>();
        result.add(0);
        for (int i = 0; i < n; i++) {
            int highestBit = 1 << i;
            for (int j = result.size() - 1; j >= 0; j--) {
                result.add(highestBit | result.get(j));
            }
        }
        return result;

=======

        List<Integer> result = new ArrayList<>();
        result.add(0);
        for (int i = 0; i < n; i++) {
            int highestBit = 1 << i;
            for (int j = result.size() - 1; j >= 0; j--) {
                result.add(highestBit + result.get(j));
            }
        }
        return result;

=======

        List<Integer> ans = new ArrayList<>();
        ans.add(0);
        for (int i = 0; i < n; ++i) {
            int inc = 1 << i;
            for (int j = ans.size() - 1; j >= 0; --j) {
                ans.add(ans.get(j) + inc);
            }
        }
        return ans;

=======

        List<Integer> code = new ArrayList<>();
        code.add(0);
        if (n == 0) {
            return code;
        }
        code.add(1);
        if (n == 1) {
            return code;
        }
        for (int i = 2; i <= n; i++) {
            int size = code.size();
            for (int j = size - 1; j >= 0; j--) {
                int newNum = code.get(j) + (int) Math.pow(2, i - 1);
                code.add(newNum);
            }
        }
        return code;
