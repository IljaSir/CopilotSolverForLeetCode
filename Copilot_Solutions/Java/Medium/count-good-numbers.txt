Synthesizing 10/10 solutions

=======

        long ans = 1;
        long mod = (long) (1e9 + 7);
        while (n > 0) {
            if (n % 2 == 1) {
                ans = ans * 5 % mod;
            }
            ans = ans * ans % mod;
            n /= 2;
        }
        return (int) ans;

=======

        int mod = 1000000007;
        long even = n / 2;
        long odd = n - even;
        return (int) ((powmod(5, even, mod) * powmod(4, odd, mod)) % mod);

=======

        long mod = 1000000007;
        long even = n / 2;
        long odd = n - even;
        return (int) ((fastPow(5, even, mod) * fastPow(4, odd, mod)) % mod);
    }
    public long fastPow(long x, long n, long mod) {
        if (n == 0) {
            return 1;
        }
        long half = fastPow(x, n / 2, mod);
        if (n % 2 == 0) {
            return (half * half) % mod;
        }
        return (half * half % mod) * x % mod;

=======

        long even = n/2;
        long odd = (n+1)/2;
        return (int)((pow(5,even)*pow(4,odd))%1000000007);

=======

        long even = n / 2;
        long odd = (n + 1) / 2;
        long res = 1;
        res = res * pow(5, even);
        res = res % 1000000007;
        res = res * pow(4, odd);
        res = res % 1000000007;
        return (int) res;
    }
    
    private long pow(long x, long y) {
        long res = 1;
        while (y > 0) {
            if (y % 2 == 1) {
                res = res * x;
                res = res % 1000000007;
            }
            x = x * x;
            x = x % 1000000007;
            y = y / 2;
        }
        return res;

=======

        long ans = 1;
        long MOD = 1000000007;
        long even = n / 2;
        long odd = n - even;
        ans = (ans * pow(5, even, MOD)) % MOD;
        ans = (ans * pow(4, odd, MOD)) % MOD;
        return (int)ans;

=======

        long mod = 1000000000 + 7;
        long n1 = n / 2;
        long n2 = n - n1;
        long res = 1;
        for (int i = 0; i < n1; i++) {
            res = (res * 5) % mod;
        }
        for (int i = 0; i < n2; i++) {
            res = (res * 4) % mod;
        }
        return (int) res;

=======

        long res = 1;
        long mod = 1000000007;
        long even = n/2;
        long odd = n - even;
        res = res * pow(5, even, mod) % mod;
        res = res * pow(4, odd, mod) % mod;
        return (int)res;
    }
    
    public long pow(long a, long b, long mod) {
        long res = 1;
        while (b > 0) {
            if ((b & 1) == 1) {
                res = res * a % mod;
            }
            a = a * a % mod;
            b >>= 1;
        }
        return res;

=======

        long res = 1;
        long mod = (long)Math.pow(10, 9) + 7;
        long a = n / 2;
        long b = n - a;
        res = res * (long)Math.pow(5, a) % mod;
        res = res * (long)Math.pow(4, b) % mod;
        return (int)res;

=======

        long ans = 1;
        // even digits ar
