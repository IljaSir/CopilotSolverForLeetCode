Synthesizing 10/10 solutions

=======

        int max = 0;
        int count = 0;
        for (int i = 0; i < flips.length; i++) {
            max = Math.max(max, flips[i]);
            if (max == i + 1) {
                count++;
            }
        }
        return count;

=======

        int res = 0;
        int max = 0;
        for (int i = 0; i < flips.length; i++) {
            max = Math.max(max, flips[i]);
            if (max == i + 1) {
                res++;
            }
        }
        return res;

=======

        int ans = 0;
        int max = 0;
        for (int i = 0; i < flips.length; i++) {
            max = Math.max(max, flips[i]);
            if (max == i + 1) {
                ans++;
            }
        }
        return ans;

=======

        int result = 0;
        int max = 0;
        for (int i = 0; i < flips.length; i++) {
            max = Math.max(max, flips[i]);
            if (max == i + 1) {
                result++;
            }
        }
        return result;

=======

        int max = 0;
        int result = 0;
        for (int i = 0; i < flips.length; i++) {
            max = Math.max(max, flips[i]);
            if (max == i + 1) {
                result++;
            }
        }
        return result;

=======

        int res = 0, right = 0;
        for (int i = 0; i < flips.length; i++) {
            right = Math.max(right, flips[i]);
            if (right == i + 1) {
                res++;
            }
        }
        return res;

=======

        int n = flips.length;
        int max = flips[0];
        int ans = 0;
        for(int i = 0; i < n; i++) {
            max = Math.max(max, flips[i]);
            if(max == i + 1) ans++;
        }
        return ans;

=======

        int n = flips.length;
        int[] arr = new int[n + 1];
        int max = 0;
        int res = 0;
        for (int i = 0; i < n; i++) {
            arr[flips[i]]++;
            max = Math.max(max, flips[i]);
            if (max == i + 1) {
                res++;
            }
        }
        return res;

=======

        int on = 0, ans = 0;
        for (int i = 0; i < flips.length; ++i) {
            on += 1;
            if (on == flips[i]) {
                while (i + 1 < flips.length && flips[i + 1] == flips[i] + 1) {
                    ++i;
                }
                ++ans;
            }
        }
        return ans;

=======

        int n = flips.length;
        int[] arr = new int[n+1];
        int max = 0;
        int count = 0;
        for(int i = 0; i < n; i++) {
            max = Math.max(max, flips[i]);
            arr[flips[i]] = 1;
            if(max == i + 1) {
                int j = 1;
                while(j <= i + 1 && arr[j] == 1) {
                    j++;
                }
                if(j == i + 2) {
                    count++;
                }
            }
        }
        return count;
