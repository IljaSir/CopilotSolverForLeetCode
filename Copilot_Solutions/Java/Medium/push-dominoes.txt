Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int n = dominoes.length();
        int[] forces = new int[n];
        int force = 0;
        for (int i = 0; i < n; i++) {
            if (dominoes.charAt(i) == 'R') force = n;
            else if (dominoes.charAt(i) == 'L') force = 0;
            else force = Math.max(force - 1, 0);
            forces[i] += force;
        }
        force = 0;
        for (int i = n - 1; i >= 0; i--) {
            if (dominoes.charAt(i) == 'L') force = n;
            else if (dominoes.charAt(i) == 'R') force = 0;
            else force = Math.max(force - 1, 0);
            forces[i] -= force;
        }
        StringBuilder res = new StringBuilder();
        for (int f : forces) {
            if (f > 0) res.append('R');
            else if (f < 0) res.append('L');
            else res.append('.');
        }
        return res.toString();

=======

        int n = dominoes.length();
        int[] force = new int[n];
        int f = 0;
        for (int i = 0; i < n; i++) {
            if (dominoes.charAt(i) == 'R') {
                f = n;
            } else if (dominoes.charAt(i) == 'L') {
                f = 0;
            } else {
                f = Math.max(f - 1, 0);
            }
            force[i] += f;
        }
        for (int i = n - 1; i >= 0; i--) {
            if (dominoes.charAt(i) == 'L') {
                f = n;
            } else if (dominoes.charAt(i) == 'R') {
                f = 0;
            } else {
                f = Math.max(f - 1, 0);
            }
            force[i] -= f;
        }
        StringBuilder ans = new StringBuilder();
        for (int i = 0; i < n; i++) {
            if (force[i] > 0) {
                ans.append('R');
            } else if (force[i] < 0) {
                ans.append('L');
            } else {
                ans.append('.');
            }
        }
        return ans.toString();

=======

        int n = dominoes.length();
        int[] force = new int[n];
        int f = 0;
        for (int i = 0; i < n; i++) {
            if (dominoes.charAt(i) == 'R') {
                f = n;
            } else if (dominoes.charAt(i) == 'L') {
                f = 0;
            } else {
                f = Math.max(f - 1, 0);
            }
            force[i] += f;
        }
        
        for (int i = n - 1; i >= 0; i--) {
            if (dominoes.charAt(i) == 'L') {
                f = n;
            } else if (dominoes.charAt(i) == 'R') {
                f = 0;
            } else {
                f = Math.max(f - 1, 0);
            }
            force[i] -= f;
        }
        
        StringBuilder ans = new StringBuilder();
        for (int frc : force) {
            if (frc > 0) {
                ans.append('R');
            } else if (frc < 0) {
                ans.append('L');
            } else {
                ans.append('.');
            }
        }
        return ans.toString();

=======

        char[] arr = dominoes.toCharArray();
        int n = arr.length;
        int[] force = new int[n];
        int f = 0;
        for (int i = 0; i < n; i++) {
            if (arr[i] == 'R') {
                f = n;
            } else if (arr[i] == 'L') {
                f = 0;
            } else {
                f = Math.max(f - 1, 0);
            }
            force[i] += f;
        }
        for (int i = n - 1; i >= 0; i--) {
            if (arr[i] == 'L') {
                f = n;
            } else if (arr[i] == 'R') {
                f = 0;
            } else {
                f = Math.max(f - 1, 0);
            }
            force[i] -= f;
        }
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < n; i++) {
            if (force[i] > 0) {
                sb.append('R');
            } else if (force[i] < 0) {
                sb.append('L');
            } else {
                sb.append('.');
            }
        }
        return sb.toString();

=======

        int n = dominoes.length();
        int[] left = new int[n];
        int[] right = new int[n];
        int force = 0;
        for (int i = 0; i < n; i++) {
            if (dominoes.charAt(i) == 'R') {
                force = n;
            } else if (dominoes.charAt(i) == 'L') {
                force = 0;
            } else {
                force = Math.max(force - 1, 0);
            }
            right[i] = force;
        }
        force = 0;
        for (int i = n - 1; i >= 0; i--) {
            if (dominoes.charAt(i) == 'L') {
                force = n;
            } else if (dominoes.charAt(i) == 'R') {
                force = 0;
            } else {
                force = Math.max(force - 1, 0);
            }
            left[i] = force;
        }
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < n; i++) {
            if (left[i] > right[i]) {
                sb.append('L');
            } else if (left[i] < right[i]) {
                sb.append('R');
            } else {
                sb.append('.');
            }
        }
        return sb.toString();

=======

        char[] chars = dominoes.toCharArray();
        int n = chars.length;
        int[] force = new int[n];
        int f = 0;
        for (int i = 0; i < n; i++) {
            if (chars[i] == 'R') f = n;
            else if (chars[i] == 'L') f = 0;
            else f = Math.max(f - 1, 0);
            force[i] += f;
        }
        f = 0;
        for (int i = n - 1; i >= 0; i--) {
            if (chars[i] == 'L') f = n;
            else if (chars[i] == 'R') f = 0;
            else f = Math.max(f - 1, 0);
            force[i] -= f;
        }
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < n; i++) {
            if (force[i] > 0) sb.append('R');
            else if (force[i] < 0) sb.append('L');
            else sb.append('.');
        }
        return sb.toString();

=======

        char[] domino = dominoes.toCharArray();
        int n = domino.length;
        int[] force = new int[n];
        int f = 0;
        for (int i = 0; i < n; i++) {
            if (domino[i] == 'R') {
                f = n;
            } else if (domino[i] == 'L') {
                f = 0;
            } else {
                f = Math.max(f - 1, 0);
            }
            force[i] += f;
        }
        for (int i = n - 1; i >= 0; i--) {
            if (domino[i] == 'L') {
                f = n;
            } else if (domino[i] == 'R') {
                f = 0;
            } else {
                f = Math.max(f - 1, 0);
            }
            force[i] -= f;
        }
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < n; i++) {
            if (force[i] > 0) {
                sb.append('R');
            } else if (force[i] < 0) {
                sb.append('L');
            } else {
                sb.append('.');
            }
        }
        return sb.toString();

=======

        char[] arr = dominoes.toCharArray();
        int n = arr.length;
        int[] left = new int[n];
        int[] right = new int[n];
        int max = 0;
        for (int i = 0; i < n; i++) {
            if (arr[i] == 'L') {
                max = 0;
            } else if (arr[i] == 'R') {
                max = n;
            } else {
                max = Math.max(max - 1, 0);
            }
            left[i] = max;
        }
        max = 0;
        for (int i = n - 1; i >= 0; i--) {
            if (arr[i] == 'R') {
                max = 0;
            } else if (arr[i] == 'L') {
                max = n;
            } else {
                max = Math.max(max - 1, 0);
            }
            right[i] = max;
        }
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < n; i++) {
            if (left[i] == right[i]) {
                sb.append('.');
            } else if (left[i] > right[i]) {
                sb.append('R');
            } else {
                sb.append('L');
            }
        }
        return sb.toString();

=======

        char[] chars = dominoes.toCharArray();
        int n = chars.length;
        int[] l = new int[n];
        int[] r = new int[n];
        int last = 0;
        for (int i = 0; i < n; i++) {
            if (chars[i] == 'L') {
                last = 0;
            } else if (chars[i] == 'R') {
                last = n;
            } else {
                last = Math.max(last - 1, 0);
            }
            l[i] = last;
        }
        last = 0;
        for (int i = n - 1; i >= 0; i--) {
            if (chars[i] == 'R') {
                last = 0;
            } else if (chars[i] == 'L') {
                last = n;
            } else {
                last = Math.max(last - 1, 0);
            }
            r[i] = last;
        }
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < n; i++) {
            if (l[i] == r[i]) {
                sb.append('.');
            } else if (l[i] < r[i]) {
                sb.append('L');
            } else {
                sb.append('R');
            }
        }
        return sb.toString();
