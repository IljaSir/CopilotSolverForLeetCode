Synthesizing 10/10 solutions

=======

        int max = 0;
        for (int num : nums) {
            max = Math.max(max, num);
        }
        int[] count = new int[max + 1];
        for (int num : nums) {
            int[] factors = getFactors(num);
            for (int factor : factors) {
                count[factor]++;
            }
        }
        int res = 0;
        for (int num : count) {
            if (num > 0) {
                res++;
            }
        }
        return res;
    }
    
    private int[] getFactors(int n) {
        int[] res = new int[10];
        int index = 0;
        int i = 2;
        while (i * i <= n) {
            while (n % i == 0) {
                res[index++] = i;
                n /= i;
            }
            i++;
        }
        if (n > 1) {
            res[index++] = n;
        }
        return Arrays.copyOf(res, index);

=======

        int max = 0;
        for (int num : nums) {
            max = Math.max(max, num);
        }
        int[] primes = new int[max + 1];
        for (int i = 2; i <= max; i++) {
            if (primes[i] == 0) {
                for (int j = i; j <= max; j += i) {
                    primes[j]++;
                }
            }
        }
        Set<Integer> set = new HashSet<>();
        for (int num : nums) {
            int n = num;
            for (int i = 2; i <= max; i++) {
                if (n % i == 0 && primes[i] == 1) {
                    set.add(i);
                    while (n % i == 0) {
                        n /= i;
                    }
                }
            }
            if (n > 1) {
                set.add(n);
            }
        }
        return set.size();

=======

        int max = 0;
        for (int num : nums) {
            max = Math.max(max, num);
        }
        int[] primes = new int[max + 1];
        for (int i = 2; i <= max; i++) {
            if (primes[i] == 0) {
                for (int j = i; j <= max; j += i) {
                    primes[j] = i;
                }
            }
        }
        Set<Integer> factors = new HashSet<>();
        for (int num : nums) {
            while (num > 1) {
                factors.add(primes[num]);
                num /= primes[num];
            }
        }
        return factors.size();

=======

        int max = 0;
        for (int num : nums) {
            max = Math.max(max, num);
        }
        int[] primes = new int[max + 1];
        for (int i = 2; i <= max; i++) {
            if (primes[i] == 0) {
                for (int j = i; j <= max; j += i) {
                    primes[j]++;
                }
            }
        }
        Set<Integer> set = new HashSet<>();
        for (int num : nums) {
            int n = num;
            for (int i = 2; i <= max; i++) {
                if (n % i == 0 && primes[i] == 1) {
                    set.add(i);
                    while (n % i == 0) {
                        n /= i;
                    }s.ize();

=======

        int max = 0;
        for (int n : nums) {
            max = Math.max(max, n);
        }
        int[] primes = new int[max + 1];
        for (int i = 2; i <= max; i++) {
            if (primes[i] == 0) {
                for (int j = i; j <= max; j += i) {
                    primes[j]++;
                }
            }
        }
        Set<Integer> set = new HashSet<>();
        for (int n : nums) {
            set.add(primes[n]);
        }
        return set.size();

=======

        int[] prime = new int[1001];
        for (int i = 2; i <= 1000; i++) {
            if (prime[i] == 0) {
                for (int j = i; j <= 1000; j += i) {
                    prime[j]++;
                }
            }
        }
        Set<Integer> set = new HashSet<>();
        for (int num : nums) {
            set.add(prime[num]);
        }
        return set
                }
            }
            if (n > 1) {
                set.add(n);
            }
        }
        return set.size();

=======

        int max = 0;
        for (int i = 0; i < nums.length; i++) {
            max = Math.max(max, nums[i]);
        }
        int[] primes = new int[max + 1];
        for (int i = 2; i <= max; i++) {
            if (primes[i] == 0) {
                for (int j = i; j <= max; j += i) {
                    primes[j] = i;
                }
            }
        }
        Set<Integer> factors = new HashSet<>();
        for (int i = 0; i < nums.length; i++) {
            int num = nums[i];
            while (num > 1) {
                factors.add(primes[num]);
                num /= primes[num];
            }
        }
        return factors.size();

=======

        int max = 0;
        for (int n : nums) {
            max = Math.max(max, n);
        }
        int[] primes = new int[max + 1];
        for (int i = 2; i <= max; i++) {
            if (primes[i] == 0) {
                for (int j = i; j <= max; j += i) {
                    primes[j]++;
                }
            }
        }
        Set<Integer> set = new HashSet<>();
        for (int n : nums) {
            set.add(primes[n]);
        }
        return set.size();

=======

        int[] prime = new int[1001];
        for (int i = 2; i <= 1000; i++) {
            if (prime[i] == 0) {
                for (int j = i; j <= 1000; j += i) {
                    prime[j]++;
                }
            }
        }
        Set<Integer> set = new HashSet<>();
        for (int num : nums) {
            set.add(prime[num]);
        }
        return set.size();

=======

        int max = 0;
        for (int n : nums) {
            max = Math.max(max, n);
        }
        int[] primeFactors = new int[max + 1];
        for (int i = 2; i <= max; i++) {
            if (primeFactors[i] == 0) {
                for (int j = i; j <= max; j += i) {
                    primeFactors[j]++;
                }
            }
        }
        Set<Integer> set = new HashSet<>();
        for (int n : nums) {
            set.add(primeFactors[n]);
        }
        return set.size();

=======

        int max = 1000;
        boolean[] isPrime = new boolean[max + 1];
        Arrays.fill(isPrime, true);
        for (int i = 2; i * i <= max; i++) {
            if (!isPrime[i]) {
                continue;
            }
            for (int j = i * i; j <= max; j += i) {
                isPrime[j] = false;
            }
        }
        int[] primes = new int[max + 1];
        int[] counts = new int[max + 1];
        for (int i = 2; i <= max; i++) {
            if (isPrime[i]) {
                primes[i] = i;
            } else {
                for (int j = 2; j * j <= i; j++) {
                    if (i % j == 0) {
                        primes[i] = j;
                        break;
                    }
                }
            }
        }
        for (int num : nums) {
            while (num > 1) {
                int prime = primes[num];
                while (num % prime == 0) {
                    num /= prime;
                }
                counts[prime]++;
            }
        }
        int res = 0;
        for (int count : counts) {
            if (count > 0) {
                res++;
            }
        }
        return res;

=======

        int result = 0;
        for(int i = 2; i <= 1000; i++) {
            boolean isPrime = true;
            for(int j = 2; j <= Math.sqrt(i); j++) {
                if(i % j == 0) {
                    isPrime = false;
                    break;
                }
            }
            if(isPrime) {
                for(int j = 0; j < nums.length; j++) {
                    if(nums[j] % i == 0) {
                        result++;
                        break;
                    }
                }
            }
        }
        return result;

=======

        int n = nums.length;
        int[] primes = new int[1001];
        for(int i = 0; i < n; i++){
            int num = nums[i];
            for(int j = 2; j <= Math.sqrt(num); j++){
                if(num % j == 0){
                    while(num % j == 0){
                        num /= j;
                    }
                    primes[j]++;
                }
            }
            if(num > 1){
                primes[num]++;
            }
        }
        int count = 0;
        for(int i = 0; i < 1001; i++){
            if(primes[i] > 0){
                count++;
            }
        }
        return count;
