Synthesizing 10/10 solutions

=======

        int m = board.length;
        int n = board[0].length;
        int len = word.length();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (board[i][j] == ' ' || board[i][j] == word.charAt(0)) {
                    // horizontal
                    if (j == 0 || board[i][j - 1] == '#') {
                        if (j + len < n && board[i][j + len] == '#') {
                            if (checkWord(board, i, j, word, 0, 1)) {
                                return true;
                            }
                        }
                    }
                    // vertical
                    if (i == 0 || board[i - 1][j] == '#') {
                        if (i + len < m && board[i + len][j] == '#') {
                            if (checkWord(board, i, j, word, 1, 0)) {
                                return true;
                            }
                        }
                    }
                }
            }
        }
        return false;
    }
    
    private boolean checkWord(char[][] board, int i, int j, String word, int row, int col) {
        for (int k = 0; k < word.length(); k++) {
            if (board[i][j] != ' ' && board[i][j] != word.charAt(k)) {
                return false;
            }
            i += row;
            j += col;
        }
        return true;

=======

        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[i].length; j++) {
                if (board[i][j] == ' ' || board[i][j] == word.charAt(0)) {
                    if (check(board, i, j, word, 0, 0)) {
                        return true;
                    }
                }
            }
        }
        return false;
    }
    
    private boolean check(char[][] board, int i, int j, String word, int pos, int dir) {
        if (pos == word.length()) {
            return true;
        }
        if (i < 0 || i >= board.length || j < 0 || j >= board[i].length) {
            return false;
        }
        if (board[i][j] == '#') {
            return false;
        }
        if (board[i][j] != ' ' && board[i][j] != word.charAt(pos)) {
            return false;
        }
        if (dir == 0) {
            if (j > 0 && board[i][j - 1] != '#') {
                return false;
            }
            if (j < board[i].length - 1 && board[i][j + 1] != '#') {
                return false;
            }
        }
        if (dir == 1) {
            if (i > 0 && board[i - 1][j] != '#') {
                return false;
            }
            if (i < board.length - 1 && board[i + 1][j] != '#') {
                return false;
            }
        }
        if (dir == 2) {
            if (j > 0 && board[i][j - 1] != '#') {
                return false;
            }
            if (j < board[i].length - 1 && board[i][j + 1] != '#') {
                return false;
            }
        }
        if (dir == 3) {
            if (i > 0 && board[i - 1][j] != '#') {
                return false;
            }
            if (i < board.length - 1 && board[i + 1][j] != '#') {
                return false;
            }
        }
        if (dir == 0) {
            if (check(board,

=======

        int m = board.length;
        int n = board[0].length;
        int l = word.length();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (board[i][j] == ' ' || board[i][j] == word.charAt(0)) {
                    if (j + l <= n && board[i][j + l] == ' ') {
                        int k = 0;
                        for (k = 0; k < l; k++) {
                            if (board[i][j + k] != ' ' && board[i][j + k] != word.charAt(k)) {
                                break;
                            }
                        }
                        if (k == l) {
                            return true;
                        }
                    }
                    if (j - l >= -1 && board[i][j - l] == ' ') {
                        int k = 0;
                        for (k = 0; k < l; k++) {
                            if (board[i][j - k] != ' ' && board[i][j - k] != word.charAt(k)) {
                                break;
                            }
                        }
                        if (k == l) {
                            return true;
                        }
                    }
                    if (i + l <= m && board[i + l][j] == ' ') {
                        int k = 0;
                        for (k = 0; k < l; k++) {
                            if (board[i + k][j] != ' ' && board[i + k][j] != word.charAt(k)) {
                                break;
                            }
                        }
                        if (k == l) {
                            return true;
                        }
                    }
                    if (i - l >= -1 && board[i - l][j] == ' ') {
                        int k = 0;
                        for (k = 0; k < l; k++) {
                            if (board[i - k][j] != ' ' && board[i - k][j] != word.charAt(k)) {
                                break;
                            }
                        }
                        if (k == l) {
                            return true;
                        }
                    }
                }
            }
        }
        return false;

=======

        int m = board.length;
        int n = board[0].length;
        char[] w = word.toCharArray();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (board[i][j] == ' ' || board[i][j] == w[0]) {
                    if (j + w.length <= n && checkHorizontal(board, i, j, w)) {
                        return true;
                    }
                    if (i + w.length <= m && checkVertical(board, i, j, w)) {
                        return true;
                    }
                }
            }
        }
        return false;
    }
    
    private boolean checkHorizontal(char[][] board, int i, int j, char[] w) {
        if (j > 0 && board[i][j - 1] != '#') {
            return false;
        }
        if (j + w.length < board[0].length && board[i][j + w.length] != '#') {
            return false;
        }
        for (int k = 0; k < w.length; k++) {
            if (board[i][j + k] != ' ' && board[i][j + k] != w[k]) {
                return false;
            }
        }
        return true;
    }
    
    private boolean checkVertical(char[][] board, int i, int j, char[] w) {
        if (i > 0 && board[i - 1][j] != '#') {
            return false;
        }
        if (i + w.length < board.length && board[i + w.length][j] != '#') {
            return false;
        }
        for (int k = 0; k < w.length; k++) {
            if (board[i + k][j] != ' ' && board[i + k][j] != w[k]) {
                return false;
            }
        }
        return true;

=======

        int m = board.length;
        int n = board[0].length;
        for(int i = 0; i < m; i++){
            for(int j = 0; j < n; j++){
                if(board[i][j] == ' ' || board[i][j] == word.charAt(0)){
                    if(check(board, word, i, j, 0, 1)){
                        return true;
                    }
                    if(check(board, word, i, j, 1, 0)){
                        return true;
                    }
                }
            }
        }
        return false;
    }
    
    private boolean check(char[][] board, String word, int i, int j, int x, int y){
        int m = board.length;
        int n = board[0].length;
        int k = 0;
        int ti = i, tj = j;
        while(k < word.length() && ti >= 0 && ti < m && tj >= 0 && tj < n && (board[ti][tj] == ' ' || board[ti][tj] == word.charAt(k))){
            k++;
            ti += x;
            tj += y;
        }
        if(k == word.length()){
            if(ti >= 0 && ti < m && tj >= 0 && tj < n && board[ti][tj] != '#'){
                return false;
            }
            if(i - x >= 0 && i - x < m && j - y >= 0 && j - y < n && board[i - x][j - y] != '#'){
                return false;
            }
            return true;
        }
        return false;

=======

        int m = board.length;
        int n = board[0].length;
        boolean[][] visited = new boolean[m][n];
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (board[i][j] == word.charAt(0) || board[i][j] == ' ') {
                    if (dfs(board, word, 0, i, j, visited)) {
                        return true;
                    }
                }
            }
        }
        return false;
    }
    
    public boolean dfs(char[][] board, String word, int index, int i, int j, boolean[][] visited) {
        if (index == word.length()) {
            return true;
        }
        
        if (i < 0 || i >= board.length || j < 0 || j >= board[0].length) {
            return false;
        }
        
        if (visited[i][j]) {
            return false;
        }
        
        if (board[i][j] != word.charAt(index) && board[i][j] != ' ') {
            return false;
        }
        
        visited[i][j] = true;
        boolean isFound = dfs(board, word, index + 1, i + 1, j, visited) ||
                          dfs(board, word, index + 1, i - 1, j, visited) ||
                          dfs(board, word, index + 1, i, j + 1, visited) ||
                          dfs(board, word, index + 1, i, j - 1, visited);
        visited[i][j] = false;
        
        return isFound;

=======

        int m = board.length, n = board[0].length;
        boolean[][] visited = new boolean[m][n];
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (board[i][j] == ' ' || board[i][j] == word.charAt(0)) {
                    boolean res = dfs(board, word, i, j, 0, visited);
                    if (res) return true;
                }
            }
        }
        return false;

=======

        int n = board.length;
        int m = board[0].length;
        int wordLen = word.length();
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (board[i][j] == '#' || board[i][j] != ' ' && board[i][j] != word.charAt(0)) {
                    continue;
                }
                int k = 0;
                if (j + wordLen <= m && (j == 0 || board[i][j - 1] == '#')) {
                    while (k < wordLen && board[i][j + k] == ' ' || board[i][j + k] == word.charAt(k)) {
                        k++;
                    }
                    if (k == wordLen) {
                        return true;
                    }
                }
                k = 0;
                if (j - wordLen >= -1 && (j == m - 1 || board[i][j + 1] == '#')) {
                    while (k < wordLen && board[i][j - k] == ' ' || board[i][j - k] == word.charAt(k)) {
                        k++;
                    }
                    if (k == wordLen) {
                        return true;
                    }
                }
                k = 0;
                if (i + wordLen <= n && (i == 0 || board[i - 1][j] == '#')) {
                    while (k < wordLen && board[i + k][j] == ' ' || board[i + k][j] == word.charAt(k)) {
                        k++;
                    }
                    if (k == wordLen) {
                        return true;
                    }
                }
                k = 0;
                if (i - wordLen >= -1 && (i == n - 1 || board[i + 1][j] == '#')) {
                    while (k < wordLen && board[i - k][j] == ' ' || board[i - k][j] == word.charAt(k)) {
                        k++;
                    }
                    if (k == wordLen) {
                        return true;
                    }
                }
            }
        }
        return false;

=======

        int m = board.length;
        int n = board[0].length;
        int len = word.length();
        // check row wise
        for (int i = 0; i < m; i++) {
            for (int j = 0; j <= n - len; j++) {
                if (checkRow(board, i, j, word)) {
                    return true;
                }
            }
        }
        // check column wise
        for (int j = 0; j < n; j++) {
            for (int i = 0; i <= m - len; i++) {
                if (checkColumn(board, i, j, word)) {
                    return true;
                }
            }
        }
        return false;
    }
    
    private boolean checkRow(char[][] board, int i, int j, String word) {
        int len = word.length();
        if (j > 0 && board[i][j - 1] != '#') {
            return false;
        }
        if (j + len < board[0].length && board[i][j + len] != '#') {
            return false;
        }
        for (int k = 0; k < len; k++) {
            if (board[i][j + k] == '#') {
                return false;
            }
            if (board[i][j + k] != ' ' && board[i][j + k] != word.charAt(k)) {
                return false;
            }
        }
        return true;
    }
    
    private boolean checkColumn(char[][] board, int i, int j, String word) {
        int len = word.length();
        if (i > 0 && board[i - 1][j] != '#') {
            return false;
        }
        if (i + len < board.length && board[i + len][j] != '#') {
            return false;
        }
        for (int k = 0; k < len; k++) {
            if (board[i + k][j] == '#') {
                return false;
            }
            if (board[i + k][j] != ' ' && board[i + k][j] != word.charAt(k)) {
                return false;
            }
        }
        return true;

=======

        int m = board.length;
        int n = board[0].length;
        char[] w = word.toCharArray();
        int len = w.length;
        
        //check horizontal
        for(int i=0; i<m; i++){
            for(int j=0; j<=n-len; j++){
                if(board[i][j] == ' ' || board[i][j] == w[0]){
                    if(check(board, w, i, j, 0, 1)){
                        return true;
                    }
                }
            }
        }
        
        //check vertical
        for(int j=0; j<n; j++){
            for(int i=0; i<=m-len; i++){
                if(board[i][j] == ' ' || board[i][j] == w[0]){
                    if(check(board, w, i, j, 1, 0)){
                        return true;
                    }
                }
            }
        }
        
        return false;
    }
    
    public boolean check(char[][] board, char[] w, int i, int j, int di, int dj){
        int len = w.length;
        for(int k=0; k<len; k++){
            if(board[i][j] == '#') return false;
            
            if(board[i][j] != ' ' && board[i][j] != w[k]){
                return false;
            }
            
            i += di;
            j += dj;
        }
        
        return i == board.length || j == board[0].length || board[i][j] == '#';
