Synthesizing 10/10 solutions

=======

        int n = nums.length;
        int[] count = new int[n];
        for (int[] r : requests) {
            count[r[0]]++;
            if (r[1] + 1 < n) {
                count[r[1] + 1]--;
            }
        }
        for (int i = 1; i < n; i++) {
            count[i] += count[i - 1];
        }
        Arrays.sort(count);
        Arrays.sort(nums);
        long ans = 0;
        for (int i = 0; i < n; i++) {
            ans += (long) count[i] * nums[i];
        }
        return (int) (ans % 1000000007);

=======

        int n = nums.length;
        int[] count = new int[n];
        for (int[] r : requests) {
            count[r[0]]++;
            if (r[1] + 1 < n) {
                count[r[1] + 1]--;
            }
        }
        for (int i = 1; i < n; i++) {
            count[i] += count[i - 1];
        }
        Arrays.sort(count);
        Arrays.sort(nums);
        long res = 0;
        for (int i = 0; i < n; i++) {
            res += (long) count[i] * nums[i];
        }
        return (int) (res % (1e9 + 7));

=======

        int[] count = new int[nums.length];
        for (int[] r : requests) {
            count[r[0]]++;
            if (r[1] + 1 < nums.length) {
                count[r[1] + 1]--;
            }
        }
        for (int i = 1; i < nums.length; i++) {
            count[i] += count[i - 1];
        }
        Arrays.sort(nums);
        Arrays.sort(count);
        long res = 0;
        for (int i = count.length - 1; i >= 0; i--) {
            if (count[i] == 0) {
                break;
            }
            res += (long)count[i] * nums[i];
        }
        return (int)(res % 1000000007);

=======

        int n = nums.length;
        int[] count = new int[n];
        for (int[] req : requests) {
            count[req[0]]++;
            if (req[1] + 1 < n) {
                count[req[1] + 1]--;
            }
        }
        for (int i = 1; i < n; i++) {
            count[i] += count[i - 1];
        }
        Arrays.sort(nums);
        Arrays.sort(count);
        long res = 0;
        for (int i = n - 1; i >= 0; i--) {
            if (count[i] == 0) {
                break;
            }
            res += (long) count[i] * nums[i];
        }
        return (int) (res % 1000000007);

=======

        int[] freq = new int[nums.length];
        for (int[] request : requests) {
            freq[request[0]]++;
            if (request[1] + 1 < nums.length) {
                freq[request[1] + 1]--;
            }
        }
        for (int i = 1; i < nums.length; i++) {
            freq[i] += freq[i - 1];
        }
        Arrays.sort(nums);
        Arrays.sort(freq);
        long sum = 0;
        for (int i = nums.length - 1; i >= 0; i--) {
            sum += (long) nums[i] * freq[i];
        }
        return (int) (sum % 1000000007);

=======

        int n = nums.length;
        int[] count = new int[n];
        for (int[] r : requests) {
            count[r[0]]++;
            if (r[1] + 1 < n)
                count[r[1] + 1]--;
        }
        for (int i = 1; i < n; i++)
            count[i] += count[i - 1];
        Arrays.sort(count);
        Arrays.sort(nums);
        long res = 0;
        for (int i = 0; i < n; i++)
            res = (res + (long) count[i] * nums[i]) % 1000000007;
        return (int) res;

=======

        int n = nums.length;
        int[] freq = new int[n];
        for (int[] r : requests) {
            freq[r[0]]++;
            if (r[1] + 1 < n) {
                freq[r[1] + 1]--;
            }
        }
        for (int i = 1; i < n; i++) {
            freq[i] += freq[i - 1];
        }
        Arrays.sort(freq);
        Arrays.sort(nums);
        long res = 0;
        for (int i = 0; i < n; i++) {
            res += (long) freq[i] * nums[i];
        }
        return (int) (res % (1e9 + 7));

=======

        int n = nums.length;
        int[] cnt = new int[n];
        for (int[] req : requests) {
            cnt[req[0]]++;
            if (req[1] + 1 < n) cnt[req[1] + 1]--;
        }
        for (int i = 1; i < n; i++) cnt[i] += cnt[i - 1];
        Arrays.sort(cnt);
        Arrays.sort(nums);
        long ans = 0;
        for (int i = 0; i < n; i++) ans += (long) nums[i] * cnt[i];
        return (int) (ans % 1000000007);

=======

        int[] sum = new int[nums.length + 1];
        for (int[] r : requests) {
            sum[r[0]]++;
            sum[r[1] + 1]--;
        }
        for (int i = 1; i < sum.length; i++) {
            sum[i] += sum[i - 1];
        }
        Arrays.sort(sum, 1, sum.length);
        Arrays.sort(nums);
        long ans = 0;
        for (int i = 1; i < sum.length; i++) {
            ans += (long) sum[i] * nums[i - 1];
        }
        return (int) (ans % 1_000_000_007);

=======

        int n = nums.length, mod = 1000000007;
        int[] cnt = new int[n];
        for (int[] r : requests) {
            cnt[r[0]]++;
            if (r[1] + 1 < n) cnt[r[1] + 1]--;
        }
        for (int i = 1; i < n; i++) cnt[i] += cnt[i - 1];
        Arrays.sort(cnt);
        Arrays.sort(nums);
        long res = 0;
        for (int i = 0; i < n; i++) res = (res + (long) cnt[i] * nums[i]) % mod;
        return (int) res;
