Synthesizing 10/10 solutions

=======

        int m = rolls.length;
        int sum = 0;
        for (int i = 0; i < m; i++) {
            sum += rolls[i];
        }
        int total = (m + n) * mean;
        int missingSum = total - sum;
        int[] result = new int[n];
        int q = missingSum / n;
        int r = missingSum % n;
        if (q > 6 || q == 0 && r > 0) {
            return new int[0];
        }
        for (int i = 0; i < n; i++) {
            if (i < r) {
                result[i] = q + 1;
            } else {
                result[i] = q;
            }
        }
        return result;

=======

        int m = rolls.length;
        int sum = 0;
        for (int i = 0; i < m; i++) {
            sum += rolls[i];
        }
        int target = (m + n) * mean - sum;
        if (target < n || target > 6 * n) {
            return new int[0];
        }
        int[] ans = new int[n];
        for (int i = 0; i < n; i++) {
            ans[i] = 1;
            target--;
        }
        for (int i = n - 1; i >= 0; i--) {
            while (target > 0 && ans[i] < 6) {
                ans[i]++;
                target--;
            }
        }
        return ans;

=======

        int m = rolls.length;
        int sum = 0;
        for (int roll : rolls) {
            sum += roll;
        }
        int total = (m + n) * mean - sum;
        if (total < n || total > 6 * n) {
            return new int[0];
        }
        int[] res = new int[n];
        int avg = total / n;
        int rem = total % n;
        for (int i = 0; i < n; i++) {
            res[i] = avg;
        }
        for (int i = 0; i < rem; i++) {
            res[i]++;
        }
        return res;

=======

        int sum = 0;
        for (int i = 0; i < rolls.length; i++) {
            sum += rolls[i];
        }
        sum += mean * (n + rolls.length);
        if (sum % (n + rolls.length) != 0) {
            return new int[0];
        }
        int avg = sum / (n + rolls.length);
        int[] result = new int[n];
        for (int i = 0; i < n; i++) {
            result[i] = avg;
        }
        int diff = avg * n;
        for (int i = 0; i < rolls.length; i++) {
            diff -= rolls[i];
        }
        for (int i = 0; i < n; i++) {
            if (diff >= 5) {
                result[i] += 5;
                diff -= 5;
            } else {
                result[i] += diff;
                break;
            }
        }
        return result;

=======

        int sum = 0;
        for (int roll : rolls) {
            sum += roll;
        }
        int total = mean * (n + rolls.length);
        int missing = total - sum;
        if (missing < n || missing > n * 6) {
            return new int[0];
        }
        int[] result = new int[n];
        for (int i = 0; i < n; i++) {
            result[i] = 1;
            missing--;
        }
        for (int i = 0; i < n; i++) {
            int increase = Math.min(5, missing);
            result[i] += increase;
            missing -= increase;
        }
        return result;

=======

        int m = rolls.length;
        int sum = 0;
        for (int roll : rolls) {
            sum += roll;
        }
        int total = mean * (m + n);
        int missing = total - sum;
        if (missing < n || missing > 6 * n) {
            return new int[0];
        }
        int[] ans = new int[n];
        for (int i = 0; i < n; i++) {
            ans[i] = 1;
        }
        missing -= n;
        for (int i = 0; i < n; i++) {
            int x = Math.min(5, missing);
            ans[i] += x;
            missing -= x;
        }
        return ans;

=======

        int m = rolls.length;
        int sum = 0;
        for (int roll : rolls) {
            sum += roll;
        }
        int expectedSum = (m + n) * mean - sum;
        if (expectedSum < n || expectedSum > 6 * n) {
            return new int[0];
        }
        int[] missing = new int[n];
        int q = expectedSum / n, r = expectedSum % n;
        for (int i = 0; i < n; i++) {
            missing[i] = q + (i < r ? 1 : 0);
        }
        return missing;

=======

        int m = rolls.length;
        int total = 0;
        for (int i = 0; i < m; i++) {
            total += rolls[i];
        }
        int target = (mean * (m + n)) - total;
        if (target < n || target > 6 * n) {
            return new int[0];
        }
        int[] res = new int[n];
        int avg = target / n;
        int rem = target % n;
        for (int i = 0; i < n; i++) {
            res[i] = avg;
        }
        for (int i = 0; i < rem; i++) {
            res[i]++;
        }
        return res;

=======

        int[] result = new int[n];
        int sum = 0;
        for (int i = 0; i < rolls.length; i++) {
            sum += rolls[i];
        }
        int total = (n + rolls.length) * mean;
        int missing = total - sum;
        if (missing < n || missing > 6 * n) {
            return new int[0];
        }
        for (int i = 0; i < n; i++) {
            int min = Math.max(1, missing - 6 * (n - i - 1));
            int max = Math.min(6, missing - n + i + 1);
            result[i] = min;
            missing -= min;
        }
        return result;

=======

        int m = rolls.length;
        int sum = Arrays.stream(rolls).sum();
        int total = mean * (n + m);
        int missing = total - sum;
        if (missing < n || missing > 6 * n) {
            return new int[0];
        }
        int[] res = new int[n];
        for (int i = 0; i < n; i++) {
            res[i] = 1;
            missing--;
        }
        int i = 0;
        while (missing > 0) {
            if (res[i] < 6) {
                res[i]++;
                missing--;
            }
            i++;
        }
        return res;
