Synthesizing 10/10 solutions

=======

        int n = text.length();
        int m = pattern.length();
        long[][] dp = new long[n + 1][m + 1];
        for (int i = 0; i <= n; i++) {
            dp[i][0] = 1;
        }
        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= m; j++) {
                dp[i][j] = dp[i - 1][j];
                if (text.charAt(i - 1) == pattern.charAt(j - 1)) {
                    dp[i][j] += dp[i - 1][j - 1];
                }
            }
        }
        return dp[n][m];

=======

        int n = text.length(), m = pattern.length();
        long[][] dp = new long[n + 1][m + 1];
        for (int i = 0; i <= n; i++) {
            dp[i][0] = 1;
        }
        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= m; j++) {
                dp[i][j] = dp[i - 1][j];
                if (text.charAt(i - 1) == pattern.charAt(j - 1)) {
                    dp[i][j] += dp[i - 1][j - 1];
                }
            }
        }
        long res = 0;
        for (int i = 1; i <= n; i++) {
            if (text.charAt(i - 1) == pattern.charAt(0)) {
                res += dp[i - 1][m];
            }
        }
        return res;

=======

        int n = text.length();
        int m = pattern.length();
        long[][] dp = new long[n + 1][m + 1];
        for (int i = 0; i < n; i++) {
            dp[i][0] = 1;
        }
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                char tc = text.charAt(i);
                char pc = pattern.charAt(j);
                if (tc == pc) {
                    dp[i + 1][j + 1] = dp[i][j] + dp[i][j + 1];
                } else {
                    dp[i + 1][j + 1] = dp[i][j + 1];
                }
            }
        }
        return dp[n][m];

=======

        int n = text.length();
        int m = pattern.length();
        long[][] dp = new long[n+1][m+1];
        for (int i = 0; i <= n; i++) {
            dp[i][m] = 1;
        }
        for (int i = n-1; i >= 0; i--) {
            for (int j = m-1; j >= 0; j--) {
                dp[i][j] = dp[i+1][j];
                if (text.charAt(i) == pattern.charAt(j)) {
                    dp[i][j] += dp[i+1][j+1];
                }
            }
        }
        long ans = 0;
        for (int i = 0; i < n; i++) {
            if (text.charAt(i) == pattern.charAt(0)) {
                ans += dp[i+1][1];
            }
        }
        return ans;

=======

        long[][] dp = new long[text.length() + 1][3];
        for (int i = 0; i < text.length(); i++) {
            for (int j = 0; j < 3; j++) {
                dp[i + 1][j] = dp[i][j];
            }
            if (text.charAt(i) == pattern.charAt(0)) {
                dp[i + 1][1] += dp[i][0] + 1;
            }
            if (text.charAt(i) == pattern.charAt(1)) {
                dp[i + 1][2] += dp[i][1];
            }
        }
        return dp[text.length()][2];

=======

        int n = text.length();
        int m = pattern.length();
        long[][] dp = new long[n][m];
        for (int i = 0; i < n; i++) {
            if (text.charAt(i) == pattern.charAt(0)) {
                dp[i][0] = 1;
            }
            if (i > 0) {
                dp[i][0] += dp[i - 1][0];
            }
        }
        for (int i = 1; i < n; i++) {
            for (int j = 1; j < m; j++) {
                if (text.charAt(i) == pattern.charAt(j)) {
                    dp[i][j] = dp[i - 1][j - 1];
                }
                dp[i][j] += dp[i - 1][j];
            }
        }
        return dp[n - 1][m - 1];

=======

        int n = text.length();
        int m = pattern.length();
        long[][] dp = new long[n + 1][m + 1];
        for(int i = 0; i <= n; i++) {
            dp[i][0] = 1;
        }
        for(int i = 1; i <= n; i++) {
            for(int j = 1; j <= m; j++) {
                if(text.charAt(i - 1) == pattern.charAt(j - 1)) {
                    dp[i][j] = dp[i - 1][j - 1] + dp[i - 1][j];
                } else {
                    dp[i][j] = dp[i - 1][j];
                }
            }
        }
        return dp[n][m];

=======

        long[][] dp = new long[text.length() + 1][3];
        for (int i = 0; i < text.length(); i++) {
            dp[i][0] = 1;
        }
        for (int i = 0; i < text.length(); i++) {
            dp[i][1] = dp[i][0] * (text.charAt(i) == pattern.charAt(0) ? 1 : 0);
            dp[i][2] = dp[i][1] * (text.charAt(i) == pattern.charAt(1) ? 1 : 0);
            if (i > 0) {
                dp[i][1] += dp[i - 1][1];
                dp[i][2] += dp[i - 1][2];
            }
        }
        return dp[text.length() - 1][2];

=======

        int[] count = new int[2];
        for (int i = 0; i < text.length(); i++) {
            if (text.charAt(i) == pattern.charAt(0)) {
                count[0]++;
            } else if (text.charAt(i) == pattern.charAt(1)) {
                count[1]++;
            }
        }
        long[] dp = new long[text.length() + 1];
        dp[0] = 1;
        for (int i = 0; i < text.length(); i++) {
            if (text.charAt(i) == pattern.charAt(0)) {
                dp[i + 1] += dp[i];
            } else if (text.charAt(i) == pattern.charAt(1)) {
                dp[i + 1] += dp[i];
                dp[i + 1] += dp[i + 1 - count[0] - count[1]];
            }
        }
        return dp[text.length()];

=======

        long MOD = 1_000_000_007;
        int n = text.length();
        int m = pattern.length();
        long[][] dp = new long[n+1][m+1];
        for(int i=0; i<n; i++){
            dp[i][0] = 1;
        }
        for(int i=1; i<=n; i++){
            for(int j=1; j<=m; j++){
                dp[i][j] = dp[i-1][j];
                if(text.charAt(i-1) == pattern.charAt(j-1)){
                    dp[i][j] += dp[i-1][j-1];
                }
            }
        }
        return dp[n][m];
