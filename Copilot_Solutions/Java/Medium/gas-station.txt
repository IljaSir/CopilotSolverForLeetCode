Synthesizing 10/10 solutions

=======

        int total = 0;
        int sum = 0;
        int start = 0;
        for (int i = 0; i < gas.length; i++) {
            total += gas[i] - cost[i];
            sum += gas[i] - cost[i];
            if (sum < 0) {
                start = i + 1;
                sum = 0;
            }
        }
        return total < 0 ? -1 : start;

=======

        int n = gas.length;
        int[] diff = new int[n];
        for (int i = 0; i < n; i++) {
            diff[i] = gas[i] - cost[i];
        }
        int start = 0;
        int end = 0;
        int sum = 0;
        while (start < n) {
            sum += diff[end];
            if (sum < 0) {
                start = end + 1;
                sum = 0;
            }
            end = (end + 1) % n;
            if (start == end) {
                return start;
            }
        }
        return -1;

=======

        int n = gas.length;
        int[] diff = new int[n];
        for (int i = 0; i < n; i++) {
            diff[i] = gas[i] - cost[i];
        }
        int i = 0;
        while (i < n) {
            int sum = 0;
            int cnt = 0;
            while (cnt < n) {
                int j = (i + cnt) % n;
                sum += diff[j];
                if (sum < 0) {
                    break;
                }
                cnt++;
            }
            if (cnt == n) {
                return i;
            } else {
                i = i + cnt + 1;
            }
        }
        return -1;

=======

        int n = gas.length;
        int[] diff = new int[n];
        for (int i = 0; i < n; i++) {
            diff[i] = gas[i] - cost[i];
        }
        int[] prefixSum = new int[n];
        prefixSum[0] = diff[0];
        for (int i = 1; i < n; i++) {
            prefixSum[i] = prefixSum[i - 1] + diff[i];
        }
        if (prefixSum[n - 1] < 0) {
            return -1;
        }
        int min = Integer.MAX_VALUE;
        int minIndex = -1;
        for (int i = 0; i < n; i++) {
            if (prefixSum[i] < min) {
                min = prefixSum[i];
                minIndex = i;
            }
        }
        return (minIndex + 1) % n;

=======

        int n = gas.length;
        int[] diff = new int[n];
        for(int i = 0; i < n; i++) {
            diff[i] = gas[i] - cost[i];
        }
        int start = 0;
        int end = 0;
        int sum = 0;
        while(end < n) {
            sum += diff[end];
            while(sum < 0) {
                sum -= diff[start];
                start++;
                if(start == n) {
                    return -1;
                }
            }
            end++;
        }
        for(int i = 0; i < start; i++) {
            sum += diff[i];
            if(sum < 0) {
                return -1;
            }
        }
        return start;

=======

        int n = gas.length;
        int start = 0;
        int total = 0;
        int tank = 0;
        for (int i = 0; i < n; i++) {
            int consume = gas[i] - cost[i];
            if (tank + consume < 0) {
                start = i + 1;
                tank = 0;
            } else {
                tank += consume;
            }
            total += consume;
        }
        return total < 0 ? -1 : start;

=======

        int start = 0;
        int end = 0;
        int tank = 0;
        int n = gas.length;
        while (end < n) {
            tank += gas[end] - cost[end];
            if (tank < 0) {
                start = end + 1;
                end = start;
                tank = 0;
            } else {
                end++;
            }
        }
        if (start == n) {
            return -1;
        }
        for (int i = 0; i < start; i++) {
            tank += gas[i] - cost[i];
            if (tank < 0) {
                return -1;
            }
        }
        return start;

=======

        int n = gas.length;
        int start = 0;
        int end = 0;
        int tank = 0;
        int total = 0;
        while (end < n) {
            tank += gas[end] - cost[end];
            total += gas[end] - cost[end];
            if (tank < 0) {
                start = end + 1;
                tank = 0;
            }
            end++;
        }
        return total < 0 ? -1 : start;

=======

        int start = 0;
        int n = gas.length;
        int i = 0;
        int total = 0;
        int sum = 0;
        while (i < n) {
            total += gas[i] - cost[i];
            sum += gas[i] - cost[i];
            if (sum < 0) {
                start = i + 1;
                sum = 0;
            }
            i++;
        }
        if (total < 0) {
            return -1;
        }
        return start;

=======

        int start = 0;
        int end = 0;
        int curGas = 0;
        while (start < gas.length) {
            curGas += gas[end];
            if (curGas < cost[end]) {
                start = end + 1;
                end = start;
                curGas = 0;
            } else {
                curGas -= cost[end];
                end = (end + 1) % gas.length;
                if (start == end) {
                    return start;
                }
            }
        }
        return -1;
