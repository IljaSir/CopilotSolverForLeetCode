Synthesizing 10/10 solutions

=======

        boolean isNegative = false;
        if (num < 0) {
            isNegative = true;
            num = -num;
        }
        long[] digits = new long[10];
        while (num > 0) {
            long digit = num % 10;
            digits[(int) digit]++;
            num /= 10;
        }
        long result = 0;
        for (int i = 0; i < 10; i++) {
            while (digits[i]-- > 0) {
                result = result * 10 + i;
            }
        }
        if (isNegative) {
            result = -result;
        }
        return result;

=======

        if (num < 0) {
            return -smallestNumber(-num);
        }
        char[] digits = Long.toString(num).toCharArray();
        Arrays.sort(digits);
        long result = 0;
        for (char digit : digits) {
            result = result * 10 + digit - '0';
        }
        return result;

=======

        if (num == 0) return 0;
        boolean isNegative = num < 0;
        if (isNegative) num = -num;
        int[] digits = new int[10];
        while (num > 0) {
            digits[(int)(num % 10)]++;
            num /= 10;
        }
        long result = 0;
        int i = 1;
        while (digits[i] == 0) i++;
        digits[i]--;
        result += i;
        i = 0;
        while (digits[i] == 0) i++;
        digits[i]--;
        result += i * 10;
        i = 0;
        while (i < 10) {
            while (digits[i] > 0) {
                result += i * 100;
                digits[i]--;
            }
            i++;
        }
        return isNegative ? -result : result;

=======

        if (num == 0) return 0;
        long sign = num < 0 ? -1 : 1;
        num = Math.abs(num);
        int[] digits = new int[10];
        while (num > 0) {
            digits[(int)(num % 10)]++;
            num /= 10;
        }
        long res = 0;
        for (int i = 1; i < 10; i++) {
            while (digits[i] > 0) {
                res = res * 10 + i;
                digits[i]--;
            }
        }
        while (digits[0] > 0) {
            res = res * 10;
            digits[0]--;
        }
        return res * sign;

=======

        long[] arr = new long[10];
        long sign = 1;
        if (num < 0) {
            sign = -1;
            num = -num;
        }
        while (num > 0) {
            long digit = num % 10;
            arr[(int)digit]++;
            num /= 10;
        }
        long ans = 0;
        long base = 1;
        for (int i = 0; i < 10; i++) {
            while (arr[i] > 0) {
                ans = ans + i * base;
                base *= 10;
                arr[i]--;
            }
        }
        return sign * ans;

=======

        String s = String.valueOf(num);
        char[] c = s.toCharArray();
        Arrays.sort(c);
        if (c[0] == '0') {
            int i = 1;
            while (i < c.length && c[i] == '0') {
                i++;
            }
            char t = c[0];
            c[0] = c[i];
            c[i] = t;
        }
        return Long.parseLong(new String(c));

=======

        String s = String.valueOf(num);
        char[] c = s.toCharArray();
        Arrays.sort(c);
        if (c[0] == '0') {
            int i;
            for (i = 1; i < c.length; i++) {
                if (c[i] != '0') {
                    char temp = c[0];
                    c[0] = c[i];
                    c[i] = temp;
                    break;
                }
            }
            if (i == c.length) {
                return 0;
            }
        }
        return Long.parseLong(new String(c));

=======

        if (num == 0) return 0;
        boolean isNegative = num < 0;
        if (isNegative) num = -num;
        String s = String.valueOf(num);
        char[] c = s.toCharArray();
        Arrays.sort(c);
        if (c[0] == '0') {
            int i = 0;
            while (c[i] == '0') i++;
            char temp = c[i];
            c[i] = c[0];
            c[0] = temp;
        }
        num = Long.parseLong(new String(c));
        return isNegative ? -num : num;

=======

        long res = 0;
        long sign = 1;
        if (num < 0) {
            sign = -1;
            num = -num;
        }
        int[] arr = new int[10];
        while (num > 0) {
            arr[(int)(num % 10)]++;
            num /= 10;
        }
        for (int i = 1; i < 10; i++) {
            while (arr[i]-- > 0) {
                res = res * 10 + i;
            }
        }
        while (arr[0]-- > 0) {
            res *= 10;
        }
        return res * sign;

=======

        long result = 0;
        long temp = 0;
        long count = 0;
        long sign = 1;
        if (num < 0) {
            sign = -1;
            num *= -1;
        }
        while (num > 0) {
            temp = num % 10;
            num /= 10;
            result += temp * (long)Math.pow(10, count);
            count++;
        }
        return result * sign;
