Synthesizing 10/10 solutions (Duplicates hidden)

=======

        Map<Integer, Integer> map = new HashMap<>();
        for (int i = 0; i < nums1.length; i++) {
            for (int j = 0; j < nums2.length; j++) {
                int sum = nums1[i] + nums2[j];
                map.put(sum, map.getOrDefault(sum, 0) + 1);
            }
        }
        int res = 0;
        for (int i = 0; i < nums3.length; i++) {
            for (int j = 0; j < nums4.length; j++) {
                int sum = nums3[i] + nums4[j];
                res += map.getOrDefault(-sum, 0);
            }
        }
        return res;

=======

        Map<Integer, Integer> map = new HashMap<>();
        for (int i = 0; i < nums1.length; i++) {
            for (int j = 0; j < nums2.length; j++) {
                int sum = nums1[i] + nums2[j];
                map.put(sum, map.getOrDefault(sum, 0) + 1);
            }
        }
        int count = 0;
        for (int i = 0; i < nums3.length; i++) {
            for (int j = 0; j < nums4.length; j++) {
                int sum = nums3[i] + nums4[j];
                if (map.containsKey(-sum)) {
                    count += map.get(-sum);
                }
            }
        }
        return count;

=======

        Map<Integer, Integer> map = new HashMap<>();
        for (int i = 0; i < nums1.length; i++) {
            for (int j = 0; j < nums2.length; j++) {
                int sum = nums1[i] + nums2[j];
                map.put(sum, map.getOrDefault(sum, 0) + 1);
            }
        }
        int ans = 0;
        for (int i = 0; i < nums3.length; i++) {
            for (int j = 0; j < nums4.length; j++) {
                int sum = nums3[i] + nums4[j];
                ans += map.getOrDefault(-sum, 0);
            }
        }
        return ans;

=======

        Map<Integer, Integer> map = new HashMap<>();
        for (int i = 0; i < nums1.length; i++) {
            for (int j = 0; j < nums2.length; j++) {
                map.put(nums1[i] + nums2[j], map.getOrDefault(nums1[i] + nums2[j], 0) + 1);
            }
        }
        int count = 0;
        for (int i = 0; i < nums3.length; i++) {
            for (int j = 0; j < nums4.length; j++) {
                count += map.getOrDefault(-nums3[i] - nums4[j], 0);
            }
        }
        return count;

=======

        Map<Integer, Integer> map = new HashMap<>();
        for (int i : nums1) {
            for (int j : nums2) {
                map.put(i + j, map.getOrDefault(i + j, 0) + 1);
            }
        }
        int res = 0;
        for (int i : nums3) {
            for (int j : nums4) {
                res += map.getOrDefault(-i - j, 0);
            }
        }
        return res;

=======

        int n = nums1.length;
        int res = 0;
        Map<Integer, Integer> map = new HashMap<>();
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                int sum = nums1[i] + nums2[j];
                map.put(sum, map.getOrDefault(sum, 0) + 1);
            }
        }
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                int sum = nums3[i] + nums4[j];
                res += map.getOrDefault(-sum, 0);
            }
        }
        return res;

=======

        int n = nums1.length;
        int ans = 0;
        Map<Integer, Integer> map = new HashMap<>();
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                map.put(nums1[i] + nums2[j], map.getOrDefault(nums1[i] + nums2[j], 0) + 1);
            }
        }
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                ans += map.getOrDefault(-nums3[i] - nums4[j], 0);
            }
        }
        return ans;

=======

        int n = nums1.length;
        int[] sum1 = new int[n * n];
        int[] sum2 = new int[n * n];
        int k = 0;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                sum1[k] = nums1[i] + nums2[j];
                sum2[k] = nums3[i] + nums4[j];
                k++;
            }
        }
        Arrays.sort(sum1);
        Arrays.sort(sum2);
        int result = 0;
        int i = 0;
        int j = n * n - 1;
        while (i < n * n && j >= 0) {
            int sum = sum1[i] + sum2[j];
            if (sum == 0) {
                int count1 = 1;
                int count2 = 1;
                int x = i + 1;
                while (x < n * n && sum1[x] == sum1[i]) {
                    count1++;
                    x++;
                }
                x = j - 1;
                while (x >= 0 && sum2[x] == sum2[j]) {
                    count2++;
                    x--;
                }
                result += count1 * count2;
                i = x + 1;
                j = x - 1;
            } else if (sum < 0) {
                i++;
            } else {
                j--;
            }
        }
        return result;

=======

        int n = nums1.length;
        int[] sum1 = new int[n * n];
        int[] sum2 = new int[n * n];
        int idx1 = 0;
        int idx2 = 0;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                sum1[idx1++] = nums1[i] + nums2[j];
                sum2[idx2++] = nums3[i] + nums4[j];
            }
        }
        Arrays.sort(sum1);
        Arrays.sort(sum2);
        int ans = 0;
        int l = 0, r = sum2.length - 1;
        while (l < sum1.length && r >= 0) {
            int s1 = sum1[l];
            int s2 = sum2[r];
            if (s1 + s2 == 0) {
                int c1 = 1;
                int c2 = 1;
                while (l < sum1.length - 1 && sum1[l + 1] == s1) {
                    ++l;
                    ++c1;
                }
                while (r > 0 && sum2[r - 1] == s2) {
                    --r;
                    ++c2;
                }
                ans += c1 * c2;
                ++l;
                --r;
            } else if (s1 + s2 < 0) {
                ++l;
            } else {
                --r;
            }
        }
        return ans;
