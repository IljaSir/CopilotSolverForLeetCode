Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int max = 0;
        for (int i = 0; i < nums.length; i++) {
            int count = 0;
            for (int j = i; nums[j] >= 0; count++) {
                int temp = nums[j];
                nums[j] = -1;
                j = temp;
            }
            max = Math.max(max, count);
        }
        return max;

=======

        int max = 0;
        for (int i = 0; i < nums.length; i++) {
            int j = i;
            int count = 0;
            while (nums[j] != -1) {
                int next = nums[j];
                nums[j] = -1;
                j = next;
                count++;
            }
            max = Math.max(max, count);
        }
        return max;

=======

        int max = 0;
        for (int i = 0; i < nums.length; i++) {
            int count = 0;
            int j = i;
            while (nums[j] >= 0) {
                count++;
                int temp = nums[j];
                nums[j] = -1;
                j = temp;
            }
            max = Math.max(max, count);
        }
        return max;

=======

        int n = nums.length;
        boolean[] visited = new boolean[n];
        int max = 0;
        for (int i = 0; i < n; i++) {
            if (!visited[i]) {
                int count = 0;
                int j = i;
                while (!visited[j]) {
                    visited[j] = true;
                    count++;
                    j = nums[j];
                }
                max = Math.max(max, count);
            }
        }
        return max;

=======

        int n = nums.length;
        boolean[] visited = new boolean[n];
        int res = 0;
        for (int i = 0; i < n; i++) {
            if (!visited[i]) {
                int start = nums[i], count = 0;
                do {
                    start = nums[start];
                    count++;
                    visited[start] = true;
                } while (start != nums[i]);
                res = Math.max(res, count);
            }
        }
        return res;

=======

        int max = 0;
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] != Integer.MAX_VALUE) {
                int count = 0;
                int j = i;
                while (nums[j] != Integer.MAX_VALUE) {
                    int temp = nums[j];
                    nums[j] = Integer.MAX_VALUE;
                    j = temp;
                    count++;
                }
                max = Math.max(max, count);
            }
        }
        return max;

=======

        int n = nums.length;
        int max = 0;
        for (int i = 0; i < n; i++) {
            int count = 0;
            for (int j = i; nums[j] != -1; count++) {
                int temp = nums[j];
                nums[j] = -1;
                j = temp;
            }
            max = Math.max(max, count);
        }
        return max;
