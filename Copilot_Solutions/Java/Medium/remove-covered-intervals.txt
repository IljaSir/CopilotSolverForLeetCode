Synthesizing 10/10 solutions

=======

        Arrays.sort(intervals, (a, b) -> {
            if (a[0] == b[0]) {
                return b[1] - a[1];
            }
            return a[0] - b[0];
        });
        int count = 0;
        int right = -1;
        for (int[] interval : intervals) {
            if (interval[1] > right) {
                count++;
                right = interval[1];
            }
        }
        return count;

=======

        Arrays.sort(intervals, (a, b) -> {
            if (a[0] == b[0]) {
                return b[1] - a[1];
            } else {
                return a[0] - b[0];
            }
        });

        int count = 0;
        int end = 0;
        for (int[] interval : intervals) {
            if (interval[1] > end) {
                count++;
                end = interval[1];
            }
        }
        return count;

=======

        Arrays.sort(intervals, (a, b) -> a[0] == b[0] ? b[1] - a[1] : a[0] - b[0]);
        int count = 0;
        int right = 0;
        for (int i = 0; i < intervals.length; i++) {
            if (intervals[i][1] > right) {
                count++;
                right = intervals[i][1];
            }
        }
        return count;

=======

        Arrays.sort(intervals, new Comparator<int[]>() {
            @Override
            public int compare(int[] a, int[] b) {
                if (a[0] == b[0]) {
                    return b[1] - a[1];
                }
                return a[0] - b[0];
            }
        });
        int count = 0;
        int end = 0;
        for (int[] interval : intervals) {
            if (interval[1] > end) {
                count++;
                end = interval[1];
            }
        }
        return count;

=======

        Arrays.sort(intervals, (a, b) -> a[0] - b[0] == 0 ? b[1] - a[1] : a[0] - b[0]);
        int count = 0, end = 0;
        for (int[] interval : intervals) {
            if (interval[1] > end) {
                count++;
                end = interval[1];
            }
        }
        return count;

=======

        int count = 0;
        for (int i = 0; i < intervals.length; i++) {
            boolean isCovered = false;
            for (int j = 0; j < intervals.length; j++) {
                if (i == j) continue;
                if (intervals[i][0] >= intervals[j][0] && intervals[i][1] <= intervals[j][1]) {
                    isCovered = true;
                    break;
                }
            }
            if (!isCovered) count++;
        }
        return count;

=======

        if (intervals.length == 1) {
            return 1;
        }
        Arrays.sort(intervals, new Comparator<int[]>() {
            @Override
            public int compare(int[] a, int[] b) {
                if (a[0] != b[0]) {
                    return a[0] - b[0];
                }
                return b[1] - a[1];
            }
        });
        int count = 1;
        int left = intervals[0][0];
        int right = intervals[0][1];
        for (int i = 1; i < intervals.length; i++) {
            if (intervals[i][0] <= left && intervals[i][1] >= right) {
                left = intervals[i][0];
                right = intervals[i][1];
            } else if (intervals[i][0] >= left && intervals[i][1] <= right) {
                continue;
            } else {
                left = intervals[i][0];
                right = intervals[i][1];
                count++;
            }
        }
        return count;

=======

        int n = intervals.length;
        Arrays.sort(intervals, (a, b) -> a[0] - b[0]);
        int res = 0, right = 0;
        for (int[] interval : intervals) {
            if (interval[1] > right) {
                right = interval[1];
                res++;
            }
        }
        return res;

=======

        Arrays.sort(intervals, (a, b) -> a[0] - b[0]);
        int count = 0;
        int[] prev = new int[2];
        for (int[] i : intervals) {
            if (i[0] > prev[0] && i[1] > prev[1]) {
                count++;
                prev = i;
            }
        }
        return count;

=======

        int count = 0;
        int n = intervals.length;
        for (int i = 0; i < n; i++) {
            int[] a = intervals[i];
            boolean flag = true;
            for (int j = 0; j < n; j++) {
                if (i == j) continue;
                int[] b = intervals[j];
                if (b[0] <= a[0] && a[1] <= b[1]) {
                    flag = false;
                    break;
                }
            }
            if (flag) {
                count++;
            }
        }
        return count;
