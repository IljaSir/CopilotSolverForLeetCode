Synthesizing 10/10 solutions

=======

        if (hand.length % groupSize != 0) {
            return false;
        }
        TreeMap<Integer, Integer> map = new TreeMap<>();
        for (int i : hand) {
            map.put(i, map.getOrDefault(i, 0) + 1);
        }
        while (!map.isEmpty()) {
            int start = map.firstKey();
            for (int i = start; i < start + groupSize; i++) {
                if (!map.containsKey(i)) {
                    return false;
                }
                if (map.get(i) == 1) {
                    map.remove(i);
                } else {
                    map.put(i, map.get(i) - 1);
                }
            }
        }
        return true;

=======

        if (hand.length % groupSize != 0) {
            return false;
        }
        Map<Integer, Integer> map = new HashMap<>();
        for (int i : hand) {
            map.put(i, map.getOrDefault(i, 0) + 1);
        }
        Arrays.sort(hand);
        for (int i : hand) {
            if (map.get(i) == 0) {
                continue;
            }
            for (int j = i; j < i + groupSize; j++) {
                if (!map.containsKey(j) || map.get(j) == 0) {
                    return false;
                }
                map.put(j, map.get(j) - 1);
            }
        }
        return true;

=======

        if (hand.length % groupSize != 0) return false;
        TreeMap<Integer, Integer> map = new TreeMap<>();
        for (int h : hand) {
            map.put(h, map.getOrDefault(h, 0) + 1);
        }
        while (!map.isEmpty()) {
            int start = map.firstKey();
            for (int i = start; i < start + groupSize; i++) {
                if (!map.containsKey(i)) {
                    return false;
                }
                if (map.get(i) == 1) {
                    map.remove(i);
                } else {
                    map.put(i, map.get(i) - 1);
                }
            }
        }
        return true;

=======

        if (hand.length % groupSize != 0) {
            return false;
        }
        Map<Integer, Integer> count = new TreeMap<>();
        for (int card: hand) {
            count.put(card, count.getOrDefault(card, 0) + 1);
        }
        for (int card: count.keySet()) {
            int c = count.get(card);
            if (c > 0) {
                for (int i = card; i < card + groupSize; i++) {
                    int cc = count.getOrDefault(i, 0);
                    if (cc < c) {
                        return false;
                    }
                    count.put(i, cc - c);
                }
            }
        }
        return true;

=======

        if (hand.length % groupSize != 0) {
            return false;
        }
        TreeMap<Integer, Integer> freq = new TreeMap<>();
        for (int card: hand) {
            freq.put(card, freq.getOrDefault(card, 0) + 1);
        }
        while (!freq.isEmpty()) {
            int start = freq.firstKey();
            for (int i = 0; i < groupSize; i++) {
                if (!freq.containsKey(start + i)) {
                    return false;
                }
                if (freq.get(start + i) == 1) {
                    freq.remove(start + i);
                } else {
                    freq.put(start + i, freq.get(start + i) - 1);
                }
            }
        }
        return true;

=======

        if (hand.length % groupSize != 0) {
            return false;
        }
        Map<Integer, Integer> counts = new TreeMap<Integer, Integer>();
        for (int card: hand) {
            counts.put(card, counts.getOrDefault(card, 0) + 1);
        }
        for (int card: counts.keySet()) {
            int count = counts.get(card);
            if (count > 0) {
                for (int i = card; i < card + groupSize; i++) {
                    if (!counts.containsKey(i) || counts.get(i) < count) {
                        return false;
                    }
                    counts.put(i, counts.get(i) - count);
                }
            }
        }
        return true;

=======

        if (hand.length % groupSize != 0) {
            return false;
        }
        int[] count = new int[10000];
        for (int card : hand) {
            count[card]++;
        }
        for (int i = 0; i < count.length; i++) {
            if (count[i] > 0) {
                for (int j = i + 1; j < i + groupSize; j++) {
                    if (count[j] < count[i]) {
                        return false;
                    }
                    count[j] -= count[i];
                }
            }
        }
        return true;

=======

        if (hand.length % groupSize != 0) {
            return false;
        }
        int[] arr = new int[hand.length];
        for (int i = 0; i < hand.length; i++) {
            arr[i] = hand[i];
        }
        Arrays.sort(arr);
        int[] counts = new int[hand.length];
        for (int i = 0; i < hand.length; i++) {
            if (counts[i] > 0) {
                continue;
            }
            int count = 1;
            for (int j = i + 1; j < hand.length; j++) {
                if (arr[j] == arr[i]) {
                    counts[j] = count++;
                }
            }
        }
        for (int i = 0; i < hand.length; i++) {
            if (counts[i] > 0) {
                continue;
            }
            int count = 1;
            int j = i + 1;
            while (count < groupSize) {
                if (j >= hand.length || arr[j] != arr[i] + count || counts[j] > 0) {
                    return false;
                }
                counts[j++] = count++;
            }
        }
        return true;

=======

        if (hand.length % groupSize != 0) {
            return false;
        }
        int[] count = new int[10000];
        for (int h: hand) {
            count[h]++;
        }
        for (int i = 0; i < count.length; i++) {
            if (count[i] > 0) {
                for (int j = i; j < i + groupSize; j++) {
                    if (count[j] < count[i]) {
                        return false;
                    }
                    count[j] -= count[i];
                }
            }
        }
        return true;

=======

        int n = hand.length;
        if (n % groupSize != 0) {
            return false;
        }
        Arrays.sort(hand);
        int numGroups = n / groupSize;
        int[] groupCount = new int[numGroups];
        int groupIdx = 0;
        int prev = -1;
        for (int i = 0; i < n; i++) {
            if (hand[i] != prev) {
                groupIdx = 0;
                prev = hand[i];
            }
            if (groupIdx == numGroups) {
                return false;
            }
            groupCount[groupIdx]++;
            if (groupCount[groupIdx] == groupSize) {
                groupIdx++;
            }
        }
        return true;
