Synthesizing 10/10 solutions

=======

        Set<String> words = new HashSet();
        Map<String, String> cap = new HashMap();
        Map<String, String> vowel = new HashMap();
        for (String w: wordlist) {
            words.add(w);
            String lower = w.toLowerCase();
            cap.putIfAbsent(lower, w);
            vowel.putIfAbsent(devowel(lower), w);
        }

        String[] ans = new String[queries.length];
        int t = 0;
        for (String q: queries) {
            if (words.contains(q)) {
                ans[t++] = q;
            } else {
                String lower = q.toLowerCase();
                if (cap.containsKey(lower)) {
                    ans[t++] = cap.get(lower);
                } else {
                    String dv = devowel(lower);
                    if (vowel.containsKey(dv)) ans[t++] = vowel.get(dv);
                    else ans[t++] = "";
                }
            }
        }
        return ans;

=======

        Set<String> words = new HashSet<>();
        Map<String, String> cap = new HashMap<>();
        Map<String, String> vowel = new HashMap<>();
        for (String w : wordlist) {
            words.add(w);
            String lower = w.toLowerCase();
            cap.putIfAbsent(lower, w);
            vowel.putIfAbsent(devowel(lower), w);
        }
        for (int i = 0; i < queries.length; i++) {
            if (words.contains(queries[i])) continue;
            String lower = queries[i].toLowerCase();
            if (cap.containsKey(lower)) {
                queries[i] = cap.get(lower);
                continue;
            }
            String dv = devowel(lower);
            if (vowel.containsKey(dv)) {
                queries[i] = vowel.get(dv);
            } else {
                queries[i] = "";
            }
        }
        return queries;

=======

        Set<String> words = new HashSet<>();
        Map<String, String> cap = new HashMap<>();
        Map<String, String> vowel = new HashMap<>();
        for (String word : wordlist) {
            words.add(word);
            String lower = word.toLowerCase();
            cap.putIfAbsent(lower, word);
            vowel.putIfAbsent(devowel(lower), word);
        }
        for (int i = 0; i < queries.length; i++) {
            if (words.contains(queries[i])) {
                continue;
            }
            String lower = queries[i].toLowerCase();
            String devoweled = devowel(lower);
            if (cap.containsKey(lower)) {
                queries[i] = cap.get(lower);
            } else if (vowel.containsKey(devoweled)) {
                queries[i] = vowel.get(devoweled);
            } else {
                queries[i] = "";
            }
        }
        return queries;

=======

        Set<String> words = new HashSet<>();
        Map<String, String> caps = new HashMap<>();
        Map<String, String> vowels = new HashMap<>();
        for (String word : wordlist) {
            words.add(word);
            String lower = word.toLowerCase();
            caps.putIfAbsent(lower, word);
            vowels.putIfAbsent(devowel(lower), word);
        }
        for (int i = 0; i < queries.length; i++) {
            if (words.contains(queries[i])) continue;
            String lower = queries[i].toLowerCase();
            if (caps.containsKey(lower)) {
                queries[i] = caps.get(lower);
                continue;
            }
            String devoweled = devowel(lower);
            if (vowels.containsKey(devoweled)) {
                queries[i] = vowels.get(devoweled);
            } else {
                queries[i] = "";
            }
        }
        return queries;

=======

        Set<String> words = new HashSet<>();
        Map<String, String> caps = new HashMap<>();
        Map<String, String> vowels = new HashMap<>();
        for (String w: wordlist) {
            words.add(w);
            String lower = w.toLowerCase();
            caps.putIfAbsent(lower, w);
            vowels.putIfAbsent(devowel(lower), w);
        }
        for (int i = 0; i < queries.length; i++) {
            if (words.contains(queries[i])) continue;
            String lower = queries[i].toLowerCase();
            if (caps.containsKey(lower)) {
                queries[i] = caps.get(lower);
                continue;
            }
            String dv = devowel(lower);
            if (vowels.containsKey(dv)) {
                queries[i] = vowels.get(dv);
            } else {
                queries[i] = "";
            }
        }
        return queries;

=======

        HashSet<String> words = new HashSet<>();
        HashMap<String, String> cap = new HashMap<>();
        HashMap<String, String> vowel = new HashMap<>();
        for (String word : wordlist) {
            words.add(word);
            String lower = word.toLowerCase();
            cap.putIfAbsent(lower, word);
            vowel.putIfAbsent(lower.replaceAll("[aeiou]", "#"), word);
        }
        for (int i = 0; i < queries.length; i++) {
            if (words.contains(queries[i])) {
                continue;
            }
            String lower = queries[i].toLowerCase();
            if (cap.containsKey(lower)) {
                queries[i] = cap.get(lower);
                continue;
            }
            String key = lower.replaceAll("[aeiou]", "#");
            if (vowel.containsKey(key)) {
                queries[i] = vowel.get(key);
                continue;
            }
            queries[i] = "";
        }
        return queries;

=======

        Map<String, String> cap = new HashMap<>();
        Map<String, String> vowel = new HashMap<>();
        Set<String> words = new HashSet<>();
        for (String w : wordlist) {
            String lower = w.toLowerCase();
            String devowel = lower.replaceAll("[aeiou]", "#");
            cap.putIfAbsent(lower, w);
            vowel.putIfAbsent(devowel, w);
            words.add(w);
        }
        for (int i = 0; i < queries.length; i++) {
            if (words.contains(queries[i])) {
                continue;
            }
            String lower = queries[i].toLowerCase();
            String devowel = lower.replaceAll("[aeiou]", "#");
            if (cap.containsKey(lower)) {
                queries[i] = cap.get(lower);
            } else if (vowel.containsKey(devowel)) {
                queries[i] = vowel.get(devowel);
            } else {
                queries[i] = "";
            }
        }
        return queries;

=======

        String[] result = new String[queries.length];
        Set<String> words = new HashSet<>();
        Map<String, String> cap = new HashMap<>();
        Map<String, String> vowel = new HashMap<>();
        for (String word : wordlist) {
            words.add(word);
            String lower = word.toLowerCase();
            String devowel = lower.replaceAll("[aeiou]", "#");
            cap.putIfAbsent(lower, word);
            vowel.putIfAbsent(devowel, word);
        }
        for (int i = 0; i < queries.length; i++) {
            if (words.contains(queries[i])) {
                result[i] = queries[i];
            } else {
                String lower = queries[i].toLowerCase();
                if (cap.containsKey(lower)) {
                    result[i] = cap.get(lower);
                } else {
                    String devowel = lower.replaceAll("[aeiou]", "#");
                    if (vowel.containsKey(devowel)) {
                        result[i] = vowel.get(devowel);
                    } else {
                        result[i] = "";
                    }
                }
            }
        }
        return result;

=======

        String[] result = new String[queries.length];
        HashMap<String, String> words = new HashMap<String, String>();
        HashMap<String, String> caps = new HashMap<String, String>();
        HashMap<String, String> vowels = new HashMap<String, String>();
        for (String word: wordlist) {
            words.put(word, word);
            String lower = word.toLowerCase();
            caps.putIfAbsent(lower, word);
            String vowel = lower.replaceAll("[aeiou]", "#");
            vowels.putIfAbsent(vowel, word);
        }
        for (int i = 0; i < queries.length; i++) {
            if (words.containsKey(queries[i])) {
                result[i] = queries[i];
            } else {
                String lower = queries[i].toLowerCase();
                if (caps.containsKey(lower)) {
                    result[i] = caps.get(lower);
                } else {
                    String vowel = lower.replaceAll("[aeiou]", "#");
                    if (vowels.containsKey(vowel)) {
                        result[i] = vowels.get(vowel);
                    } else {
                        result[i] = "";
                    }
                }
            }
        }
        return result;

=======

        Map<String, Integer> map = new HashMap<String, Integer>();
        for (int i = 0; i < wordlist.length; i++) {
            String word = wordlist[i];
            map.putIfAbsent(word.toLowerCase(), i);
            map.putIfAbsent(word.replaceAll("[aeiou]", "#").toLowerCase(), i);
        }
        String[] ans = new String[queries.length];
        for (int i = 0; i < queries.length; i++) {
            String word = queries[i];
            if (map.containsKey(word)) {
                ans[i] = wordlist[map.get(word)];
            } else if (map.containsKey(word.toLowerCase())) {
                ans[i] = wordlist[map.get(word.toLowerCase())];
            } else if (map.containsKey(word.replaceAll("[aeiou]", "#").toLowerCase())) {
                ans[i] = wordlist[map.get(word.replaceAll("[aeiou]", "#").toLowerCase())];
            } else {
                ans[i] = "";
            }
        }
        return ans;
