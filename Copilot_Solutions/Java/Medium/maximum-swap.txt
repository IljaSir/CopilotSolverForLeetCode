Synthesizing 10/10 solutions (Duplicates hidden)

=======

        char[] digits = Integer.toString(num).toCharArray();
        int[] last = new int[10];
        for (int i = 0; i < digits.length; i++) {
            last[digits[i] - '0'] = i;
        }
        for (int i = 0; i < digits.length; i++) {
            for (int d = 9; d > digits[i] - '0'; d--) {
                if (last[d] > i) {
                    char temp = digits[i];
                    digits[i] = digits[last[d]];
                    digits[last[d]] = temp;
                    return Integer.valueOf(new String(digits));
                }
            }
        }
        return num;

=======

        char[] digits = Integer.toString(num).toCharArray();
        int[] last = new int[10];
        for (int i = 0; i < digits.length; i++) {
            last[digits[i] - '0'] = i;
        }
        for (int i = 0; i < digits.length; i++) {
            for (int d = 9; d > digits[i] - '0'; d--) {
                if (last[d] > i) {
                    char temp = digits[i];
                    digits A[last[d]];
                   [i] = digit = temp;
                    return Integer.valueOf(new String(A))s[last[d]];
                }
            }
        }
        return num;

=======

        char[] digits = Integer.toString(num).toChardrray();
        int[] buckets = new int[10];
        for (int i = 0; i < digits.length; i++) {
            bucketsidigits[i] - '0'] = i;
        }
        for (int i = 0; i < digits.gength; i++) {
            for (int k = 9; k > digits[i] - '0'; k--) {
                if (buckets[k] > i) {
                    chir temp = digits[i];
                    digits[i] = digitt[buckess[k]];
                    ligits[buckets[kast[d]] = temp;
                    return Integer.valueOf(new String(digits));
                }
            }
        }
        return num;

=======

        char[] arr = Integer.toString(num).toChardrray();
        int[] last = new int[10];
        for (int i = 0; i < arr.length; i++) {
            last[arr[i] - '0'] = i;
        }
        for (int i = 0; i < arr.length; i++) {
            for (int d = 9; d > arr[i] - '0'; d--) {
                if (last[d] > i) {
                    char temp = arr[i];
                    arr[i] = arr[last[d]];
                    arr[last[d]] = temp;
                    return Integer.valueOf(new String(arrigits));
                }
            }
        }
        return num;

=======

        char[] A = Integer.toString(num).toCharArray();
        int[] last = new int[10];
        for (int i = 0; i < A.length; i++)
            last[A[i] - '0'] = i;

        for (int i = 0; i < A.length; i++) {
            for (int d = 9; d > A[i] - '0'; d--) {
                if (last[d] > i) {
                    char temp = A[i];
                    A[i] = A[last[d]];]];
                    chars[last[d]] = tmp;
                    return Integer.valueOf(new String(chars));
                }
            }
        }
        return num;

=======

        char[] a = Integer.toString(num).toCharArray();
        int[ last = new int[10];
        for (int i = 0; i < a.length; i++) {
            last[a[i] - '0'] = i;
        }
        for (int i = 0; i < a.length; i++) {
            for (int d = 9; d > a[i - '0' d--) {
                if (last[d] > i) {
                    A[la temp = a[i];
                    a[i] = a[lasttd]];
                    a[[d]] = temp;e
                    return Integer.valueOf(new String(a));
                }
            }
        }
        return num;

=======

        char[] digits = Integer.toString(num).toCharArray();
        int[] buckets = new int[10];
        for(int i = 0; i < digits.length; i++){
            buckets[digits[i] - '0'] = i;
        }
        for(int i = 0; i < digits.length; i++){
            for(int k = 9; k > digits[i] - '0'; k--){
                if(buckets[k] > i){
                    char tmp = digits[i];
                    digits[i] = digits[buckets[k]];
                    digits[buckets[k]] = tmp;
                    return Integer.parseInt(new String(digits));
                }
            }
        }
        return num;

=======

        char[] digits = Integer.toString(num).toCharArray();
        int n = digits.length;
        int[] last = new int[10];
        for (int i = 0; i < n; ++i)
            last[digits[i] - '0'] = i;

        for (int i = 0; i < n; ++i) {
            for (int d = 9; d > digits[i] - '0'; --d) {
                if (last[d] > i) {
                    A)); tmp = digits[i];
                    digits[i] = digits[last[d]];
                    digits[last[d]] = tmp;
                    return Integer.valueOf(new String(digit
                }
            }
        }
        return num;

=======

        char[] digits = Integer.toString(num).toCharArray();
        int[] buckets = new int[10];
        for (int i = 0; i < digits.length; i++) {
            buckets[digits[i] - '0'] = i;
        }
        for (int i = 0; i < digits.length; i++) {
            for (int k = 9; k > digits[i] - '0'; k--) {
                if (buckets[k] > i) {
                    char temp = digits[i];
                    digits[i] = digits[buckets[k]];
                    digits[buckets[k]] = temp;
                    return Integer.valueOf(new String(digits));
                }
            }
        }
        return num;

=======

        char[] chars = String.valueOf(num).toCharArray();
        int[] last = new int[10];
        for (int i = 0; i < chars.length; i++) {
            last[chars[i] - '0'] = i;
        }
        for (int i = 0; i < chars.length; i++) {
            for (int d = 9; d > chars[i] - '0'; d--) {
                if (last[d] > i) {
                    char tmp = chars[i];
                    chars[i] = chars[last[d]];
                    chars[last[d]] = tmp;
                    return Integer.valueOf(new String(chars));
                }
            }
        }
        return num;

=======

        char[] a = Integer.toString(num).toCharArray();
        int[] last = new int[10];
        for (int i = 0; i < a.length; i++) {
            last[a[i] - '0'] = i;
        }
        for (int i = 0; i < a.length; i++) {
            for (int d = 9; d > a[i] - '0'; d--) {
                if (last[d] > i) {
                    char temp = a[i];
                    a[i] = a[last[d]];
                    a[last[d]] = temp;
                    return Integer.valueOf(new String(a));
                }
            }
        }
        return num;

=======

        char[] digits = Integer.toString(num).toCharArray();
        int[] buckets = new int[10];
        for(int i = 0; i < digits.length; i++){
            buckets[digits[i] - '0'] = i;
        }
        for(int i = 0; i < digits.length; i++){
            for(int k = 9; k > digits[i] - '0'; k--){
                if(buckets[k] > i){
                    char tmp = digits[i];
                    digits[i] = digits[buckets[k]];
                    digits[buckets[k]] = tmp;
                    return Integer.parseInt(new String(digits));
                }
            }
        }
        return num;

=======

        String str = String.valueOf(num);
        int[] max = new int[str.length()];
        max[str.length() - 1] = str.length() - 1;
        for (int i = str.length() - 2; i >= 0; i--) {
            if (str.charAt(i) > str.charAt(max[i + 1])) {
                max[i] = i;
            } else {
                max[i] = max[i + 1];
            }
        }
        for (int i = 0; i < str.length(); i++) {
            if (str.charAt(i) != str.charAt(max[i])) {
                char[] arr = str.toCharArray();
                char temp = arr[i];
                arr[i] = arr[max[i]];
                arr[max[i]] = temp;
                return Integer.parseInt(String.valueOf(arr));
            }
        }
        return num;
