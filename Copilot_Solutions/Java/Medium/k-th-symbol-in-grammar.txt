Synthesizing 10/10 solutions

=======

        if (n == 1) return 0;
        if (k % 2 == 0) {
            return kthGrammar(n - 1, k / 2) == 0 ? 1 : 0;
        } else {
            return kthGrammar(n - 1, (k + 1) / 2);
        }

=======

        if (n == 1) {
            return 0;
        }
        int parent = kthGrammar(n - 1, (k + 1) / 2);
        if (parent == 0) {
            return k % 2 == 0 ? 1 : 0;
        } else {
            return k % 2 == 0 ? 0 : 1;
        }

=======

        if (n == 1) {
            return 0;
        }
        int p = kthGrammar(n - 1, (k + 1) / 2);
        if (p == 0) {
            return k % 2 == 0 ? 1 : 0;
        } else {
            return k % 2 == 0 ? 0 : 1;
        }

=======

        if (n == 1) return 0;
        if (k % 2 == 0) return kthGrammar(n - 1, k / 2) == 0 ? 1 : 0;
        return kthGrammar(n - 1, (k + 1) / 2);

=======

        if (n == 1) {
            return 0;
        }
        int p = kthGrammar(n - 1, (k + 1) / 2);
        if (p == 0) {
            return k % 2 == 0 ? 1 : 0;
        }
        return k % 2 == 0 ? 0 : 1;

=======

        if (n == 1) {
            return 0;
        }
        int p = kthGrammar(n - 1, (k + 1) / 2);
        if (p == 0) {
            return k % 2;
        }
        return 1 - k % 2;

=======

        if (n == 1) return 0;
        if (k % 2 == 0) return kthGrammar(n - 1, k / 2) == 1 ? 0 : 1;
        return kthGrammar(n - 1, (k + 1) / 2);

=======

        // 0 1
        // 0 1 1 0
        // 0 1 1 0 1 0 0 1
        // 0 1 1 0 1 0 0 1 1 0 0 1 0 1 1 0
        // 0 1 1 0 1 0 0 1 1 0 0 1 0 1 1 0 1 0 0 1 0 1 1 0 1 0 0 1 0 1 1 0
        // 0 1 1 0 1 0 0 1 1 0 0 1 0 1 1 0 1 0 0

=======

        if (n == 1) {
            return 0;
        }
        int length = (int)Math.pow(2, n - 1);
        int half = length / 2;
        if (k <= half) {
            return kthGrammar(n - 1, k);
        } else {
            return 1 - kthGrammar(n - 1, k - half);
        }

=======

        if (n == 1) {
            return 0;
        } else {
            int m = (int) Math.pow(2, n - 1);
            if (k <= m / 2) {
                return kthGrammar(n - 1, k);
            } else {
                return 1 - kthGrammar(n - 1, k - m / 2);
            }
        }
