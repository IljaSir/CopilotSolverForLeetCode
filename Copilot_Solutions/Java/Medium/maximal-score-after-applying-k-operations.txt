Synthesizing 10/10 solutions

=======

        PriorityQueue<Integer> pq = new PriorityQueue<>();
        for (int num : nums) {
            pq.add(num);
            if (pq.size() > k) {
                pq.poll();
            }
        }
        long sum = 0;
        for (int num : pq) {
            sum += num;
        }
        return sum;
    }
    
    public int maximumScore(int[] nums, int k) {
        int n = nums.length;
        int[] left = new int[n];
        int[] right = new int[n];
        left[k] = k;
        for (int i = k - 1; i >= 0; i--) {
            left[i] = nums[i] <= nums[left[i + 1]] ? i : left[i + 1];
        }
        right[k] = k;
        for (int i = k + 1; i < n; i++) {
            right[i] = nums[i] < nums[right[i - 1]] ? i : right[i - 1];
        }
        long ans = 0;
        for (int i = 0; i < n; i++) {
            int l = left[i];
            int r = right[i];
            int len = r - l + 1;
            if (len > k + 1) {
                continue;
            }
            ans = Math.max(ans, maxKelements(nums, k + 1 - len) + (long) nums[i] * len);
        }
        return (int) (ans % (long) (1e9 + 7));

=======

        PriorityQueue<Long> pq = new PriorityQueue<>();
        for (int i = 0; i < nums.length; i++) {
            pq.add((long)nums[i]);
            if (pq.size() > k) {
                pq.poll();
            }
        }
        long sum = 0;
        while (!pq.isEmpty()) {
            sum += pq.poll();
        }
        return sum;
    }
    public int maximizeScore(int[] nums, int[] multipliers) {
        int n = nums.length;
        int m = multipliers.length;
        long[] dp = new long[m + 1];
        for (int i = 1; i <= m; i++) {
            dp[i] = Long.MIN_VALUE;
        }
        for (int i = 1; i <= m; i++) {
            for (int j = 0; j <= i; j++) {
                int l = j - 1;
                int r = i - j - 1;
                if (l >= 0 && r < n) {
                    dp[i] = Math.max(dp[i], dp[l] + multipliers[i - 1] * nums[l]);
                    dp[i] = Math.max(dp[i], dp[l + 1] + multipliers[i - 1] * nums[n - r - 1]);
                } else if (l >= 0) {
                    dp[i] = Math.max(dp[i], dp[l] + multipliers[i - 1] * nums[l]);
                } else if (r < n) {
                    dp[i] = Math.max(dp[i], dp[l + 1] + multipliers[i - 1] * nums[n - r - 1]);
                }
            }
        }
        long ans = Long.MIN_VALUE;
        for (int i = 0; i <= m; i++) {
            ans = Math.max(ans, dp[i]);
        }
        return (int)ans;

=======

        PriorityQueue<Integer> pq = new PriorityQueue<>();
        long sum = 0;
        for (int num : nums) {
            pq.add(num);
            if (pq.size() > k) {
                sum += pq.poll();
            }
        }
        return sum;
    }
    public int maximumScore(int[] nums, int k) {
        int n = nums.length;
        int min = nums[k];
        int l = k, r = k;
        long res = (long) min * k;
        while (l > 0 || r < n - 1) {
            if (l == 0) {
                r++;
            } else if (r == n - 1) {
                l--;
            } else if (nums[l - 1] < nums[r + 1]) {
                r++;
            } else {
                l--;
            }
            min = Math.min(min, Math.min(nums[l], nums[r]));
            res = Math.max(res, (long) min * (r - l + 1));
        }
        return (int) res;
    }
    public int maximumScore(int[] nums, int k) {
        int n = nums.length;
        int min = nums[k];
        int l = k, r = k;
        long res = (long) min * k;
        while (l > 0 || r < n - 1) {
            if (l == 0) {
                r++;
            } else if (r == n - 1) {
                l--;
            } else if (nums[l - 1] < nums[r + 1]) {
                r++;
            } else {
                l--;
            }
            min = Math.min(min, Math.min(nums[l], nums[r]));
            res = Math.max(res, (long) min * (r - l + 1));
        }
        return (int) res;

=======

        PriorityQueue<Integer> pq = new PriorityQueue<>();
        for(int num: nums) {
            pq.offer(num);
            if(pq.size() > k) {
                pq.poll();
            }
        }
        long sum = 0;
        while(!pq.isEmpty()) {
            sum += pq.poll();
        }
        return sum;
    }
    public int maximumScore(int[] nums, int k) {
        long max = maxKelements(nums, k);
        int l = k - 1;
        int r = k + 1;
        while(l >= 0 || r < nums.length) {
            if(l >= 0 && r < nums.length) {
                if(nums[l] > nums[r]) {
                    max = Math.max(max, maxKelements(nums, l));
                    l--;
                } else {
                    max = Math.max(max, maxKelements(nums, r));
                    r++;
                }
            } else if(l >= 0) {
                max = Math.max(max, maxKelements(nums, l));
                l--;
            } else {
                max = Math.max(max, maxKelements(nums, r));
                r++;
            }
        }
        return (int) max;

=======

        PriorityQueue<Integer> pq = new PriorityQueue<>();
        for(int i = 0; i < nums.length; i++) {
            pq.add(-nums[i]);
        }
        for(int i = 0; i < k; i++) {
            int n = pq.poll();
            pq.add((int)Math.ceil(n/3.0));
        }
        long res = 0;
        while(!pq.isEmpty()) {
            res += -pq.poll();
        }
        return res;
    }
    public int maxScore(int[] nums, int k) {
        int n = nums.length;
        int[] left = new int[n];
        int[] right = new int[n];
        left[0] = nums[0];
        right[n-1] = nums[n-1];
        for(int i = 1; i < n; i++) {
            left[i] = left[i-1] + nums[i];
        }
        for(int i = n-2; i >= 0; i--) {
            right[i] = right[i+1] + nums[i];
        }
        int max = 0;
        for(int i = 0; i <= k; i++) {
            int l = i == 0 ? 0 : left[i-1];
            int r = k-i == 0 ? 0 : right[n-k+i];
            max = Math.max(max, l + r);
        }
        return max;
    }
    public int maxScore(int[] nums, int k) {
        int n = nums.length;
        int[] left = new int[n];
        int[] right = new int[n];
        left[0] = nums[0];
        right[n-1] = nums[n-1];
        for(int i = 1; i < n; i++) {
            left[i] = left[i-1] + nums[i];
        }
        for(int i = n-2; i >= 0; i--) {
            right[i] = right[i+1] + nums[i];
        }
        int max = 0;
        for(int i = 0; i <= k; i++) {
            int l = i == 0 ? 0 : left[i-1];
            int r = k-i == 0 ? 0 : right[n-k+i];
            max = Math.max(max, l + r);
        }
        return max;

=======

        long res = 0;
        PriorityQueue<Integer> pq = new PriorityQueue<>();
        for (int n : nums) {
            pq.add(n);
            if (pq.size() > k) pq.poll();
        }
        for (int n : pq) res += n;
        return res;
    }
    public int maxScore(int[] nums, int k) {
        int n = nums.length;
        long[] left = new long[k + 1];
        long[] right = new long[k + 1];
        for (int i = 0; i < k; i++) {
            left[i + 1] = left[i] + nums[i];
            right[i + 1] = right[i] + nums[n - 1 - i];
        }
        long res = 0;
        for (int i = 0; i <= k; i++) {
            res = Math.max(res, left[i] + maxKelements(nums, k - i) + right[k - i]);
        }
        return (int) (res % 1000000007);

=======

        PriorityQueue<Integer> pq = new PriorityQueue<Integer>(k);
        for (int num : nums) {
            pq.add(num);
            if (pq.size() > k) {
                pq.poll();
            }
        }
        long res = 0;
        for (int num : pq) {
            res += num;
        }
        return res;
    }
    public int maxScore(int[] nums, int k) {
        int n = nums.length;
        int[] left = new int[k + 1];
        int[] right = new int[k + 1];
        for (int i = 0; i < k; i++) {
            left[i + 1] = left[i] + nums[i];
        }
        for (int i = n - 1; i >= n - k; i--) {
            right[k - (n - i - 1)] = right[k - (n - i)] + nums[i];
        }
        long res = 0;
        for (int i = 0; i <= k; i++) {
            res = Math.max(res, maxKelements(nums, k - i) + left[i] + right[k - i]);
        }
        return (int) (res % 1000000007);

=======

        long max = 0;
        PriorityQueue<Integer> pq = new PriorityQueue<>();
        for (int n : nums) {
            pq.add(n);
            if (pq.size() > k) {
                pq.poll();
            }
        }
        while (!pq.isEmpty()) {
            max += pq.poll();
        }
        return max;
    }

    public long maxScore(int[] nums, int k) {
        long max = 0;
        for (int i = 0; i <= k; i++) {
            max = Math.max(max, maxKelements(nums, k - i) + maxKelements(nums, i));
        }
        return max;

=======

        PriorityQueue<Integer> minHeap = new PriorityQueue<>();
        for (int num : nums) {
            minHeap.add(num);
        }
        while (k > 0) {
            int curr = minHeap.poll();
            minHeap.add(curr / 3);
            k--;
        }
        long result = 0;
        for (int num : minHeap) {
            result += num;
        }
        return result;
    }

    public int maxScore(int[] nums, int k) {
        int n = nums.length;
        int[] leftSum = new int[k + 1];
        int[] rightSum = new int[k + 1];
        for (int i = 1; i <= k; i++) {
            leftSum[i] = leftSum[i - 1] + nums[i - 1];
        }
        for (int i = 1; i <= k; i++) {
            rightSum[i] = rightSum[i - 1] + nums[n - i];
        }
        int result = 0;
        for (int i = 0; i <= k; i++) {
            result = Math.max(result, leftSum[i] + rightSum[k - i] + maxKelements(nums, k - i));
        }
        return result;

=======

        PriorityQueue<Integer> pq = new PriorityQueue<>();
        for(int i : nums) {
            pq.add(i);
        }
        while(k-- > 0) {
            int cur = pq.poll();
            pq.add((cur+1)/2);
        }
        long sum = 0;
        for(int i : pq) {
            sum += i;
        }
        return sum;
    }
    public int maxScore(int[] nums, int k) {
        int n = nums.length;
        int[] sum = new int[n+1];
        for(int i = 1; i <= n; i++) {
            sum[i] = sum[i-1] + nums[i-1];
        }
        long max = 0;
        for(int i = 0; i <= k; i++) {
            max = Math.max(max, sum[i] + maxKelements(Arrays.copyOfRange(nums, i, n), k-i));
        }
        return (int)max;
