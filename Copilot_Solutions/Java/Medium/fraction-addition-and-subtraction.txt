Synthesizing 7/10 solutions

=======

        int sign = 1;
        int numerator = 0;
        int denominator = 1;
        int i = 0;
        while (i < expression.length()) {
            if (expression.charAt(i) == '+') {
                sign = 1;
                i++;
            }
            else if (expression.charAt(i) == '-') {
                sign = -1;
                i++;
            }
            int j = i;
            while (j < expression.length() && expression.charAt(j) != '+' && expression.charAt(j) != '-') {
                j++;
            }
            int[] fraction = getFraction(expression.substring(i, j));
            numerator = numerator * fraction[1] + sign * fraction[0] * denominator;
            denominator = denominator * fraction[1];
            int gcd = gcd(numerator, denominator);
            numerator /= gcd;
            denominator /= gcd;
            i = j;
        }
        return numerator + "/" + denominator;
    }
    private int[] getFraction(String s) {
        int i = 0;
        while (i < s.length() && s.charAt(i) != '/') {
            i++;
        }
        int numerator = Integer.parseInt(s.substring(0, i));
        int denominator = Integer.parseInt(s.substring(i + 1));
        return new int[]{numerator, denominator};

=======

        String[] fractions = expression.split("(?=[-+])");
        int[] res = new int[2];
        res[0] = 0;
        res[1] = 1;
        for (String fraction : fractions) {
            int[] frac = new int[2];
            frac[0] = Integer.parseInt(fraction.split("/")[0]);
            frac[1] = Integer.parseInt(fraction.split("/")[1]);
            res = add(res, frac);
        }
        return res[0] + "/" + res[1];
    }

    public int[] add(int[] a, int[] b) {
        int[] res = new int[2];
        res[1] = a[1] * b[1];
        res[0] = a[0] * b[1] + b[0] * a[1];
        int gcd = gcd(res[0], res[1]);
        res[0] /= gcd;
        res[1] /= gcd;
        return res;
    }

    public int gcd(int a, int b) {
        return b == 0 ? a : gcd(b, a % b);

=======

        int numerator = 0;
        int denominator = 1;
        int start = 0;
        if (expression.charAt(0) != '-') {
            start = 1;
        }
        for (int i = start; i < expression.length(); i++) {
            if (expression.charAt(i) == '+' || expression.charAt(i) == '-') {
                String fraction = expression.substring(start, i);
                int[] fractionNums = getFraction(fraction);
                numerator = fractionNums[0] * denominator + fractionNums[1] * numerator;
                denominator = fractionNums[1] * denominator;
                start = i;
            }
        }
        String fraction = expression.substring(start);
        int[] fractionNums = getFraction(fraction);
        numerator = fractionNums[0] * denominator + fractionNums[1] * numerator;
        denominator = fractionNums[1] * denominator;
        int gcd = gcd(Math.abs(numerator), Math.abs(denominator));
        numerator /= gcd;
        denominator /= gcd;
        return numerator + "/" + denominator;
    }

    public int[] getFraction(String fraction) {
        int[] nums = new int[2];
        int index = fraction.indexOf('/');
        nums[0] = Integer.parseInt(fraction.substring(0, index));
        nums[1] = Integer.parseInt(fraction.substring(index + 1));
        return nums;
    }

    public int gcd(int a, int b) {
        if (b == 0) {
            return a;
        }
        return gcd(b, a % b);

=======

        int a = 0, b = 1;
        String[] s = expression.split("(?=[-+])");
        for (String t : s) {
            String[] u = t.split("/");
            int c = Integer.valueOf(u[0]), d = Integer.valueOf(u[1]);
            a = a * d + b * c;
            b *= d;
            int g = gcd(a, b);
            a /= g;
            b /= g;
        }
        return a + "/" + b;

=======

        int a = 0, b = 1;
        int c, d;
        int sign = 1;
        int i = 0;
        if (expression.charAt(0) == '-') {
            sign = -1;
            i++;
        }
        while (i < expression.length()) {
            int j = i;
            while (j < expression.length() && expression.charAt(j) >= '0' && expression.charAt(j) <= '9') {
                j++;
            }
            int num = Integer.parseInt(expression.substring(i, j));
            i = j;
            while (j < expression.length() && expression.charAt(j) != '/') {
                j++;
            }
            int den = Integer.parseInt(expression.substring(i + 1, j));
            i = j + 1;
            c = a * den + sign * num * b;
            d = b * den;
            int g = gcd(c, d);
            a = c / g;
            b = d / g;
            if (i < expression.length() && expression.charAt(i) == '-') {
                sign = -1;
                i++;
            } else {
                sign = 1;
            }
        }
        return a + "/" + b;
    }
    
    private int gcd(int a, int b) {
        if (b == 0) {
            return a;
        }
        return gcd(b, a % b);

=======

        if (expression == null || expression.length() == 0) {
            return "";
        }
        int[] result = new int[]{0, 1};
        int sign = 1;
        int i = 0;
        while (i < expression.length()) {
            if (expression.charAt(i) == '+') {
                sign = 1;
                i++;
            } else if (expression.charAt(i) == '-') {
                sign = -1;
                i++;
            }
            int[] fraction = getFraction(expression, i);
            result = add(result, fraction, sign);
            i += fraction[2];
        }
        return result[0] + "/" + result[1];
    }

    private int[] getFraction(String expression, int i) {
        int j = i;
        while (j < expression.length() && expression.charAt(j) != '+' && expression.charAt(j) != '-') {
            j++;
        }
        String fraction = expression.substring(i, j);
        String[] fractionArray = fraction.split("/");
        int numerator = Integer.valueOf(fractionArray[0]);
        int denominator = Integer.valueOf(fractionArray[1]);
        return new int[]{numerator, denominator, j - i};
    }

    private int[] add(int[] fraction1, int[] fraction2, int sign) {
        int numerator1 = fraction1[0];
        int denominator1 = fraction1[1];
        int numerator2 = fraction2[0] * sign;
        int denominator2 = fraction2[1];
        int numerator = numerator1 * denominator2 + numerator2 * denominator1;
        int denominator = denominator1 * denominator2;
        int gcd = gcd(numerator, denominator);
        return new int[]{numerator / gcd, denominator / gcd};
    }

    private int gcd(int a, int b) {
        if (b == 0) {
            return a;
        }
        return gcd(b, a % b);

=======

        String[] fractions = expression.split("(?=[-+])");
        int numerator = 0;
        int denominator = 1;
        for(String fraction : fractions){
            int[] fractionNums = getFractionNums(fraction);
            numerator = numerator * fractionNums[1] + denominator * fractionNums[0];
            denominator *= fractionNums[1];
            int gcd = gcd(numerator, denominator);
            numerator /= gcd;
            denominator /= gcd;
        }
        return numerator + "/" + denominator;
    }
    
    private int[] getFractionNums(String fraction){
        String[] nums = fraction.split("/");
        int numerator = Integer.parseInt(nums[0]);
        int denominator = Integer.parseInt(nums[1]);
        return new int[]{numerator, denominator};
