Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int[] count = new int[60];
        int res = 0;
        for (int t : time) {
            if (t % 60 == 0) {
                res += count[0];
            } else {
                res += count[60 - t % 60];
            }
            count[t % 60]++;
        }
        return res;

=======

        int[] counts = new int[60];
        int count = 0;
        for (int t : time) {
            count += counts[(60 - t % 60) % 60];
            counts[t % 60]++;
        }
        return count;

=======

        int[] map = new int[60];
        int count = 0;
        for (int t : time) {
            int r = t % 60;
            count += map[(60 - r) % 60];
            map[r]++;
        }
        return count;

=======

        int[] count = new int[60];
        int res = 0;
        for (int i = 0; i < time.length; i++) {
            int t = time[i] % 60;
            res += count[(60 - t) % 60];
            count[t]++;
        }
        return res;

=======

        int[] mod60 = new int[60];
        int count = 0;
        for (int i = 0; i < time.length; i++) {
            int mod = time[i] % 60;
            if (mod == 0) {
                count += mod60[mod];
            } else {
                count += mod60[60 - mod];
            }
            mod60[mod]++;
        }
        return count;

=======

        int[] count = new int[60];
        int pairs = 0;
        for (int t : time) {
            int remainder = t % 60;
            int complement = (60 - remainder) % 60;
            pairs += count[complement];
            count[remainder]++;
        }
        return pairs;

=======

        int[] mod = new int[60];
        int count = 0;
        for (int i = 0; i < time.length; i++) {
            int t = time[i] % 60;
            int c = (60 - t) % 60;
            count += mod[c];
            mod[t]++;
        }
        return count;

=======

        int[] map = new int[60];
        int count = 0;
        for (int t : time) {
            int mod = t % 60;
            int pair = (60 - mod) % 60;
            count += map[pair];
            map[mod]++;
        }
        return count;

=======

        int[] arr=new int[60];
        for(int i=0;i<time.length;i++)
        {
            arr[time[i]%60]++;
        }
        int count=0;
        for(int i=0;i<60;i++)
        {
            if(i==0 || i==30)
            {
                if(arr[i]>=2)
                {
                    count+=(arr[i]*(arr[i]-1))/2;
                }
            }
            else if(i<30)
            {
                if(arr[i]>0 && arr[60-i]>0)
                {
                    count+=arr[i]*arr[60-i];
                }
            }
        }
        return count;
