Synthesizing 10/10 solutions (Duplicates hidden) (Duplicates hidden) (Duplicates hidden)

=======

        int n = nums.length;
        for (int i = 0; i < n; i++) {
            if (nums[i] == 0) {
                continue;
            }
            int slow = i, fast = next(nums, i);
            while (nums[slow] * nums[fast] > 0 && nums[slow] * nums[next(nums, fast)] > 0) {
                if (slow == fast) {
                    if (slow != next(nums, slow)) {
                        return true;
                    } else {
                        break;
                    }
                }
                slow = next(nums, slow);
                fast = next(nums, next(nums, fast));
            }
            int add = i;
            while (nums[add] * nums[next(nums, add)] > 0) {
                int tmp = add;
                add = next(nums, add);
                nums[tmp] = 0;
            }
        }
        return false;

=======

        int n = nums.length;
        for (int i = 0; i < n; i++) {
            if (nums[i] == 0) {
                continue;
            }
            int slow = i, fast = next(nums, i);
            // check if slow & fast meets
            while (nums[slow] * nums[fast] > 0 && nums[slow] * nums[next(nums, fast)] > 0) {
                if (slow == fast) {
                    if (slow == next(nums, slow)) {
                        break;
                    }
                    return true;
                }
                slow = next(nums, slow);
                fast = next(nums, next(nums, fast));
            }
            // set all element along the way to 0
            int add = i;
            while (nums[add] * nums[next(nums, add)] > 0) {
                int tmp = add;
                add = next(nums, add);
                nums[tmp] = 0;
            }
        }
        return false;

=======

        for (int i = 0; i < nums.length; i++) {
            if (nums[i] == 0) {
                continue;
            }
            int slow = i;
            int fast = next(nums, i);
            while (nums[slow] * nums[fast] > 0 && nums[slow] * nums[next(nums, fast)] > 0) {
                if (slow == fast) {
                    if (slow == next(nums, slow)) {
                        break;
                    }
                    return true;
                }
                slow = next(nums, slow);
                fast = next(nums, next(nums, fast));
            }
            slow = i;
            int val = nums[slow];
            while (nums[slow] * val > 0) {
                int next = next(nums, slow);
                nums[slow] = 0;
                slow = next;
            }
        }
        return false;

=======

        int n = nums.length;
        boolean[] visited = new boolean[n];
        for (int i = 0; i < n; i++) {
            if (visited[i]) {
                continue;
            }
            int slow = i, fast = i;
            int direction = nums[i] > 0 ? 1 : -1;
            do {
                slow = next(slow, nums, direction);
                visited[slow] = true;
                fast = next(fast, nums, direction);
                if (fast == -1) {
                    break;
                }
                visited[fast] = true;
                fast = next(fast, nums, direction);
            } while (fast != -1 && slow != fast);
            if (slow != fast) {
                continue;
            }
            if (slow == next(slow, nums, direction)) {
                continue;
            }
            return true;
        }
        return false;
    }

    private int next(int i, int[] nums, int direction) {
        if (nums[i] > 0 && direction == -1) {
            return -1;
        }
        if (nums[i] < 0 && direction == 1) {
            return -1;
        }
        int n = nums.length;
        int next = (i + nums[i]) % n;
        if (next < 0) {
            next += n;
        }
        return next;

=======

        if (nums.length == 1) {
            return false;
        }
        int n = nums.length;
        for (int i = 0; i < n; i++) {
            if (nums[i] == 0) {
                continue;
            }
            int slow = i;
            int fast = getNextIndex(nums, i);
            while (nums[fast] * nums[i] > 0 && nums[getNextIndex(nums, fast)] * nums[i] > 0) {
                if (slow == fast) {
                    if (slow != getNextIndex(nums, slow)) {
                        return true;
                    } else {
                        break;
                    }
                }
                slow = getNextIndex(nums, slow);
                fast = getNextIndex(nums, getNextIndex(nums, fast));
            }
            int add = i;
            while (nums[add] * nums[i] > 0) {
                int tmp = add;
                add = getNextIndex(nums, add);
                nums[tmp] = 0;
            }
        }
        return false;
    }

    private int getNextIndex(int[] nums, int i) {
        int n = nums.length;
        int next = i + nums[i];
        if (next >= 0) {
            return next % n;
        } else {
            return n - (-next % n);
        }

=======

        int n = nums.length;
        for (int i=0; i<n; i++) {
            if (nums[i] == 0) continue;
            int slow = i, fast = next(nums, i);
            while (nums[slow] * nums[fast] > 0 && nums[slow] * nums[next(nums, fast)] > 0) {
                if (slow == fast) {
                    if (slow != next(nums, slow)) return true;
                    else break;
                }
                slow = next(nums, slow);
                fast = next(nums, next(nums, fast));
            }
            slow = i;
            int val = nums[slow];
            while (nums[slow] * val > 0) {
                int next = next(nums, slow);
                nums[slow] = 0;
                slow = next;
            }
        }
        return false;

=======

        for (int i = 0; i < nums.length; i++) {
            if (nums[i] == 0) {
                continue;
            }
            int slow = i;
            int fast = next(nums, i);
            while (nums[slow] * nums[fast] > 0 && nums[slow] * nums[next(nums, fast)] > 0) {
                if (slow == fast) {
                    if (slow == next(nums, slow)) {
                        break;
                    }
                    return true;
                }
                slow = next(nums, slow);
                fast = next(nums, next(nums, fast));
            }
            slow = i;
            int val = nums[slow];
            while (nums[slow] * val > 0) {
                int next = next(nums, slow);
                nums[slow] = 0;
                slow = next;
            }
        }
        return false;

=======

        int n = nums.length;
        boolean[] visited = new boolean[n];
        for (int i = 0; i < n; i++) {
            if (visited[i]) {
                continue;
            }
            int slow = i, fast = i;
            int direction = nums[i] > 0 ? 1 : -1;
            do {
                slow = next(slow, nums, direction);
                visited[slow] = true;
                fast = next(fast, nums, direction);
                if (fast == -1) {
                    break;
                }
                visited[fast] = true;
                fast = next(fast, nums, direction);
            } while (fast != -1 && slow != fast);
            if (slow != fast) {
                continue;
            }
            if (slow == next(slow, nums, direction)) {
                continue;
            }
            return true;
        }
        return false;
    }

    private int next(int i, int[] nums, int direction) {
        if (nums[i] > 0 && direction == -1) {
            return -1;
        }
        if (nums[i] < 0 && direction == 1) {
            return -1;
        }
        int n = nums.length;
        int next = (i + nums[i]) % n;
        if (next < 0) {
            next += n;
        }
        return next;

=======

        if (nums.length == 1) {
            return false;
        }
        int n = nums.length;
        for (int i = 0; i < n; i++) {
            if (nums[i] == 0) {
                continue;
            }
            int slow = i;
            int fast = getNextIndex(nums, i);
            while (nums[fast] * nums[i] > 0 && nums[getNextIndex(nums, fast)] * nums[i] > 0) {
                if (slow == fast) {
                    if (slow != getNextIndex(nums, slow)) {
                        return true;
                    } else {
                        break;
                    }
                }
                slow = getNextIndex(nums, slow);
                fast = getNextIndex(nums, getNextIndex(nums, fast));
            }
            int add = i;
            while (nums[add] * nums[i] > 0) {
                int tmp = add;
                add = getNextIndex(nums, add);
                nums[tmp] = 0;
            }
        }
        return false;
    }

    private int getNextIndex(int[] nums, int i) {
        int n = nums.length;
        int next = i + nums[i];
        if (next >= 0) {
            return next % n;
        } else {
            return n - (-next % n);
        }

=======

        int n = nums.length;
        for (int i=0; i<n; i++) {
            if (nums[i] == 0) continue;
            int slow = i, fast = next(nums, i);
            while (nums[slow] * nums[fast] > 0 && nums[slow] * nums[next(nums, fast)] > 0) {
                if (slow == fast) {
                    if (slow != next(nums, slow)) return true;
                    else break;
                }
                slow = next(nums, slow);
                fast = next(nums, next(nums, fast));
            }
            slow = i;
            int val = nums[slow];
            while (nums[slow] * val > 0) {
                int next = next(nums, slow);
                nums[slow] = 0;
                slow = next;
            }
        }
        return false;

=======

        for (int i = 0; i < nums.length; i++) {
            if (nums[i] == 0) {
                continue;
            }
            int slow = i;
            int fast = next(nums, i);
            while (nums[slow] * nums[fast] > 0 && nums[slow] * nums[next(nums, fast)] > 0) {
                if (slow == fast) {
                    if (slow == next(nums, slow)) {
                        break;
                    }
                    return true;
                }
                slow = next(nums, slow);
                fast = next(nums, next(nums, fast));
            }
            slow = i;
            int val = nums[slow];
            while (nums[slow] * val > 0) {
                int next = next(nums, slow);
                nums[slow] = 0;
                slow = next;
            }
        }
        return false;

=======

        if (nums.length == 1) {
            return false;
        }
        int n = nums.length;
        for (int i = 0; i < n; i++) {
            if (nums[i] == 0) {
                continue;
            }
            int slow = i;
            int fast = getNextIndex(nums, i);
            while (nums[fast] * nums[i] > 0 && nums[getNextIndex(nums, fast)] * nums[i] > 0) {
                if (slow == fast) {
                    if (slow != getNextIndex(nums, slow)) {
                        return true;
                    } else {
                        break;
                    }
                }
                slow = getNextIndex(nums, slow);
                fast = getNextIndex(nums, getNextIndex(nums, fast));
            }
            int add = i;
            while (nums[add] * nums[i] > 0) {
                int tmp = add;
                add = getNextIndex(nums, add);
                nums[tmp] = 0;
            }
        }
        return false;
    }

    private int getNextIndex(int[] nums, int i) {
        int n = nums.length;
        int next = i + nums[i];
        if (next >= 0) {
            return next % n;
        } else {
            return n - (-next % n);
        }

=======

        int n = nums.length;
        for (int i=0; i<n; i++) {
            if (nums[i] == 0) continue;
            int slow = i, fast = next(nums, i);
            while (nums[slow] * nums[fast] > 0 && nums[slow] * nums[next(nums, fast)] > 0) {
                if (slow == fast) {
                    if (slow != next(nums, slow)) return true;
                    else break;
                }
                slow = next(nums, slow);
                fast = next(nums, next(nums, fast));
            }
            slow = i;
            int val = nums[slow];
            while (nums[slow] * val > 0) {
                int next = next(nums, slow);
                nums[slow] = 0;
                slow = next;
            }
        }
        return false;

=======

        if (nums.length <= 1) {
            return false;
        }
        int n = nums.length;
        boolean[] visited = new boolean[n];
        for (int i = 0; i < n; i++) {
            if (visited[i]) {
                continue;
            }
            int start = i;
            int cur = i;
            boolean isForward = nums[i] > 0;
            while (true) {
                int next = (cur + nums[cur]) % n;
                if (next < 0) {
                    next += n;
                }
                if (next == cur || (nums[next] > 0) != isForward) {
                    break;
                }
                if (next == start) {
                    return true;
                }
                visited[cur] = true;
                cur = next;
            }
        }
        return false;
