Synthesizing 10/10 solutions

=======

        int n = arr.length;
        int[] left = new int[n];
        int[] right = new int[n];
        left[0] = arr[0];
        right[n - 1] = arr[n - 1];
        for (int i = 1; i < n; i++) {
            left[i] = Math.max(left[i - 1] + arr[i], arr[i]);
            right[n - i - 1] = Math.max(right[n - i] + arr[n - i - 1], arr[n - i - 1]);
        }
        int res = arr[0];
        for (int i = 0; i < n; i++) {
            res = Math.max(res, left[i]);
            if (i > 0 && i < n - 1) {
                res = Math.max(res, left[i - 1] + right[i + 1]);
            }
        }
        return res;

=======

        int n = arr.length;
        int[] f = new int[n];
        int[] g = new int[n];
        f[0] = arr[0];
        g[0] = arr[0];
        for (int i = 1; i < n; i++) {
            f[i] = Math.max(f[i - 1] + arr[i], arr[i]);
            g[i] = Math.max(f[i - 1], g[i - 1] + arr[i]);
        }
        int ans = arr[0];
        for (int i = 0; i < n; i++) {
            ans = Math.max(ans, Math.max(f[i], g[i]));
        }
        return ans;

=======

        int max = arr[0];
        int[] dp = new int[arr.length];
        dp[0] = arr[0];
        for (int i = 1; i < arr.length; i++) {
            dp[i] = Math.max(dp[i - 1] + arr[i], arr[i]);
            max = Math.max(max, dp[i]);
        }
        int[] dp2 = new int[arr.length];
        dp2[arr.length - 1] = arr[arr.length - 1];
        for (int i = arr.length - 2; i >= 0; i--) {
            dp2[i] = Math.max(dp2[i + 1] + arr[i], arr[i]);
        }
        for (int i = 1; i < arr.length - 1; i++) {
            max = Math.max(max, dp[i - 1] + dp2[i + 1]);
        }
        return max;

=======

        int n = arr.length;
        int[] dp1 = new int[n];
        int[] dp2 = new int[n];
        dp1[0] = arr[0];
        for(int i = 1; i < n; i++){
            dp1[i] = Math.max(arr[i], dp1[i-1] + arr[i]);
        }
        dp2[n-1] = arr[n-1];
        for(int i = n-2; i >= 0; i--){
            dp2[i] = Math.max(arr[i], dp2[i+1] + arr[i]);
        }
        int ans = Integer.MIN_VALUE;
        for(int i = 0; i < n; i++){
            ans = Math.max(ans, dp1[i]);
            if(i > 0 && i < n-1){
                ans = Math.max(ans, dp1[i-1] + dp2[i+1]);
            }
        }
        return ans;

=======

        int n = arr.length;
        int[] dp = new int[n];
        int[] dp2 = new int[n];
        dp[0] = arr[0];
        dp2[0] = arr[0];
        int max = arr[0];
        for (int i = 1; i < n; i++) {
            dp[i] = Math.max(dp[i - 1] + arr[i], arr[i]);
            dp2[i] = Math.max(dp2[i - 1] + arr[i], dp[i - 1]);
            max = Math.max(max, Math.max(dp[i], dp2[i]));
        }
        return max;

=======

        int n = arr.length;
        int[] dp = new int[n];
        int[] dp2 = new int[n];
        dp[0] = arr[0];
        dp2[0] = arr[0];
        int ans = arr[0];
        for(int i = 1; i < n; i++){
            dp[i] = Math.max(dp[i-1] + arr[i], arr[i]);
            dp2[i] = Math.max(dp2[i-1] + arr[i], dp[i-1]);
            ans = Math.max(ans, Math.max(dp[i], dp2[i]));
        }
        return ans;

=======

        int n = arr.length;
        int[] dp = new int[n];
        int[] dp2 = new int[n];
        dp[0] = arr[0];
        dp2[n - 1] = arr[n - 1];
        int max = arr[0];
        for (int i = 1; i < n; i++) {
            dp[i] = Math.max(arr[i], arr[i] + dp[i - 1]);
            max = Math.max(max, dp[i]);
        }
        for (int i = n - 2; i >= 0; i--) {
            dp2[i] = Math.max(arr[i], arr[i] + dp2[i + 1]);
        }
        for (int i = 1; i < n - 1; i++) {
            max = Math.max(max, dp[i - 1] + dp2[i + 1]);
        }
        return max;

=======

        int n = arr.length;
        int[] dp = new int[n];
        int[] dp1 = new int[n];
        dp[0] = arr[0];
        dp1[0] = arr[0];
        int max = arr[0];
        for(int i = 1; i < n; i++) {
            dp[i] = Math.max(arr[i], arr[i] + dp[i - 1]);
            dp1[i] = Math.max(arr[i], arr[i] + dp1[i - 1]);
            max = Math.max(max, dp[i]);
        }
        for(int i = 1; i < n; i++) {
            max = Math.max(max, dp[i - 1] + dp1[i]);
        }
        return max;

=======

        int n = arr.length;
        int[] dp = new int[n];
        int[] dp1 = new int[n];
        dp[0] = arr[0];
        dp1[0] = arr[0];
        int max = arr[0];
        for (int i = 1; i < n; i++) {
            dp[i] = Math.max(arr[i], dp[i - 1] + arr[i]);
            dp1[i] = Math.max(dp[i - 1], dp1[i - 1] + arr[i]);
            max = Math.max(max, Math.max(dp[i], dp1[i]));
        }
        return max;

=======

        int n = arr.length;
        int[] dp = new int[n];
        int[] dpRev = new int[n];
        dp[0] = arr[0];
        dpRev[n - 1] = arr[n - 1];
        for (int i = 1; i < n; i++) {
            dp[i] = Math.max(dp[i - 1] + arr[i], arr[i]);
            dpRev[n - i - 1] = Math.max(dpRev[n - i] + arr[n - i - 1], arr[n - i - 1]);
        }
        int max = Integer.MIN_VALUE;
        for (int i = 0; i < n; i++) {
            max = Math.max(max, dp[i]);
            max = Math.max(max, dpRev[i]);
        }
        for (int i = 1; i < n - 1; i++) {
            max = Math.max(max, dp[i - 1] + dpRev[i + 1]);
        }
        return max;
