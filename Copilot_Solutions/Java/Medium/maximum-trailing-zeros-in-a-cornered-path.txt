Synthesizing 10/10 solutions

=======

        int m = grid.length;
        int n = grid[0].length;
        int[][][] dp = new int[m][n][2];
        dp[0][0][0] = dp[0][0][1] = 0;
        int max = 0;
        for (int i = 1; i < m; i++) {
            dp[i][0][0] = dp[i - 1][0][0];
            while (grid[i][0] % 2 == 0) {
                grid[i][0] /= 2;
                dp[i][0][0] += 1;
            }
            dp[i][0][1] = dp[i - 1][0][1];
            while (grid[i][0] % 5 == 0) {
                grid[i][0] /= 5;
                dp[i][0][1] += 1;
            }
        }
        for (int i = 1; i < n; i++) {
            dp[0][i][0] = dp[0][i - 1][0];
            while (grid[0][i] % 2 == 0) {
                grid[0][i] /= 2;
                dp[0][i][0] += 1;
            }
            dp[0][i][1] = dp[0][i - 1][1];
            while (grid[0][i] % 5 == 0) {
                grid[0][i] /= 5;
                dp[0][i][1] += 1;
            }
        }
        for (int i = 1; i < m; i++) {
            for (int j = 1; j < n; j++) {
                dp[i][j][0] = Math.min(dp[i - 1][j][0], dp[i][j - 1][0]);
                while (grid[i][j] % 2 == 0) {
                    grid[i][j] /= 2;
                    dp[i][j][0] += 1;
                }
                dp[i][j][1] = Math.min(dp[i - 1][j][1], dp[i][j - 1][1]);
                while (grid[i][j] % 5 == 0) {
                    grid[i][j] /=

=======

        int m = grid.length;
        int n = grid[0].length;
        int[][][] dp = new int[m][n][2];
        dp[0][0][0] = dp[0][0][1] = trailingZeros(grid[0][0]);
        for (int i = 1; i < m; i++) {
            dp[i][0][0] = trailingZeros(grid[i][0]);
            dp[i][0][1] = trailingZeros(grid[i][0] * grid[i - 1][0]);
        }
        for (int j = 1; j < n; j++) {
            dp[0][j][0] = trailingZeros(grid[0][j] * grid[0][j - 1]);
            dp[0][j][1] = trailingZeros(grid[0][j]);
        }
        for (int i = 1; i < m; i++) {
            for (int j = 1; j < n; j++) {
                dp[i][j][0] = Math.max(dp[i - 1][j][0], dp[i][j - 1][0]);
                dp[i][j][1] = Math.max(dp[i - 1][j][1], dp[i][j - 1][1]);
                dp[i][j][0] = Math.max(dp[i][j][0], trailingZeros(grid[i][j]) + dp[i - 1][j][1]);
                dp[i][j][0] = Math.max(dp[i][j][0], trailingZeros(grid[i][j]) + dp[i][j - 1][1]);
                dp[i][j][1] = Math.max(dp[i][j][1], trailingZeros(grid[i][j] * grid[i - 1][j]) + dp[i - 1][j][0]);
                dp[i][j][1] = Math.max(dp[i][j][1], trailingZeros(grid[i][j] * grid[i][j - 1]) + dp[i][j - 1][0]);
            }
        }
        return Math.max(dp[m - 1][n - 1][0], dp[m - 1][n - 1][1]);

=======

        int m = grid.length;
        int n = grid[0].length;
        int[][][] dp = new int[m][n][2];
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                for (int k = 0; k < 2; k++) {
                    dp[i][j][k] = -1;
                }
            }
        }
        return Math.min(dfs(grid, 0, 0, 0, dp), dfs(grid, 0, 0, 1, dp));
    }
    private int dfs(int[][] grid, int i, int j, int dir, int[][][] dp) {
        if (i < 0 || i >= grid.length || j < 0 || j >= grid[0].length) {
            return Integer.MAX_VALUE;
        }
        if (dp[i][j][dir] != -1) {
            return dp[i][j][dir];
        }
        int res = 0;
        if (dir == 0) {
            res = Math.min(dfs(grid, i, j + 1, 0, dp), dfs(grid, i + 1, j, 1, dp));
        } else {
            res = Math.min(dfs(grid, i, j - 1, 1, dp), dfs(grid, i + 1, j, 0, dp));
        }
        if (res == Integer.MAX_VALUE) {
            res = 0;
        }
        int cnt = 0;
        int val = grid[i][j];
        while (val % 5 == 0) {
            cnt++;
            val /= 5;
        }
        dp[i][j][dir] = res + cnt;
        return res + cnt;

=======

        int m = grid.length;
        int n = grid[0].length;
        int[][][] dp = new int[m][n][2];
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                dp[i][j][0] = grid[i][j];
                dp[i][j][1] = grid[i][j];
                if (i > 0) {
                    dp[i][j][0] = Math.max(dp[i][j][0], dp[i - 1][j][0] * grid[i][j]);
                    dp[i][j][1] = Math.max(dp[i][j][1], dp[i - 1][j][1] * grid[i][j]);
                }
                if (j > 0) {
                    dp[i][j][0] = Math.max(dp[i][j][0], dp[i][j - 1][0] * grid[i][j]);
                    dp[i][j][1] = Math.max(dp[i][j][1], dp[i][j - 1][1] * grid[i][j]);
                }
            }
        }
        int res = 0;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                int a = dp[i][j][0];
                int b = dp[i][j][1];
                while (a % 2 == 0) {
                    a /= 2;
                    res++;
                }
                while (b % 5 == 0) {
                    b /= 5;
                    res++;
                }
            }
        }
        return res;

=======

        int m = grid.length, n = grid[0].length;
        int[][][] dp = new int[m][n][2];
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (i == 0 && j == 0) {
                    dp[i][j][0] = dp[i][j][1] = countTrailingZeros(grid[i][j]);
                } else if (i == 0) {
                    dp[i][j][0] = countTrailingZeros(grid[i][j - 1] * grid[i][j]);
                    dp[i][j][1] = countTrailingZeros(grid[i][j]);
                } else if (j == 0) {
                    dp[i][j][0] = countTrailingZeros(grid[i][j]);
                    dp[i][j][1] = countTrailingZeros(grid[i - 1][j] * grid[i][j]);
                } else {
                    dp[i][j][0] = Math.max(countTrailingZeros(grid[i][j - 1] * grid[i][j]) + dp[i][j - 1][0], countTrailingZeros(grid[i][j]) + dp[i][j - 1][1]);
                    dp[i][j][1] = Math.max(countTrailingZeros(grid[i - 1][j] * grid[i][j]) + dp[i - 1][j][1], countTrailingZeros(grid[i][j]) + dp[i - 1][j][0]);
                }
            }
        }
        return Math.max(dp[m - 1][n - 1][0], dp[m - 1][n - 1][1]);
    }
    
    private int countTrailingZeros(int x) {
        int res = 0;
        while (x % 10 == 0) {
            res++;
            x /= 10;
        }
        return res;

=======

        int m = grid.length, n = grid[0].length;
        int[][] dp = new int[m][n];
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                int val = grid[i][j];
                if (val % 2 == 0) {
                    if (i == 0 && j == 0) {
                        dp[i][j] = 1;
                    } else if (i == 0) {
                        dp[i][j] = dp[i][j - 1] + 1;
                    } else if (j == 0) {
                        dp[i][j] = dp[i - 1][j] + 1;
                    } else {
                        dp[i][j] = Math.min(dp[i][j - 1], dp[i - 1][j]) + 1;
                    }
                } else {
                    dp[i][j] = 0;
                }
            }
        }
        int res = 0;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                int val = grid[i][j];
                int cnt = 0;
                while (val % 2 == 0) {
                    cnt++;
                    val /= 2;
                }
                res = Math.max(res, Math.min(cnt, dp[i][j]));
            }
        }
        return res;

=======

        int m = grid.length;
        int n = grid[0].length;
        int[][] dp = new int[m][n];
        dp[0][0] = getTrailingZeros(grid[0][0]);
        for (int i = 1; i < m; i++) {
            dp[i][0] = getTrailingZeros(grid[i][0] * grid[i - 1][0]);
        }
        for (int i = 1; i < n; i++) {
            dp[0][i] = getTrailingZeros(grid[0][i] * grid[0][i - 1]);
        }
        for (int i = 1; i < m; i++) {
            for (int j = 1; j < n; j++) {
                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + getTrailingZeros(grid[i][j]);
            }
        }
        return dp[m - 1][n - 1];
    }

    private int getTrailingZeros(int val) {
        int count = 0;
        while (val % 10 == 0) {
            count++;
            val /= 10;
        }
        return count;

=======

        int n = grid.length;
        int m = grid[0].length;
        int[][] dp = new int[n][m];
        for(int i = n - 1; i >= 0; i--) {
            for(int j = m - 1; j >= 0; j--) {
                dp[i][j] = trailingZeros(grid[i][j]);
                if(i < n - 1) {
                    dp[i][j] = Math.min(dp[i][j], dp[i + 1][j]);
                }
                if(j < m - 1) {
                    dp[i][j] = Math.min(dp[i][j], dp[i][j + 1]);
                }
            }
        }
        return dp[0][0];
    }
    private int trailingZeros(int x) {
        int res = 0;
        while(x % 5 == 0) {
            res++;
            x /= 5;
        }
        return res;

=======

        int m = grid.length;
        int n = grid[0].length;
        int[][][] dp = new int[m][n][2];
        int[][][] dp2 = new int[m][n][2];
        int[][][] dp3 = new int[m][n][2];
        int[][][] dp4 = new int[m][n][2];
        dp[0][0][0] = dp[0][0][1] = dp2[0][0][0] = dp2[0][0][1] = dp3[0][0][0] = dp3[0][0][1] = dp4[0][0][0] = dp4[0][0][1] = 0;
        for (int i = 1; i < m; i++) {
            dp[i][0][0] = dp2[i][0][0] = dp3[i][0][0] = dp4[i][0][0] = dp[i - 1][0][0] + trailingZeros(grid[i - 1][0]);
            dp[i][0][1] = dp2[i][0][1] = dp3[i][0][1] = dp4[i][0][1] = dp[i - 1][0][1] + trailingZeros(grid[i - 1][0]);
        }
        for (int i = 1; i < n; i++) {
            dp[0][i][0] = dp2[0][i][0] = dp3[0][i][0] = dp4[0][i][0] = dp[0][i - 1][0] + trailingZeros(grid[0][i - 1]);
            dp[0][i][1] = dp2[0][i][1] = dp3[0][i][1] = dp4[0][i][1] = dp[0][i - 1][1] + trailingZeros(grid[0][i - 1]);
        }
        for (int i = 1; i < m; i++) {
            for (int j = 1; j < n; j++) {
                dp[i][j][0] = Math.max(dp[i - 1][j][0], dp[i][j - 1][

=======

        int m = grid.length;
        int n = grid[0].length;
        int[][][] dp = new int[2][m][n];
        int[][][] dp2 = new int[2][m][n];
        int[][][] dp3 = new int[2][m][n];
        int[][][] dp4 = new int[2][m][n];
        dp[0][0][0] = grid[0][0];
        dp2[0][0][0] = grid[0][0];
        dp3[0][0][0] = grid[0][0];
        dp4[0][0][0] = grid[0][0];
        for (int i = 1; i < m; i++) {
            dp[0][i][0] = dp[0][i - 1][0] * grid[i][0];
            dp2[0][i][0] = dp2[0][i - 1][0] * grid[i][0];
            dp3[0][i][0] = dp3[0][i - 1][0] * grid[i][0];
            dp4[0][i][0] = dp4[0][i - 1][0] * grid[i][0];
        }
        for (int i = 1; i < n; i++) {
            dp[0][0][i] = dp[0][0][i - 1] * grid[0][i];
            dp2[0][0][i] = dp2[0][0][i - 1] * grid[0][i];
            dp3[0][0][i] = dp3[0][0][i - 1] * grid[0][i];
            dp4[0][0][i] = dp4[0][0][i - 1] * grid[0][i];
        }
        for (int i = 1; i < m; i++) {
            for (int j = 1; j < n; j++) {
                dp[0][i][j] = Math.max(dp[0][i - 1][j], dp[0][i][j - 1]) * grid[i][j];
                dp2[0][i][j] = Math
