Synthesizing 10/10 solutions

=======

        int m = box.length;
        int n = box[0].length;
        char[][] res = new char[n][m];
        for (int i = 0; i < m; i++) {
            for (int j = n - 1; j >= 0; j--) {
                if (box[i][j] == '*') {
                    res[j][m - 1 - i] = '*';
                } else if (box[i][j] == '#') {
                    int k = j + 1;
                    while (k < n && box[i][k] == '.') {
                        k++;
                    }
                    if (k < n && box[i][k] == '*') {
                        res[k - 1][m - 1 - i] = '#';
                    } else {
                        res[n - 1][m - 1 - i] = '#';
                    }
                } else {
                    res[j][m - 1 - i] = '.';
                }
            }
        }
        return res;

=======

        int m = box.length;
        int n = box[0].length;
        char[][] res = new char[n][m];
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                res[j][m - 1 - i] = box[i][j];
            }
        }
        for (int i = 0; i < n; i++) {
            int p = m - 1;
            for (int j = m - 1; j >= 0; j--) {
                if (res[i][j] == '.') {
                    continue;
                }
                if (res[i][j] == '*') {
                    p = j - 1;
                    continue;
                }
                res[i][j] = '.';
                res[i][p] = '#';
                p--;
            }
        }
        return res;

=======

        int m = box.length;
        int n = box[0].length;
        char[][] res = new char[n][m];
        for (int i = 0; i < n; i++) {
            for (int j = m - 1; j >= 0; j--) {
                res[i][m - j - 1] = box[j][i];
            }
        }
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (res[i][j] == '#') {
                    int k = j;
                    while (k < m - 1 && res[i][k + 1] == '.') {
                        k++;
                    }
                    if (k != j) {
                        res[i][j] = '.';
                        res[i][k] = '#';
                    }
                }
            }
        }
        return res;

=======

        int m = box.length;
        int n = box[0].length;
        char[][] ans = new char[n][m];
        for (int i = 0; i < n; i++) {
            for (int j = m - 1; j >= 0; j--) {
                ans[i][m - 1 - j] = box[j][i];
            }
        }
        for (int i = 0; i < m; i++) {
            int j = n - 1;
            while (j >= 0 && ans[j][i] != '#') {
                j--;
            }
            int k = j - 1;
            while (k >= 0) {
                if (ans[k][i] == '#') {
                    ans[j][i] = '#';
                    ans[k][i] = '.';
                    j--;
                }
                k--;
            }
        }
        return ans;

=======

        int m = box.length;
        int n = box[0].length;
        char[][] res = new char[n][m];
        for (int i = 0; i < m; i++) {
            int j = n - 1;
            while (j >= 0 && box[i][j] == '.') {
                j--;
            }
            int k = j - 1;
            while (k >= 0) {
                if (box[i][k] == '*') {
                    j = k - 1;
                } else if (box[i][k] == '#') {
                    box[i][j] = '#';
                    box[i][k] = '.';
                    j--;
                }
                k--;
            }
        }
        for (int j = 0; j < n; j++) {
            int i = m - 1;
            while (i >= 0 && box[i][j] == '.') {
                i--;
            }
            int k = i - 1;
            while (k >= 0) {
                if (box[k][j] == '*') {
                    i = k - 1;
                } else if (box[k][j] == '#') {
                    box[i][j] = '#';
                    box[k][j] = '.';
                    i--;
                }
                k--;
            }
        }
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                res[j][i] = box[i][j];
            }
        }
        return res;

=======

        int m = box.length;
        int n = box[0].length;
        char[][] result = new char[n][m];
        for (int i = 0; i < m; i++) {
            int j = n - 1;
            while (j >= 0) {
                if (box[i][j] == '*') {
                    j--;
                } else if (box[i][j] == '#') {
                    int k = j;
                    while (k + 1 < n && box[i][k + 1] == '.') {
                        box[i][k + 1] = '#';
                        box[i][k] = '.';
                        k++;
                    }
                    j--;
                } else {
                    j--;
                }
            }
        }
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                result[j][m - 1 - i] = box[i][j];
            }
        }
        return result;

=======

        int m = box.length;
        int n = box[0].length;
        char[][] ans = new char[n][m];
        for (int i = 0; i < m; i++) {
            int p = n - 1;
            for (int j = n - 1; j >= 0; j--) {
                if (box[i][j] == '#') {
                    ans[p--][m - 1 - i] = '#';
                } else if (box[i][j] == '*') {
                    p = j - 1;
                }
            }
            while (p >= 0) {
                ans[p--][m - 1 - i] = '.';
            }
        }
        return ans;

=======

        int m = box.length;
        int n = box[0].length;
        char[][] res = new char[n][m];
        for (int i = 0; i < m; i++) {
            int last = n - 1;
            for (int j = n - 1; j >= 0; j--) {
                if (box[i][j] == '#') {
                    res[j][m - i - 1] = '#';
                    box[i][j] = '.';
                } else if (box[i][j] == '*') {
                    last = j - 1;
                } else {
                    if (last > j) {
                        res[last][m - i - 1] = '#';
                        box[i][j] = '.';
                    }
                }
            }
        }
        return res;

=======

        int m = box.length;
        int n = box[0].length;
        int[][] dp = new int[m][n];
        for (int i = 0; i < m; i++) {
            for (int j = n - 1; j >= 0; j--) {
                if (box[i][j] == '*') {
                    dp[i][j] = 0;
                } else if (j == n - 1) {
                    dp[i][j] = box[i][j] == '#' ? 1 : 0;
                } else {
                    dp[i][j] = box[i][j] == '#' ? dp[i][j + 1] + 1 : dp[i][j + 1];
                }
            }
        }
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (dp[i][j] > 0) {
                    for (int k = i; k >= 0; k--) {
                        if (box[k][j] == '*') {
                            box[k + 1][j] = '#';
                            box[k][j] = '.';
                            break;
                        }
                        if (k == 0) {
                            box[k][j] = '.';
                            box[k + dp[i][j] - 1][j] = '#';
                        }
                    }
                }
            }
        }
        char[][] ans = new char[n][m];
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                ans[j][i] = box[i][j];
            }
        }
        return ans;

=======

        int m = box.length;
        int n = box[0].length;
        char[][] rotBox = new char[n][m];
        for (int i = 0; i < m; i++) {
            int j = n - 1;
            while (j >= 0) {
                if (box[i][j] == '*') {
                    rotBox[j][m - i - 1] = '*';
                } else if (box[i][j] == '#') {
                    int k = j + 1;
                    while (k < n && box[i][k] == '.') {
                        k++;
                    }
                    rotBox[k - 1][m - i - 1] = '#';
                }
                j--;
            }
        }
        return rotBox;
