Synthesizing 10/10 solutions (Duplicates hidden)

=======

        Arrays.sort(nums);
        int count = 0;
        for (int i = 1; i < nums.length; i++) {
            if (nums[i] <= nums[i - 1]) {
                count += nums[i - 1] - nums[i] + 1;
                nums[i] = nums[i - 1] + 1;
            }
        }
        return count;

=======

        Arrays.sort(nums);
        int count = 0;
        for (int i = 1; i < nums.length; i++) {
            if (nums[i] <= nums[i - 1]) {
                int diff = nums[i - 1] - nums[i] + 1;
                nums[i] += diff;
                count += diff;
            }
        }
        return count;

=======

        int[] count = new int[80000];
        for (int x: nums) count[x]++;
        int ans = 0, taken = 0;
        for (int x = 0; x < 80000; ++x) {
            if (count[x] >= 2) {
                taken += count[x] - 1;
                ans -= x * (count[x] - 1);
            } else if (taken > 0 && count[x] == 0) {
                taken--;
                ans += x;
            }
        }
        return ans;

=======

        int[] count = new int[100001];
        for (int num : nums) {
            count[num]++;
        }
        int ans = 0, taken = 0;
        for (int x = 0; x < 100001; ++x) {
            if (count[x] >= 2) {
                taken += count[x] - 1;
                ans -= x * (count[x] - 1);
            } else if (taken > 0 && count[x] == 0) {
                taken--;
                ans += x;
            }
        }
        return ans;

=======

        int[] count = new int[100000];
        for (int num: nums) {
            count[num]++;
        }
        int taken = 0;
        int ans = 0;
        for (int i = 0; i < count.length; i++) {
            if (count[i] >= 2) {
                taken += count[i] - 1;
                ans -= i * (count[i] - 1);
            } else if (taken > 0 && count[i] == 0) {
                taken--;
                ans += i;
            }
        }
        return ans;

=======

        int[] counter = new int[100000];
        for (int num : nums) {
            counter[num]++;
        }
        int ans = 0;
        int taken = 0;
        for (int i = 0; i < counter.length; i++) {
            if (counter[i] >= 2) {
                taken += counter[i] - 1;
                ans -= i * (counter[i] - 1);
            } else if (taken > 0 && counter[i] == 0) {
                taken--;
                ans += i;
            }
        }
        return ans;

=======

        int[] count = new int[100000];
        int ans = 0;
        for (int x: nums) {
            count[x]++;
        }
        for (int i = 0; i < 100000; i++) {
            if (count[i] > 1) {
                int delta = count[i] - 1;
                ans += delta;
                count[i + 1] += delta;
            }
        }
        return ans;

=======

        Arrays.sort(nums);
        int pre = 0;
        int result = 0;
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] <= pre) {
                result += pre - nums[i] + 1;
                pre++;
            } else {
                pre = nums[i];
            }
        }
        return result;

=======

        int[] counter = new int[100000];
        for (int n : nums) {
            counter[n] += 1;
        }
        int ans = 0;
        int taken = 0;
        for (int i = 0; i < 100000; i++) {
            if (counter[i] >= 2) {
                taken += counter[i] - 1;
                ans -= i * (counter[i] - 1);
            } else if (taken > 0 && counter[i] == 0) {
                taken--;
                ans += i;
            }
        }
        return ans;
