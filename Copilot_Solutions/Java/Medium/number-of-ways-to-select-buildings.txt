Synthesizing 10/10 solutions

=======

        long count = 0;
        for (int i = 0; i < s.length(); i++) {
            if (s.charAt(i) == '1') {
                count++;
            }
        }
        if (count % 3 != 0) {
            return 0;
        }
        long result = 0;
        long target = count / 3;
        if (target == 0) {
            return (count - 2) * (count - 1) / 2 % 1000000007;
        }
        long temp = 0;
        long first = 0;
        long second = 0;
        for (int i = 0; i < s.length(); i++) {
            if (s.charAt(i) == '1') {
                temp++;
            }
            if (temp == target) {
                first++;
            }
            if (temp == target * 2) {
                second++;
            }
        }
        return first * second % 1000000007;

=======

        int n = s.length();
        int count = 0;
        for (int i = 0; i < n; i++) {
            if (s.charAt(i) == '1') {
                count++;
            }
        }
        if (count % 3 != 0) {
            return 0;
        }
        if (count == 0) {
            return (long) (n - 1) * (n - 2) / 2;
        }
        int k = count / 3;
        long res = 0;
        int cnt = 0;
        count = 0;
        for (int i = 0; i < n; i++) {
            if (s.charAt(i) == '1') {
                cnt++;
            }
            if (cnt == k) {
                count++;
            }
            if (cnt == 2 * k) {
                res += count;
            }
        }
        return res;

=======

        long count = 0;
        for (char c : s.toCharArray()) {
            if (c == '1') {
                count++;
            }
        }
        if (count % 3 != 0) {
            return 0;
        }
        if (count == 0) {
            return (long) (s.length() - 1) * (s.length() - 2) / 2;
        }
        long mod = 1000000007;
        long count1 = 0;
        long count2 = 0;
        long count3 = 0;
        long n = s.length();
        long k = count / 3;
        for (int i = 0; i < n; i++) {
            if (s.charAt(i) == '1') {
                count1++;
            }
            if (count1 == k) {
                count2++;
            }
            if (count1 == 2 * k) {
                count3++;
            }
        }
        return (count2 * count3) % mod;

=======

        int n = s.length();
        long count = 0;
        for (int i = 0; i < n; i++) {
            if (s.charAt(i) == '1') {
                count++;
            }
        }
        if (count % 3 != 0) {
            return 0;
        }
        if (count == 0) {
            return (n - 1L) * (n - 2L) / 2L % 1000000007;
        }
        int mod = 1000000007;
        int k = (int) (count / 3);
        int c1 = 0;
        int c2 = 0;
        int c3 = 0;
        for (int i = 0; i < n; i++) {
            if (s.charAt(i) == '1') {
                c1++;
                if (c1 == k) {
                    c2 = i + 1;
                    break;
                }
            }
        }
        for (int i = c2; i < n; i++) {
            if (s.charAt(i) == '1') {
                c3 = i + 1;
                break;
            }
        }
        long ans = 0;
        long p1 = 0;
        long p2 = 0;
        for (int i = c2; i < n; i++) {
            if (s.charAt(i) == '1') {
                p2++;
            } else {
                ans += p1 * p2;
                ans %= mod;
                p1++;
            }
        }
        return ans;

=======

        int n = s.length();
        int oneCount = 0;
        for (int i = 0; i < n; i++) {
            if (s.charAt(i) == '1') {
                oneCount++;
            }
        }
        if (oneCount % 3 != 0) {
            return 0;
        }
        if (oneCount == 0) {
            return (long)(n - 1) * (n - 2) / 2 % 1000000007;
        }
        int k = oneCount / 3;
        int firstOneIndex = -1;
        int secondOneIndex = -1;
        int thirdOneIndex = -1;
        for (int i = 0, count = 0; i < n; i++) {
            if (s.charAt(i) == '1') {
                count++;
                if (count == 1) {
                    firstOneIndex = i;
                }
                if (count == k + 1) {
                    secondOneIndex = i;
                }
                if (count == 2 * k + 1) {
                    thirdOneIndex = i;
                }
            }
        }
        return (long)(secondOneIndex - firstOneIndex) * (thirdOneIndex - secondOneIndex) % 1000000007;

=======

        int n = s.length();
        int count = 0;
        for (char c : s.toCharArray()) {
            if (c == '1') {
                count++;
            }
        }
        if (count % 3 != 0) {
            return 0;
        }
        if (count == 0) {
            long ans = (long) (n - 1) * (n - 2) / 2;
            return ans % 1000000007;
        }
        int k = count / 3;
        int i = 0;
        int j = 0;
        int first = 0;
        int second = 0;
        while (i < n) {
            if (s.charAt(i) == '1') {
                j++;
            }
            if (j == k) {
                first = i;
                break;
            }
            i++;
        }
        while (i < n) {
            if (s.charAt(i) == '1') {
                j++;
            }
            if (j == 2 * k) {
                second = i;
                break;
            }
            i++;
        }
        long ans = (long) (first - k + 1) * (second - first - k + 1);
        return ans % 1000000007;

=======

        long count = 0;
        for (int i = 0; i < s.length(); ++i) {
            if (s.charAt(i) == '1') {
                count++;
            }
        }
        if (count % 3 != 0) {
            return 0;
        }
        if (count == 0) {
            return ((long)s.length() - 1) * ((long)s.length() - 2) / 2;
        }
        long k = count / 3;
        long first = 0;
        long second = 0;
        count = 0;
        for (int i = 0; i < s.length(); ++i) {
            if (s.charAt(i) == '1') {
                count++;
            }
            if (count == k) {
                first++;
            }
            if (count == k * 2) {
                second++;
            }
        }
        return first * second;

=======

        int n = s.length();
        int[] ones = new int[n + 1];
        for (int i = 0; i < n; i++) {
            ones[i + 1] = ones[i] + (s.charAt(i) == '1' ? 1 : 0);
        }
        if (ones[n] % 3 != 0) {
            return 0;
        }
        if (ones[n] == 0) {
            return (long) (n - 1) * (n - 2) / 2 % 1000000007;
        }
        int k = ones[n] / 3;
        int i1 = 0, i2 = 0, i3 = 0;
        for (int i = 0; i <= n; i++) {
            if (ones[i] == k) {
                i1 = i;
            } else if (ones[i] == 2 * k) {
                i2 = i;
            } else if (ones[i] == 3 * k) {
                i3 = i;
            }
        }
        return (long) (i2 - i1) * (i3 - i2) % 1000000007;

=======

        int n = s.length();
        int[] dp = new int[n];
        dp[0] = s.charAt(0) == '1' ? 1 : 0;
        for (int i = 1; i < n; i++) {
            dp[i] = dp[i - 1] + (s.charAt(i) == '1' ? 1 : 0);
        }
        int count = dp[n - 1];
        if (count == 0) {
            return (long) (n - 1) * (n - 2) / 2 % 1000000007;
        }
        if (count % 3 != 0) {
            return 0;
        }
        int target = count / 3;
        long a = 0, b = 0;
        for (int i = 0; i < n; i++) {
            if (dp[i] == target) {
                a++;
            }
            if (dp[i] == target * 2) {
                b++;
            }
        }
        return a * b % 1000000007;

=======

        int n = s.length();
        int[] ones = new int[n];
        int onesCount = 0;
        for (int i = 0; i < n; i++) {
            if (s.charAt(i) == '1') {
                onesCount++;
            }
            ones[i] = onesCount;
        }
        if (onesCount % 3 != 0) {
            return 0;
        }
        if (onesCount == 0) {
            return ((long) n - 2) * (n - 1) / 2 % 1000000007;
        }
        int each = onesCount / 3;
        int first = 0;
        int second = 0;
        int third = 0;
        for (int i = 0; i < n; i++) {
            if (ones[i] == each) {
                first = i + 1;
                break;
            }
        }
        for (int i = first; i < n; i++) {
            if (ones[i] == each * 2) {
                second = i + 1;
                break;
            }
        }
        for (int i = second; i < n; i++) {
            if (ones[i] == each * 3) {
                third = i + 1;
                break;
            }
        }
        return (long) first * (n - second) % 1000000007 * (n - third) % 1000000007;
