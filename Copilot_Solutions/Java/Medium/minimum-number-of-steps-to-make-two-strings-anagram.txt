Synthesizing 10/10 solutions

=======

        int[] count = new int[26];
        for (int i = 0; i < s.length(); i++) {
            count[s.charAt(i) - 'a']++;
            count[t.charAt(i) - 'a']--;
        }
        int res = 0;
        for (int i = 0; i < 26; i++) {
            if (count[i] > 0) {
                res += count[i];
            }
        }
        return res;

=======

        int[] counts = new int[26];
        for (int i = 0; i < s.length(); i++) {
            counts[s.charAt(i) - 'a']++;
            counts[t.charAt(i) - 'a']--;
        }
        int ans = 0;
        for (int count : counts) {
            ans += Math.max(0, count);
        }
        return ans;

=======

        int[] counter = new int[26];
        for (int i = 0; i < s.length(); i++) {
            counter[s.charAt(i) - 'a']++;
            counter[t.charAt(i) - 'a']--;
        }
        int result = 0;
        for (int i = 0; i < counter.length; i++) {
            if (counter[i] > 0) {
                result += counter[i];
            }
        }
        return result;

=======

        int[] chars = new int[26];
        for (int i = 0; i < s.length(); i++) {
            chars[s.charAt(i) - 'a']++;
            chars[t.charAt(i) - 'a']--;
        }
        int res = 0;
        for (int i = 0; i < 26; i++) {
            res += Math.abs(chars[i]);
        }
        return res / 2;

=======

        int[] countS = new int[26];
        int[] countT = new int[26];
        for (int i = 0; i < s.length(); i++) {
            countS[s.charAt(i) - 'a']++;
            countT[t.charAt(i) - 'a']++;
        }
        int diff = 0;
        for (int i = 0; i < 26; i++) {
            diff += Math.abs(countS[i] - countT[i]);
        }
        return diff / 2;

=======

        int[] a = new int[26];
        int[] b = new int[26];
        for (int i = 0; i < s.length(); i++) {
            a[s.charAt(i) - 'a']++;
            b[t.charAt(i) - 'a']++;
        }
        int result = 0;
        for (int i = 0; i < 26; i++) {
            if (a[i] < b[i]) {
                result += b[i] - a[i];
            }
        }
        return result;

=======

        int[] sCount = new int[26];
        int[] tCount = new int[26];
        for (int i = 0; i < s.length(); i++) {
            sCount[s.charAt(i) - 'a']++;
            tCount[t.charAt(i) - 'a']++;
        }
        int result = 0;
        for (int i = 0; i < 26; i++) {
            result += Math.max(0, tCount[i] - sCount[i]);
        }
        return result;

=======

        int[] cnt = new int[26];
        for (char c : s.toCharArray()) {
            cnt[c - 'a']++;
        }
        for (char c : t.toCharArray()) {
            cnt[c - 'a']--;
        }
        int ans = 0;
        for (int i : cnt) {
            if (i > 0) {
                ans += i;
            }
        }
        return ans;

=======

        int[] map = new int[26];
        int ans = 0;
        for (int i = 0; i < s.length(); i++) {
            map[s.charAt(i) - 'a']++;
            map[t.charAt(i) - 'a']--;
        }
        for (int i = 0; i < 26; i++) {
            if (map[i] > 0) {
                ans += map[i];
            }
        }
        return ans;

=======

        int[] freq = new int[26];
        int steps = 0;
        for (char c : s.toCharArray()) {
            freq[c - 'a']++;
        }
        for (char c : t.toCharArray()) {
            if (freq[c - 'a'] > 0) {
                freq[c - 'a']--;
            } else {
                steps++;
            }
        }
        return steps;
