Synthesizing 10/10 solutions

=======

        int[] answer = new int[boxes.length()];
        for (int i = 0; i < boxes.length(); i++) {
            int count = 0;
            for (int j = 0; j < boxes.length(); j++) {
                if (boxes.charAt(j) == '1') {
                    count += Math.abs(i - j);
                }
            }
            answer[i] = count;
        }
        return answer;

=======

        int[] result = new int[boxes.length()];
        int[] left = new int[boxes.length()];
        int[] right = new int[boxes.length()];
        int count = 0;
        for (int i = 0; i < boxes.length(); i++) {
            if (boxes.charAt(i) == '1') {
                count++;
            }
            left[i] = count;
        }
        count = 0;
        for (int i = boxes.length() - 1; i >= 0; i--) {
            if (boxes.charAt(i) == '1') {
                count++;
            }
            right[i] = count;
        }
        for (int i = 0; i < boxes.length(); i++) {
            result[i] = left[i] + right[i] - (boxes.charAt(i) == '1' ? 1 : 0);
        }
        return result;

=======

        int[] res = new int[boxes.length()];
        int[] left = new int[boxes.length()];
        int[] right = new int[boxes.length()];
        left[0] = boxes.charAt(0) == '1' ? 1 : 0;
        right[boxes.length() - 1] = boxes.charAt(boxes.length() - 1) == '1' ? 1 : 0;
        for (int i = 1; i < boxes.length(); i++) {
            left[i] = left[i - 1] + (boxes.charAt(i) == '1' ? 1 : 0);
        }
        for (int i = boxes.length() - 2; i >= 0; i--) {
            right[i] = right[i + 1] + (boxes.charAt(i) == '1' ? 1 : 0);
        }
        for (int i = 0; i < boxes.length(); i++) {
            res[i] = left[i] + right[i];
        }
        return res;

=======

        int[] ans = new int[boxes.length()];
        int[] left = new int[boxes.length()];
        int[] right = new int[boxes.length()];
        int count = 0;
        for (int i = 0; i < boxes.length(); i++) {
            if (boxes.charAt(i) == '1') {
                count++;
            }
            left[i] = count;
        }
        count = 0;
        for (int i = boxes.length() - 1; i >= 0; i--) {
            if (boxes.charAt(i) == '1') {
                count++;
            }
            right[i] = count;
        }
        for (int i = 0; i < boxes.length(); i++) {
            ans[i] = left[i] + right[i];
        }
        return ans;

=======

        int n = boxes.length();
        int[] res = new int[n];
        int[] left = new int[n];
        int[] right = new int[n];
        int sum = 0;
        for (int i = 0; i < n; i++) {
            left[i] = sum;
            sum += boxes.charAt(i) - '0';
        }
        sum = 0;
        for (int i = n - 1; i >= 0; i--) {
            right[i] = sum;
            sum += boxes.charAt(i) - '0';
        }
        for (int i = 0; i < n; i++) {
            res[i] = left[i] + right[i];
        }
        return res;

=======

        int n = boxes.length();
        int[] res = new int[n];
        int[] left = new int[n];
        int[] right = new int[n];
        int sum = 0;
        for (int i = 0; i < n; i++) {
            if (boxes.charAt(i) == '1') {
                sum++;
            }
            left[i] = sum;
        }
        sum = 0;
        for (int i = n - 1; i >= 0; i--) {
            if (boxes.charAt(i) == '1') {
                sum++;
            }
            right[i] = sum;
        }
        for (int i = 0; i < n; i++) {
            res[i] = left[i] + right[i];
        }
        return res;

=======

        int[] res = new int[boxes.length()];
        int sum = 0;
        int ops = 0;
        for (int i = 0; i < boxes.length(); i++) {
            res[i] += ops;
            sum += boxes.charAt(i) - '0';
            ops += sum;
        }
        sum = 0;
        ops = 0;
        for (int i = boxes.length() - 1; i >= 0; i--) {
            res[i] += ops;
            sum += boxes.charAt(i) - '0';
            ops += sum;
        }
        return res;

=======

        int[] res = new int[boxes.length()];
        int left = 0;
        int right = 0;
        int leftCount = 0;
        int rightCount = 0;
        for (int i = 0; i < boxes.length(); i++) {
            if (boxes.charAt(i) == '1') {
                rightCount++;
                right += i;
            }
        }
        for (int i = 0; i < boxes.length(); i++) {
            res[i] = left + right;
            if (boxes.charAt(i) == '1') {
                leftCount++;
                rightCount--;
                left += leftCount;
                right -= rightCount;
            }
        }
        return res;

=======

        int[] result = new int[boxes.length()];
        int[] left = new int[boxes.length()];
        int[] right = new int[boxes.length()];
        int count = 0;
        for(int i=0; i<boxes.length(); i++) {
            if(boxes.charAt(i) == '1') {
                count++;
            }
            left[i] = count;
        }
        count = 0;
        for(int i=boxes.length()-1; i>=0; i--) {
            if(boxes.charAt(i) == '1') {
                count++;
            }
            right[i] = count;
        }
        for(int i=0; i<boxes.length(); i++) {
            result[i] = left[i] + right[i];
        }
        return result;

=======

        int n = boxes.length();
        int[] ans = new int[n];
        int[] left = new int[n];
        int[] right = new int[n];
        int count = 0;
        for(int i=0;i<n;i++){
            if(boxes.charAt(i)=='1'){
                count++;
            }
            left[i] = count;
        }
        count = 0;
        for(int i=n-1;i>=0;i--){
            if(boxes.charAt(i)=='1'){
                count++;
            }
            right[i] = count;
        }
        int[] res = new int[n];
        for(int i=0;i<n;i++){
            res[i] = left[i] + right[i];
        }
        return res;
