Synthesizing 10/10 solutions

=======

        Map<Integer, Integer> map = new HashMap<>();
        int res = 0;
        for (int num : nums) {
            int rev = reverse(num);
            int diff = num - rev;
            map.put(diff, map.getOrDefault(diff, 0) + 1);
        }
        for (int key : map.keySet()) {
            int cnt = map.get(key);
            res = (res + cnt * (cnt - 1) / 2) % 1000000007;
        }
        return res;
    }
    private int reverse(int num) {
        int res = 0;
        while (num > 0) {
            res = res * 10 + num % 10;
            num /= 10;
        }
        return res;

=======

        Map<Integer, Integer> map = new HashMap<>();
        long res = 0;
        for (int num : nums) {
            int rev = reverse(num);
            int diff = num - rev;
            map.put(diff, map.getOrDefault(diff, 0) + 1);
        }
        for (int key : map.keySet()) {
            long val = map.get(key);
            res = (res + val * (val - 1) / 2) % 1000000007;
        }
        return (int) res;
    }

    public int reverse(int num) {
        int rev = 0;
        while (num > 0) {
            rev = rev * 10 + num % 10;
            num /= 10;
        }
        return rev;

=======

        Map<Integer, Integer> map = new HashMap<>();
        int res = 0;
        for (int i = 0; i < nums.length; i++) {
            int rev = reverse(nums[i]);
            int diff = nums[i] - rev;
            int count = map.getOrDefault(diff, 0);
            res = (res + count) % 1000000007;
            map.put(diff, count + 1);
        }
        return res;
    }
    
    private int reverse(int x) {
        int res = 0;
        while (x > 0) {
            res = res * 10 + x % 10;
            x /= 10;
        }
        return res;

=======

        Map<Integer, Integer> map = new HashMap<>();
        int res = 0, mod = 1000000007;
        for (int num : nums) {
            int diff = num - reverse(num);
            map.put(diff, map.getOrDefault(diff, 0) + 1);
        }
        for (int count : map.values()) {
            res = (res + (long) count * (count - 1) / 2) % mod;
        }
        return res;
    }
    
    private int reverse(int n) {
        int res = 0;
        while (n > 0) {
            res = res * 10 + n % 10;
            n /= 10;
        }
        return res;

=======

        int mod = (int)1e9 + 7;
        Map<Integer, Integer> map = new HashMap<>();
        int ans = 0;
        for (int num : nums) {
            int rev = reverse(num);
            int diff = num - rev;
            int cnt = map.getOrDefault(diff, 0);
            ans = (ans + cnt) % mod;
            map.put(diff, cnt + 1);
        }
        return ans;
    }
    
    private int reverse(int num) {
        int ret = 0;
        while (num > 0) {
            ret = ret * 10 + (num % 10);
            num /= 10;
        }
        return ret;

=======

        Map<Integer, Integer> map = new HashMap<>();
        int result = 0;
        for (int i = 0; i < nums.length; i++) {
            int rev = reverse(nums[i]);
            int diff = nums[i] - rev;
            int count = map.getOrDefault(diff, 0);
            result = (result + count) % 1000000007;
            map.put(diff, count + 1);
        }
        return result;
    }
    
    private int reverse(int num) {
        int result = 0;
        while (num > 0) {
            result = result * 10 + num % 10;
            num = num / 10;
        }
        return result;

=======

        Map<Integer, Integer> map = new HashMap<>();
        int res = 0, mod = (int)1e9 + 7;
        for (int num : nums) {
            int rev = reverse(num);
            int diff = num - rev;
            res = (res + map.getOrDefault(diff, 0)) % mod;
            map.put(diff, map.getOrDefault(diff, 0) + 1);
        }
        return res;
    }
    
    private int reverse(int num) {
        int rev = 0;
        while (num > 0) {
            rev = rev * 10 + num % 10;
            num /= 10;
        }
        return rev;

=======

        int mod = 1000000007;
        Map<Integer, Integer> map = new HashMap<>();
        for (int n : nums) {
            int rev = reverse(n);
            int diff = n - rev;
            map.put(diff, map.getOrDefault(diff, 0) + 1);
        }
        long res = 0;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            int count = entry.getValue();
            res += (long) count * (count - 1) / 2;
        }
        return (int) (res % mod);
    }

    private int reverse(int n) {
        int rev = 0;
        while (n > 0) {
            rev = rev * 10 + n % 10;
            n /= 10;
        }
        return rev;

=======

        int mod = (int) 1e9 + 7;
        int ans = 0;
        Map<Integer, Integer> map = new HashMap<>();
        for (int num : nums) {
            int diff = num - rev(num);
            ans = (ans + map.getOrDefault(diff, 0)) % mod;
            map.put(diff, map.getOrDefault(diff, 0) + 1);
        }
        return ans;
    }
    
    private int rev(int x) {
        int ans = 0;
        while (x > 0) {
            ans = ans * 10 + x % 10;
            x /= 10;
        }
        return ans;

=======

        int mod = (int)1e9 + 7;
        int[] rev = new int[(int)1e5 + 1];
        for (int i = 1; i < rev.length; i++) {
            rev[i] = reverse(i);
        }
        Map<Integer, Integer> map = new HashMap<>();
        for (int num : nums) {
            int r = rev[num - num % 10] + num % 10;
            map.put(r, map.getOrDefault(r, 0) + 1);
        }
        int ans = 0;
        for (int cnt : map.values()) {
            ans = (ans + (long)cnt * (cnt - 1) / 2) % mod;
        }
        return ans;
    }
    
    private int reverse(int x) {
        int res = 0;
        while (x > 0) {
            res = res * 10 + x % 10;
            x /= 10;
        }
        return res;
