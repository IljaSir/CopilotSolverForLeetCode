Synthesizing 10/10 solutions

=======

        int mod = 1000000007;
        long ans = 0;
        int len = 0;
        for (int i = 1; i <= n; i++) {
            if ((i & (i - 1)) == 0) {
                len++;
            }
            ans = ((ans << len) | i) % mod;
        }
        return (int) ans;

=======

        int mod = 1000000007;
        long res = 0;
        int len = 0;
        for (int i = 1; i <= n; i++) {
            if ((i & (i - 1)) == 0) {
                len++;
            }
            res = ((res << len) + i) % mod;
        }
        return (int) res;

=======

        int MOD = 1000000007;
        long result = 0;
        int bits = 0;
        for (int i = 1; i <= n; ++i) {
            if ((i & (i - 1)) == 0) {
                bits++;
            }
            result = ((result << bits) % MOD + i) % MOD;
        }
        return (int) result;

=======

        long result = 0;
        int mod = 1000000007;
        for (int i = 1; i <= n; i++) {
            result = ((result << Integer.toBinaryString(i).length()) + i) % mod;
        }
        return (int) result;

=======

        int MOD = 1_000_000_007;
        int result = 0;
        for (int i = 1; i <= n; ++i) {
            result = ((result << Integer.toBinaryString(i).length()) + i) % MOD;
        }
        return result;

=======

        int MOD = 1_000_000_007;
        long ans = 0;
        for (int i = 1; i <= n; i++) {
            ans = ((ans << (Integer.toBinaryString(i).length())) % MOD + i) % MOD;
        }
        return (int) ans;

=======

        long ans = 0;
        long mod = 1000000007;
        for (int i = 1; i <= n; i++) {
            int len = (int) (Math.log(i) / Math.log(2)) + 1;
            ans = ((ans << len) % mod + i) % mod;
        }
        return (int) ans;

=======

        long result = 0;
        long mod = 1000000007;
        int bit = 0;
        for (int i = 1; i <= n; i++) {
            if ((i & (i - 1)) == 0) {
                bit++;
            }
            result = (result * (1 << bit) + i) % mod;
        }
        return (int)result;

=======

        int len = 1;
        int res = 0;
        int mod = 1000000007;
        for (int i = 1; i <= n; i++) {
            if ((i & (i - 1)) == 0) {
                len++;
            }
            res = ((res << len) % mod + i) % mod;
        }
        return res;

=======

        int MOD = 1000000007;
        int result = 0;
        for (int i = 1; i <= n; i++) {
            int len = 0;
            int temp = i;
            while (temp > 0) {
                temp >>= 1;
                len++;
            }
            result = ((result << len) | i) % MOD;
        }
        return result;
