Synthesizing 10/10 solutions

=======

        int[] q = new int[queries.length];
        int[] w = new int[words.length];
        for (int i = 0; i < queries.length; i++) {
            q[i] = f(queries[i]);
        }
        for (int i = 0; i < words.length; i++) {
            w[i] = f(words[i]);
        }
        Arrays.sort(w);
        int[] res = new int[queries.length];
        for (int i = 0; i < queries.length; i++) {
            int n = q[i];
            int l = 0;
            int r = words.length;
            while (l < r) {
                int m = l + (r - l) / 2;
                if (w[m] <= n) {
                    l = m + 1;
                } else {
                    r = m;
                }
            }
            res[i] = words.length - l;
        }
        return res;
    }
    
    private int f(String s) {
        int[] cnt = new int[26];
        for (char c : s.toCharArray()) {
            cnt[c - 'a']++;
        }
        for (int i = 0; i < 26; i++) {
            if (cnt[i] > 0) {
                return cnt[i];
            }
        }
        return 0;

=======

        int[] q = new int[queries.length];
        int[] w = new int[words.length];
        for (int i = 0; i < queries.length; i++) {
            q[i] = f(queries[i]);
        }
        for (int i = 0; i < words.length; i++) {
            w[i] = f(words[i]);
        }
        int[] result = new int[queries.length];
        for (int i = 0; i < queries.length; i++) {
            int count = 0;
            for (int j = 0; j < words.length; j++) {
                if (q[i] < w[j]) {
                    count++;
                }
            }
            result[i] = count;
        }
        return result;
    }
    public int f(String s) {
        int[] count = new int[26];
        for (int i = 0; i < s.length(); i++) {
            count[s.charAt(i) - 'a']++;
        }
        for (int i = 0; i < 26; i++) {
            if (count[i] != 0) {
                return count[i];
            }
        }
        return 0;

=======

        int[] q = new int[queries.length];
        int[] w = new int[words.length];
        for (int i = 0; i < q.length; i++) {
            q[i] = f(queries[i]);
        }
        for (int i = 0; i < w.length; i++) {
            w[i] = f(words[i]);
        }
        int[] res = new int[queries.length];
        for (int i = 0; i < q.length; i++) {
            for (int j = 0; j < w.length; j++) {
                if (q[i] < w[j]) {
                    res[i]++;
                }
            }
        }
        return res;
    }

    private int f(String s) {
        char[] c = s.toCharArray();
        Arrays.sort(c);
        char t = c[0];
        int res = 0;
        for (int i = 0; i < c.length; i++) {
            if (c[i] == t) {
                res++;
            } else {
                break;
            }
        }
        return res;

=======

        int[] q = new int[queries.length];
        int[] w = new int[words.length];
        
        for (int i = 0; i < queries.length; i++) {
            q[i] = f(queries[i]);
        }
        
        for (int i = 0; i < words.length; i++) {
            w[i] = f(words[i]);
        }
        
        int[] res = new int[queries.length];
        
        for (int i = 0; i < q.length; i++) {
            for (int j = 0; j < w.length; j++) {
                if (q[i] < w[j]) {
                    res[i]++;
                }
            }
        }
        
        return res;
    }
    
    private int f(String s) {
        int[] freq = new int[26];
        for (char c : s.toCharArray()) {
            freq[c - 'a']++;
        }
        
        for (int i = 0; i < freq.length; i++) {
            if (freq[i] != 0) {
                return freq[i];
            }
        }
        
        return 0;

=======

        int[] q = new int[queries.length];
        int[] w = new int[words.length];
        int[] ans = new int[queries.length];
        for (int i = 0; i < queries.length; i++) {
            q[i] = f(queries[i]);
        }
        for (int i = 0; i < words.length; i++) {
            w[i] = f(words[i]);
        }
        for (int i = 0; i < queries.length; i++) {
            for (int j = 0; j < words.length; j++) {
                if (q[i] < w[j]) {
                    ans[i]++;
                }
            }
        }
        return ans;
    }
    private int f(String s) {
        char c = s.charAt(0);
        int cnt = 1;
        for (int i = 1; i < s.length(); i++) {
            if (c > s.charAt(i)) {
                c = s.charAt(i);
                cnt = 1;
            } else if (c == s.charAt(i)) {
                cnt++;
            }
        }
        return cnt;

=======

        int[] res = new int[queries.length];
        int[] q = new int[queries.length];
        int[] w = new int[words.length];
        for (int i = 0; i < queries.length; i++) {
            q[i] = f(queries[i]);
        }
        for (int i = 0; i < words.length; i++) {
            w[i] = f(words[i]);
        }
        for (int i = 0; i < queries.length; i++) {
            for (int j = 0; j < words.length; j++) {
                if (q[i] < w[j]) {
                    res[i]++;
                }
            }
        }
        return res;
    }
    public int f(String s) {
        char[] c = s.toCharArray();
        Arrays.sort(c);
        int count = 1;
        for (int i = 1; i < c.length; i++) {
            if (c[i] == c[i - 1]) {
                count++;
            } else {
                break;
            }
        }
        return count;

=======

        int[] f = new int[words.length];
        for (int i = 0; i < words.length; i++) {
            f[i] = f(words[i]);
        }
        Arrays.sort(f);
        int[] res = new int[queries.length];
        for (int i = 0; i < queries.length; i++) {
            int q = f(queries[i]);
            res[i] = f.length - binarySearchSmaller(f, q);
        }
        return res;
    }

    int binarySearchSmaller(int[] f, int q) {
        int l = 0, r = f.length - 1;
        while (l <= r) {
            int m = (l + r) / 2;
            if (f[m] <= q) {
                l = m + 1;
            } else {
                r = m - 1;
            }
        }
        return l;
    }

    int f(String s) {
        char c = s.charAt(0);
        int count = 1;
        for (int i = 1; i < s.length(); i++) {
            if (s.charAt(i) < c) {
                c = s.charAt(i);
                count = 1;
            } else if (s.charAt(i) == c) {
                count++;
            }
        }
        return count;

=======

        int[] q = new int[queries.length];
        int[] w = new int[words.length];
        int[] ans = new int[q.length];
        for (int i = 0; i < q.length; i++) {
            q[i] = f(queries[i]);
        }
        for (int i = 0; i < w.length; i++) {
            w[i] = f(words[i]);
        }
        Arrays.sort(w);
        for (int i = 0; i < q.length; i++) {
            ans[i] = w.length - binarySearch(w, q[i]);
        }
        return ans;
    }
    
    private int binarySearch(int[] w, int q) {
        int l = 0;
        int r = w.length - 1;
        while (l <= r) {
            int m = l + (r - l) / 2;
            if (w[m] <= q) {
                l = m + 1;
            } else {
                r = m - 1;
            }
        }
        return l;
    }
    
    private int f(String s) {
        char[] c = s.toCharArray();
        Arrays.sort(c);
        int ans = 1;
        for (int i = 0; i < c.length - 1; i++) {
            if (c[i] == c[i + 1]) {
                ans++;
            } else {
                break;
            }
        }
        return ans;

=======

        int[] f = new int[11];
        for (String word : words) {
            f[f(word)]++;
        }
        for (int i = 9; i >= 0; i--) {
            f[i] += f[i + 1];
        }
        int[] ans = new int[queries.length];
        for (int i = 0; i < queries.length; i++) {
            ans[i] = f[f(queries[i]) + 1];
        }
        return ans;
    }
    public int f(String s) {
        char min = s.charAt(0);
        int freq = 1;
        for (int i = 1; i < s.length(); i++) {
            if (s.charAt(i) < min) {
                min = s.charAt(i);
                freq = 1;
            } else if (s.charAt(i) == min) {
                freq++;
            }
        }
        return freq;

=======

        int[] wordsFreq = new int[words.length];
        int[] queriesFreq = new int[queries.length];
        for (int i = 0; i < words.length; i++) {
            wordsFreq[i] = getFreq(words[i]);
        }
        for (int i = 0; i < queries.length; i++) {
            queriesFreq[i] = getFreq(queries[i]);
        }
        int[] count = new int[queries.length];
        for (int i = 0; i < queries.length; i++) {
            for (int j = 0; j < words.length; j++) {
                if (queriesFreq[i] < wordsFreq[j]) {
                    count[i]++;
                }
            }
        }
        return count;
    }
    private int getFreq(String s) {
        int[] freq = new int[26];
        for (int i = 0; i < s.length(); i++) {
            freq[s.charAt(i) - 'a']++;
        }
        for (int i = 0; i < 26; i++) {
            if (freq[i] != 0) {
                return freq[i];
            }
        }
        return 0;
