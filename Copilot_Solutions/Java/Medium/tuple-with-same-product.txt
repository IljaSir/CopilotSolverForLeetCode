Synthesizing 10/10 solutions

=======

        Map<Integer, Integer> map = new HashMap<>();
        int res = 0;
        for (int i = 0; i < nums.length; i++) {
            for (int j = i + 1; j < nums.length; j++) {
                int product = nums[i] * nums[j];
                map.put(product, map.getOrDefault(product, 0) + 1);
            }
        }
        for (int val : map.values()) {
            if (val > 1) {
                res += val * (val - 1) * 4;
            }
        }
        return res;

=======

        int n = nums.length;
        Map<Integer, Integer> map = new HashMap<>();
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                int product = nums[i] * nums[j];
                map.put(product, map.getOrDefault(product, 0) + 1);
            }
        }
        int count = 0;
        for (int key : map.keySet()) {
            int v = map.get(key);
            count += v * (v - 1) * 4;
        }
        return count;

=======

        Map<Integer, Integer> map = new HashMap<>();
        int n = nums.length;
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                map.put(nums[i] * nums[j], map.getOrDefault(nums[i] * nums[j], 0) + 1);
            }
        }
        int ans = 0;
        for (int key : map.keySet()) {
            ans += map.get(key) * (map.get(key) - 1) * 4;
        }
        return ans;

=======

        int ans = 0;
        Map<Integer, Integer> map = new HashMap<>();
        for (int i = 0; i < nums.length; i++) {
            for (int j = i + 1; j < nums.length; j++) {
                int product = nums[i] * nums[j];
                map.put(product, map.getOrDefault(product, 0) + 1);
            }
        }
        for (int product : map.keySet()) {
            int count = map.get(product);
            ans += count * (count - 1) * 4;
        }
        return ans;

=======

        int n = nums.length;
        HashMap<Integer, Integer> map = new HashMap<>();
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                int product = nums[i] * nums[j];
                map.put(product, map.getOrDefault(product, 0) + 1);
            }
        }
        int ans = 0;
        for (int key : map.keySet()) {
            int value = map.get(key);
            ans += value * (value - 1) * 4;
        }
        return ans;

=======

        int n = nums.length;
        Map<Integer, Integer> map = new HashMap<>();
        int ans = 0;
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                int product = nums[i] * nums[j];
                int count = map.getOrDefault(product, 0);
                ans += count * 8;
                map.put(product, count + 1);
            }
        }
        return ans;

=======

        int n = nums.length;
        int result = 0;
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                for (int k = j + 1; k < n; k++) {
                    for (int l = k + 1; l < n; l++) {
                        if (nums[i] * nums[j] == nums[k] * nums[l]) {
                            result += 8;
                        }
                    }
                }
            }
        }
        return result;

=======

        int n = nums.length;
        int ans = 0;
        Map<Integer, Integer> map = new HashMap<>();
        for (int i = 0; i < n; ++i) {
            for (int j = i + 1; j < n; ++j) {
                int product = nums[i] * nums[j];
                map.put(product, map.getOrDefault(product, 0) + 1);
            }
        }
        for (int v : map.values()) {
            ans += v * (v - 1) * 4;
        }
        return ans;

=======

        int n = nums.length, count = 0;
        Map<Integer, Integer> map = new HashMap<>();
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                int product = nums[i] * nums[j];
                map.put(product, map.getOrDefault(product, 0) + 1);
            }
        }
        for (int product : map.keySet()) {
            int value = map.get(product);
            count += value * (value - 1) * 4;
        }
        return count;

=======

        int n = nums.length;
        Map<Integer, Integer> map = new HashMap<>();
        for(int i = 0; i < n; i++) {
            for(int j = i + 1; j < n; j++) {
                int product = nums[i] * nums[j];
                map.put(product, map.getOrDefault(product, 0) + 1);
            }
        }
        int count = 0;
        for(int product : map.keySet()) {
            int freq = map.get(product);
            count += freq * (freq - 1);
        }
        return count * 8;
