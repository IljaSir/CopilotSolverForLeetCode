Synthesizing 10/10 solutions

=======

        int[][] newBoard = new int[board.length][board[0].length];
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[0].length; j++) {
                int n = getNeighbors(board, i, j);
                if (board[i][j] == 1) {
                    if (n < 2) {
                        newBoard[i][j] = 0;
                    } else if (n == 2 || n == 3) {
                        newBoard[i][j] = 1;
                    } else if (n > 3) {
                        newBoard[i][j] = 0;
                    }
                } else {
                    if (n == 3) {
                        newBoard[i][j] = 1;
                    }
                }
            }
        }
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[0].length; j++) {
                board[i][j] = newBoard[i][j];
            }
        }
    }
    public int getNeighbors(int[][] board, int i, int j) {
        int n = 0;
        if (i > 0) {
            if (board[i-1][j] == 1) {
                n++;
            }
            if (j > 0 && board[i-1][j-1] == 1) {
                n++;
            }
            if (j < board[0].length - 1 && board[i-1][j+1] == 1) {
                n++;
            }
        }
        if (i < board.length - 1) {
            if (board[i+1][j] == 1) {
                n++;
            }
            if (j > 0 && board[i+1][j-1] == 1) {
                n++;
            }
            if (j < board[0].length - 1 && board[i+1][j+1] == 1) {
                n++;
            }
        }
        if (j > 0 && board[i][j-1] == 1) {
            n++;
        }
        if (j < board[0].length - 1 && board[i][j+1] == 1) {

=======

        int m = board.length;
        int n = board[0].length;
        int[] dx = {-1, -1, -1, 0, 0, 1, 1, 1};
        int[] dy = {-1, 0, 1, -1, 1, -1, 0, 1};
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                int live = 0;
                for (int k = 0; k < 8; k++) {
                    int x = i + dx[k];
                    int y = j + dy[k];
                    if (x < 0 || x >= m || y < 0 || y >= n) {
                        continue;
                    }
                    if (board[x][y] == 1 || board[x][y] == 2) {
                        live++;
                    }
                }
                if (board[i][j] == 1 && (live < 2 || live > 3)) {
                    board[i][j] = 2;
                }
                if (board[i][j] == 0 && live == 3) {
                    board[i][j] = 3;
                }
            }
        }
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                board[i][j] %= 2;
            }
        }

=======

        int[][] temp = new int[board.length][board[0].length];
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[0].length; j++) {
                temp[i][j] = board[i][j];
            }
        }
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[0].length; j++) {
                int count = 0;
                if (i - 1 >= 0) {
                    count += temp[i - 1][j];
                    if (j - 1 >= 0) {
                        count += temp[i - 1][j - 1];
                    }
                    if (j + 1 < board[0].length) {
                        count += temp[i - 1][j + 1];
                    }
                }
                if (i + 1 < board.length) {
                    count += temp[i + 1][j];
                    if (j - 1 >= 0) {
                        count += temp[i + 1][j - 1];
                    }
                    if (j + 1 < board[0].length) {
                        count += temp[i + 1][j + 1];
                    }
                }
                if (j - 1 >= 0) {
                    count += temp[i][j - 1];
                }
                if (j + 1 < board[0].length) {
                    count += temp[i][j + 1];
                }
                if (temp[i][j] == 1) {
                    if (count < 2 || count > 3) {
                        board[i][j] = 0;
                    }
                } else {
                    if (count == 3) {
                        board[i][j] = 1;
                    }
                }
            }
        }

=======

        int m = board.length;
        int n = board[0].length;
        int[][] result = new int[m][n];
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                int count = countNeighbors(board, i, j, m, n);
                if (board[i][j] == 1) {
                    if (count < 2 || count > 3) {
                        result[i][j] = 0;
                    } else {
                        result[i][j] = 1;
                    }
                } else {
                    if (count == 3) {
                        result[i][j] = 1;
                    } else {
                        result[i][j] = 0;
                    }
                }
            }
        }
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                board[i][j] = result[i][j];
            }
        }
    }
    public int countNeighbors(int[][] board, int i, int j, int m, int n) {
        int count = 0;
        if (i - 1 >= 0 && j - 1 >= 0 && board[i - 1][j - 1] == 1) {
            count++;
        }
        if (i - 1 >= 0 && board[i - 1][j] == 1) {
            count++;
        }
        if (i - 1 >= 0 && j + 1 < n && board[i - 1][j + 1] == 1) {
            count++;
        }
        if (j - 1 >= 0 && board[i][j - 1] == 1) {
            count++;
        }
        if (j + 1 < n && board[i][j + 1] == 1) {
            count++;
        }
        if (i + 1 < m && j - 1 >= 0 && board[i + 1][j - 1] == 1) {
            count++;
        }
        if (i + 1 < m && board[i + 1][j] == 1) {
            count++;
        }
        if (i + 1 < m && j + 1

=======

        int[][] dirs = {{-1, -1}, {-1, 0}, {-1, 1}, {0, -1}, {0, 1}, {1, -1}, {1, 0}, {1, 1}};
        int m = board.length, n = board[0].length;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                int live = 0;
                for (int[] dir : dirs) {
                    int x = i + dir[0], y = j + dir[1];
                    if (x < 0 || x >= m || y < 0 || y >= n) continue;
                    if (board[x][y] == 1 || board[x][y] == -1) live++;
                }
                if (board[i][j] == 1 && (live < 2 || live > 3)) board[i][j] = -1;
                if (board[i][j] == 0 && live == 3) board[i][j] = 2;
            }
        }
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (board[i][j] > 0) board[i][j] = 1;
                else board[i][j] = 0;
            }
        }

=======

        int m = board.length, n = board[0].length;
        int[][] dirs = {{-1, -1}, {-1, 0}, {-1, 1}, {0, -1}, {0, 1}, {1, -1}, {1, 0}, {1, 1}};
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                int live = 0;
                for (int[] dir : dirs) {
                    int x = i + dir[0], y = j + dir[1];
                    if (x >= 0 && x < m && y >= 0 && y < n && (board[x][y] & 1) == 1) {
                        live++;
                    }
                }
                if (live == 3 || live + (board[i][j] & 1) == 3) {
                    board[i][j] |= 2;
                }
            }
        }
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                board[i][j] >>= 1;
            }
        }

=======

        int m = board.length;
        int n = board[0].length;
        int[][] copy = new int[m][n];
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                copy[i][j] = board[i][j];
            }
        }
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                int count = 0;
                if(i-1>=0 && j-1>=0 && copy[i-1][j-1]==1) count++;
                if(i-1>=0 && copy[i-1][j]==1) count++;
                if(i-1>=0 && j+1<n && copy[i-1][j+1]==1) count++;
                if(j-1>=0 && copy[i][j-1]==1) count++;
                if(j+1<n && copy[i][j+1]==1) count++;
                if(i+1<m && j-1>=0 && copy[i+1][j-1]==1) count++;
                if(i+1<m && copy[i+1][j]==1) count++;
                if(i+1<m && j+1<n && copy[i+1][j+1]==1) count++;
                if(copy[i][j]==1 && (count<2 || count>3)) board[i][j] = 0;
                if(copy[i][j]==0 && count==3) board[i][j] = 1;
            }
        }

=======

        int[][] boardCopy = new int[board.length][board[0].length];
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[0].length; j++) {
                boardCopy[i][j] = board[i][j];
            }
        }
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[0].length; j++) {
                int liveNeighbors = 0;
                if (i > 0 && j > 0 && boardCopy[i - 1][j - 1] == 1) {
                    liveNeighbors++;
                }
                if (i > 0 && boardCopy[i - 1][j] == 1) {
                    liveNeighbors++;
                }
                if (i > 0 && j < board[0].length - 1 && boardCopy[i - 1][j + 1] == 1) {
                    liveNeighbors++;
                }
                if (j > 0 && boardCopy[i][j - 1] == 1) {
                    liveNeighbors++;
                }
                if (j < board[0].length - 1 && boardCopy[i][j + 1] == 1) {
                    liveNeighbors++;
                }
                if (i < board.length - 1 && j > 0 && boardCopy[i + 1][j - 1] == 1) {
                    liveNeighbors++;
                }
                if (i < board.length - 1 && boardCopy[i + 1][j] == 1) {
                    liveNeighbors++;
                }
                if (i < board.length - 1 && j < board[0].length - 1 && boardCopy[i + 1][j + 1] == 1) {
                    liveNeighbors++;
                }
                if (boardCopy[i][j] == 1 && (liveNeighbors < 2 || liveNeighbors > 3)) {
                    board[i][j] = 0;
                }
                if (boardCopy[i][j] == 0 && liveNeighbors == 3) {
                    board[i][j] = 1;
                }
            }
        }

=======

        int[][] dir = new int[][]{{0,1},{0,-1},{1,0},{-1,0},{1,1},{1,-1},{-1,1},{-1,-1}};
        int m = board.length;
        int n = board[0].length;
        int[][] temp = new int[m][n];
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                temp[i][j] = board[i][j];
            }
        }
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                int live = 0;
                for(int k=0;k<8;k++){
                    int x = i+dir[k][0];
                    int y = j+dir[k][1];
                    if(x>=0 && x<m && y>=0 && y<n && temp[x][y]==1){
                        live++;
                    }
                }
                if(temp[i][j]==0){
                    if(live==3){
                        board[i][j] = 1;
                    }
                }else{
                    if(live<2 || live>3){
                        board[i][j] = 0;
                    }
                }
            }
        }

=======

        int m = board.length;
        int n = board[0].length;
        int[][] result = new int[m][n];
        int[][] directions = {{-1, -1}, {-1, 0}, {-1, 1}, {0, -1}, {0, 1}, {1, -1}, {1, 0}, {1, 1}};
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                int count = 0;
                for (int[] direction : directions) {
                    int x = i + direction[0];
                    int y = j + direction[1];
                    if (x >= 0 && x < m && y >= 0 && y < n && board[x][y] == 1) {
                        count++;
                    }
                }
                if (board[i][j] == 1) {
                    if (count < 2 || count > 3) {
                        result[i][j] = 0;
                    } else {
                        result[i][j] = 1;
                    }
                } else {
                    if (count == 3) {
                        result[i][j] = 1;
                    } else {
                        result[i][j] = 0;
                    }
                }
            }
        }
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                board[i][j] = result[i][j];
            }
        }
