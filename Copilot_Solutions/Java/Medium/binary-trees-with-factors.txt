Synthesizing 10/10 solutions

=======

        Arrays.sort(arr);
        Map<Integer, Long> dp = new HashMap<>();
        for (int i = 0; i < arr.length; i++) {
            dp.put(arr[i], 1L);
            for (int j = 0; j < i; j++) {
                if (arr[i] % arr[j] == 0 && dp.containsKey(arr[i] / arr[j])) {
                    dp.put(arr[i], (dp.get(arr[i]) + dp.get(arr[j]) * dp.get(arr[i] / arr[j])) % 1000000007);
                }
            }
        }
        long sum = 0;
        for (long val : dp.values()) {
            sum = (sum + val) % 1000000007;
        }
        return (int) sum;

=======

        Arrays.sort(arr);
        int MOD = 1000000007;
        long[] dp = new long[arr.length];
        Arrays.fill(dp, 1);
        Map<Integer, Integer> index = new HashMap();
        for (int i = 0; i < arr.length; ++i)
            index.put(arr[i], i);

        for (int i = 0; i < arr.length; ++i)
            for (int j = 0; j < i; ++j)
                if (arr[i] % arr[j] == 0) {
                    int right = arr[i] / arr[j];
                    if (index.containsKey(right))
                        dp[i] = (dp[i] + dp[j] * dp[index.get(right)]) % MOD;
                }

        long ans = 0;
        for (long x: dp) ans += x;
        return (int) (ans % MOD);

=======

        Arrays.sort(arr);
        int n = arr.length;
        long[] dp = new long[n];
        Arrays.fill(dp, 1);
        Map<Integer, Integer> map = new HashMap<>();
        for (int i = 0; i < n; ++i) {
            map.put(arr[i], i);
        }
        long ans = 0;
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < i; ++j) {
                if (arr[i] % arr[j] == 0) {
                    int k = arr[i] / arr[j];
                    if (map.containsKey(k)) {
                        dp[i] += dp[j] * dp[map.get(k)];
                        dp[i] %= 1000000007;
                    }
                }
            }
            ans += dp[i];
            ans %= 1000000007;
        }
        return (int)ans;

=======

        Arrays.sort(arr);
        int n = arr.length;
        long[] dp = new long[n];
        Arrays.fill(dp, 1);
        Map<Integer, Integer> map = new HashMap<>();
        for (int i = 0; i < n; i++) {
            map.put(arr[i], i);
        }
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < i; j++) {
                if (arr[i] % arr[j] == 0) {
                    int right = arr[i] / arr[j];
                    if (map.containsKey(right)) {
                        dp[i] += dp[j] * dp[map.get(right)];
                        dp[i] %= 1000000007;
                    }
                }
            }
        }
        long ans = 0;
        for (long x : dp) {
            ans += x;
            ans %= 1000000007;
        }
        return (int)ans;

=======

        int MOD = 1000000007;
        Arrays.sort(arr);
        int n = arr.length;
        long[] dp = new long[n];
        Arrays.fill(dp, 1);
        Map<Integer, Integer> index = new HashMap();
        for (int i = 0; i < n; ++i)
            index.put(arr[i], i);

        for (int i = 0; i < n; ++i)
            for (int j = 0; j < i; ++j) {
                if (arr[i] % arr[j] == 0) {
                    int right = arr[i] / arr[j];
                    if (index.containsKey(right)) {
                        dp[i] += dp[j] * dp[index.get(right)];
                        dp[i] %= MOD;
                    }
                }
            }

        long ans = 0;
        for (long x: dp) ans += x;
        return (int) (ans % MOD);

=======

        int mod = 1000000007;
        int n = arr.length;
        Arrays.sort(arr);
        long[] dp = new long[n];
        Arrays.fill(dp, 1);
        Map<Integer, Integer> map = new HashMap<>();
        for (int i = 0; i < n; i++) {
            map.put(arr[i], i);
        }
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < i; j++) {
                if (arr[i] % arr[j] == 0) {
                    int right = arr[i] / arr[j];
                    if (map.containsKey(right)) {
                        dp[i] = (dp[i] + dp[j] * dp[map.get(right)]) % mod;
                    }
                }
            }
        }
        long res = 0;
        for (long num : dp) {
            res = (res + num) % mod;
        }
        return (int) res;

=======

        Arrays.sort(arr);
        Map<Integer, Long> dp = new HashMap<>();
        for(int i = 0; i < arr.length; i++) {
            dp.put(arr[i], 1L);
            for(int j = 0; j < i; j++) {
                if(arr[i] % arr[j] == 0 && dp.containsKey(arr[i] / arr[j])) {
                    dp.put(arr[i], (dp.get(arr[i]) + dp.get(arr[j]) * dp.get(arr[i] / arr[j])) % 1000000007);
                }
            }
        }
        long ans = 0;
        for(long val : dp.values()) {
            ans = (ans + val) % 1000000007;
        }
        return (int) ans;

=======

        long MOD = 1000000007;
        Arrays.sort(arr);
        int n = arr.length;
        long[] dp = new long[n];
        Arrays.fill(dp, 1);
        Map<Integer, Integer> map = new HashMap<>();
        for (int i = 0; i < n; i++) {
            map.put(arr[i], i);
        }
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < i; j++) {
                if (arr[i] % arr[j] == 0) {
                    int right = arr[i] / arr[j];
                    if (map.containsKey(right)) {
                        dp[i] += dp[j] * dp[map.get(right)];
                        dp[i] %= MOD;
                    }
                }
            }
        }
        long res = 0;
        for (long x : dp) {
            res += x;
            res %= MOD;
        }
        return (int) res;

=======

        long mod = (long)1e9 + 7;
        int n = arr.length;
        long[] dp = new long[n];
        Arrays.fill(dp, 1);
        Arrays.sort(arr);
        Map<Integer, Integer> map = new HashMap<>();
        for(int i = 0; i < n; i++) {
            map.put(arr[i], i);
        }
        for(int i = 0; i < n; i++) {
            for(int j = 0; j < i; j++) {
                if(arr[i] % arr[j] == 0) {
                    int right = arr[i] / arr[j];
                    if(map.containsKey(right)) {
                        dp[i] = (dp[i] + dp[j] * dp[map.get(right)]) % mod;
                    }
                }
            }
        }
        long ans = 0;
        for(long d : dp) {
            ans = (ans + d) % mod;
        }
        return (int)ans;

=======

        long mod = 1000000007;
        long[] dp = new long[arr.length];
        Arrays.sort(arr);
        Arrays.fill(dp, 1);
        for (int i = 0; i < arr.length; i++) {
            for (int j = 0; j < i; j++) {
                if (arr[i] % arr[j] == 0) {
                    int index = Arrays.binarySearch(arr, arr[i] / arr[j]);
                    if (index >= 0) {
                        dp[i] = (dp[i] + dp[j] * dp[index]) % mod;
                    }
                }
            }
        }
        long ans = 0;
        for (long l : dp) {
            ans = (ans + l) % mod;
        }
        return (int) ans;
