Synthesizing 10/10 solutions

=======

        int x = 0, y = 0;
        StringBuilder sb = new StringBuilder();
        for (char c : target.toCharArray()) {
            int i = (c - 'a') / 5, j = (c - 'a') % 5;
            if (x < i) {
                for (int k = 0; k < i - x; k++) sb.append('D');
            } else if (x > i) {
                for (int k = 0; k < x - i; k++) sb.append('U');
            }
            if (y < j) {
                for (int k = 0; k < j - y; k++) sb.append('R');
            } else if (y > j) {
                for (int k = 0; k < y - j; k++) sb.append('L');
            }
            sb.append('!');
            x = i;
            y = j;
        }
        return sb.toString();

=======

        StringBuilder sb = new StringBuilder();
        int x = 0, y = 0;
        for (char c : target.toCharArray()) {
            int i = (c - 'a') / 5;
            int j = (c - 'a') % 5;
            while (y < i) {
                sb.append("D");
                y++;
            }
            while (y > i) {
                sb.append("U");
                y--;
            }
            while (x < j) {
                sb.append("R");
                x++;
            }
            while (x > j) {
                sb.append("L");
                x--;
            }
            sb.append("!");
        }
        return sb.toString();

=======

        int x = 0, y = 0;
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < target.length(); i++) {
            int c = target.charAt(i) - 'a';
            int r = c / 5, col = c % 5;
            while (x < r) {
                sb.append('D');
                x++;
            }
            while (x > r) {
                sb.append('U');
                x--;
            }
            while (y < col) {
                sb.append('R');
                y++;
            }
            while (y > col) {
                sb.append('L');
                y--;
            }
            sb.append('!');
        }
        return sb.toString();

=======

        int x = 0;
        int y = 0;
        StringBuilder sb = new StringBuilder();
        for (char c: target.toCharArray()) {
            int i = (c - 'a') / 5;
            int j = (c - 'a') % 5;
            if (x > i) {
                for (int k = 0; k < x - i; k++) {
                    sb.append('U');
                }
            }
            if (y > j) {
                for (int k = 0; k < y - j; k++) {
                    sb.append('L');
                }
            }
            if (y < j) {
                for (int k = 0; k < j - y; k++) {
                    sb.append('R');
                }
            }
            if (x < i) {
                for (int k = 0; k < i - x; k++) {
                    sb.append('D');
                }
            }
            sb.append('!');
            x = i;
            y = j;
        }
        return sb.toString();

=======

        StringBuilder sb = new StringBuilder();
        int r = 0, c = 0;
        for (char ch : target.toCharArray()) {
            int x = (ch - 'a') / 5, y = (ch - 'a') % 5;
            if (x > r) {
                for (int i = 0; i < x - r; i++) {
                    sb.append('D');
                }
            } else {
                for (int i = 0; i < r - x; i++) {
                    sb.append('U');
                }
            }
            if (y > c) {
                for (int i = 0; i < y - c; i++) {
                    sb.append('R');
                }
            } else {
                for (int i = 0; i < c - y; i++) {
                    sb.append('L');
                }
            }
            sb.append('!');
            r = x;
            c = y;
        }
        return sb.toString();

=======

        StringBuilder sb = new StringBuilder();
        int x = 0, y = 0;
        for (char c : target.toCharArray()) {
            int idx = c - 'a';
            int nx = idx / 5, ny = idx % 5;
            while (x > nx) {
                sb.append('U');
                x--;
            }
            while (x < nx) {
                sb.append('D');
                x++;
            }
            while (y > ny) {
                sb.append('L');
                y--;
            }
            while (y < ny) {
                sb.append('R');
                y++;
            }
            sb.append('!');
        }
        return sb.toString();

=======

        int r = 0;
        int c = 0;
        StringBuilder sb = new StringBuilder();
        for (char ch : target.toCharArray()) {
            int pos = ch - 'a';
            int nr = pos / 5;
            int nc = pos % 5;
            if (nr < r) {
                while (nr < r) {
                    sb.append('U');
                    r--;
                }
            } else if (nr > r) {
                while (nr > r) {
                    sb.append('D');
                    r++;
                }
            }
            if (nc < c) {
                while (nc < c) {
                    sb.append('L');
                    c--;
                }
            } else if (nc > c) {
                while (nc > c) {
                    sb.append('R');
                    c++;
                }
            }
            sb.append('!');
        }
        return sb.toString();

=======

        int x = 0, y = 0;
        StringBuilder sb = new StringBuilder();
        for (char c: target.toCharArray()) {
            int index = c - 'a';
            int row = index / 5, col = index % 5;
            if (row < y) {
                for (int i = 0; i < y - row; i++) {
                    sb.append('U');
                }
            } else if (row > y) {
                for (int i = 0; i < row - y; i++) {
                    sb.append('D');
                }
            }
            if (col < x) {
                for (int i = 0; i < x - col; i++) {
                    sb.append('L');
                }
            } else if (col > x) {
                for (int i = 0; i < col - x; i++) {
                    sb.append('R');
                }
            }
            sb.append('!');
            x = col;
            y = row;
        }
        return sb.toString();

=======

        int[] pos = new int[2];
        StringBuilder sb = new StringBuilder();
        for (char c : target.toCharArray()) {
            int[] dest = getPos(c);
            while (pos[0] != dest[0] || pos[1] != dest[1]) {
                if (pos[0] < dest[0]) {
                    pos[0]++;
                    sb.append('D');
                } else if (pos[0] > dest[0]) {
                    pos[0]--;
                    sb.append('U');
                } else if (pos[1] < dest[1]) {
                    pos[1]++;
                    sb.append('R');
                } else if (pos[1] > dest[1]) {
                    pos[1]--;
                    sb.append('L');
                }
            }
            sb.append('!');
        }
        return sb.toString();
    }
    private int[] getPos(char c) {
        int[] pos = new int[2];
        if (c == 'z') {
            pos[0] = 5;
            pos[1] = 0;
            return pos;
        }
        pos[0] = (c - 'a') / 5;
        pos[1] = (c - 'a') % 5;
        return pos;

=======

        int[] pos = {0, 0};
        StringBuilder sb = new StringBuilder();
        for (char c: target.toCharArray()) {
            int[] next = getPos(c);
            int dx = next[0] - pos[0];
            int dy = next[1] - pos[1];
            if (dx < 0) {
                for (int i = 0; i < -dx; i++) sb.append('U');
            } else if (dx > 0) {
                for (int i = 0; i < dx; i++) sb.append('D');
            }
            if (dy < 0) {
                for (int i = 0; i < -dy; i++) sb.append('L');
            } else if (dy > 0) {
                for (int i = 0; i < dy; i++) sb.append('R');
            }
            sb.append('!');
            pos = next;
        }
        return sb.toString();
    }
    
    int[] getPos(char c) {
        int[] pos = new int[2];
        if (c == 'z') {
            pos[0] = 5;
            pos[1] = 0;
        } else {
            pos[0] = (c - 'a') / 5;
            pos[1] = (c - 'a') % 5;
        }
        return pos;
