Synthesizing 10/10 solutions

=======

        List<List<Integer>> result = new ArrayList<>();
        backtrack(result, new ArrayList<>(), n, k, 1);
        return result;
    }
    
    private void backtrack(List<List<Integer>> result, List<Integer> tempList, int n, int k, int start) {
        if (tempList.size() == k) {
            result.add(new ArrayList<>(tempList));
            return;
        }
        for (int i = start; i <= n; i++) {
            tempList.add(i);
            backtrack(result, tempList, n, k, i + 1);
            tempList.remove(tempList.size() - 1);
        }

=======

        List<List<Integer>> result = new ArrayList<>();
        combine(result, new ArrayList<>(), 1, n, k);
        return result;
    }
    
    private void combine(List<List<Integer>> result, List<Integer> current, int start, int n, int k) {
        if (k == 0) {
            result.add(new ArrayList<>(current));
            return;
        }
        for (int i = start; i <= n - k + 1; i++) {
            current.add(i);
            combine(result, current, i + 1, n, k - 1);
            current.remove(current.size() - 1);
        }

=======

        List<List<Integer>> res = new ArrayList<>();
        backtrack(res, new ArrayList<Integer>(), 1, n, k);
        return res;
    }
    public void backtrack(List<List<Integer>> res, List<Integer> temp, int start, int n, int k){
        if(temp.size() == k){
            res.add(new ArrayList<>(temp));
            return;
        }
        for(int i = start; i <= n; i++){
            temp.add(i);
            backtrack(res, temp, i+1, n, k);
            temp.remove(temp.size() - 1);
        }

=======

        List<List<Integer>> result = new ArrayList<>();
        List<Integer> current = new ArrayList<>();
        backTrack(result, current, 1, n, k);
        return result;
    }
    
    private void backTrack(List<List<Integer>> result, List<Integer> current, int start, int n, int k) {
        if (current.size() == k) {
            result.add(new ArrayList<>(current));
            return;
        }
        for (int i = start; i <= n; i++) {
            current.add(i);
            backTrack(result, current, i+1, n, k);
            current.remove(current.size()-1);
        }

=======

        List<List<Integer>> result = new ArrayList<>();
        if (n <= 0 || k <= 0 || k > n) return result;
        backtrack(result, new ArrayList<>(), 1, n, k);
        return result;
    }
    
    private void backtrack(List<List<Integer>> result, List<Integer> temp, int start, int n, int k) {
        if (temp.size() == k) {
            result.add(new ArrayList<>(temp));
            return;
        }
        for (int i = start; i <= n; i++) {
            temp.add(i);
            backtrack(result, temp, i + 1, n, k);
            temp.remove(temp.size() - 1);
        }

=======

        List<List<Integer>> combinations = new ArrayList<>();
        if (n < 1 || k < 1) {
            return combinations;
        }
        List<Integer> combination = new ArrayList<>();
        dfs(n, k, 1, combination, combinations);
        return combinations;
    }

    private void dfs(int n, int k, int index, List<Integer> combination, List<List<Integer>> combinations) {
        if (combination.size() == k) {
            combinations.add(new ArrayList<>(combination));
            return;
        }
        for (int i = index; i <= n; i++) {
            combination.add(i);
            dfs(n, k, i + 1, combination, combinations);
            combination.remove(combination.size() - 1);
        }

=======

        List<List<Integer>> ans = new ArrayList<>();
        if (k == 0 || n == 0) {
            return ans;
        }
        List<Integer> list = new ArrayList<>();
        dfs(n, k, 1, list, ans);
        return ans;
    }

    private void dfs(int n, int k, int start, List<Integer> list, List<List<Integer>> ans) {
        if (list.size() == k) {
            ans.add(new ArrayList<>(list));
            return;
        }
        for (int i = start; i <= n; i++) {
            list.add(i);
            dfs(n, k, i + 1, list, ans);
            list.remove(list.size() - 1);
        }

=======

        List<List<Integer>> result = new ArrayList<>();
        if (n <= 0 || k <= 0) return result;
        if (k > n) return result;
        List<Integer> path = new ArrayList<>();
        dfs(n, k, 1, path, result);
        return result;
    }
    public void dfs(int n, int k, int start, List<Integer> path, List<List<Integer>> result) {
        if (path.size() == k) {
            result.add(new ArrayList<>(path));
            return;
        }
        for (int i = start; i <= n; i++) {
            path.add(i);
            dfs(n, k, i + 1, path, result);
            path.remove(path.size() - 1);
        }
    }
}

=======

        List<List<Integer>> result = new ArrayList<>();
        if(n < 1 || k < 1) return result;
        List<Integer> current = new ArrayList<>();
        combine(result, current, n, k, 1);
        return result;
    }
    public void combine(List<List<Integer>> result, List<Integer> current, int n, int k, int start) {
        if(k == 0) {
            result.add(new ArrayList<>(current));
            return;
        }
        for(int i = start; i <= n; i++) {
            current.add(i);
            combine(result, current, n, k - 1, i + 1);
            current.remove(current.size() - 1);
        }

=======

        if (n < 1 || k < 1 || k > n) {
            return Collections.emptyList();
        }
        List<List<Integer>> result = new ArrayList<>();
        List<Integer> comb = new ArrayList<>();
        backtrack(result, comb, 1, n, k);
        return result;
    }

    private void backtrack(List<List<Integer>> result, List<Integer> comb, int start, int n, int k) {
        if (k == 0) {
            result.add(new ArrayList<>(comb));
            return;
        }
        for (int i = start; i <= n; i++) {
            comb.add(i);
            backtrack(result, comb, i + 1, n, k - 1);
            comb.remove(comb.size() - 1);
        }
