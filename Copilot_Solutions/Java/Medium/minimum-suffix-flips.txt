Synthesizing 10/10 solutions

=======

        int result = 0;
        char last = '0';
        for (char c : target.toCharArray()) {
            if (c != last) {
                result++;
                last = c;
            }
        }
        return result;

=======

        int count = 0;
        char prev = '0';
        for (int i = 0; i < target.length(); i++) {
            if (prev != target.charAt(i)) {
                count++;
                prev = target.charAt(i);
            }
        }
        return count;

=======

        int changes = 0;
        char prev = '0';
        for (char c : target.toCharArray()) {
            if (c != prev) {
                changes++;
                prev = c;
            }
        }
        return changes;

=======

        int count = 0;
        char c = '0';
        for(int i=0;i<target.length();i++){
            if(target.charAt(i) != c){
                count++;
                c = target.charAt(i);
            }
        }
        return count;

=======

        int n = target.length();
        int ans = 0;
        int prev = 0;
        for (int i = 0; i < n; i++) {
            if (target.charAt(i) - '0' != prev) {
                ans++;
                prev = 1 - prev;
            }
        }
        return ans;

=======

        int count = 0;
        char[] chars = target.toCharArray();
        for (int i = 0; i < chars.length; i++) {
            if (chars[i] == '1') {
                count++;
                while (i < chars.length && chars[i] == '1') {
                    i++;
                }
                i--;
            }
        }
        return count;

=======

        int flips = 0;
        int prev = 0;
        for (int i = 0; i < target.length(); i++) {
            int curr = Character.getNumericValue(target.charAt(i));
            if (curr != prev) {
                flips++;
                prev = curr;
            }
        }
        return flips;

=======

        int count = 0;
        int prev = 0;
        for (int i = 0; i < target.length(); i++) {
            int curr = target.charAt(i) - '0';
            if (curr == prev) {
                continue;
            }
            count++;
            prev = curr;
        }
        return count;

=======

        char[] t = target.toCharArray();
        int n = t.length;
        int res = 0;
        char c = '0';
        for (int i = 0; i < n; i++) {
            if (t[i] == c) continue;
            res++;
            c = t[i];
        }
        return res;

=======

        int res = 0, n = target.length();
        char[] chs = target.toCharArray();
        for (int i = 0; i < n; i++) {
            if (chs[i] == '1') {
                res++;
                while (i < n && chs[i] == '1') {
                    i++;
                }
            }
        }
        return res;
