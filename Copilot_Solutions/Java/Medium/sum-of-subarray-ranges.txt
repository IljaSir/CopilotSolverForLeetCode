Synthesizing 10/10 solutions

=======

        long sum = 0;
        for (int i = 0; i < nums.length; i++) {
            sum += (long) nums[i] * (i + 1) * (nums.length - i);
        }
        return sum;

=======

        long result = 0;
        for (int i = 0; i < nums.length; i++) {
            result += (long) nums[i] * (i + 1) * (nums.length - i);
        }
        return result;

=======

        long sum = 0;
        for (int i = 0; i < nums.length; i++) {
            sum += (long) (i + 1) * (nums.length - i) * nums[i];
        }
        return sum;

=======

        int n = nums.length;
        long[] left = new long[n];
        long[] right = new long[n];
        for (int i = 0; i < n; i++) {
            left[i] = i + 1;
            right[i] = n - i;
        }
        Stack<Integer> stack = new Stack<>();
        for (int i = 0; i < n; i++) {
            while (!stack.isEmpty() && nums[stack.peek()] > nums[i]) {
                stack.pop();
            }
            if (!stack.isEmpty()) {
                left[i] = i - stack.peek();
            }
            stack.push(i);
        }
        stack.clear();
        for (int i = n - 1; i >= 0; i--) {
            while (!stack.isEmpty() && nums[stack.peek()] >= nums[i]) {
                stack.pop();
            }
            if (!stack.isEmpty()) {
                right[i] = stack.peek() - i;
            }
            stack.push(i);
        }
        long ans = 0;
        for (int i = 0; i < n; i++) {
            ans += (long)nums[i] * left[i] * right[i];
        }
        return ans;

=======

        long sum = 0;
        int n = nums.length;
        for (int i = 0; i < n; i++) {
            sum += nums[i] * (i + 1) * (n - i);
        }
        return sum;

=======

        int n = nums.length;
        long ans = 0;
        for (int i = 0; i < n; i++) {
            int max = nums[i];
            int min = nums[i];
            for (int j = i; j < n; j++) {
                max = Math.max(max, nums[j]);
                min = Math.min(min, nums[j]);
                ans += max - min;
            }
        }
        return ans;

=======

        int n = nums.length;
        long[] left = new long[n];
        long[] right = new long[n];
        Stack<Integer> stack = new Stack<Integer>();
        for (int i = 0; i < n; ++i) {
            while (!stack.isEmpty() && nums[stack.peek()] >= nums[i]) {
                stack.pop();
            }
            if (stack.isEmpty()) {
                left[i] = i + 1;
            } else {
                left[i] = i - stack.peek();
            }
            stack.push(i);
        }
        stack.clear();
        for (int i = n - 1; i >= 0; --i) {
            while (!stack.isEmpty() && nums[stack.peek()] >= nums[i]) {
                stack.pop();
            }
            if (stack.isEmpty()) {
                right[i] = n - i;
            } else {
                right[i] = stack.peek() - i;
            }
            stack.push(i);
        }
        long ans = 0;
        for (int i = 0; i < n; ++i) {
            ans += nums[i] * left[i] * right[i];
        }
        return ans;

=======

        int n = nums.length;
        int[] pre = new int[n];
        int[] suf = new int[n];
        pre[0] = nums[0];
        suf[n - 1] = nums[n - 1];
        for (int i = 1; i < n; i++) {
            pre[i] = Math.max(pre[i - 1], nums[i]);
            suf[n - 1 - i] = Math.min(suf[n - i], nums[n - 1 - i]);
        }
        long ans = 0;
        for (int i = 0; i < n; i++) {
            ans += (long) (i + 1) * (n - i) * (pre[i] - suf[i]);
        }
        return ans;

=======

        int n = nums.length;
        long sum = 0;
        for (int i = 0; i < n; i++) {
            long left = i - 0 + 1;
            long right = n - i;
            long total = left * right;
            sum += total * nums[i];
        }
        return sum;

=======

        long res = 0;
        for (int i = 0; i < nums.length; i++) {
            long num = nums[i];
            res += num * (i + 1) * (nums.length - i);
        }
        return res;
