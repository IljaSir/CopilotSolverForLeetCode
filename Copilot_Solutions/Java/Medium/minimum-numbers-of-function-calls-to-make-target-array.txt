Synthesizing 10/10 solutions

=======

        int max = 0;
        int count = 0;
        for (int num : nums) {
            int c = 0;
            while (num > 0) {
                if ((num & 1) == 1) count++;
                num >>= 1;
                c++;
            }
            max = Math.max(max, c);
        }
        return count + max - 1;

=======

        int count = 0;
        int max = 0;
        for (int num : nums) {
            int tmp = 0;
            while (num > 0) {
                if ((num & 1) == 1) {
                    count++;
                }
                num >>= 1;
                tmp++;
            }
            max = Math.max(max, tmp);
        }
        return count + max - 1;

=======

        int max = 0;
        int count = 0;
        for (int num : nums) {
            int zeroCount = 0;
            while (num > 0) {
                if (num % 2 == 1) {
                    count++;
                }
                num /= 2;
                zeroCount++;
            }
            max = Math.max(max, zeroCount);
        }
        return count + max - 1;

=======

        int max = 0;
        int sum = 0;
        for (int num : nums) {
            int tmp = 0;
            while (num > 0) {
                if (num % 2 == 1) {
                    sum++;
                }
                num /= 2;
                tmp++;
            }
            max = Math.max(max, tmp);
        }
        return max + sum - 1;

=======

        int max = 0;
        int count = 0;
        for (int i = 0; i < nums.length; i++) {
            int zeroCount = 0;
            while (nums[i] != 0) {
                if (nums[i] % 2 == 1) {
                    count++;
                    nums[i]--;
                } else {
                    nums[i] /= 2;
                    zeroCount++;
                }
            }
            max = Math.max(zeroCount, max);
        }
        return count + max;

=======

        int max = 0;
        int count = 0;
        for(int n: nums){
            int c = 0;
            while(n > 0){
                if(n % 2 == 1){
                    count++;
                }
                n /= 2;
                c++;
            }
            max = Math.max(max, c);
        }
        return count + max - 1;

=======

        int max = 0;
        int count = 0;
        for(int i = 0; i < nums.length; i++){
            int num = nums[i];
            int zeroCount = 0;
            while(num > 0){
                if(num % 2 == 1){
                    count++;
                }
                num = num / 2;
                zeroCount++;
            }
            max = Math.max(max, zeroCount);
        }
        return count + max - 1;

=======

        int max = 0;
        int count = 0;
        for(int num: nums){
            int temp = 0;
            while(num > 0){
                if(num % 2 == 1){
                    num--;
                    count++;
                }else{
                    num /= 2;
                    temp++;
                }
            }
            max = Math.max(max, temp);
        }
        return count + max;

=======

        int count = 0;
        int max = 0;
        for(int num: nums){
            int zeros = 0;
            while(num>0){
                if(num%2==1){
                    count++;
                }
                num/=2;
                zeros++;
            }
            max = Math.max(max, zeros);
        }
        return count + max - 1;

=======

        int n = nums.length;
        int[] arr = new int[n];
        int max = 0;
        int count = 0;
        for(int i = 0; i < n; i++){
            int num = nums[i];
            int j = 0;
            while(num > 0){
                if(num % 2 == 1){
                    arr[j]++;
                    count++;
                }
                j++;
                num /= 2;
                max = Math.max(max, j);
            }
        }
        for(int i = 0; i < max; i++){
            if(arr[i] > 1){
                count += arr[i] - 1;
            }
        }
        return count;
