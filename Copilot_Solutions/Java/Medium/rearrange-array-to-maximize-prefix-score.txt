Synthesizing 10/10 solutions

=======

        int n = nums.length;
        int[] prefix = new int[n];
        prefix[0] = nums[0];
        for (int i = 1; i < n; i++) {
            prefix[i] = prefix[i - 1] + nums[i];
        }
        int[] suffix = new int[n];
        suffix[n - 1] = nums[n - 1];
        for (int i = n - 2; i >= 0; i--) {
            suffix[i] = suffix[i + 1] + nums[i];
        }
        int max = 0;
        for (int i = 0; i < n; i++) {
            if (prefix[i] > 0) max++;
        }
        int res = max;
        for (int i = 0; i < n - 1; i++) {
            if (prefix[i] > 0) max--;
            if (suffix[i + 1] > 0) max++;
            res = Math.max(res, max);
        }
        return res;

=======

        int[] prefix = new int[nums.length];
        prefix[0] = nums[0];
        for (int i = 1; i < nums.length; i++) {
            prefix[i] = prefix[i - 1] + nums[i];
        }
        int[] suffix = new int[nums.length];
        suffix[nums.length - 1] = nums[nums.length - 1];
        for (int i = nums.length - 2; i >= 0; i--) {
            suffix[i] = suffix[i + 1] + nums[i];
        }
        int max = 0;
        for (int i = 1; i < nums.length; i++) {
            if (prefix[i - 1] > 0) {
                max = Math.max(max, prefix[i - 1] + suffix[i]);
            }
        }
        return max;

=======

        int n = nums.length;
        int[] prefix = new int[n];
        prefix[0] = nums[0];
        for (int i = 1; i < n; i++) {
            prefix[i] = prefix[i - 1] + nums[i];
        }
        int max = 0;
        int min = 0;
        int score = 0;
        for (int i = 0; i < n; i++) {
            score = prefix[i] + min;
            if (score > max) {
                max = score;
            }
            if (prefix[i] < min) {
                min = prefix[i];
            }
        }
        return max;

=======

        int[] prefix = new int[nums.length];
        prefix[0] = nums[0];
        for (int i = 1; i < nums.length; i++) {
            prefix[i] = prefix[i - 1] + nums[i];
        }
        int max = 0;
        for (int i = 0; i < nums.length; i++) {
            if (prefix[i] > 0) {
                max++;
            }
        }
        return max;

=======

        int n = nums.length;
        Arrays.sort(nums);
        int[] prefix = new int[n];
        prefix[0] = nums[0];
        for (int i = 1; i < n; i++) {
            prefix[i] = prefix[i - 1] + nums[i];
        }
        int ans = 0;
        for (int i = 0; i < n; i++) {
            if (prefix[i] > 0) {
                ans++;
            }
        }
        return ans;

=======

        int n = nums.length;
        int[] prefix = new int[n];
        prefix[0] = nums[0];
        for(int i = 1; i < n; i++){
            prefix[i] = prefix[i - 1] + nums[i];
        }
        int max = 0;
        for(int i = 0; i < n; i++){
            if(prefix[i] > 0){
                max++;
            }
        }
        return max;

=======

        Arrays.sort(nums);
        int n = nums.length;
        int[] prefix = new int[n];
        prefix[0] = nums[0];
        for(int i=1; i<n; i++){
            prefix[i] = prefix[i-1] + nums[i];
        }
        int score = 0;
        for(int i=0; i<n; i++){
            if(prefix[i] > 0) score++;
        }
        return score;

=======

        int n = nums.length;
        int[] prefix = new int[n];
        int[] suffix = new int[n];
        prefix[0] = nums[0];
        suffix[n-1] = nums[n-1];
        for(int i=1;i<n;i++){
            prefix[i] = prefix[i-1]+nums[i];
        }
        for(int i=n-2;i>=0;i--){
            suffix[i] = suffix[i+1]+nums[i];
        }
        int max = 0;
        for(int i=0;i<n;i++){
            if(nums[i]>0){
                max++;
            }
            if(i<n-1 && prefix[i]>0){
                max++;
            }
            if(i>0 && suffix[i]>0){
                max++;
            }
        }
        return max;

=======

        int n = nums.length;
        int[] prefix = new int[n];
        int[] suffix = new int[n];
        int sum = 0;
        for (int i = 0; i < n; i++) {
            sum += nums[i];
            prefix[i] = sum;
        }
        sum = 0;
        for (int i = n - 1; i >= 0; i--) {
            sum += nums[i];
            suffix[i] = sum;
        }
        int max = 0;
        for (int i = 0; i < n - 1; i++) {
            if (prefix[i] > 0) {
                max++;
            }
            if (suffix[i + 1] > 0) {
                max++;
            }
        }
        if (prefix[n - 1] > 0) {
            max++;
        }
        return max;

=======

        int score = 0;
        Arrays.sort(nums);
        int prefix = 0;
        for(int i=0; i<nums.length; i++){
            if(nums[i] > 0){
                prefix += nums[i];
                score++;
            }
        }
        return score;
