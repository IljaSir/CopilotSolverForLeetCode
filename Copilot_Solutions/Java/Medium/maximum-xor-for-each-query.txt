Synthesizing 10/10 solutions

=======

        int n = nums.length;
        int[] res = new int[n];
        int xor = 0;
        for (int i = 0; i < n; i++) {
            xor ^= nums[i];
        }
        for (int i = 0; i < n; i++) {
            res[i] = xor ^ ((1 << maximumBit) - 1);
            xor ^= nums[n - 1 - i];
        }
        return res;

=======

        int n = nums.length;
        int[] ans = new int[n];
        int[] prefix = new int[n];
        prefix[0] = nums[0];
        for (int i = 1; i < n; i++) {
            prefix[i] = prefix[i - 1] ^ nums[i];
        }
        int max = (1 << maximumBit) - 1;
        for (int i = 0; i < n; i++) {
            ans[i] = max ^ prefix[n - i - 1];
        }
        return ans;

=======

        int[] answer = new int[nums.length];
        int x = 0;
        for (int num : nums) {
            x ^= num;
        }
        for (int i = 0; i < nums.length; i++) {
            answer[i] = x ^ ((1 << maximumBit) - 1);
            x ^= nums[nums.length - 1 - i];
        }
        return answer;

=======

        int n = nums.length;
        int[] ans = new int[n];
        int[] pre = new int[n];
        pre[0] = nums[0];
        for (int i = 1; i < n; i++) {
            pre[i] = pre[i - 1] ^ nums[i];
        }
        int max = (1 << maximumBit) - 1;
        for (int i = 0; i < n; i++) {
            ans[i] = pre[n - i - 1] ^ max;
        }
        return ans;

=======

        int n = nums.length;
        int[] ans = new int[n];
        int[] pre = new int[n];
        pre[0] = nums[0];
        for (int i = 1; i < n; i++) {
            pre[i] = pre[i - 1] ^ nums[i];
        }
        for (int i = 0; i < n; i++) {
            int x = pre[n - i - 1];
            int y = (1 << maximumBit) - 1;
            ans[i] = x ^ y;
        }
        return ans;

=======

        int n = nums.length;
        int[] ans = new int[n];
        int[] pre = new int[n];
        pre[0] = nums[0];
        for (int i = 1; i < n; i++) {
            pre[i] = pre[i - 1] ^ nums[i];
        }
        for (int i = 0; i < n; i++) {
            ans[i] = pre[n - 1 - i] ^ ((1 << maximumBit) - 1);
        }
        return ans;

=======

        int n = nums.length;
        int[] answer = new int[n];
        int[] prefix = new int[n];
        prefix[0] = nums[0];
        for (int i = 1; i < n; i++) {
            prefix[i] = prefix[i - 1] ^ nums[i];
        }
        int k = (1 << maximumBit) - 1;
        for (int i = 0; i < n; i++) {
            answer[i] = prefix[n - 1 - i] ^ k;
        }
        return answer;

=======

        int len = nums.length;
        int[] result = new int[len];
        int xor = 0;
        for (int num : nums) {
            xor ^= num;
        }
        for (int i = 0; i < len; i++) {
            result[i] = xor ^ ((1 << maximumBit) - 1);
            xor ^= nums[len - 1 - i];
        }
        return result;

=======

        int n = nums.length;
        int[] ans = new int[n];
        int a = 0;
        for (int i = 0; i < n; i++) {
            a ^= nums[i];
        }
        for (int i = 0; i < n; i++) {
            ans[i] = a ^ ((1 << maximumBit) - 1);
            a ^= nums[n - 1 - i];
        }
        return ans;

=======

        int[] ans = new int[nums.length];
        int n = nums.length;
        int[] pre = new int[n+1];
        for(int i = 1; i <= n; i++) {
            pre[i] = pre[i-1] ^ nums[i-1];
        }
        int mask = (1 << maximumBit) - 1;
        for(int i = 0; i < n; i++) {
            ans[i] = pre[n-i] ^ mask;
        }
        return ans;
