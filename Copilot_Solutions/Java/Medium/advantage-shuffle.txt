Synthesizing 10/10 solutions

=======

        Arrays.sort(nums1);
        int[] res = new int[nums1.length];
        for (int i = 0; i < nums2.length; i++) {
            int index = binarySearch(nums1, nums2[i]);
            res[i] = nums1[index];
            nums1[index] = -1;
        }
        int j = 0;
        for (int i = 0; i < res.length; i++) {
            if (res[i] == -1) {
                while (nums1[j] == -1) {
                    j++;
                }
                res[i] = nums1[j++];
            }
        }
        return res;
    }

    private int binarySearch(int[] nums, int target) {
        int l = 0;
        int r = nums.length - 1;
        while (l < r) {
            int m = l + (r - l) / 2;
            if (nums[m] > target) {
                r = m;
            } else {
                l = m + 1;
            }
        }
        return nums[l] > target ? l : 0;

=======

        Arrays.sort(nums1);
        int[] res = new int[nums1.length];
        for (int i = 0; i < nums2.length; i++) {
            int index = binarySearch(nums1, nums2[i]);
            res[i] = nums1[index];
            nums1[index] = -1;
        }
        int j = 0;
        for (int i = 0; i < res.length; i++) {
            if (res[i] == -1) {
                while (nums1[j] == -1) {
                    j++;
                }
                res[i] = nums1[j];
                j++;
            }
        }
        return res;
    }
    
    public int binarySearch(int[] nums, int target) {
        int left = 0;
        int right = nums.length - 1;
        while (left <= right) {
            int mid = left + (right - left) / 2;
            if (nums[mid] <= target) {
                left = mid + 1;
            } else {
                right = mid - 1;
            }
        }
        if (left == nums.length) {
            left = 0;
        }
        return left;

=======

        Arrays.sort(nums1);
        int[] result = new int[nums1.length];
        for (int i = 0; i < nums2.length; i++) {
            int index = binarySearch(nums1, nums2[i]);
            result[i] = nums1[index];
            nums1[index] = -1;
            Arrays.sort(nums1);
        }
        return result;
    }
    
    private int binarySearch(int[] nums1, int target) {
        int l = 0;
        int r = nums1.length - 1;
        while (l <= r) {
            int m = l + (r - l) / 2;
            if (nums1[m] <= target) {
                l = m + 1;
            } else {
                r = m - 1;
            }
        }
        if (l >= nums1.length) {
            l = 0;
        }
        return l;

=======

        int[] result = new int[nums1.length];
        boolean[] used = new boolean[nums1.length];
        Arrays.sort(nums1);
        for (int i = 0; i < nums2.length; i++) {
            int max = -1;
            for (int j = 0; j < nums1.length; j++) {
                if (!used[j] && nums1[j] > nums2[i]) {
                    max = j;
                    break;
                }
            }
            if (max == -1) {
                for (int j = 0; j < nums1.length; j++) {
                    if (!used[j]) {
                        max = j;
                        break;
                    }
                }
            }
            result[i] = nums1[max];
            used[max] = true;
        }
        return result;

=======

        Arrays.sort(nums1);
        int[] res = new int[nums1.length];
        for (int i = 0; i < nums2.length; i++) {
            int idx = binarySearch(nums1, nums2[i]);
            res[i] = nums1[idx];
            nums1[idx] = -1;
        }
        int j = 0;
        for (int i = 0; i < res.length; i++) {
            if (res[i] == -1) {
                while (nums1[j] == -1) {
                    j++;
                }
                res[i] = nums1[j++];
            }
        }
        return res;
    }
    
    private int binarySearch(int[] nums, int target) {
        int l = 0, r = nums.length - 1;
        while (l < r) {
            int m = l + (r - l) / 2;
            if (nums[m] > target) {
                r = m;
            } else {
                l = m + 1;
            }
        }
        return nums[l] > target ? l : 0;

=======

        int n = nums1.length;
        int[] res = new int[n];
        Arrays.sort(nums1);
        for (int i = 0; i < n; i++) {
            int index = binarySearch(nums1, nums2[i]);
            res[i] = nums1[index];
            nums1[index] = -1;
        }
        return res;
    }
    public int binarySearch(int[] nums, int target) {
        int l = 0, r = nums.length - 1;
        while (l < r) {
            int mid = l + (r - l) / 2;
            if (nums[mid] <= target) {
                l = mid + 1;
            } else {
                r = mid;
            }
        }
        if (nums[l] > target) {
            return l;
        } else {
            return 0;
        }

=======

        Arrays.sort(nums1);
        int[] ans = new int[nums1.length];
        for (int i = 0; i < nums2.length; i++) {
            int index = findIndex(nums1, nums2[i]);
            ans[i] = nums1[index];
            nums1[index] = -1;
        }
        return ans;
    }

    private int findIndex(int[] nums1, int target) {
        int start = 0, end = nums1.length - 1, mid = 0;
        while (start <= end) {
            mid = start + (end - start) / 2;
            if (nums1[mid] > target) {
                end = mid - 1;
            } else {
                start = mid + 1;
            }
        }
        if (nums1[mid] <= target) {
            for (int i = 0; i < nums1.length; i++) {
                if (nums1[i] != -1) {
                    return i;
                }
            }
        }
        return mid;

=======

        int n = nums1.length;
        int[] ans = new int[n];
        Arrays.sort(nums1);
        for(int i = 0; i < n; i++){
            int index = binarySearch(nums1, nums2[i]);
            ans[i] = nums1[index];
            nums1[index] = -1;
        }
        return ans;
    }
    public int binarySearch(int[] nums, int target){
        int l = 0;
        int r = nums.length - 1;
        int ans = -1;
        while(l <= r){
            int mid = l + (r - l) / 2;
            if(nums[mid] > target){
                ans = mid;
                r = mid - 1;
            }else{
                l = mid + 1;
            }
        }
        if(ans == -1){
            ans = l;
        }
        while(ans < nums.length && nums[ans] == -1){
            ans++;
        }
        return ans;

=======

        int[] result = new int[nums1.length];
        boolean[] used = new boolean[nums1.length];
        for (int i = 0; i < nums2.length; i++) {
            int min = Integer.MAX_VALUE;
            int minIndex = -1;
            for (int j = 0; j < nums1.length; j++) {
                if (nums1[j] > nums2[i] && !used[j]) {
                    if (nums1[j] < min) {
                        min = nums1[j];
                        minIndex = j;
                    }
                }
            }
            if (minIndex != -1) {
                result[i] = min;
                used[minIndex] = true;
            } else {
                for (int j = 0; j < nums1.length; j++) {
                    if (!used[j]) {
                        result[i] = nums1[j];
                        used[j] = true;
                        break;
                    }
                }
            }
        }
        return result;

=======

        int[] res = new int[nums1.length];
        Arrays.sort(nums1);
        for(int i=0;i<nums2.length;i++){
            int j = binarySearch(nums1,nums2[i]);
            res[i] = nums1[j];
            nums1[j] = -1;
            Arrays.sort(nums1);
        }
        return res;
    }
    public int binarySearch(int[] nums,int target){
        int l=0,r=nums.length-1;
        while(l<=r){
            int mid = l+(r-l)/2;
            if(nums[mid]>target)
                r = mid-1;
            else
                l = mid+1;
        }
        return l;
