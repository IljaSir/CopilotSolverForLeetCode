Synthesizing 10/10 solutions

=======

        int[] indegree = new int[n];
        for (int i = 0; i < n; i++) {
            if (leftChild[i] != -1) {
                indegree[leftChild[i]]++;
            }
            if (rightChild[i] != -1) {
                indegree[rightChild[i]]++;
            }
        }
        int root = -1;
        for (int i = 0; i < n; i++) {
            if (indegree[i] == 0) {
                if (root != -1) {
                    return false;
                }
                root = i;
            }
        }
        if (root == -1) {
            return false;
        }
        int[] visited = new int[n];
        Queue<Integer> queue = new LinkedList<>();
        queue.offer(root);
        while (!queue.isEmpty()) {
            int node = queue.poll();
            if (visited[node] == 1) {
                return false;
            }
            visited[node] = 1;
            if (leftChild[node] != -1) {
                queue.offer(leftChild[node]);
            }
            if (rightChild[node] != -1) {
                queue.offer(rightChild[node]);
            }
        }
        for (int i = 0; i < n; i++) {
            if (visited[i] == 0) {
                return false;
            }
        }
        return true;

=======

        int[] indegree = new int[n];
        for (int i = 0; i < n; i++) {
            if (leftChild[i] != -1) {
                indegree[leftChild[i]]++;
            }
            if (rightChild[i] != -1) {
                indegree[rightChild[i]]++;
            }
        }
        int root = -1;
        for (int i = 0; i < n; i++) {
            if (indegree[i] == 0) {
                if (root != -1) {
                    return false;
                }
                root = i;
            }
        }
        if (root == -1) {
            return false;
        }
        int[] visited = new int[n];
        Queue<Integer> queue = new LinkedList<>();
        queue.offer(root);
        while (!queue.isEmpty()) {
            int node = queue.poll();
            visited[node] = 1;
            if (leftChild[node] != -1) {
                queue.offer(leftChild[node]);
            }
            if (rightChild[node] != -1) {
                queue.offer(rightChild[node]);
            }
        }
        for (int i = 0; i < n; i++) {
            if (visited[i] == 0) {
                return false;
            }
        }
        return true;

=======

        int[] inDegree = new int[n];
        for (int i = 0; i < n; i++) {
            if (leftChild[i] != -1) {
                inDegree[leftChild[i]]++;
            }
            if (rightChild[i] != -1) {
                inDegree[rightChild[i]]++;
            }
        }
        int root = -1;
        for (int i = 0; i < n; i++) {
            if (inDegree[i] == 0) {
                if (root != -1) {
                    return false;
                }
                root = i;
            } else if (inDegree[i] > 1) {
                return false;
            }
        }
        if (root == -1) {
            return false;
        }
        boolean[] visited = new boolean[n];
        dfs(root, leftChild, rightChild, visited);
        for (int i = 0; i < n; i++) {
            if (!visited[i]) {
                return false;
            }
        }
        return true;
    }
    private void dfs(int root, int[] leftChild, int[] rightChild, boolean[] visited) {
        if (root == -1) {
            return;
        }
        visited[root] = true;
        dfs(leftChild[root], leftChild, rightChild, visited);
        dfs(rightChild[root], leftChild, rightChild, visited);

=======

        int[] indegree = new int[n];
        for (int i = 0; i < n; i++) {
            if (leftChild[i] != -1) {
                indegree[leftChild[i]]++;
                if (indegree[leftChild[i]] > 1) {
                    return false;
                }
            }
            if (rightChild[i] != -1) {
                indegree[rightChild[i]]++;
                if (indegree[rightChild[i]] > 1) {
                    return false;
                }
            }
        }
        int root = -1;
        for (int i = 0; i < n; i++) {
            if (indegree[i] == 0) {
                if (root != -1) {
                    return false;
                }
                root = i;
            }
        }
        return root != -1;

=======

        int[] in = new int[n];
        for (int i = 0; i < n; i++) {
            if (leftChild[i] != -1) {
                in[leftChild[i]]++;
            }
            if (rightChild[i] != -1) {
                in[rightChild[i]]++;
            }
        }
        int root = -1;
        for (int i = 0; i < n; i++) {
            if (in[i] == 0) {
                if (root != -1) {
                    return false;
                }
                root = i;
            } else if (in[i] > 1) {
                return false;
            }
        }
        if (root == -1) {
            return false;
        }
        boolean[] visited = new boolean[n];
        dfs(leftChild, rightChild, root, visited);
        for (boolean b : visited) {
            if (!b) {
                return false;
            }
        }
        return true;
    }
    private void dfs(int[] leftChild, int[] rightChild, int node, boolean[] visited) {
        if (visited[node]) {
            return;
        }
        visited[node] = true;
        if (leftChild[node] != -1) {
            dfs(leftChild, rightChild, leftChild[node], visited);
        }
        if (rightChild[node] != -1) {
            dfs(leftChild, rightChild, rightChild[node], visited);
        }

=======

        int[] in = new int[n];
        for (int i = 0; i < n; i++) {
            if (leftChild[i] != -1) {
                in[leftChild[i]]++;
            }
            if (rightChild[i] != -1) {
                in[rightChild[i]]++;
            }
        }
        int root = -1;
        for (int i = 0; i < n; i++) {
            if (in[i] == 0) {
                if (root != -1) {
                    return false;
                }
                root = i;
            }
        }
        if (root == -1) {
            return false;
        }
        Set<Integer> seen = new HashSet<>();
        Queue<Integer> q = new LinkedList<>();
        q.offer(root);
        seen.add(root);
        while (!q.isEmpty()) {
            int cur = q.poll();
            if (leftChild[cur] != -1) {
                if (seen.contains(leftChild[cur])) {
                    return false;
                }
                q.offer(leftChild[cur]);
                seen.add(leftChild[cur]);
            }
            if (rightChild[cur] != -1) {
                if (seen.contains(rightChild[cur])) {
                    return false;
                }
                q.offer(rightChild[cur]);
                seen.add(rightChild[cur]);
            }
        }
        return seen.size() == n;

=======

        int[] parent = new int[n];
        for (int i = 0; i < n; i++) {
            if (leftChild[i] != -1) {
                if (parent[leftChild[i]] != 0) {
                    return false;
                }
                parent[leftChild[i]] = i + 1;
            }
            if (rightChild[i] != -1) {
                if (parent[rightChild[i]] != 0) {
                    return false;
                }
                parent[rightChild[i]] = i + 1;
            }
        }
        int root = 0;
        for (int i = 0; i < n; i++) {
            if (parent[i] == 0) {
                root++;
            }
        }
        if (root != 1) {
            return false;
        }
        return true;

=======

        int[] in = new int[n];
        for (int i = 0; i < n; i++) {
            int l = leftChild[i];
            int r = rightChild[i];
            if (l != -1) {
                in[l]++;
            }
            if (r != -1) {
                in[r]++;
            }
        }
        int root = -1;
        for (int i = 0; i < n; i++) {
            if (in[i] == 0) {
                if (root != -1) {
                    return false;
                }
                root = i;
            }
        }
        if (root == -1) {
            return false;
        }
        boolean[] visited = new boolean[n];
        Queue<Integer> q = new LinkedList<>();
        q.offer(root);
        while (!q.isEmpty()) {
            int node = q.poll();
            if (visited[node]) {
                return false;
            }
            visited[node] = true;
            int l = leftChild[node];
            int r = rightChild[node];
            if (l != -1) {
                q.offer(l);
            }
            if (r != -1) {
                q.offer(r);
            }
        }
        for (int i = 0; i < n; i++) {
            if (!visited[i]) {
                return false;
            }
        }
        return true;

=======

        int[] parent = new int[n];
        Arrays.fill(parent, -1);
        for(int i=0;i<n;i++){
            if(leftChild[i]!=-1){
                if(parent[leftChild[i]]!=-1) return false;
                parent[leftChild[i]] = i;
            }
            if(rightChild[i]!=-1){
                if(parent[rightChild[i]]!=-1) return false;
                parent[rightChild[i]] = i;
            }
        }
        int root = -1;
        for(int i=0;i<n;i++){
            if(parent[i]==-1){
                if(root!=-1) return false;
                root = i;
            }
        }
        if(root==-1) return false;
        int[] count = new int[n];
        dfs(root, leftChild, rightChild, count);
        for(int i=0;i<n;i++){
            if(count[i]==0) return false;
        }
        return true;

=======

        boolean[] visited = new boolean[n];
        boolean[] inStack = new boolean[n];
        for (int i = 0; i < n; i++) {
            if (!visited[i]) {
                if (!dfs(i, visited, inStack, leftChild, rightChild)) {
                    return false;
                }
            }
        }
        return true;
    }
    
    private boolean dfs(int i, boolean[] visited, boolean[] inStack, int[] leftChild, int[] rightChild) {
        if (inStack[i]) {
            return false;
        }
        if (visited[i]) {
            return true;
        }
        inStack[i] = true;
        visited[i] = true;
        if (leftChild[i] != -1) {
            if (!dfs(leftChild[i], visited, inStack, leftChild, rightChild)) {
                return false;
            }
        }
        if (rightChild[i] != -1) {
            if (!dfs(rightChild[i], visited, inStack, leftChild, rightChild)) {
                return false;
            }
        }
        inStack[i] = false;
        return true;
