Synthesizing 10/10 solutions

=======

        int n = nums.length;
        int[] prefix = new int[n + 1];
        for (int i = 0; i < n; i++) {
            prefix[i + 1] = prefix[i] + nums[i];
        }
        int[] cnt = new int[upper - lower + 1];
        long ans = 0;
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                int sum = prefix[j + 1] - prefix[i];
                if (sum >= lower && sum <= upper) {
                    ans++;
                }
            }
            cnt[prefix[i + 1] - lower]++;
        }
        for (int i = 0; i < cnt.length; i++) {
            ans += (long) cnt[i] * (cnt[i] - 1) / 2;
        }
        return ans;

=======

        int n = nums.length;
        long[] prefix = new long[n + 1];
        for (int i = 0; i < n; i++) {
            prefix[i + 1] = prefix[i] + nums[i];
        }
        long count = 0;
        for (int i = 0; i < n; i++) {
            long low = prefix[i] + lower;
            long high = prefix[i] + upper;
            int l = i + 1;
            int r = n;
            while (l < r) {
                int m = (l + r) / 2;
                if (prefix[m] < low) {
                    l = m + 1;
                } else {
                    r = m;
                }
            }
            int start = l;
            l = i + 1;
            r = n;
            while (l < r) {
                int m = (l + r) / 2;
                if (prefix[m] <= high) {
                    l = m + 1;
                } else {
                    r = m;
                }
            }
            int end = l;
            count += end - start;
        }
        return count;

=======

        int n = nums.length;
        long[] prefixSum = new long[n + 1];
        for (int i = 0; i < n; i++) {
            prefixSum[i + 1] = prefixSum[i] + nums[i];
        }
        long[] count = new long[upper - lower + 1];
        for (int i = 0; i <= n; i++) {
            for (int j = i + 1; j <= n; j++) {
                long sum = prefixSum[j] - prefixSum[i];
                if (sum >= lower && sum <= upper) {
                    count[(int) (sum - lower)]++;
                }
            }
        }
        long ans = 0;
        for (long c : count) {
            ans += c * (c - 1) / 2;
        }
        return ans;

=======

        int n = nums.length;
        int[] sums = new int[n];
        sums[0] = nums[0];
        for (int i = 1; i < n; i++) {
            sums[i] = sums[i - 1] + nums[i];
        }
        long count = 0;
        for (int i = 0; i < n; i++) {
            int l = lower + nums[i];
            int r = upper + nums[i];
            int left = find(sums, l, i, n - 1);
            int right = find(sums, r, i, n - 1);
            if (left == -1) {
                continue;
            }
            if (right == -1) {
                right = n - 1;
            }
            count += right - left + 1;
        }
        return count;
    }

    private int find(int[] sums, int target, int l, int r) {
        while (l < r) {
            int m = l + (r - l) / 2;
            if (sums[m] >= target) {
                r = m;
            } else {
                l = m + 1;
            }
        }
        if (sums[l] >= target) {
            return l;
        }
        return -1;

=======

        int n = nums.length;
        long[] presum = new long[n + 1];
        for (int i = 1; i <= n; ++i) {
            presum[i] = presum[i - 1] + nums[i - 1];
        }
        long ans = 0;
        for (int i = 0; i < n; ++i) {
            int l = i + 1, r = n;
            while (l < r) {
                int mid = (l + r) / 2;
                if (presum[mid + 1] - presum[i + 1] >= lower) {
                    r = mid;
                } else {
                    l = mid + 1;
                }
            }
            int lo = l;
            l = i + 1;
            r = n;
            while (l < r) {
                int mid = (l + r) / 2;
                if (presum[mid + 1] - presum[i + 1] <= upper) {
                    l = mid + 1;
                } else {
                    r = mid;
                }
            }
            int hi = r;
            ans += Math.max(0, hi - lo);
        }
        return ans;

=======

        int n = nums.length;
        long[] sum = new long[n + 1];
        for (int i = 0; i < n; i++)
            sum[i + 1] = sum[i] + nums[i];
        TreeMap<Long, Integer> map = new TreeMap<>();
        for (int i = 0; i <= n; i++)
            map.put(sum[i], map.getOrDefault(sum[i], 0) + 1);
        long ans = 0;
        for (int i = 0; i <= n; i++) {
            long lo = sum[i] + lower;
            long hi = sum[i] + upper;
            for (long key : map.subMap(lo, true, hi, true).keySet())
                ans += map.get(key);
            map.put(sum[i], map.get(sum[i]) - 1);
        }
        return ans;

=======

        int n = nums.length;
        long[] preSum = new long[n+1];
        for(int i = 1; i <= n; i++) {
            preSum[i] = preSum[i-1] + nums[i-1];
        }
        long res = 0;
        for(int i = 0; i < n; i++) {
            long l = preSum[i] + lower, r = preSum[i] + upper;
            int left = i + 1, right = n;
            while(left < right) {
                int mid = left + (right - left) / 2;
                if(preSum[mid] >= l) right = mid;
                else left = mid + 1;
            }
            int lInd = left;
            left = i + 1;
            right = n;
            while(left < right) {
                int mid = left + (right - left) / 2;
                if(preSum[mid] <= r) left = mid + 1;
                else right = mid;
            }
            int rInd = right;
            res += rInd - lInd;
        }
        return res;

=======

        long count = 0;
        int n = nums.length;
        int[] prefix = new int[n + 1];
        for (int i = 1; i <= n; i++) {
            prefix[i] = prefix[i - 1] + nums[i - 1];
        }
        int[] countPrefix = new int[n + 1];
        for (int i = 0; i <= n; i++) {
            countPrefix[i] = i;
        }
        for (int i = 1; i <= n; i++) {
            count += countPrefix[upperBound(prefix, prefix[i] - lower)] - countPrefix[lowerBound(prefix, prefix[i] - upper)];
        }
        return count;
    }
    public int lowerBound(int[] arr, int target) {
        int l = 0, r = arr.length;
        while (l < r) {
            int m = (l + r) / 2;
            if (arr[m] < target) {
                l = m + 1;
            } else {
                r = m;
            }
        }
        return l;
    }
    public int upperBound(int[] arr, int target) {
        int l = 0, r = arr.length;
        while (l < r) {
            int m = (l + r) / 2;
            if (arr[m] <= target) {
                l = m + 1;
            } else {
                r = m;
            }
        }
        return l;

=======

        int n = nums.length;
        int[] count = new int[200001];
        int[] sum = new int[n];
        sum[0] = nums[0];
        for (int i = 1; i < n; ++i) {
            sum[i] = sum[i - 1] + nums[i];
        }
        long ans = 0;
        for (int i = 0; i < n; ++i) {
            int l = lower - sum[i], r = upper - sum[i];
            if (l <= 0 && r >= 0) {
                ans += count[100000];
            }
            if (l > 0) {
                ans += count[100000 + l];
            }
            if (r < 0) {
                ans += count[100000 + r + 1];
            }
            ++count[sum[i] + 100000];
        }
        return ans;

=======

        long ans = 0;
        int n = nums.length;
        for (int i = 0; i < n; i++) {
            ans += search(nums, i + 1, n - 1, lower - nums[i]) - search(nums, i + 1, n - 1, upper - nums[i] + 1);
        }
        return ans;
    }

    private int search(int[] nums, int l, int r, int target) {
        int ans = r + 1;
        while (l <= r) {
            int mid = l + r >> 1;
            if (nums[mid] >= target) {
                ans = mid;
                r = mid - 1;
            } else {
                l = mid + 1;
            }
        }
        return ans;
