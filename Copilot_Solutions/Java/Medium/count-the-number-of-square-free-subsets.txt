Synthesizing 10/10 solutions

=======

        int n = nums.length;
        int mod = 1000000007;
        int[] count = new int[31];
        for (int i = 0; i < n; i++) {
            count[nums[i]]++;
        }
        int[] dp = new int[1 << 30];
        dp[0] = 1;
        for (int i = 1; i <= 30; i++) {
            int[] tmp = new int[1 << 30];
            for (int j = 0; j < 1 << 30; j++) {
                if (dp[j] == 0) {
                    continue;
                }
                for (int k = 1; k <= count[i]; k++) {
                    int mask = j;
                    for (int l = 0; l < k; l++) {
                        mask |= 1 << (i * l);
                    }
                    tmp[mask] += dp[j];
                    if (tmp[mask] >= mod) {
                        tmp[mask] -= mod;
                    }
                }
            }
            for (int j = 0; j < 1 << 30; j++) {
                dp[j] += tmp[j];
                if (dp[j] >= mod) {
                    dp[j] -= mod;
                }
            }
        }
        int ans = 0;
        for (int i = 0; i < 1 << 30; i++) {
            int cnt = 0;
            for (int j = 0; j < 30; j++) {
                if ((i & (1 << j)) != 0) {
                    cnt++;
                }
            }
            if (cnt % 2 == 0) {
                ans += dp[i];
                if (ans >= mod) {
                    ans -= mod;
                }
            } else {
                ans -= dp[i];
                if (ans < 0) {
                    ans += mod;
                }
            }
        }
        return ans;

=======

        int[] dp = new int[1 << nums.length];
        dp[0] = 1;
        int mod = 1000000007;
        for (int i = 0; i < nums.length; i++) {
            int cur = nums[i];
            int mask = 0;
            for (int j = 0; j < nums.length; j++) {
                if (i != j && nums[j] == cur) {
                    mask |= (1 << j);
                }
            }
            for (int j = (1 << nums.length) - 1; j >= 0; j--) {
                if ((j & (1 << i)) != 0 || (j & mask) != 0) {
                    continue;
                }
                dp[j | (1 << i)] = (dp[j | (1 << i)] + dp[j]) % mod;
            }
        }
        int res = 0;
        for (int i = 0; i < (1 << nums.length); i++) {
            int cnt = 0;
            for (int j = 0; j < nums.length; j++) {
                if ((i & (1 << j)) != 0) {
                    cnt++;
                }
            }
            if (cnt % 2 == 0) {
                res = (res + dp[i]) % mod;
            } else {
                res = (res - dp[i] + mod) % mod;
            }
        }
        return res;

=======

        int mod = 1000000007;
        int n = nums.length;
        int[] dp = new int[1 << n];
        dp[0] = 1;
        int[] cnt = new int[31];
        for (int num : nums) {
            cnt[num]++;
        }
        int ans = 0;
        for (int mask = 1; mask < (1 << n); mask++) {
            int num = 1;
            for (int i = 0; i < n; i++) {
                if (((mask >> i) & 1) == 1) {
                    num *= nums[i];
                }
            }
            int c = Integer.bitCount(mask);
            if (c % 2 == 1) {
                ans = (ans + dp[mask]) % mod;
            } else {
                ans = (ans - dp[mask] + mod) % mod;
            }
            for (int i = 2; i * i <= num; i++) {
                if (num % (i * i) == 0) {
                    dp[mask] = 0;
                    break;
                }
            }
            if (dp[mask] != 0) {
                for (int i = 1; i <= 30; i++) {
                    if (cnt[i] != 0) {
                        int newMask = mask;
                        while (num % i == 0) {
                            num /= i;
                            newMask = newMask | (1 << (n + i - 1));
                        }
                        dp[newMask] = (dp[newMask] + dp[mask]) % mod;
                    }
                }
            }
        }
        return ans;

=======

        int n = nums.length;
        int mod = (int)1e9 + 7;
        int[] dp = new int[1 << n];
        dp[0] = 1;
        int ans = 0;
        for (int i = 1; i < (1 << n); i++) {
            int k = Integer.bitCount(i);
            int[] a = new int[k];
            int t = 0;
            for (int j = 0; j < n; j++) {
                if (((i >> j) & 1) == 1) {
                    a[t++] = nums[j];
                }
            }
            int c = 0;
            for (int j = 1; j < (1 << k); j++) {
                int b = Integer.bitCount(j);
                int p = 1;
                for (int l = 0; l < k; l++) {
                    if (((j >> l) & 1) == 1) {
                        p *= a[l];
                    }
                }
                if (b % 2 == 1) {
                    c += dp[i ^ p];
                } else {
                    c -= dp[i ^ p];
                }
            }
            dp[i] = c;
            if (c != 0) {
                ans += dp[i];
                ans %= mod;
            }
        }
        return ans;

=======

        int n = nums.length;
        int max = 0;
        for (int num : nums) {
            max = Math.max(max, num);
        }
        int[] primes = new int[max + 1];
        for (int i = 2; i <= max; i++) {
            if (primes[i] == 0) {
                primes[i] = i;
                for (int j = i + i; j <= max; j += i) {
                    if (primes[j] == 0) {
                        primes[j] = i;
                    }
                }
            }
        }
        int[] cnt = new int[1 << n];
        for (int i = 0; i < (1 << n); i++) {
            int prod = 1;
            for (int j = 0; j < n; j++) {
                if ((i & (1 << j)) != 0) {
                    prod *= nums[j];
                }
            }
            int p = primes[prod];
            int q = prod / p;
            if (p == q) {
                cnt[i] = 1;
            } else {
                cnt[i] = cnt[i ^ (1 << (n - 1) - Integer.numberOfLeadingZeros(p))] - cnt[i ^ (1 << (n - 1) - Integer.numberOfLeadingZeros(q))];
            }
        }
        int res = 0;
        for (int i = 0; i < (1 << n); i++) {
            if (cnt[i] != 0) {
                res += cnt[i] * (1 - 2 * Integer.bitCount(i) % 2);
            }
        }
        return res;

=======

        int n = nums.length;
        int mod = 1000000007;
        int[] dp = new int[1 << n];
        dp[0] = 1;
        for(int i = 0; i < n; i++) {
            for(int j = 0; j < (1 << n); j++) {
                if(dp[j] == 0) {
                    continue;
                }
                if((j & (1 << i)) != 0) {
                    continue;
                }
                int product = 1;
                for(int k = i; k < n; k++) {
                    if((j & (1 << k)) != 0) {
                        continue;
                    }
                    product *= nums[k];
                    if(product > 30) {
                        break;
                    }
                    dp[j | (1 << k)] += dp[j];
                    dp[j | (1 << k)] %= mod;
                }
            }
        }
        int result = 0;
        for(int i = 0; i < (1 << n); i++) {
            if(Integer.bitCount(i) % 2 == 1) {
                result += dp[i];
            } else {
                result -= dp[i];
            }
            result %= mod;
        }
        if(result < 0) {
            result += mod;
        }
        return result;

=======

        int MOD = 1000000007;
        int n = nums.length;
        int[] count = new int[31];
        for (int num: nums) {
            count[num]++;
        }
        int[] dp = new int[1 << 31];
        dp[0] = 1;
        for (int i = 1; i < (1 << 31); ++i) {
            int j = Integer.numberOfTrailingZeros(i);
            dp[i] = (dp[i - (1 << j)] * (count[j] + 1)) % MOD;
        }
        int ans = 0;
        for (int i = 1; i < (1 << 31); ++i) {
            int cnt = Integer.bitCount(i);
            if (cnt % 2 == 0) {
                ans = (ans - dp[i] + MOD) % MOD;
            } else {
                ans = (ans + dp[i]) % MOD;
            }
        }
        return ans;

=======

        int n = nums.length;
        int max = Arrays.stream(nums).max().getAsInt();
        int[] cnt = new int[max + 1];
        for (int num : nums) {
            cnt[num]++;
        }
        int[] primes = new int[max + 1];
        for (int i = 2; i <= max; i++) {
            if (primes[i] == 0) {
                for (int j = i; j <= max; j += i) {
                    primes[j] = i;
                }
            }
        }
        int[] pow = new int[max + 1];
        int[] dp = new int[max + 1];
        dp[1] = 1;
        for (int i = 2; i <= max; i++) {
            int p = primes[i];
            int x = i / p;
            if (x % p == 0) {
                dp[i] = dp[x];
            } else {
                pow[i] = pow[x] + 1;
                dp[i] = dp[x] * (pow[i] % 2 == 0 ? 1 : -1);
            }
        }
        int ans = 0;
        for (int i = 1; i <= max; i++) {
            int s = 0;
            for (int j = i; j <= max; j += i) {
                s += cnt[j] * dp[j / i];
            }
            ans += s % 2 == 1 ? 1 : -1;
        }
        return ans;

=======

        int n = nums.length;
        int[] cnt = new int[31];
        for (int x : nums) {
            cnt[x]++;
        }
        int[] dp = new int[1 << 16];
        dp[0] = 1;
        for (int i = 1; i < 31; ++i) {
            if (cnt[i] == 0) {
                continue;
            }
            int[] t = new int[1 << 16];
            for (int j = 0; j < (1 << 16); ++j) {
                if (dp[j] > 0) {
                    int mask = j;
                    for (int k = 0; k < cnt[i]; ++k) {
                        mask = mask * i % 65536;
                        t[mask] = (t[mask] + dp[j]) % 1000000007;
                    }
                }
            }
            for (int j = 0; j < (1 << 16); ++j) {
                dp[j] = (dp[j] + t[j]) % 1000000007;
            }
        }
        int ret = 0;
        for (int i = 0; i < (1 << 16); ++i) {
            if (dp[i] > 0) {
                int x = 0;
                int y = i;
                while (y > 0) {
                    x += y % i;
                    y /= i;
                }
                if (x % 2 == 0) {
                    ret = (ret + dp[i]) % 1000000007;
                } else {
                    ret = (ret - dp[i] + 1000000007) % 1000000007;
                }
            }
        }
        return ret;

=======

        int MOD = 1_000_000_007;
        int n = nums.length;
        int[] cnt = new int[32];
        for (int x: nums) {
            cnt[x]++;
        }
        int[] dp = new int[1 << 16];
        dp[0] = 1;
        for (int i = 2; i <= 30; i++) {
            int[] ndp = new int[1 << 16];
            int mask = (1 << i) - 1;
            for (int j = 0; j < (1 << 16); j++) {
                if (dp[j] > 0) {
                    int c = cnt[i];
                    int nj = j;
                    for (int k = 0; k <= c; k++) {
                        ndp[nj] += dp[j];
                        if (ndp[nj] >= MOD) {
                            ndp[nj] -= MOD;
                        }
                        nj = ((nj << 1) & mask) | ((nj >> (i - 1)) & 1);
                    }
                }
            }
            dp = ndp;
        }
        int ans = 0;
        for (int i = 0; i < (1 << 16); i++) {
            if (dp[i] > 0) {
                int c = 0;
                for (int j = 0; j < 16; j++) {
                    if ((i & (1 << j)) > 0) {
                        c += cnt[j + 1];
                    }
                }
                if (c % 2 == 0) {
                    ans += dp[i];
                    if (ans >= MOD) {
                        ans -= MOD;
                    }
                } else {
                    ans -= dp[i];
                    if (ans < 0) {
                        ans += MOD;
                    }
                }
            }
        }
        return ans;
