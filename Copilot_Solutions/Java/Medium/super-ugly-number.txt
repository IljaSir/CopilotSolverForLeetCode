Synthesizing 10/10 solutions

=======

        int[] ugly = new int[n];
        ugly[0] = 1;
        int[] idx = new int[primes.length];
        for (int i = 1; i < n; i++) {
            ugly[i] = Integer.MAX_VALUE;
            for (int j = 0; j < primes.length; j++) {
                ugly[i] = Math.min(ugly[i], primes[j] * ugly[idx[j]]);
            }
            for (int j = 0; j < primes.length; j++) {
                if (ugly[i] == primes[j] * ugly[idx[j]]) {
                    idx[j]++;
                }
            }
        }
        return ugly[n - 1];

=======

        int[] ugly = new int[n];
        ugly[0] = 1;
        int[] idx = new int[primes.length];
        for (int i = 1; i < n; i++) {
            ugly[i] = Integer.MAX_VALUE;
            for (int j = 0; j < primes.length; j++) {
                ugly[i] = Math.min(ugly[i], ugly[idx[j]] * primes[j]);
            }
            for (int j = 0; j < primes.length; j++) {
                if (ugly[i] == ugly[idx[j]] * primes[j]) {
                    idx[j]++;
                }
            }
        }
        return ugly[n - 1];

=======

        int[] ugly = new int[n];
        ugly[0] = 1;
        int[] index = new int[primes.length];
        for (int i = 1; i < n; i++) {
            ugly[i] = Integer.MAX_VALUE;
            for (int j = 0; j < primes.length; j++) {
                ugly[i] = Math.min(ugly[i], primes[j] * ugly[index[j]]);
            }
            for (int j = 0; j < primes.length; j++) {
                if (primes[j] * ugly[index[j]] == ugly[i]) index[j]++;
            }
        }
        return ugly[n - 1];

=======

        int[] ugly = new int[n];
        ugly[0] = 1;
        int[] idx = new int[primes.length];
        for (int i = 1; i < n; i++) {
            int min = Integer.MAX_VALUE;
            for (int j = 0; j < primes.length; j++) {
                min = Math.min(min, ugly[idx[j]] * primes[j]);
            }
            ugly[i] = min;
            for (int j = 0; j < primes.length; j++) {
                if (ugly[i] == ugly[idx[j]] * primes[j]) {
                    idx[j]++;
                }
            }
        }
        return ugly[n - 1];

=======

        int[] ugly = new int[n];
        ugly[0] = 1;
        int[] pointers = new int[primes.length];
        for (int i = 1; i < n; i++) {
            ugly[i] = Integer.MAX_VALUE;
            for (int j = 0; j < primes.length; j++) {
                ugly[i] = Math.min(ugly[i], ugly[pointers[j]] * primes[j]);
            }
            for (int j = 0; j < primes.length; j++) {
                if (ugly[i] == ugly[pointers[j]] * primes[j]) {
                    pointers[j]++;
                }
            }
        }
        return ugly[n - 1];

=======

        int[] ugly = new int[n];
        ugly[0] = 1;
        int[] pointers = new int[primes.length];
        for (int i = 1; i < n; i++) {
            int min = Integer.MAX_VALUE;
            for (int j = 0; j < primes.length; j++) {
                min = Math.min(min, primes[j] * ugly[pointers[j]]);
            }
            ugly[i] = min;
            for (int j = 0; j < primes.length; j++) {
                if (min == primes[j] * ugly[pointers[j]]) {
                    pointers[j]++;
                }
            }
        }
        return ugly[n - 1];

=======

        int[] ugly = new int[n];
        ugly[0] = 1;
        int[] index = new int[primes.length];
        for (int i = 1; i < n; i++) {
            int min = Integer.MAX_VALUE;
            for (int j = 0; j < primes.length; j++) {
                min = Math.min(min, primes[j] * ugly[index[j]]);
            }
            ugly[i] = min;
            for (int j = 0; j < primes.length; j++) {
                if (primes[j] * ugly[index[j]] == min) {
                    index[j]++;
                }
            }
        }
        return ugly[n - 1];

=======

        int[] dp = new int[n];
        dp[0] = 1;
        int[] pointers = new int[primes.length];
        for (int i = 1; i < n; i++) {
            int[] candidates = new int[primes.length];
            int minVal = Integer.MAX_VALUE;
            for (int j = 0; j < primes.length; j++) {
                candidates[j] = dp[pointers[j]] * primes[j];
                minVal = Math.min(minVal, candidates[j]);
            }
            dp[i] = minVal;
            for (int j = 0; j < primes.length; j++) {
                if (candidates[j] == minVal) {
                    pointers[j]++;
                }
            }
        }
        return dp[n - 1];

=======

        int[] ugly = new int[n];
        int[] index = new int[primes.length];
        ugly[0] = 1;
        for(int i = 1; i < n; i++){
            int min = Integer.MAX_VALUE;
            for(int j = 0; j < primes.length; j++){
                min = Math.min(min, ugly[index[j]] * primes[j]);
            }
            for(int j = 0; j < primes.length; j++){
                if(min == ugly[index[j]] * primes[j]){
                    index[j]++;
                }
            }
            ugly[i] = min;
        }
        return ugly[n - 1];

=======

        // super ugly number = ugly number
        // ugly number = prime number * ugly number
        // ugly number = prime number * prime number * ugly number
        // ugly number = prime number * prime number * prime number * ugly number
        // ugly number = prime number * prime number * prime number * prime number * ugly number
        // ugly number = prime number * prime number * prime number * prime number * prime number * ugly number
        // ugly number = prime number * prime number * prime number * prime number * prime number * prime number * ugly number
        // ugly number = prime number * prime number * prime number * prime number * prime number * prime number * prime number * ugly number
        // ugly number = prime number * prime number * prime number * prime number * prime number * prime number * prime number * prime number * ugly number
        // ugly number = prime number * prime number * prime number * prime number * prime number * prime number * prime number * prime number * prime number * ugly number
        // ugly number = prime number * prime number * prime number * prime number * prime number * prime number * prime number * prime number * prime number * prime number * ugly number
        // ugly number = p
