Synthesizing 10/10 solutions

=======

        List<List<Integer>> result = new ArrayList<>();
        int[][] board = new int[8][8];
        for (int[] queen : queens) {
            board[queen[0]][queen[1]] = 1;
        }
        int[] direction = new int[]{-1, 0, 1};
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                if (!(direction[i] == 0 && direction[j] == 0)) {
                    int x = king[0] + direction[i];
                    int y = king[1] + direction[j];
                    while (x >= 0 && x < 8 && y >= 0 && y < 8) {
                        if (board[x][y] == 1) {
                            List<Integer> list = new ArrayList<>();
                            list.add(x);
                            list.add(y);
                            result.add(list);
                            break;
                        }
                        x += direction[i];
                        y += direction[j];
                    }
                }
            }
        }
        return result;

=======

        List<List<Integer>> res = new ArrayList<>();
        boolean[][] board = new boolean[8][8];
        for (int[] queen : queens) {
            board[queen[0]][queen[1]] = true;
        }
        // up
        for (int i = king[0] - 1; i >= 0; i--) {
            if (board[i][king[1]]) {
                res.add(Arrays.asList(i, king[1]));
                break;
            }
        }
        // down
        for (int i = king[0] + 1; i < 8; i++) {
            if (board[i][king[1]]) {
                res.add(Arrays.asList(i, king[1]));
                break;
            }
        }
        // left
        for (int j = king[1] - 1; j >= 0; j--) {
            if (board[king[0]][j]) {
                res.add(Arrays.asList(king[0], j));
                break;
            }
        }
        // right
        for (int j = king[1] + 1; j < 8; j++) {
            if (board[king[0]][j]) {
                res.add(Arrays.asList(king[0], j));
                break;
            }
        }
        // up-left
        for (int i = king[0] - 1, j = king[1] - 1; i >= 0 && j >= 0; i--, j--) {
            if (board[i][j]) {
                res.add(Arrays.asList(i, j));
                break;
            }
        }
        // up-right
        for (int i = king[0] - 1, j = king[1] + 1; i >= 0 && j < 8; i--, j++) {
            if (board[i][j]) {
                res.add(Arrays.asList(i, j));
                break;
            }
        }
        // down-left
        for (int i = king[0] + 1, j = king[1] - 1; i < 8 && j >= 0; i++, j--) {
            if (board[i][j]) {
                res.add(Arrays.asList(i, j));
                break;
            }
        }
        // down-right
        for (int i = king[0] + 1, j

=======

        List<List<Integer>> res = new ArrayList<>();
        int[] dx = {-1, -1, -1, 0, 0, 1, 1, 1};
        int[] dy = {-1, 0, 1, -1, 1, -1, 0, 1};
        int[][] board = new int[8][8];
        for (int i = 0; i < queens.length; i++) {
            board[queens[i][0]][queens[i][1]] = 1;
        }
        for (int i = 0; i < 8; i++) {
            int x = king[0] + dx[i];
            int y = king[1] + dy[i];
            while (x >= 0 && y >= 0 && x < 8 && y < 8) {
                if (board[x][y] == 1) {
                    List<Integer> tmp = new ArrayList<>();
                    tmp.add(x);
                    tmp.add(y);
                    res.add(tmp);
                    break;
                }
                x += dx[i];
                y += dy[i];
            }
        }
        return res;

=======

        List<List<Integer>> result = new ArrayList<>();
        int[][] map = new int[8][8];
        for (int[] queen : queens) {
            map[queen[0]][queen[1]] = 1;
        }
        int[][] directions = new int[][]{{-1, 0}, {1, 0}, {0, -1}, {0, 1}, {-1, -1}, {-1, 1}, {1, -1}, {1, 1}};
        for (int[] direction : directions) {
            int x = king[0];
            int y = king[1];
            while (x >= 0 && x < 8 && y >= 0 && y < 8) {
                if (map[x][y] == 1) {
                    List<Integer> list = new ArrayList<>();
                    list.add(x);
                    list.add(y);
                    result.add(list);
                    break;
                }
                x += direction[0];
                y += direction[1];
            }
        }
        return result;

=======

        List<List<Integer>> res = new ArrayList<>();
        int[][] board = new int[8][8];
        for (int[] q : queens) {
            board[q[0]][q[1]] = 1;
        }
        int[] dir = new int[]{0, 1, -1};
        for (int i : dir) {
            for (int j : dir) {
                if (i == 0 && j == 0) continue;
                int x = king[0];
                int y = king[1];
                while (x + i >= 0 && x + i < 8 && y + j >= 0 && y + j < 8) {
                    x += i;
                    y += j;
                    if (board[x][y] == 1) {
                        List<Integer> list = new ArrayList<>();
                        list.add(x);
                        list.add(y);
                        res.add(list);
                        break;
                    }
                }
            }
        }
        return res;

=======

        List<List<Integer>> res = new ArrayList<>();
        boolean[][] queenMap = new boolean[8][8];
        for (int[] queen : queens) {
            queenMap[queen[0]][queen[1]] = true;
        }
        for (int i = king[0] - 1; i >= 0; i--) {
            if (queenMap[i][king[1]]) {
                res.add(Arrays.asList(i, king[1]));
                break;
            }
        }
        for (int i = king[0] + 1; i < 8; i++) {
            if (queenMap[i][king[1]]) {
                res.add(Arrays.asList(i, king[1]));
                break;
            }
        }
        for (int i = king[1] - 1; i >= 0; i--) {
            if (queenMap[king[0]][i]) {
                res.add(Arrays.asList(king[0], i));
                break;
            }
        }
        for (int i = king[1] + 1; i < 8; i++) {
            if (queenMap[king[0]][i]) {
                res.add(Arrays.asList(king[0], i));
                break;
            }
        }
        int i = king[0] - 1, j = king[1] - 1;
        while (i >= 0 && j >= 0) {
            if (queenMap[i][j]) {
                res.add(Arrays.asList(i, j));
                break;
            }
            i--;
            j--;
        }
        i = king[0] - 1;
        j = king[1] + 1;
        while (i >= 0 && j < 8) {
            if (queenMap[i][j]) {
                res.add(Arrays.asList(i, j));
                break;
            }
            i--;
            j++;
        }
        i = king[0] + 1;
        j = king[1] - 1;
        while (i < 8 && j >= 0) {
            if (queenMap[i][j]) {
                res.add(Arrays.asList(i, j));
                break;
            }
            i++;
            j--;
        }
        i = king[0] + 1;
        j = king[1] + 1;
        while (i < 8 && j <

=======

        List<List<Integer>> result = new ArrayList<>();
        int[][] chessboard = new int[8][8];
        for (int i = 0; i < queens.length; i++) {
            chessboard[queens[i][0]][queens[i][1]] = 1;
        }
        int[] direction = new int[]{-1, 0, 1};
        for (int i = 0; i < direction.length; i++) {
            for (int j = 0; j < direction.length; j++) {
                if (direction[i] == 0 && direction[j] == 0) {
                    continue;
                }
                int x = king[0];
                int y = king[1];
                while (x + direction[i] >= 0 && x + direction[i] < 8 && y + direction[j] >= 0 && y + direction[j] < 8) {
                    x += direction[i];
                    y += direction[j];
                    if (chessboard[x][y] == 1) {
                        List<Integer> temp = new ArrayList<>();
                        temp.add(x);
                        temp.add(y);
                        result.add(temp);
                        break;
                    }
                }
            }
        }
        return result;

=======

        List<List<Integer>> result = new ArrayList<>();
        int[][] board = new int[8][8];
        for(int[] queen: queens){
            board[queen[0]][queen[1]] = 1;
        }
        int x = king[0];
        int y = king[1];
        // up
        while(x>=0){
            if(board[x][y]==1){
                List<Integer> list = new ArrayList<>();
                list.add(x);
                list.add(y);
                result.add(list);
                break;
            }
            x--;
        }
        x = king[0];
        y = king[1];
        // down
        while(x<8){
            if(board[x][y]==1){
                List<Integer> list = new ArrayList<>();
                list.add(x);
                list.add(y);
                result.add(list);
                break;
            }
            x++;
        }
        x = king[0];
        y = king[1];
        // left
        while(y>=0){
            if(board[x][y]==1){
                List<Integer> list = new ArrayList<>();
                list.add(x);
                list.add(y);
                result.add(list);
                break;
            }
            y--;
        }
        x = king[0];
        y = king[1];
        // right
        while(y<8){
            if(board[x][y]==1){
                List<Integer> list = new ArrayList<>();
                list.add(x);
                list.add(y);
                result.add(list);
                break;
            }
            y++;
        }
        x = king[0];
        y = king[1];
        // left up
        while(x>=0 && y>=0){
            if(board[x][y]==1){
                List<Integer> list = new ArrayList<>();
                list.add(x);
                list.add(y);
                result.add(list);
                break;
            }
            x--;
            y--;
        }
        x = king[0];
        y = king[1];
        // right up
        while(x>=0 && y<8){
            if(board[x][y]==1){
                List<Integer> list = new ArrayList<>();
                list.add(x);
                list.add(y);
                result.add(list);
                break;
            }
            x--;
            y++;
        }
        x = king[0];
        y = king[1];
        // left down
        while(x<8 && y>=0){
            if(board

=======

        List<List<Integer>> result = new ArrayList<>();
        int n = queens.length;
        int[][] board = new int[8][8];
        for (int i = 0; i < n; i++) {
            board[queens[i][0]][queens[i][1]] = 1;
        }
        for (int i = 0; i < 8; i++) {
            int x = king[0];
            int y = king[1];
            while (x >= 0 && x < 8 && y >= 0 && y < 8) {
                if (board[x][y] == 1) {
                    List<Integer> temp = new ArrayList<>();
                    temp.add(x);
                    temp.add(y);
                    result.add(temp);
                    break;
                }
                if (i == 0) {
                    x--;
                } else if (i == 1) {
                    x++;
                } else if (i == 2) {
                    y--;
                } else if (i == 3) {
                    y++;
                } else if (i == 4) {
                    x--;
                    y--;
                } else if (i == 5) {
                    x--;
                    y++;
                } else if (i == 6) {
                    x++;
                    y--;
                } else if (i == 7) {
                    x++;
                    y++;
                }
            }
        }
        return result;

=======

        List<List<Integer>> result = new ArrayList<>();
        int[][] directions = new int[][]{{1, 1}, {1, -1}, {-1, 1}, {-1, -1}, {1, 0}, {-1, 0}, {0, 1}, {0, -1}};
        for (int[] direction : directions) {
            int x = king[0], y = king[1];
            while (x >= 0 && x < 8 && y >= 0 && y < 8) {
                x += direction[0];
                y += direction[1];
                for (int[] queen : queens) {
                    if (queen[0] == x && queen[1] == y) {
                        List<Integer> list = new ArrayList<>();
                        list.add(x);
                        list.add(y);
                        result.add(list);
                        break;
                    }
                }
            }
        }
        return result;
