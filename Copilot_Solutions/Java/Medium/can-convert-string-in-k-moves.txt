Synthesizing 10/10 solutions

=======

        if (s.length() != t.length()) {
            return false;
        }
        int[] count = new int[26];
        for (int i = 0; i < s.length(); i++) {
            int diff = (t.charAt(i) - s.charAt(i) + 26) % 26;
            if (diff != 0) {
                count[diff]++;
                if (count[diff] > k / 26 + (k % 26 >= diff ? 1 : 0)) {
                    return false;
                }
            }
        }
        return true;

=======

        if (s.length() != t.length()) {
            return false;
        }
        int[] count = new int[26];
        for (int i = 0; i < s.length(); i++) {
            int diff = (t.charAt(i) - s.charAt(i) + 26) % 26;
            if (diff > 0) {
                count[diff]++;
            }
        }
        for (int i = 1; i < 26; i++) {
            if (count[i] > (k - i) / 26 + 1) {
                return false;
            }
        }
        return true;

=======

        if (s.length() != t.length()) return false;
        int[] count = new int[26];
        for (int i = 0; i < s.length(); i++) {
            int diff = (t.charAt(i) - s.charAt(i) + 26) % 26;
            if (diff == 0) continue;
            count[diff]++;
            if (count[diff] * 26 - diff > k) return false;
        }
        return true;

=======

        if (s.length() != t.length()) {
            return false;
        }
        int[] shifts = new int[26];
        for (int i = 0; i < s.length(); i++) {
            int diff = (t.charAt(i) - s.charAt(i) + 26) % 26;
            shifts[diff]++;
        }
        for (int i = 1; i < 26; i++) {
            if (shifts[i] > (k - i) / 26 + 1) {
                return false;
            }
        }
        return true;

=======

        if (s.length() != t.length()) {
            return false;
        }
        int[] shifts = new int[26];
        for (int i = 0; i < s.length(); i++) {
            int diff = (t.charAt(i) - s.charAt(i) + 26) % 26;
            shifts[diff]++;
        }
        for (int i = 1; i < 26; i++) {
            if (shifts[i] * 26 + i > k) {
                return false;
            }
        }
        return true;

=======

        if (s.length() != t.length()) {
            return false;
        }
        int[] counts = new int[26];
        for (int i = 0; i < s.length(); i++) {
            int diff = (t.charAt(i) - s.charAt(i) + 26) % 26;
            if (diff > 0) {
                counts[diff]++;
            }
        }
        for (int i = 1; i < counts.length; i++) {
            if (counts[i] > (k - i) / 26 + 1) {
                return false;
            }
        }
        return true;

=======

        if (s.length() != t.length()) return false;
        int[] shifts = new int[26];
        for (int i = 0; i < s.length(); i++) {
            int diff = t.charAt(i) - s.charAt(i);
            if (diff < 0) diff += 26;
            shifts[diff]++;
        }
        for (int i = 1; i < 26; i++) {
            if (shifts[i] > (k - i) / 26 + 1) return false;
        }
        return true;

=======

        if (s.length() != t.length()) return false;
        int[] shifts = new int[26];
        for (int i = 0; i < s.length(); i++) {
            int shift = t.charAt(i) - s.charAt(i);
            if (shift < 0) shift += 26;
            shifts[shift]++;
        }
        for (int i = 1; i < 26; i++) {
            if (shifts[i] > (k - i) / 26 + 1) return false;
        }
        return true;

=======

        if (s.length() != t.length()) {
            return false;
        }
        int[] d = new int[26];
        for (int i = 0; i < s.length(); i++) {
            int diff = (t.charAt(i) - s.charAt(i) + 26) % 26;
            if (diff > 0) {
                d[diff]++;
            }
        }
        for (int i = 1; i < 26; i++) {
            if (d[i] > (k - i) / 26 + 1) {
                return false;
            }
        }
        return true;

=======

        if(s.length() != t.length()){
            return false;
        }
        int[] shift = new int[26];
        for(int i = 0; i < s.length(); i++){
            int diff = t.charAt(i) - s.charAt(i);
            if(diff < 0){
                diff += 26;
            }
            if(diff != 0){
                shift[diff]++;
            }
        }
        for(int i = 1; i <= k; i++){
            int index = i % 26;
            if(shift[index] > 0){
                shift[index]--;
            }else{
                return false;
            }
        }
        return true;
