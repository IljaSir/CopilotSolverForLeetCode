Synthesizing 10/10 solutions

=======

        int count = 0;
        int result = 0;
        for (int i = 0; i < s.length(); i++) {
            if (s.charAt(i) == '1') {
                count++;
            } else {
                result += count * (count + 1) / 2;
                count = 0;
            }
        }
        result += count * (count + 1) / 2;
        return result % 1000000007;

=======

        int count = 0;
        int result = 0;
        int mod = 1000000007;
        for (int i = 0; i < s.length(); i++) {
            if (s.charAt(i) == '1') {
                count++;
            } else {
                result += (count * (count + 1)) / 2;
                result %= mod;
                count = 0;
            }
        }
        result += (count * (count + 1)) / 2;
        result %= mod;
        return result;

=======

        int count = 0;
        int sum = 0;
        int mod = 1000000007;
        for (int i = 0; i < s.length(); i++) {
            if (s.charAt(i) == '1') {
                count++;
            } else {
                sum = (sum + ((long)count*(count+1)/2))%mod;
                count = 0;
            }
        }
        sum = (sum + ((long)count*(count+1)/2))%mod;
        return sum;

=======

        int count = 0;
        int sum = 0;
        int mod = 1000000007;
        for (int i = 0; i < s.length(); i++) {
            if (s.charAt(i) == '1') {
                count++;
            } else {
                sum += count * (count + 1) / 2;
                sum %= mod;
                count = 0;
            }
        }
        sum += count * (count + 1) / 2;
        sum %= mod;
        return sum;

=======

        int count = 0;
        int sum = 0;
        for (int i = 0; i < s.length(); i++) {
            if (s.charAt(i) == '1') {
                count++;
                sum = (sum + count) % 1000000007;
            } else {
                count = 0;
            }
        }
        return sum;

=======

        int count = 0;
        int res = 0;
        int MOD = 1000000007;
        for (int i = 0; i < s.length(); i++) {
            if (s.charAt(i) == '1') {
                count++;
            } else {
                count = 0;
            }
            res = (res + count) % MOD;
        }
        return res;

=======

        int count = 0;
        int res = 0;
        int mod = (int) Math.pow(10, 9) + 7;
        for (int i = 0; i < s.length(); i++) {
            if (s.charAt(i) == '1') {
                count++;
            } else {
                res += (count * (count + 1)) / 2;
                count = 0;
            }
        }
        if (count > 0) {
            res += (count * (count + 1)) / 2;
        }
        return res % mod;

=======

        int count = 0;
        int ans = 0;
        int MOD = 1000000007;
        for (int i = 0; i < s.length(); i++) {
            if (s.charAt(i) == '1') {
                count++;
            } else {
                ans = (ans + (count * (count + 1L) / 2)) % MOD;
                count = 0;
            }
        }
        ans = (ans + (count * (count + 1L) / 2)) % MOD;
        return ans;

=======

        long count = 0;
        long res = 0;
        int mod = 1000000007;
        for (int i = 0; i < s.length(); i++) {
            if (s.charAt(i) == '1') {
                count++;
            } else {
                res += (count * (count + 1)) / 2;
                res %= mod;
                count = 0;
            }
        }
        res += (count * (count + 1)) / 2;
        res %= mod;
        return (int)res;

=======

        int mod = (int) (1e9 + 7);
        int count = 0;
        int res = 0;
        for (int i = 0; i < s.length(); i++) {
            if (s.charAt(i) == '1') {
                count++;
            } else {
                res += (count * (count + 1)) / 2;
                res %= mod;
                count = 0;
            }
        }
        res += (count * (count + 1)) / 2;
        res %= mod;
        return res;
