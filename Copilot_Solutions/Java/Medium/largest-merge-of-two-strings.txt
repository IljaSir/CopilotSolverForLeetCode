Synthesizing 10/10 solutions

=======

        StringBuilder sb = new StringBuilder();
        int i = 0, j = 0;
        while (i < word1.length() && j < word2.length()) {
            if (word1.charAt(i) > word2.charAt(j)) {
                sb.append(word1.charAt(i++));
            } else if (word1.charAt(i) < word2.charAt(j)) {
                sb.append(word2.charAt(j++));
            } else {
                int k = i, l = j;
                while (k < word1.length() && l < word2.length() && word1.charAt(k) == word2.charAt(l)) {
                    k++;
                    l++;
                }
                if (k == word1.length()) {
                    sb.append(word2.charAt(j++));
                } else if (l == word2.length()) {
                    sb.append(word1.charAt(i++));
                } else {
                    if (word1.charAt(k) > word2.charAt(l)) {
                        sb.append(word1.charAt(i++));
                    } else {
                        sb.append(word2.charAt(j++));
                    }
                }
            }
        }
        while (i < word1.length()) {
            sb.append(word1.charAt(i++));
        }
        while (j < word2.length()) {
            sb.append(word2.charAt(j++));
        }
        return sb.toString();

=======

        StringBuilder sb = new StringBuilder();
        int i = 0, j = 0;
        while (i < word1.length() && j < word2.length()) {
            if (word1.charAt(i) > word2.charAt(j)) {
                sb.append(word1.charAt(i++));
            } else if (word1.charAt(i) < word2.charAt(j)) {
                sb.append(word2.charAt(j++));
            } else {
                int k = 0;
                while (i + k < word1.length() && j + k < word2.length() && word1.charAt(i + k) == word2.charAt(j + k)) {
                    k++;
                }
                if (i + k < word1.length() && j + k < word2.length()) {
                    if (word1.charAt(i + k) > word2.charAt(j + k)) {
                        sb.append(word1.charAt(i++));
                    } else {
                        sb.append(word2.charAt(j++));
                    }
                } else if (i + k < word1.length()) {
                    sb.append(word1.charAt(i++));
                } else {
                    sb.append(word2.charAt(j++));
                }
            }
        }
        if (i < word1.length()) {
            sb.append(word1.substring(i));
        }
        if (j < word2.length()) {
            sb.append(word2.substring(j));
        }
        return sb.toString();

=======

        StringBuilder sb = new StringBuilder();
        int i = 0, j = 0;
        while (i < word1.length() || j < word2.length()) {
            if (i == word1.length()) {
                sb.append(word2.substring(j));
                break;
            }
            if (j == word2.length()) {
                sb.append(word1.substring(i));
                break;
            }
            if (word1.charAt(i) > word2.charAt(j)) {
                sb.append(word1.charAt(i));
                i++;
            } else if (word1.charAt(i) < word2.charAt(j)) {
                sb.append(word2.charAt(j));
                j++;
            } else {
                int i1 = i, j1 = j;
                while (i1 < word1.length() && j1 < word2.length() && word1.charAt(i1) == word2.charAt(j1)) {
                    i1++;
                    j1++;
                }
                if (i1 == word1.length()) {
                    sb.append(word2.substring(j));
                    break;
                }
                if (j1 == word2.length()) {
                    sb.append(word1.substring(i));
                    break;
                }
                if (word1.charAt(i1) > word2.charAt(j1)) {
                    sb.append(word1.charAt(i));
                    i++;
                } else {
                    sb.append(word2.charAt(j));
                    j++;
                }
            }
        }
        return sb.toString();

=======

        StringBuilder sb = new StringBuilder();
        int i = 0;
        int j = 0;
        while (i < word1.length() && j < word2.length()) {
            if (word1.charAt(i) > word2.charAt(j)) {
                sb.append(word1.charAt(i++));
            } else if (word1.charAt(i) < word2.charAt(j)) {
                sb.append(word2.charAt(j++));
            } else {
                if (word1.substring(i).compareTo(word2.substring(j)) > 0) {
                    sb.append(word1.charAt(i++));
                } else {
                    sb.append(word2.charAt(j++));
                }
            }
        }
        while (i < word1.length()) {
            sb.append(word1.charAt(i++));
        }
        while (j < word2.length()) {
            sb.append(word2.charAt(j++));
        }
        return sb.toString();

=======

        int i = 0, j = 0;
        StringBuilder sb = new StringBuilder();
        while (i < word1.length() && j < word2.length()) {
            if (word1.charAt(i) > word2.charAt(j)) {
                sb.append(word1.charAt(i++));
            } else if (word1.charAt(i) < word2.charAt(j)) {
                sb.append(word2.charAt(j++));
            } else {
                int k = 1;
                while (i + k < word1.length() && j + k < word2.length() && word1.charAt(i + k) == word2.charAt(j + k)) {
                    k++;
                }
                if (i + k == word1.length()) {
                    sb.append(word2.charAt(j++));
                } else if (j + k == word2.length()) {
                    sb.append(word1.charAt(i++));
                } else if (word1.charAt(i + k) > word2.charAt(j + k)) {
                    sb.append(word1.charAt(i++));
                } else {
                    sb.append(word2.charAt(j++));
                }
            }
        }
        if (i < word1.length()) {
            sb.append(word1.substring(i));
        } else if (j < word2.length()) {
            sb.append(word2.substring(j));
        }
        return sb.toString();

=======

        int i = 0;
        int j = 0;
        StringBuilder sb = new StringBuilder();
        while (i < word1.length() && j < word2.length()) {
            if (word1.charAt(i) > word2.charAt(j)) {
                sb.append(word1.charAt(i));
                i++;
            } else if (word1.charAt(i) < word2.charAt(j)) {
                sb.append(word2.charAt(j));
                j++;
            } else {
                int m = i + 1;
                int n = j + 1;
                while (m < word1.length() && n < word2.length() && word1.charAt(m) == word2.charAt(n)) {
                    m++;
                    n++;
                }
                if (m < word1.length() && n < word2.length() && word1.charAt(m) > word2.charAt(n)) {
                    sb.append(word1.charAt(i));
                    i++;
                } else {
                    sb.append(word2.charAt(j));
                    j++;
                }
            }
        }
        if (i < word1.length()) {
            sb.append(word1.substring(i));
        }
        if (j < word2.length()) {
            sb.append(word2.substring(j));
        }
        return sb.toString();

=======

        int i = 0, j = 0;
        StringBuilder sb = new StringBuilder();
        while (i < word1.length() || j < word2.length()) {
            if (i == word1.length()) {
                sb.append(word2.charAt(j++));
            } else if (j == word2.length()) {
                sb.append(word1.charAt(i++));
            } else if (word1.charAt(i) > word2.charAt(j)) {
                sb.append(word1.charAt(i++));
            } else if (word1.charAt(i) < word2.charAt(j)) {
                sb.append(word2.charAt(j++));
            } else {
                int k = i + 1, l = j + 1;
                while (k < word1.length() && l < word2.length() && word1.charAt(k) == word2.charAt(l)) {
                    k++;
                    l++;
                }
                if (k == word1.length()) {
                    sb.append(word2.charAt(j++));
                } else if (l == word2.length()) {
                    sb.append(word1.charAt(i++));
                } else if (word1.charAt(k) > word2.charAt(l)) {
                    sb.append(word1.charAt(i++));
                } else {
                    sb.append(word2.charAt(j++));
                }
            }
        }
        return sb.toString();

=======

        int i = 0;
        int j = 0;
        StringBuilder sb = new StringBuilder();
        while (i < word1.length() || j < word2.length()) {
            if (i == word1.length()) {
                sb.append(word2.charAt(j));
                j++;
            } else if (j == word2.length()) {
                sb.append(word1.charAt(i));
                i++;
            } else if (word1.charAt(i) > word2.charAt(j)) {
                sb.append(word1.charAt(i));
                i++;
            } else if (word1.charAt(i) < word2.charAt(j)) {
                sb.append(word2.charAt(j));
                j++;
            } else {
                if (word1.substring(i).compareTo(word2.substring(j)) >= 0) {
                    sb.append(word1.charAt(i));
                    i++;
                } else {
                    sb.append(word2.charAt(j));
                    j++;
                }
            }
        }
        return sb.toString();

=======

        int n = word1.length();
        int m = word2.length();
        int i = 0;
        int j = 0;
        StringBuilder sb = new StringBuilder();
        while (i < n && j < m) {
            if (word1.charAt(i) > word2.charAt(j)) {
                sb.append(word1.charAt(i));
                i++;
            } else if (word1.charAt(i) < word2.charAt(j)) {
                sb.append(word2.charAt(j));
                j++;
            } else {
                int k = i;
                int l = j;
                while (k < n && l < m && word1.charAt(k) == word2.charAt(l)) {
                    k++;
                    l++;
                }
                if (k == n) {
                    sb.append(word2.charAt(j));
                    j++;
                } else if (l == m) {
                    sb.append(word1.charAt(i));
                    i++;
                } else {
                    if (word1.charAt(k) > word2.charAt(l)) {
                        sb.append(word1.charAt(i));
                        i++;
                    } else {
                        sb.append(word2.charAt(j));
                        j++;
                    }
                }
            }
        }
        while (i < n) {
            sb.append(word1.charAt(i));
            i++;
        }
        while (j < m) {
            sb.append(word2.charAt(j));
            j++;
        }
        return sb.toString();

=======

        StringBuilder sb = new StringBuilder();
        int i = 0, j = 0;
        while(i < word1.length() || j < word2.length()) {
            if(i == word1.length()) {
                sb.append(word2.substring(j));
                break;
            }
            if(j == word2.length()) {
                sb.append(word1.substring(i));
                break;
            }
            if(word1.charAt(i) > word2.charAt(j)) {
                sb.append(word1.charAt(i++));
            } else if(word1.charAt(i) < word2.charAt(j)) {
                sb.append(word2.charAt(j++));
            } else {
                int k = 1;
                while(i + k < word1.length() && j + k < word2.length()) {
                    if(word1.charAt(i + k) > word2.charAt(j + k)) {
                        sb.append(word1.charAt(i++));
                        break;
                    } else if(word1.charAt(i + k) < word2.charAt(j + k)) {
                        sb.append(word2.charAt(j++));
                        break;
                    } else {
                        k++;
                    }
                }
                if(i + k == word1.length()) {
                    sb.append(word2.substring(j));
                    break;
                }
                if(j + k == word2.length()) {
                    sb.append(word1.substring(i));
                    break;
                }
            }
        }
        return sb.toString();
