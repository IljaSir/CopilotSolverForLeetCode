Synthesizing 10/10 solutions

=======

        int n = nums.length;
        double[] sum = new double[n + 1];
        for (int i = 0; i < n; i++) {
            sum[i + 1] = sum[i] + nums[i];
        }
        double[] dp = new double[n];
        for (int i = 0; i < n; i++) {
            dp[i] = (sum[n] - sum[i]) / (n - i);
        }
        for (int i = 0; i < k - 1; i++) {
            for (int j = 0; j < n; j++) {
                for (int m = j + 1; m < n; m++) {
                    dp[j] = Math.max(dp[j], (sum[m] - sum[j]) / (m - j) + dp[m]);
                }
            }
        }
        return dp[0];

=======

        int n = nums.length;
        double[] p = new double[n + 1];
        for (int i = 0; i < n; ++i)
            p[i + 1] = p[i] + nums[i];
        
        double[] dp = new double[n];
        for (int i = 0; i < n; ++i)
            dp[i] = (p[n] - p[i]) / (n - i);
        
        for (int i = 0; i < k - 1; ++i)
            for (int j = 0; j < n; ++j)
                for (int l = j + 1; l < n; ++l)
                    dp[j] = Math.max(dp[j], (p[l] - p[j]) / (l - j) + dp[l]);
        
        return dp[0];

=======

        int n = nums.length;
        double[] prefix = new double[n + 1];
        for (int i = 0; i < n; i++) {
            prefix[i + 1] = prefix[i] + nums[i];
        }
        double[] dp = new double[n];
        for (int i = 0; i < n; i++) {
            dp[i] = (prefix[n] - prefix[i]) / (n - i);
        }
        for (int i = 0; i < k - 1; i++) {
            for (int j = 0; j < n; j++) {
                for (int l = j + 1; l < n; l++) {
                    dp[j] = Math.max(dp[j], (prefix[l] - prefix[j]) / (l - j) + dp[l]);
                }
            }
        }
        return dp[0];

=======

        int n = nums.length;
        double[] prefix = new double[n + 1];
        for (int i = 0; i < n; i++) {
            prefix[i + 1] = prefix[i] + nums[i];
        }
        double[] dp = new double[n];
        for (int i = 0; i < n; i++) {
            dp[i] = (prefix[n] - prefix[i]) / (n - i);
        }
        for (int i = 0; i < k - 1; i++) {
            for (int j = 0; j < n; j++) {
                for (int m = j + 1; m < n; m++) {
                    dp[j] = Math.max(dp[j], (prefix[m] - prefix[j]) / (m - j) + dp[m]);
                }
            }
        }
        return dp[0];

=======

        int n = nums.length;
        double[] dp = new double[n];
        double sum = 0;
        for (int i = 0; i < n; i++) {
            sum += nums[i];
            dp[i] = sum / (i + 1);
        }
        for (int i = 1; i < k; i++) {
            for (int j = n - 1; j > i - 1; j--) {
                sum = 0;
                for (int l = j; l > i - 1; l--) {
                    sum += nums[l];
                    dp[j] = Math.max(dp[j], dp[l - 1] + sum / (j - l + 1));
                }
            }
        }
        return dp[n - 1];

=======

        int n = nums.length;
        double[] dp = new double[n];
        double sum = 0;
        for (int i = 0; i < n; i++) {
            sum += nums[i];
            dp[i] = sum / (i + 1);
        }
        for (int i = 1; i < k; i++) {
            for (int j = n - 1; j >= i; j--) {
                sum = 0;
                for (int l = j; l >= i; l--) {
                    sum += nums[l];
                    dp[j] = Math.max(dp[j], dp[l - 1] + sum / (j - l + 1));
                }
            }
        }
        return dp[n - 1];

=======

        int n = nums.length;
        double[] preSum = new double[n+1];
        for (int i = 0; i < n; i++) {
            preSum[i+1] = preSum[i] + nums[i];
        }
        double[] dp = new double[n];
        for (int i = 0; i < n; i++) {
            dp[i] = (preSum[n] - preSum[i])/(n-i);
        }
        for (int i = 0; i < k-1; i++) {
            for (int j = 0; j < n; j++) {
                for (int l = j+1; l < n; l++) {
                    dp[j] = Math.max(dp[j], (preSum[l] - preSum[j])/(l-j) + dp[l]);
                }
            }
        }
        return dp[0];

=======

        int n = nums.length;
        double[] preSum = new double[n+1];
        for (int i = 1; i <= n; i++) {
            preSum[i] = preSum[i-1] + nums[i-1];
        }
        double[] dp = new double[n];
        for (int i = 0; i < n; i++) {
            dp[i] = (preSum[n] - preSum[i])/(n-i);
        }
        for (int i = 0; i < k-1; i++) {
            for (int j = 0; j < n; j++) {
                for (int m = j+1; m < n; m++) {
                    dp[j] = Math.max(dp[j], (preSum[m] - preSum[j])/(m-j) + dp[m]);
                }
            }
        }
        return dp[0];

=======

        int n = nums.length;
        double[] prefix = new double[n+1];
        for (int i=0; i<n; i++) {
            prefix[i+1] = prefix[i] + nums[i];
        }
        double[] dp = new double[n];
        for (int i=0; i<n; i++) {
            dp[i] = (prefix[n] - prefix[i]) / (n - i);
        }
        for (int m=0; m<k-1; m++) {
            for (int i=0; i<n; i++) {
                for (int j=i+1; j<n; j++) {
                    dp[i] = Math.max(dp[i], (prefix[j] - prefix[i]) / (j - i) + dp[j]);
                }
            }
        }
        return dp[0];

=======

        int n = nums.length;
        double[][] memo = new double[n][k+1];
        for (int i = 0; i < n; i++) {
            Arrays.fill(memo[i], -1);
        }
        return largestSumOfAverages(nums, k, 0, memo);
    }
    
    private double largestSumOfAverages(int[] nums, int k, int i, double[][] memo) {
        if (k == 1) {
            return average(nums, i, nums.length-1);
        }
        if (memo[i][k] > -1) {
            return memo[i][k];
        }
        double max = 0;
        for (int j = i; j < nums.length-k+1; j++) {
            max = Math.max(max, average(nums, i, j) + largestSumOfAverages(nums, k-1, j+1, memo));
        }
        memo[i][k] = max;
        return max;
    }
    
    private double average(int[] nums, int i, int j) {
        double sum = 0;
        for (int k = i; k <= j; k++) {
            sum += nums[k];
        }
        return sum / (j-i+1);
