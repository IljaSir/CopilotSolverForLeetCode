Synthesizing 10/10 solutions

=======

        int[][] grid = new int[n][n];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                grid[i][j] = 1;
            }
        }
        for (int[] mine : mines) {
            grid[mine[0]][mine[1]] = 0;
        }
        int[][] up = new int[n][n];
        int[][] down = new int[n][n];
        int[][] left = new int[n][n];
        int[][] right = new int[n][n];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (i == 0) {
                    up[i][j] = grid[i][j];
                } else {
                    up[i][j] = grid[i][j] == 0 ? 0 : up[i - 1][j] + 1;
                }
                if (j == 0) {
                    left[i][j] = grid[i][j];
                } else {
                    left[i][j] = grid[i][j] == 0 ? 0 : left[i][j - 1] + 1;
                }
            }
        }
        for (int i = n - 1; i >= 0; i--) {
            for (int j = n - 1; j >= 0; j--) {
                if (i == n - 1) {
                    down[i][j] = grid[i][j];
                } else {
                    down[i][j] = grid[i][j] == 0 ? 0 : down[i + 1][j] + 1;
                }
                if (j == n - 1) {
                    right[i][j] = grid[i][j];
                } else {
                    right[i][j] = grid[i][j] == 0 ? 0 : right[i][j + 1] + 1;
                }
            }
        }
        int max = 0;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                max = Math.max(max, Math.min(up[i][j], Math.min(down[i

=======

        int[][] grid = new int[n][n];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                grid[i][j] = 1;
            }
        }
        for (int[] mine : mines) {
            grid[mine[0]][mine[1]] = 0;
        }
        int[][] left = new int[n][n];
        int[][] right = new int[n][n];
        int[][] up = new int[n][n];
        int[][] down = new int[n][n];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == 1) {
                    left[i][j] = (j == 0 ? 0 : left[i][j - 1]) + 1;
                }
            }
        }
        for (int i = 0; i < n; i++) {
            for (int j = n - 1; j >= 0; j--) {
                if (grid[i][j] == 1) {
                    right[i][j] = (j == n - 1 ? 0 : right[i][j + 1]) + 1;
                }
            }
        }
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[j][i] == 1) {
                    up[j][i] = (j == 0 ? 0 : up[j - 1][i]) + 1;
                }
            }
        }
        for (int i = 0; i < n; i++) {
            for (int j = n - 1; j >= 0; j--) {
                if (grid[j][i] == 1) {
                    down[j][i] = (j == n - 1 ? 0 : down[j + 1][i]) + 1;
                }
            }
        }
        int ans = 0;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                ans = Math.max(ans

=======

        int[][] grid = new int[n][n];
        for (int i = 0; i < n; i++) {
            Arrays.fill(grid[i], 1);
        }
        for (int[] mine : mines) {
            grid[mine[0]][mine[1]] = 0;
        }
        int[][] left = new int[n][n];
        int[][] right = new int[n][n];
        int[][] top = new int[n][n];
        int[][] bottom = new int[n][n];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == 0) {
                    continue;
                }
                left[i][j] = (j == 0) ? 1 : left[i][j - 1] + 1;
                top[i][j] = (i == 0) ? 1 : top[i - 1][j] + 1;
            }
        }
        for (int i = n - 1; i >= 0; i--) {
            for (int j = n - 1; j >= 0; j--) {
                if (grid[i][j] == 0) {
                    continue;
                }
                right[i][j] = (j == n - 1) ? 1 : right[i][j + 1] + 1;
                bottom[i][j] = (i == n - 1) ? 1 : bottom[i + 1][j] + 1;
            }
        }
        int max = 0;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == 0) {
                    continue;
                }
                int min = Math.min(left[i][j], Math.min(right[i][j], Math.min(top[i][j], bottom[i][j])));
                max = Math.max(max, min);
            }
        }
        return max;

=======

        int[][] grid = new int[n][n];
        for (int i = 0; i < n; i++) {
            Arrays.fill(grid[i], 1);
        }
        for (int[] mine : mines) {
            grid[mine[0]][mine[1]] = 0;
        }
        int[][] dp = new int[n][n];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == 1) {
                    dp[i][j] = 1;
                }
            }
        }
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == 1) {
                    if (i > 0) {
                        dp[i][j] += dp[i - 1][j];
                    }
                    if (j > 0) {
                        dp[i][j] += dp[i][j - 1];
                    }
                }
            }
        }
        for (int i = n - 1; i >= 0; i--) {
            for (int j = n - 1; j >= 0; j--) {
                if (grid[i][j] == 1) {
                    if (i < n - 1) {
                        dp[i][j] += dp[i + 1][j];
                    }
                    if (j < n - 1) {
                        dp[i][j] += dp[i][j + 1];
                    }
                }
            }
        }
        int ans = 0;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == 1) {
                    ans = Math.max(ans, dp[i][j] / 4);
                }
            }
        }
        return ans;

=======

        int[][] grid = new int[n][n];
        for (int i = 0; i < n; i++) {
            Arrays.fill(grid[i], 1);
        }
        for (int[] mine : mines) {
            grid[mine[0]][mine[1]] = 0;
        }
        int[][] left = new int[n][n];
        int[][] right = new int[n][n];
        int[][] up = new int[n][n];
        int[][] down = new int[n][n];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == 1) {
                    left[i][j] = (j == 0 ? 1 : left[i][j - 1] + 1);
                    up[i][j] = (i == 0 ? 1 : up[i - 1][j] + 1);
                }
            }
        }
        for (int i = n - 1; i >= 0; i--) {
            for (int j = n - 1; j >= 0; j--) {
                if (grid[i][j] == 1) {
                    right[i][j] = (j == n - 1 ? 1 : right[i][j + 1] + 1);
                    down[i][j] = (i == n - 1 ? 1 : down[i + 1][j] + 1);
                }
            }
        }
        int res = 0;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == 1) {
                    int min = Math.min(Math.min(left[i][j], right[i][j]), Math.min(up[i][j], down[i][j]));
                    res = Math.max(res, min);
                }
            }
        }
        return res;

=======

        int[][] grid = new int[n][n];
        for (int i = 0; i < n; i++) {
            Arrays.fill(grid[i], 1);
        }
        for (int[] mine : mines) {
            grid[mine[0]][mine[1]] = 0;
        }
        int[][] left = new int[n][n];
        int[][] right = new int[n][n];
        int[][] up = new int[n][n];
        int[][] down = new int[n][n];
        int max = 0;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == 1) {
                    left[i][j] = (j == 0 ? 0 : left[i][j - 1]) + 1;
                    up[i][j] = (i == 0 ? 0 : up[i - 1][j]) + 1;
                }
            }
        }
        for (int i = n - 1; i >= 0; i--) {
            for (int j = n - 1; j >= 0; j--) {
                if (grid[i][j] == 1) {
                    right[i][j] = (j == n - 1 ? 0 : right[i][j + 1]) + 1;
                    down[i][j] = (i == n - 1 ? 0 : down[i + 1][j]) + 1;
                    max = Math.max(max, Math.min(Math.min(left[i][j], right[i][j]), Math.min(up[i][j], down[i][j])));
                }
            }
        }
        return max;

=======

        int[][] grid = new int[n][n];
        for (int i = 0; i < n; i++) {
            Arrays.fill(grid[i], n);
        }
        for (int[] m : mines) {
            grid[m[0]][m[1]] = 0;
        }
        for (int i = 0; i < n; i++) {
            for (int j = 0, k = n - 1, l = 0, r = 0, u = 0, d = 0; j < n; j++, k--) {
                grid[i][j] = Math.min(grid[i][j], l = grid[i][j] == 0 ? 0 : l + 1);
                grid[i][k] = Math.min(grid[i][k], r = grid[i][k] == 0 ? 0 : r + 1);
                grid[j][i] = Math.min(grid[j][i], u = grid[j][i] == 0 ? 0 : u + 1);
                grid[k][i] = Math.min(grid[k][i], d = grid[k][i] == 0 ? 0 : d + 1);
            }
        }
        int ans = 0;
        for (int[] row : grid) {
            for (int v : row) {
                ans = Math.max(ans, v);
            }
        }
        return ans;

=======

        int[][] grid = new int[n][n];
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                grid[i][j]=1;
            }
        }
        for(int i=0;i<mines.length;i++){
            grid[mines[i][0]][mines[i][1]]=0;
        }
        int[][] left = new int[n][n];
        int[][] right = new int[n][n];
        int[][] top = new int[n][n];
        int[][] bottom = new int[n][n];
        int max=0;
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                if(grid[i][j]==1){
                    left[i][j]=1;
                    if(j>0){
                        left[i][j]+=left[i][j-1];
                    }
                }
            }
        }
        for(int i=0;i<n;i++){
            for(int j=n-1;j>=0;j--){
                if(grid[i][j]==1){
                    right[i][j]=1;
                    if(j<n-1){
                        right[i][j]+=right[i][j+1];
                    }
                }
            }
        }
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                if(grid[j][i]==1){
                    top[j][i]=1;
                    if(j>0){
                        top[j][i]+=top[j-1][i];
                    }
                }
            }
        }
        for(int i=0;i<n;i++){
            for(int j=n-1;j>=0;j--){
                if(grid[j][i]==1){
                    bottom[j][i]=1;
                    if(j<n-1){
                        bottom[j][i]+=bottom[j+1][i];
                    }
                }
            }
        }
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                if(grid[i][j]==1){
                    int temp = Math.min(left[i][j],right[i][j]);
                    temp = Math.min(temp,top[i][j]);
                    temp = Math.min(temp,bottom[i][j]);
                    max = Math.max(max,temp);
                }
            }
        }
        return max;

=======

        int[][] dp = new int[n][n];
        int[][] grid = new int[n][n];
        for (int[] row : grid)
            Arrays.fill(row, 1);
        for (int[] mine : mines)
            grid[mine[0]][mine[1]] = 0;
        for (int i = 0; i < n; i++) {
            for (int j = 0, l = 0, r = 0, u = 0, d = 0; j < n; j++) {
                l = grid[i][j] == 0 ? 0 : l + 1;
                dp[i][j] = l;
                r = grid[i][n - 1 - j] == 0 ? 0 : r + 1;
                dp[i][n - 1 - j] = Math.min(dp[i][n - 1 - j], r);
                u = grid[j][i] == 0 ? 0 : u + 1;
                dp[j][i] = Math.min(dp[j][i], u);
                d = grid[n - 1 - j][i] == 0 ? 0 : d + 1;
                dp[n - 1 - j][i] = Math.min(dp[n - 1 - j][i], d);
            }
        }
        int res = 0;
        for (int i = 0; i < n; i++)
            for (int j = 0; j < n; j++)
                res = Math.max(res, dp[i][j]);
        return res;

=======

        // 1. initialize the grid
        int[][] grid = new int[n][n];
        for (int[] row : grid) {
            Arrays.fill(row, n);
        }
        for (int[] mine : mines) {
            grid[mine[0]][mine[1]] = 0;
        }
        // 2. calculate each row
        for (int r = 0; r < n; r++) {
            int left = 0;
            for (int c = 0; c < n; c++) {
                left = grid[r][c] == 0 ? 0 : left + 1;
                grid[r][c] = Math.min(grid[r][c], left);
            }
            int right = 0;
            for (int c = n - 1; c >= 0; c--) {
                right = grid[r][c] == 0 ? 0 : right + 1;
                grid[r][c] = Math.min(grid[r][c], right);
            }
        }
        // 3. calculate each column
        for (int c = 0; c < n; c++) {
            int up = 0;
            for (int r = 0; r < n; r++) {
                up = grid[r][c] == 0 ? 0 : up + 1;
                grid[r][c] = Math.min(grid[r][c], up);
            }
            int down = 0;
            for (int r = n - 1; r >= 0; r--) {
                down = grid[r][c] == 0 ? 0 : down + 1;
                grid[r][c] = Math.min(grid[r][c], down);
            }
        }
        // 4. find the max
        int max = 0;
        for (int r = 0; r < n; r++) {
            for (int c = 0; c < n; c++) {
                max = Math.max(max, grid[r][c]);
            }
        }
        return max;
