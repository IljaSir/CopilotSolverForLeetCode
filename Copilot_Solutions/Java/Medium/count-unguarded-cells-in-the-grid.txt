Synthesizing 9/10 solutions

=======

        int[][] grid = new int[m][n];
        for (int[] guard : guards) {
            grid[guard[0]][guard[1]] = 1;
        }
        for (int[] wall : walls) {
            grid[wall[0]][wall[1]] = -1;
        }
        int[][] directions = {{1, 0}, {-1, 0}, {0, 1}, {0, -1}};
        for (int[] guard : guards) {
            for (int[] direction : directions) {
                int row = guard[0], col = guard[1];
                while (row >= 0 && row < m && col >= 0 && col < n && grid[row][col] != -1) {
                    grid[row][col] = 1;
                    row += direction[0];
                    col += direction[1];
                }
            }
        }
        int count = 0;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == 0) {
                    count++;
                }
            }
        }
        return count;

=======

        int[][] grid = new int[m][n];
        for (int[] guard : guards) {
            grid[guard[0]][guard[1]] = 1;
        }
        for (int[] wall : walls) {
            grid[wall[0]][wall[1]] = -1;
        }
        int[][] dirs = new int[][]{{0, 1}, {0, -1}, {1, 0}, {-1, 0}};
        for (int[] guard : guards) {
            for (int[] dir : dirs) {
                int x = guard[0] + dir[0];
                int y = guard[1] + dir[1];
                while (x >= 0 && x < m && y >= 0 && y < n && grid[x][y] != -1) {
                    grid[x][y] = 1;
                    x += dir[0];
                    y += dir[1];
                }
            }
        }
        int res = 0;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == 0) {
                    res++;
                }
            }
        }
        return res;

=======

        int[][] grid = new int[m][n];
        for (int[] wall : walls) {
            grid[wall[0]][wall[1]] = 1;
        }
        for (int[] guard : guards) {
            grid[guard[0]][guard[1]] = 2;
        }
        int[] dx = new int[]{0, 0, 1, -1};
        int[] dy = new int[]{1, -1, 0, 0};
        int count = 0;
        for (int[] guard : guards) {
            for (int i = 0; i < 4; i++) {
                int x = guard[0] + dx[i];
                int y = guard[1] + dy[i];
                while (x >= 0 && x < m && y >= 0 && y < n && grid[x][y] != 1) {
                    if (grid[x][y] == 0) {
                        count++;
                        grid[x][y] = 2;
                    }
                    x += dx[i];
                    y += dy[i];
                }
            }
        }
        return count;

=======

        int[][] grid = new int[m][n];
        for (int[] wall : walls) {
            grid[wall[0]][wall[1]] = 1;
        }
        for (int[] guard : guards) {
            grid[guard[0]][guard[1]] = 2;
        }
        int[][] directions = new int[][] {{0, 1}, {0, -1}, {1, 0}, {-1, 0}};
        int count = 0;
        for (int[] guard : guards) {
            for (int[] direction : directions) {
                int x = guard[0] + direction[0];
                int y = guard[1] + direction[1];
                while (x >= 0 && x < m && y >= 0 && y < n && grid[x][y] != 1) {
                    if (grid[x][y] == 0) {
                        grid[x][y] = 2;
                        count++;
                    }
                    x += direction[0];
                    y += direction[1];
                }
            }
        }
        return count;

=======

        int count = 0;
        boolean[][] grid = new boolean[m][n];
        for (int[] wall : walls) {
            grid[wall[0]][wall[1]] = true;
        }
        for (int[] guard : guards) {
            int x = guard[0];
            int y = guard[1];
            for (int i = x - 1; i >= 0; i--) {
                if (grid[i][y]) {
                    break;
                }
                grid[i][y] = true;
            }
            for (int i = x + 1; i < m; i++) {
                if (grid[i][y]) {
                    break;
                }
                grid[i][y] = true;
            }
            for (int i = y - 1; i >= 0; i--) {
                if (grid[x][i]) {
                    break;
                }
                grid[x][i] = true;
            }
            for (int i = y + 1; i < n; i++) {
                if (grid[x][i]) {
                    break;
                }
                grid[x][i] = true;
            }
        }
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (!grid[i][j]) {
                    count++;
                }
            }
        }
        return count;

=======

        int[][] grid = new int[m][n];
        for (int[] guard : guards) {
            int row = guard[0];
            int col = guard[1];
            grid[row][col] = 1;
            for (int i = row - 1; i >= 0; i--) {
                if (grid[i][col] == 2) {
                    break;
                }
                grid[i][col] = 1;
            }
            for (int i = row + 1; i < m; i++) {
                if (grid[i][col] == 2) {
                    break;
                }
                grid[i][col] = 1;
            }
            for (int j = col - 1; j >= 0; j--) {
                if (grid[row][j] == 2) {
                    break;
                }
                grid[row][j] = 1;
            }
            for (int j = col + 1; j < n; j++) {
                if (grid[row][j] == 2) {
                    break;
                }
                grid[row][j] = 1;
            }
        }
        for (int[] wall : walls) {
            int row = wall[0];
            int col = wall[1];
            grid[row][col] = 2;
        }
        int count = 0;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == 0) {
                    count++;
                }
            }
        }
        return count;

=======

        boolean[][] grid = new boolean[m][n];
        for(int[] wall : walls) {
            grid[wall[0]][wall[1]] = true;
        }
        int count = 0;
        for(int[] guard : guards) {
            int x = guard[0];
            int y = guard[1];
            int i = x;
            int j = y;
            while(i >= 0) {
                if(grid[i][j]) {
                    break;
                }
                count++;
                i--;
            }
            i = x;
            j = y;
            while(i < m) {
                if(grid[i][j]) {
                    break;
                }
                count++;
                i++;
            }
            i = x;
            j = y;
            while(j >= 0) {
                if(grid[i][j]) {
                    break;
                }
                count++;
                j--;
            }
            i = x;
            j = y;
            while(j < n) {
                if(grid[i][j]) {
                    break;
                }
                count++;
                j++;
            }
        }
        return count;

=======

        int ans = 0;
        boolean[][] seen = new boolean[m][n];
        for (int[] guard : guards) {
            seen[guard[0]][guard[1]] = true;
        }
        for (int[] wall : walls) {
            seen[wall[0]][wall[1]] = true;
        }
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (seen[i][j]) {
                    continue;
                }
                ans++;
                seen[i][j] = true;
                Queue<int[]> q = new LinkedList<>();
                q.offer(new int[]{i, j});
                while (!q.isEmpty()) {
                    int[] cur = q.poll();
                    int x = cur[0];
                    int y = cur[1];
                    if (x - 1 >= 0 && !seen[x - 1][y]) {
                        seen[x - 1][y] = true;
                        q.offer(new int[]{x - 1, y});
                    }
                    if (y - 1 >= 0 && !seen[x][y - 1]) {
                        seen[x][y - 1] = true;
                        q.offer(new int[]{x, y - 1});
                    }
                    if (x + 1 < m && !seen[x + 1][y]) {
                        seen[x + 1][y] = true;
                        q.offer(new int[]{x + 1, y});
                    }
                    if (y + 1 < n && !seen[x][y + 1]) {
                        seen[x][y + 1] = true;
                        q.offer(new int[]{x, y + 1});
                    }
                }
            }
        }
        return ans;

=======

        Set<Integer> wallSet = new HashSet<>();
        for (int[] wall : walls) {
            wallSet.add(wall[0] * n + wall[1]);
        }
        int[][] dirs = new int[][] {{1, 0}, {-1, 0}, {0, 1}, {0, -1}};
        int count = 0;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                boolean guarded = false;
                for (int[] dir : dirs) {
                    int x = i + dir[0];
                    int y = j + dir[1];
                    while (x >= 0 && x < m && y >= 0 && y < n) {
                        if (wallSet.contains(x * n + y)) {
                            break;
                        }
                        for (int[] guard : guards) {
                            if (guard[0] == x && guard[1] == y) {
                                guarded = true;
                                break;
                            }
                        }
                        if (guarded) {
                            break;
                        }
                        x += dir[0];
                        y += dir[1];
                    }
                    if (guarded) {
                        break;
                    }
                }
                if (!guarded) {
                    count++;
                }
            }
        }
        return count;
