Synthesizing 10/10 solutions

=======

        int[][] order = new int[n][n];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n - 1; j++) {
                order[i][preferences[i][j]] = j;
            }
        }
        int[] pair = new int[n];
        for (int[] p : pairs) {
            pair[p[0]] = p[1];
            pair[p[1]] = p[0];
        }
        int ans = 0;
        for (int x = 0; x < n; x++) {
            int y = pair[x];
            int index = order[x][y];
            for (int i = 0; i < index; i++) {
                int u = preferences[x][i];
                int v = pair[u];
                if (order[u][x] < order[u][v]) {
                    ans++;
                    break;
                }
            }
        }
        return ans;

=======

        int[][] pref = new int[n][n];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n - 1; j++) {
                pref[i][preferences[i][j]] = j;
            }
        }
        int[] match = new int[n];
        for (int[] pair : pairs) {
            int person0 = pair[0], person1 = pair[1];
            match[person0] = person1;
            match[person1] = person0;
        }
        int unhappyCount = 0;
        for (int x = 0; x < n; x++) {
            int y = match[x];
            int index = pref[x][y];
            for (int i = 0; i < index; i++) {
                int u = preferences[x][i];
                int v = match[u];
                if (pref[u][x] < pref[u][v]) {
                    unhappyCount++;
                    break;
                }
            }
        }
        return unhappyCount;

=======

        int[][] pref = new int[n][n];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n - 1; j++) {
                pref[i][preferences[i][j]] = j;
            }
        }
        int[] pair = new int[n];
        for (int[] p : pairs) {
            pair[p[0]] = p[1];
            pair[p[1]] = p[0];
        }
        int ans = 0;
        for (int x = 0; x < n; x++) {
            int y = pair[x];
            int index = pref[x][y];
            for (int i = 0; i < index; i++) {
                int u = preferences[x][i];
                int v = pair[u];
                if (pref[u][x] < pref[u][v]) {
                    ans++;
                    break;
                }
            }
        }
        return ans;

=======

        int[] pair = new int[n];
        for (int[] p : pairs) {
            pair[p[0]] = p[1];
            pair[p[1]] = p[0];
        }
        int ans = 0;
        for (int i = 0; i < n; i++) {
            int x = pair[i];
            for (int u : preferences[i]) {
                if (u == x) break;
                int v = pair[u];
                for (int j : preferences[u]) {
                    if (j == v) break;
                    if (j == i) {
                        ans++;
                        break;
                    }
                }
            }
        }
        return ans;

=======

        int[] pair = new int[n];
        for (int[] p : pairs) {
            pair[p[0]] = p[1];
            pair[p[1]] = p[0];
        }
        int unhappy = 0;
        for (int x = 0; x < n; x++) {
            int y = pair[x];
            int index = 0;
            while (preferences[x][index] != y) {
                int u = preferences[x][index];
                int v = pair[u];
                for (int i = 0; i < n - 1 && preferences[u][i] != v; i++) {
                    if (preferences[u][i] == x) {
                        unhappy++;
                        break;
                    }
                }
                index++;
            }
        }
        return unhappy;

=======

        int[][] p = new int[n][n];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n - 1; j++) {
                p[i][preferences[i][j]] = j;
            }
        }
        int[] match = new int[n];
        for (int[] pair : pairs) {
            int person0 = pair[0], person1 = pair[1];
            match[person0] = person1;
            match[person1] = person0;
        }
        int unhappyCount = 0;
        for (int x = 0; x < n; x++) {
            int y = match[x];
            int index = p[x][y];
            for (int i = 0; i < index; i++) {
                int u = preferences[x][i];
                int v = match[u];
                if (p[u][x] < p[u][v]) {
                    unhappyCount++;
                    break;
                }
            }
        }
        return unhappyCount;

=======

        int[][] preference = new int[n][n];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n - 1; j++) {
                preference[i][preferences[i][j]] = j;
            }
        }
        int[] pair = new int[n];
        for (int[] p : pairs) {
            pair[p[0]] = p[1];
            pair[p[1]] = p[0];
        }
        int unhappy = 0;
        for (int x = 0; x < n; x++) {
            int y = pair[x];
            int index = preference[x][y];
            for (int i = 0; i < index; i++) {
                int u = preferences[x][i];
                int v = pair[u];
                if (preference[u][x] < preference[u][v]) {
                    unhappy++;
                    break;
                }
            }
        }
        return unhappy;

=======

        int[] pair = new int[n];
        for (int[] p: pairs) {
            pair[p[0]] = p[1];
            pair[p[1]] = p[0];
        }
        int count = 0;
        for (int x = 0; x < n; x++) {
            int y = pair[x];
            int index = 0;
            while (preferences[x][index] != y) {
                int u = preferences[x][index];
                int v = pair[u];
                for (int i = 0; i < n - 1 && preferences[u][i] != v; i++) {
                    if (preferences[u][i] == x) {
                        count++;
                        break;
                    }
                }
                index++;
            }
        }
        return count;

=======

        int[] pair = new int[n];
        for (int[] p: pairs) {
            pair[p[0]] = p[1];
            pair[p[1]] = p[0];
        }

        int unhappy = 0;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n - 1; j++) {
                int x = preferences[i][j];
                if (preferences[x][0] != i) {
                    break;
                }
                int y = pair[x];
                for (int k = 0; k < n - 1; k++) {
                    int u = preferences[x][k];
                    if (preferences[u][0] != x) {
                        break;
                    }
                    if (preferences[u][0] == i) {
                        unhappy++;
                        break;
                    }
                }
            }
        }
        return unhappy;

=======

        int unhappyFriends = 0;
        int[] pairings = new int[n];
        for (int[] pair : pairs) {
            pairings[pair[0]] = pair[1];
            pairings[pair[1]] = pair[0];
        }
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < preferences[i].length; j++) {
                if (preferences[i][j] == pairings[i]) {
                    break;
                }
                int pair = pairings[preferences[i][j]];
                for (int k = 0; k < preferences[pair].length; k++) {
                    if (preferences[pair][k] == i) {
                        unhappyFriends++;
                        break;
                    }
                    if (preferences[pair][k] == pairings[pair]) {
                        break;
                    }
                }
            }
        }
        return unhappyFriends;
