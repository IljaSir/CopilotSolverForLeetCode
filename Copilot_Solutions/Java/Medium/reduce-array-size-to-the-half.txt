Synthesizing 10/10 solutions

=======

        Map<Integer, Integer> map = new HashMap<>();
        for (int i = 0; i < arr.length; i++) {
            map.put(arr[i], map.getOrDefault(arr[i], 0) + 1);
        }
        List<Integer> list = new ArrayList<>(map.values());
        Collections.sort(list, Collections.reverseOrder());
        int sum = 0, count = 0;
        for (int i : list) {
            sum += i;
            count++;
            if (sum >= arr.length / 2) {
                break;
            }
        }
        return count;

=======

        int n = arr.length;
        HashMap<Integer, Integer> map = new HashMap<>();
        for (int i = 0; i < n; i++) {
            map.put(arr[i], map.getOrDefault(arr[i], 0) + 1);
        }
        int[] count = new int[n + 1];
        for (int key : map.keySet()) {
            count[map.get(key)]++;
        }
        int ans = 0;
        int sum = 0;
        for (int i = n; i >= 1; i--) {
            while (count[i]-- > 0) {
                sum += i;
                ans++;
                if (sum >= n / 2) {
                    return ans;
                }
            }
        }
        return ans;

=======

        HashMap<Integer, Integer> map = new HashMap();
        for (int i = 0; i < arr.length; i++) {
            map.put(arr[i], map.getOrDefault(arr[i], 0) + 1);
        }
        PriorityQueue<Integer> heap = new PriorityQueue<>((a, b) -> b - a);
        for (int key : map.keySet()) {
            heap.offer(map.get(key));
        }
        int res = 0;
        int count = 0;
        while (count < arr.length / 2) {
            count += heap.poll();
            res++;
        }
        return res;

=======

        int n = arr.length;
        Map<Integer, Integer> map = new HashMap<>();
        for (int a : arr) {
            map.put(a, map.getOrDefault(a, 0) + 1);
        }
        List<Integer> list = new ArrayList<>(map.values());
        Collections.sort(list, (a, b) -> b - a);
        int ans = 0;
        for (int i = 0; i < list.size(); i++) {
            ans += list.get(i);
            if (ans >= n / 2) {
                return i + 1;
            }
        }
        return 0;

=======

        int n = arr.length;
        HashMap<Integer, Integer> map = new HashMap<>();
        for (int i = 0; i < n; i++) {
            map.put(arr[i], map.getOrDefault(arr[i], 0) + 1);
        }
        int[] count = new int[n + 1];
        for (int key : map.keySet()) {
            count[map.get(key)]++;
        }
        int ans = 0;
        int sum = 0;
        for (int i = n; i >= 1; i--) {
            while (count[i]-- > 0) {
                sum += i;
                ans++;
                if (sum >= n / 2) {
                ount;

=======

        int n = arr.length;
        Map<Integer, Integer> map = new HashMap<>();
        for (int i : arr) {
            map.put(i, map.getOrDefault(i, 0) + 1);
        }
        PriorityQueue<Integer> pq = new PriorityQueue<>((a, b) -> b - a);
        pq.addAll(map.values());
        int cnt = 0;
        int ans = 0;
        while (!pq.isEmpty()) {
            cnt += pq.poll();
            ans++;
            if (cnt >= n / 2) break;
        }
        return ans;

=======

        int n = arr.length;
        Map<Integer, Integer> map = new HashMap<>();
        for (int i : arr) {
            map.put(i, map.getOrDefault(i, 0) + 1);
        }
        PriorityQueue<Integer> pq = new Pri rityQueue<>((a, b) -> b - a);
        pq.addAll(map.val es());
        int cnt = 0;
        int ans = 0;
        while (!pq.isEmpty()) {
            cnt += pq.poll();
            ans++;
            if (cnt >=   / 2) break;
        }
        re urn ansreturn ans;
                }
            }
        }
        return ans;

=======

        HashMap<Integer, Integer> map = new HashMap();
        for (int i = 0; i < arr.length; i++) {
            map.put(arr[i], map.getOrDefault(arr[i], 0) + 1);
        }
        PriorityQueue<Integer> heap = new PriorityQueue<>((a, b) -> b - a);
        for (int key : map.keySet()) {
            heap.offer(map.get(key));
        }
        int res = 0;
        int count = 0;
        while (count < arr.length / 2) {
            count += heap.poll();
            res++;
        }
        return res;

=======

        int n = arr.length;
        Map<Integer, Integer> map = new HashMap<>();
        for (int a : arr) {
            map.put(a, map.getOrDefault(a, 0) + 1);
        }
        List<Integer> list = new ArrayList<>(map.values());
        Collections.sort(list, (a, b) -> b - a);
        int ans = 0;
        for (int i = 0; i < list.size(); i++) {
            ans += list.get(i);
            if (ans >= n / 2) {
                return i + 1;
            }
        }
        return 0;

=======

        int n = arr.length;
        Map<Integer, Integer> freq = new HashMap<>();
        for (int i = 0; i < n; i++) {
            freq.put(arr[i], freq.getOrDefault(arr[i], 0) + 1);
        }
        List<Integer> freqs = new ArrayList<>(freq.values());
        Collections.sort(freqs, Collections.reverseOrder());
        int count = 0;
        int sum = 0;
        for (int i = 0; i < freqs.size(); i++) {
            sum += freqs.get(i);
            count++;
            if (sum >= n / 2) {
                break;
            }
        }
        return count;

=======

        int n = arr.length;
        int[] freq = new int[100001];
        for (int a : arr) {
            freq[a]++;
        }
        Arrays.sort(freq);
        int res = 0;
        for (int i = freq.length - 1; i >= 0 && n > 0; i--) {
            n -= freq[i];
            res++;
        }
        return res;

=======

        int[] count = new int[100001];
        for (int a : arr) {
            count[a]++;
        }
        Arrays.sort(count);
        int removed = 0;
        int result = 0;
        for (int i = count.length - 1; i >= 0 && removed < arr.length / 2; i--) {
            removed += count[i];
            result++;
        }
        return result;

=======

        int n = arr.length / 2;
        int[] freq = new int[100001];
        for (int i : arr) {
            freq[i]++;
        }
        Arrays.sort(freq);
        int sum = 0;
        int res = 0;
        for (int i = freq.length - 1; i >= 0; i--) {
            if (sum >= n) {
                break;
            }
            sum += freq[i];
            res++;
        }
        return res;

=======

        int n = arr.length;
        int[] cnt = new int[100001];
        for(int i : arr) {
            cnt[i]++;
        }
        PriorityQueue<Integer> pq = new PriorityQueue<>(Collections.reverseOrder());
        for(int i : cnt) {
            if (i > 0) {
                pq.add(i);
            }
        }
        int sum = 0;
        int res = 0;
        while(sum < n / 2) {
            sum += pq.poll();
            res++;
        }
        return res;
