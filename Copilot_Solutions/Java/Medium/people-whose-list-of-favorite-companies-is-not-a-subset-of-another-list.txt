Synthesizing 10/10 solutions

=======

        List<Integer> result = new ArrayList<>();
        for (int i = 0; i < favoriteCompanies.size(); i++) {
            boolean isSubset = false;
            for (int j = 0; j < favoriteCompanies.size(); j++) {
                if (i == j) {
                    continue;
                }
                if (favoriteCompanies.get(i).size() > favoriteCompanies.get(j).size()) {
                    continue;
                }
                if (isSubset(favoriteCompanies.get(i), favoriteCompanies.get(j))) {
                    isSubset = true;
                    break;
                }
            }
            if (!isSubset) {
                result.add(i);
            }
        }
        return result;
    }
    
    public boolean isSubset(List<String> a, List<String> b) {
        for (String s : a) {
            if (!b.contains(s)) {
                return false;
            }
        }
        return true;

=======

        List<Integer> result = new ArrayList<>();
        for (int i = 0; i < favoriteCompanies.size(); i++) {
            boolean isSubset = false;
            for (int j = 0; j < favoriteCompanies.size(); j++) {
                if (i == j) continue;
                if (isSubset(favoriteCompanies.get(i), favoriteCompanies.get(j))) {
                    isSubset = true;
                    break;
                }
            }
            if (!isSubset) result.add(i);
        }
        return result;

=======

        List<Integer> result = new ArrayList<>();
        for(int i = 0; i < favoriteCompanies.size(); i++){
            boolean isSubset = false;
            for(int j = 0; j < favoriteCompanies.size(); j++){
                if(i != j){
                    if(favoriteCompanies.get(i).size() < favoriteCompanies.get(j).size()){
                        if(favoriteCompanies.get(j).containsAll(favoriteCompanies.get(i))){
                            isSubset = true;
                            break;
                        }
                    }
                }
            }
            if(!isSubset){
                result.add(i);
            }
        }
        return result;

=======

        List<Integer> res = new ArrayList<>();
        int n = favoriteCompanies.size();
        for (int i = 0; i < n; i++) {
            boolean isSubset = false;
            for (int j = 0; j < n; j++) {
                if (i == j) continue;
                if (favoriteCompanies.get(j).containsAll(favoriteCompanies.get(i))) {
                    isSubset = true;
                    break;
                }
            }
            if (!isSubset) res.add(i);
        }
        return res;

=======

        Map<String, Set<Integer>> map = new HashMap<>();
        for (int i = 0; i < favoriteCompanies.size(); i++) {
            for (String c : favoriteCompanies.get(i)) {
                if (!map.containsKey(c)) {
                    map.put(c, new HashSet<>());
                }
                map.get(c).add(i);
            }
        }
        List<Integer> res = new ArrayList<>();
        for (int i = 0; i < favoriteCompanies.size(); i++) {
            boolean flag = true;
            for (String c : favoriteCompanies.get(i)) {
                if (map.get(c).size() > 1) {
                    flag = false;
                    break;
                }
            }
            if (flag) {
                res.add(i);
            }
        }
        return res;

=======

        List<Integer> result = new ArrayList<>();
        for(int i=0; i<favoriteCompanies.size(); i++) {
            boolean flag = true;
            for(int j=0; j<favoriteCompanies.size(); j++) {
                if(i==j) continue;
                if(favoriteCompanies.get(i).size() < favoriteCompanies.get(j).size()) {
                    if(favoriteCompanies.get(j).containsAll(favoriteCompanies.get(i))) {
                        flag = false;
                        break;
                    }
                }
            }
            if(flag) {
                result.add(i);
            }
        }
        return result;

=======

        List<Integer> indexes = new ArrayList<>();
        for (int i = 0; i < favoriteCompanies.size(); i++) {
            boolean flag = true;
            for (int j = 0; j < favoriteCompanies.size(); j++) {
                if (i != j && isSubset(favoriteCompanies.get(i), favoriteCompanies.get(j))) {
                    flag = false;
                    break;
                }
            }
            if (flag) {
                indexes.add(i);
            }
        }
        return indexes;
    }
    
    private boolean isSubset(List<String> list1, List<String> list2) {
        Set<String> set = new HashSet<>(list2);
        for (String s : list1) {
            if (!set.contains(s)) {
                return false;
            }
        }
        return true;

=======

        int n = favoriteCompanies.size();
        List<Set<String>> sets = new ArrayList<>();
        for (List<String> list : favoriteCompanies) {
            sets.add(new HashSet<>(list));
        }
        List<Integer> ans = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            boolean isSubset = false;
            for (int j = 0; j < n; j++) {
                if (i == j) {
                    continue;
                }
                if (sets.get(j).containsAll(sets.get(i))) {
                    isSubset = true;
                    break;
                }
            }
            if (!isSubset) {
                ans.add(i);
            }
        }
        return ans;

=======

        List<Integer> res = new ArrayList<>();
        int n = favoriteCompanies.size();
        int[] mask = new int[n];
        for (int i = 0; i < n; i++) {
            for (String s : favoriteCompanies.get(i)) {
                mask[i] |= 1 << (s.hashCode() & 31);
            }
        }
        for (int i = 0; i < n; i++) {
            int j = 0;
            for (; j < n; j++) {
                if (i == j) continue;
                if ((mask[i] & mask[j]) == mask[i]) break;
            }
            if (j == n) res.add(i);
        }
        return res;

=======

        List<Integer> result = new ArrayList<>();
        int len = favoriteCompanies.size();
        int[] set = new int[len];
        for (int i = 0; i < len; i++) {
            for (String s : favoriteCompanies.get(i)) {
                set[i] |= (1 << (s.hashCode() % 32));
            }
        }
        for (int i = 0; i < len; i++) {
            boolean flag = true;
            for (int j = 0; j < len; j++) {
                if (i != j && (set[i] & set[j]) == set[i]) {
                    flag = false;
                    break;
                }
            }
            if (flag) {
                result.add(i);
            }
        }
        return result;
