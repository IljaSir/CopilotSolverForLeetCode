Synthesizing 10/10 solutions (Duplicates hidden)

=======

        Arrays.sort(nums);
        int left = 0;
        long sum = 0;
        int res = 1;
        for (int right = 1; right < nums.length; right++) {
            sum += (long)(nums[right] - nums[right - 1]) * (right - left);
            while (sum > k) {
                sum -= nums[right] - nums[left];
                left++;
            }
            res = Math.max(res, right - left + 1);
        }
        return res;

=======

        Arrays.sort(nums);
        int n = nums.length;
        int i = 0;
        long sum = 0;
        int ans = 1;
        for (int j = 1; j < n; ++j) {
            sum += (long) (nums[j] - nums[j - 1]) * (j - i);
            while (sum > k) {
                sum -= nums[j] - nums[i];
                ++i;
            }
            ans = Math.max(ans, j - i + 1);
        }
        return ans;

=======

        Arrays.sort(nums);
        int l = 0;
        long total = 0;
        int ans = 1;
        for (int r = 1; r < nums.length; ++r) {
            total += (long) (nums[r] - nums[r - 1]) * (r - l);
            while (total > k) {
                total -= nums[r] - nums[l];
                ++l;
            }
            ans = Math.max(ans, r - l + 1);
        }
        return ans;

=======

        Arrays.sort(nums);
        int n = nums.length;
        long sum = 0;
        int res = 1;
        int l = 0;
        for (int r = 1; r < n; r++) {
            sum += (long) (nums[r] - nums[r - 1]) * (r - l);
            while (sum > k) {
                sum -= nums[r] - nums[l];
                l++;
            }
            res = Math.max(res, r - l + 1);
        }
        return res;

=======

        Arrays.sort(nums);
        int i = 0;
        int j = 0;
        long sum = 0;
        int ans = 0;
        while (j < nums.length) {
            sum += nums[j];
            while ((long) nums[j] * (j - i + 1) - sum > k) {
                sum -= nums[i];
                i++;
            }
            ans = Math.max(ans, j - i + 1);
            j++;
        }
        return ans;

=======

        Arrays.sort(nums);
        long sum = 0;
        int max = 1;
        int j = 0;
        for (int i = 0; i < nums.length; i++) {
            sum += nums[i];
            while (nums[i] * (i - j + 1L) - sum > k) {
                sum -= nums[j];
                j++;
            }
            max = Math.max(max, i - j + 1);
        }
        return max;

=======

        Arrays.sort(nums);
        int i = 0, j = 0;
        long sum = 0;
        int max = 0;
        while (j < nums.length) {
            sum += nums[j];
            while (sum + k < (long)nums[j] * (j - i + 1)) {
                sum -= nums[i];
                i++;
            }
            max = Math.max(max, j - i + 1);
            j++;
        }
        return max;

=======

        Arrays.sort(nums);
        int n = nums.length;
        int max = 1;
        long sum = 0;
        int l = 0;
        for (int r = 1; r < n; r++) {
            sum += (long) (nums[r] - nums[r - 1]) * (r - l);
            while (sum > k) {
                sum -= nums[r] - nums[l];
                l++;
            }
            max = Math.max(max, r - l + 1);
        }
        return max;

=======

        Arrays.sort(nums);
        int n = nums.length;
        int i = 0;
        int j = 0;
        long sum = 0;
        int max = 0;
        while (j < n) {
            sum += nums[j];
            while (sum + k < (long) (j - i + 1) * nums[j]) {
                sum -= nums[i];
                i++;
            }
            max = Math.max(max, j - i + 1);
            j++;
        }
        return max;
