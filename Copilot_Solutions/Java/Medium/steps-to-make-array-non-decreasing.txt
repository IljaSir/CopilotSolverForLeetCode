Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int steps = 0;
        for (int i = 1; i < nums.length; i++) {
            if (nums[i] < nums[i - 1]) {
                steps += nums[i - 1] - nums[i];
                nums[i] = nums[i - 1];
            }
        }
        return steps;

=======

        int steps = 0;
        for (int i = 1; i < nums.length; i++) {
            if (nums[i - 1] > nums[i]) {
                steps += nums[i - 1] - nums[i];
                nums[i] = nums[i - 1];
            }
        }
        return steps;

=======

        int count = 0;
        for (int i = 1; i < nums.length; i++) {
            if (nums[i] < nums[i - 1]) {
                count += nums[i - 1] - nums[i];
                nums[i] = nums[i - 1];
            }
        }
        return count;

=======

        int steps = 0;
        for(int i = 1; i < nums.length; i++) {
            if(nums[i] < nums[i-1]) {
                int diff = nums[i-1] - nums[i];
                nums[i] += diff;
                steps += diff;
            }
        }
        return steps;

=======

        int count = 0;
        for(int i = 1; i < nums.length; i++){
            if(nums[i] < nums[i-1]){
                count++;
                nums[i] = nums[i-1];
            }
        }
        return count;

=======

        int count = 0;
        int i = 0;
        while (i < nums.length - 1) {
            if (nums[i] > nums[i + 1]) {
                nums[i + 1] = nums[i];
                count++;
            } else {
                i++;
            }
        }
        return count;

=======

        int count = 0;
        for(int i=1;i<nums.length;i++){
            if(nums[i] < nums[i-1]){
                int diff = nums[i-1] - nums[i];
                nums[i] += diff;
                count += diff;
            }
        }
        return count;

=======

        int n = nums.length;
        int[] dp = new int[n];
        dp[0] = 0;
        for (int i = 1; i < n; i++) {
            dp[i] = dp[i - 1];
            if (nums[i] < nums[i - 1]) {
                int diff = nums[i - 1] - nums[i];
                nums[i] = nums[i - 1];
                dp[i] += diff;
            }
        }
        return dp[n - 1];

=======

        int n = nums.length;
        int[] dp = new int[n];
        Arrays.fill(dp, 1);
        int max = 1;
        for(int i = 1; i < n; i++){
            if(nums[i] >= nums[i-1]){
                dp[i] = 1 + dp[i-1];
            }
            max = Math.max(max, dp[i]);
        }
        return n - max;
