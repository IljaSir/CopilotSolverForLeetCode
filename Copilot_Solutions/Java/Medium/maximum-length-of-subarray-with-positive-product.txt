Synthesizing 10/10 solutions

=======

        int n = nums.length;
        int[] pos = new int[n];
        int[] neg = new int[n];
        if (nums[0] > 0) {
            pos[0] = 1;
        } else if (nums[0] < 0) {
            neg[0] = 1;
        }
        for (int i = 1; i < n; i++) {
            if (nums[i] > 0) {
                pos[i] = pos[i - 1] + 1;
                if (neg[i - 1] > 0) {
                    neg[i] = neg[i - 1] + 1;
                }
            } else if (nums[i] < 0) {
                if (neg[i - 1] > 0) {
                    pos[i] = neg[i - 1] + 1;
                }
                neg[i] = pos[i - 1] + 1;
            }
        }
        int ans = 0;
        for (int i = 0; i < n; i++) {
            ans = Math.max(ans, pos[i]);
        }
        return ans;

=======

        int n = nums.length;
        int[] pos = new int[n];
        int[] neg = new int[n];
        if (nums[0] > 0) {
            pos[0] = 1;
        } else if (nums[0] < 0) {
            neg[0] = 1;
        }
        int res = pos[0];
        for (int i = 1; i < n; i++) {
            if (nums[i] > 0) {
                pos[i] = pos[i - 1] + 1;
                neg[i] = neg[i - 1] > 0 ? neg[i - 1] + 1 : 0;
            } else if (nums[i] < 0) {
                pos[i] = neg[i - 1] > 0 ? neg[i - 1] + 1 : 0;
                neg[i] = pos[i - 1] + 1;
            }
            res = Math.max(res, pos[i]);
        }
        return res;

=======

        int n = nums.length;
        int[] positive = new int[n];
        int[] negative = new int[n];
        if (nums[0] > 0) {
            positive[0] = 1;
        } else if (nums[0] < 0) {
            negative[0] = 1;
        }
        int result = positive[0];
        for (int i = 1; i < n; i++) {
            if (nums[i] > 0) {
                positive[i] = positive[i - 1] + 1;
                if (negative[i - 1] > 0) {
                    negative[i] = negative[i - 1] + 1;
                }
            } else if (nums[i] < 0) {
                negative[i] = positive[i - 1] + 1;
                if (negative[i - 1] > 0) {
                    positive[i] = negative[i - 1] + 1;
                }
            }
            result = Math.max(result, positive[i]);
        }
        return result;

=======

        int n = nums.length;
        int[] pos = new int[n];
        int[] neg = new int[n];
        if(nums[0] > 0) {
            pos[0] = 1;
        } else if(nums[0] < 0) {
            neg[0] = 1;
        }
        int res = pos[0];
        for(int i = 1; i < n; i++) {
            if(nums[i] > 0) {
                pos[i] = pos[i-1] + 1;
                if(neg[i-1] > 0) {
                    neg[i] = neg[i-1] + 1;
                }
            } else if(nums[i] < 0) {
                if(neg[i-1] > 0) {
                    pos[i] = neg[i-1] + 1;
                }
                neg[i] = pos[i-1] + 1;
            }
            res = Math.max(res, pos[i]);
        }
        return res;

=======

        int n = nums.length;
        int[] dp1 = new int[n];
        int[] dp2 = new int[n];
        if (nums[0] > 0) {
            dp1[0] = 1;
        } else if (nums[0] < 0) {
            dp2[0] = 1;
        }
        int max = dp1[0];
        for (int i = 1; i < n; i++) {
            if (nums[i] > 0) {
                dp1[i] = dp1[i - 1] + 1;
                if (dp2[i - 1] > 0) {
                    dp2[i] = dp2[i - 1] + 1;
                }
            } else if (nums[i] < 0) {
                if (dp2[i - 1] > 0) {
                    dp1[i] = dp2[i - 1] + 1;
                }
                dp2[i] = dp1[i - 1] + 1;
            }
            max = Math.max(max, dp1[i]);
        }
        return max;

=======

        int neg = 0, pos = 0, max = 0;
        for (int num : nums) {
            if (num == 0) {
                neg = pos = 0;
            } else if (num > 0) {
                pos++;
                if (neg > 0) {
                    neg++;
                }
            } else {
                int tmp = neg;
                neg = pos + 1;
                pos = tmp > 0 ? tmp + 1 : 0;
            }
            max = Math.max(max, pos);
        }
        return max;

=======

        int n = nums.length;
        int[] dp = new int[n];
        int[] neg = new int[n];
        int res = 0;
        for (int i = 0; i < n; i++) {
            if (nums[i] > 0) {
                dp[i] = i > 0 ? dp[i - 1] + 1 : 1;
                neg[i] = i > 0 ? (neg[i - 1] > 0 ? neg[i - 1] + 1 : 0) : 0;
            } else if (nums[i] < 0) {
                dp[i] = i > 0 ? (neg[i - 1] > 0 ? neg[i - 1] + 1 : 0) : 0;
                neg[i] = i > 0 ? dp[i - 1] + 1 : 1;
            }
            res = Math.max(res, dp[i]);
        }
        return res;

=======

        int n = nums.length;
        int[][] dp = new int[n][2];
        int res = 0;
        for (int i = 0; i < n; i++) {
            int[] cur = dp[i];
            if (nums[i] > 0) {
                cur[0] = i > 0 ? dp[i - 1][0] + 1 : 1;
                cur[1] = i > 0 && dp[i - 1][1] > 0 ? dp[i - 1][1] + 1 : 0;
            } else if (nums[i] < 0) {
                cur[0] = i > 0 && dp[i - 1][1] > 0 ? dp[i - 1][1] + 1 : 0;
                cur[1] = i > 0 ? dp[i - 1][0] + 1 : 1;
            }
            res = Math.max(res, cur[0]);
        }
        return res;

=======

        int max = 0;
        int count = 0;
        int neg = 0;
        int firstNeg = -1;
        int firstNegPos = -1;
        int lastNeg = -1;
        int lastNegPos = -1;
        for (int i = 0; i < nums.length; ++i) {
            if (nums[i] == 0) {
                if (neg % 2 == 0) {
                    max = Math.max(max, count);
                } else {
                    max = Math.max(max, Math.max(count - firstNegPos, lastNegPos));
                }
                count = 0;
                neg = 0;
                firstNeg = -1;
                firstNegPos = -1;
                lastNeg = -1;
                lastNegPos = -1;
            } else {
                ++count;
                if (nums[i] < 0) {
                    ++neg;
                    if (firstNeg == -1) {
                        firstNeg = nums[i];
                        firstNegPos = count;
                    }
                    lastNeg = nums[i];
                    lastNegPos = count;
                }
            }
        }
        if (neg % 2 == 0) {
            max = Math.max(max, count);
        } else {
            max = Math.max(max, Math.max(count - firstNegPos, lastNegPos));
        }
        return max;

=======

        int n = nums.length;
        int max = 0, firstNegIdx = -1, lastNegIdx = -1, lastZeroIdx = -1;
        int cur = 1;
        for (int i = 0; i < n; i++) {
            if (nums[i] == 0) {
                max = Math.max(max, i - lastZeroIdx - 1);
                lastZeroIdx = i;
                firstNegIdx = lastNegIdx = -1;
                cur = 1;
            } else {
                cur *= nums[i];
                if (cur < 0) {
                    if (firstNegIdx == -1) {
                        firstNegIdx = i;
                    }
                    lastNegIdx = i;
                } else {
                    max = Math.max(max, i - lastZeroIdx);
                }
                if (firstNegIdx != -1) {
                    max = Math.max(max, i - firstNegIdx);
                }
            }
        }
        return max;
