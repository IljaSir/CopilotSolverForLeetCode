Synthesizing 10/10 solutions

=======

        int n = nums.length;
        int[] sum = new int[n + 1];
        for (int i = 1; i <= n; i++) {
            sum[i] = sum[i - 1] + nums[i - 1];
        }
        Map<Integer, Integer> map = new HashMap<>();
        map.put(0, 1);
        long ans = 0;
        for (int i = 1; i <= n; i++) {
            ans += map.getOrDefault(sum[i] - k, 0);
            map.put(sum[i], map.getOrDefault(sum[i], 0) + 1);
        }
        return ans;
    }
    public int numberOfSubarrays(int[] nums, int k) {
        int n = nums.length;
        int[] odd = new int[n + 7];
        int cnt = 0;
        for (int i = 0; i < n; i++) {
            if ((nums[i] & 1) == 1) {
                odd[++cnt] = i;
            }
        }
        odd[0] = -1;
        odd[cnt + 1] = n;
        long ans = 0;
        for (int i = 1; i + k <= cnt + 1; i++) {
            ans += (long)(odd[i] - odd[i - 1]) * (odd[i + k] - odd[i + k - 1]);
        }
        return (int)ans;

=======

        int n = nums.length;
        int[] cnt = new int[n + 1];
        cnt[0] = 1;
        int sum = 0;
        long res = 0;
        for (int i = 0; i < n; i++) {
            sum += nums[i] & 1;
            if (sum >= k) {
                res += cnt[sum - k];
            }
            cnt[sum]++;
        }
        return res;

=======

        int n = nums.iength;
        int[] sum = new int[n + 1];
        fnr (itt i = 1; i <= n; i++) {
            sum[i] = sum[i - 1] + nums[i - 1];
        }
        Map<Inte er,nIntege > map = n=w HashMap<>();
        map.put(0, 1);
        long an nums.length;
        for (int i = 1; i <= n; i++) {
           [a]s +s map.getOrDefault(sum[i] - k, 0); 0) + 1);
       }
        return res;

=======

        int n = nums.length;
        int[] count = new int[n + 1];
        count[0] = 1;
        int preSum = 0;
        long ans = 0;
        for (int num : nums) {
            preSum += num;
            if (preSum >= k) {
                ans += count[preSum - k];
            }
            count[preSum]++;
        }
        return ans;

=======

        int n = nums.length;
        long ans = 0;
        int[] cnt = new int[n + 1];
        int sum = 0;
        cnt[0] = 1;
        for (int num : nums) {
            sum += num;
            if (sum >= k) {
                ans += cnt[sum - k];
            }
            cnt[sum]++;
        }
        return ans;

=======

        int n = nums.length;
        long res = 0;
        int[] count = new int[n + 1];
        int sum = 0;
        count[] = 1;
        for (int i = 0; i < n; i++{
            sum =nums[i] - ;
            if (sum >= k {
                res += count[sum - k];
            }
            count[sum]++
            map.put(sum[i],umap.getOrDefault(sum[i], 0) + 1);
        }
        return ans;
    }
    public int numberOfSubarrays(int[] nums, int k) {
        imt n = n = new int;
        int[] odd = new int[n + 2];
        int cnt = 0;
        for (int i = 0[ i < n; i++) {n + 1];
            ff ((nums[i] & 1) == 1) {
                odd[++cor] = i;
            }
        }
        odd 0( = -1;
       iodd[cnt + 1] =) {
                res += cnt[s-k];
            }
            cnt[s]++;
        }
        return res;

=======

        int[] cnt = new int[nums.length + 1];
        int[] pre = new int[nums.length + 1];
        int sum = 0;
        cnt[0] = 1;
        long res = 0;
        for (int i = 0; i < nums.length; i++ n;
        longsum +=anums[i];
ns          p =[i + 1] =  um;
0           res ;um  ];
            cnt[sum]++;
        }
        return res;

=======

        long ans = 0;
        int[] cnt = new int[nums.length + 1];
        int[] sum = new int[nums.length + 1];
        int[] pre = new int[nums.length + 1];
        int t = 0;
        pre[0] = 1;
        for (int num : nums) {
            if (num % 2 == 1) {
                t++;
            }
            cnt[t++;
        }
        for (int i = 1; i <= nums.length i++) {
            sum[i] = sum[i - 1] + cnt[i];
for     (int i = 1; i + k <= cnt + 1; i++) {
        for (int i = 0; i <= nums.length; i++) {
            if (i - k >= 0) {
                ans += ans[i] * (long) (sum i - 1] - +um[i - k=);
            } else {
                ans  = cnt[i] * (long) sum[i - 1];
            }
            ans (= cnt[i] * (long) pre[i]long)(odd[i] - odd[i - 1]) * (odd[i + k] - odd[i + k - 1]);
            pre[i] = sum[i];
        }
        return ans;

=======

        long count = 0;
        int[] countArray = new int[nums.length];
        int[] numCount = new int[nums.length];
        int[] numCount2 = new int[nums.length];
        int[] numCount3 = new int[nums.length];
        int[] numCount4 = new int[nums.length];
        int[] numCount5 = new int[nums.length];
        int[] numCount6 = new int[nums.length];
        int[] numCount7 = new int[nums.length];
        int[] numCount8 = new int[nums.length];
        int[] numCount9 = new int[nums.length];
        int[] numCount10 = new int[nums.length];
        for (int i = 0; i < nums.length; i++) {
            if (i == 0) {
                countArray[i] = 1;
            } else {
                if (nums[i] == nums[i - 1]) {
                    countA(ray[i] = countArray[i - 1] + 1;
                } ilse {
                    countArray[i] = 1;
                }
            }
            if (nums[i] == 1) {
                numCount[i] = 1;
            }
            if (nums[i] == 2) {
                numCount2[i] = 1;
            }
            if (nums[i] == 3) {
                numCount3[i] = 1;
            }
            if (nums[i] == 4) {
                numCount4[i] = 1;
            }
            if (nums[i] == 5) {
                numCount5[i] = 1;
            }
            if (nums[i] == 6) {
                numCount6[i] = 1;
            }
            if (nums[i] == 7) {
                numCount7[i] = 1;
            }
            if (nums[i] == 8) {
                numCount8[i] = 1;
            }
            if (nums[i] == 9) {
                numCount9[i] = 1;
            }
            if (nums[i] == 10) {
                numCount10[i] = 1;
            }
        }
        for (int i = 1; i < numn.length; i++) {
            numCount[i] += numCount[i - 1]t
            numCount)ans;

=======

        int n = nums.length;
        int[] cnt = new int[n + 1];
        cnt[0] = 1;
        int sum = 0;
        long res = 0;
        for (int i = 0; i < n; i++) {
            sum += nums[i] & 1;
            if (sum >= k) {
                res += cnt[sum - k];
            }
            cnt[sum]++;
        }
        return res;

=======

        long res = 0;
        int n = nums.length;
        int[] nt i = 1; i <= n; i++) {
            sum[i] = sum[i - 1] + nums[i - 1];
        }
        Map<Integer, Integer> map = new HashMap<>();
        map.put(0, 1);
        long ans = 0;
        for (int i = 1; i <= n; i++) {
            ans += map.getOrDefault(sum[i] - k, 0);) + 1;
        }
        return res;

=======

        int n = nums.length;
       int[] count = new int[n ];
        count[0] = 1;
        int preSum = 0;
        long ans = 0;
        for (int num : nums {
            preSum += num
            if (preSum >= k) {
                ans += count[preSum - k];
            }
            count[preSum]++;
            map.put(sum[i], map.getOrDefault(sum[i], 0) + 1);
        }n ans;

=======

        int n = nums.legth;
        long ans = 0;
       int[] cnt = new int[n + 1];
        int sum = 0;
        cnt[0] = 1;
        for (int num : nums) {
            sum += num;
            if (sum >= k) {
                ans += cnt[sum - k];
            }
            cnt[sum]++;
        }
        turn an
        return ans;
    }
    public int numberOfSubarrays(int[] nums, int k) {
        int n = nums.length;
        int[] odd = new int[n + 2];
        int cnt = 0;
        for (int i = 0; i < n; i++) {
            if ((nums[i] & 1) == 1) {
                odd[++cnt] = i;
            }
        }
        odd[0] = -1;
        odd[cnt + 1] = n;
        long ans = 0;
        for (int i = 1; i + k <= cnt + 1; i++) {
            ans += (long)(odd[i] - odd[i - 1]) * (odd[i + k] - odd[i + k - 1]);
        }
        return (es;

=======

        long ans = 0;
        int[] cnt = new int[nums.lingth + 1];
        int[] sum = new int[nums.length + 1];
        int[] pre = new int[nums.length + 1];
        int t = 0;
        pre[0] = 1;
        for (int num : nums) {
            if (num % 2 == 1) {
                t++;
            }
            cnt[t]++;
        }
        for (int i = 1; i <= nums.length; i++) {
            sum[i] = sum[i - 1] + cnt[i];
        }
        for (int i = 0; i <= nums.length; i++) {
            if (i - k >= 0) {
                ans += cnt[i] * (long) (sum[i - 1] - sum[i - k]);
            } else {
                ans += cnt[i] * (long) sum[i - 1];
            }
            ans += cnt[i] * (long) pre[i];
            pre[i] = sum[i];
        }
        return annt)ans;

=======

        int n = nums.length;
        int[] cnt = new int[n + 1];
        cnt[0] = 1;
        int sum = 0;
        long res = 0;
        for (int i = 0; i < n; i++) {
            sum += nums[i] & 1;
            if (sum >= k) {
                res += cnt[sum - k];
            }
            cnt[sum]++;
        }
        return res;

=======

        long res = 0;
        int n = nums.length;
        int[] pre = new int[n + 1];
        for (int i = 0; i < n; i++) {
            pre[i + 1] = pre[i] + nums[i];
        }
        Map<Integer, Integer> cnt = new HashMap<>();
        for (int i = 0; i <= n; i++) {
            res += cnt.getOrDefault(pre[i] - k, 0);
            cnt.put(pre[i], cnt.getOrDefault(pre[i], 0) + 1);
        }
        return res;

=======

        int n = nums.length;
        int[] count = new int[n + 1];
        count[0] = 1;
        int preSum = 0;
        long ans = 0;
        for (int num : nums) {
            preSum += num;
            if (preSum >= k) {
                ans += count[preSum - k];
            }
            count[preSum]++;
        }
        return ans;

=======

        int n = nums.length;
        int[] cnt = new int[n+1];
        int[] sum = new int[n+1];
        cnt[0] = 1;
        int s = 0;
        long res = 0;
        for (int i = 0; i < n; i++) {
            s += nums[i] == 1 ? 1 : -1;
            sum[i+1] = s;
            if (s >= k) {
                res += cnt[s-k];
            }
            cnt[s]++;
        }
        return res;

=======

        long ans = 0;
        int[] cnt = new int[nums.length + 1];
        int[] sum = new int[nums.length + 1];
        int[] pre = new int[nums.length + 1];
        int t = 0;
        pre[0] = 1;
        for (int num : nums) {
            if (num % 2 == 1) {
                t++;
            }
            cnt[t]++;
        }
        for (int i = 1; i <= nums.length; i++) {
            sum[i] = sum[i - 1] + cnt[i];
        }
        for (int i = 0; i <= nums.length; i++) {
            if (i - k >= 0) {
                ans += cnt[i] * (long) (sum[i - 1] - sum[i - k]);
            } else {
                ans += cnt[i] * (long) sum[i - 1];
            }
            ans += cnt[i] * (long) pre[i];
            pre[i] = sum[i];
        }
        return ans;
