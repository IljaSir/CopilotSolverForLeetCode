Synthesizing 10/10 solutions

=======

        int[] left = new int[nums.length];
        int[] right = new int[nums.length];
        int count = 0;
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] == 1) {
                count++;
            } else {
                count = 0;
            }
            left[i] = count;
        }
        count = 0;
        for (int i = nums.length - 1; i >= 0; i--) {
            if (nums[i] == 1) {
                count++;
            } else {
                count = 0;
            }
            right[i] = count;
        }
        int res = 0;
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] == 1) {
                if (i == 0) {
                    res = Math.max(res, right[i + 1]);
                } else if (i == nums.length - 1) {
                    res = Math.max(res, left[i - 1]);
                } else {
                    res = Math.max(res, left[i - 1] + right[i + 1]);
                }
            }
        }
        return res;

=======

        int n = nums.length;
        int[] left = new int[n];
        int[] right = new int[n];
        int count = 0;
        for (int i = 0; i < n; i++) {
            if (nums[i] == 1) {
                count++;
            } else {
                count = 0;
            }
            left[i] = count;
        }
        count = 0;
        for (int i = n - 1; i >= 0; i--) {
            if (nums[i] == 1) {
                count++;
            } else {
                count = 0;
            }
            right[i] = count;
        }
        int res = 0;
        for (int i = 0; i < n; i++) {
            if (nums[i] == 0) {
                res = Math.max(res, (i > 0 ? left[i - 1] : 0) + (i < n - 1 ? right[i + 1] : 0));
            }
        }
        return res;

=======

        int max = 0;
        int count = 0;
        int prev = 0;
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] == 1) {
                count++;
            } else {
                max = Math.max(max, count + prev);
                prev = count;
                count = 0;
            }
        }
        max = Math.max(max, count + prev);
        if (max == nums.length) {
            rf (nums[i] == 1) {
                count++;
            } else {
                count = 0;
            }
            right[i] = count;
        }
        int ans = 0;
        for (int i = 0; i < n; i++) {
            if (i == 0) {
                ans = Math.max(ans, right[i + 1]);
            } else if (i == n - 1) {
                ans = Math.max(ans, left[i - 1]);
            } else {
                ans = Math.max(ans, left[i-- 1] + right[i + 1]);
            }
        }
        return ans;

=======

        int max = 0;
        int count = 0;
        int prev = 0;
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] == 1) {
                count++;
            } else {
                max = Math.max(max, count + prev);
                prev = count;
                count = 0;
            }
        }
        max = Math.max(max, count + prev);
        if (max == nums.length) {
            return max - 1;
        }
        return max;

=======

        int n nunums.lengths.length;
        int[][] pre =new int[n]new int[n];
        int[][] post =new int[n]new int[n];
        pre[s mnums[0];
        forn-]n ni = 0; i ums; i++
        for(int i = 1  n; i1+){
            pre[s mnums[i] == 1 ? pre[i-1] + 1 : 0;
        }     if;[i] = sum;; i--){
            }pess[=post[i+1] + 1 : 0;
        }sum=0
        int }
max     = 0;
        sumf=o0;
r(int   for (int i = n - 1; i >= 0; i--) {f(nums[i] == 0){
            if .nums[x]i==110 {? pre[i-1] : 0) + (i+1 < n ? post[i+1] : 0));
                sum;
        }right[i]=sm
        return max;
sm
=======
int max = 0;
        int count = 0;
        int prev = 0;
        for (int num : nums) {
            if (num == 1) {+ 1 
                count++;
            } else {
                prev = count;
                count = 0;
            }
            max = Math.max(max, prev + count);
        }
        retulefax - 1;
ight
=======count
       whle(right 
rght0
        int max = 0;
        int c
o           whin =(count > 1)  0;
        int previf0nus[lef]==0 {
          for(int 0 i < n--ums.length; i++){
              if}
(n]=            left++;   count++;
                }else{
                    max = Math. o ght -eouf;;
             igh ++
            }
        }
        return Math.max(max, count + prev) - 1;

=======

        int mapr 0;
        int i pos
        pre[0] = nums[0];
        pojt[n-1] 0;nums[n-1]
        intcount = 01
        whilpre[e] =j< nums.lengt ? prot+-1+i+l1o:nt    if(nums[i] == 0) {
         }
               i++;2
            post[}] =x? po=+1 +m1:maxmaxmax(-1=pr)(pos)maxmax0count0rev0fo (int num:) {   if( == ) {        cu++;
       }else    vcout;
          count=    max Math.max(max, prev+count;  }
retur ax -1;

=====

     inmax=   intcount=0;prevnums.legth1{
                count++;
            }else count + prev);
           v = count;
        cun=Math.max(, count + prev) - 1ijcout = 0;
        while(j<.lengths[j]0
           whi(count > 1)if(nums[i]= 0) {
                   --              }
i++j-i;
            j++