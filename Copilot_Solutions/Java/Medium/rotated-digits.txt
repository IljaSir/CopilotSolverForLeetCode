Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int count = 0;
        for (int i = 1; i <= n; i++) {
            if (isValid(i)) {
                count++;
            }
        }
        return count;
    }
    
    private boolean isValid(int n) {
        boolean valid = false;
        while (n > 0) {
            int digit = n % 10;
            if (digit == 3 || digit == 4 || digit == 7) {
                return false;
            }
            if (digit == 2 || digit == 5 || digit == 6 || digit == 9) {
                valid = true;
            }
            n /= 10;
        }
        return valid;

=======

        int count = 0;
        for (int i = 1; i <= n; i++) {
            if (isGood(i)) {
                count++;
            }
        }
        return count;
    }
    
    private boolean isGood(int n) {
        boolean isGood = false;
        while (n > 0) {
            int digit = n % 10;
            if (digit == 3 || digit == 4 || digit == 7) {
                return false;
            }
            if (digit == 2 || digit == 5 || digit == 6 || digit == 9) {
                isGood = true;
            }
            n /= 10;
        }
        return isGood;

=======

        int count = 0;
        for (int i = 1; i <= n; i++) {
            if (isGood(i)) {
                count++;
            }
        }
        return count;
    }

    private boolean isGood(int n) {
        boolean isGood = false;
        while (n > 0) {
            int digit = n % 10;
            if (digit == 3 || digit == 4 || digit == 7) {
                return false;
            } else if (digit == 2 || digit == 5 || digit == 6 || digit == 9) {
                isGood = true;
            }
            n /= 10;
        }
        return isGood;

=======

        int count = 0;
        for (int i = 1; i <= n; i++) {
            String s = String.valueOf(i);
            if (s.contains("3") || s.contains("4") || s.contains("7")) {
                continue;
            }
            if (s.contains("2") || s.contains("5") || s.contains("6") || s.contains("9")) {
                count++;
            }
        }
        return count;

=======

        int count = 0;
        for (int i = 1; i <= n; i++) {
            if (isValid(i)) {
                count++;
            }
        }
        return count;
    }
    
    public boolean isValid(int n) {
        boolean valid = false;
        while (n > 0) {
            int digit = n % 10;
            if (digit == 3 || digit == 4 || digit == 7) {
                return false;
            }
            if (digit == 2 || digit == 5 || digit == 6 || digit == 9) {
                valid = true;
            }
            n /= 10;
        }
        return valid;

=======

        int result = 0;
        for (int i = 1; i <= n; i++) {
            if (isValid(i)) {
                result++;
            }
        }
        return result;
    }
    
    private boolean isValid(int n) {
        boolean valid = false;
        while (n > 0) {
            int lastDigit = n % 10;
            if (lastDigit == 3 || lastDigit == 4 || lastDigit == 7) {
                return false;
            }
            if (lastDigit == 2 || lastDigit == 5 || lastDigit == 6 || lastDigit == 9) {
                valid = true;
            }
            n /= 10;
        }
        return valid;

=======

        int count = 0;
        for (int i = 1; i <= n; i++) {
            if (isValid(i)) {
                count++;
            }
        }
        return count;
    }

    private boolean isValid(int x) {
        boolean valid = false;
        while (x > 0) {
            int d = x % 10;
            if (d == 3 || d == 4 || d == 7) {
                return false;
            }
            if (d == 2 || d == 5 || d == 6 || d == 9) {
                valid = true;
            }
            x /= 10;
        }
        return valid;

=======

        int count = 0;
        for(int i=1; i<=n; i++){
            if(isGood(i)){
                count++;
            }
        }
        return count;
    }
    
    private boolean isGood(int n){
        boolean valid = false;
        while(n > 0){
            int digit = n % 10;
            if(digit == 3 || digit == 4 || digit == 7){
                return false;
            }
            if(digit == 2 || digit == 5 || digit == 6 || digit == 9){
                valid = true;
            }
            n /= 10;
        }
        return valid;

=======

        int count = 0;
        for (int i = 1; i <= n; i++) {
            int temp = i;
            int digit = 0;
            boolean isGood = false;
            while (temp > 0) {
                digit = temp % 10;
                if (digit == 3 || digit == 4 || digit == 7) {
                    isGood = false;
                    break;
                } else if (digit == 2 || digit == 5 || digit == 6 || digit == 9) {
                    isGood = true;
                }
                temp /= 10;
            }
            if (isGood) {
                count++;
            }
        }
        return count;
