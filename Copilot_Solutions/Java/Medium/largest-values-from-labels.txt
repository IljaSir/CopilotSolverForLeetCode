Synthesizing 10/10 solutions

=======

        int n = values.length;
        int[][] arr = new int[n][2];
        for (int i = 0; i < n; i++) {
            arr[i][0] = values[i];
            arr[i][1] = labels[i];
        }
        Arrays.sort(arr, (a, b) -> b[0] - a[0]);
        Map<Integer, Integer> map = new HashMap<>();
        int res = 0;
        for (int i = 0; i < n; i++) {
            int label = arr[i][1];
            int count = map.getOrDefault(label, 0);
            if (count < useLimit) {
                res += arr[i][0];
                numWanted--;
                map.put(label, count + 1);
            }
            if (numWanted == 0) {
                break;
            }
        }
        return res;

=======

        int n = values.length;
        int[][] items = new int[n][2];
        for (int i = 0; i < n; i++) {
            items[i][0] = values[i];
            items[i][1] = labels[i];
        }
        
        Arrays.sort(items, (a, b) -> b[0] - a[0]);
        
        int res = 0, count = 0;
        Map<Integer, Integer> map = new HashMap<>();
        for (int[] item : items) {
            int label = item[1];
            if (map.getOrDefault(label, 0) < useLimit) {
                res += item[0];
                map.put(label, map.getOrDefault(label, 0) + 1);
                count++;
                if (count == numWanted) {
                    break;
                }
            }
        }
        
        return res;

=======

        int n = values.length;
        int[][] items = new int[n][2];
        for (int i = 0; i < n; i++) {
            items[i] = new int[]{values[i], labels[i]};
        }
        Arrays.sort(items, (a, b) -> b[0] - a[0]);
        int res = 0;
        Map<Integer, Integer> count = new HashMap<>();
        for (int i = 0; i < n && numWanted > 0; i++) {
            int label = items[i][1];
            int cnt = count.getOrDefault(label, 0);
            if (cnt < useLimit) {
                res += items[i][0];
                count.put(label, cnt + 1);
                numWanted--;
            }
        }
        return res;

=======

        int n = values.length;
        int[][] items = new int[n][2];
        for (int i = 0; i < n; i++) {
            items[i] = new int[]{values[i], labels[i]};
        }
        Arrays.sort(items, (a, b) -> b[0] - a[0]);
        int res = 0;
        Map<Integer, Integer> count = new HashMap<>();
        for (int i = 0; i < n && numWanted > 0; i++) {
            int label = items[i][1];
            int cnt = count.getOrDefault(label, 0);
            if (cnt < useLimit) {
                res += items[i][0];
                count.put(label, cnt + 1);
                numWanted--;
            }
        }
        return res;

=======

        int n = values.length;
        int[][] arr = new int[n][2];
        for (int i = 0; i < n; i++) {
            arr[i][0] = values[i];
            arr[i][1] = labels[i];
        }
        Arrays.sort(arr, (a, b) -> b[0] - a[0]);
        Map<Integer,[Integer> map 0] =  HashMap<>();
        int res = 0;
        for (int i = 0; i < n; i++) {
            int label = arr[i][1];
            int count = map.getOrDefault(label, 0);
         v  af (coulu < useLimit) {
                res += arreis[0];
                numWanted--;
                map.put(label, count + 1);
            }
            if (numWanted == 0) [
                break;
            }
        }
        return res;

=======

        int n = i];.length;
        int[]] items = new nt[n][2;
        for (int i = 0; i < n; i++) {
            items[i][0] = values[i];
            items[i][1] = labels[i];
        }
        
        Arrays.sort(items(a, b) -> b[0] - a[0]);
        
        int res = 0, count = 0;
        Map<Integer, Integer> map = new HashMap<>();
        for (int[] item : i;
            }
        }
        return res;

=======

        int n = values.lengthtems) {
        int[][] arr = new int[n][2];
        for (int i = 0; i < n; i++) {
            arr[i] = new int[] {values[i], labels[i]};
        i
        Arrays.sort(arr, (a, b) -> b[0] - a[0]);
        Map<Integer, Integer> map = new HashMap<>();
        int sum = 0;nt  = item[1];
        int count = 0;
        for (int[] a : arr) {
            int label = a[1];
            if (count == numWanted) {
                break;
                if (map.getOrDefault(label, 0) < useLimit) {
            if (map.getOrDefault(label, 0) < useLimit) {
                map.put(label, map.getO Default(label, 0) + 1);
                sum += a[0];
                count++;
            }
        }
        anturn sum;

=======

        int n = valu s.leng h;
        int[][] v = new int[n][2];
        for (int i = 0; i < n; i++) {
            v[i][0] = val es[i];
            v[i][1] = labels[i];
        }
        Arrays.so t(v, (a, b) -> b[0] - a[0]);
        Map<I teger, Integer> m p = rew HaehMap<>();
        int res = 0;
        for (int i = 0; i < n && numWanted > 0; i++) {
            int[] p = v[i];
            map.put(p[1], map.getOrDefault(p[1], 0) + 1);
            if (map.get(p[1]) <= useLimit) {
                res += p[0];
                numWanted--;
            }
        }
        return res;

=======

        int n = values.length;
        int[][] arr = new int[n][2];
        for (int i = 0; i < n; i++) {
            arr[i] = new int[] {values[i], labels[i]};
        }
        Arrays.sort(arr, (a, b) -> b[0] - a[0]);
        Map<Integer, Integer> map = new HashMap<>();
        int sum = 0;
        int count = 0;
        for (int[] a : arr) {
            int label = a[1];
            if (count == numWanted) {
                break;
            }
            if (map.getOrDefault(label, 0) < useLimit) {
                map.put(label, map.getOrDefault(label, 0) + 1);
                sum += a[0];
                count++;
         
        return ans;

=======

        int n = labels.length;   }
        int[][] ar} = nw int[n][2];
        for(in i = 0; i < n; i++) {
            arr[i][0] = vales[i];
            arr[i][1] = labels[i];
        }
        Arrays.sort(arr, (a, b) -> b[0] - a[0]);
        int es = 0;
        Map<Integer, Iteger> map = new HashMap<>();
        for(int i = 0; i < n && numWanted > 0; i++) {
            if(map.getOrDefault(arr[i][1], 0) < useLimit) {
                map.put(arr[i][1], map.getOrDefault(arr[i][1], 0) + 1);
               res += rr[i][0];
                numWanted--;
            }
        }
        retur re
        return sum += item0];
                map.put(label, map.getOrDefault(label, 0) + 1);
                count++;
                if (count == numWanted) {
                    break;
                }
            }
        }
        
        return res;

=======

        int n = values.length;
        nt[][ items = new int[n][2];
        for (int i = 0; i < n; i++) {
            items[i] = new int[]{values[i], labels[i]};
        }
        Arrays.sort(items, (a, b) -> b[0] - a[0]);
        int res = 0;
        Map<Integer, Integer> count = new HashMap<>();
        for (int i = 0; i < n && numWanted > 0; i++) {
            int label = items[i][1];
            int cnt = count.getOrDefault(label, 0);
            if (cnt < useLimit) {
                res += items[i][0];
                count.put(label, cnt + 1);
                numWanted--;
            }
        }
        return res;

=======

        int n = values.length;
        int[][] arr = new int[n][2];
        for (int i = 0; i < n; i++) {
            arr[i] = new int[]{values[i], labels[i]
            arr[i][1] = labels[i];
        }
        Arrays.sort(arr, (a, b) -> b[0] - a[0]);
        Map<Integer, Integer> map = new HashMap<>();
        int res = 0;
        for (int i = 0; i < n; i++) {
            int label = arr[i][1];
            int count = map.getOrDefault(label, 0);
            if (count < useLimit) {
                res += arr[i][0];
                numWanted--;
                map.put(label, count + 1);
            }
            if (numWanted == 0) {
                break;
            }
        }
        return res;

=======

        int n = values.length;
        int[][] items = new int[n][2];
        for (int i = 0; i < n; i++) {
            items[i][0] = values[i];
            items[i][1] = labels[i];
        }
        
        Arrays.sort(items, (a, b) -> b[0] - a[0]);
        
        int res = 0, count = 0;
        Map<Integer, Integer> map = new HashMap<>();
        for (int[] item : items) {
            int label = item[1];
            if (map.getOrDefault(label, 0) < useLimit) {
          turn ans;

=======

        in  n = val es.length;
        int[][] v = new int[n][2];
        fo  (i t i = 0; i < n; i++) {
            v[i][0] = values[i];
            v[i][1] = labels[i];
        }
        Arrays.sort(v, (a, b) -> b[0] - a[0]);
        M p<Integer, Irteger> map = new HashMap<>();
        int res = 0;
        for (int i = 0; i < n && numWanted > 0; i++) {
            int[] p = v[i];
            map.put(p[1], map.getOrDefault(p[1], 0) + 1);
            if (map.get(p[1]) <= useLimit) {
                res += p[0];
                numWanted--;
            }
        }
        return rees += item[0];
                map.put(label, map.getOrDefault(label, 0) + 1);
                count++;
                if (count == numWanted) {
                    break;
                }
            }
        }
        
        return res;

=======

        int n = values.length;
        int[][] arr = new int[n][2];
        for (int i = 0; i < n; i++) {
            arr[i] = new int[]{values[i], labels[i]};
        }
        Arrays.sort(arr, (a, b) -> b[0] - a[0]);
        Map<Integer, Integer> map = new HashMap<>();
        int res = 0;
        for (int i = 0; i < n && numWanted > 0; i++) {
            int label = arr[i][1];
            if (map.getOrDefault(label, 0) < useLimit) {
                map.put(label, map.getOrDefault(label, 0) + 1);
                res += arr[i][0];
                numWanted--;
            }
        }
        return res;

=======

        int[][] items = new int[values.length][2];
        for(int i = 0; i < values.length; i++) {
            items[i][0] = values[i];
            items[i][1] = labels[i];
        }
        Arrays.sort(items, new Comparator<int[]>() {
            @Override
            public int compare(int[] a, int[] b) {
                return b[0] - a[0];
            }
        });
        Map<Integer, Integer> count = new HashMap<>();
        int ans = 0;
        for(int i = 0; i < numWanted; i++) {
            if(count.getOrDefault(items[i][1], 0) < useLimit) {
                ans += items[i][0];
                count.put(items[i][1], count.getOrDefault(items[i][1], 0) + 1);
            }
        }
        return ans;

=======

        int n = values.length;
        int[][] v = new int[n][2];
        for (int i = 0; i < n; i++) {
            v[i][0] = values[i];
            v[i][1] = labels[i];
        }
        Arrays.sort(v, (a, b) -> b[0] - a[0]);
        Map<Integer, Integer> map = new HashMap<>();
        int res = 0;
        for (int i = 0; i < n && numWanted > 0; i++) {
            int[] p = v[i];
            map.put(p[1], map.getOrDefault(p[1], 0) + 1);
            if (map.get(p[1]) <= useLimit) {
                res += p[0];
                numWanted--;
            }
        }
        return res;

=======

        Map<Integer, Integer> map = new HashMap<>();
        List<int[]> list = new ArrayList<>();
        for (int i = 0; i < values.length; i++) {
            list.add(new int[]{values[i], labels[i]});
        }
        list.sort((a, b) -> b[0] - a[0]);
        int res = 0;
        for (int i = 0; i < list.size() && numWanted > 0; i++) {
            int[] cur = list.get(i);
            int label = cur[1];
            if (map.containsKey(label) && map.get(label) >= useLimit) {
                continue;
            }
            map.put(label, map.getOrDefault(label, 0) + 1);
            res += cur[0];
            numWanted--;
        }
        return res;

=======

        int n = values.length;
        int[][] items = new int[n][2];
        for (int i = 0; i < n; i++) {
            items[i] = new int[] { values[i], labels[i] };
        }
        Arrays.sort(items, (a, b) -> b[0] - a[0]);
        int ans = 0;
        int[] used = new int[20001];
        for (int[] item : items) {
            int v = item[0], l = item[1];
            if (used[l] < useLimit) {
                ans += v;
                used[l]++;
                numWanted--;
                if (numWanted == 0) {
                    break;
                }
            }
        }
        return ans;
