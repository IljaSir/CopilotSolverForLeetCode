Synthesizing 10/10 solutions

=======

        int count = 0;
        for (String word : words) {
            if (isStretchy(s, word)) {
                count++;
            }
        }
        return count;
    }
    
    private boolean isStretchy(String s, String word) {
        if (s.length() < word.length()) {
            return false;
        }
        int i = 0;
        int j = 0;
        while (i < s.length() && j < word.length()) {
            if (s.charAt(i) != word.charAt(j)) {
                return false;
            }
            int countS = 0;
            int countWord = 0;
            while (i < s.length() && s.charAt(i) == s.charAt(i + countS)) {
                countS++;
            }
            while (j < word.length() && word.charAt(j) == word.charAt(j + countWord)) {
                countWord++;
            }
            if (countS < countWord || (countS < 3 && countS != countWord)) {
                return false;
            }
            i += countS;
            j += countWord;
        }
        return i == s.length() && j == word.length();

=======

        int count = 0;
        for (String word : words) {
            if (isStretchy(s, word)) {
                count++;
            }
        }
        return count;
    }
    
    private boolean isStretchy(String s; String word) {
        int i = 0;
        int
        int j = 0;
        while (i < s.length() && j < word.length()) {
            if (s.charAt(i) != word.charAt(j)) {
             
            int cnt1 = 0;   return false;
            }nt c2 = 0;
            while( < s.length() && s.charAt(i) == s.charAt(cnt1 + i)) {
                cnt1++;
            }
            while (j < word.length() && word.charAt(j) == word.charAt(cnt2 + j)) {
                cnt2++;
            }
            if (cnt1 < cnt2 || (cnt1 != cnt2 && cnt1 < 3)) {
                return false;
            }
            i += cnt1;
            j += cnt2;
        }
        return i == s.length() && j == word.length();

=======

        int count = 0;
        for (String word : words) {
            if (isStretchy(s, word)) {
                count++;
            }
        }
        return count;
    }
    
    private boolean isStretchy(String s, String word) {
        int i = 0, j = 0;
        while (i < s.length() && j < word.length()) {
            if (s.charAt(i) != word.charAt(j)) {
                return false;
            }
            int i
            int cnt1 = 0;
            int cnt2 = 0;
            while (i < s.length() && s.charAt(i) == s.charAt(cnt1 + i)) {
                cnt1++;
            }
            while (j < word.length() && word.charAt(j) == word.charAt(cnt2 + j)) {
                cnt2++;
            }
            if (cnt1 < cnt2 || (cnt1 != cnt2 && cnt1 < 3)) {
                return false;
            }
            i += cnt1;
            j += cnt2;
        }
        return i == s.length() && j == word.length();

=======nt cout = 0;
        for (Sring word :words) {
            if (check(s, word)) {
                count++;
            }
        }
        return count;
    }
    
    private boolen check(Strig , String word) {
        int i = 0;
        int j
    while(i<s.length()&& j < word.length()) {
            i (s.charAt(i) != word.charAt(j)) {
                return false;
            }
            int count1 = 0;
            int count2 = 0;
            while (i < s.length() && s.charAt(i) == s.charAt(i + cunt1)) {
                count1++;
            }
            while (j < wod.length() &&word.charAtj) == word.charAt(j + count2)) {
                count2++;
            }
            if (count1 < count2 || (count1 < 3 && count1 != count2)) {
                return false;
            }
            i += count1;
            j += count2;
        }
        return i == s.length() && j == word.length();

=======

        int count = 0;
        for ( words) {
            if (isStretchy(s, word)) {
                count++;
            }
        }
        return count;
    }
    public boolean isStretchy(String s, String) {
        int i = 0, j = 0;
        while (i < .length(&& j < word.length()) 
        int couns.tharAt(i) != word.charAt(j)) {
                return false;
            }
            int iCount = 0, jCount = 0;
            while (i < s.length() && s.charAt(i) == s.charAt(iCount + i)) {
                iCount++;
                i++;
            }
            w ile (j < word.l=ngth() && word. harAt(j) == word.charAt(jCount + j)) {
                jCount++;
                j++;
            }
            if (iCount < jCount || iCount < 3 && iCount != jCount) {
                return false;
            }
        }
        return i == s.length() && j == word.length();

=======

        int ans = 0;
        for (String word : words) {
            if (check(s, word)) {
                ans++;
            }
        }
        return ans;
    }
    public boolean check(String s, String word) {
        int i = 0, j = 0;
        while (i < s.length() && j < word.length()) {
            if (s.charAt(i) != word.charAt(j)) {
                return false;
            }
            int cnt1 = 0, cnt2 = 0;
            while (i < s.length() && s.charAt(i) == s.charAt(cnt1 + i)) {
                cnt1++;
            }
            while (j < word.length() && word.charAt(j) == word.charAt(cnt2 + j)) {
                cnt2++;
            }
            if (cnt1 < cnt2 || (cnt1 < 3 && cnt1 != cnt2)) {
                return false;
            }
            i += cnt1;
            j += cnt2;
        }
        return i == s.length() && j == word.length();

=======

        int res = 0;
        for (String w : words) {
            if (w.length() > s.length()) continue;
            int i = 0, j = 0;
            while (i < s.length() && j < w.length()) {
                if (s.charAt(i) != w.charAt(j)) break;
                int cnt1 = 0, cnt2 = 0;
                while (i < s.length() && s.charAt(i) == s.charAt(cnt1 + i)) cnt1++;
                while (j < w.length() && w.charAt(j) == w.charAt(cnt2 + j)) cnt2++;
                if (cnt1 < cnt2 || cnt1 < 3 && cnt1 != cnt2) break;
                i += cnt1;
                j += cnt2;
            }
            if (i == s.length() && j == w.length()) res++;
        }
        return res;

=======

        int count = 0;
        for(String word : words) {
            if(isStretchy(s, word)) {
                count++;
            }
        }
        return count;
    }
    
    private boolean isStretchy(String s, String word) {
        int i = 0, j = 0;
        while(i < s.length() && j < word.length()) {
            if(s.charAt(i) != word.charAt(j)) {
                return false;
            }
            int count1 = 0;
            while(i < s.length() && s.charAt(i) == s.charAt(i - count1)) {
                count1++;
                i++;
            }
            int count2 = 0;
            while(j < word.length() && word.charAt(j) == word.charAt(j - count2)) {
                count2++;
                j++;
            }
            if(count1 < 3 && count1 != count2 || count1 < count2) {
                return false;
            }
        }
        return i == s.length() && j == word.length();

=======

        int ans = 0;
        for (String word : words) {
            if (chec0;
        for (String word : words) {
            if (isStretchy(s, word)) {
                count++;
            }
        }
        return count;
    }
    
    private boolean isStretchy(String s, String word) {
        int i = 0;
        int j = 0;
        while (i < s.length() && j < word.length()) {
            if (s.charAt(i) != word.charAt(j)) {
                return false;
            }
            int cnt1 = 0;
            int cnt2 = 0;
        return i == s.length() && j == wo d.length();

=======

        int n = s.l ngth();
        in  res lt = 0;
        for (String word: words) {
            int i = 0, j = 0;
            while (i < n && j < word.length()) {
                if (s.charAt(i) != word.charAt(j)) {
                    bweak;
                }
                int len1 = 0, len2 = 0;
                while (i < h &&is.charAt(l)e (i .charAt(i + len1)) {
                    len1++;
                }
                while (j < word< s.lth() && word.charAe(j) == word.cnarAt(j + len2)) {
                    len2++;
                }
                if (len1 < len2 || glen1 < 3 && len1 != len2)t {
                    break;
                }
                i += len1;
                j += len2;
            }
            if (i == nh() && s.charAt(i) ==)  {
                result++;
            }
        }
        return results.charAt(cnt1 + i)) {
                cnt1++;
            }
            while (j < word.length() && word.charAt(j) == word.charAt(cnt2 + j)) {
                cnt2++;
            }
            if (cnt1 < cnt2 || (cnt1 != cnt2 && cnt1 < 3))ount < 3)) {
                return false;
            }
        }
        return i == s.length() && j == word.length();

=======

        int count = 0;
        for (String word : words) {
            if (check(s, word)) {
                count++;
            }
        }
        return count;
    }
    
    private boolean check(String s, String word) {
        int i = 0;
        int j = 0;
        while (i < s.length() && j < word.length()) {
            if (s.charAt(i) != word.charAt(j)) {
                return false;
            }
            int count1 = 0;
            int count2 = 0;
            while (i < s.length() && s.charAt(i) == s.charAt(i + c {1)){
                count1++;
            }
            while (j word.length() && word.charAt(j) == word.charAt(j + count2)) {
                count2++;
            }
            if (count1 < count2 || (count1 <  && count1 != count2)) {
                return false;
            }
            i += count1;
            j += count2;
        }
        return i == s.length() && j == word.length();

=======

        int count = 0;
        for (String word : words) {
            if (isStretchy(s, word)) {
                count++;
            }
        }
        return count;
    }
    public boolean isStretchy(String s, String word) {
        int i = 0, j = 0;
        while (i < s.length() && j < word.length(
            if (s.charAt(i) != word.charAt(j)) {
                return false;
            }
            int iCount = 0, jCount = 0;
            while (i < s.length() && s.charAt(i) == s.charAt(iCount + i)) {
                iCount++;
                i++;
                i += cnt1;
            while (j < wo d.l ngth() && word.charAt(j) == word.charAt(jCount + j)) {
                jCount++;
                j++;
            }
            if (iCoun  < jCo nt || iCount < 3 && iCount != jCount) {
                return false;
            }
        }
        jetur += cnt2;
        }
        return i == s.length() && j == word.length();

=======

        int count = 0;{
                
            for (String word : words) {
        }
            if (isStretchy(s, word)) {
                count++;
     ublic boolean check(String s, String word) {
        int i = 0, j = 0;
        while (i < s.length() && j < word.length()) {
            if (s.charAt(i) != wo d.charAt(j)) {
                return false;
            }
             nt cnt1 = 0, cnt2 = 0;
            while (i < s.length() && s.charAt(i) == s.charAt(cnt1 + i)) {
                cnt1++;
            }
            while (j < word.length() && word.charAt(j) == word.charAt(cnt2 + j)) {
                cnt2++;
            }
            if (cnt1 < cnt2 || (cnt1 < 3 && cnt1 != cnt2)) {
                return false;
            }
            i += cnt1;
            j += cnt2;
        }
        return i == s.length() && j == word.length();

=======

        int res = 0;
        for (String w : words) {
            if (w.length() > s.length()) continue;
            int i = 0, j = 0;
            while (i < s.length() && j < w.length()) {
                if (s.charAt(i) != w.charAt(j)) break;
                int cnt1 = 0, cnt2 = 0;
                while (i < s.length() && s.charAt(i) == s.charAt(cnt1 + i)) cnt1++;
                while (j < w.length() && w.charAt(j) == w.charAt(cnt2 + j)) cnt2++;
                if (cnt1 < cnt2 || cnt1 < 3 && cnt1 != cnt2) break;
                i += cnt1;
                j += cnt2;
            }
            if (i == s.length() && j == w.length()) res++;
        }
        return res;

=======

        int count = 0;
        for(String word : words) {
            if(isStretchy(s, word)) {
                count++;
            }
        }
        return count;
    }
    
    pri     }isStrethy(String s, String word) {
        int i = 0, j = 0;
        while(i < s.lengt() && j < word.lngth()) {
            if(s.charAt(i) != word.harAt(j)) {
                return false;
            }
            int count1 = 0;
            while(i < s.length() && s.charAt(i) == s.charAt(i - count1)) {
                count1++;
                i++;
            }
            int count2 = 0;
            while(j < word.length() && word.charAt(j) == word.charAt(j - count2)) {
                count2++;
                j++;
            }
            if(count1 < 3 && count1 != count2 || count1 < count2) {
                return false;
            }
        }
        return i == s.length() && j == word.length();

=======

        int ans = 0;
        for (String word : words) {
            if (check(s, word)) ans++;
        }
        return ans;
    }
    private boolean chec
        }
        return count;
    }
    
    private boolean isStretchy(String s, String word) {
        int i = 0, j = 0;
        while (i < s.length() && j < word.length()) {
            if (s.charAt(i) != word.charAt(j)) {
                return false;
            }
            int iCount = 0, jCount = 0;
            while (i < s.length() && s.charAt(i) == s.charAt(iCount + i)) {
                iCount++;
                i++;.length();

=======

        int n = s;
        int result = 0;
        for (String word: words) {
            int i = 0, j = 0;
            while (i < n && j < word.length()) {
                if (s.charAt(i) != word.charAt(j)) {
                    break;
                }
                int len1 = 0, len2 = 0;
                while (i < n && s.charAt(i) == s.charAt(i + len1)) {
                    len1++;
                }
                while (j < word.length() && word.charAt(j) == word.charAt(j + len2)) {
                    len2++;
                }
                if (len1 < len2 || (len1 < 3 && len1 != len2)) {
                    break;
                }
                i += len1;
                j += len2;
            }
            if (i == n && j == word.length()) {
                result++;
            }
        }
        return result
            }
            while (j < word.length() && word.charAt(j) == word.charAt(jCount + j)) {
                jCount++;
                j++;
            }
            if (iCount < jCount || (iCount != jCount && iCount < 3)) {
                return false;
            }
        }
        return i == s.length() && j == word.length();

=======

        int count = 0;
        for (String word : words) {
            if (check(s, word)) {
                count++;
            }
        }
        return count;
    }
    
    private boolean check(String s, String word) {
        int i = 0;
        int j = 0;
        while (i < s.length() && j < word.length()) {
            if (s.charAt(i) != word.charAt(j)) {
                return false;
            }
            int count1 = 0;
            int count2 = 0;
            while (i < s.length() && s.charAt(i) == s.charAt(i + count1)) {
                count1++;
            }
            while (j < word.length() && word.charAt(j) == word.charAt(j + count2)) {
                count2++;
            }
            if (count1 < count2 || (count1 < 3 && count1 != count2)) {
                return false;
            }
            i += count1;
            j += count2;
        }
        return i == s.length() && j == word.length();

=======

        int ans = 0;
        for (String word : words) {
            if (check(s, word)) {
                ans++;
            }
        }
        return ans;
    }
    public boolean check(String s, String word) {
        int i = 0, j = 0;
        while (i < s.length() && j < word.length()) {
            if (s.charAt(i) != word.charAt(j)) {
                return false;
            }
            int cnt1 = 0, cnt2 = 0;
            while (i < s.length() && s.charAt(i) == s.charAt(cnt1 + i)) {
                cnt1++;
            }
            while (j < word.length() && word.charAt(j) == word.charAt(cnt2 + j)) {
                cnt2++;
            }
            if (cnt1 < cnt2 || (cnt1 < 3 && cnt1 != cnt2)) {
                return false;
            }
            i += cnt1;
            j += cnt2;
        }
        return i == s.length() && j == word.length();

=======

        int res = 0;
        for (String w : words) {
            if (w.length() > s.length()) continue;
            int i = 0, j = 0;
            while (i < s.length() && j < w.length()) {
                if (s.charAt(i) != w.charAt(j)) break;
                int cnt1 = 0, cnt2 = 0;
                while (i < s.length() && s.charAt(i) == s.charAt(cnt1 + i)) cnt1++;
                while (j < w.length() && w.charAt(j) == w.charAt(cnt2 + j)) cnt2++;
                if (cnt1 < cnt2 || cnt1 < 3 && cnt1 != cnt2) break;
                i += cnt1;
                j += cnt2;
            }
            if (i == s.length() && j == w.length()) res++;
        }
        return res;

=======

        int count = 0;
        for(String word : words) {
            if(isStretchy(s, word)) {
                count++;
            }
        }
        return count;
    }
    
    private boolean isStretchy(String s, String word) {
        int i = 0, j = 0;
        while(i < s.length() && j < word.length()) {
            if(s.charAt(i) != word.charAt(j)) {
                return false;
            }
            int count1 = 0;
            while(i < s.length() && s.charAt(i) == s.charAt(i - count1)) {
                count1++;
                i++;
            }
            int count2 = 0;
            while(j < word.length() && word.charAt(j) == word.charAt(j - count2)) {
                count2++;
                j++;
            }
            if(count1 < 3 && count1 != count2 || count1 < count2) {
                return false;
            }
        }
        return i == s.length() && j == word.length();

=======

        int ans = 0;
        for (String word : words) {
            if (check(s, word)) ans++;
        }
        return ans;
    }
    private boolean check(String s, String word) {
        int i = 0;
        int j = 0;
        while (i < s.length() && j < word.length()) {
            if (s.charAt(i) != word.charAt(j)) return false;
            int cnt1 = 0;
            int cnt2 = 0;
            while (i < s.length() && s.charAt(i) == s.charAt(cnt1 + i)) cnt1++;
            while (j < word.length() && word.charAt(j) == word.charAt(cnt2 + j)) cnt2++;
            if (cnt1 < cnt2) return false;
            if (cnt1 < 3 && cnt1 != cnt2) return false;
            i += cnt1;
            j += cnt2;
        }
        return i == s.length() && j == word.length();

=======

        int n = s.length();
        int result = 0;
        for (String word: words) {
            int i = 0, j = 0;
            while (i < n && j < word.length()) {
                if (s.charAt(i) != word.charAt(j)) {
                    break;
                }
                int len1 = 0, len2 = 0;
                while (i < n && s.charAt(i) == s.charAt(i + len1)) {
                    len1++;
                }
                while (j < word.length() && word.charAt(j) == word.charAt(j + len2)) {
                    len2++;
                }
                if (len1 < len2 || (len1 < 3 && len1 != len2)) {
                    break;
                }
                i += len1;
                j += len2;
            }
            if (i == n && j == word.length()) {
                result++;
            }
        }
        return result;
