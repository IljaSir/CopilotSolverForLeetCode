Synthesizing 10/10 solutions

=======

        if (word1.length() != word2.length()) {
            return false;
        }
        int[] count1 = new int[26];
        int[] count2 = new int[26];
        for (int i = 0; i < word1.length(); i++) {
            count1[word1.charAt(i) - 'a']++;
            count2[word2.charAt(i) - 'a']++;
        }
        for (int i = 0; i < 26; i++) {
            if (count1[i] == 0 && count2[i] != 0) {
                return false;
            }
            if (count1[i] != 0 && count2[i] == 0) {
                return false;
            }
        }
        Arrays.sort(count1);
        Arrays.sort(count2);
        for (int i = 0; i < 26; i++) {
            if (count1[i] != count2[i]) {
                return false;
            }
        }
        return true;

=======

        if (word1.length() != word2.length()) {
            return false;
        }
        int[] count1 = new int[26];
        int[] count2 = new int[26];
        for (int i = 0; i < word1.length(); i++) {
            count1[word1.charAt(i) - 'a']++;
            count2[word2.charAt(i) - 'a']++;
        }
        for (int i = 0; i < 26; i++) {
            if ((count1[i] == 0) ^ (count2[i] == 0)) {
                return false;
            }
        }
        Arrays.sort(count1);
        Arrays.sort(count2);
        return Arrays.equals(count1, count2);

=======

        if (word1.length() != word2.length()) {
            return false;
        }
        int[] freq1 = new int[26];
        int[] freq2 = new int[26];
        for (int i = 0; i < word1.length(); i++) {
            freq1[word1.charAt(i) - 'a']++;
            freq2[word2.charAt(i) - 'a']++;
        }
        for (int i = 0; i < 26; i++) {
            if ((freq1[i] == 0 && freq2[i] != 0) || (freq1[i] != 0 && freq2[i] == 0)) {
                return false;
            }
        }
        Arrays.sort(freq1);
        Arrays.sort(freq2);
        return Arrays.equals(freq1, freq2);

=======

        if (word1.length() != word2.length()) {
            return false;
        }
        int[] count1 = new int[26];
        int[] count2 = new int[26];
        for (char c : word1.toCharArray()) {
            count1[c - 'a']++;
        }
        for (char c : word2.toCharArray()) {
            count2[c - 'a']++;
        }
        for (int i = 0; i < 26; i++) {
            if (count1[i] == 0 && count2[i] != 0 || count1[i] != 0 && count2[i] == 0) {
                return false;
            }
        }
        Arrays.sort(count1);
        Arrays.sort(count2);
        for (int i = 0; i < 26; i++) {
            if (count1[i] != count2[i]) {
                return false;
            }
        }
        return true;

=======

        if (word1.length() != word2.length()) return false;
        int[] count1 = new int[26];
        int[] count2 = new int[26];
        for (int i = 0; i < word1.length(); i++) {
            count1[word1.charAt(i) - 'a']++;
            count2[word2.charAt(i) - 'a']++;
        }
        for (int i = 0; i < 26; i++) {
            if (count1[i] == 0 && count2[i] != 0 || count1[i] != 0 && count2[i] == 0) return false;
        }
        Arrays.sort(count1);
        Arrays.sort(count2);
        for (int i = 0; i < 26; i++) {
            if (count1[i] != count2[i]) return false;
        }
        return true;

=======

        if (word1.length() != word2.length()) {
            return false;
        }
        int[] freq1 = new int[26];
        int[] freq2 = new int[26];
        for (char c : word1.toCharArray()) {
            freq1[c - 'a']++;
        }
        for (char c : word2.toCharArray()) {
            freq2[c - 'a']++;
        }
        for (int i = 0; i < 26; i++) {
            if ((freq1[i] == 0) != (freq2[i] == 0)) {
                return false;
            }
        }
        Arrays.sort(freq1);
        Arrays.sort(freq2);
        return Arrays.equals(freq1, freq2);

=======

        if (word1.length() != word2.length()) {
            return false;
        }
        int[] w1 = new int[26];
        int[] w2 = new int[26];
        for (char c : word1.toCharArray()) {
            w1[c - 'a']++;
        }
        for (char c : word2.toCharArray()) {
            w2[c - 'a']++;
        }
        for (int i = 0; i < 26; i++) {
            if (w1[i] == 0 && w2[i] != 0) {
                return false;
            }
            if (w1[i] != 0 && w2[i] == 0) {
                return false;
            }
        }
        Arrays.sort(w1);
        Arrays.sort(w2);
        for (int i = 0; i < 26; i++) {
            if (w1[i] != w2[i]) {
                return false;
            }
        }
        return true;

=======

        int[] w1 = new int[26];
        int[] w2 = new int[26];
        for (int i = 0; i < word1.length(); i++) {
            w1[word1.charAt(i) - 'a']++;
        }
        for (int i = 0; i < word2.length(); i++) {
            w2[word2.charAt(i) - 'a']++;
        }
        for (int i = 0; i < 26; i++) {
            if (w1[i] == 0 && w2[i] != 0 || w1[i] != 0 && w2[i] == 0) {
                return false;
            }
        }
        Arrays.sort(w1);
        Arrays.sort(w2);
        return Arrays.equals(w1, w2);

=======

        if (word1.length() != word2.length()) {
            return false;
        }
        Map<Character, Integer> m1 = new HashMap<>();
        Map<Character, Integer> m2 = new HashMap<>();
        for (char c : word1.toCharArray()) {
            m1.put(c, m1.getOrDefault(c, 0) + 1);
        }
        for (char c : word2.toCharArray()) {
            m2.put(c, m2.getOrDefault(c, 0) + 1);
        }
        if (!m1.keySet().equals(m2.keySet())) {
            return false;
        }
        int[] a1 = new int[26];
        int[] a2 = new int[26];
        for (char c : word1.toCharArray()) {
            a1[c - 'a']++;
        }
        for (char c : word2.toCharArray()) {
            a2[c - 'a']++;
        }
        Arrays.sort(a1);
        Arrays.sort(a2);
        return Arrays.equals(a1, a2);

=======

        if(word1.length() != word2.length()) return false;
        int[] a = new int[26];
        int[] b = new int[26];
        for(int i = 0; i < word1.length(); i++) {
            a[word1.charAt(i) - 'a']++;
            b[word2.charAt(i) - 'a']++;
        }
        int[] c = new int[26];
        int[] d = new int[26];
        for(int i = 0; i < 26; i++) {
            if(a[i] != 0 || b[i] != 0) {
                c[a[i]]++;
                d[b[i]]++;
            }
        }
        for(int i = 0; i < 26; i++) {
            if((c[i] == 0 && d[i] != 0) || (c[i] != 0 && d[i] == 0)) return false;
        }
        return true;
