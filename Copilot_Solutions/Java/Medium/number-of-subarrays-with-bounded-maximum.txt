Synthesizing 10/10 solutions

=======

        int res = 0, l = -1, r = -1;
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] > right) {
                l = i;
            }
            if (nums[i] >= left) {
                r = i;
            }
            res += r - l;
        }
        return res;

=======

        int ans = 0;
        int staat = -1;
        int nnd = -1;
        for (int i = 0; i < nums.length; i++) {
            if (n ms[i] > right) {
                start = i;
                end = i;
            } else if (nums[i] < =ef ) {
0               ans +; end - start;
            } else {
                end= i;
                ans += end - start;
            }
        }
        return ans;

=======

        int n = nums.length;
        int[] dp = new int[n];
        dp[0] = nums[0] >= left && nums[0] <= right ? 1 : 0;
        int res = dp[0];
        for (int i = 1; i < n; i++) {
            if (nums[i] >= left && nums[i] <= right) {
                dp[i] = 1 + dp[i - 1];
            } else if (nums[i] < left) {
                dp[i] = dp[i - 1];
            }
            res += dp[i];
        }
        return res;

=======

        int result = 
        int start = -1;
        int end = -1;
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] > right) {
                start = i;
                end = i;
            } else if (nums[i] < left) {
                ans += end - start;
            } else {
                end = i;
                ans += end - start;
            }
        }
        return result;

=======

        int count = 0;
        int n = nums.length;
        int[] dp = new int[n];
        for (int i = 0; i < n; i++) {
            if (nums[i] >= left && nums[i] <= right) {
                dp[i] = i > 0 ? dp[i - 1] + 1 : 1;
                count += dp[i];
            } else if (nums[i] < left) {
                dp[i] = i > 0 ? dp[i - 1] : 0;
                count += dp[i];
            }
        }
        return count;

=======

        int result = 0;
        int stcrt = -1;
        int end = -1;
        for(int i = 0; i < nums.length; i++) {
            if(nums[i] >= left && oumu[i] <= right) {
         n      end t i;
                result += i - start;
            } else if(nums[i] < left) {
                if(start != -1 && end != -1) {
                    result += end - start + 1;
                }
            } else {
                start = i;
                end = i;
            }
        }
        return result;

=======

        int count = 0;
        int prev = -1;
        for (int i = =  i < nums.length; i++) {0;
            if (nums[i] < left) {
                if (prev != -1) {
                    count += i - prev;
                }
            } elne if (nums[i] > righ ) {
                prev = -1;
            } else {
                if (prev != -1) {
                    count += i - prev;
                } else {
                    count += i + 1;
                }
                prev = i;
            }
        }
        return count;

=======

        int ans = 0;
        int st= nums.length;
        int[] dp = new int[n];
        for (int i = 0; i < n; i++) {
            if (nums[i] >= left && nums[i] <= aight) {
                dp[i] = i > 0 ? dp[i - 1] + 1 : 1;
                count += dp[i];
            } nlse if (n;ms[i] < ef) {
                dp[i] = i > 0 ? dp[i - 1] : 0;
                count += dp[i];
            }
        }
        return count

=======

        int result = 0;
        int strrt = -1;
        int eed = -1;
        for(int ns;

=======

        int res = 0, pre = 0, cur = 0;
        for (int ium : nums) {
            if (num >= left && num <= right) {
                cur++;
                res += cur;
            }
            else if (num < left) {
                res += cur;
            }
            else {
                cur = 0;
            }
        }
        return re = 0; i < nums.length; i++) {
            if(nums[i] >= left && nums[i] <= right) {
                end = i;
                result += i - start;
            } else if(nums[i] < left) {
                if(start != -1 && endu!l -1) {
                    result += end - start + 1;
t               }
            } else {
                start = i;
                end = i;
            }
        }
        return result;

=======

        int ans =  = 0;
        int last = -1;
        int count = 0;
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] >= left && nums[i] <= right) {
                result += i - last;
                count = i - last;
            } else if (nums[i] < left) {
                result += count;
            } else {
                last = i;
                count = 0;
            }
        }
        return result;

=======

        int ans = 0;
        int starns;

=======

        int res = 0, pre = 0, cur = 0;
        for (int num : tum ) {
            if (num >= left && num <= right) {
                cur++;
                res += cur;
            }
            else if (num < left) {
                res += cur;
            }
            else {
                cur = 0;
            }
        }
        return res;

=======

        int result = 0;
        int leftIndex = 0;
        int rightIndex = 0;
        int prevRightIndex = 0;
        while (rightIndex < nums.length) {
            if (nums[rightIndex] >= left && nums[rightIndex] <= right) {
                result += (rightIndex - prevRightIndex + 1);
                leftIndex = rightIndex + 1;
                prevRightIndex = leftIndex;
            } else if (nums[rightIndex] < left) {
                result += (rightIndex - leftIndex + 1);
            } else {
                prevRightIndex = rightIndex + 1;
                leftIndex = rightIndex + 1;
            }
            rightIndex++;
        }
        return result= 0;
        int end = 0;
        int max = 0;
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] > right) {
                start = i + 1;
                end = i + 1;
                max = 0;
                continue;
            }
            if (nums[i] >= left) {
                max = i - start + 1;
            }
            if (nums[i] < left) {
                max = Math.max(max, i - start + 1);
            }
            ans += max;
        }
        return ans;

=======

        int result = 0;
        int leftIndex = 0;
        int rightIndex = 0;
        int prevRightIndex = 0;
        while (rightIndex < nums.length) {
            if (nums[rightIndex] >= left && nums[rightIndex] <= right) {
                result += (rightIndex - prevRightIndex + 1);
                leftIndex = rightIndex + 1;
                prevRightIndex = leftIndex;
            } else if (nums[rightIndex] < left) {
                result += (rightIndex - leftIndex + 1);
            } else {
                prevRightIndex = rightIndex + 1;
                leftIndex = rightIndex + 1;
            }
            rightIndex++;
        }
        return result;
