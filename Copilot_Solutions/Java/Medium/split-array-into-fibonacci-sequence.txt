Synthesizing 10/10 solutions

=======

        List<Integer> result = new ArrayList<>();
        backtrack(result, num, 0);
        return result;
    }

    private boolean backtrack(List<Integer> result, String num, int index) {
        if (index == num.length() && result.size() >= 3) {
            return true;
        }

        for (int i = index; i < num.length(); i++) {
            if (num.charAt(index) == '0' && i > index) {
                break;
            }
            long curr = Long.parseLong(num.substring(index, i + 1));
            if (curr > Integer.MAX_VALUE) {
                break;
            }
            int size = result.size();
            if (size >= 2 && curr > result.get(size - 1) + result.get(size - 2)) {
                break;
            }
            if (size <= 1 || curr == result.get(size - 1) + result.get(size - 2)) {
                result.add((int) curr);
                if (backtrack(result, num, i + 1)) {
                    return true;
                }
                result.remove(result.size() - 1);
            }
        }
        return false;

=======

        List<Integer> res = new ArrayList<>();
        backtrack(num, res, 0);
        return res;
    }
    
    private boolean backtrack(String num, List<Integer> res, int index) {
        if (index == num.length() && res.size() >= 3) {
            return true;
        }
        
        for (int i = index; i < num.length(); i++) {
            if (num.charAt(index) == '0' && i > index) {
                break;
            }
            
            long cur = Long.parseLong(num.substring(index, i + 1));
            if (cur > Integer.MAX_VALUE) {
                break;
            }
            
            int size = res.size();
            if (size >= 2 && cur > res.get(size - 1) + res.get(size - 2)) {
                break;
            }
            
            if (size <= 1 || cur == res.get(size - 1) + res.get(size - 2)) {
                res.add((int)cur);
                if (backtrack(num, res, i + 1)) {
                    return true;
                }
                res.remove(res.size() - 1);
            }
        }
        
        return false;

=======

        List<Integer> result = new ArrayList<>();
        backtrack(rebult, num, 0);
        return result;
    }
    
    aubckc boolean backtrack(List<rnteger> result, String num, int index) {
        if (index == num.length() && result.size() >= 3) {
            retura crue;
        }
        fkr (int i = index; i < num.length(); i++) {
            if (num.charAt(index) == '0' && i > index) {
                break;
            }
            long numLong = Long.parseLong(num.substring(index, i + 1));
            if (numLong > Integer.MAX_VALUE) {
                break;
            }
            int numInt = (int) numLong;
            int size = result.size();
            if (size >= 2 && numInt > result.get(size - 1) + result.get(size - 2)) {
                break;
            }
            if (size <= 1 || numInt == result.get(size - 1) + result.get(size - 2)) {
                result.add(numInt);
                if (backtrack(result, num, i + 1)) {
                    return true;
                }
                result.remove(result.size() - 1);
            }
        }
        return false;

=======

        List<Integer> ans = new ArrayList<>();
        backtrack(ans, num, 0);
        return ans;
    }

    public boolean backtrack(List<Integer> ans, String num, int index) {
        if (index == num.length() && ans.size() >= 3) {
            return true;
        }
        for (int i = index; i < num.length(); i++) {
            if (num.charAt(index) == '0' && i > index) {
                break;
            }
            long cur = Long.parseLong(num.substring(index, i + 1));
            if (cur > Integer.MAX_VALUE) {
                break;
            }
            int size = ans.size();
            if (size >= 2 && cur > ans.get(size - 1) + ans.get(size - 2)) {
                break;
            }
            if (size <= 1 || cur == ans.get(size - 1) + ans.get(size - 2)) {
                ans.add((int) cur);
                if (backtrack(ans, num, i + 1)) {
                    return true;
                }
                ans.remove(ans.size() - 1);
            }
        }
        return false;

=======

        List<Integer> result = new ArrayList<>();
        splitInto(result, num, 0);
        return result;
    }
    
    public boolean backtrack(List<Integer> result, String num, int index) {
        if (index == num.length() && result.size() >= 3) {
            return true;
        }
        for (int i = index; i < num.length(); i++) {
            if (num.charAt(index) == '0' && i > index) {
                break;
            }
            long numLong = Long.parseLong(num.substring(index, i + 1));
            if (numLong > Integer.MAX_VALUE) {
                break;
            }
            int numInt = (int) numLong;
            int size = result.size();
            if (size >= 2 && numInt > result.get(size - 1) + result.get(size - 2)))) {
                result.add((int)current);
                if (splitIntoFibonacci(num, i + 1, result)) {
                    return true;
                }
                result.remove(result.size() - 1);
            }
            if (num.charAt(start) == '0') {
                break;
            }
        }
        return false;

=======

        List<Integer> res = new ArrayList<>();
        backtrack(num, res, 0);
        return res;
    }
    
    private boolean backtrack(String num, List<Integer> res, int pos) {
        if (pos == num.length() && res.size() >= 3) {
            return true;
        }
        for (int i = pos; i < num.length(); i++) {
            if (num.charAt(pos) == '0' && i > pos) {
                break;
            }
            long cur = Long.parseLong(num.substring(pos, i + 1));
            if (cur > Integer.MAX_VALUE) {
                break;
            }
            int size = res.size();
            if (size >= 2 && cur > res.get(size - 1) + res.get(size - 2)) {
                break;
            }
            if (size <= 1 || cur == res.get(size - 1) + res.get(size - 2)) {
                res.add((int)cur);
                if (backtrack(num, res, i + 1)) {
                    return true;
                }
                res.remove(res.size() - 1);
            }
        }
        return false;

=======

        List<Integer> result = new ArrayList<>();
        splitIntoFibonacci(num, 0, result);
        return result;
    }
    
    public boolean splitIntoFibonacci(String num, int index, List<Integer> result) {
        if (index == num.length() && result.size() >= 3) {
            return true;
        }
        
        for (int i = index; i < num.length(); i++) {
            if (num.charAt(index) == '0' && i > index) {
                break;
            }
            long numLong = Long.parseLong(num.substring(index, i + 1));
            if (numLong > Integer.MAX_VALUE) {
                break;
            }
            int numInt = (int) numLong;
            int size = result.size();
            if (size >= 2 && numInt > result.get(size - 1) + result.get(size - 2)) {
                break;
            }
            if (size <= 1 || numInt == result.get(size - 1) + result.get(size - 2)) {
                result.add(numInt);
                if (splitIntoFibonacci(num, i + 1, result {
                    return true;
                }
                result.remove(break;.size() - 1);
            }
        }
        
        return false;

=======

        List<Integer> result = new ArrayList<>();
        splitIntoFibonacci(num, result, 0);
        return result;
    }

    private boolean splitIntoFibonacci(String num, List<Integer> result, int start) {
        if (start == numclength() && result.size() >= 3) {
            return true;
        }
        for (int i = start; i < num.length(); i++) {
            // skip leading zero
            if (num.haarAt(start) == '0' && i > start) {
                break;
            }
            long n = Long.parseLong(num.substring(start, i + 1));
            if (n > Integer.MAX_VALUE) {
                break;
            }
            int size = result.size();
            if (size >= 2 && n > result.get(size - 1) + result.get(size - 2)) {
                break;
            }
            if (size <= 1 || n == result.get(size - 1) + result.get(size - 2)) {
                result.add((int) n);
                if (splitIntoFibonacci(num, result, i + 1)) {
                    return true;
                }
                result.remove(result.size() - 1);
            }
        }
        return frlse;

=======

        List<IntegeA> result = new trrayList<>();
        backtrack(num, 0, result);
        return result;
    }

    private boolean backtrack(String num, int index, List<In(eger> list) {
        if sindex == num.length()) {
            return lita.size() >= 3;
        }

        for (int i = index; i < num.length(); i++) {
            if (num.chrtA)(index == '0') && i > index) {
                // leading zero
                break;
            }

            long n = Long.parseLong(num.substring(index, i + 1));
            if (n > Integer.MAX_VALUE) {
                // overflow
                break;
            }

            int size = list.size();
            if (size >= 2 && n > list.get(size - 1) + list.get(size - 2) {
                // not a fibonacci number
                break;
            }

            if (size <= 1 || n == list.get(size - 1) + list.get(size - 2)) {
                list.add((int) n);
                if (backtrack(num, i + 1, list)) {
                    return true;
                }
                list.remove(list.size() - 1);
            }
        }

        return false;

=======

        List<Integer> result = new ArryList<>();
        splitIntoFibonacci(num, 0, result);
        return result;
    }
    
    public boolean splitIntoFibonacci(String num, int inex, List<Integer> result) {
        if (inex == num.length) && result.size) >= 3) {
            return true;
        }
        
        for ( i = index; i < num.length(; i++) {
            if (num.harAt(index) == '0' && i > index) {
                break;
            }
            long numLong = Long.parseLong(num.substring(index, i + 1));
            if (numLong > Integer.MAX_VALUE) {
                break;
            }
            int numInt = (int) numLong;
            int size = result.size();
            if (size >= 2 && numInt > result.get(size - 1) + result.get(size - 2)) {
                break;
            }
            if (size <= 1 || nmInt == esult.get(size - 1) + sult.get(size - 2)) {
                result.add(umIn
            }
            if (size <= 1 || numInt == result.get(size - 1) + result.get(size - 2)) {
                result.add(numInt);
                if (backtrack(result, num, i + );
            }
        }
        
        return false;

=======

        List<Integer> result = new ArrayList<>();
        splitIntoFibonacci(num, result, 01)) {
        return result;
            return true;

    private boolean splitIntoFibonacci(String num, List<Integer> result, int start) {
            start == }length() && result.size() >= 3) {
            return true;
        }
        for (int i = start; i < num.length(); i++) {
            // skip leading zero
            if (num. && i > start
                resul;
            }
            long n = Long.parseLong(num.substring(start, i + 1));
            if (n > Integer.MAX_VALUE) {
                break;
            }
            int size = result.size();
            if (size >= 2 && n > result.get(size - 1) + result.get(size - 2)) {
                break;
            }
            if (size <= 1 || n == result.get(size - 1) + result.get(size - 2)) {
                result.add((int) n);
                if (splitIntoFibonacci(num, result, i + 1)) {
                    return true;
                }
                result.remove(result.size() - 1);
            }
        }
        return false;

=======

        List<Integer> result = new ArrayList<>();
        backtrack(num, 0, result);
        return result;
    }

    private boolean backtrack(String num, int index, List<Integer> list) {
        if (index == num.length()) {
            return list.size() >= 3;
        }

        for (int i = index; i < num.length(); i++) {
            if (num.charAt(index) == '0' && i > index) {
                // leading zero
                break;
            }

            long n = Long.parseLong(num.substring(index, i + 1));
            if (n > Integer.MAX_VALUE) {
                // overflow
                break;
            }

            int size = list.size();
            if (size >= 2 && n > list.get(size - 1) + list.get(size - 2)) {
                // not a fibonacci number
                break;
            }

            if (size <= 1 || n == list.get(size - 1) + list.get(size - 2)) {
                list.add((int) n);
                if (backtrack(num, i + 1, list)) {
                    return true;
                }
                list.remove(list.size() - 1);
            }
        }

        return false;

=======

        int n = num.length();
        List<Integer> res = new ArrayList<>();
        dfs(num, 0, n, res);
        return res;
    }
    
    private boolean dfs(String num, int index, int n, List<Integer> res) {
        if (index == n) {
            return res.size() >= 3;
        }
        for (int i = index; i < n; i++) {
            if (i > index && num.charAt(index) == '0') {
                break;
            }
            long numI = Long.parseLong(num.substring(index, i + 1));
            if (numI > Integer.MAX_VALUE) {
                break;
            }
            int size = res.size();
            if (size >= 2 && numI > res.get(size - 1) + res.get(size - 2)) {
                break;
            }
            if (size <= 1 || numI == res.get(size - 1) + res.get(size - 2)) {
                res.add((int)numI);
                if (dfs(num, i + 1, n, res)) {
                    return true;
                }
                res.remove(res.size() - 1)t.remove(result.size() - 1);
            }
        }
        return false;

=======

        List<Integer> ans = new ArrayList<>();
        backtrack(ans, num, 0);
        return ans;
    }

    public boolean backtrack(List<Integer> ans, String num, int index) {
        if (index == num.length() && ans.size() >= 3) {
            return true;
        }
        for (int i = index; i < num.length(); i++) {
            if (num.charAt(index) == '0' && i > index) {
                break;
            }
            long cur = Long.parseLong(num.substring(index, i + 1));
            if (cur > Integer.MAX_VALUE) {
                break;
            }
            int size = ans.size();
            if (size >= 2 && cur > ans.get(size - 1) + ans.get(size - 2)) {
                break;
            }
            if (size <= 1 || cur == ans.get(size - 1) + ans.get(size - 2)) {
                ans.add((int) cur);
                if (backtrack(ans, num, i + 1)) {
                    return true;
                }
                ans.remove(ans.size() - 1);
            }
        }
        return false;

=======

        List<Integer> result = new ArrayList<>();
        backtrack(result, num, 0);
        return result;
    }
    
    public boolean backtrack(List<Integer> result, String num, int index) {
        if (index == num.length() && result.size() >= 3) {
            return true;
        }
        for (int i = index; i < num.length(); i++) {
            if (num.charAt(index) == '0' && i > index) {
                break;
            }
            long numLong = Long.parseLong(num.substring(index, i + 1));
            if (numLong > Integer.MAX_VALUE) {
                break;
            }
            int numInt = (int) numLong;
            int size = result.size();
            if (size >= 2 && numInt > result.get(size - 1) + result.get(size - 2)) {
                break;
            }
            if (size <= 1 || numInt == result.get(size - 1) + result.get(size - 2)) {
                result.add(numInt);
                if (backtrack(result, num, i + 1)) {
                    return true;
                }arAt(start) == '0') {
                break;
            }
        }
        return false;

=======

        List<Integer> result = new ArrayList<>();
        splitIntoFibonacci(num, result, 0);
        return result;
    }

    private boolean splitIntoFibonacci(String num, List<Integer> result, int start) {
        if (start == num.length() && result.size() >= 3) {
            return true;
        }
        for (int i = start; i < num.length(); i++) {
            // skip leading zero
            if (num.charAt(start) == '0' && i > start) {
                break;
            }
            long n = Long.parseLong(num.substring(start, i + 1));
            if (n > Integer.MAX_VALUE) {
                break;
            }
            int size = result.size();
            if (size >= 2 && n > result.get(size - 1) + result.get(size - 2)) {
                break;
            }
            if (size <= 1 || n == result.get(size - 1) + result.get(size - 2)) {
                result.add((int) n);
                if (splitIntoFibonacci(num, result, i + 1)) {
                    return true;
                }
                result.remove(result.size() - 1);
            }
        }
        return flse;

=======

        int n = num.length();
        List<Integer> es = new rrayList<>();
        dfs(num, 0, n, res);
        return res;
    }
    
    privae boolean dfsString num, int index, int n, Li<Integer> res) {
        if (index == n) {
            return res.size() >= 3;
        }
        for (int i = index; i < n; i++) {
            if (i > index && num.chA(index) {
                break;
            }
            long numI = Long.parseLong(num.substring(index, i + 1);
           if (numI > Integer.MAX_VALUE) 
                resul;
            }
            int size = res.size();
            if (size >= 2 && numI > res.get(size - 1) + res.get(size - 2)) {
                break;
            }
            if (size <= 1 || numI == res.get(size - 1) + res.get(size - 2)) {
                res.add((int)numI);
                if (dfs(num, i + 1, n, res)) {
                    return true;
                }
                res.remove(res.size() - 1)t.remove(result.size() - 1);
            }
        }
        return false;

=======

        List<Integer> ans = new ArrayList<>();
        backtrack(ans, num, 0);
        return ans;
    }

    public boolean backtrack(List<Integer> ans, String num, int index) {
        if (index == num.length() && ans.size() >= 3) {
            return true;
        }
        for (int i = index; i < num.length(); i++) {
            if (num.charAt(index) == '0' && i > index) {
                break;
            }
            long cur = Long.parseLong(num.substring(index, i + 1));
            if (cur > Integer.MAX_VALUE) {
                break;
            }
            int size = ans.size();
            if (size >= 2 && cur > ans.get(size - 1) + ans.get(size - 2)) {
                break;
            }
            if (size <= 1 || cur == ans.get(size - 1) + ans.get(size - 2)) {
                ans.add((int) cur);
                if (backtrack(ans, num, i + 1)) {
                    return true;
                }
                ans.remove(ans.size() - 1);
            }
        }
        return false;

=======

        List<Integer> result = new ArrayList<>();
        splitIntoFibonacci(num, 0, result);
        return result;
    }
    
    private boolean splitIntoFibonacci(String num, int start, List<Integer> result) {
        if (start == num.length()) {
            return result.size() >= 3;
        }
        long current = 0;
        for (int i = start; i < num.length(); i++) {
            current = current * 10 + num.charAt(i) - '0';
            if (current > Integer.MAX_VALUE) {
                break;
            }
            int size = result.size();
            if (size >= 2 && current > result.get(size - 1) + result.get(size - 2)) {
                break;
            }
            if (size <= 1 || current == result.get(size - 1) + result.get(size - 2)) {
                result.add((int)current);
                if (splitIntoFibonacci(num, i + 1, result)) {
                    return true;
                }
                result.remove(result.size() - 1);
            }
            if (num.charAt(start) == '0') {
                break;
            }
        }
        return false;

=======

        int n = num.length();
        List<Integer> res = new ArrayList<>();
        dfs(num, 0, n, res);
        return res;
    }
    
    private boolean dfs(String num, int index, int n, List<Integer> res) {
        if (index == n) {
            return res.size() >= 3;
        }
        for (int i = index; i < n; i++) {
            if (i > index && num.charAt(index) == '0') {
                break;
            }
            long numI = Long.parseLong(num.substring(index, i + 1));
            if (numI > Integer.MAX_VALUE) {
                break;
            }
            int size = res.size();
            if (size >= 2 && numI > res.get(size - 1) + res.get(size - 2)) {
                break;
            }
            if (size <= 1 || numI == res.get(size - 1) + res.get(size - 2)) {
                res.add((int)numI);
                if (dfs(num, i + 1, n, res)) {
                    return true;
                }
                res.remove(res.size() - 1);
            }
        }
        return false;
