Synthesizing 10/10 solutions

=======

        Map<Integer, List<Integer>> redMap = new HashMap<>();
        Map<Integer, List<Integer>> blueMap = new HashMap<>();
        for (int[] edge : redEdges) {
            if (!redMap.containsKey(edge[0])) {
                redMap.put(edge[0], new ArrayList<>());
            }
            redMap.get(edge[0]).add(edge[1]);
        }
        for (int[] edge : blueEdges) {
            if (!blueMap.containsKey(edge[0])) {
                blueMap.put(edge[0], new ArrayList<>());
            }
            blueMap.get(edge[0]).add(edge[1]);
        }
        int[] result = new int[n];
        Arrays.fill(result, -1);
        Queue<Integer> queue = new LinkedList<>();
        queue.offer(0);
        int step = 0;
        Set<Integer> redVisited = new HashSet<>();
        Set<Integer> blueVisited = new HashSet<>();
        while (!queue.isEmpty()) {
            int size = queue.size();
            for (int i = 0; i < size; i++) {
                int node = queue.poll();
                if (result[node] == -1) {
                    result[node] = step;
                }
                if (redVisited.contains(node)) {
                    if (blueMap.containsKey(node)) {
                        for (int next : blueMap.get(node)) {
                            if (!blueVisited.contains(next)) {
                                blueVisited.add(next);
                                queue.offer(next);
                            }
                        }
                    }
                } else if (blueVisited.contains(node)) {
                    if (redMap.containsKey(node)) {
                        for (int next : redMap.get(node)) {
                            if (!redVisited.contains(next)) {
                                redVisited.add(next);
                                queue.offer(next);
                            }
                        }
                    }
                } else {
                    if (redMap.containsKey(node)) {
                        for (int next : redMap.get(node)) {
                            if (!redVisited.contains(next)) {
                                redVisited.add(next);
                                queue.offer(next);
                            }
                        }
                    }
                    if (blueMap.containsKey(node)) {
                        for (int next : blueMap.get(node)) {
                            if (!blueVisited.contains(next)) {
                                blueVisited.add(next);
                                queue.offer(next);
                            }
                        }
                    }
                }
            }
            step++;
        }
        return result;

=======

        int[] res = new int[n];
        Arrays.fill(res, Integer.MAX_VALUE);
        res[0] = 0;
        Map<Integer, List<Integer>> redMap = new HashMap<>();
        Map<Integer, List<Integer>> blueMap = new HashMap<>();
        for (int[] redEdge : redEdges) {
            int from = redEdge[0];
            int to = redEdge[1];
            List<Integer> list = redMap.getOrDefault(from, new ArrayList<>());
            list.add(to);
            redMap.put(from, list);
        }
        for (int[] blueEdge : blueEdges) {
            int from = blueEdge[0];
            int to = blueEdge[1];
            List<Integer> list = blueMap.getOrDefault(from, new ArrayList<>());
            list.add(to);
            blueMap.put(from, list);
        }
        Queue<int[]> queue = new LinkedList<>();
        queue.offer(new int[]{0, 0});
        queue.offer(new int[]{0, 1});
        while (!queue.isEmpty()) {
            int[] curr = queue.poll();
            int node = curr[0];
            int color = curr[1];
            int step = res[node];
            if (color == 0) {
                if (blueMap.containsKey(node)) {
                    for (int nextNode : blueMap.get(node)) {
                        if (res[nextNode] > step + 1) {
                            res[nextNode] = step + 1;
                            queue.offer(new int[]{nextNode, 1});
                        }
                    }
                }
            } else {
                if (redMap.containsKey(node)) {
                    for (int nextNode : redMap.get(node)) {
                        if (res[nextNode] > step + 1) {
                            res[nextNode] = step + 1;
                            queue.offer(new int[]{nextNode, 0});
                        }
                    }
                }
            }
        }
        for (int i = 0; i < n; i++) {
            res[i] = res[i] == Integer.MAX_VALUE ? -1 : res[i];
        }
        return res;

=======

        int[] res = new int[n];
        Arrays.fill(res, Integer.MAX_VALUE);
        res[0] = 0;
        Map<Integer, Set<Integer>> redMap = new HashMap<>();
        Map<Integer, Set<Integer>> blueMap = new HashMap<>();
        for (int[] edge : redEdges) {
            redMap.putIfAbsent(edge[0], new HashSet<>());
            redMap.get(edge[0]).add(edge[1]);
        }
        for (int[] edge : blueEdges) {
            blueMap.putIfAbsent(edge[0], new HashSet<>());
            blueMap.get(edge[0]).add(edge[1]);
        }
        Queue<int[]> queue = new LinkedList<>();
        queue.offer(new int[]{0, 0});
        queue.offer(new int[]{0, 1});
        int step = 0;
        Set<String> visited = new HashSet<>();
        while (!queue.isEmpty()) {
            step++;
            int size = queue.size();
            for (int i = 0; i < size; i++) {
                int[] cur = queue.poll();
                if (cur[1] == 0) {
                    if (redMap.containsKey(cur[0])) {
                        for (int next : redMap.get(cur[0])) {
                            if (visited.contains(next + "1")) {
                                continue;
                            }
                            visited.add(next + "1");
                            queue.offer(new int[]{next, 1});
                            res[next] = Math.min(res[next], step);
                        }
                    }
                } else {
                    if (blueMap.containsKey(cur[0])) {
                        for (int next : blueMap.get(cur[0])) {
                            if (visited.contains(next + "0")) {
                                continue;
                            }
                            visited.add(next + "0");
                            queue.offer(new int[]{next, 0});
                            res[next] = Math.min(res[next], step);
                        }
                    }
                }
            }
        }
        for (int i = 0; i < n; i++) {
            if (res[i] == Integer.MAX_VALUE) {
                res[i] = -1;
            }
        }
        return res;

=======

        int[] result = new int[n];
        Arrays.fill(result, -1);
        result[0] = 0;
        Map<Integer, List<Integer>> redMap = new HashMap<>();
        Map<Integer, List<Integer>> blueMap = new HashMap<>();
        for (int[] edge : redEdges) {
            redMap.computeIfAbsent(edge[0], k -> new ArrayList<>()).add(edge[1]);
        }
        for (int[] edge : blueEdges) {
            blueMap.computeIfAbsent(edge[0], k -> new ArrayList<>()).add(edge[1]);
        }
        Queue<int[]> queue = new LinkedList<>();
        queue.offer(new int[]{0, 0});
        queue.offer(new int[]{0, 1});
        int step = 0;
        Set<String> visited = new HashSet<>();
        visited.add(0 + " " + 0);
        visited.add(0 + " " + 1);
        while (!queue.isEmpty()) {
            int size = queue.size();
            step++;
            for (int i = 0; i < size; i++) {
                int[] node = queue.poll();
                int color = node[1];
                int nextColor = color == 0 ? 1 : 0;
                Map<Integer, List<Integer>> map = color == 0 ? redMap : blueMap;
                if (map.containsKey(node[0])) {
                    for (int next : map.get(node[0])) {
                        if (result[next] == -1) {
                            result[next] = step;
                        }
                        if (!visited.contains(next + " " + nextColor)) {
                            visited.add(next + " " + nextColor);
                            queue.offer(new int[]{next, nextColor});
                        }
                    }
                }
            }
        }
        return result;

=======

        Map<Integer, List<Integer>> redMap = new HashMap<>();
        Map<Integer, List<Integer>> blueMap = new HashMap<>();
        for (int[] edge : redEdges) {
            redMap.computeIfAbsent(edge[0], k -> new ArrayList<>()).add(edge[1]);
        }
        for (int[] edge : blueEdges) {
            blueMap.computeIfAbsent(edge[0], k -> new ArrayList<>()).add(edge[1]);
        }
        int[] redDist = new int[n];
        int[] blueDist = new int[n];
        Arrays.fill(redDist, -1);
        Arrays.fill(blueDist, -1);
        redDist[0] = 0;
        blueDist[0] = 0;
        Queue<int[]> q = new LinkedList<>();
        q.offer(new int[]{0, 0});
        q.offer(new int[]{0, 1});
        while (!q.isEmpty()) {
            int[] cur = q.poll();
            int curNode = cur[0];
            int curColor = cur[1];
            if (curColor == 0) {
                if (blueMap.containsKey(curNode)) {
                    for (int next : blueMap.get(curNode)) {
                        if (blueDist[next] == -1) {
                            blueDist[next] = blueDist[curNode] + 1;
                            q.offer(new int[]{next, 1});
                        }
                    }
                }
            } else {
                if (redMap.containsKey(curNode)) {
                    for (int next : redMap.get(curNode)) {
                        if (redDist[next] == -1) {
                            redDist[next] = redDist[curNode] + 1;
                            q.offer(new int[]{next, 0});
                        }
                    }
                }
            }
        }
        int[] res = new int[n];
        for (int i = 0; i < n; i++) {
            if (redDist[i] == -1) {
                res[i] = blueDist[i];
            } else if (blueDist[i] == -1) {
                res[i] = redDist[i];
            } else {
                res[i] = Math.min(redDist[i], blueDist[i]);
            }
        }
        return res;

=======

        int[] result = new int[n];
        for (int i = 0; i < n; i++) {
            result[i] = -1;
        }
        result[0] = 0;
        Queue<int[]> queue = new LinkedList<>();
        queue.add(new int[]{0, 0});
        queue.add(new int[]{0, 1});
        boolean[][] visited = new boolean[n][2];
        while (!queue.isEmpty()) {
            int[] current = queue.poll();
            int node = current[0];
            int color = current[1];
            int nextColor = color == 0 ? 1 : 0;
            for (int[] edge : nextColor == 0 ? redEdges : blueEdges) {
                if (edge[0] == node) {
                    if (visited[edge[1]][nextColor]) {
                        continue;
                    }
                    result[edge[1]] = result[edge[1]] == -1 ? result[node] + 1 : Math.min(result[edge[1]], result[node] + 1);
                    visited[edge[1]][nextColor] = true;
                    queue.add(new int[]{edge[1], nextColor});
                }
            }
        }
        return result;

=======

        int[][] dist = new int[n][2];
        for (int i = 0; i < n; i++) {
            dist[i][0] = dist[i][1] = n + 1;
        }
        dist[0][0] = dist[0][1] = 0;
        boolean[][] visited = new boolean[n][2];
        Queue<int[]> q = new LinkedList<>();
        q.offer(new int[]{0, 0});
        q.offer(new int[]{0, 1});
        while (!q.isEmpty()) {
            int[] cur = q.poll();
            int node = cur[0];
            int color = cur[1];
            visited[node][color] = true;
            for (int[] edge : color == 0 ? redEdges : blueEdges) {
                if (edge[0] == node) {
                    int next = edge[1];
                    if (!visited[next][color ^ 1]) {
                        dist[next][color ^ 1] = Math.min(dist[next][color ^ 1], dist[node][color] + 1);
                        q.offer(new int[]{next, color ^ 1});
                    }
                }
            }
        }
        int[] ans = new int[n];
        for (int i = 0; i < n; i++) {
            if (dist[i][0] == n + 1 && dist[i][1] == n + 1) {
                ans[i] = -1;
            } else {
                ans[i] = Math.min(dist[i][0], dist[i][1]);
            }
        }
        return ans;

=======

        List<Integer>[] g = new List[n];
        for (int i = 0; i < n; i++) {
            g[i] = new ArrayList<>();
        }
        for (int[] e : redEdges) {
            g[e[0]].add(e[1]);
        }
        for (int[] e : blueEdges) {
            g[e[0]].add(e[1] + n);
        }
        int[] ans = new int[n];
        Arrays.fill(ans, -1);
        Queue<Integer> q = new LinkedList<>();
        q.offer(0);
        q.offer(0);
        int steps = 0;
        Set<Integer> seen = new HashSet<>();
        seen.add(0);
        while (!q.isEmpty()) {
            int size = q.size();
            for (int i = 0; i < size; i += 2) {
                int node = q.poll();
                int color = q.poll();
                if (ans[node % n] == -1) {
                    ans[node % n] = steps;
                }
                for (int nei : g[node % n]) {
                    if (nei / n == color || seen.contains(nei)) {
                        continue;
                    }
                    seen.add(nei);
                    q.offer(nei);
                    q.offer(nei / n);
                }
            }
            steps++;
        }
        return ans;

=======

        int[] result = new int[n];
        Arrays.fill(result, -1);
        result[0] = 0;
        Map<Integer, List<int[]>> graph = new HashMap<>();
        for (int i = 0; i < n; i++) {
            graph.put(i, new ArrayList<int[]>());
        }
        for (int[] edge : redEdges) {
            graph.get(edge[0]).add(new int[] {edge[1], 0});
        }
        for (int[] edge : blueEdges) {
            graph.get(edge[0]).add(new int[] {edge[1], 1});
        }
        Queue<int[]> queue = new LinkedList<>();
        queue.add(new int[] {0, 0});
        queue.add(new int[] {0, 1});
        int step = 0;
        while (!queue.isEmpty()) {
            step++;
            int size = queue.size();
            for (int i = 0; i < size; i++) {
                int[] cur = queue.poll();
                for (int[] next : graph.get(cur[0])) {
                    if (next[1] == cur[1]) {
                        continue;
                    }
                    if (result[next[0]] == -1) {
                        result[next[0]] = step;
                        queue.add(next);
                    }
                }
            }
        }
        return result;

=======

        return null;
