Synthesizing 10/10 solutions

=======

        int[][] arr = new int[hi - lo + 1][2];
        for (int i = 0; i < arr.length; i++) {
            arr[i][0] = lo + i;
            arr[i][1] = getPower(lo + i);
        }
        Arrays.sort(arr, (a, b) -> {
            if (a[1] == b[1]) {
                return a[0] - b[0];
            } else {
                return a[1] - b[1];
            }
        });
        return arr[k - 1][0];
    }

    public int getPower(int num) {
        int count = 0;
        while (num != 1) {
            if (num % 2 == 0) {
                num /= 2;
            } else {
                num = num * 3 + 1;
            }
            count++;
        }
        return count;

=======

        int[][] arr = new int[hi - lo + 1][2];
        int i = 0;
        for (int j = lo; j <= hi; j++) {
            arr[i][0] = j;
            arr[i][1] = getPower(j);
            i++;
        }
        Arrays.sort(arr, new Comparator<int[]>() {
            @Override
            public int compare(int[] o1, int[] o2) {
                if (o1[1] == o2[1]) {
                    return o1[0] - o2[0];
                } else {
                    return o1[1] - o2[1];
                }
            }
        });
        return arr[k - 1][0];
    }

    private int getPower(int n) {
        int power = 0;
        while (n != 1) {
            if (n % 2 == 0) {
                n = n / 2;
            } else {
                n = 3 * n + 1;
            }
            power++;
        }
        return power;

=======

        int[] powers = new int[hi - lo + 1];
        int[] nums = new int[hi - lo + 1];
        for (int i = lo; i <= hi; i++) {
            nums[i - lo] = i;
            powers[i - lo] = power(i);
        }
        for (int i = 0; i < powers.length; i++) {
            for (int j = i + 1; j < powers.length; j++) {
                if (powers[i] > powers[j]) {
                    int tmp = powers[i];
                    powers[i] = powers[j];
                    powers[j] = tmp;
                    tmp = nums[i];
                    nums[i] = nums[j];
                    nums[j] = tmp;
                } else if (powers[i] == powers[j]) {
                    if (nums[i] > nums[j]) {
                        int tmp = nums[i];
                        nums[i] = nums[j];
                        nums[j] = tmp;
                    }
                }
            }
        }
        return nums[k - 1];
    }
    private int power(int x) {
        int p = 0;
        while (x != 1) {
            if (x % 2 == 0) {
                x /= 2;
            } else {
                x = 3 * x + 1;
            }
            p++;
        }
        return p;

=======

        int[] powers = new int[hi - lo + 1];
        for (int i = 0; i < powers.length; i++) {
            int n = lo + i;
            while (n != 1) {
                powers[i]++;
                if (n % 2 == 0) {
                    n /= 2;
                } else {
                    n = 3 * n + 1;
                }
            }
        }
        int[] sorted = new int[hi - lo + 1];
        for (int i = 0; i < sorted.length; i++) {
            sorted[i] = lo + i;
        }
        for (int i = 0; i < sorted.length - 1; i++) {
            for (int j = 0; j < sorted.length - i - 1; j++) {
                if (powers[j] > powers[j + 1]) {
                    int temp = powers[j];
                    powers[j] = powers[j + 1];
                    powers[j + 1] = temp;
                    temp = sorted[j];
                    sorted[j] = sorted[j + 1];
                    sorted[j + 1] = temp;
                } else if (powers[j] == powers[j + 1]) {
                    if (sorted[j] > sorted[j + 1]) {
                        int temp = sorted[j];
                        sorted[j] = sorted[j + 1];
                        sorted[j + 1] = temp;
                    }
                }
            }
        }
        return sorted[k - 1];

=======

        int[] arr = new int[hi - lo + 1];
        int[] power = new int[hi - lo + 1];
        for (int i = 0; i < arr.length; i++) {
            arr[i] = lo + i;
            power[i] = getPower(arr[i]);
        }
        quickSort(arr, power, 0, arr.length - 1);
        return arr[k - 1];
    }
    
    public int getPower(int x) {
        int count = 0;
        while (x != 1) {
            if (x % 2 == 0) {
                x /= 2;
            } else {
                x = 3 * x + 1;
            }
            count++;
        }
        return count;
    }
    
    public void quickSort(int[] arr, int[] power, int start, int end) {
        if (start < end) {
            int pivot = partition(arr, power, start, end);
            quickSort(arr, power, start, pivot - 1);
            quickSort(arr, power, pivot + 1, end);
        }
    }
    
    public int partition(int[] arr, int[] power, int start, int end) {
        int pivot = power[end];
        int i = start - 1;
        for (int j = start; j < end; j++) {
            if (power[j] < pivot || (power[j] == pivot && arr[j] < arr[end])) {
                i++;
                swap(arr, power, i, j);
            }
        }
        swap(arr, power, i + 1, end);
        return i + 1;

=======

        int[] power = new int[hi - lo + 1];
        int[] nums = new int[hi - lo + 1];
        for (int i = 0; i < nums.length; i++) {
            nums[i] = lo + i;
        }
        for (int i = 0; i < power.length; i++) {
            power[i] = getPower(nums[i]);
        }
        for (int i = 0; i < power.length; i++) {
            for (int j = i + 1; j < power.length; j++) {
                if (power[i] > power[j]) {
                    int tmp = power[i];
                    power[i] = power[j];
                    power[j] = tmp;
                    tmp = nums[i];
                    nums[i] = nums[j];
                    nums[j] = tmp;
                } else if (power[i] == power[j]) {
                    if (nums[i] > nums[j]) {
                        int tmp = power[i];
                        power[i] = power[j];
                        power[j] = tmp;
                        tmp = nums[i];
                        nums[i] = nums[j];
                        nums[j] = tmp;
                    }
                }
            }
        }
        return nums[k - 1];
    }

    private int getPower(int num) {
        int power = 0;
        while (num != 1) {
            if (num % 2 == 0) {
                num /= 2;
            } else {
                num = 3 * num + 1;
            }
            power++;
        }
        return power;

=======

        int[] powers = new int[hi - lo + 1];
        for (int i = lo; i <= hi; i++) {
            powers[i - lo] = getPower(i);
        }
        int[] sortedPowers = Arrays.copyOf(powers, powers.length);
        Arrays.sort(sortedPowers);
        int power = sortedPowers[k - 1];
        for (int i = 0; i < powers.length; i++) {
            if (powers[i] == power) {
                return i + lo;
            }
        }
        return 0;
    }

    private int getPower(int n) {
        int power = 0;
        while (n != 1) {
            if (n % 2 == 0) {
                n /= 2;
            } else {
                n = n * 3 + 1;
            }
            power++;
        }
        return power;

=======

        int[] power = new int[hi + 1];
        int[] nums = new int[hi - lo + 1];
        for (int i = lo; i <= hi; i++) {
            nums[i - lo] = i;
        }
        for (int i = 2; i <= hi; i++) {
            if (power[i] == 0) {
                int count = 0;
                int j = i;
                while (j != 1) {
                    if (j % 2 == 0) {
                        j /= 2;
                    } else {
                        j = 3 * j + 1;
                    }
                    count++;
                }
                power[i] = count;
            }
        }
        Arrays.sort(nums, (a, b) -> {
            if (power[a] == power[b]) {
                return a - b;
            } else {
                return power[a] - power[b];
            }
        });
        return nums[k - 1];

=======

        int[] powers = new int[hi - lo + 1];
        for (int i = lo; i <= hi; i++) {
            powers[i - lo] = power(i);
        }

        int[] sorted = powers.clone();
        Arrays.sort(sorted);

        int target = sorted[k - 1];
        for (int i = 0; i < powers.length; i++) {
            if (powers[i] == target) {
                return i + lo;
            }
        }

        return 0;
    }

    private int power(int x) {
        int power = 0;
        while (x != 1) {
            if (x % 2 == 0) {
                x /= 2;
            } else {
                x = 3 * x + 1;
            }
            power++;
        }
        return power;

=======

        int[] power = new int[hi + 1];
        for (int i = lo; i <= hi; i++) {
            power[i] = getPower(i, power);
        }
        int[] sorted = Arrays.copyOfRange(power, lo, hi + 1);
        Arrays.sort(sorted);
        for (int i = lo; i <= hi; i++) {
            if (power[i] == sorted[k - 1]) {
                return i;
            }
        }
        return -1;
    }
    private int getPower(int num, int[] power) {
        if (num == 1) {
            return 0;
        }
        if (num % 2 == 0) {
            return power[num / 2] + 1;
        } else {
            return power[3 * num + 1] + 1;
        }
