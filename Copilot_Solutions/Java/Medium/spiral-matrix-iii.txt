Synthesizing 10/10 solutions

=======

        int[][] res = new int[rows * cols][2];
        int[] dr = {0, 1, 0, -1};
        int[] dc = {1, 0, -1, 0};
        int dir = 0;
        int r = rStart;
        int c = cStart;
        int count = 0;
        while (count < rows * cols) {
            res[count++] = new int[]{r, c};
            int cr = r + dr[dir];
            int cc = c + dc[dir];
            if (0 <= cr && cr < rows && 0 <= cc && cc < cols) {
                r = cr;
                c = cc;
            } else {
                dir = (dir + 1) % 4;
            }
        }
        return res;

=======

        int[][] res = new int[rows*cols][2];
        int[] dr = {0, 1, 0, -1};
        int[] dc = {1, 0, -1, 0};
        int r = rStart, c = cStart, di = 0;
        for (int i = 0; i < rows*cols; i++) {
            res[i] = new int[]{r, c};
            r += dr[di];
            c += dc[di];
            if (r >= rows || r < 0 || c >= cols || c < 0 || (r == rStart && c == cStart)) {
                r -= dr[di];
                c -= dc[di];
                di = (di + 1) % 4;
                r += dr[di];
                c += dc[di];
            }
        }
        return res;

=======

        int[][] res = new int[rows * cols][2];
        int[][] dirs = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};
        int r = rStart, c = cStart, di = 0;
        for (int i = 0; i < rows * cols; i++) {
            res[i] = new int[]{r, c};
            r += dirs[di][0];
            c += dirs[di][1];
            if (r < 0 || c < 0 || r >= rows || c >= cols) {
                r -= dirs[di][0];
                c -= dirs[di][1];
                di = (di + 1) % 4;
                r += dirs[di][0];
                c += dirs[di][1];
            }
        }
        return res;

=======

        int[][] result = new int[rows * cols][2];
        int[][] dirs = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};
        int index = 0;
        result[index++] = new int[]{rStart, cStart};
        int step = 1;
        int dir = 0;
        while (index < rows * cols) {
            for (int i = 0; i < 2; i++) {
                for (int j = 0; j < step; j++) {
                    rStart += dirs[dir][0];
                    cStart += dirs[dir][1];
                    if (rStart >= 0 && rStart < rows && cStart >= 0 && cStart < cols) {
                        result[index++] = new int[]{rStart, cStart};
                    }
                }
                dir = (dir + 1) % 4;
            }
            step++;
        }
        return result;

=======

        int[][] result = new int[rows * cols][2];
        int[][] directions = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};
        int dir = 0;
        int steps = 0;
        int i = 0;
        result[i][0] = rStart;
        result[i][1] = cStart;
        i++;
        while (i < rows * cols) {
            if (dir == 0 || dir == 2) {
                steps++;
            }
            for (int j = 0; j < steps; j++) {
                rStart += directions[dir][0];
                cStart += directions[dir][1];
                if (rStart >= 0 && rStart < rows && cStart >= 0 && cStart < cols) {
                    result[i][0] = rStart;
                    result[i][1] = cStart;
                    i++;
                }
            }
            dir = (dir + 1) % 4;
        }
        return result;

=======

        int[][] result = new int[rows * cols][2];
        int[][] directions = new int[][]{{0, 1}, {1, 0}, {0, -1}, {-1, 0}};
        int index = 0;
        int step = 0;
        int direction = 0;
        while (index < rows * cols) {
            if (0 <= rStart && rStart < rows && 0 <= cStart && cStart < cols) {
                result[index][0] = rStart;
                result[index][1] = cStart;
                index++;
            }
            if (direction == 0 || direction == 2) {
                step++;
            }
            rStart += directions[direction][0];
            cStart += directions[direction][1];
            direction = (direction + 1) % 4;
            for (int i = 0; i < step; i++) {
                if (0 <= rStart && rStart < rows && 0 <= cStart && cStart < cols) {
                    result[index][0] = rStart;
                    result[index][1] = cStart;
                    index++;
                }
                rStart += directions[direction][0];
                cStart += directions[direction][1];
            }
        }
        return result;

=======

        int[][] res = new int[rows * cols][2];
        int[][] dir = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};
        int i = 0, j = 0, index = 0;
        res[index++] = new int[]{rStart, cStart};
        for (int step = 1; index < rows * cols; step++) {
            for (int k = 0; k < 2; k++) {
                for (int m = 0; m < step; m++) {
                    i += dir[k][0];
                    j += dir[k][1];
                    if (i >= 0 && i < rows && j >= 0 && j < cols) {
                        res[index++] = new int[]{i, j};
                    }
                }
            }
        }
        return res;

=======

        int[][] result = new int[rows * cols][2];
        int index = 0;
        int r = rStart, c = cStart;
        int rStep = 0, cStep = 1;
        int rStepMax = 1, cStepMax = 1;
        int step = 0;
        while (index < result.length) {
            result[index][0] = r;
            result[index][1] = c;
            index++;
            if (r + rStep >= 0 && r + rStep < rows && c + cStep >= 0 && c + cStep < cols) {
                r += rStep;
                c += cStep;
            } else {
                step++;
                if (step == rStepMax) {
                    step = 0;
                    int tmp = rStep;
                    rStep = cStep;
                    cStep = -tmp;
                }
                if (step == cStepMax) {
                    cStepMax++;
                }
            }
        }
        return result;

=======

        int[][] result = new int[rows * cols][];
        int r = rStart;
        int c = cStart;
        int direction = 0;
        int step = 0;
        int i = 0;
        while (i < rows * cols) {
            result[i++] = new int[]{r, c};
            if (direction == 0) {
                c++;
                if (c == cols || c == cols - 1) {
                    direction = 1;
                }
            } else if (direction == 1) {
                r++;
                if (r == rows || r == rows - 1) {
                    direction = 2;
                }
            } else if (direction == 2) {
                c--;
                if (c == 0 || c == 1) {
                    direction = 3;
                }
            } else if (direction == 3) {
                r--;
                if (r == 0 || r == 1) {
                    direction = 0;
                }
            }
            if (r >= rows || r < 0 || c >= cols || c < 0) {
                if (direction == 0) {
                    c--;
                    r++;
                } else if (direction == 1) {
                    r--;
                    c--;
                } else if (direction == 2) {
                    c++;
                    r--;
                } else if (direction == 3) {
                    r++;
                    c++;
                }
            }
        }
        return result;

=======

        int[][] res = new int[rows * cols][2];
        int index = 0;
        int x = rStart;
        int y = cStart;
        int step = 0;
        int[][] directions = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};
        int directionIndex = 0;
        while (index < rows * cols) {
            if (x >= 0 && x < rows && y >= 0 && y < cols) {
                res[index++] = new int[]{x, y};
            }
            if (directionIndex == 0 || directionIndex == 2) {
                step++;
            }
            x += directions[directionIndex][0];
            y += directions[directionIndex][1];
            directionIndex = (directionIndex + 1) % 4;
            for (int i = 0; i < step; i++) {
                if (x >= 0 && x < rows && y >= 0 && y < cols) {
                    res[index++] = new int[]{x, y};
                }
                x += directions[directionIndex][0];
                y += directions[directionIndex][1];
            }
            directionIndex = (directionIndex + 1) % 4;
        }
        return res;
