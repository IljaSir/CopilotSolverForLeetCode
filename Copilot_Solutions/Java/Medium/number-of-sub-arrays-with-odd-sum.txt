Synthesizing 10/10 solutions

=======

        int odd = 0;
        int even = 1;
        int sum = 0;
        int res = 0;
        for (int i = 0; i < arr.length; i++) {
            sum += arr[i];
            if (sum % 2 == 0) {
                res += odd;
                even++;
            } else {
                res += even;
                odd++;
            }
        }
        return res % 1000000007;

=======

        int n = arr.length;
        int[] sum = new int[n];
        sum[0] = arr[0];
        for (int i = 1; i < n; i++) {
            sum[i] = sum[i - 1] + arr[i];
        }
        int[] count = new int[2];
        for (int i = 0; i < n; i++) {
            count[sum[i] % 2]++;
        }
        return (int) ((count[0] * (count[0] + 1L) / 2 + count[1] * (count[1] + 1L) / 2) % 1000000007);

=======

        int odd = 0;
        int even = 1;
        int sum = 0;
        int result = 0;
        for (int n : arr) {
            sum += n;
            if (sum % 2 == 1) {
                result += even;
                odd++;
            } else {
                result += odd;
                even++;
            }
            result %= 1000000007;
        }
        return result;

=======

        int sum = 0;
        int result = 0;
        int odd = 0;
        int even = 1;
        for (int i = 0; i < arr.length; i++) {
            sum += arr[i];
            if (sum % 2 == 1) {
                result += even;
                odd++;
            } else {
                result += odd;
                even++;
            }
            result %= 1000000007;
        }
        return result;

=======

        int odd = 0, even = 1, sum = 0, res = 0;
        for (int num : arr) {
            sum += num;
            if ((sum & 1) == 1) {
                res = (res + even) % 1000000007;
                odd++;
            } else {
                res = (res + odd) % 1000000007;
                even++;
            }
        }
        return res;

=======

        int n = arr.length;
        int[] dp = new int[n + 1];
        dp[0] = 1;
        int sum = 0;
        int res = 0;
        for (int i = 0; i < n; i++) {
            sum += arr[i];
            res += dp[sum % 2];
            dp[sum % 2]++;
        }
        return res % 1000000007;

=======

        int sum = 0;
        int odd = 0;
        int even = 0;
        int mod = (int)1e9 + 7;
        for (int i = 0; i < arr.length; i++) {
            sum += arr[i];
            if (sum % 2 == 1) {
                odd++;
            } else {
                even++;
            }
        }
        return (odd * (odd + 1) / 2 + even * (even + 1) / 2) % mod;

=======

        int[] cnt = new int[2];
        int sum = 0;
        int res = 0;
        for (int i = 0; i < arr.length; i++) {
            sum += arr[i];
            cnt[sum % 2]++;
        }
        for (int i = 0; i < arr.length; i++) {
            res += cnt[sum % 2];
            sum -= arr[i];
            cnt[sum % 2]--;
        }
        return res;

=======

        long[] dp = new long[2];
        dp[0] = 1;
        long sum = 0;
        int mod = 1000000007;
        for (int i = 0; i < arr.length; i++) {
            sum += arr[i];
            dp[(int)sum % 2]++;
        }
        return (int) ((dp[0] * (dp[0] - 1) / 2 + dp[1] * (dp[1] - 1) / 2) % mod);

=======

        int[] dp = new int[2];
        dp[0] = 1;
        int s = 0;
        int r = 0;
        for (int i : arr) {
            s += i;
            r = (r + dp[s % 2]) % 1000000007;
            dp[s % 2]++;
        }
        return r;
