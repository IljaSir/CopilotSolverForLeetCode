Synthesizing 10/10 solutions

=======

        boolean[] visited = new boolean[rooms.size()];
        dfs(rooms, visited, 0);
        for (boolean v : visited) {
            if (!v) {
                return false;
            }
        }
        return true;
    }
    
    private void dfs(List<List<Integer>> rooms, boolean[] visited, int i) {
        visited[i] = true;
        for (int j : rooms.get(i)) {
            if (!visited[j]) {
                dfs(rooms, visited, j);
            }
        }

=======

        boolean[] visited = new boolean[rooms.size()];
        dfs(rooms, 0, visited);
        for (boolean v : visited) {
            if (!v) {
                return false;
            }
        }
        return true;
    }

    private void dfs(List<List<Integer>> rooms, int i, boolean[] visited) {
        if (visited[i]) {
            return;
        }
        visited[i] = true;
        for (int j : rooms.get(i)) {
            dfs(rooms, j, visited);
        }

=======

        boolean[] visited = new boolean[rooms.size()];
        dfs(rooms, 0, visited);
        for (boolean v: visited) {
            if (!v) return false;
        }
        return true;
    }
    
    private void dfs(List<List<Integer>> rooms, int room, boolean[] visited) {
        if (visited[room]) return;
        visited[room] = true;
        for (int key: rooms.get(room)) {
            dfs(rooms, key, visited);
        }

=======

        int n = rooms.size();
        boolean[] visited = new boolean[n];
        visited[0] = true;
        dfs(rooms, 0, visited);
        for (boolean v : visited) {
            if (!v) return false;
        }
        return true;
    }
    
    private void dfs(List<List<Integer>> rooms, int room, boolean[] visited) {
        for (int key : rooms.get(room)) {
            if (!visited[key]) {
                visited[key] = true;
                dfs(rooms, key, visited);
            }
        }

=======

        int n = rooms.size();
        boolean[] visited = new boolean[n];
        visited[0] = true;
        Queue<Integer> queue = new LinkedList<>();
        queue.add(0);
        while (!queue.isEmpty()) {
            int room = queue.poll();
            for (int key : rooms.get(room)) {
                if (!visited[key]) {
                    visited[key] = true;
                    queue.add(key);
                }
            }
        }
        for (boolean v : visited) {
            if (!v) {
                return false;
            }
        }
        return true;

=======

        int n = rooms.size();
        boolean[] visited = new boolean[n];
        visited[0] = true;
        Queue<Integer> q = new LinkedList<>();
        q.add(0);
        while (!q.isEmpty()) {
            int room = q.poll();
            for (int key : rooms.get(room)) {
                if (!visited[key]) {
                    visited[key] = true;
                    q.add(key);
                }
            }
        }
        for (boolean v : visited) {
            if (!v) {
                return false;
            }
        }
        return true;

=======

        boolean[] visited = new boolean[rooms.size()];
        visited[0] = true;
        dfs(rooms, visited, 0);
        for (int i=0; i<rooms.size(); i++) {
            if (!visited[i]) {
                return false;
            }
        }
        return true;
    }
    
    public void dfs(List<List<Integer>> rooms, boolean[] visited, int i) {
        for (int j: rooms.get(i)) {
            if (visited[j]) {
                continue;
            }
            visited[j] = true;
            dfs(rooms, visited, j);
        }

=======

        boolean[] visited = new boolean[rooms.size()];
        Queue<Integer> q = new LinkedList<>();
        q.offer(0);
        while (!q.isEmpty()) {
            int room = q.poll();
            if (visited[room]) {
                continue;
            }
            visited[room] = true;
            for (int i : rooms.get(room)) {
                q.offer(i);
            }
        }
        for (boolean v : visited) {
            if (!v) {
                return false;
            }
        }
        return true;

=======

        boolean[] visited = new boolean[rooms.size()];
        visit(rooms, 0, visited);
        for (boolean v : visited) {
            if (!v) return false;
        }
        return true;
    }
    void visit(List<List<Integer>> rooms, int i, boolean[] visited) {
        if (visited[i]) return;
        visited[i] = true;
        for (int j : rooms.get(i)) {
            visit(rooms, j, visited);
        }

=======

        int[] keys = new int[rooms.size()];
        keys[0] = 1;
        int keyCount = 1;
        Stack<Integer> stack = new Stack<>();
        stack.push(0);
        while (!stack.empty()) {
            int current = stack.pop();
            for (int key : rooms.get(current)) {
                if (keys[key] == 0) {
                    keys[key] = 1;
                    keyCount++;
                    stack.push(key);
                }
            }
        }
        return keyCount == rooms.size();
