Synthesizing 10/10 solutions

=======

        int[] res = new int[word.length()];
        int num = 0;
        for (int i = 0; i < word.length(); i++) {
            num = (num * 10 + word.charAt(i) - '0') % m;
            res[i] = num == 0 ? 1 : 0;
        }
        return res;

=======

        int n = word.length();
        int[] res = new int[n];
        int num = 0;
        for (int i = 0; i < n; i++) {
            num = (num * 10 + word.charAt(i) - '0') % m;
            res[i] = num == 0 ? 1 : 0;
        }
        return res;

=======

        int n = word.length();
        int[] res = new int[n];
        int mod = 0;
        for (int i = 0; i < n; i++) {
            mod = (mod * 10 + word.charAt(i) - '0') % m;
            res[i] = mod == 0 ? 1 : 0;
        }
        return res;

=======

        int[] result = new int[word.length()];
        int mod = 0;
        for (int i = 0; i < word.length(); i++) {
            mod = (mod * 10 + word.charAt(i) - '0') % m;
            result[i] = mod == 0 ? 1 : 0;
        }
        return result;

=======

        int n = word.length();
        int[] ans = new int[n];
        int r = 0;
        for (int i = 0; i < n; i++) {
            r = (r * 10 + word.charAt(i) - '0') % m;
            ans[i] = r == 0 ? 1 : 0;
        }
        return ans;

=======

        int[] res = new int[word.length()];
        long num = 0;
        for (int i = 0; i < word.length(); i++) {
            num = (num * 10 + word.charAt(i) - '0') % m;
            res[i] = num == 0 ? 1 : 0;
        }
        return res;

=======

        int[] result = new int[word.length()];
        int value = 0;
        for (int i = 0; i < word.length(); i++) {
            value = ((value * 10) + (word.charAt(i) - '0')) % m;
            result[i] = (value == 0) ? 1 : 0;
        }
        return result;

=======

        int[] div = new int[word.length()];
        int num = 0;
        for (int i = 0; i < word.length(); i++) {
            num = (num*10 + (word.charAt(i) - '0')) % m;
            div[i] = num == 0 ? 1 : 0;
        }
        return div;

=======

        int[] result = new int[word.length()];
        int p = 0;
        for (int i = 0; i < word.length(); i++) {
            p = ((p * 10) + (word.charAt(i) - '0')) % m;
            result[i] = p % m == 0 ? 1 : 0;
        }
        return result;

=======

        int n = word.length();
        int[] ret = new int[n];
        int[] dp = new int[n];
        int[] mod = new int[m];
        int[] pow = new int[n];
        int i, j, k, l;
        pow[0] = 1;
        for (i = 1; i < n; ++i) {
            pow[i] = (pow[i - 1] * 10) % m;
        }
        for (i = 0; i < n; ++i) {
            dp[i] = (word.charAt(i) - '0') % m;
            if (dp[i] == 0) {
                ++ret[i];
            }
        }
        for (i = 1; i < n; ++i) {
            for (j = 0; j < m; ++j) {
                mod[j] = 0;
            }
            for (j = 0; j < m; ++j) {
                if (mod[j] > 0) {
                    k = (j + dp[i] * pow[i]) % m;
                    mod[k] += mod[j];
                    ret[i] += mod[j];
                }
            }
            ++mod[dp[i]];
        }
        return ret;
