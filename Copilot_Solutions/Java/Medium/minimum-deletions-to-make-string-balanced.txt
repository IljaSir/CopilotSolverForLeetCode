Synthesizing 10/10 solutions

=======

        int n = s.length();
        int[] dp = new int[n];
        dp[0] = s.charAt(0) == 'b' ? 1 : 0;
        for (int i = 1; i < n; i++) {
            dp[i] = dp[i - 1] + (s.charAt(i) == 'b' ? 1 : 0);
        }
        int ans = dp[n - 1];
        for (int i = 0; i < n; i++) {
            int cur = i > 0 ? dp[i - 1] : 0;
            cur += dp[n - 1] - dp[i];
            if (s.charAt(i) == 'b') {
                cur++;
            }
            ans = Math.min(ans, cur);
        }
        return ans;

=======

        int n = s.length();
        int[] dp = new int[n];
        dp[0] = s.charAt(0) == 'a' ? 1 : 0;
        for (int i = 1; i < n; i++) {
            dp[i] = dp[i - 1] + (s.charAt(i) == 'a' ? 1 : 0);
        }
        int min = n;
        for (int i = 0; i < n; i++) {
            int a = dp[i];
            int b = n - i - 1 - (dp[n - 1] - dp[i]);
            min = Math.min(min, a + b);
        }
        return min;

=======

        int n = s.length();
        int[] a = new int[n + 1];
        int[] b = new int[n + 1];
        for (int i = 0; i < n; i++) {
            a[i + 1] = a[i] + (s.charAt(i) == 'a' ? 1 : 0);
            b[i + 1] = b[i] + (s.charAt(i) == 'b' ? 1 : 0);
        }
        int min = Integer.MAX_VALUE;
        for (int i = 0; i <= n; i++) {
            min = Math.min(min, n - a[i] - b[n] + b[i]);
        }
        return min;

=======

        int n = s.length();
        int[] pre = new int[n + 1];
        for (int i = 0; i < n; i++) {
            pre[i + 1] = pre[i] + (s.charAt(i) == 'a' ? 1 : 0);
        }
        int[] suf = new int[n + 1];
        for (int i = n - 1; i >= 0; i--) {
            suf[i] = suf[i + 1] + (s.charAt(i) == 'b' ? 1 : 0);
        }
        int ans = Integer.MAX_VALUE;
        for (int i = 0; i <= n; i++) {
            ans = Math.min(ans, pre[i] + suf[i]);
        }
        return ans;

=======

        int n = s.length();
        int[] dp = new int[n];
        if (s.charAt(n - 1) == 'a') {
            dp[n - 1] = 1;
        }
        for (int i = n - 2; i >= 0; i--) {
            if (s.charAt(i) == 'a') {
                dp[i] = dp[i + 1] + 1;
            } else {
                dp[i] = dp[i + 1];
            }
        }
        int res = dp[0];
        int b = 0;
        for (int i = 0; i < n; i++) {
            if (s.charAt(i) == 'b') {
                b++;
            }
            res = Math.min(res, b + dp[i + 1]);
        }
        return res;

=======

        int n = s.length();
        int[] b = new int[n];
        b[n-1] = s.charAt(n-1) == 'b' ? 1 : 0;
        for (int i = n-2; i >= 0; i--) {
            if (s.charAt(i) == 'b') {
                b[i] = b[i+1] + 1;
            } else {
                b[i] = b[i+1];
            }
        }
        int a = 0;
        int ans = n;
        for (int i = 0; i < n; i++) {
            ans = Math.min(ans, a + b[i]);
            if (s.charAt(i) == 'a') {
                a++;
            }
        }
        return ans;

=======

        int n = s.length();
        int[] a = new int[n];
        int[] b = new int[n];
        int count = 0;
        for (int i = 0; i < n; i++) {
            if (s.charAt(i) == 'a') {
                count++;
            }
            a[i] = count;
        }
        count = 0;
        for (int i = n - 1; i >= 0; i--) {
            if (s.charAt(i) == 'b') {
                count++;
            }
            b[i] = count;
        }
        int min = Integer.MAX_VALUE;
        for (int i = 0; i < n; i++) {
            min = Math.min(min, a[i] + b[i + 1]);
        }
        return min;

=======

        int n = s.length();
        int[] b = new int[n];
        b[n-1] = s.charAt(n-1) == 'b' ? 1 : 0;
        for (int i = n - 2; i >= 0; i--) {
            b[i] = b[i+1] + (s.charAt(i) == 'b' ? 1 : 0);
        }
        int a = 0;
        int res = n;
        for (int i = 0; i < n; i++) {
            if (s.charAt(i) == 'a') {
                a++;
            }
            res = Math.min(res, a + b[i]);
        }
        return res;

=======

        int n = s.length();
        int[] b = new int[n];
        int[] a = new int[n];
        if (s.charAt(n - 1) == 'b') {
            b[n - 1] = 1;
        }
        if (s.charAt(n - 1) == 'a') {
            a[n - 1] = 1;
        }
        for (int i = n - 2; i >= 0; i--) {
            b[i] = b[i + 1];
            a[i] = a[i + 1];
            if (s.charAt(i) == 'b') {
                b[i]++;
            }
            if (s.charAt(i) == 'a') {
                a[i]++;
            }
        }
        int min = Integer.MAX_VALUE;
        for (int i = 0; i < n; i++) {
            min = Math.min(a[i] + b[i], min);
        }
        return min;

=======

        int n = s.length();
        int[] a = new int[n];
        int[] b = new int[n];
        int[] ab = new int[n];
        int[] ba = new int[n];
        int[] abba = new int[n];
        a[0] = s.charAt(0) == 'a' ? 1 : 0;
        b[0] = s.charAt(0) == 'b' ? 1 : 0;
        for (int i = 1; i < n; i++) {
            a[i] = a[i - 1] + (s.charAt(i) == 'a' ? 1 : 0);
            b[i] = b[i - 1] + (s.charAt(i) == 'b' ? 1 : 0);
        }
        for (int i = 1; i < n; i++) {
            if (s.charAt(i) == 'a') {
                ab[i] = ab[i - 1];
                if (s.charAt(i - 1) == 'b') {
                    ab[i] = Math.max(ab[i], b[i - 1]);
                }
            } else {
                ab[i] = ab[i - 1];
                if (s.charAt(i - 1) == 'a') {
                    ab[i] = Math.max(ab[i], a[i - 1]);
                }
            }
        }
        for (int i = n - 2; i >= 0; i--) {
            if (s.charAt(i) == 'a') {
                ba[i] = ba[i + 1];
                if (s.charAt(i + 1) == 'b') {
                    ba[i] = Math.max(ba[i], b[i + 1]);
                }
            } else {
                ba[i] = ba[i + 1];
                if (s.charAt(i + 1) == 'a') {
                    ba[i] = Math.max(ba[i], a[i + 1]);
                }
            }
        }
        for (int i = 1; i < n - 1; i++) {
            if (s.charAt(i) == 'a') {
                abba[i] = ab[i - 1] + ba[i + 1];
                if (s.charAt(i - 1) == 'b') {
                    abba[i] = Math.max(abba
