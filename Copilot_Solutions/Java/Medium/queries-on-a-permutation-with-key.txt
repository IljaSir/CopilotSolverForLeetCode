Synthesizing 10/10 solutions

=======

        int[] p = new int[m];
        for (int i = 0; i < m; i++) {
            p[i] = i + 1;
        }
        int[] result = new int[queries.length];
        for (int i = 0; i < queries.length; i++) {
            int index = 0;
            for (int j = 0; j < m; j++) {
                if (p[j] == queries[i]) {
                    index = j;
                    break;
                }
            }
            result[i] = index;
            int temp = p[index];
            for (int j = index; j > 0; j--) {
                p[j] = p[j - 1];
            }
            p[0] = temp;
        }
        return result;

=======

        int[] p = new int[m];
        for (int i = 0; i < m; i++) {
            p[i] = i + 1;
        }
        int[] result = new int[queries.length];
        for (int i = 0; i < queries.length; i++) {
            int index = 0;
            for (int j = 0; j < m; j++) {
                if (p[j] == queries[i]) {
                    index = j;
                    break;
                }
            }
            result[i] = index;
            int tmp = p[index];
            for (int j = index; j > 0; j--) {
                p[j] = p[j - 1];
            }
            p[0] = tmp;
        }
        return result;

=======

        int[] p = new int[m];
        for (int i = 0; i < m; i++) {
            p[i] = i + 1;
        }
        int[] res = new int[queries.length];
        for (int i = 0; i < queries.length; i++) {
            int pos = 0;
            for (int j = 0; j < p.length; j++) {
                if (p[j] == queries[i]) {
                    pos = j;
                    break;
                }
            }
            res[i] = pos;
            int tmp = p[pos];
            for (int j = pos; j > 0; j--) {
                p[j] = p[j - 1];
            }
            p[0] = tmp;
        }
        return res;

=======

        int[] result = new int[queries.length];
        int[] p = new int[m];
        for (int i = 0; i < m; i++) {
            p[i] = i + 1;
        }
        for (int i = 0; i < queries.length; i++) {
            int j = 0;
            while (p[j] != queries[i]) {
                j++;
            }
            result[i] = j;
            int tmp = p[j];
            for (int k = j; k > 0; k--) {
                p[k] = p[k - 1];
            }
            p[0] = tmp;
        }
        return result;

=======

        int[] result = new int[queries.length];
        int[] P = new int[m];
        for (int i = 0; i < m; i++) {
            P[i] = i + 1;
        }
        for (int i = 0; i < queries.length; i++) {
            int pos = 0;
            for (int j = 0; j < m; j++) {
                if (P[j] == queries[i]) {
                    pos = j;
                    break;
                }
            }
            result[i] = pos;
            int temp = P[pos];
            for (int j = pos; j > 0; j--) {
                P[j] = P[j - 1];
            }
            P[0] = temp;
        }
        return result;

=======

        int[] p = new int[m];
        int[] res = new int[queries.length];
        for (int i = 0; i < m; i++) {
            p[i] = i + 1;
        }
        for (int i = 0; i < queries.length; i++) {
            int j = 0;
            while (p[j] != queries[i]) {
                j++;
            }
            res[i] = j;
            int tmp = p[j];
            for (int k = j; k > 0; k--) {
                p[k] = p[k - 1];
            }
            p[0] = tmp;
        }
        return res;

=======

        int[] result = new int[queries.length];
        int[] permutation = new int[m];
        for (int i = 0; i < m; i++) {
            permutation[i] = i + 1;
        }
        for (int i = 0; i < queries.length; i++) {
            for (int j = 0; j < m; j++) {
                if (permutation[j] == queries[i]) {
                    result[i] = j;
                    int temp = permutation[j];
                    for (int k = j; k > 0; k--) {
                        permutation[k] = permutation[k - 1];
                    }
                    permutation[0] = temp;
                    break;
                }
            }
        }
        return result;

=======

        int[] result = new int[queries.length];
        int[] arr = new int[m];
        for (int i = 0; i < m; i++) {
            arr[i] = i + 1;
        }
        for (int i = 0; i < queries.length; i++) {
            for (int j = 0; j < arr.length; j++) {
                if (arr[j] == queries[i]) {
                    result[i] = j;
                    int temp = arr[j];
                    for (int k = j; k > 0; k--) {
                        arr[k] = arr[k - 1];
                    }
                    arr[0] = temp;
                    break;
                }
            }
        }
        return result;

=======

        int[] res = new int[queries.length];
        int[] pos = new int[m];
        for (int i = 0; i < m; i++) {
            pos[i] = i;
        }
        for (int i = 0; i < queries.length; i++) {
            int p = queries[i] - 1;
            res[i] = pos[p];
            for (int j = 0; j < m; j++) {
                if (pos[j] < pos[p]) {
                    pos[j]++;
                }
            }
            pos[p] = 0;
        }
        return res;

=======

        int[] result = new int[queries.length];
        List<Integer> permutations = new ArrayList<>();
        for (int i = 1; i <= m; i++) {
            permutations.add(i);
        }
        for (int i = 0; i < queries.length; i++) {
            int index = permutations.indexOf(queries[i]);
            result[i] = index;
            permutations.remove(index);
            permutations.add(0, queries[i]);
        }
        return result;
