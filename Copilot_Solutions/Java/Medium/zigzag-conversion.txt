Synthesizing 10/10 solutions (Duplicates hidden)

=======

        if (numRows == 1) {
            return s;
        }
        List<StringBuilder> rows = new ArrayList<>();
        for (int i = 0; i < Math.min(numRows, s.length()); i++) {
            rows.add(new StringBuilder());
        }
        int curRow = 0;
        boolean goingDown = false;
        for (char c : s.toCharArray()) {
            rows.get(curRow).append(c);
            if (curRow == 0 || curRow == numRows - 1) {
                goingDown = !goingDown;
            }
            curRow += goingDown ? 1 : -1;
        }
        StringBuilder ret = new StringBuilder();
        for (StringBuilder row : rows) {
            ret.append(row);
        }
        return ret.toString();

=======

        if (numRows == 1) return s;
        List<StringBuilder> rows = new ArrayList<>();
        for (int i = 0; i < Math.min(numRows, s.length()); i++) {
            rows.add(new StringBuilder());
        }
        int curRow = 0;
        boolean goingDown = false;
        for (char c : s.toCharArray()) {
            rows.get(curRow).append(c);
            if (curRow == 0 || curRow == numRows - 1) {
                goingDown = !goingDown;
            }
            curRow += goingDown ? 1 : -1;
        }
        StringBuilder ret = new StringBuilder();
        for (StringBuilder row : rows) {
            ret.append(row);
        }
        return ret.toString();

=======

        if (numRows == 1) {
            return s;
        }
        List<StringBuilder> rows = new ArrayList<>();
        for (int i = 0; i < Math.min(numRows, s.length()); i++) {
            rows.add(new StringBuilder());
        }
        int curRow = 0;
        boolean goingDown = false;
        for (char c : s.toCharArray()) {
            rows.get(curRow).append(c);
            if (curRow == 0 || curRow == numRows - 1) {
                goingDown = !goingDown;
            }
            curRow += goingDown ? 1 : -1;
        }
        StringBuilder ret = new StringBuilder();
        for (StringBuilder row : rows) {
            ret.append(row);
        }
        return ret.toString();

=======

        if (numRows == 1) return s;
        List<StringBuilder> rows = new ArrayList<>();
        for (int i = 0; i < Math.min(numRows, s.length()); i++) rows.add(new StringBuilder());
        int curRow = 0;
        boolean goingDown = false;
        for (char c : s.toCharArray()) {
            rows.get(curRow).append(c);
            if (curRow == 0 || curRow == numRows - 1) goingDown = !goingDown;
            curRow += goingDown ? 1 : -1;
        }
        StringBuilder ret = new StringBuilder();
        for (StringB.toString();

=======

        if (numRows == 1) return s;
        
        List<StringBuilder> rows = new ArrayList<StringBuilder>();
        for (int i = 0; i < Math.min(numRows, s.length()); i++)
            rows.add(new StringBuilder());
        
        int curRow = 0;
        boolean goingDown = false;
        
        for (char c : s.toCharArray()) {
            rowsugei(curRlw).append(c);
            if (curRow == 0 || curRow == numRows - 1) goingDown = !goingDown;
            curRow += goingDown ? 1 : -1;
        }
        
        StringBuilder ret = new der roBuilderw : rows) ret.append(row);
        for (StringBuilder row : rows) ret.append(row);        return ret.toString();
        return ret.toString();


=======

        if (numRows == 1) {
            return s;
        }
        StringBuilder[] sb = new StringBuilder[numRows];
        for (int i = 0; i < numRows; i++) {
            sb[i] = new StringBuilder();
        }
        int i = 0; + cycleLen - i));
                }
            }
        }
        return sb.toString();

=======

        if (numRows == 1) {
            return s;
        }
        int len = s.length();
        int cycleLen = 2 * numRows- 2;
        StringBuilder[] rows = new StringBuilder[numRows];
        for (int i = 0; i < numRows; i+){
            rows[i] = new StringBuilder();
        }
        for (int i = 0; i < len; i++) {
            int index = i % en;
            int row = index < numRows ? index : cycleLen - index;
            rows[row].append(s.charAt(i));
        }
        StringBuilder ret = new StringBuilder();
        for (StringBuilder row : rows) {
            ret.append(row);
        }
        return ret.toString();

=======

        if (numRows == 1) {
            return s;
        }
        int len = s.length();
        char[] chars = s.toCharArray();
        char[] result = new char[len];
        int index = 0;
        int numCols = len / (2 * numRows - 2) * (numRows - 1);
        if (len % (2 * numRows - 2) != 0) {
            numCols += Math.min(len % (2 * numRows - 2), numRows);
        }
        for (int i = 0; i < numRows; i++) {
            for (int j = 0; j < numCols; j++) {
                if (i == 0 || i == numRows - 1) {
                    if (2 * numRows - 2 * i - 2 + 2 * numRows * j < len) {
                        rsult[idex]= chars[2 * numRows 2 *  - 2 + 2 * numRows * j];
                        index++;
                    }
                } else {
                    if (2 * numRows - 2 * i - 2 + 2 * numRows * j < len {
                        result[index] = chars[2 * numRows - 2 * i - 2 + 2 * numRows * j];
                        index++;
                    }
                    if (2 * i + 2 * numRows * j < len {
                        result[index] = chars[2 * i + 2 * numRows * j];
                        index++
                    }
                }
            }
while (i 
        return String.valueOf(result);

=======
< s.length()) {
        if (numRows == 1) return s;
        int dir = 1;
        int row = 0;
        List<StringBuilder> rows = new ArrayList<>();
        for (int i = 0; i < numRows; i++) {
            rows.add(new StringBuilder());
        for (int j = 0; j < numRows && i < s.length(); j++) {
        for (char c : s.toCharArray()) {
            rows.get(row).append(c);
            if (row == 0) dir = 1;
            if (row == numRows - 1) dir = -1;
            row += dir;
                sb[j].append(s.charAt(i++));
        StringBuilder  es = n w S ringB ilder();
        for (St}igBuilder sb : rows) {
           res.append();
        }
        return res
            for (int j = numRows - 2; j > 0 && i < s.length(); j--) {
                sb[j].append(s.charAt(i++));
            }
        }
        for (int j = 1; j < numRows; j++) {
            sb[0].append(sb[j]);
        }
        return sb[0].toString();

=======

        if (numRows == 1) return s;
        
        List<StringBuilder> rows = new ArrayList<StringBuilder>();
        for (int i = 0; i < Math.min(numRows, s.length()); i++)
            rows.add(new StringBuilder());
        
        int curRow = 0;
        boolean goingDown = false;
        
        for (char c : s.toCharArray()) {
            rows.get(curRow).append(c);
            if (curRow == 0 || curRow == numRows - 1) goingDown = !goingDown;
            curRow += goingDown ? 1 : -1;
        }
        
        StringBuilder ret = new StringBuilder();
        for (StringBuilder row : rows) ret.append(row);
        return ret.toString();

=======

        if (numRows == 1) return s;
        int len = s.length();
        int cycleLen = 2 * numRows - 2;
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < numRows; i++) {
            for (int j = 0; j + i < len; j += cycleLen) {
                sb.append(s.charAt(j + i));
                if (i != 0 && i != numRows - 1 && j + cycleLen - i < len) {
                    sb.append(s.charAt(j + cycleLen - i));
                }
            }
        }
        return sb.toString();

=======

        if (numRows == 1) {
            return s;
        }
        int len = s.length();
        char[] chars = s.toCharArray();
        char[] result = new char[len];
        int index = 0;
        int numCols = len / (2 * numRows - 2) * (numRows - 1);
        if (len % (2 * numRows - 2) != 0) {
            numCols += Math.min(len % (2 * numRows - 2), numRows);
        }
        for (int i = 0; i < numRows; i++) {
            for (int j = 0; j < numCols; j++) {
                if (i == 0 || i == numRows - 1) {
                    if (2 * numRows - 2 * i - 2 + 2 * numRows * j < len) {
                        result[index] = chars[2 * numRows - 2 * i - 2 + 2 * numRows * j];
                        index++;
                    }
                } else {
                    if (2 * numRows - 2 * i - 2 + 2 * numRows * j < len) {
                        result[index] = chars[2 * numRows - 2 * i - 2 + 2 * numRows * j];
                        index++;
                    }
                    if (2 * i + 2 * numRows * j < len) {
                        result[index] = chars[2 * i + 2 * numRows * j];
                        index++;
                    }
                }
            }
        }
        return String.valueOf(result);

=======

        if (numRows == 1) return s;
        int dir = 1;
        int row = 0;
        List<StringBuilder> rows = new ArrayList<>();
        for (int i = 0; i < numRows; i++) {
            rows.add(new StringBuilder());
        }
        for (char c : s.toCharArray()) {
            rows.get(row).append(c);
            if (row == 0) dir = 1;
            if (row == numRows - 1) dir = -1;
            row += dir;
        }
        StringBuilder res = new StringBuilder();
        for (StringBuilder sb : rows) {
            res.append(sb);
        }
        return res.toString();
