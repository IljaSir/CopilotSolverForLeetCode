Synthesizing 10/10 solutions

=======

        String[] words = sentence.split(" ");
        for (int i = 0; i < words.length; i++) {
            for (String root : dictionary) {
                if (words[i].startsWith(root)) {
                    words[i] = root;
                }
            }
        }
        return String.join(" ", words);

=======

        TrieNode root = new TrieNode();
        for (String word : dictionary) {
            TrieNode cur = root;
            for (char c : word.toCharArray()) {
                if (cur.children[c - 'a'] == null) {
                    cur.children[c - 'a'] = new TrieNode();
                }
                cur = cur.children[c - 'a'];
            }
            cur.word = word;
        }
        StringBuilder sb = new StringBuilder();
        for (String word : sentence.split("\\s+")) {
            if (sb.length() > 0) {
                sb.append(" ");
            }
            TrieNode cur = root;
            for (char c : word.toCharArray()) {
                if (cur.children[c - 'a'] == null || cur.word != null) {
                    break;
                }
                cur = cur.children[c - 'a'];
            }
            sb.append(cur.word != null ? cur.word : word);
        }
        return sb.toString();
    }
    class TrieNode {
        TrieNode[] children;
        String word;
        public TrieNode() {
            children = new TrieNode[26];
        }

=======

        Trie trie = new Trie();
        for (String root : dictionary) {
            trie.insert(root);
        }
        StringBuilder res = new StringBuilder();
        for (String word : sentence.split("\\s+")) {
            if (res.length() > 0) {
                res.append(" ");
            }
            TrieNode cur = trie.root;
            for (char c : word.toCharArray()) {
                if (cur.children[c - 'a'] == null || cur.word != null) {
                    break;
                }
                cur = cur.children[c - 'a'];
            }
            res.append(cur.word != null ? cur.word : word);
        }
        return res.toString();
    }
}

=======

        TrieNode root = new TrieNode();
        for (String word: dictionary) {
            TrieNode node = root;
            for (char c: word.toCharArray()) {
                if (node.children[c - 'a'] == null) {
                    node.children[c - 'a'] = new TrieNode();
                }
                node = node.children[c - 'a'];
            }
            node.word = word;
        }
        StringBuilder sb = new StringBuilder();
        for (String word: sentence.split("\\s+")) {
            if (sb.length() > 0) {
                sb.append(" ");
            }
            TrieNode node = root;
            for (char c: word.toCharArray()) {
                if (node.children[c - 'a'] == null || node.word != null) {
                    break;
                }
                node = node.children[c - 'a'];
            }
            sb.append(node.word != null ? node.word : word);
        }
        return sb.toString();
    }
}

=======

        Trie trie = new Trie();
        for (String root: dictionary) {
            trie.insert(root);
        }
        StringBuilder ans = new StringBuilder();
        for (String word: sentence.split("\\s+")) {
            String prefix = trie.search(word);
            if (prefix != null) {
                ans.append(prefix);
            } else {
                ans.append(word);
            }
            ans.append(" ");
        }
        return ans.toString().trim();
    }
}

=======

        Trie trie = new Trie();
        for (String word : dictionary) {
            trie.insert(word);
        }
        StringBuilder sb = new StringBuilder();
        for (String word : sentence.split(" ")) {
            if (sb.length() > 0) {
                sb.append(" ");
            }
            sb.append(trie.search(word));
        }
        return sb.toString();
    }
}

=======

        String[] words = sentence.split(" ");
        for (int i = 0; i < words.length; i++) {
            String word = words[i];
            for (String root: dictionary) {
                if (word.startsWith(root)) {
                    words[i] = root;
                    break;
                }
            }
        }
        return String.join(" ", words);

=======

        String[] words = sentence.split(" ");
        Trie trie = new Trie();
        for (String root : dictionary) {
            trie.insert(root);
        }
        for (int i = 0; i < words.length; i++) {
            String replace = trie.replace(words[i]);
            if (replace != null) {
                words[i] = replace;
            }
        }
        return String.join(" ", words);
    }
}

=======

        String[] words = sentence.split(" ");
        StringBuilder sb = new StringBuilder();
        for (String word : words) {
            String root = "";
            for (String d : dictionary) {
                if (word.startsWith(d)) {
                    if (root == "" || d.length() < root.length()) {
                        root = d;
                    }
                }
            }
            if (root == "") {
                sb.append(word);
            } else {
                sb.append(root);
            }
            sb.append(" ");
        }
        return sb.toString().trim();

=======

        String[] words = sentence.split(" ");
        StringBuilder sb = new StringBuilder();
        for (String word : words) {
            String root = "";
            for (String s : dictionary) {
                if (word.startsWith(s)) {
                    if (root.length() == 0 || s.length() < root.length()) {
                        root = s;
                    }
                }
            }
            if (root.length() > 0) {
                sb.append(root);
            } else {
                sb.append(word);
            }
            sb.append(" ");
        }
        return sb.toString().trim();
