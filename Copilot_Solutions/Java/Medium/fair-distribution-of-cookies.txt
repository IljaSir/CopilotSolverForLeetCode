Synthesizing 10/10 solutions

=======

        Arrays.sort(cookies);
        int min = Integer.MAX_VALUE;
        for (int i = 0; i < cookies.length - k + 1; i++) {
            min = Math.min(min, cookies[i + k - 1] - cookies[i]);
        }
        return min;

=======

        Arrays.sort(cookies);
        int min = Integer.MAX_VALUE;
        for (int i = 0; i < cookies.length - k + 1; i++) {
            int max = 0;
            for (int j = i; j < i + k; j++) {
                max += cookies[j];
            }
            min = Math.min(min, max - cookies[i] * k);
        }
        return min;

=======

        Arrays.sort(cookies);
        int n = cookies.length;
        int[][] dp = new int[n][k];
        dp[0][0] = cookies[0];
        for (int i = 1; i < n; i++) {
            dp[i][0] = dp[i - 1][0] + cookies[i];
        }
        for (int i = 1; i < n; i++) {
            for (int j = 1; j < k; j++) {
                if (j > i) {
                    dp[i][j] = Integer.MAX_VALUE;
                } else {
                    int min = Integer.MAX_VALUE;
                    for (int m = j - 1; m < i; m++) {
                        min = Math.min(min, dp[m][j - 1] + cookies[i] * (i - m));
                    }
                    dp[i][j] = min;
                }
            }
        }
        return dp[n - 1][k - 1];

=======

        Arrays.sort(cookies);
        int min = Integer.MAX_VALUE;
        for (int i = 0; i <= cookies.length - k; i++) {
            int max = Integer.MIN_VALUE;
            for (int j = i; j < i + k; j++) {
                max = Math.max(max, cookies[j]);
            }
            min = Math.min(min, max - cookies[i]);
        }
        return min;

=======

        Arrays.sort(cookies);
        int min = Integer.MAX_VALUE;
        for (int i = 0; i <= cookies.length - k; i++) {
            int max = 0;
            for (int j = 0; j < k; j++) {
                max += cookies[i + j];
            }
            min = Math.min(min, max - cookies[i] * k);
        }
        return min;

=======

        int n = cookies.length;
        Arrays.sort(cookies);
        int unfairness = Integer.MAX_VALUE;
        for (int i = 0; i + k <= n; i++) {
            unfairness = Math.min(unfairness, cookies[i + k - 1] - cookies[i]);
        }
        return unfairness;

=======

        Arrays.sort(cookies);
        int n = cookies.length;
        int[][] dp = new int[n][k + 1];
        int[][] sum = new int[n][n];
        for (int i = 0; i < n; i++) {
            for (int j = i; j < n; j++) {
                sum[i][j] = (i == j ? cookies[i] : sum[i][j - 1] + cookies[j]);
            }
        }
        for (int i = 0; i < n; i++) {
            for (int j = 1; j <= k; j++) {
                dp[i][j] = Integer.MAX_VALUE;
                for (int l = 0; l <= i; l++) {
                    if (j == 1) {
                        dp[i][j] = Math.min(dp[i][j], sum[l][i]);
                    } else {
                        dp[i][j] = Math.min(dp[i][j], dp[l][j - 1] + sum[l + 1][i]);
                    }
                }
            }
        }
        return dp[n - 1][k];

=======

        Arrays.sort(cookies);
        int unfairness = Integer.MAX_VALUE;
        for(int i = 0; i < cookies.length - k + 1; i++){
            int sum = 0;
            for(int j = 0; j < k; j++){
                sum += cookies[i + j];
            }
            unfairness = Math.min(unfairness, sum - cookies[i] * k);
        }
        return unfairness;

=======

        Arrays.sort(cookies);
        int min = Integer.MAX_VALUE;
        for(int i=0;i<cookies.length-k+1;i++){
            int unfairness = cookies[i+k-1] - cookies[i];
            min = Math.min(min, unfairness);
        }
        return min;

=======

        Arrays.sort(cookies);
        int len = cookies.length;
        int minUnfairness = Integer.MAX_VALUE;
        for (int i = 0; i + k - 1 < len; i++) {
            int max = cookies[i + k - 1];
            int min = cookies[i];
            minUnfairness = Math.min(minUnfairness, max - min);
        }
        return minUnfairness;
