Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int c = 0;
        int r = 0;
        int o = 0;
        int a = 0;
        int k = 0;
        int frogs = 0;
        int maxFrogs = 0;
        for (char ch : croakOfFrogs.toCharArray()) {
            switch (ch) {
                case 'c':
                    c++;
                    frogs++;
                    break;
                case 'r':
                    r++;
                    break;
                case 'o':
                    o++;
                    break;
                case 'a':
                    a++;
                    break;
                case 'k':
                    k++;
                    frogs--;
                    break;
            }
            if (c < r || r < o || o < a || a < k) {
                return -1;
            }
            maxFrogs = Math.max(maxFrogs, frogs);
        }
        return c == r && r == o && o == a && a == k ? maxFrogs : -1;

=======

        int c = 0;
        int r = 0;
        int o = 0;
        int a = 0;
        int k = 0;
        int frogs = 0;
        int max = 0;
        for (char ch: croakOfFrogs.toCharArray()) {
            if (ch == 'c') {
                c++;
                frogs++;
            } else if (ch == 'r') {
                r++;
            } else if (ch == 'o') {
                o++;
            } else if (ch == 'a') {
                a++;
            } else if (ch == 'k') {
                k++;
                frogs--;
            }
            if (c < r || r < o || o < a || a < k) {
                return -1;
            }
            max = Math.max(max, frogs);
        }
        if (c != r || r != o || o != a || a != k) {
            return -1;
        }
        return max;

=======

        int c = 0, r = 0, o = 0, a = 0, k = 0, frogs = 0, maxFrogs = 0;
        for (char ch : croakOfFrogs.toCharArray()) {
            switch (ch) {
                case 'c':
                    c++;
                    break;
                case 'r':
                    r++;
                    break;
                case 'o':
                    o++;
                    break;
                case 'a':
                    a++;
                    break;
                case 'k':
                    k++;
                    break;
            }
            if (c < r || r < o || o < a || a < k) return -1;
            if (ch == 'c') frogs++;
            if (ch == 'k') frogs--;
            maxFrogs = Math.max(maxFrogs, frogs);
        }
        if (c != r || r != o || o != a || a != k) return -1;
        return maxFrogs;

=======

        int c = 0;
        int r = 0;
        int o = 0;
        int a = 0;
        int k = 0;
        int frogs = 0;
        for (char ch : croakOfFrogs.toCharArray()) {
            switch (ch) {
                case 'c': {
                    c++;
                    frogs = Math.max(frogs, c);
                    break;
                }
                case 'r': {
                    if (c <= 0) {
                        return -1;
                    }
                    c--;
                    r++;
                    break;
                }
                case 'o': {
                    if (r <= 0) {
                        return -1;
                    }
                    r--;
                    o++;
                    break;
                }
                case 'a': {
                    if (o <= 0) {
                        return -1;
                    }
                    o--;
                    a++;
                    break;
                }
                case 'k': {
                    if (a <= 0) {
                        return -1;
                    }
                    a--;
                    k++;
                    break;
                }
            }
        }
        return frogs == c ? frogs : -1;

=======

        int c = 0, r = 0, o = 0, a = 0, k = 0;
        int max = 0;
        for (char ch : croakOfFrogs.toCharArray()) {
            if (ch == 'c') {
                c++;
            } else if (ch == 'r') {
                r++;
            } else if (ch == 'o') {
                o++;
            } else if (ch == 'a') {
                a++;
            } else {
                k++;
            }
            max = Math.max(max, c);
            if (r > c || o > r || a > o || k > a) {
                return -1;
            }
        }
        return c == r && r == o && o == a && a == k ? max : -1;

=======

        int[] count = new int[5];
        int frogs = 0;
        int maxFrogs = 0;
        for (char c : croakOfFrogs.toCharArray()) {
            int index = "croak".indexOf(c);
            count[index]++;
            if (index == 0) {
                frogs++;
                maxFrogs = Math.max(maxFrogs, frogs);
            } else if (index == 4) {
                frogs--;
            } else if (count[index] > count[index - 1]) {
                return -1;
            }
        }
        return frogs == 0 ? maxFrogs : -1;

=======

        int[] count = new int[5];
        int frogs = 0, max = 0;
        for (char c : croakOfFrogs.toCharArray()) {
            int idx = "croak".indexOf(c);
            count[idx]++;
            if (idx == 0) {
                frogs++;
                max = Math.max(max, frogs);
            }
            if (idx == 4) {
                frogs--;
            }
            if (frogs < 0 || count[idx] > count[idx - 1]) {
                return -1;
            }
        }
        return frogs == 0 ? max : -1;

=======

        int[] count = new int[5];
        int res = 0;
        int curr = 0;
        for (char c: croakOfFrogs.toCharArray()) {
            int i = "croak".indexOf(c);
            if (i == -1) return -1;
            if (i == 0) {
                curr++;
                res = Math.max(res, curr);
            } else if (count[i - 1] == 0) {
                return -1;
            } else {
                count[i - 1]--;
                curr--;
            }
            count[i]++;
        }
        return curr == 0 ? res : -1;

=======

        int[] counter = new int[5];
        int maxFrogs = 0;
        int frogs = 0;
        for (char c : croakOfFrogs.toCharArray()) {
            int i = "croak".indexOf(c);
            if (i == 0) {
                frogs++;
                maxFrogs = Math.max(maxFrogs, frogs);
            } else if (i == 4) {
                frogs--;
            } else if (counter[i - 1] == 0) {
                return -1;
            }
            counter[i]++;
            counter[(i + 1) % 5]--;
        }
        return frogs == 0 ? maxFrogs : -1;
