Synthesizing 10/10 solutions

=======

        Map<Integer, Integer> map = new HashMap<>();
        int count = 0;
        for (int num : nums) {
            if (map.containsKey(k - num) && map.get(k - num) > 0) {
                count++;
                map.put(k - num, map.get(k - num) - 1);
            } else {
                map.put(num, map.getOrDefault(num, 0) + 1);
            }
        }
        return count;

=======

        int count = 0;
        Map<Integer, Integer> map = new HashMap<>();
        for (int num : nums) {
            map.put(num, map.getOrDefault(num, 0) + 1);
        }
        for (int num : nums) {
            int complement = k - num;
            if (map.containsKey(complement) && map.get(complement) > 0) {
                map.put(complement, map.get(complement) - 1);
                map.put(num, map.get(num) - 1);
                count++;
            }
        }
        return count / 2;

=======

        Arrays.sort(nums);
        int l = 0, r = nums.length - 1;
        int res = 0;
        while (l < r) {
            if (nums[l] + nums[r] == k) {
                res++;
                l++;
                r--;
            } else if (nums[l] + nums[r] < k) {
                l++;
            } else {
                r--;
            }
        }
        return res;

=======

        Map<Integer, Integer> map = new HashMap<>();
        int ans = 0;
        for (int i : nums) {
            if (map.containsKey(k - i) && map.get(k - i) > 0) {
                ans++;
                map.put(k - i, map.get(k - i) - 1);
            } else {
                map.put(i, map.getOrDefault(i, 0) + 1);
            }
        }
        return ans;

=======

        int count = 0;
        Map<Integer, Integer> map = new HashMap<>();
        for(int i = 0; i < nums.length; i++) {
            if(map.containsKey(k - nums[i]) && map.get(k - nums[i]) > 0) {
                count++;
                map.put(k - nums[i], map.get(k - nums[i]) - 1);
            } else {
                map.put(nums[i], map.getOrDefault(nums[i], 0) + 1);
            }
        }
        return count;

=======

        int count = 0;
        Map<Integer, Integer> map = new HashMap<>();
        for (int i : nums) {
            int diff = k - i;
            if (map.containsKey(diff) && map.get(diff) > 0) {
                count++;
                map.put(diff, map.get(diff) - 1);
            } else {
                map.put(i, map.getOrDefault(i, 0) + 1);
            }
        }
        return count;

=======

        Map<Integer, Integer> map = new HashMap<>();
        int ans = 0;
        for (int i = 0; i < nums.length; i++) {
            int num = nums[i];
            if (map.containsKey(k - num)) {
                int count = map.get(k - num);
                if (count == 1) {
                    map.remove(k - num);
                } else {
                    map.put(k - num, count - 1);
                }
                ans++;
            } else {
                map.put(num, map.getOrDefault(num, 0) + 1);
            }
        }
        return ans;

=======

        int count = 0;
        HashMap<Integer, Integer> map = new HashMap<>();
        for (int i = 0; i < nums.length; i++) {
            int num = nums[i];
            if (map.containsKey(k - num) && map.get(k - num) > 0) {
                count++;
                map.put(k - num, map.get(k - num) - 1);
            } else {
                map.put(num, map.getOrDefault(num, 0) + 1);
            }
        }
        return count;

=======

        int result = 0;
        Map<Integer, Integer> map = new HashMap<>();
        for (int num: nums) {
            int target = k - num;
            if (map.containsKey(target) && map.get(target) > 0) {
                map.put(target, map.get(target) - 1);
                result++;
            } else {
                map.put(num, map.getOrDefault(num, 0) + 1);
            }
        }
        return result;

=======

        int[] map = new int[1000001];
        int count = 0;
        for (int i = 0; i < nums.length; i++) {
            if (map[k - nums[i]] > 0) {
                map[k - nums[i]]--;
                count++;
            } else {
                map[nums[i]]++;
            }
        }
        return count;
