Synthesizing 10/10 solutions

=======

        int n = s.length();
        int[] prefix = new int[n];
        prefix[0] = s.charAt(0) - '0';
        for (int i = 1; i < n; i++) {
            prefix[i] = prefix[i - 1] ^ (s.charAt(i) - '0');
        }
        int[][] ans = new int[queries.length][2];
        for (int i = 0; i < queries.length; i++) {
            int first = queries[i][0];
            int second = queries[i][1];

            int left = -1;
            int right = -1;
            for (int j = 0; j < n; j++) {
                int val = prefix[j] ^ first;
                if (val == second) {
                    left = j;
                    break;
                }
            }
            if (left != -1) {
                for (int j = n - 1; j >= 0; j--) {
                    int val = prefix[j] ^ first;
                    if (val == second) {
                        right = j;
                        break;
                    }
                }
            }
            ans[i][0] = left;
            ans[i][1] = right;
        }
        return ans;

=======

        int n = s.length();
        int[] a = new int[n+1];
        for (int i = 0; i < n; i++) {
            a[i+1] = a[i] ^ (s.charAt(i) - '0');
        }
        int[][] ans = new int[queries.length][2];
        for (int i = 0; i < queries.length; i++) {
            int first = queries[i][0], second = queries[i][1];
            int l = 0, r = n;
            while (l < r) {
                int mid = l + r + 1 >> 1;
                if ((a[mid] ^ first) == second) {
                    l = mid;
                } else {
                    r = mid - 1;
                }
            }
            if (l == n) {
                ans[i] = new int[]{-1, -1};
            } else {
                ans[i] = new int[]{l, r};
            }
        }
        return ans;

=======

        int[][] res = new int[queries.length][2];
        int[] dp = new int[s.length()];
        dp[0] = s.charAt(0) - '0';
        for (int i = 1; i < s.length(); i++) {
            dp[i] = dp[i - 1] ^ (s.charAt(i) - '0');
        }
        for (int i = 0; i < queries.length; i++) {
            int first = queries[i][0];
            int second = queries[i][1];
            int idx = -1;
            for (int j = 0; j < s.length(); j++) {
                if (dp[j] == (first ^ second)) {
                    idx = j;
                    break;
                }
            }
            if (idx == -1) {
                res[i][0] = -1;
                res[i][1] = -1;
            } else {
                int left = idx;
                int right = idx;
                for (int j = idx; j >= 0; j--) {
                    if ((dp[j] ^ first) == second) {
                        left = j;
                    } else {
                        break;
                    }
                }
                for (int j = idx; j < s.length(); j++) {
                    if ((dp[j] ^ first) == second) {
                        right = j;
                    } else {
                        break;
                    }
                }
                res[i][0] = left;
                res[i][1] = right;
            }
        }
        return res;

=======

        int n = s.length();
        int[] prefix = new int[n+1];
        for (int i = 0; i < n; i++) {
            prefix[i+1] = prefix[i] ^ (s.charAt(i) - '0');
        }
        int[][] res = new int[queries.length][2];
        for (int i = 0; i < queries.length; i++) {
            int[] q = queries[i];
            int v = prefix[q[0]] ^ q[1];
            int l = q[0];
            int r = n;
            while (l < r) {
                int m = l + (r - l) / 2;
                if ((prefix[m+1] ^ prefix[q[0]]) == v) {
                    l = m + 1;
                } else {
                    r = m;
                }
            }
            if (l == n) {
                res[i] = new int[]{-1, -1};
            } else {
                res[i] = new int[]{q[0], l};
            }
        }
        return res;

=======

        int n = s.length();
        int[] xor = new int[n];
        xor[0] = s.charAt(0) - '0';
        for (int i = 1; i < n; ++i) {
            xor[i] = xor[i - 1] ^ (s.charAt(i) - '0');
        }
        int m = queries.length;
        int[][] ans = new int[m][2];
        for (int i = 0; i < m; ++i) {
            int first = queries[i][0];
            int second = queries[i][1];
            int lo = 0;
            int hi = n - 1;
            int left = -1;
            int right = -1;
            while (lo <= hi) {
                int mid = lo + (hi - lo) / 2;
                int val = xor[mid];
                if (mid > 0) {
                    val ^= xor[mid - 1];
                }
                if ((val ^ first) == second) {
                    left = mid;
                    hi = mid - 1;
                } else if ((val ^ first) > second) {
                    lo = mid + 1;
                } else {
                    hi = mid - 1;
                }
            }
            if (left == -1) {
                ans[i][0] = -1;
                ans[i][1] = -1;
                continue;
            }
            lo = left;
            hi = n - 1;
            while (lo <= hi) {
                int mid = lo + (hi - lo) / 2;
                int val = xor[mid];
                if (mid > 0) {
                    val ^= xor[mid - 1];
                }
                if ((val ^ first) == second) {
                    right = mid;
                    lo = mid + 1;
                } else if ((val ^ first) > second) {
                    lo = mid + 1;
                } else {
                    hi = mid - 1;
                }
            }
            ans[i][0] = left;
            ans[i][1] = right;
        }
        return ans;

=======

        int n = s.length();
        int[][] ans = new int[queries.length][2];
        int[] prefix = new int[n];
        prefix[0] = s.charAt(0) - '0';
        for (int i = 1; i < n; i++) {
            prefix[i] = prefix[i - 1] ^ (s.charAt(i) - '0');
        }
        for (int i = 0; i < queries.length; i++) {
            ans[i][0] = -1;
            ans[i][1] = -1;
            int first = queries[i][0];
            int second = queries[i][1];
            for (int j = 0; j < n; j++) {
                int xor = first;
                if (j > 0) {
                    xor ^= prefix[j - 1];
                }
                if (xor == second) {
                    ans[i][0] = j;
                }
                if (ans[i][0] != -1 && prefix[j] == second) {
                    ans[i][1] = j;
                    break;
                }
            }
        }
        return ans;

=======

        int n = s.length();
        int[][] ans = new int[queries.length][2];
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = s.charAt(i) - '0';
        }
        int[] dp = new int[n];
        dp[0] = a[0];
        for (int i = 1; i < n; i++) {
            dp[i] = dp[i - 1] ^ a[i];
        }
        for (int i = 0; i < queries.length; i++) {
            int[] q = queries[i];
            int l = -1, r = -1;
            for (int j = 0; j < n; j++) {
                if ((dp[j] ^ q[0]) == q[1]) {
                    l = j;
                    break;
                }
            }
            if (l == -1) {
                ans[i][0] = -1;
                ans[i][1] = -1;
                continue;
            }
            for (int j = n - 1; j >= l; j--) {
                if ((dp[j] ^ q[0]) == q[1]) {
                    r = j;
                    break;
                }
            }
            ans[i][0] = l;
            ans[i][1] = r;
        }
        return ans;

=======

        int n = s.length();
        int[][] result = new int[queries.length][2];
        int[] prefix = new int[n + 1];
        for (int i = 0; i < n; i++) {
            prefix[i + 1] = prefix[i] ^ (s.charAt(i) - '0');
        }
        for (int i = 0; i < queries.length; i++) {
            int first = queries[i][0];
            int second = queries[i][1];
            int xor = first ^ second;
            int index = -1;
            for (int j = 0; j <= n; j++) {
                if (prefix[j] == xor) {
                    index = j;
                    break;
                }
            }
            if (index == -1) {
                result[i][0] = -1;
                result[i][1] = -1;
            } else {
                int left = -1;
                int right = -1;
                for (int j = 0; j < index; j++) {
                    if ((prefix[j] ^ first) == second) {
                        left = j;
                        break;
                    }
                }
                for (int j = n; j > index; j--) {
                    if ((prefix[j] ^ first) == second) {
                        right = j;
                        break;
                    }
                }
                result[i][0] = left;
                result[i][1] = right;
            }
        }
        return result;

=======

        int[] arr = new int[s.length()];
        int[] prefix = new int[s.length() + 1];
        for (int i = 0; i < s.length(); i++) {
            arr[i] = s.charAt(i) - '0';
            prefix[i + 1] = prefix[i] ^ arr[i];
        }
        int[][] ans = new int[queries.length][2];
        for (int i = 0; i < queries.length; i++) {
            int first = queries[i][0];
            int second = queries[i][1];
            int left = -1, right = -1;
            for (int j = 0; j < s.length(); j++) {
                if (left == -1 && (prefix[j + 1] ^ first) == second) {
                    left = j;
                }
                if (left != -1 && (prefix[s.length()] ^ prefix[left]) == second) {
                    right = s.length() - 1;
                }
                if (left != -1 && right == -1 && (prefix[j + 1] ^ prefix[left]) == second) {
                    right = j;
                }
            }
            ans[i] = new int[]{left, right};
        }
        return ans;

=======

        int[][] res = new int[queries.length][2];
        for(int i=0; i<queries.length; i++) {
            int[] q = queries[i];
            int val = q[0];
            int xor = q[1];
            int left = -1;
            int right = -1;
            int curr = 0;
            for(int j=0; j<s.length(); j++) {
                curr = curr<<1;
                curr = curr|s.charAt(j)-'0';
                if (j>=31) {
                    curr = curr & 0x7fffffff;
                }
                if (curr == (val ^ xor)) {
                    left = j-31;
                    right = j;
                    break;
                }
            }
            res[i][0] = left;
            res[i][1] = right;
        }
        return res;
    }
}
