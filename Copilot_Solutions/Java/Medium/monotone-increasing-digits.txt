Synthesizing 10/10 solutions

=======

        char[] chars = String.valueOf(n).toCharArray();
        int i = 1;
        while (i < chars.length && chars[i - 1] <= chars[i]) {
            i++;
        }
        if (i < chars.length) {
            while (i > 0 && chars[i - 1] > chars[i]) {
                chars[i - 1]--;
                i--;
            }
            for (i = i + 1; i < chars.length; i++) {
                chars[i] = '9';
            }
        }
        return Integer.parseInt(new String(chars));

=======

        char[] digits = String.valueOf(n).toCharArray();
        int i = 1;
        while (i < digits.length && digits[i - 1] <= digits[i]) {
            i++;
        }
        if (i < digits.length) {
            while (i > 0 && digits[i - 1] > digits[i]) {
                digits[i - 1]--;
                i--;
            }
            for (i = i + 1; i < digits.length; i++) {
                digits[i] = '9';
            }
        }
        return Integer.parseInt(new String(digits));

=======

        char[] arr = String.valueOf(n).toCharArray();
        int i = 1;
        while (i < arr.length && arr[i - 1] <= arr[i]) {
            i++;
        }
        if (i < arr.length) {
            while (i > 0 && arr[i - 1] > arr[i]) {
                arr[i - 1]--;
                i--;
            }
            for (i++; i < arr.length; i++) {
                arr[i] = '9';
            }
        }
        return Integer.parseInt(new String(arr));

=======

        String s = Integer.toString(n);
        int i = 1;
        while (i < s.length() && s.charAt(i - 1) <= s.charAt(i)) {
            i++;
        }
        if (i < s.length()) {
            while (i > 0 && s.charAt(i - 1) > s.charAt(i)) {
                s = s.substring(0, i - 1) + (char)(s.charAt(i - 1) - 1) + "9".repeat(s.length() - i);
                i--;
            }
        }
        return Integer.parseInt(s);

=======

        char[] a = String.valueOf(n).toCharArray();
        int i = 1;
        while (i < a.length && a[i - 1] <= a[i]) {
            i++;
        }
        if (i < a.length) {
            while (i > 0 && a[i - 1] > a[i]) {
                a[i - 1]--;
                i--;
            }
            for (i++; i < a.length; i++) {
                a[i] = '9';
            }
        }
        return Integer.parseInt(String.valueOf(a));

=======

        char[] s = String.valueOf(n).toCharArray();
        int i = 1;
        while (i < s.length && s[i - 1] <= s[i]) i++;
        while (0 < i && i < s.length && s[i - 1] > s[i]) s[--i]--;
        for (i++; i < s.length; i++) s[i] = '9';
        return Integer.parseInt(new String(s));

=======

        String s = String.valueOf(n);
        int[] a = new int[s.length()];
        for (int i = 0; i < s.length(); i++) {
            a[i] = s.charAt(i) - '0';
        }
        int i = 1;
        while (i < a.length && a[i - 1] <= a[i]) {
            i++;
        }
        if (i < a.length) {
            while (i > 0 && a[i - 1] > a[i]) {
                a[i - 1]--;
                i--;
            }
            for (i++; i < a.length; i++) {
                a[i] = 9;
            }
        }
        int res = 0;
        for (i = 0; i < a.length; i++) {
            res = res * 10 + a[i];
        }
        return res;

=======

        String s = String.valueOf(n);
        char[] c = s.toCharArray();
        int i = 1;
        while (i < c.length && c[i - 1] <= c[i]) {
            i++;
        }
        if (i < c.length) {
            while (i > 0 && c[i - 1] > c[i]) {
                c[i - 1]--;
                i--;
            }
            for (int j = i + 1; j < c.length; j++) {
                c[j] = '9';
            }
        }
        return Integer.parseInt(String.valueOf(c));

=======

        int[] digits = new int[11];
        int i = 0;
        while (n > 0) {
            digits[i++] = n % 10;
            n /= 10;
        }
        int k = i;
        while (i > 0) {
            if (digits[i - 1] > digits[i]) {
                digits[i - 1]--;
                k = i;
            }
            i--;
        }
        while (k < 10) {
            digits[k++] = 9;
        }
        int ans = 0;
        while (i < 10) {
            ans = ans * 10 + digits[i++];
        }
        return ans;

=======

        String s = String.valueOf(n);
        char[] chars = s.toCharArray();
        int nlen = chars.length;
        int i = 0;
        while (i < nlen - 1 && chars[i] <= chars[i + 1]) {
            i++;
        }
        if (i == nlen - 1) {
            return n;
        }
        while (i > 0 && chars[i] == chars[i - 1]) {
            i--;
        }
        chars[i]--;
        for (int j = i + 1; j < nlen; j++) {
            chars[j] = '9';
        }
        return Integer.parseInt(String.valueOf(chars));
