Synthesizing 10/10 solutions (Duplicates hidden)

=======

def possibleBipartition(self, n: int, dislikes: List[List[int]]) -> bool:
        graph = collections.defaultdict(list)
        for a, b in dislikes:
            graph[a].append(b)
            graph[b].append(a)
        color = {}
        def dfs(node, c = 0):
            if node in color:
                return color[node] == c
            color[node] = c
            return all(dfs(nei, c ^ 1) for nei in graph[node])
        return all(dfs(node) for node in range(1, n+1) if node not in color)

=======

def possibleBipartition(self, n: int, dislikes: List[List[int]]) -> bool:
        graph = [[] for _ in range(n)]
        for a, b in dislikes:
            graph[a-1].append(b-1)
            graph[b-1].append(a-1)
        color = [0] * n
        for i in range(n):
            if color[i] == 0:
                color[i] = 1
                q = [i]
                while q:
                    c = q.pop(0)
                    for j in graph[c]:
                        if color[j] == color[c]:
                            return False
                        if color[j] == 0:
                            color[j] = -color[c]
                            q.append(j)
        return True

=======

def possibleBipartition(self, n: int, dislikes: List[List[int]]) -> bool:
        graph = defaultdict(list)
        for a, b in dislikes:
            graph[a].append(b)
            graph[b].append(a)
        color = {}
        def dfs(node, c = 0):
            if node in color:
                return color[node] == c
            color[node] = c
            return all(dfs(nei, c ^ 1) for nei in graph[node])
        return all(dfs(node) for node in range(1, n + 1) if node not in color)

=======

def possibleBipartition(self, n: int, dislikes: List[List[int]]) -> bool:
        graph = [[] for _ in range(n+1)]
        for a, b in dislikes:
            graph[a].append(b)
            graph[b].append(a)
        color = [0] * (n+1)
        def dfs(node, c):
            if color[node] != 0:
                return color[node] == c
            color[node] = c
            return all(dfs(nei, -c) for nei in graph[node])
        return all(dfs(i, 1) for i in range(1, n+1) if color[i] == 0)

=======

def possibleBipartition(self, n: int, dislikes: List[List[int]]) -> bool:
        graph = collections.defaultdict(list)
        for u, v in dislikes:
            graph[u].append(v)
            graph[v].append(u)
        colors = [0] * (n + 1)
        for i in range(1, n + 1):
            if colors[i] == 0:
                colors[i] = 1
                queue = collections.deque([i])
                while queue:
                    node = queue.popleft()
                    for nei in graph[node]:
                        if colors[nei] == 0:
                            colors[nei] = -colors[node]
                            queue.append(nei)
                        elif colors[nei] == colors[node]:
                            return False
        return True

=======

def possibleBipartition(self, n: int, dislikes: List[List[int]]) -> bool:
        g = [[] for _ in range(n)]
        for a, b in dislikes:
            g[a-1].append(b-1)
            g[b-1].append(a-1)
        color = [-1] * n
        for i in range(n):
            if color[i] == -1:
                color[i] = 0
                q = [i]
                while q:
                    c = q.pop()
                    for v in g[c]:
                        if color[v] == -1:
                            color[v] = 1 - color[c]
                            q.append(v)
                        elif color[v] == color[c]:
                            return False
        return True

=======

def possibleBipartition(self, n: int, dislikes: List[List[int]]) -> bool:
        # build graph
        graph = [[] for _ in range(n)]
        for a, b in dislikes:
            graph[a-1].append(b-1)
            graph[b-1].append(a-1)
        
        # BFS
        colors = [0 for _ in range(n)]
        for i in range(n):
            if colors[i] == 0:
                colors[i] = 1
                queue = [i]
                while queue:
                    node = queue.pop(0)
                    for neighbor in graph[node]:
                        if colors[neighbor] == colors[node]:
                            return False
                        if colors[neighbor] == 0:
                            colors[neighbor] = -colors[node]
                            queue.append(neighbor)
        return True

=======

def possibleBipartition(self, n: int, dislikes: List[List[int]]) -> bool:
        # graph
        graph = [[] for _ in range(n)]
        for a, b in dislikes:
            graph[a-1].append(b-1)
            graph[b-1].append(a-1)
        # color
        color = [0] * n
        for i in range(n):
            if color[i] == 0:
                color[i] = 1
                stack = [i]
                while stack:
                    node = stack.pop()
                    for nei in graph[node]:
                        if color[nei] == color[node]:
                            return False
                        if color[nei] == 0:
                            color[nei] = -color[node]
                            stack.append(nei)
        return True

=======

def possibleBipartition(self, n: int, dislikes: List[List[int]]) -> bool:
        # 1. Build graph
        graph = [[] for _ in range(n + 1)]
        for a, b in dislikes:
            graph[a].append(b)
            graph[b].append(a)
            
        # 2. DFS
        def dfs(node, color):
            if node in color:
                return color[node] == 1
            color[node] = 1
            for nei in graph[node]:
                if not dfs(nei, color):
                    return False
            color[node] = -1
            return True
        
        color = {}
        for i in range(1, n + 1):
            if i not in color and not dfs(i, color):
                return False
        return True
