Synthesizing 10/10 solutions

=======

def longestMountain(self, arr: List[int]) -> int:
        n = len(arr)
        if n < 3:
            return 0
        res = 0
        for i in range(1, n-1):
            if arr[i-1] < arr[i] and arr[i+1] < arr[i]:
                l = i-1
                while l > 0 and arr[l-1] < arr[l]:
                    l -= 1
                r = i+1
                while r < n-1 and arr[r] > arr[r+1]:
                    r += 1
                res = max(res, r-l+1)
        return res

=======

def longestMountain(self, arr: List[int]) -> int:
        n = len(arr)
        if n < 3:
            return 0
        up = [0]*n
        down = [0]*n
        for i in range(1, n):
            if arr[i] > arr[i-1]:
                up[i] = up[i-1] + 1
        for i in range(n-2, -1, -1):
            if arr[i] > arr[i+1]:
                down[i] = down[i+1] + 1
        ans = 0
        for i in range(n):
            if up[i] and down[i]:
                ans = max(ans, up[i]+down[i]+1)
        return ans

=======

def longestMountain(self, arr: List[int]) -> int:
        if len(arr) < 3:
            return 0
        max_len = 0
        for i in range(1, len(arr)-1):
            if arr[i] > arr[i-1] and arr[i] > arr[i+1]:
                l = i
                r = i
                while l > 0 and arr[l] > arr[l-1]:
                    l -= 1
                while r < len(arr)-1 and arr[r] > arr[r+1]:
                    r += 1
                max_len = max(max_len, r-l+1)
        return max_len

=======

def longestMountain(self, arr: List[int]) -> int:
        if len(arr) < 3:
            return 0
        max_len = 0
        i = 1
        while i < len(arr) - 1:
            if arr[i-1] < arr[i] and arr[i] > arr[i+1]:
                l = i - 1
                r = i + 1
                while l > 0 and arr[l-1] < arr[l]:
                    l -= 1
                while r < len(arr) - 1 and arr[r] > arr[r+1]:
                    r += 1
                max_len = max(max_len, r - l + 1)
                i = r
            i += 1
        return max_len

=======

def longestMountain(self, arr: List[int]) -> int:
        if len(arr) < 3:
            return 0
        max_len = 0
        i = 1
        while i < len(arr) - 1:
            if arr[i] > arr[i - 1] and arr[i] > arr[i + 1]:
                left = i - 1
                right = i + 1
                while left > 0 and arr[left] > arr[left - 1]:
                    left -= 1
                while right < len(arr) - 1 and arr[right] > arr[right + 1]:
                    right += 1
                max_len = max(max_len, right - left + 1)
                i = right
            i += 1
        return max_len

=======

def longestMountain(self, arr: List[int]) -> int:
        if len(arr) < 3: return 0
        max_len = 0
        for i in range(1, len(arr) - 1):
            if arr[i] > arr[i - 1] and arr[i] > arr[i + 1]:
                left = i - 1
                right = i + 1
                while left - 1 >= 0 and arr[left - 1] < arr[left]:
                    left -= 1
                while right + 1 < len(arr) and arr[right + 1] < arr[right]:
                    right += 1
                max_len = max(max_len, right - left + 1)
        return max_len

=======

def longestMountain(self, arr: List[int]) -> int:
        if len(arr) < 3:
            return 0
        i = 0
        j = 1
        res = 0
        while j < len(arr):
            if arr[j] > arr[j-1]:
                j += 1
            elif arr[j] == arr[j-1]:
                i = j
                j += 1
            else:
                k = j
                while k < len(arr) and arr[k] < arr[k-1]:
                    k += 1
                if k > j:
                    res = max(res, k-i)
                i = k-1
                j = k
        return res

=======

def longestMountain(self, arr: List[int]) -> int:
        if len(arr) < 3: return 0
        ans = 0
        i = 0
        while i < len(arr) - 1:
            j = i
            while j < len(arr) - 1 and arr[j] < arr[j + 1]:
                j += 1
            k = j
            while k < len(arr) - 1 and arr[k] > arr[k + 1]:
                k += 1
            if i < j and j < k:
                ans = max(ans, k - i + 1)
            i = max(j, k)
        return ans

=======

def longestMountain(self, arr: List[int]) -> int:
        if len(arr) < 3:
            return 0
        i = 0
        j = 1
        res = 0
        while j < len(arr):
            if arr[j] == arr[j-1]:
                i = j
                j += 1
            elif arr[j] < arr[j-1]:
                if i != j - 1:
                    while j < len(arr) and arr[j] < arr[j-1]:
                        j += 1
                    res = max(res, j - i)
                i = j
                j += 1
            else:
                j += 1
        return res

=======

def longestMountain(self, arr: List[int]) -> int:
        max_len = 0
        i = 1
        n = len(arr)
        while i < n:
            if arr[i] > arr[i-1]:
                j = i
                while j < n and arr[j] > arr[j-1]:
                    j += 1
                if j < n and arr[j] < arr[j-1]:
                    while j < n and arr[j] < arr[j-1]:
                        j += 1
                    max_len = max(max_len, j - i + 1)
                i = j
            else:
                i += 1
        return max_len
