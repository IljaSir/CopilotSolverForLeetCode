Synthesizing 10/10 solutions

=======

def knightProbability(self, n: int, k: int, row: int, column: int) -> float:
        dirs = [(1, 2), (2, 1), (-1, 2), (2, -1), (1, -2), (-2, 1), (-1, -2), (-2, -1)]
        dp = [[0] * n for _ in range(n)]
        dp[row][column] = 1
        for _ in range(k):
            dp2 = [[0] * n for _ in range(n)]
            for r, row in enumerate(dp):
                for c, val in enumerate(row):
                    for dr, dc in dirs:
                        if 0 <= r + dr < n and 0 <= c + dc < n:
                            dp2[r + dr][c + dc] += val / 8.0
            dp = dp2
        return sum(map(sum, dp))

=======

def knightProbability(self, n: int, k: int, row: int, column: int) -> float:
        def dfs(r, c, k):
            if r < 0 or r >= n or c < 0 or c >= n:
                return 0
            if k == 0:
                return 1
            if (r, c, k) in cache:
                return cache[(r, c, k)]
            cache[(r, c, k)] = sum(dfs(r + dr, c + dc, k - 1) for dr, dc in dirs) / 8
            return cache[(r, c, k)]
        
        cache = {}
        dirs = [(-1, -2), (-1, 2), (1, -2), (1, 2), (-2, -1), (-2, 1), (2, -1), (2, 1)]
        return dfs(row, column, k)

=======

def knightProbability(self, n: int, k: int, row: int, column: int) -> float:
        def dfs(row, column, k):
            if row < 0 or row >= n or column < 0 or column >= n:
                return 0
            if k == 0:
                return 1
            if (row, column, k) in cache:
                return cache[(row, column, k)]
            cache[(row, column, k)] = 0.125 * (dfs(row + 1, column + 2, k - 1) + dfs(row + 2, column + 1, k - 1) + dfs(row + 1, column - 2, k - 1) + dfs(row + 2, column - 1, k - 1) + dfs(row - 1, column + 2, k - 1) + dfs(row - 2, column + 1, k - 1) + dfs(row - 1, column - 2, k - 1) + dfs(row - 2, column - 1, k - 1))
            return cache[(row, column, k)]
        cache = {}
        return dfs(row, column, k)

=======

def knightProbability(self, n: int, k: int, row: int, column: int) -> float:
        if k == 0:
            return 1
        if n == 1:
            return 1
        moves = [(-1, -2), (-1, 2), (1, -2), (1, 2), (-2, -1), (-2, 1), (2, -1), (2, 1)]
        dp = [[0 for _ in range(n)] for _ in range(n)]
        dp[row][column] = 1
        for _ in range(k):
            dp2 = [[0 for _ in range(n)] for _ in range(n)]
            for r in range(n):
                for c in range(n):
                    for dr, dc in moves:
                        if 0 <= r + dr < n and 0 <= c + dc < n:
                            dp2[r + dr][c + dc] += dp[r][c] / 8
            dp = dp2
        return sum(map(sum, dp))

=======

def knightProbability(self, n: int, k: int, row: int, column: int) -> float:
        self.dp = [[[0 for _ in range(n)] for _ in range(n)] for _ in range(k+1)]
        self.dirs = [(-1, -2), (-2, -1), (-2, 1), (-1, 2), (1, -2), (2, -1), (2, 1), (1, 2)]
        return self.dfs(n, k, row, column)

=======

def knightProbability(self, n: int, k: int, row: int, column: int) -> float:
        def getNeighbours(r, c):
            for dr, dc in [(-2, -1), (-2, 1), (2, -1), (2, 1), (-1, -2), (-1, 2), (1, -2), (1, 2)]:
                nr = r + dr
                nc = c + dc
                if 0 <= nr < n and 0 <= nc < n:
                    yield nr, nc
        
        dp = [[0] * n for _ in range(n)]
        dp[row][column] = 1
        for _ in range(k):
            ndp = [[0] * n for _ in range(n)]
            for r in range(n):
                for c in range(n):
                    if dp[r][c] > 0:
                        for nr, nc in getNeighbours(r, c):
                            ndp[nr][nc] += dp[r][c] / 8
            dp = ndp
        
        return sum(map(sum, dp))

=======

def knightProbability(self, n: int, k: int, row: int, column: int) -> float:
        
        pass

=======

def knightProbability(self, n: int, k: int, row: int, column: int) -> float:
        if k == 0:
            return 1
        if n == 1:
            return 1
        if k > n * n:
            return 1
        dp = [[0 for _ in range(n)] for _ in range(n)]
        dp[row][column] = 1
        for _ in range(k):
            dp2 = [[0 for _ in range(n)] for _ in range(n)]
            for i in range(n):
                for j in range(n):
                    for (di, dj) in [(1, 2), (2, 1), (-1, 2), (-2, 1), (1, -2), (2, -1), (-1, -2), (-2, -1)]:
                        if 0 <= i + di < n and 0 <= j + dj < n:
                            dp2[i + di][j + dj] += dp[i][j] / 8
            dp = dp2
        return sum(map(sum, dp))

=======

def knightProbability(self, n: int, k: int, row: int, column: int) -> float:
        if n == 1: return 1
        if k == 0: return 1
        if k == 1: return 0.125
        moves = [[-2, -1], [-2, 1], [2, -1], [2, 1], [-1, -2], [-1, 2], [1, -2], [1, 2]]
        dp = [[0] * n for _ in range(n)]
        dp[row][column] = 1
        for i in range(k):
            dp2 = [[0] * n for _ in range(n)]
            for r in range(n):
                for c in range(n):
                    for dr, dc in moves:
                        if 0 <= r + dr < n and 0 <= c + dc < n:
                            dp2[r + dr][c + dc] += dp[r][c] / 8
            dp = dp2
        return sum(map(sum, dp))

=======

def knightProbability(self, n: int, k: int, row: int, column: int) -> float:
        if k == 0:
            return 1.0
        if n <= 1:
            return 0.0
        move = [[-2,-1], [-2,1], [-1,2], [1,2], [2,1], [2,-1], [1,-2], [-1,-2]]
        dp = [[0.0 for _ in range(n)] for _ in range(n)]
        dp[row][column] = 1.0
        for _ in range(k):
            tmp = [[0.0 for _ in range(n)] for _ in range(n)]
            for i in range(n):
                for j in range(n):
                    for m in move:
                        x = i + m[0]
                        y = j + m[1]
                        if x >= 0 and x < n and y >= 0 and y < n:
                            tmp[x][y] += dp[i][j] / 8
            dp = tmp
        return sum([sum(i) for i in dp])
