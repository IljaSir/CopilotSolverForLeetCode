Synthesizing 10/10 solutions (Duplicates hidden)

=======

def singleNonDuplicate(self, nums: List[int]) -> int:
        if len(nums) == 1:
            return nums[0]
        if nums[0] != nums[1]:
            return nums[0]
        if nums[-1] != nums[-2]:
            return nums[-1]
        left = 0
        right = len(nums)-1
        while left < right:
            mid = (left+right)//2
            if nums[mid] != nums[mid-1] and nums[mid] != nums[mid+1]:
                return nums[mid]
            if mid % 2 == 0:
                if nums[mid] == nums[mid-1]:
                    right = mid-1
                else:
                    left = mid+1
            else:
                if nums[mid] == nums[mid+1]:
                    left = mid+1
                else:
                    right = mid-1

=======

def singleNonDuplicate(self, nums: List[int]) -> int:
        n = len(nums)
        if n == 1:
            return nums[0]
        if nums[0] != nums[1]:
            return nums[0]
        if nums[n-1] != nums[n-2]:
            return nums[n-1]
        l, r = 0, n-1
        while l <= r:
            m = (l+r)//2
            if nums[m] != nums[m-1] and nums[m] != nums[m+1]:
                return nums[m]
            if (m%2 == 0 and nums[m] == nums[m+1]) or (m%2 == 1 and nums[m] == nums[m-1]):
                l = m+1
            else:
                r = m-1

=======

def singleNonDuplicate(self, nums: List[int]) -> int:
        n = len(nums)
        if n == 1:
            return nums[0]
        if nums[0] != nums[1]:
            return nums[0]
        if nums[n-1] != nums[n-2]:
            return nums[n-1]
        l, r = 0, n-1
        while l < r:
            m = (l+r)//2
            if nums[m] != nums[m-1] and nums[m] != nums[m+1]:
                return nums[m]
            if (m % 2 == 0 and nums[m] == nums[m+1]) or (m % 2 == 1 and nums[m] == nums[m-1]):
                l = m+1
            else:
                r = m-1

=======

def singleNonDuplicate(self, nums: List[int]) -> int:
        n = len(nums)
        if n == 1:
            return nums[0]
        if nums[0] != nums[1]:
            return nums[0]
        if nums[n-1] != nums[n-2]:
            return nums[n-1]
        l, r = 0, n-1
        while l <= r:
            m = (l + r) // 2
            if nums[m] != nums[m-1] and nums[m] != nums[m+1]:
                return nums[m]
            if m % 2 == 0:
                if nums[m] == nums[m-1]:
                    r = m-2
                else:
                    l = m+2
            else:
                if nums[m] == nums[m-1]:
                    l = m+1
                else:
                    r = m-1

=======

def singleNonDuplicate(self, nums: List[int]) -> int:
        i = 0
        while i < len(nums) - 1:
            if nums[i] != nums[i+1]:
                return nums[i]
            i += 2
        return nums[-1]

=======

def singleNonDuplicate(self, nums: List[int]) -> int:
        l, r = 0, len(nums)-1
        while l < r:
            mid = (l + r) // 2
            if mid % 2 == 1:
                mid -= 1
            if nums[mid] == nums[mid+1]:
                l = mid + 2
            else:
                r = mid
        return nums[l]

=======

def singleNonDuplicate(self, nums: List[int]) -> int:
        i = 0
        while i < len(nums):
            if i == len(nums) - 1:
                return nums[i]
            if nums[i] == nums[i+1]:
                i += 2
            else:
                return nums[i]

=======

def singleNonDuplicate(self, nums: List[int]) -> int:
        if len(nums)==1:
            return nums[0]
        for i in range(1,len(nums)-1):
            if nums[i]!=nums[i-1] and nums[i]!=nums[i+1]:
                return nums[i]
        if nums[0]!=nums[1]:
            return nums[0]
        if nums[-1]!=nums[-2]:
            return nums[-1]

=======

def singleNonDuplicate(self, nums: List[int]) -> int:
        n = len(nums)
        if n == 1:
            return nums[0]
        mid = n // 2
        if mid == 0:
            return nums[mid]
        if mid % 2 == 0:
            if nums[mid] == nums[mid-1]:
                return self.singleNonDuplicate(nums[mid+1:])
            else:
                return self.singleNonDuplicate(nums[:mid])
        else:
            if nums[mid] == nums[mid-1]:
                return self.singleNonDuplicate(nums[:mid-1])
            else:
                return self.singleNonDuplicate(nums[mid+1:])
