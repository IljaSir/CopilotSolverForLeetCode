Synthesizing 10/10 solutions (Duplicates hidden)

=======

def countPrimes(self, n: int) -> int:
        if n < 3:
            return 0
        primes = [True] * n
        primes[0] = primes[1] = False
        for i in range(2, int(n**0.5) + 1):
            if primes[i]:
                primes[i*i: n: i] = [False] * len(primes[i*i: n: i])
        return sum(primes)

=======

def countPrimes(self, n: int) -> int:
        if n <= 2:
            return 0
        primes = [True] * n
        primes[0] = primes[1] = False
        for i in range(2, int(n**0.5)+1):
            if primes[i]:
                primes[i*i:n:i] = [False] * len(primes[i*i:n:i])
        return sum(primes)

=======

def countPrimes(self, n: int) -> int:
        if n < 3:
            return 0
        is_prime = [True] * n
        is_prime[0] = is_prime[1] = False
        for i in range(2, int(n ** 0.5) + 1):
            if is_prime[i]:
                is_prime[i*i: n: i] = [False] * len(is_prime[i*i: n: i])
        return sum(is_prime)

=======

def countPrimes(self, n: int) -> int:
        if n < 3: return 0
        isPrime = [True] * n
        isPrime[0] = isPrime[1] = False
        for i in range(2, int(n ** 0.5) + 1):
            if isPrime[i]:
                isPrime[i*i:n:i] = [False] * len(isPrime[i*i:n:i])
        return sum(isPrime)

=======

def countPrimes(self, n: int) -> int:
        if n < 2:
            return 0
        isPrime = [True] * n
        isPrime[0] = False
        isPrime[1] = False
        for i in range(2, int(n**0.5)+1):
            if isPrime[i]:
                isPrime[i*i:n:i] = [False] * len(isPrime[i*i:n:i])
        return sum(isPrime)

=======

def countPrimes(self, n: int) -> int:
        if n <= 2:
            return 0
        prime = [True] * n
        prime[0] = prime[1] = False
        for i in range(2, int(n**0.5) + 1):
            if prime[i]:
                prime[i*i:n:i] = [False] * len(prime[i*i:n:i])
        return sum(prime)

=======

def countPrimes(self, n: int) -> int:
        if n < 3:
            return 0
        res = 0
        for i in range(2, n):
            if self.isPrime(i):
                res += 1
        return res
