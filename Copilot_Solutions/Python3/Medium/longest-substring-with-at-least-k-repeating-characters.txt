Synthesizing 10/10 solutions

=======

def longestSubstring(self, s: str, k: int) -> int:
        if len(s) < k: return 0
        for c in set(s):
            if s.count(c) < k:
                return max(self.longestSubstring(t, k) for t in s.split(c))
        return len(s)

=======

def longestSubstring(self, s: str, k: int) -> int:
        if len(s) < k:
            return 0
        d = {}
        for c in s:
            if c not in d:
                d[c] = 1
            else:
                d[c] += 1
        for c in d:
            if d[c] < k:
                return max(self.longestSubstring(t, k) for t in s.split(c))
        return len(s)

=======

def longestSubstring(self, s: str, k: int) -> int:
        if len(s) < k:
            return 0
        if k <= 1:
            return len(s)
        for c in set(s):
            if s.count(c) < k:
                return max(self.longestSubstring(t, k) for t in s.split(c))
        return len(s)

=======

def longestSubstring(self, s: str, k: int) -> int:
        if len(s) < k:
            return 0
        c = Counter(s)
        for i in range(len(s)):
            if c[s[i]] < k:
                return max(self.longestSubstring(s[:i], k), self.longestSubstring(s[i+1:], k))
        return len(s)

=======

def longestSubstring(self, s: str, k: int) -> int:
        if len(s) < k:
            return 0
        if k <= 1:
            return len(s)
        counter = collections.Counter(s)
        for c in counter:
            if counter[c] < k:
                return max(self.longestSubstring(t, k) for t in s.split(c))
        return len(s)

=======

def longestSubstring(self, s: str, k: int) -> int:
        if len(s) < k:
            return 0
        elif len(set(s)) < k:
            return len(s)
        else:
            for c in set(s):
                if s.count(c) < k:
                    return max(self.longestSubstring(t, k) for t in s.split(c))
            return len(s)

=======

def longestSubstring(self, s: str, k: int) -> int:
        if k <= 1:
            return len(s)
        if len(s) < k:
            return 0
        count = Counter(s)
        for c in count:
            if count[c] < k:
                return max(self.longestSubstring(t, k) for t in s.split(c))
        return len(s)

=======

def longestSubstring(self, s: str, k: int) -> int:
        counts = collections.Counter(s)
        for c, count in counts.items():
            if count < k:
                return max(self.longestSubstring(t, k) for t in s.split(c))
        return len(s)

=======

def longestSubstring(self, s: str, k: int) -> int:
        if len(s) < k:
            return 0
        if k == 1:
            return len(s)
        c = Counter(s)
        for i in range(len(s)):
            if c[s[i]] < k:
                return max(self.longestSubstring(s[:i], k), self.longestSubstring(s[i+1:], k))
        return len(s)

=======

def longestSubstring(self, s: str, k: int) -> int:
        if len(s) < k:
            return 0
        if k <= 1:
            return len(s)
        c = collections.Counter(s)
        d = [i for i in c if c[i] < k]
        if not d:
            return len(s)
        return max(self.longestSubstring(t, k) for t in s.split(d[0]))
