Synthesizing 10/10 solutions

=======

def validSquare(self, p1: List[int], p2: List[int], p3: List[int], p4: List[int]) -> bool:
        
        def dist(p1, p2):
            return (p1[0] - p2[0])**2 + (p1[1] - p2[1])**2
        
        p = [p1, p2, p3, p4]
        p.sort()
        d = [dist(p[0], p[1]), dist(p[0], p[2]), dist(p[0], p[3]), dist(p[1], p[2]), dist(p[1], p[3]), dist(p[2], p[3])]
        d.sort()
        return d[0] == d[1] == d[2] == d[3] and d[4] == d[5] and d[4] != d[0]

=======

def validSquare(self, p1: List[int], p2: List[int], p3: List[int], p4: List[int]) -> bool:
        points = [p1, p2, p3, p4]
        points.sort()
        def dist(p1, p2):
            return (p1[0]-p2[0])**2 + (p1[1]-p2[1])**2
        return dist(points[0], points[1]) != 0 and \
               dist(points[0], points[1]) == dist(points[1], points[3]) and \
               dist(points[1], points[3]) == dist(points[3], points[2]) and \
               dist(points[3], points[2]) == dist(points[2], points[0]) and \
               dist(points[0], points[3]) == dist(points[1], points[2])

=======

def validSquare(self, p1: List[int], p2: List[int], p3: List[int], p4: List[int]) -> bool:
        
        def dist(x1, y1, x2, y2):
            return (x1 - x2) ** 2 + (y1 - y2) ** 2
        
        points = [p1, p2, p3, p4]
        points.sort()
        p1, p2, p3, p4 = points
        return dist(*p1, *p2) > 0 and dist(*p1, *p2) == dist(*p2, *p3) == dist(*p3, *p4) == dist(*p4, *p1) and dist(*p1, *p3) == dist(*p2, *p4)

=======

def validSquare(self, p1: List[int], p2: List[int], p3: List[int], p4: List[int]) -> bool:
        def dist(p1, p2):
            return (p1[0] - p2[0])**2 + (p1[1] - p2[1])**2
        def check(p1, p2, p3, p4):
            d1 = dist(p1, p2)
            d2 = dist(p1, p3)
            d3 = dist(p1, p4)
            if d1 == 0 or d2 == 0 or d3 == 0:
                return False
            if d1 == d2 and 2*d1 == d3 and 2*dist(p2, p3) == dist(p2, p4):
                return True
            if d1 == d3 and 2*d1 == d2 and 2*dist(p2, p4) == dist(p2, p3):
                return True
            if d2 == d3 and 2*d2 == d1 and 2*dist(p3, p4) == dist(p3, p2):
                return True
            return False
        return check(p1, p2, p3, p4) or check(p1, p3, p2, p4) or check(p1, p4, p2, p3)

=======

def validSquare(self, p1: List[int], p2: List[int], p3: List[int], p4: List[int]) -> bool:
        p = [p1, p2, p3, p4]
        p.sort()
        def dist(x, y):
            return (x[0]-y[0])**2 + (x[1]-y[1])**2
        return dist(p[0], p[1]) == dist(p[1], p[3]) == dist(p[3], p[2]) == dist(p[2], p[0]) and dist(p[0], p[3]) == dist(p[1], p[2]) and dist(p[0], p[1]) != 0

=======

def validSquare(self, p1: List[int], p2: List[int], p3: List[int], p4: List[int]) -> bool:
        def dist(p1, p2):
            return (p1[0]-p2[0])**2 + (p1[1]-p2[1])**2
        def is_right(p1, p2, p3):
            return dist(p1, p2) + dist(p2, p3) == dist(p1, p3)
        def is_square(p1, p2, p3, p4):
            return dist(p1, p2) == dist(p1, p3) == dist(p1, p4) and dist(p2, p3) == dist(p2, p4) and dist(p3, p4) == dist(p2, p3)
        
        return is_square(p1, p2, p3, p4) and is_right(p1, p2, p3)

=======

def validSquare(self, p1: List[int], p2: List[int], p3: List[int], p4: List[int]) -> bool:
        def dist(p1, p2):
            return (p1[0] - p2[0])**2 + (p1[1] - p2[1])**2
        def isSquare(p1, p2, p3, p4):
            d1 = dist(p1, p2)
            d2 = dist(p1, p3)
            d3 = dist(p1, p4)
            if d1 == 0 or d2 == 0 or d3 == 0:
                return False
            if d1 == d2 and 2*d1 == d3 and 2*dist(p2, p3) == dist(p2, p4):
                return True
            if d1 == d3 and 2*d1 == d2 and 2*dist(p2, p4) == dist(p2, p3):
                return True
            if d2 == d3 and 2*d2 == d1 and 2*dist(p3, p4) == dist(p3, p2):
                return True
            return False
        return isSquare(p1, p2, p3, p4) or isSquare(p1, p3, p2, p4)

=======

def validSquare(self, p1: List[int], p2: List[int], p3: List[int], p4: List[int]) -> bool:
        def dist(p1,p2):
            return (p1[0]-p2[0])**2+(p1[1]-p2[1])**2
        def isRight(p1,p2,p3):
            return dist(p1,p2)==dist(p2,p3)==dist(p3,p1)
        def isSquare(p1,p2,p3,p4):
            return dist(p1,p2)==dist(p2,p3)==dist(p3,p4)==dist(p4,p1)
        def isRectangle(p1,p2,p3,p4):
            return dist(p1,p2)==dist(p2,p3)==dist(p3,p4)==dist(p4,p1)
        if isRight(p1,p2,p3) and isSquare(p1,p2,p3,p4):
            return True
        if isRight(p1,p2,p4) and isSquare(p1,p2,p4,p3):
            return True
        if isRight(p1,p3,p4) and isSquare(p1,p3,p4,p2):
            return True
        return False

=======

def validSquare(self, p1: List[int], p2: List[int], p3: List[int], p4: List[int]) -> bool:
        
        def dis(a, b):
            return (a[0]-b[0])**2+(a[1]-b[1])**2
        a = dis(p1, p2)
        b = dis(p1, p3)
        c = dis(p1, p4)
        if a == 0 or b == 0 or c == 0:
            return False
        if a == b == c:
            return dis(p2, p4) == dis(p3, p4) == a
        if a == b:
            return dis(p2, p4) == dis(p3, p2) == a
        if b == c:
            return dis(p2, p3) == dis(p3, p4) == b
        if a == c:
            return dis(p2, p3) == dis(p2, p4) == a
        return False

=======

def validSquare(self, p1: List[int], p2: List[int], p3: List[int], p4: List[int]) -> bool:
        
        pass
