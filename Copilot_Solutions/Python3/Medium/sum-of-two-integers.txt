Synthesizing 10/10 solutions (Duplicates hidden)

=======

def getSum(self, a: int, b: int) -> int:
        pass

=======

def getSum(self, a: int, b: int) -> int:
        while b:
            a, b = (a^b) & 0xffffffff, ((a&b) << 1) & 0xffffffff
        return a if a <= 0x7fffffff else ~(a^0xffffffff)

=======

def getSum(self, a: int, b: int) -> int:
        mask = 0xffffffff
        while b & mask != 0:
            carry = (a & b) << 1
            a = a ^ b
            b = carry
        return (a & mask) if b > mask else a

=======

def getSum(self, a: int, b: int) -> int:
        return sum([a, b])

=======

def getSum(self, a: int, b: int) -> int:
        return a+b
