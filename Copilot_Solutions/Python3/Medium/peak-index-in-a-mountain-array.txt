Synthesizing 10/10 solutions (Duplicates hidden)

=======

def peakIndexInMountainArray(self, arr: List[int]) -> int:
        left, right = 0, len(arr) - 1
        while left < right:
            mid = (left + right) // 2
            if arr[mid] < arr[mid + 1]:
                left = mid + 1
            else:
                right = mid
        return left

=======

def peakIndexInMountainArray(self, arr: List[int]) -> int:
        lo, hi = 0, len(arr) - 1
        while lo < hi:
            mid = (lo + hi) // 2
            if arr[mid] < arr[mid + 1]:
                lo = mid + 1
            else:
                hi = mid
        return lo

=======

def peakIndexInMountainArray(self, arr: List[int]) -> int:
        l, r = 0, len(arr) - 1
        while l < r:
            m = (l + r) // 2
            if arr[m] > arr[m + 1]:
                r = m
            else:
                l = m + 1
        return l

=======

def peakIndexInMountainArray(self, arr: List[int]) -> int:
        l = 0
        r = len(arr)-1
        while l < r:
            mid = (l+r)//2
            if arr[mid] > arr[mid+1]:
                r = mid
            else:
                l = mid+1
        return l

=======

def peakIndexInMountainArray(self, arr: List[int]) -> int:
        l = 0
        r = len(arr)
        while l < r:
            m = (l + r) // 2
            if arr[m] < arr[m+1]:
                l = m + 1
            else:
                r = m
        return l

=======

def peakIndexInMountainArray(self, arr: List[int]) -> int:
        return arr.index(max(arr))

=======

def peakIndexInMountainArray(self, arr: List[int]) -> int:
        index = 0
        for i in range(1, len(arr)):
            if arr[i] > arr[i-1]:
                index = i
            else:
                return index
