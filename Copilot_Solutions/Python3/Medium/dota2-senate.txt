Synthesizing 10/10 solutions

=======

def predictPartyVictory(self, senate: str) -> str:
        pass

=======

def predictPartyVictory(self, senate: str) -> str:
        r, d = [], []
        for i, s in enumerate(senate):
            if s == 'R':
                r.append(i)
            else:
                d.append(i)
        while r and d:
            if r[0] < d[0]:
                r.append(r[0] + len(senate))
            else:
                d.append(d[0] + len(senate))
            r.pop(0)
            d.pop(0)
        return 'Radiant' if r else 'Dire'

=======

def predictPartyVictory(self, senate: str) -> str:
        r, d = [], []
        for i, s in enumerate(senate):
            if s == 'R':
                r.append(i)
            else:
                d.append(i)
        while r and d:
            if r[0] < d[0]:
                r.append(r[0] + len(senate))
            else:
                d.append(d[0] + len(senate))
            r.pop(0)
            d.pop(0)
        return "Radiant" if r else "Dire"

=======

def predictPartyVictory(self, senate: str) -> str:
        radiant = [i for i, s in enumerate(senate) if s == 'R']
        dire = [i for i, s in enumerate(senate) if s == 'D']
        while len(radiant) > 0 and len(dire) > 0:
            if radiant[0] < dire[0]:
                radiant.append(radiant[0] + len(senate))
                radiant.pop(0)
                dire.pop(0)
            else:
                dire.append(dire[0] + len(senate))
                dire.pop(0)
                radiant.pop(0)
        return "Radiant" if len(radiant) > 0 else "Dire"

=======

def predictPartyVictory(self, senate: str) -> str:
        r = []
        d = []
        for i, s in enumerate(senate):
            if s == 'R':
                r.append(i)
            else:
                d.append(i)
        while len(r) and len(d):
            if r[0] < d[0]:
                r.append(r[0] + len(senate))
            else:
                d.append(d[0] + len(senate))
            r.pop(0)
            d.pop(0)
        return "Radiant" if len(r) else "Dire"

=======

def predictPartyVictory(self, senate: str) -> str:
        r = d = 0
        r_ban = d_ban = 0
        for s in senate:
            if s == 'R':
                if r_ban > 0:
                    r_ban -= 1
                else:
                    d_ban += 1
                    d += 1
            else:
                if d_ban > 0:
                    d_ban -= 1
                else:
                    r_ban += 1
                    r += 1
        return 'Dire' if d > r else 'Radiant'

=======

def predictPartyVictory(self, senate: str) -> str:
        r = 0
        d = 0
        while True:
            for i in range(len(senate)):
                if senate[i] == 'R':
                    if d > 0:
                        senate = senate[:i] + 'r' + senate[i+1:]
                        d -= 1
                    else:
                        r += 1
                elif senate[i] == 'D':
                    if r > 0:
                        senate = senate[:i] + 'd' + senate[i+1:]
                        r -= 1
                    else:
                        d += 1
            if r == 0 or d == 0:
                return 'Radiant' if r > d else 'Dire'

=======

def predictPartyVictory(self, senate: str) -> str:
        r = d = 0
        ban = [0] * len(senate)
        for i, s in enumerate(senate):
            if s == 'R':
                r += 1
            else:
                d += 1
        while r > 0 and d > 0:
            for i, s in enumerate(senate):
                if ban[i] == 0:
                    if s == 'R':
                        d -= 1
                        ban[i] = 1
                    else:
                        r -= 1
                        ban[i] = 1
                else:
                    ban[i] = 0
        return 'Radiant' if r > 0 else 'Dire'

=======

def predictPartyVictory(self, senate: str) -> str:
        senate = list(senate)
        n = len(senate)
        r, d = 0, 0
        for i in range(n):
            if senate[i] == 'R':
                r += 1
            else:
                d += 1
        while r > 0 and d > 0:
            for i in range(n):
                if senate[i] == 'R':
                    if r > 0:
                        r -= 1
                    else:
                        d -= 1
                elif senate[i] == 'D':
                    if d > 0:
                        d -= 1
                    else:
                        r -= 1
        return 'Radiant' if r > 0 else 'Dire'

=======

def predictPartyVictory(self, senate: str) -> str:
        R = D = 0
        ban = [0] * len(senate)
        while True:
            for i, s in enumerate(senate):
                if ban[i] == 0:
                    if s == 'R':
                        if D > 0:
                            D -= 1
                            ban[i] = 1
                        else:
                            R += 1
                    else:
                        if R > 0:
                            R -= 1
                            ban[i] = 1
                        else:
                            D += 1
            if sum(ban) == len(senate):
                return 'Radiant' if R > 0 else 'Dire'
