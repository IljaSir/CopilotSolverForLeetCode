Synthesizing 5/10 solutions (Duplicates hidden)

=======

def makesquare(self, matchsticks: List[int]) -> bool:
        if not matchsticks: return False
        n = len(matchsticks)
        if n < 4: return False
        total = sum(matchsticks)
        if total % 4 != 0: return False
        target = total // 4
        matchsticks.sort(reverse=True)
        if matchsticks[0] > target: return False
        used = [False] * n
        def dfs(i, k, cur):
            if k == 0: return True
            if cur == target:
                return dfs(0, k-1, 0)
            for j in range(i, n):
                if not used[j] and cur + matchsticks[j] <= target:
                    used[j] = True
                    if dfs(j+1, k, cur+matchsticks[j]):
                        return True
                    used[j] = False
            return False
        return dfs(0, 4, 0)

=======

def makesquare(self, matchsticks: List[int]) -> bool:
        if not matchsticks:
            return False
        matchsticks.sort(reverse=True)
        perimeter = sum(matchsticks)
        if perimeter % 4 != 0:
            return False
        side = perimeter // 4
        if matchsticks[0] > side:
            return False
        for i in range(4):
            if not self.dfs(matchsticks, [0] * len(matchsticks), side, 0):
                return False
        return True

=======

def makesquare(self, matchsticks: List[int]) -> bool:
        
        if not matchsticks:
            return False
        
        matchsticks.sort(reverse=True)
        target = sum(matchsticks) // 4
        
        if target * 4 != sum(matchsticks):
            return False
        
        def dfs(idx, side):
            if side == 3:
                return True
            
            for i in range(idx, len(matchsticks)):
                if matchsticks[i] == 0:
                    continue
                if matchsticks[i] + matchsticks[idx] > target:
                    continue
                matchsticks[i] = 0
                if dfs(idx + 1, side + 1):
                    return True
                matchsticks[i] = matchsticks[idx]
                if matchsticks[idx] == 0:
                    return False
            return False
        
        return dfs(0, 0)

=======

def makesquare(self, matchsticks: List[int]) -> bool:
        
        pass
