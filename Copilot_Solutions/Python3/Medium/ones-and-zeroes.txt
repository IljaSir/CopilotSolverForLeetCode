Synthesizing 10/10 solutions (Duplicates hidden)

=======

def findMaxForm(self, strs: List[str], m: int, n: int) -> int:
        dp = [[0] * (n+1) for _ in range(m+1)]
        for s in strs:
            ones = s.count('1')
            zeros = len(s) - ones
            for i in range(m, zeros-1, -1):
                for j in range(n, ones-1, -1):
                    dp[i][j] = max(dp[i][j], dp[i-zeros][j-ones] + 1)
        return dp[m][n]

=======

def findMaxForm(self, strs: List[str], m: int, n: int) -> int:
        
        pass

=======

def findMaxForm(self, strs: List[str], m: int, n: int) -> int:
        
        dp = [[0] * (n+1) for _ in range(m+1)]
        for s in strs:
            zeros = s.count('0')
            ones = s.count('1')
            for i in range(m, zeros-1, -1):
                for j in range(n, ones-1, -1):
                    dp[i][j] = max(dp[i][j], dp[i-zeros][j-ones] + 1)
        return dp[m][n]

=======

def findMaxForm(self, strs: List[str], m: int, n: int) -> int:
        
        dp = [[0]*(n+1) for _ in range(m+1)]
        for s in strs:
            ones = s.count('1')
            zeros = len(s) - ones
            for i in range(m, zeros-1, -1):
                for j in range(n, ones-1, -1):
                    dp[i][j] = max(dp[i][j], 1 + dp[i-zeros][j-ones])
        return dp[m][n]

=======

def findMaxForm(self, strs: List[str], m: int, n: int) -> int:
        
        @lru_cache(None)
        def dp(i, m, n):
            if i == len(strs):
                return 0
            zeros, ones = strs[i].count('0'), strs[i].count('1')
            if m >= zeros and n >= ones:
                return max(dp(i + 1, m - zeros, n - ones) + 1, dp(i + 1, m, n))
            else:
                return dp(i + 1, m, n)
        return dp(0, m, n)
