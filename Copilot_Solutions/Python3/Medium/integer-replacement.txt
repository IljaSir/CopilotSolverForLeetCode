Synthesizing 10/10 solutions (Duplicates hidden)

=======

def integerReplacement(self, n: int) -> int:
        if n == 1:
            return 0
        if n % 2 == 0:
            return 1 + self.integerReplacement(n // 2)
        else:
            return 1 + min(self.integerReplacement(n + 1), self.integerReplacement(n - 1))

=======

def integerReplacement(self, n: int) -> int:
        if n == 1:
            return 0
        elif n % 2 == 0:
            return self.integerReplacement(n / 2) + 1
        else:
            return min(self.integerReplacement(n + 1), self.integerReplacement(n - 1)) + 1

=======

def integerReplacement(self, n: int) -> int:
        dp = [0] * (n + 1)
        for i in range(2, n + 1):
            if i % 2 == 0:
                dp[i] = dp[i // 2] + 1
            else:
                dp[i] = min(dp[i - 1], dp[(i + 1) // 2]) + 2
        return dp[n]

=======

def integerReplacement(self, n: int) -> int:
        if n == 1:
            return 0
        elif n == 2:
            return 1
        elif n == 3:
            return 2
        elif n % 2 == 0:
            return 1 + self.integerReplacement(n // 2)
        else:
            return 1 + min(self.integerReplacement(n + 1), self.integerReplacement(n - 1))

=======

def integerReplacement(self, n: int) -> int:
        def f(n):
            if n == 1:
                return 0
            if n % 2 == 0:
                return f(n // 2) + 1
            else:
                return min(f(n + 1), f(n - 1)) + 1
        return f(n)

=======

def integerReplacement(self, n: int) -> int:
        def helper(n, cnt):
            if n == 1:
                return cnt
            if n % 2 == 0:
                return helper(n // 2, cnt + 1)
            else:
                return min(helper(n + 1, cnt + 1), helper(n - 1, cnt + 1))
        return helper(n, 0)

=======

def integerReplacement(self, n: int) -> int:
        def helper(n):
            if n in cache:
                return cache[n]
            if n == 1:
                return 0
            if n % 2 == 0:
                cache[n] = 1 + helper(n//2)
            else:
                cache[n] = 1 + min(helper(n+1), helper(n-1))
            return cache[n]
        cache = {}
        return helper(n)

=======

class Solution:
    def integerReplacement(self, n: int) -> int:
        # 2^31 - 1 = 2147483647
        # 2^31 = 2147483648
        # 2^32 = 4294967296
        # 2^33 = 8589934592
        # 2^34 = 17179869184
        # 2^35 = 34359738368
        # 2^36 = 68719476736
        # 2^37 = 137438953472
        # 2^38 = 274877906944
        # 2^39 = 549755813888
        # 2^40 = 1099511627776
        # 2^41 = 2199023255552
        # 2^42 = 4398046511104
        # 2^43 = 8796093022208
        # 2^44 = 17592186044416
        # 2^45 = 35184372088832
        # 2^46 = 70368744177664
        # 2^47 = 140737488355328
        # 2^48 = 281474976710656
        # 2^49 = 562949953421312
        # 2^50 = 1125899906842624
        # 2^51 = 2251799813685248
        # 2^52 = 4503599627370496
        # 2^53 = 9007199254740992
        # 2^54 = 18014398509481984
        # 2^55 = 36028797018963968
        # 2^56 = 72057594037927936
        # 2^57 = 144115188075855872
        # 2^58 = 288230376151711744
        # 2^59 = 576460752303423488
        # 2^60 = 1152921504606846976
        # 2^61 = 2305843009213693952
        # 2^62 = 4611686018427387904
        # 2^63 = 9223372036854775808
        # 2^64 = 184467440737

=======

def integerReplacement(self, n: int) -> int:
        
        pass
