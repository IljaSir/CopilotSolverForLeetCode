Synthesizing 7/10 solutions

=======

def minSubArrayLen(self, target: int, nums: List[int]) -> int:
        left = 0
        total = 0
        ans = float('inf')
        for right in range(len(nums)):
            total += nums[right]
            while total >= target:
                ans = min(ans, right - left + 1)
                total -= nums[left]
                left += 1
        return ans if ans != float('inf') else 0

=======

def minSubArrayLen(self, target: int, nums: List[int]) -> int:
        total = 0
        start = 0
        min_len = float('inf')
        for i, num in enumerate(nums):
            total += num
            while total >= target:
                min_len = min(min_len, i - start + 1)
                total -= nums[start]
                start += 1
        return min_len if min_len != float('inf') else 0

=======

def minSubArrayLen(self, target: int, nums: List[int]) -> int:
        i = 0
        j = 0
        total = 0
        min_len = len(nums) + 1
        while j < len(nums):
            total += nums[j]
            while total >= target:
                min_len = min(min_len, j - i + 1)
                total -= nums[i]
                i += 1
            j += 1
        return min_len if min_len <= len(nums) else 0

=======

def minSubArrayLen(self, target: int, nums: List[int]) -> int:
        i = 0
        j = 0
        sum = 0
        min_len = float('inf')
        while j < len(nums):
            sum += nums[j]
            while sum >= target:
                min_len = min(min_len, j - i + 1)
                sum -= nums[i]
                i += 1
            j += 1
        return min_len if min_len != float('inf') else 0

=======

def minSubArrayLen(self, target: int, nums: List[int]) -> int:
        if not nums:
            return 0
        l = 0
        r = 0
        s = 0
        res = float('inf')
        while r < len(nums):
            s += nums[r]
            r += 1
            while s >= target:
                res = min(res, r - l)
                s -= nums[l]
                l += 1
        return res if res != float('inf') else 0

=======

def minSubArrayLen(self, target: int, nums: List[int]) -> int:
        i = 0
        j = 0
        n = len(nums)
        res = n + 1
        total = 0
        while j < n:
            total += nums[j]
            while total >= target:
                res = min(res, j - i + 1)
                total -= nums[i]
                i += 1
            j += 1
        if res == n + 1:
            return 0
        return res

=======

def minSubArrayLen(self, target: int, nums: List[int]) -> int:
        if not nums:
            return 0
        l = 0
        r = 1
        s = nums[l]
        while r < len(nums) and s < target:
            s += nums[r]
            r += 1
        if s < target:
            return 0
        while l < r and s >= target:
            s -= nums[l]
            l += 1
        return r - l + 1
