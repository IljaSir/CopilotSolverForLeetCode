Synthesizing 10/10 solutions

=======

def validIPAddress(self, queryIP: str) -> str:
        def isIPv4(s):
            try:
                return str(int(s)) == s and 0 <= int(s) <= 255
            except:
                return False
        def isIPv6(s):
            if len(s) > 4:
                return False
            try:
                return int(s, 16) >= 0 and s[0] != '-'
            except:
                return False
        if queryIP.count('.') == 3 and all(isIPv4(i) for i in queryIP.split('.')):
            return "IPv4"
        if queryIP.count(':') == 7 and all(isIPv6(i) for i in queryIP.split(':')):
            return "IPv6"
        return "Neither"

=======

def validIPAddress(self, queryIP: str) -> str:
        def isIPv4(queryIP):
            try:
                return str(int(queryIP)) == queryIP and 0 <= int(queryIP) <= 255
            except:
                return False
        def isIPv6(queryIP):
            if len(queryIP) > 4:
                return False
            try:
                return int(queryIP, 16) >= 0 and queryIP[0] != '-'
            except:
                return False
        if queryIP.count('.') == 3 and all(isIPv4(x) for x in queryIP.split('.')):
            return "IPv4"
        if queryIP.count(':') == 7 and all(isIPv6(x) for x in queryIP.split(':')):
            return "IPv6"
        return "Neither"

=======

def validIPAddress(self, queryIP: str) -> str:
        if queryIP.count('.') == 3:
            try:
                return "IPv4" if all(0 <= int(i) < 256 and str(int(i)) == i for i in queryIP.split('.')) else "Neither"
            except:
                return "Neither"
        elif queryIP.count(':') == 7:
            try:
                return "IPv6" if all(1 <= len(i) <= 4 and int(i, 16) >= 0 for i in queryIP.split(':')) else "Neither"
            except:
                return "Neither"
        return "Neither"

=======

def validIPAddress(self, queryIP: str) -> str:
        if queryIP.count('.') == 3:
            nums = queryIP.split('.')
            for x in nums:
                if not x or len(x) > 3 or (x[0] == '0' and len(x) != 1) or not x.isdigit() or int(x) > 255:
                    return "Neither"
            return "IPv4"
        elif queryIP.count(':') == 7:
            nums = queryIP.split(':')
            hexdigits = '0123456789abcdefABCDEF'
            for x in nums:
                if not x or len(x) > 4 or not all(c in hexdigits for c in x):
                    return "Neither"
            return "IPv6"
        return "Neither"

=======

def validIPAddress(self, queryIP: str) -> str:
        if "." in queryIP:
            return self.validateIPv4(queryIP)
        elif ":" in queryIP:
            return self.validateIPv6(queryIP)
        else:
            return "Neither"

=======

def validIPAddress(self, queryIP: str) -> str:
        if queryIP.count('.') == 3:
            try:
                return 'IPv4' if all(0 <= int(i) <= 255 and str(int(i)) == i for i in queryIP.split('.')) else 'Neither'
            except:
                return 'Neither'
        elif queryIP.count(':') == 7:
            try:
                return 'IPv6' if all(0 < len(i) <= 4 and int(i, 16) >= 0 for i in queryIP.split(':')) else 'Neither'
            except:
                return 'Neither'
        return 'Neither'

=======

def validIPAddress(self, queryIP: str) -> str:
        if queryIP.count('.') == 3:
            try:
                return 'IPv4' if all(0 <= int(x) <= 255 and str(int(x)) == x for x in queryIP.split('.')) else 'Neither'
            except:
                return 'Neither'
        elif queryIP.count(':') == 7:
            try:
                return 'IPv6' if all(1 <= len(x) <= 4 and int(x, 16) >= 0 for x in queryIP.split(':')) else 'Neither'
            except:
                return 'Neither'
        else:
            return 'Neither'

=======

def validIPAddress(self, queryIP: str) -> str:
        if queryIP.count('.') == 3:
            for i in queryIP.split('.'):
                if not i.isdigit() or not 0 <= int(i) <= 255 or (i[0] == '0' and len(i) > 1):
                    return "Neither"
            return "IPv4"
        elif queryIP.count(':') == 7:
            for i in queryIP.split(':'):
                if not i.isalnum() or not 1 <= len(i) <= 4 or not all(c in '0123456789abcdefABCDEF' for c in i):
                    return "Neither"
            return "IPv6"
        else:
            return "Neither"

=======

def validIPAddress(self, queryIP: str) -> str:
        # IPv4
        if "." in queryIP:
            ip = queryIP.split(".")
            if len(ip) != 4:
                return "Neither"
            for i in ip:
                if not i.isdigit():
                    return "Neither"
                if i[0] == "0" and len(i) > 1:
                    return "Neither"
                if int(i) < 0 or int(i) > 255:
                    return "Neither"
            return "IPv4"
        
        # IPv6
        if ":" in queryIP:
            ip = queryIP.split(":")
            if len(ip) != 8:
                return "Neither"
            for i in ip:
                if not i.isalnum():
                    return "Neither"
                if len(i) > 4:
                    return "Neither"
                for j in i:
                    if j.isdigit():
                        continue
                    if j.isalpha():
                        if j.lower() not in "abcdef":
                            return "Neither"
            return "IPv6"
        
        return "Neither"

=======

def validIPAddress(self, queryIP: str) -> str:
        if queryIP.count('.') == 3:
            parts = queryIP.split('.')
            if len(parts) == 4 and all(part.isdigit() and 0 <= int(part) < 256 and (part == '0' or part[0] != '0') for part in parts):
                return "IPv4"
        if queryIP.count(':') == 7:
            parts = queryIP.split(':')
            if len(parts) == 8 and all(part.isalnum() and 1 <= len(part) <= 4 and all(c in '0123456789abcdefABCDEF' for c in part) for part in parts):
                return "IPv6"
        return "Neither"
