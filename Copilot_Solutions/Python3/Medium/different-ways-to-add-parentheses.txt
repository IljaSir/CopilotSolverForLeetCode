Synthesizing 6/10 solutions (Duplicates hidden)

=======

def diffWaysToCompute(self, expression: str) -> List[int]:
        if expression.isdigit():
            return [int(expression)]
        res = []
        for i, c in enumerate(expression):
            if c in '+-*':
                left = self.diffWaysToCompute(expression[:i])
                right = self.diffWaysToCompute(expression[i+1:])
                for l in left:
                    for r in right:
                        res.append(self.helper(l, r, c))
        return res

=======

def diffWaysToCompute(self, expression: str) -> List[int]:
        if expression.isdigit():
            return [int(expression)]
        res = []
        for i, c in enumerate(expression):
            if c in '+-*':
                left = self.diffWaysToCompute(expression[:i])
                right = self.diffWaysToCompute(expression[i+1:])
                for n1 in left:
                    for n2 in right:
                        res.append(self.helper(n1, n2, c))
        return res

=======

def diffWaysToCompute(self, expression: str) -> List[int]:
        if expression.isdigit():
            return [int(expression)]
        res = []
        for i, c in enumerate(expression):
            if c in "+-*":
                res1 = self.diffWaysToCompute(expression[:i])
                res2 = self.diffWaysToCompute(expression[i+1:])
                for r1 in res1:
                    for r2 in res2:
                        res.append(self.helper(r1, r2, c))
        return res

=======

def diffWaysToCompute(self, expression: str) -> List[int]:
        self.memo = {}
        return self.helper(expression)

=======

def diffWaysToCompute(self, expression: str) -> List[int]:
        
        pass
