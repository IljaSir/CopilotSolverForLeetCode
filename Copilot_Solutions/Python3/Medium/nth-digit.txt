Synthesizing 7/10 solutions

=======

class Solution:
    def findNthDigit(self, n: int) -> int:
        # 1-9: 9*1
        # 10-99: 90*2
        # 100-999: 900*3
        # 1000-9999: 9000*4
        # 10000-99999: 90000*5
        # 100000-999999: 900000*6
        # 1000000-9999999: 9000000*7
        # 10000000-99999999: 90000000*8
        # 100000000-999999999: 900000000*9
        # 1000000000-9999999999: 9000000000*10
        # 10000000000-99999999999: 90000000000*11
        # 100000000000-999999999999: 900000000000*12
        # 1000000000000-9999999999999: 9000000000000*13
        # 10000000000000-99999999999999: 90000000000000*14
        # 100000000000000-999999999999999: 900000000000000*15
        # 1000000000000000-9999999999999999: 9000000000000000*16
        # 10000000000000000-99999999999999999: 90000000000000000*17
        # 100000000000000000-999999999999999999: 900000000000000000*18
        # 1000000000000000000-9999999999999999999: 9000000000000000000*19
        # 10000000000000000000-99999999999999999999: 90000000000000000000*20
        # 100000000000000000000-999999999999999999999: 900000000000000000000*21
        # 1000000000000000000000-9999999999999999999999: 9000000000000000000000*22
        # 10000000000000000000000-99999999999999999999999: 900000000

=======

def findNthDigit(self, n: int) -> int:
        if n < 10:
            return n
        n -= 10
        digits = 2
        while n >= 9 * 10 ** (digits - 1) * digits:
            n -= 9 * 10 ** (digits - 1) * digits
            digits += 1
        m, r = divmod(n, digits)
        return int(str(10 ** (digits - 1) + m)[r])

=======

def findNthDigit(self, n: int) -> int:
        if n < 10:
            return n
        n -= 10
        i = 2
        while n > 9 * 10 ** (i - 1) * i:
            n -= 9 * 10 ** (i - 1) * i
            i += 1
        m, r = divmod(n, i)
        return int(str(10 ** (i - 1) + m)[r])

=======

def findNthDigit(self, n: int) -> int:
        if n <= 9:
            return n
        n -= 9
        for i in range(2, 11):
            if n <= i * 9 * 10 ** (i - 1):
                return int(str(10 ** (i - 1) + (n - 1) // i)[(n - 1) % i])
            n -= i * 9 * 10 ** (i - 1)

=======

def findNthDigit(self, n: int) -> int:
        if n < 10:
            return n
        p = 1
        while True:
            if 10**p - 10**(p-1) < n:
                n -= 10**p - 10**(p-1)
                p += 1
            else:
                break
        r = (n-1) % p
        q = (n-1) // p
        return int(str(10**(p-1) + q)[r])

=======

def findNthDigit(self, n: int) -> int:
        # 1. find the range of the number
        # 2. find the exact number
        # 3. find the digit and return
        # 1
        start = 1
        digits = 1
        while n > 9 * start * digits:
            n -= 9 * start * digits
            start *= 10
            digits += 1
        # 2
        num = start + (n - 1) // digits
        # 3
        return int(str(num)[(n - 1) % digits])

=======

def findNthDigit(self, n: int) -> int:
        
        pass
