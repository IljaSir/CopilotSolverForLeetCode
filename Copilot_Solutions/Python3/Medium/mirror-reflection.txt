Synthesizing 10/10 solutions (Duplicates hidden)

=======

def mirrorReflection(self, p: int, q: int) -> int:
        while p % 2 == 0 and q % 2 == 0:
            p //= 2
            q //= 2
        if p % 2 == 0:
            return 2
        elif q % 2 == 0:
            return 0
        else:
            return 1

=======

def mirrorReflection(self, p: int, q: int) -> int:
        while p % 2 == 0 and q % 2 == 0:
            p = p // 2
            q = q // 2
        if p % 2 == 0:
            return 2
        if q % 2 == 0:
            return 0
        return 1

=======

def mirrorReflection(self, p: int, q: int) -> int:
        while p % 2 == 0 and q % 2 == 0:
            p //= 2
            q //= 2
        if p % 2 == 0:
            return 0
        elif q % 2 == 0:
            return 2
        else:
            return 1

=======

def mirrorReflection(self, p: int, q: int) -> int:
        def gcd(a, b):
            if b == 0:
                return a
            return gcd(b, a % b)
        g = gcd(p, q)
        p //= g
        p %= 2
        q //= g
        q %= 2
        if p == 1 and q == 1:
            return 1
        if p == 1 and q == 0:
            return 0
        if p == 0 and q == 1:
            return 2

=======

class Solution:
    def mirrorReflection(self, p: int, q: int) -> int:
        # 1 2
        # 2 1
        # 3 0
        # 4 1
        # 5 2
        # 6 1
        # 7 0
        # 8 1
        # 9 2
        # 10 1
        # 11 0
        # 12 1
        # 13 2
        # 14 1
        # 15 0
        # 16 1
        # 17 2
        # 18 1
        # 19 0
        # 20 1
        # 21 2
        # 22 1
        # 23 0
        # 24 1
        # 25 2
        # 26 1
        # 27 0
        # 28 1
        # 29 2
        # 30 1
        # 31 0
        # 32 1
        # 33 2
        # 34 1
        # 35 0
        # 36 1
        # 37 2
        # 38 1
        # 39 0
        # 40 1
        # 41 2
        # 42 1
        # 43 0
        # 44 1
        # 45 2
        # 46 1
        # 47 0
        # 48 1
        # 49 2
        # 50 1
        # 51 0
        # 52 1
        # 53 2
        # 54 1
        # 55 0
        # 56 1
        # 57 2
        # 58 1
        # 59 0
        # 60 1
        # 61 2
        # 62 1
        # 63 0
        # 64 1
        # 65 2
        # 66 1
        # 67 0
        # 68 1
        # 69 2
        # 70 1
        # 71 0
        #

=======

def mirrorReflection(self, p: int, q: int) -> int:
        
        pass

=======

def mirrorReflection(self, p: int, q: int) -> int:
        # p = 2**a * m
        # q = 2**b * n
        # p/q = 2**(a-b) * m/n
        # p/q = 2**c * k
        # 2**c * k = 2**a * m / 2**b * n
        # 2**c = 2**(a-b) * m/n
        # 2**c = 2**(a-b) * p/q
        # 2**c = 2**(a-b) * p/q
        # 2**c * q = 2**(a-b) * p
        # 2**c * q = 2**(a-b) * 2**a * m
        # 2**c * q = 2**(a-b+a) * m
        # 2**c * q = 2**(a) * m
        # 2**c * q = 2**(c) * m
        # 2**c = m
        # c = log2(m)
        # c = log2(p/q)
        # c = log2(p) - log2(q)
        from math import log2
        c = log2(p) - log2(q)
        if c % 2 == 0:
            return 0
        elif c % 2 == 1:
            return 1
        else:
            return 2

=======

class Solution:
    def mirrorReflection(self, p: int, q: int) -> int:
        # p = 2 * m, q = 2 * n
        # p/q = m/n
        # p * n = q * m
        # 2 * p * n = p * q
        # p * n = p * q
        # n = q
        # p = 2 * m
        # q = n = q
        # 2 * m = q
        # m = q / 2
        # m = 1, 2, 3, 4, 5, ...
        # n = 1, 2, 3, 4, 5, ...
        # p = 2, 4, 6, 8, 10, ...
        # q = 2, 4, 6, 8, 10, ...
        # m = q / 2
        # n = q
        # p = 2 * m = 2 * q / 2 = q
        # q = n = q
        # 2 * m = q
        # m = q / 2
        # m = 1, 2, 3, 4, 5, ...
        # n = 1, 2, 3, 4, 5, ...
        # p = 2, 4, 6, 8, 10, ...
        # q = 2, 4, 6, 8, 10, ...
        # m = q / 2
        # n = q
        # p = 2 * m = 2 * q / 2 = q
        # q = n = q
        # 2 * m = q
        # m = q / 2
        # m = 1, 2, 3, 4, 5, ...
        # n = 1, 2, 3, 4, 5, ...
        # p = 2, 4, 6, 8, 10, ...
        # q = 2, 4, 6, 8, 10, ...
        # m = q / 2
        # n = q
        # p = 2 * m = 2 * q / 2 = q
        # q = n = q
