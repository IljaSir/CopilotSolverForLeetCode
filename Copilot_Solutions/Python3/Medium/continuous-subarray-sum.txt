Synthesizing 10/10 solutions

=======

def checkSubarraySum(self, nums: List[int], k: int) -> bool:
        if len(nums) < 2:
            return False
        if k == 0:
            return any(nums[i] == 0 and nums[i + 1] == 0 for i in range(len(nums) - 1))
        if k < 0:
            k = -k
        for i in range(len(nums) - 1):
            if nums[i] % k == 0 and nums[i + 1] % k == 0:
                return True
        s = set()
        s.add(0)
        p = 0
        for i in range(len(nums)):
            p += nums[i]
            p %= k
            if p in s:
                return True
            s.add(p)
        return False

=======

def checkSubarraySum(self, nums: List[int], k: int) -> bool:
        if len(nums) < 2:
            return False
        if k == 0:
            for i in range(1, len(nums)):
                if nums[i] == nums[i-1] == 0:
                    return True
            return False
        if k < 0:
            k = -k
        s = set()
        s.add(0)
        n = len(nums)
        s1 = 0
        for i in range(n):
            s1 += nums[i]
            s1 %= k
            if s1 in s:
                return True
            s.add(s1)
            s1 += nums[i]
            s1 %= k
        return False

=======

def checkSubarraySum(self, nums: List[int], k: int) -> bool:
        if k == 0:
            for i in range(1, len(nums)):
                if nums[i] == 0 and nums[i-1] == 0:
                    return True
            return False
        s = 0
        seen = {0: -1}
        for i, n in enumerate(nums):
            s += n
            s %= k
            if s in seen:
                if i - seen[s] > 1:
                    return True
            else:
                seen[s] = i
        return False

=======

def checkSubarraySum(self, nums: List[int], k: int) -> bool:
        if len(nums) < 2:
            return False
        if k == 0:
            return any(nums[i] == 0 and nums[i+1] == 0 for i in range(len(nums)-1))
        if k < 0:
            k = -k
        d = {0:-1}
        s = 0
        for i, n in enumerate(nums):
            s += n
            s %= k
            if s in d:
                if i - d[s] > 1:
                    return True
            else:
                d[s] = i
        return False

=======

def checkSubarraySum(self, nums: List[int], k: int) -> bool:
        if k == 0:
            return any(nums[i] == 0 and nums[i+1] == 0 for i in range(len(nums)-1))
        if k < 0:
            k = -k
        n = len(nums)
        if n < 2:
            return False
        presum = [0]
        for i in range(n):
            presum.append((presum[-1] + nums[i]) % k)
        for i in range(n-1):
            for j in range(i+2, n+1):
                if presum[j] == presum[i]:
                    return True
        return False

=======

def checkSubarraySum(self, nums: List[int], k: int) -> bool:
        if len(nums) < 2:
            return False
        if k == 0:
            return False if len(nums) == 2 and nums[0] == 0 and nums[1] == 0 else True
        if k < 0:
            k = -k
        s = 0
        d = {0: -1}
        for i, n in enumerate(nums):
            s += n
            s %= k
            if s in d:
                if i - d[s] > 1:
                    return True
            else:
                d[s] = i
        return False

=======

def checkSubarraySum(self, nums: List[int], k: int) -> bool:
        if k == 0:
            return any(nums[i] == nums[i+1] == 0 for i in range(len(nums)-1))
        if k < 0:
            k = -k
        d = {}
        d[0] = -1
        s = 0
        for i, n in enumerate(nums):
            s += n
            if s % k in d:
                if i - d[s % k] > 1:
                    return True
            else:
                d[s % k] = i
        return False

=======

def checkSubarraySum(self, nums: List[int], k: int) -> bool:
        pre = 0
        map = {0: -1}
        for i, n in enumerate(nums):
            pre += n
            if k != 0:
                pre %= k
            if pre in map:
                if i - map[pre] > 1:
                    return True
            else:
                map[pre] = i
        return False

=======

def checkSubarraySum(self, nums: List[int], k: int) -> bool:
        if k == 0:
            return any(nums[i]+nums[i+1] == 0 for i in range(len(nums)-1))
        else:
            return any(sum(nums[i:j]) % k == 0 for i in range(len(nums)) for j in range(i+2, len(nums)+1))

=======

def checkSubarraySum(self, nums: List[int], k: int) -> bool:
        # print(nums)
        for i in range(len(nums)):
            for j in range(i+1, len(nums)):
                # print(nums[i:j+1])
                if k == 0:
                    if sum(nums[i:j+1]) == 0:
                        return True
                else:
                    if sum(nums[i:j+1]) % k == 0:
                        return True
        return False
