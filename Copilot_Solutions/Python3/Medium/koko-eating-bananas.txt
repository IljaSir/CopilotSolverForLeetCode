Synthesizing 10/10 solutions (Duplicates hidden)

=======

def minEatingSpeed(self, piles: List[int], h: int) -> int:
        def possible(k):
            return sum((p-1)//k + 1 for p in piles) <= h
        lo, hi = 1, max(piles)
        while lo < hi:
            mi = (lo + hi) // 2
            if not possible(mi):
                lo = mi + 1
            else:
                hi = mi
        return lo

=======

def minEatingSpeed(self, piles: List[int], h: int) -> int:
        l, r = 1, max(piles)
        while l < r:
            m = (l + r) // 2
            if sum((p-1)//m + 1 for p in piles) > h:
                l = m + 1
            else:
                r = m
        return l

=======

def minEatingSpeed(self, piles: List[int], h: int) -> int:
        def canFinish(piles, speed, h):
            time = 0
            for pile in piles:
                time += pile // speed
                if pile % speed != 0:
                    time += 1
            return time <= h
        
        l, r = 1, max(piles)
        while l < r:
            mid = l + (r - l) // 2
            if canFinish(piles, mid, h):
                r = mid
            else:
                l = mid + 1
        return l

=======

def minEatingSpeed(self, piles: List[int], h: int) -> int:
        def canFinish(piles, h, speed):
            time = 0
            for pile in piles:
                time += pile // speed
                if pile % speed != 0:
                    time += 1
            return time <= h
        minSpeed = 1
        maxSpeed = max(piles)
        while minSpeed < maxSpeed:
            speed = minSpeed + (maxSpeed - minSpeed) // 2
            if canFinish(piles, h, speed):
                maxSpeed = speed
            else:
                minSpeed = speed + 1
        return minSpeed

=======

def minEatingSpeed(self, piles: List[int], h: int) -> int:
        def canFinish(piles, h, k):
            return sum((pile-1)//k+1 for pile in piles) <= h
        l, r = 1, max(piles)
        while l < r:
            m = (l+r)//2
            if canFinish(piles, h, m):
                r = m
            else:
                l = m+1
        return l

=======

def minEatingSpeed(self, piles: List[int], h: int) -> int:
        def canFinish(piles, speed, h):
            return sum((p-1)//speed+1 for p in piles) <= h
        
        l, r = 1, max(piles)
        while l < r:
            mid = (l+r)//2
            if canFinish(piles, mid, h):
                r = mid
            else:
                l = mid + 1
        return l

=======

def minEatingSpeed(self, piles: List[int], h: int) -> int:
        def can_finish(piles, h, k):
            return sum((p-1)//k+1 for p in piles) <= h
        
        l, r = 1, max(piles)
        while l < r:
            mid = (l+r)//2
            if can_finish(piles, h, mid):
                r = mid
            else:
                l = mid+1
        return l

=======

def minEatingSpeed(self, piles: List[int], h: int) -> int:
        def canFinish(piles, h, k):
            hours = 0
            for p in piles:
                hours += (p-1) // k + 1
            return hours <= h
        
        lo, hi = 1, max(piles)
        while lo < hi:
            mid = (lo + hi) // 2
            if canFinish(piles, h, mid):
                hi = mid
            else:
                lo = mid + 1
        return lo
