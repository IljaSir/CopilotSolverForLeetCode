Synthesizing 10/10 solutions

=======

def scoreOfParentheses(self, s: str) -> int:
        pass

=======

def scoreOfParentheses(self, s: str) -> int:
        stack = []
        for c in s:
            if c == '(':
                stack.append(c)
            else:
                if stack[-1] == '(':
                    stack.pop()
                    stack.append(1)
                else:
                    tmp = 0
                    while stack and stack[-1] != '(':
                        tmp += stack.pop()
                    stack.pop()
                    stack.append(tmp * 2)
        return sum(stack)

=======

def scoreOfParentheses(self, s: str) -> int:
        stack = []
        for c in s:
            if c == '(':
                stack.append(c)
            else:
                if stack[-1] == '(':
                    stack.pop()
                    stack.append(1)
                else:
                    tmp = 0
                    while stack[-1] != '(':
                        tmp += stack.pop()
                    stack.pop()
                    stack.append(tmp*2)
        return sum(stack)

=======

def scoreOfParentheses(self, s: str) -> int:
        stack = []
        for c in s:
            if c == '(':
                stack.append(c)
            else:
                if stack[-1] == '(':
                    stack.pop()
                    stack.append(1)
                else:
                    temp = 0
                    while stack and stack[-1] != '(':
                        temp += stack.pop()
                    stack.pop()
                    stack.append(temp*2)
        return sum(stack)

=======

def scoreOfParentheses(self, s: str) -> int:
        stack = []
        for c in s:
            if c == '(':
                stack.append(c)
            else:
                if stack[-1] == '(':
                    stack.pop()
                    stack.append(1)
                else:
                    temp = 0
                    while stack[-1] != '(':
                        temp += stack.pop()
                    stack.pop()
                    stack.append(temp * 2)
        return sum(stack)

=======

def scoreOfParentheses(self, s: str) -> int:
        stack = []
        for c in s:
            if c == '(':
                stack.append(c)
            else:
                if stack[-1] == '(':
                    stack[-1] = 1
                else:
                    tmp = 0
                    while stack[-1] != '(':
                        tmp += stack.pop()
                    stack.pop()
                    stack.append(tmp * 2)
        return sum(stack)

=======

def scoreOfParentheses(self, s: str) -> int:
        stack = []
        for c in s:
            if c == '(':
                stack.append(c)
            else:
                if stack[-1] == '(':
                    stack.pop()
                    stack.append(1)
                else:
                    val = 0
                    while stack[-1] != '(':
                        val += stack.pop()
                    stack.pop()
                    stack.append(2*val)
        return sum(stack)

=======

def scoreOfParentheses(self, s: str) -> int:
        stack = []
        for c in s:
            if c == '(':
                stack.append(c)
            else:
                temp = 0
                while stack[-1] != '(':
                    temp += stack.pop()
                stack.pop()
                if temp == 0:
                    stack.append(1)
                else:
                    stack.append(temp * 2)
        return sum(stack)

=======

def scoreOfParentheses(self, s: str) -> int:
        stack = []
        for c in s:
            if c == '(':
                stack.append(c)
            else:
                if stack[-1] == '(':
                    stack[-1] = 1
                else:
                    val = 0
                    while stack[-1] != '(':
                        val += stack.pop()
                    stack.pop()
                    stack.append(2*val)
        return sum(stack)

=======

def scoreOfParentheses(self, s: str) -> int:
        stk = []
        for c in s:
            if c == '(':
                stk.append(c)
            else:
                if stk[-1] == '(':
                    stk.pop()
                    stk.append(1)
                else:
                    tmp = 0
                    while stk[-1] != '(':
                        tmp += stk.pop()
                    stk.pop()
                    stk.append(2*tmp)
        return sum(stk)
