Synthesizing 10/10 solutions

=======

def findDiagonalOrder(self, mat: List[List[int]]) -> List[int]:
        m, n = len(mat), len(mat[0])
        i, j = 0, 0
        res = []
        for _ in range(m * n):
            res.append(mat[i][j])
            if (i + j) % 2 == 0:
                if j == n - 1:
                    i += 1
                elif i == 0:
                    j += 1
                else:
                    i -= 1
                    j += 1
            else:
                if i == m - 1:
                    j += 1
                elif j == 0:
                    i += 1
                else:
                    i += 1
                    j -= 1
        return res

=======

def findDiagonalOrder(self, mat: List[List[int]]) -> List[int]:
        m, n = len(mat), len(mat[0])
        i, j, res = 0, 0, []
        for _ in range(m * n):
            res.append(mat[i][j])
            if (i + j) % 2 == 0:
                if j == n - 1:
                    i += 1
                elif i == 0:
                    j += 1
                else:
                    i -= 1
                    j += 1
            else:
                if i == m - 1:
                    j += 1
                elif j == 0:
                    i += 1
                else:
                    i += 1
                    j -= 1
        return res

=======

def findDiagonalOrder(self, mat: List[List[int]]) -> List[int]:
        m, n = len(mat), len(mat[0])
        ans = []
        for i in range(m + n - 1):
            if i % 2 == 0:
                for j in range(max(0, i - n + 1), min(i + 1, m)):
                    ans.append(mat[j][i - j])
            else:
                for j in range(min(i, m - 1), max(-1, i - n), -1):
                    ans.append(mat[j][i - j])
        return ans

=======

def findDiagonalOrder(self, mat: List[List[int]]) -> List[int]:
        m, n = len(mat), len(mat[0])
        res = []
        for i in range(m+n-1):
            if i % 2 == 0:
                for j in range(i, -1, -1):
                    if j >= m or i-j >= n:
                        continue
                    res.append(mat[j][i-j])
            else:
                for j in range(i+1):
                    if j >= m or i-j >= n:
                        continue
                    res.append(mat[j][i-j])
        return res

=======

def findDiagonalOrder(self, mat: List[List[int]]) -> List[int]:
        m, n = len(mat), len(mat[0])
        res = []
        for i in range(m + n - 1):
            if i % 2 == 0:
                for j in range(min(i, m - 1), max(-1, i - n), -1):
                    res.append(mat[j][i - j])
            else:
                for j in range(max(0, i - n + 1), min(i + 1, m)):
                    res.append(mat[j][i - j])
        return res

=======

def findDiagonalOrder(self, mat: List[List[int]]) -> List[int]:
        m, n = len(mat), len(mat[0])
        i, j, res = 0, 0, []
        while i < m and j < n:
            while i >= 0 and j < n:
                res.append(mat[i][j])
                i, j = i - 1, j + 1
            i, j = i + 1, j - 1
            if j + 1 < n:
                j += 1
            else:
                i += 1
            while i < m and j >= 0:
                res.append(mat[i][j])
                i, j = i + 1, j - 1
            i, j = i - 1, j + 1
            if i + 1 < m:
                i += 1
            else:
                j += 1
        return res

=======

def findDiagonalOrder(self, mat: List[List[int]]) -> List[int]:
        m, n = len(mat), len(mat[0])
        i, j = 0, 0
        direction = 1
        ret = []
        while i < m and j < n:
            ret.append(mat[i][j])
            if direction == 1:
                if j == n - 1:
                    i += 1
                    direction = -1
                elif i == 0:
                    j += 1
                    direction = -1
                else:
                    i -= 1
                    j += 1
            else:
                if i == m - 1:
                    j += 1
                    direction = 1
                elif j == 0:
                    i += 1
                    direction = 1
                else:
                    i += 1
                    j -= 1
        return ret

=======

def findDiagonalOrder(self, mat: List[List[int]]) -> List[int]:
        m, n = len(mat), len(mat[0])
        ans = []
        for i in range(m+n-1):
            if i % 2 == 1:
                for j in range(max(0, i-n+1), min(i+1, m)):
                    ans.append(mat[j][i-j])
            else:
                for j in range(min(i, m-1), max(0, i-n), -1):
                    ans.append(mat[j][i-j])
        return ans

=======

def findDiagonalOrder(self, mat: List[List[int]]) -> List[int]:
        m, n = len(mat), len(mat[0])
        result = []
        for i in range(m):
            for j in range(n):
                result.append(mat[i][j])
        return result

=======

def findDiagonalOrder(self, mat: List[List[int]]) -> List[int]:
        m = len(mat)
        n = len(mat[0])
        i = 0
        j = 0
        k = 0
        res = []
        while k < m*n:
            res.append(mat[i][j])
            if (i+j) % 2 == 0:
                if j == n-1:
                    i += 1
                elif i == 0:
                    j += 1
                else:
                    i -= 1
                    j += 1
            else:
                if i == m-1:
                    j += 1
                elif j == 0:
                    i += 1
                else:
                    i += 1
                    j -= 1
            k += 1
        return res
