Synthesizing 10/10 solutions (Duplicates hidden)

=======

def findDuplicates(self, nums: List[int]) -> List[int]:
        res = []
        for num in nums:
            if nums[abs(num) - 1] < 0:
                res.append(abs(num))
            else:
                nums[abs(num) - 1] *= -1
        return res

=======

def findDuplicates(self, nums: List[int]) -> List[int]:
        res = []
        for i in range(len(nums)):
            if nums[abs(nums[i])-1] < 0:
                res.append(abs(nums[i]))
            else:
                nums[abs(nums[i])-1] *= -1
        return res

=======

def findDuplicates(self, nums: List[int]) -> List[int]:
        d = {}
        for i in range(len(nums)):
            if nums[i] in d:
                d[nums[i]] += 1
            else:
                d[nums[i]] = 1
        return [key for key, value in d.items() if value == 2]

=======

def findDuplicates(self, nums: List[int]) -> List[int]:
        return [i for i in set(nums) if nums.count(i) == 2]

=======

def findDuplicates(self, nums: List[int]) -> List[int]:
        return [i for i in set(nums) if nums.count(i) > 1]
