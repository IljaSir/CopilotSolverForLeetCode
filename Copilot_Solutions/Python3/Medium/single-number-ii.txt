Synthesizing 10/10 solutions (Duplicates hidden)

=======

def singleNumber(self, nums: List[int]) -> int:
        a = 0
        b = 0
        for i in nums:
            a = (a ^ i) & ~b
            b = (b ^ i) & ~a
        return a

=======

def singleNumber(self, nums: List[int]) -> int:
        return (3 * sum(set(nums)) - sum(nums)) // 2

=======

def singleNumber(self, nums: List[int]) -> int:
        return (sum(set(nums)) * 3 - sum(nums)) // 2

=======

class Solution:
    def singleNumber(self, nums: List[int]) -> int:
        # 1. O(n) - O(n)
        # 2. O(n) - O(1)
        # 3. O(n) - O(1)
        # 4. O(n) - O(1)
        # 5. O(n) - O(1)
        # 6. O(n) - O(1)
        # 7. O(n) - O(1)
        # 8. O(n) - O(1)
        # 9. O(n) - O(1)
        # 10. O(n) - O(1)
        # 11. O(n) - O(1)
        # 12. O(n) - O(1)
        # 13. O(n) - O(1)
        # 14. O(n) - O(1)
        # 15. O(n) - O(1)
        # 16. O(n) - O(1)
        # 17. O(n) - O(1)
        # 18. O(n) - O(1)
        # 19. O(n) - O(1)
        # 20. O(n) - O(1)
        # 21. O(n) - O(1)
        # 22. O(n) - O(1)
        # 23. O(n) - O(1)
        # 24. O(n) - O(1)
        # 25. O(n) - O(1)
        # 26. O(n) - O(1)
        # 27. O(n) - O(1)
        # 28. O(n) - O(1)
        # 29. O(n) - O(1)
        # 30. O(n) - O(1)
        # 31. O(n) - O(1)
        # 32. O(n) - O(1)
        # 33. O(n) - O(1)
        # 34. O(n) - O(1)
        # 35. O(n) - O(1)
        # 36. O(n) - O(1)
        # 37. O(n) - O(1)
        # 38. O(n) - O(1)
        # 39. O

=======

class Solution:
    def singleNumber(self, nums: List[int]) -> int:
        # 1. Bit manipulation
        # Time O(n), Space O(1)
        # a, b = 0, 0
        # for num in nums:
        #     b = ~a & (b ^ num)
        #     a = ~b & (a ^ num)
        # return b

        # 2. Hash table
        # Time O(n), Space O(n)
        # d = {}
        # for num in nums:
        #     d[num] = d.get(num, 0) + 1
        # for num in d:
        #     if d[num] == 1:
        #         return num

        # 3. Math
        # Time O(n), Space O(n)
        # s = set(nums)
        # return (3 * sum(s) - sum(nums)) // 2

        # 4. Sorting
        # Time O(nlogn), Space O(1)
        # nums.sort()
        # for i in range(0, len(nums) - 2, 3):
        #     if nums[i] != nums[i + 1]:
        #         return nums[i]
        # return nums[-1]

        # 5. Sorting
        # Time O(nlogn), Space O(1)
        # nums.sort()
        # return (3 * sum(set(nums)) - sum(nums)) // 2

        # 6. Sorting
        # Time O(nlogn), Space O(1)
        # nums.sort()
        # for i in range(0, len(nums) - 2, 3):
        #     if nums[i] != nums[i + 1]:
        #         return nums[i]
        # return nums[-1]

        # 7. Sorting
        # Time O(nlogn), Space O(1)
        # nums.sort()
        # return (3 * sum(set(nums)) - sum(nums)) // 2

        # 8. Sorting
        # Time O(nlogn), Space O(1)
        # nums.sort()
        # for i in range(0, len(nums) - 2, 3):
        #     if nums[i] != nums[i + 1]:
        #         return nums[i]
        # return nums[-1]

        # 9. Sorting
        # Time O(nlogn),

=======

class Solution:
    def singleNumber(self, nums: List[int]) -> int:
        # 1. Bit Manipulation
        # 2. Hash Table
        # 3. Math
        # 4. Sorting
        # 5. Set
        # 6. XOR
        # 7. Bit Manipulation
        # 8. Bit Manipulation
        # 9. Bit Manipulation
        # 10. Bit Manipulation
        # 11. Bit Manipulation
        # 12. Bit Manipulation
        # 13. Bit Manipulation
        # 14. Bit Manipulation
        # 15. Bit Manipulation
        # 16. Bit Manipulation
        # 17. Bit Manipulation
        # 18. Bit Manipulation
        # 19. Bit Manipulation
        # 20. Bit Manipulation
        # 21. Bit Manipulation
        # 22. Bit Manipulation
        # 23. Bit Manipulation
        # 24. Bit Manipulation
        # 25. Bit Manipulation
        # 26. Bit Manipulation
        # 27. Bit Manipulation
        # 28. Bit Manipulation
        # 29. Bit Manipulation
        # 30. Bit Manipulation
        # 31. Bit Manipulation
        # 32. Bit Manipulation
        # 33. Bit Manipulation
        # 34. Bit Manipulation
        # 35. Bit Manipulation
        # 36. Bit Manipulation
        # 37. Bit Manipulation
        # 38. Bit Manipulation
        # 39. Bit Manipulation
        # 40. Bit Manipulation
        # 41. Bit Manipulation
        # 42. Bit Manipulation
        # 43. Bit Manipulation
        # 44. Bit Manipulation
        # 45. Bit Manipulation
        # 46. Bit Manipulation
        # 47. Bit Manipulation
        # 48. Bit Manipulation
        # 49. Bit Manipulation
        # 50. Bit Manipulation
        # 51. Bit Manipulation
        # 52. Bit Manipulation
        # 53. Bit Manipulation
        # 54. Bit Manipulation
        # 55. Bit Manipulation
        # 56. Bit Manipulation
        # 57
