Synthesizing 10/10 solutions (Duplicates hidden)

=======

def topKFrequent(self, nums: List[int], k: int) -> List[int]:
        count = {}
        for num in nums:
            if num in count:
                count[num] += 1
            else:
                count[num] = 1
        count = sorted(count.items(), key=lambda x: x[1], reverse=True)
        return [item[0] for item in count[:k]]

=======

def topKFrequent(self, nums: List[int], k: int) -> List[int]:
        num_count = {}
        for num in nums:
            if num in num_count:
                num_count[num] += 1
            else:
                num_count[num] = 1
        num_count = sorted(num_count.items(), key=lambda x: x[1], reverse=True)
        return [num_count[i][0] for i in range(k)]

=======

def topKFrequent(self, nums: List[int], k: int) -> List[int]:
        from collections import Counter
        return [x[0] for x in Counter(nums).most_common(k)]

=======

def topKFrequent(self, nums: List[int], k: int) -> List[int]:
        if len(nums) <= 1:
            return nums
        dic = {}
        for num in nums:
            if num in dic:
                dic[num] += 1
            else:
                dic[num] = 1
        res = []
        for i in range(k):
            max_num = max(dic, key=dic.get)
            res.append(max_num)
            dic.pop(max_num)
        return res

=======

def topKFrequent(self, nums: List[int], k: int) -> List[int]:
        return [x[0] for x in collections.Counter(nums).most_common(k)]

=======

def topKFrequent(self, nums: List[int], k: int) -> List[int]:
        return [a[0] for a in collections.Counter(nums).most_common(k)]

=======

def topKFrequent(self, nums: List[int], k: int) -> List[int]:
        return [x for x, _ in collections.Counter(nums).most_common(k)]

=======

def topKFrequent(self, nums: List[int], k: int) -> List[int]:
        # Approach #1, priority queue
        # Time: O(nlogk), Space: O(n)
        # return [i[0] for i in Counter(nums).most_common(k)]
        # Approach #2, bucket sort
        # Time: O(n), Space: O(n)
        count = collections.Counter(nums)
        bucket = [[] for _ in range(len(nums) + 1)]
        for key, val in count.items():
            bucket[val].append(key)
        res = []
        for i in range(len(bucket) - 1, -1, -1):
            if bucket[i]:
                res += bucket[i]
            if len(res) >= k:
                return res[:k]
        return res
