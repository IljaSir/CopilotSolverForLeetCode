Synthesizing 10/10 solutions (Duplicates hidden)

=======

def findMaxLength(self, nums: List[int]) -> int:
        d = {0: -1}
        count = 0
        max_len = 0
        for i, num in enumerate(nums):
            count += 1 if num else -1
            if count in d:
                max_len = max(max_len, i - d[count])
            else:
                d[count] = i
        return max_len

=======

def findMaxLength(self, nums: List[int]) -> int:
        d = {0: -1}
        ans = 0
        count = 0
        for i, num in enumerate(nums):
            if num == 1:
                count += 1
            else:
                count -= 1
            if count in d:
                ans = max(ans, i - d[count])
            else:
                d[count] = i
        return ans

=======

def findMaxLength(self, nums: List[int]) -> int:
        d = {0:0}
        c = 0
        r = 0
        for i, n in enumerate(nums):
            c += 1 if n else -1
            if c in d:
                r = max(r, i + 1 - d[c])
            else:
                d[c] = i + 1
        return r

=======

def findMaxLength(self, nums: List[int]) -> int:
        n = len(nums)
        for i in range(n):
            if nums[i] == 0:
                nums[i] = -1
        ans = 0
        for i in range(n):
            sum = 0
            for j in range(i, n):
                sum += nums[j]
                if sum == 0:
                    ans = max(ans, j - i + 1)
        return ans

=======

def findMaxLength(self, nums: List[int]) -> int:
        count = 0
        max_length = 0
        d = {0:-1}
        for i in range(len(nums)):
            if nums[i] == 1:
                count += 1
            else:
                count -= 1
            if count in d:
                max_length = max(max_length, i - d[count])
            else:
                d[count] = i
        return max_length

=======

def findMaxLength(self, nums: List[int]) -> int:
        d = {0:-1}
        s = 0
        m = 0
        for i, v in enumerate(nums):
            if v == 1:
                s += 1
            else:
                s -= 1
            if s in d:
                m = max(m, i-d[s])
            else:
                d[s] = i
        return m

=======

def findMaxLength(self, nums: List[int]) -> int:
        d = {0:-1}
        m = 0
        count = 0
        for i, num in enumerate(nums):
            if num == 0:
                count -= 1
            else:
                count += 1
            if count in d:
                m = max(m, i - d[count])
            else:
                d[count] = i
        return m

=======

def findMaxLength(self, nums: List[int]) -> int:
        max_len = 0
        sum = 0
        dict = {}
        for i in range(len(nums)):
            if nums[i] == 0:
                sum -= 1
            else:
                sum += 1
            if sum == 0:
                max_len = i + 1
            else:
                if sum in dict:
                    max_len = max(max_len, i - dict[sum])
                else:
                    dict[sum] = i
        return max_len

=======

class Solution:
    def findMaxLength(self, nums: List[int]) -> int:
        # 0 -> -1
        # 1 -> +1
        # [0,1,0,1,0,0,1,1]
        # [0,1,0,1,0,0,1,1,0,0,1,1,1,1,0,0,1,1,1,1]
        # [0,1,0,1,0,0,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,
