Synthesizing 10/10 solutions (Duplicates hidden)

=======

def hIndex(self, citations: List[int]) -> int:
        n = len(citations)
        left, right = 0, n - 1
        while left <= right:
            mid = (left + right) // 2
            if citations[mid] == n - mid:
                return n - mid
            elif citations[mid] < n - mid:
                left = mid + 1
            else:
                right = mid - 1
        return n - left

=======

def hIndex(self, citations: List[int]) -> int:
        n = len(citations)
        l, r = 0, n - 1
        while l <= r:
            mid = (l + r) // 2
            if citations[mid] >= n - mid:
                r = mid - 1
            else:
                l = mid + 1
        return n - l

=======

def hIndex(self, citations: List[int]) -> int:
        n = len(citations)
        l, r = 0, n - 1
        while l <= r:
            m = (l + r) // 2
            if citations[m] < n - m:
                l = m + 1
            else:
                r = m - 1
        return n - l

=======

def hIndex(self, citations: List[int]) -> int:
        n = len(citations)
        left, right = 0, n-1
        while left <= right:
            mid = (left + right) // 2
            if citations[mid] == n - mid:
                return n - mid
            elif citations[mid] > n - mid:
                right = mid - 1
            else:
                left = mid + 1
        return n - left

=======

def hIndex(self, citations: List[int]) -> int:
        n = len(citations)
        l, r = 0, n-1
        while l <= r:
            mid = (l+r)//2
            if citations[mid] == n-mid:
                return n-mid
            elif citations[mid] > n-mid:
                r = mid - 1
            else:
                l = mid + 1
        return n-l

=======

def hIndex(self, citations: List[int]) -> int:
        n = len(citations)
        l, r = 0, n-1
        while l <= r:
            m = (l+r)//2
            if citations[m] == n-m:
                return citations[m]
            elif citations[m] < n-m:
                l = m + 1
            else:
                r = m - 1
        return n-l

=======

def hIndex(self, citations: List[int]) -> int:
        n = len(citations)
        for i in range(n):
            if citations[i] >= n-i:
                return n-i
        return 0
