Synthesizing 10/10 solutions (Duplicates hidden)

=======

def longestWord(self, words: List[str]) -> str:
        words.sort()
        words_set = set()
        res = ""
        for word in words:
            if len(word) == 1 or word[:-1] in words_set:
                words_set.add(word)
                if len(word) > len(res):
                    res = word
        return res

=======

def longestWord(self, words: List[str]) -> str:
        words.sort()
        word_set = set()
        longest_word = ''
        for word in words:
            if len(word) == 1 or word[:-1] in word_set:
                word_set.add(word)
                if len(word) > len(longest_word):
                    longest_word = word
        return longest_word

=======

def longestWord(self, words: List[str]) -> str:
        words.sort()
        seen = set()
        res = ""
        for word in words:
            if len(word) == 1 or word[:-1] in seen:
                seen.add(word)
                if len(word) > len(res):
                    res = word
        return res

=======

def longestWord(self, words: List[str]) -> str:
        words.sort()
        wordset = set()
        res = ""
        for word in words:
            if len(word) == 1 or word[:-1] in wordset:
                res = word if len(word) > len(res) else res
                wordset.add(word)
        return res

=======

def longestWord(self, words: List[str]) -> str:
        words.sort()
        words = set(words)
        res = ""
        for w in words:
            if len(w) == 1 or w[:-1] in words:
                if len(w) > len(res):
                    res = w
        return res

=======

def longestWord(self, words: List[str]) -> str:
        words.sort()
        words = set(words)
        ans = ""
        for word in words:
            if len(word) > len(ans) or (len(word) == len(ans) and word < ans):
                if all(word[:k] in words for k in range(1, len(word))):
                    ans = word
        return ans

=======

def longestWord(self, words: List[str]) -> str:
        words.sort()
        words = set(words)
        res = ''
        for w in words:
            if all(w[:i] in words for i in range(1, len(w))):
                if len(w) > len(res):
                    res = w
        return res

=======

def longestWord(self, words: List[str]) -> str:
        words = sorted(words)
        ans = ""
        word_set = set()
        for word in words:
            if len(word) == 1 or word[:-1] in word_set:
                ans = word if len(word) > len(ans) else ans
                word_set.add(word)
        return ans

=======

def longestWord(self, words: List[str]) -> str:
        words.sort()
        words_set = set(words)
        length = 0
        ans = ''
        for word in words:
            if len(word) == 1 or word[:-1] in words_set:
                if len(word) > length:
                    ans = word
                    length = len(word)
        return ans
