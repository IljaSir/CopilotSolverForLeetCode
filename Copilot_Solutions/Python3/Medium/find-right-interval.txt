Synthesizing 10/10 solutions

=======

def findRightInterval(self, intervals: List[List[int]]) -> List[int]:
        starts = sorted((e[0], i) for i, e in enumerate(intervals))
        res = []
        for e in intervals:
            pos = bisect.bisect_left(starts, (e[1],))
            res.append(starts[pos][1] if pos < len(starts) else -1)
        return res

=======

def findRightInterval(self, intervals: List[List[int]]) -> List[int]:
        starts = [(s, i) for i, (s, e) in enumerate(intervals)]
        starts.sort()
        res = []
        for s, e in intervals:
            i = bisect.bisect_left(starts, (e,))
            res.append(starts[i][1] if i < len(starts) else -1)
        return res

=======

def findRightInterval(self, intervals: List[List[int]]) -> List[int]:
        s = sorted((e, i) for i, (s, e) in enumerate(intervals))
        res = []
        for e, i in intervals:
            idx = bisect.bisect_left(s, (e,))
            res.append(s[idx][1] if idx < len(s) else -1)
        return res

=======

def findRightInterval(self, intervals: List[List[int]]) -> List[int]:
        res = []
        for i in range(len(intervals)):
            r = -1
            for j in range(len(intervals)):
                if i != j and intervals[j][0] >= intervals[i][1]:
                    if r == -1:
                        r = j
                    elif intervals[j][0] < intervals[r][0]:
                        r = j
            res.append(r)
        return res

=======

def findRightInterval(self, intervals: List[List[int]]) -> List[int]:
        n = len(intervals)
        start = sorted((e[0], i) for i, e in enumerate(intervals))
        res = []
        for e in intervals:
            i = bisect.bisect_left(start, (e[1],))
            res.append(start[i][1] if i < n else -1)
        return res

=======

def findRightInterval(self, intervals: List[List[int]]) -> List[int]:
        start = sorted((e[0],i) for i,e in enumerate(intervals))
        res = []
        for e in intervals:
            r = bisect.bisect_left(start,(e[1]))
            res.append(start[r][1] if r < len(intervals) else -1)
        return res

=======

def findRightInterval(self, intervals: List[List[int]]) -> List[int]:
        N = len(intervals)
        starts = sorted((s, i) for i, (s, e) in enumerate(intervals))
        res = []
        for e, i in intervals:
            j = bisect.bisect_left(starts, (e, -1))
            res.append(starts[j][1] if j < N else -1)
        return res

=======

def findRightInterval(self, intervals: List[List[int]]) -> List[int]:
        n = len(intervals)
        res = [-1] * n
        srt = sorted((e[0], i) for i, e in enumerate(intervals))
        for i, e in enumerate(intervals):
            j = bisect.bisect_left(srt, (e[1],))
            if j < n:
                res[i] = srt[j][1]
        return res

=======

def findRightInterval(self, intervals: List[List[int]]) -> List[int]:
        d = {}
        for i in range(len(intervals)):
            d[intervals[i][0]] = i
        intervals.sort()
        ans = []
        for i in range(len(intervals)):
            index = d.get(intervals[i][1], -1)
            if index == -1:
                ans.append(-1)
            else:
                ans.append(index)
        return ans

=======

def findRightInterval(self, intervals: List[List[int]]) -> List[int]:
        
        pass
