Synthesizing 10/10 solutions

=======

def findSubsequences(self, nums: List[int]) -> List[List[int]]:
        res = set()
        def dfs(nums, path):
            if len(path) > 1:
                res.add(tuple(path))
            for i in range(len(nums)):
                if not path or nums[i] >= path[-1]:
                    dfs(nums[i+1:], path+[nums[i]])
        dfs(nums, [])
        return res

=======

def findSubsequences(self, nums: List[int]) -> List[List[int]]:
        ans = set()
        def dfs(nums, path):
            if len(path) >= 2:
                ans.add(tuple(path))
            for i in range(len(nums)):
                if not path or nums[i] >= path[-1]:
                    dfs(nums[i+1:], path + [nums[i]])
        dfs(nums, [])
        return ans

=======

def findSubsequences(self, nums: List[int]) -> List[List[int]]:
        ans = set()
        def dfs(i, path):
            if len(path) > 1:
                ans.add(tuple(path))
            for j in range(i, len(nums)):
                if not path or nums[j] >= path[-1]:
                    dfs(j + 1, path + [nums[j]])
        dfs(0, [])
        return ans

=======

def findSubsequences(self, nums: List[int]) -> List[List[int]]:
        res = []
        def dfs(i, path):
            if len(path) >= 2:
                res.append(path)
            seen = set()
            for j in range(i, len(nums)):
                if nums[j] in seen:
                    continue
                if not path or nums[j] >= path[-1]:
                    seen.add(nums[j])
                    dfs(j+1, path + [nums[j]])
        dfs(0, [])
        return res

=======

def findSubsequences(self, nums: List[int]) -> List[List[int]]:
        res = set()
        def dfs(nums, path):
            if len(nums) < 2:
                return
            for i in range(len(nums)):
                if nums[i] >= path[-1]:
                    res.add(tuple(path+[nums[i]]))
                    dfs(nums[i+1:], path+[nums[i]])
        for i in range(len(nums)):
            dfs(nums[i+1:], [nums[i]])
        return list(res)

=======

def findSubsequences(self, nums: List[int]) -> List[List[int]]:
        def dfs(nums, i, path):
            if len(path) > 1:
                res.append(path)
            used = set()
            for j in range(i, len(nums)):
                if nums[j] in used:
                    continue
                if not path or nums[j] >= path[-1]:
                    used.add(nums[j])
                    dfs(nums, j + 1, path + [nums[j]])
        res = []
        dfs(nums, 0, [])
        return res

=======

def findSubsequences(self, nums: List[int]) -> List[List[int]]:
        ans = []
        def dfs(nums, path):
            if len(path) >= 2:
                ans.append(path)
            if not nums:
                return
            for i in range(len(nums)):
                if i > 0 and nums[i] == nums[i-1]:
                    continue
                if not path or nums[i] >= path[-1]:
                    dfs(nums[i+1:], path + [nums[i]])
        dfs(nums, [])
        return ans

=======

def findSubsequences(self, nums: List[int]) -> List[List[int]]:
        def dfs(start, path):
            if len(path) > 1:
                res.append(path)
            if start == len(nums):
                return
            seen = set()
            for i in range(start, len(nums)):
                if nums[i] in seen:
                    continue
                if not path or nums[i] >= path[-1]:
                    seen.add(nums[i])
                    dfs(i+1, path + [nums[i]])
        res = []
        dfs(0, [])
        return res

=======

def findSubsequences(self, nums: List[int]) -> List[List[int]]:
        def dfs(nums, i, path, res):
            if len(path) >= 2:
                res.append(path)
            seen = set()
            for j in range(i, len(nums)):
                if (nums[j] in seen): continue
                if (not path or nums[j] >= path[-1]):
                    seen.add(nums[j])
                    dfs(nums, j + 1, path + [nums[j]], res)
        res = []
        dfs(nums, 0, [], res)
        return res

=======

def findSubsequences(self, nums: List[int]) -> List[List[int]]:
        
        pass
