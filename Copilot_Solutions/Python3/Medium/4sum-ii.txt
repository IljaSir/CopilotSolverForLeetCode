Synthesizing 10/10 solutions

=======

def fourSumCount(self, nums1: List[int], nums2: List[int], nums3: List[int], nums4: List[int]) -> int:
        d = {}
        for i in nums1:
            for j in nums2:
                d[i+j] = d.get(i+j, 0) + 1
        res = 0
        for i in nums3:
            for j in nums4:
                res += d.get(-i-j, 0)
        return res

=======

def fourSumCount(self, nums1: List[int], nums2: List[int], nums3: List[int], nums4: List[int]) -> int:
        pass

=======

def fourSumCount(self, nums1: List[int], nums2: List[int], nums3: List[int], nums4: List[int]) -> int:
        cnt = 0
        for i in range(len(nums1)):
            for j in range(len(nums2)):
                for k in range(len(nums3)):
                    for l in range(len(nums4)):
                        if nums1[i] + nums2[j] + nums3[k] + nums4[l] == 0:
                            cnt += 1
        return cnt

=======

def fourSumCount(self, nums1: List[int], nums2: List[int], nums3: List[int], nums4: List[int]) -> int:
        ans = 0
        for i in nums1:
            for j in nums2:
                for k in nums3:
                    for l in nums4:
                        if i + j + k + l == 0:
                            ans += 1
        return ans

=======

def fourSumCount(self, nums1: List[int], nums2: List[int], nums3: List[int], nums4: List[int]) -> int:
        d = {}
        for num1 in nums1:
            for num2 in nums2:
                d[num1+num2] = d.get(num1+num2, 0) + 1
        res = 0
        for num3 in nums3:
            for num4 in nums4:
                res += d.get(-(num3+num4), 0)
        return res

=======

def fourSumCount(self, nums1: List[int], nums2: List[int], nums3: List[int], nums4: List[int]) -> int:
        count = 0
        d = {}
        for n1 in nums1:
            for n2 in nums2:
                d[n1+n2] = d.get(n1+n2, 0) + 1
        for n3 in nums3:
            for n4 in nums4:
                if -n3-n4 in d:
                    count += d[-n3-n4]
        return count

=======

def fourSumCount(self, nums1: List[int], nums2: List[int], nums3: List[int], nums4: List[int]) -> int:
        c = collections.Counter(a + b for a in nums1 for b in nums2)
        return sum(c[-(c + d)] for c in nums3 for d in nums4)

=======

def fourSumCount(self, nums1: List[int], nums2: List[int], nums3: List[int], nums4: List[int]) -> int:
        m = {}
        for i in nums1:
            for j in nums2:
                if i+j in m:
                    m[i+j] += 1
                else:
                    m[i+j] = 1
        count = 0
        for i in nums3:
            for j in nums4:
                if -i-j in m:
                    count += m[-i-j]
        return count

=======

def fourSumCount(self, nums1: List[int], nums2: List[int], nums3: List[int], nums4: List[int]) -> int:
        res = 0
        from collections import Counter
        c1 = Counter(a+b for a in nums1 for b in nums2)
        c2 = Counter(c+d for c in nums3 for d in nums4)
        for k in c1:
            res += c1[k] * c2[-k]
        return res

=======

class Solution:
    def fourSumCount(self, nums1: List[int], nums2: List[int], nums3: List[int], nums4: List[int]) -> int:
        # 1 <= n <= 200
        # -2^28 <= nums1[i], nums2[i], nums3[i], nums4[i] <= 2^28
        # 0 <= i, j, k, l < n
        # nums1[i] + nums2[j] + nums3[k] + nums4[l] == 0
        # 2^28 * 4 = 2^30
        # 2^30 / 2^28 = 2^2 = 4
        # 4 * 200 = 800
        # 800 * 200 = 160000
        # 160000 * 200 = 32000000
        # 32000000 * 200 = 6400000000
        # 6400000000 * 200 = 1280000000000
        # 1280000000000 * 200 = 256000000000000
        # 256000000000000 * 200 = 51200000000000000
        # 51200000000000000 * 200 = 10240000000000000000
        # 10240000000000000000 * 200 = 2048000000000000000000
        # 2048000000000000000000 * 200 = 409600000000000000000000
        # 409600000000000000000000 * 200 = 81920000000000000000000000
        # 81920000000000000000000000 * 200 = 16384000000000000000000000000
        # 16384000000000000000000000000 * 200 = 3276800000000000000000000000000
        # 3276800000000000000000000000000 * 200 = 655360000000000000000000000000000
        # 655360000000000000000000000000000 * 200 = 1310720000000
