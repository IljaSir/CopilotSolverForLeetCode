Synthesizing 10/10 solutions (Duplicates hidden)

=======

def numberOfArithmeticSlices(self, nums: List[int]) -> int:
        n = len(nums)
        dp = [0] * n
        for i in range(2, n):
            if nums[i] - nums[i-1] == nums[i-1] - nums[i-2]:
                dp[i] = dp[i-1] + 1
        return sum(dp)

=======

def numberOfArithmeticSlices(self, nums: List[int]) -> int:
        n = len(nums)
        if n < 3:
            return 0
        dp = [0] * n
        for i in range(2, n):
            if nums[i] - nums[i-1] == nums[i-1] - nums[i-2]:
                dp[i] = dp[i-1] + 1
        return sum(dp)

=======

def numberOfArithmeticSlices(self, nums: List[int]) -> int:
        dp = [0] * len(nums)
        for i in range(2,len(nums)):
            if nums[i] - nums[i-1] == nums[i-1] - nums[i-2]:
                dp[i] = dp[i-1] + 1
        return sum(dp)

=======

def numberOfArithmeticSlices(self, nums: List[int]) -> int:
        if len(nums) < 3: return 0
        dp = [0] * len(nums)
        for i in range(2, len(nums)):
            if nums[i] - nums[i-1] == nums[i-1] - nums[i-2]:
                dp[i] = dp[i-1] + 1
        return sum(dp)

=======

def numberOfArithmeticSlices(self, nums: List[int]) -> int:
        if len(nums) < 3:
            return 0
        res = 0
        diff = nums[1] - nums[0]
        start = 0
        for i in range(2, len(nums)):
            if nums[i] - nums[i-1] == diff:
                continue
            if i - start >= 3:
                res += (i - start - 1) * (i - start - 2) // 2
            start = i - 1
            diff = nums[i] - nums[i-1]
        if len(nums) - start >= 3:
            res += (len(nums) - start - 1) * (len(nums) - start - 2) // 2
        return res

=======

def numberOfArithmeticSlices(self, nums: List[int]) -> int:
        if len(nums) < 3:
            return 0
        diff = nums[1] - nums[0]
        count = 0
        slices = 0
        for i in range(2, len(nums)):
            if nums[i] - nums[i-1] == diff:
                count += 1
            else:
                diff = nums[i] - nums[i-1]
                count = 0
            slices += count
        return slices

=======

def numberOfArithmeticSlices(self, nums: List[int]) -> int:
        N = len(nums)
        if N < 3:
            return 0
        diff = nums[1] - nums[0]
        count = 0
        ans = 0
        for i in range(2, N):
            if nums[i] - nums[i-1] == diff:
                count += 1
            else:
                diff = nums[i] - nums[i-1]
                count = 0
            ans += count
        return ans

=======

def numberOfArithmeticSlices(self, nums: List[int]) -> int:
        if len(nums) < 3:
            return 0
        slices = []
        for i in range(0, len(nums)-2):
            if nums[i+1] - nums[i] == nums[i+2] - nums[i+1]:
                slices.append([nums[i], nums[i+1], nums[i+2]])
        if len(slices) == 0:
            return 0
        for i in range(0, len(slices)):
            j = i + 1
            while j < len(slices):
                if slices[i][-1] == slices[j][0]:
                    slices[i].append(slices[j][1])
                    slices[j][0] = slices[j][1]
                else:
                    j += 1
        return len(slices)

=======

class Solution:
    def numberOfArithmeticSlices(self, nums: List[int]) -> int:
        # dp[i] = dp[i-1] + 1 if nums[i] - nums[i-1] == nums[i-1] - nums[i-2] else 0
        # dp[i] = 1 if nums[i] - nums[i-1] == nums[i-1] - nums[i-2] else 0
        # dp[i] = dp[i-1] + 1 if nums[i] - nums[i-1] == nums[i-1] - nums[i-2] else 0
        # dp[i] = 1 if nums[i] - nums[i-1] == nums[i-1] - nums[i-2] else 0
        # dp[i] = dp[i-1] + 1 if nums[i] - nums[i-1] == nums[i-1] - nums[i-2] else 0
        # dp[i] = 1 if nums[i] - nums[i-1] == nums[i-1] - nums[i-2] else 0
        # dp[i] = dp[i-1] + 1 if nums[i] - nums[i-1] == nums[i-1] - nums[i-2] else 0
        # dp[i] = 1 if nums[i] - nums[i-1] == nums[i-1] - nums[i-2] else 0
        # dp[i] = dp[i-1] + 1 if nums[i] - nums[i-1] == nums[i-1] - nums[i-2] else 0
        # dp[i] = 1 if nums[i] - nums[i-1] == nums[i-1] - nums[i-2] else 0
        # dp[i] = dp[i-1] + 1 if nums[i] - nums[i-1] == nums[i-1] - nums[i-2] else 0
        # dp[i] = 1 if nums[i] - nums[i-1] == nums[i-1] - nums[i-2] else 0
        # dp[i] = dp[i-1] + 1 if nums[i] - nums[i-1] == nums[i-1] - nums[i-2] else 0
        # dp[i] = 1 if nums[i] - nums[i
