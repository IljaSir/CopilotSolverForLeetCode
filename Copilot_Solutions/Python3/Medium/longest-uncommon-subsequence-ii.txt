Synthesizing 10/10 solutions

=======

def findLUSlength(self, strs: List[str]) -> int:
        def isSubsequence(s, t):
            i = j = 0
            while i < len(s) and j < len(t):
                if s[i] == t[j]:
                    i += 1
                j += 1
            return i == len(s)
        strs.sort(key=lambda x: len(x), reverse=True)
        for i, s in enumerate(strs):
            if all(not isSubsequence(s, t) for j, t in enumerate(strs) if i != j):
                return len(s)
        return -1

=======

def findLUSlength(self, strs: List[str]) -> int:
        def isSubsequence(s1, s2):
            i = 0
            for c in s2:
                if i < len(s1) and c == s1[i]:
                    i += 1
            return i == len(s1)
        strs.sort(key=len, reverse=True)
        for i, s1 in enumerate(strs):
            if all(not isSubsequence(s1, s2) for j, s2 in enumerate(strs) if i != j):
                return len(s1)
        return -1

=======

def findLUSlength(self, strs: List[str]) -> int:
        strs.sort(key=len, reverse=True)
        for i, s1 in enumerate(strs):
            if all(not self.isSubsequence(s1, s2) for j, s2 in enumerate(strs) if i != j):
                return len(s1)
        return -1

=======

def findLUSlength(self, strs: List[str]) -> int:
        def isSubseq(s1, s2):
            i = 0
            for c in s2:
                if i < len(s1) and s1[i] == c:
                    i += 1
            return i == len(s1)
        
        strs.sort(key=len, reverse=True)
        for i, s in enumerate(strs):
            if sum(isSubseq(s, s2) for s2 in strs if s != s2) == 0:
                return len(s)
        return -1

=======

def findLUSlength(self, strs: List[str]) -> int:
        def isSubsequence(s, t):
            it = iter(t)
            return all(c in it for c in s)
        strs.sort(key=len, reverse=True)
        for i, s in enumerate(strs):
            if all(not isSubsequence(s, t) for j, t in enumerate(strs) if i != j):
                return len(s)
        return -1

=======

def findLUSlength(self, strs: List[str]) -> int:
        def isSubsequence(s: str, t: str) -> bool:
            it = iter(t)
            return all(c in it for c in s)
        
        strs.sort(key=len, reverse=True)
        for i, s in enumerate(strs):
            if sum(isSubsequence(s, t) for t in strs) == 1:
                return len(s)
        return -1

=======

def findLUSlength(self, strs: List[str]) -> int:
        def is_subsequence(s1, s2):
            if not s1:
                return True
            if not s2:
                return False
            if s1[0] == s2[0]:
                return is_subsequence(s1[1:], s2[1:])
            return is_subsequence(s1, s2[1:])
        for s in sorted(strs, key=len, reverse=True):
            if sum(is_subsequence(s, t) for t in strs) == 1:
                return len(s)
        return -1

=======

def findLUSlength(self, strs: List[str]) -> int:
        def isSubsequence(s1, s2):
            if len(s1) > len(s2):
                return False
            i = 0
            for c in s2:
                if i < len(s1) and s1[i] == c:
                    i += 1
            return i == len(s1)
        strs.sort(key = len, reverse = True)
        for i in range(len(strs)):
            if i == 0 or strs[i] != strs[i - 1]:
                if all(not isSubsequence(strs[i], strs[j]) for j in range(len(strs)) if i != j):
                    return len(strs[i])
        return -1

=======

def findLUSlength(self, strs: List[str]) -> int:
        if len(strs) == 1:
            return len(strs[0])
        strs.sort(key=lambda x: len(x), reverse=True)
        for i in range(len(strs)):
            if i == 0:
                if strs[i] != strs[i+1]:
                    return len(strs[i])
            elif i == len(strs)-1:
                if strs[i] != strs[i-1]:
                    return len(strs[i])
            else:
                if strs[i] != strs[i-1] and strs[i] != strs[i+1]:
                    return len(strs[i])
        return -1

=======

def findLUSlength(self, strs: List[str]) -> int:
        for i in range(len(strs),0,-1):
            for j in range(len(strs)):
                if len(strs[j]) != i:
                    continue
                flag = True
                for k in range(len(strs)):
                    if j == k:
                        continue
                    if self.check(strs[j],strs[k]):
                        flag = False
                        break
                if flag:
                    return i
        return -1
