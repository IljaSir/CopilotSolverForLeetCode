Synthesizing 9/10 solutions (Duplicates hidden)

=======

def myPow(self, x: float, n: int) -> float:
        if n == 0:
            return 1
        if n < 0:
            return 1/self.myPow(x, -n)
        if n % 2 == 0:
            return self.myPow(x*x, n//2)
        else:
            return x * self.myPow(x, n-1)

=======

def myPow(self, x: float, n: int) -> float:
        if n == 0:
            return 1
        if n < 0:
            return 1/self.myPow(x, -n)
        if n % 2 == 1:
            return x * self.myPow(x, n-1)
        return self.myPow(x*x, n//2)

=======

def myPow(self, x: float, n: int) -> float:
        if n < 0:
            x = 1/x
            n = -n
        ans = 1
        while n:
            if n&1:
                ans *= x
            x *= x
            n >>= 1
        return ans

=======

def myPow(self, x: float, n: int) -> float:
        if x == 0:
            return 0
        if n == 0:
            return 1
        if n < 0:
            return 1/self.myPow(x, -n)
        if n % 2 == 0:
            return self.myPow(x*x, n/2)
        return x*self.myPow(x*x, n//2)

=======

def myPow(self, x: float, n: int) -> float:
        if n == 0:
            return 1
        elif n < 0:
            x = 1/x
            n = -n
        if n%2 == 0:
            return self.myPow(x*x, n/2)
        else:
            return x*self.myPow(x*x, n//2)

=======

def myPow(self, x: float, n: int) -> float:
        if n == 0:
            return 1
        if n < 0:
            n = -n
            x = 1/x
        if n % 2:
            return x * self.myPow(x * x, n // 2)
        else:
            return self.myPow(x * x, n // 2)

=======

def myPow(self, x: float, n: int) -> float:
        return x**n
