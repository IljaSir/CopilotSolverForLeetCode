Synthesizing 10/10 solutions (Duplicates hidden)

=======

def minimumLengthEncoding(self, words: List[str]) -> int:
        words = set(words)
        for word in words:
            for i in range(1, len(word)):
                words.discard(word[i:])
        return sum(len(word) + 1 for word in words)

=======

def minimumLengthEncoding(self, words: List[str]) -> int:
        w = set(words)
        for word in words:
            for i in range(1, len(word)):
                w.discard(word[i:])
        return sum(len(word) + 1 for word in w)

=======

def minimumLengthEncoding(self, words: List[str]) -> int:
        words.sort(key=len, reverse=True)
        s = set(words)
        for w in words:
            for i in range(1, len(w)):
                s.discard(w[i:])
        return sum(len(w) + 1 for w in s)

=======

def minimumLengthEncoding(self, words: List[str]) -> int:
        
        pass

=======

def minimumLengthEncoding(self, words: List[str]) -> int:
        words = list(set(words))
        words.sort(key=lambda x: len(x), reverse=True)
        res = 0
        for i, w in enumerate(words):
            if all(w != words[j][-len(w):] for j in range(i)):
                res += len(w) + 1
        return res

=======

def minimumLengthEncoding(self, words: List[str]) -> int:
        # The idea is to find the number of unique suffixes.
        # The number of unique suffixes is equal to the number of unique words in the reversed list of words.
        # So, we reverse each word and find the number of unique words in the reversed list.
        # The length of the shortest encoding is the sum of the lengths of the words plus the number of unique words.
        return sum(len(word) + 1 for word in set(word[::-1] for word in words)) - len(set(word[::-1] for word in words))
