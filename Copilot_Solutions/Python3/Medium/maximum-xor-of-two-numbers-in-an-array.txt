Synthesizing 10/10 solutions (Duplicates hidden)

=======

def findMaximumXOR(self, nums: List[int]) -> int:
        ans = 0
        for i in range(31, -1, -1):
            ans <<= 1
            prefixes = {num >> i for num in nums}
            ans += any(ans^1 ^ p in prefixes for p in prefixes)
        return ans

=======

def findMaximumXOR(self, nums: List[int]) -> int:
        ans = 0
        for i in range(32)[::-1]:
            ans <<= 1
            prefixes = {num >> i for num in nums}
            ans += any(ans^1 ^ p in prefixes for p in prefixes)
        return ans

=======

def findMaximumXOR(self, nums: List[int]) -> int:
        ans = 0
        for i in range(31, -1, -1):
            ans <<= 1
            prefixes = {n >> i for n in nums}
            ans += any(ans^1 ^ p in prefixes for p in prefixes)
        return ans

=======

def findMaximumXOR(self, nums: List[int]) -> int:
        max_xor = 0
        for i in range(31, -1, -1):
            max_xor <<= 1
            prefixes = {num >> i for num in nums}
            max_xor += any(max_xor^1^p in prefixes for p in prefixes)
        return max_xor

=======

def findMaximumXOR(self, nums: List[int]) -> int:
        pass

=======

def findMaximumXOR(self, nums: List[int]) -> int:
        max_num = max(nums)
        L = len(bin(max_num)) - 2
        nums = [[(num >> i) & 1 for i in range(L)][::-1] for num in nums]
        root = {}
        for num in nums:
            node = root
            for bit in num:
                if bit not in node:
                    node[bit] = {}
                node = node[bit]
        max_xor = 0
        for num in nums:
            node = root
            xor = 0
            for bit in num:
                if 1 - bit in node:
                    xor = (xor << 1) | 1
                    node = node[1 - bit]
                else:
                    xor = xor << 1
                    node = node[bit]
            max_xor = max(max_xor, xor)
        return max_xor

=======

def findMaximumXOR(self, nums: List[int]) -> int:
        max_num = max(nums)
        max_length = len(bin(max_num)) - 2
        nums = [[(num >> i) & 1 for i in range(max_length)][::-1] for num in nums]
        root = {}
        for num in nums:
            node = root
            for bit in num:
                if bit not in node:
                    node[bit] = {}
                node = node[bit]
        max_xor = 0
        for num in nums:
            node = root
            curr_xor = 0
            for bit in num:
                if 1 - bit in node:
                    curr_xor = (curr_xor << 1) | 1
                    node = node[1 - bit]
                else:
                    curr_xor = curr_xor << 1
                    node = node[bit]
            max_xor = max(max_xor, curr_xor)
        return max_xor

=======

def findMaximumXOR(self, nums: List[int]) -> int:
        max_num = max(nums)
        mask = 0
        for i in range(31, -1, -1):
            mask = mask | (1 << i)
            prefix_set = set()
            for num in nums:
                prefix_set.add(num & mask)
            temp = max_num | (1 << i)
            for prefix in prefix_set:
                if temp ^ prefix in prefix_set:
                    max_num = temp
                    break
        return max_num
