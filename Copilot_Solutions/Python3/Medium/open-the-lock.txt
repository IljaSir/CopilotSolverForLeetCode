Synthesizing 10/10 solutions (Duplicates hidden)

=======

def openLock(self, deadends: List[str], target: str) -> int:
        def neighbors(node):
            for i in range(4):
                x = int(node[i])
                for d in (-1, 1):
                    y = (x + d) % 10
                    yield node[:i] + str(y) + node[i+1:]
        dead = set(deadends)
        queue = collections.deque([('0000', 0)])
        seen = {'0000'}
        while queue:
            node, depth = queue.popleft()
            if node == target:
                return depth
            if node in dead:
                continue
            for nei in neighbors(node):
                if nei not in seen:
                    seen.add(nei)
                    queue.append((nei, depth + 1))
        return -1

=======

def openLock(self, deadends: List[str], target: str) -> int:
        def get_next(s):
            for i in range(4):
                x = int(s[i])
                for d in (-1, 1):
                    y = (x + d) % 10
                    yield s[:i] + str(y) + s[i+1:]
        dead = set(deadends)
        queue = [('0000', 0)]
        seen = {'0000'}
        while queue:
            s, step = queue.pop(0)
            if s == target:
                return step
            if s in dead:
                continue
            for s2 in get_next(s):
                if s2 not in seen:
                    seen.add(s2)
                    queue.append((s2, step+1))
        return -1

=======

def openLock(self, deadends: List[str], target: str) -> int:
        def nextStatus(status):
            for i in range(4):
                x = int(status[i])
                for d in (-1, 1):
                    y = (x + d) % 10
                    yield status[:i] + str(y) + status[i+1:]
        dead = set(deadends)
        q = collections.deque([('0000', 0)])
        seen = {'0000'}
        while q:
            status, step = q.popleft()
            if status == target:
                return step
            if status in dead:
                continue
            for next_status in nextStatus(status):
                if next_status not in seen:
                    q.append((next_status, step + 1))
                    seen.add(next_status)
        return -1

=======

def openLock(self, deadends: List[str], target: str) -> int:
        deadends = set(deadends)
        if '0000' in deadends:
            return -1
        queue = collections.deque([('0000', 0)])
        visited = set()
        while queue:
            node, step = queue.popleft()
            if node == target:
                return step
            for i in range(4):
                for d in [-1, 1]:
                    new = node[:i] + str((int(node[i]) + d) % 10) + node[i+1:]
                    if new not in deadends and new not in visited:
                        queue.append((new, step + 1))
                        visited.add(new)
        return -1

=======

def openLock(self, deadends: List[str], target: str) -> int:
        dead = set(deadends)
        if '0000' in dead:
            return -1
        q = collections.deque([('0000', 0)])
        seen = {'0000'}
        while q:
            node, step = q.popleft()
            if node == target:
                return step
            for i in range(4):
                for d in (-1, 1):
                    new = node[:i] + str((int(node[i]) + d) % 10) + node[i+1:]
                    if new not in seen and new not in dead:
                        q.append((new, step + 1))
                        seen.add(new)
        return -1

=======

def openLock(self, deadends: List[str], target: str) -> int:
        def nextNum(s):
            for i in range(4):
                x = int(s[i])
                for d in (-1, 1):
                    y = (x + d) % 10
                    yield s[:i] + str(y) + s[i+1:]
        dead = set(deadends)
        q = collections.deque([('0000', 0)])
        seen = {'0000'}
        while q:
            node, depth = q.popleft()
            if node == target:
                return depth
            if node in dead:
                continue
            for nei in nextNum(node):
                if nei not in seen:
                    seen.add(nei)
                    q.append((nei, depth + 1))
        return -1

=======

def openLock(self, deadends: List[str], target: str) -> int:
        deadends = set(deadends)
        if '0000' in deadends:
            return -1
        queue = [('0000', 0)]
        seen = set()
        while queue:
            node, depth = queue.pop(0)
            if node == target:
                return depth
            if node in seen:
                continue
            seen.add(node)
            for i in range(4):
                for j in (-1, 1):
                    tmp = node[:i] + str((int(node[i]) + j) % 10) + node[i+1:]
                    if tmp not in seen and tmp not in deadends:
                        queue.append((tmp, depth + 1))
        return -1

=======

def openLock(self, deadends: List[str], target: str) -> int:
        if '0000' in deadends:
            return -1
        if target == '0000':
            return 0
        from collections import deque
        q = deque([['0000', 0]])
        visited = set(deadends)
        while q:
            cur, step = q.popleft()
            for i in range(4):
                for j in [-1, 1]:
                    new = cur[:i] + str((int(cur[i]) + j) % 10) + cur[i + 1:]
                    if new in visited:
                        continue
                    if new == target:
                        return step + 1
                    visited.add(new)
                    q.append([new, step + 1])
        return -1

=======

def openLock(self, deadends: List[str], target: str) -> int:
        deadends = set(deadends)
        if "0000" in deadends:
            return -1
        if target == "0000":
            return 0
        def next_states(state):
            for i in range(4):
                for d in (-1, 1):
                    new_state = state[:i] + str((int(state[i]) + d) % 10) + state[i+1:]
                    if new_state not in deadends:
                        yield new_state
        queue = collections.deque([("0000", 0)])
        visited = {"0000"}
        while queue:
            state, depth = queue.popleft()
            for next_state in next_states(state):
                if next_state == target:
                    return depth + 1
                if next_state not in visited:
                    visited.add(next_state)
                    queue.append((next_state, depth + 1))
        return -1
