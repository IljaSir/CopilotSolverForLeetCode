Synthesizing 10/10 solutions

=======

def findMinDifference(self, timePoints: List[str]) -> int:
        times = [int(t[:2])*60+int(t[3:]) for t in timePoints]
        times.sort()
        times.append(times[0]+24*60)
        return min(times[i+1]-times[i] for i in range(len(times)-1))

=======

def findMinDifference(self, timePoints: List[str]) -> int:
        timePoints = sorted([int(i[:2])*60+int(i[3:]) for i in timePoints])
        timePoints.append(timePoints[0]+1440)
        return min([timePoints[i+1]-timePoints[i] for i in range(len(timePoints)-1)])

=======

def findMinDifference(self, timePoints: List[str]) -> int:
        timePoints = [int(x[:2]) * 60 + int(x[3:]) for x in timePoints]
        timePoints.sort()
        timePoints.append(timePoints[0] + 1440)
        return min((timePoints[i] - timePoints[i - 1]) for i in range(1, len(timePoints)))

=======

def findMinDifference(self, timePoints: List[str]) -> int:
        timePoints = sorted(timePoints)
        minDiff = 24 * 60
        for i in range(len(timePoints) - 1):
            time1 = timePoints[i]
            time2 = timePoints[i + 1]
            diff = self.timeDiff(time1, time2)
            minDiff = min(minDiff, diff)
            
        diff = self.timeDiff(timePoints[0], timePoints[-1])
        minDiff = min(minDiff, diff)
        return minDiff

=======

def findMinDifference(self, timePoints: List[str]) -> int:
        timePoints = sorted(timePoints)
        min_diff = 24*60
        for i in range(len(timePoints)-1):
            diff = self.get_diff(timePoints[i], timePoints[i+1])
            if diff < min_diff:
                min_diff = diff
        diff = self.get_diff(timePoints[0], timePoints[-1])
        if diff < min_diff:
            min_diff = diff
        return min_diff

=======

def findMinDifference(self, timePoints: List[str]) -> int:
        minutes = []
        for time in timePoints:
            minutes.append(int(time[0:2]) * 60 + int(time[3:]))
        minutes.sort()
        min_diff = 24*60
        for i in range(len(minutes)-1):
            min_diff = min(minutes[i+1] - minutes[i], min_diff)
        return min(min_diff, minutes[0] + 24*60 - minutes[-1])

=======

def findMinDifference(self, timePoints: List[str]) -> int:
        timePoints = sorted(timePoints, key=lambda x: int(x.split(':')[0])*60+int(x.split(':')[1]))
        ans = 1440
        for i in range(len(timePoints)-1):
            ans = min(ans, (int(timePoints[i+1].split(':')[0])*60+int(timePoints[i+1].split(':')[1])) - (int(timePoints[i].split(':')[0])*60+int(timePoints[i].split(':')[1])))
        return min(ans, (int(timePoints[0].split(':')[0])*60+int(timePoints[0].split(':')[1]) + 1440) - (int(timePoints[-1].split(':')[0])*60+int(timePoints[-1].split(':')[1])))

=======

def findMinDifference(self, timePoints: List[str]) -> int:
        def getMinute(time):
            h, m = time.split(":")
            return int(h) * 60 + int(m)
        minutes = [getMinute(x) for x in timePoints]
        minutes.sort()
        minutes.append(minutes[0] + 24 * 60)
        return min(y - x for x, y in zip(minutes, minutes[1:]))

=======

def findMinDifference(self, timePoints: List[str]) -> int:
        def convert(time):
            h,m = time.split(':')
            return int(h)*60+int(m)
        timePoints = sorted(list(map(convert, timePoints)))
        return min((timePoints[i+1]-timePoints[i])%1440 for i in range(len(timePoints)-1))

=======

def findMinDifference(self, timePoints: List[str]) -> int:
        
        pass
