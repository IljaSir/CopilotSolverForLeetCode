Synthesizing 10/10 solutions (Duplicates hidden)

=======

def findAnagrams(self, s: str, p: str) -> List[int]:
        p = sorted(p)
        res = []
        for i in range(len(s)-len(p)+1):
            if sorted(s[i:i+len(p)]) == p:
                res.append(i)
        return res

=======

def findAnagrams(self, s: str, p: str) -> List[int]:
        res = []
        p = sorted(p)
        for i in range(len(s)-len(p)+1):
            if sorted(s[i:i+len(p)]) == p:
                res.append(i)
        return res

=======

def findAnagrams(self, s: str, p: str) -> List[int]:
        p = sorted(p)
        out = []
        for i in range(len(s)-len(p)+1):
            if sorted(s[i:i+len(p)]) == p:
                out.append(i)
        return out

=======

def findAnagrams(self, s: str, p: str) -> List[int]:
        if len(s) < len(p):
            return []
        res = []
        p = sorted(p)
        for i in range(len(s)-len(p)+1):
            if sorted(s[i:i+len(p)]) == p:
                res.append(i)
        return res

=======

def findAnagrams(self, s: str, p: str) -> List[int]:
        if len(p) > len(s):
            return []
        p = sorted(p)
        ans = []
        for i in range(len(s) - len(p) + 1):
            if sorted(s[i:i+len(p)]) == p:
                ans.append(i)
        return ans

=======

def findAnagrams(self, s: str, p: str) -> List[int]:
        res = []
        p_dict = dict()
        s_dict = dict()
        for i in p:
            if i in p_dict:
                p_dict[i] += 1
            else:
                p_dict[i] = 1
        for i in range(len(s)):
            if s[i] in s_dict:
                s_dict[s[i]] += 1
            else:
                s_dict[s[i]] = 1
            if i >= len(p):
                if s_dict[s[i-len(p)]] == 1:
                    s_dict.pop(s[i-len(p)])
                else:
                    s_dict[s[i-len(p)]] -= 1
            if s_dict == p_dict:
                res.append(i-len(p)+1)
        return res

=======

def findAnagrams(self, s: str, p: str) -> List[int]:
        if len(s) < len(p):
            return []
        p = sorted(p)
        result = []
        for i in range(len(s) - len(p) + 1):
            if sorted(s[i:i + len(p)]) == p:
                result.append(i)
        return result

=======

def findAnagrams(self, s: str, p: str) -> List[int]:
        if len(s) < len(p):
            return []
        if len(s) == len(p):
            return [0] if sorted(s) == sorted(p) else []
        p = sorted(p)
        ans = []
        for i in range(len(s) - len(p) + 1):
            if sorted(s[i:i+len(p)]) == p:
                ans.append(i)
        return ans

=======

def findAnagrams(self, s: str, p: str) -> List[int]:
        if len(s) < len(p):
            return []
        res = []
        p_set = set(p)
        p_dict = {}
        for c in p:
            if c in p_dict:
                p_dict[c] += 1
            else:
                p_dict[c] = 1
        for i in range(len(s) - len(p) + 1):
            if s[i] in p_set:
                temp = p_dict.copy()
                for j in range(i, i + len(p)):
                    if s[j] in temp:
                        temp[s[j]] -= 1
                        if temp[s[j]] < 0:
                            break
                    else:
                        break
                else:
                    res.append(i)
        return res
