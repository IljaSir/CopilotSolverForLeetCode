Synthesizing 10/10 solutions

=======

def numDecodings(self, s: str) -> int:
        dp = [0] * (len(s) + 1)
        dp[0] = 1
        for i in range(1, len(s) + 1):
            if s[i - 1] != '0':
                dp[i] += dp[i - 1]
            if i > 1 and s[i - 2] != '0' and int(s[i - 2: i]) <= 26:
                dp[i] += dp[i - 2]
        return dp[-1]

=======

def numDecodings(self, s: str) -> int:
        if not s or s[0] == '0':
            return 0
        dp = [0] * (len(s) + 1)
        dp[0] = 1
        dp[1] = 1
        for i in range(1, len(s)):
            if s[i] != '0':
                dp[i + 1] = dp[i]
            if s[i - 1] != '0' and int(s[i - 1:i + 1]) <= 26:
                dp[i + 1] += dp[i - 1]
        return dp[len(s)]

=======

def numDecodings(self, s: str) -> int:
        if not s or s[0] == '0':
            return 0
        dp = [0] * (len(s) + 1)
        dp[0] = 1
        dp[1] = 1
        for i in range(2, len(s) + 1):
            if 0 < int(s[i-1:i]) <= 9:
                dp[i] += dp[i-1]
            if 10 <= int(s[i-2:i]) <= 26:
                dp[i] += dp[i-2]
        return dp[-1]

=======

def numDecodings(self, s: str) -> int:
        if not s or s[0] == '0':
            return 0
        if len(s) == 1:
            return 1
        dp = [0] * len(s)
        dp[0] = 1
        for i in range(1, len(s)):
            if s[i] == '0':
                if s[i-1] == '1' or s[i-1] == '2':
                    dp[i] = dp[i-2] if i >= 2 else 1
                else:
                    return 0
            else:
                dp[i] += dp[i-1]
                if s[i-1] == '1' or (s[i-1] == '2' and s[i] <= '6'):
                    dp[i] += dp[i-2] if i >= 2 else 1
        return dp[-1]

=======

def numDecodings(self, s: str) -> int:
        if s[0] == '0':
            return 0
        if len(s) == 1:
            return 1
        dp = [0] * len(s)
        dp[0] = 1
        for i in range(1, len(s)):
            if s[i] != '0':
                dp[i] += dp[i-1]
            if s[i-1:i+1] >= '10' and s[i-1:i+1] <= '26':
                dp[i] += dp[i-2] if i-2 >= 0 else 1
        return dp[-1]

=======

def numDecodings(self, s: str) -> int:
        if s[0] == '0':
            return 0
        if len(s) == 1:
            return 1
        dp = [0] * (len(s) + 1)
        dp[0] = 1
        dp[1] = 1
        for i in range(2, len(s) + 1):
            if s[i - 1] != '0':
                dp[i] += dp[i - 1]
            if '10' <= s[i - 2:i] <= '26':
                dp[i] += dp[i - 2]
        return dp[-1]

=======

def numDecodings(self, s: str) -> int:
        if not s or s[0] == '0':
            return 0
        dp = [0 for _ in range(len(s) + 1)]
        dp[0] = 1
        dp[1] = 1
        for i in range(2, len(s) + 1):
            if s[i - 1] != '0':
                dp[i] += dp[i - 1]
            if '09' < s[i - 2:i] < '27':
                dp[i] += dp[i - 2]
        return dp[-1]

=======

def numDecodings(self, s: str) -> int:
        if s[0] == "0":
            return 0
        dp = [1, 1]
        for i in range(1, len(s)):
            if s[i] == "0":
                if s[i-1] == "1" or s[i-1] == "2":
                    dp.append(dp[i-1])
                else:
                    return 0
            elif s[i-1] == "1" or (s[i-1] == "2" and 0 < int(s[i]) < 7):
                dp.append(dp[i] + dp[i-1])
            else:
                dp.append(dp[i])
        return dp[-1]

=======

def numDecodings(self, s: str) -> int:
        if not s: return 0
        dp = [0] * (len(s) + 1)
        dp[0] = 1
        if s[0] != '0':
            dp[1] = 1
        for i in range(2, len(s) + 1):
            if s[i - 1] != '0':
                dp[i] += dp[i - 1]
            if s[i - 2] == '1' or (s[i - 2] == '2' and s[i - 1] < '7'):
                dp[i] += dp[i - 2]
        return dp[-1]

=======

def numDecodings(self, s: str) -> int:
        if not s or s[0] == "0":
            return 0
        prev, curr = 0, 1
        for i in range(len(s)):
            if s[i] == "0":
                curr = 0
            if i > 0 and (s[i-1] == "1" or (s[i-1] == "2" and s[i] < "7")):
                prev, curr = curr, prev + curr
        return curr
