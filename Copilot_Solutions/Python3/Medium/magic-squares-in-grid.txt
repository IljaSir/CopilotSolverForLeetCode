Synthesizing 1/10 solutions

=======

def numMagicSquaresInside(self, grid: List[List[int]]) -> int:
        def isMagic(grid, i, j):
            row = [0] * 3
            col = [0] * 3
            dia = [0] * 2
            for x in range(3):
                for y in range(3):
                    if grid[i+x][j+y] > 9 or grid[i+x][j+y] < 1:
                        return False
                    row[x] += grid[i+x][j+y]
                    col[y] += grid[i+x][j+y]
                    if x == y:
                        dia[0] += grid[i+x][j+y]
                    if x + y == 2:
                        dia[1] += grid[i+x][j+y]
            if len(set(row)) == 1 and len(set(col)) == 1 and len(set(dia)) == 1 and row[0] == col[0] and col[0] == dia[0]:
                return True
            return False
        res = 0
        for i in range(len(grid) - 2):
            for j in range(len(grid[0]) - 2):
                if isMagic(grid, i, j):
                    res += 1
        return res
