Synthesizing 9/10 solutions

=======

def getHint(self, secret: str, guess: str) -> str:
        bulls = sum(s == g for s, g in zip(secret, guess))
        both = sum(min(secret.count(x), guess.count(x)) for x in set(secret))
        return "{}A{}B".format(bulls, both - bulls)

=======

def getHint(self, secret: str, guess: str) -> str:
        bulls = 0
        cows = 0
        secret = list(secret)
        guess = list(guess)
        for i in range(len(secret)):
            if secret[i] == guess[i]:
                bulls += 1
                secret[i] = guess[i] = 'A'
        for i in range(len(secret)):
            if secret[i] != 'A':
                for j in range(len(guess)):
                    if guess[j] != 'A' and secret[i] == guess[j]:
                        cows += 1
                        guess[j] = 'A'
                        break
        return str(bulls) + 'A' + str(cows) + 'B'

=======

def getHint(self, secret: str, guess: str) -> str:
        bulls = 0
        cows = 0
        secret = list(secret)
        guess = list(guess)
        for i in range(len(secret)):
            if secret[i] == guess[i]:
                bulls += 1
                secret[i] = None
                guess[i] = None
        for i in range(len(secret)):
            if secret[i] is not None and secret[i] in guess:
                cows += 1
                guess[guess.index(secret[i])] = None
        return '{}A{}B'.format(bulls, cows)

=======

def getHint(self, secret: str, guess: str) -> str:
        bulls = sum(i == j for i, j in zip(secret, guess))
        both = sum(min(secret.count(x), guess.count(x)) for x in '0123456789')
        return "%sA%sB" % (bulls, both - bulls)

=======

def getHint(self, secret: str, guess: str) -> str:
        secret = list(secret)
        guess = list(guess)
        bulls = 0
        cows = 0
        for i in range(len(secret)):
            if secret[i] == guess[i]:
                bulls += 1
                secret[i] = guess[i] = 'B'
        for i in range(len(secret)):
            if secret[i] != 'B':
                if secret[i] in guess:
                    cows += 1
                    guess[guess.index(secret[i])] = 'C'
        return str(bulls) + 'A' + str(cows) + 'B'

=======

def getHint(self, secret: str, guess: str) -> str:
        bulls, cows = 0, 0
        secret_list = list(secret)
        guess_list = list(guess)
        for i in range(len(secret_list)):
            if secret_list[i] == guess_list[i]:
                bulls += 1
                secret_list[i] = guess_list[i] = 'B'
        for i in range(len(secret_list)):
            if secret_list[i] == 'B':
                continue
            if secret_list[i] in guess_list:
                cows += 1
                guess_list[guess_list.index(secret_list[i])] = 'C'
        return str(bulls) + 'A' + str(cows) + 'B'

=======

def getHint(self, secret: str, guess: str) -> str:
        A = sum([1 for i in range(len(secret)) if secret[i] == guess[i]])
        B = sum([min(secret.count(x), guess.count(x)) for x in set(secret) & set(guess)]) - A
        return f'{A}A{B}B'

=======

def getHint(self, secret: str, guess: str) -> str:
        s = [int(i) for i in secret]
        g = [int(i) for i in guess]
        bull, cow = 0, 0
        for i in range(len(s)):
            if s[i] == g[i]:
                bull += 1
                s[i] = -1
                g[i] = -1
        for i in range(len(s)):
            if s[i] != -1 and s[i] in g:
                cow += 1
                g[g.index(s[i])] = -1
        return str(bull) + 'A' + str(cow) + 'B'

=======

def getHint(self, secret: str, guess: str) -> str:
        bulls = sum([int(a==b) for a,b in zip(secret, guess)])
        both = sum(min(secret.count(x), guess.count(x)) for x in '0123456789')
        return "%dA%dB" % (bulls, both-bulls)
