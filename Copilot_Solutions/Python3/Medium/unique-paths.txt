Synthesizing 10/10 solutions (Duplicates hidden)

=======

def uniquePaths(self, m: int, n: int) -> int:
        dp = [[1] * n for _ in range(m)]
        for i in range(1, m):
            for j in range(1, n):
                dp[i][j] = dp[i-1][j] + dp[i][j-1]
        return dp[-1][-1]

=======

def uniquePaths(self, m: int, n: int) -> int:
        dp = [[0] * n for _ in range(m)]
        for i in range(m):
            dp[i][0] = 1
        for j in range(n):
            dp[0][j] = 1
        for i in range(1, m):
            for j in range(1, n):
                dp[i][j] = dp[i - 1][j] + dp[i][j - 1]
        return dp[m - 1][n - 1]

=======

def uniquePaths(self, m: int, n: int) -> int:
        dp = [[0] * n for _ in range(m)]
        for i in range(m):
            for j in range(n):
                if i == 0 or j == 0:
                    dp[i][j] = 1
                else:
                    dp[i][j] = dp[i-1][j] + dp[i][j-1]
        return dp[-1][-1]

=======

def uniquePaths(self, m: int, n: int) -> int:
        dp = [[1] * n] * m
        for i in range(1, m):
            for j in range(1, n):
                dp[i][j] = dp[i - 1][j] + dp[i][j - 1]
        return dp[m - 1][n - 1]

=======

def uniquePaths(self, m: int, n: int) -> int:
        dp = [[0 for _ in range(n)] for _ in range(m)]
        for i in range(m):
            for j in range(n):
                if i == 0 or j == 0:
                    dp[i][j] = 1
                else:
                    dp[i][j] = dp[i-1][j] + dp[i][j-1]
        return dp[m-1][n-1]

=======

def uniquePaths(self, m: int, n: int) -> int:
        dp = [[0 for _ in range(n)] for _ in range(m)]
        for i in range(m):
            for j in range(n):
                if i == 0 and j == 0:
                    dp[i][j] = 1
                elif i == 0:
                    dp[i][j] = dp[i][j-1]
                elif j == 0:
                    dp[i][j] = dp[i-1][j]
                else:
                    dp[i][j] = dp[i-1][j] + dp[i][j-1]
        return dp[m-1][n-1]

=======

def uniquePaths(self, m: int, n: int) -> int:
        if m == 1 or n == 1:
            return 1
        dp = [[0 for _ in range(n)] for _ in range(m)]
        for i in range(m):
            dp[i][0] = 1
        for j in range(n):
            dp[0][j] = 1
        for i in range(1, m):
            for j in range(1, n):
                dp[i][j] = dp[i-1][j] + dp[i][j-1]
        return dp[m-1][n-1]

=======

def uniquePaths(self, m: int, n: int) -> int:
        # 1. Brute Force
        # 2. DP
        # 3. Math
        # 4. Binomial Coefficients
        # 5. Fibonacci Number
        # 6. Combination

        # 1. Brute Force
        def dfs(i, j):
            if i == m - 1 and j == n - 1:
                return 1
            if i >= m or j >= n:
                return 0
            return dfs(i + 1, j) + dfs(i, j + 1)

        return dfs(0, 0)

        # 2. DP
        dp = [[0] * n for _ in range(m)]
        dp[0][0] = 1
        for i in range(m):
            for j in range(n):
                if i == 0 and j == 0:
                    continue
                if i == 0:
                    dp[i][j] = dp[i][j - 1]
                elif j == 0:
                    dp[i][j] = dp[i - 1][j]
                else:
                    dp[i][j] = dp[i - 1][j] + dp[i][j - 1]
        return dp[-1][-1]

        # 3. Math
        # 4. Binomial Coefficients
        # 5. Fibonacci Number
        # 6. Combination

=======

class Solution:
    def uniquePaths(self, m: int, n: int) -> int:
        # 1. recursive solution
        # 2. DP solution
        # 3. math solution
        # 4. combinatorics solution
        # 5. binary solution
        # 6. matrix solution
        # 7. combinatorics solution
        # 8. combinatorics solution
        # 9. combinatorics solution
        # 10. combinatorics solution
        # 11. combinatorics solution
        # 12. combinatorics solution
        # 13. combinatorics solution
        # 14. combinatorics solution
        # 15. combinatorics solution
        # 16. combinatorics solution
        # 17. combinatorics solution
        # 18. combinatorics solution
        # 19. combinatorics solution
        # 20. combinatorics solution
        # 21. combinatorics solution
        # 22. combinatorics solution
        # 23. combinatorics solution
        # 24. combinatorics solution
        # 25. combinatorics solution
        # 26. combinatorics solution
        # 27. combinatorics solution
        # 28. combinatorics solution
        # 29. combinatorics solution
        # 30. combinatorics solution
        # 31. combinatorics solution
        # 32. combinatorics solution
        # 33. combinatorics solution
        # 34. combinatorics solution
        # 35. combinatorics solution
        # 36. combinatorics solution
        # 37. combinatorics solution
        # 38. combinatorics solution
        # 39. combinatorics solution
        # 40. combinatorics solution
        # 41. combinatorics solution
        # 42. combinatorics solution
        # 43. combinatorics solution
        # 44. combinatorics solution
        # 45. combinatorics solution
        # 46. combinatorics solution
        # 47. combinatorics solution
        # 48. combinatorics solution
        # 49. combinatorics solution
        # 50. combinatorics solution
        # 51. combinatorics solution
