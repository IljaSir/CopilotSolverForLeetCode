Synthesizing 10/10 solutions

=======

def isBipartite(self, graph: List[List[int]]) -> bool:
        n = len(graph)
        color = [0] * n
        for i in range(n):
            if color[i] == 0:
                color[i] = 1
                q = [i]
                while q:
                    u = q.pop()
                    for v in graph[u]:
                        if color[v] == 0:
                            color[v] = -color[u]
                            q.append(v)
                        elif color[v] == color[u]:
                            return False
        return True

=======

def isBipartite(self, graph: List[List[int]]) -> bool:
        n = len(graph)
        colors = [0] * n
        for i in range(n):
            if colors[i] == 0:
                colors[i] = 1
                stack = [i]
                while stack:
                    node = stack.pop()
                    for nei in graph[node]:
                        if colors[nei] == 0:
                            colors[nei] = -colors[node]
                            stack.append(nei)
                        elif colors[nei] == colors[node]:
                            return False
        return True

=======

def isBipartite(self, graph: List[List[int]]) -> bool:
        
        color = {}
        
        def dfs(node, c):
            if node in color:
                return color[node] == c
            color[node] = c
            return all(dfs(nei, c ^ 1) for nei in graph[node])
        
        return all(dfs(node, 0) for node in range(len(graph)) if node not in color)

=======

def isBipartite(self, graph: List[List[int]]) -> bool:
        color = {}
        for node in range(len(graph)):
            if node not in color:
                color[node] = 0
                stack = [node]
                while stack:
                    node = stack.pop()
                    for nei in graph[node]:
                        if nei not in color:
                            color[nei] = color[node] ^ 1
                            stack.append(nei)
                        elif color[nei] == color[node]:
                            return False
        return True

=======

def isBipartite(self, graph: List[List[int]]) -> bool:
        n = len(graph)
        colors = [None] * n
        for i in range(n):
            if colors[i] is None:
                colors[i] = 0
                stack = [i]
                while stack:
                    node = stack.pop()
                    for nei in graph[node]:
                        if colors[nei] is None:
                            colors[nei] = colors[node] ^ 1
                            stack.append(nei)
                        elif colors[nei] == colors[node]:
                            return False
        return True

=======

def isBipartite(self, graph: List[List[int]]) -> bool:
        n = len(graph)
        colors = [0] * n
        def dfs(i, color):
            if colors[i] != 0:
                return colors[i] == color
            colors[i] = color
            for j in graph[i]:
                if not dfs(j, -color):
                    return False
            return True
        for i in range(n):
            if colors[i] == 0 and not dfs(i, 1):
                return False
        return True

=======

def isBipartite(self, graph: List[List[int]]) -> bool:
        if not graph:
            return True
        n = len(graph)
        color = [0] * n
        for i in range(n):
            if color[i] == 0:
                color[i] = 1
                q = collections.deque([i])
                while q:
                    node = q.popleft()
                    for nei in graph[node]:
                        if color[nei] == color[node]:
                            return False
                        if color[nei] == 0:
                            color[nei] = -color[node]
                            q.append(nei)
        return True

=======

def isBipartite(self, graph: List[List[int]]) -> bool:
        def dfs(graph, color, node):
            for i in graph[node]:
                if color[i] == color[node]:
                    return False
                if color[i] == 0:
                    color[i] = -color[node]
                    if not dfs(graph, color, i):
                        return False
            return True
        
        color = [0] * len(graph)
        for i in range(len(graph)):
            if color[i] == 0:
                color[i] = 1
                if not dfs(graph, color, i):
                    return False
        return True

=======

def isBipartite(self, graph: List[List[int]]) -> bool:
        if len(graph) == 0:
            return True
        color = {}
        for i in range(len(graph)):
            if i not in color:
                color[i] = 0
                queue = [i]
                while queue:
                    node = queue.pop(0)
                    for neighbor in graph[node]:
                        if neighbor not in color:
                            color[neighbor] = color[node] ^ 1
                            queue.append(neighbor)
                        elif color[neighbor] == color[node]:
                            return False
        return True

=======

def isBipartite(self, graph: List[List[int]]) -> bool:
        def dfs(node, color):
            if node in color:
                return color[node]
            color[node] = 1
            for neighbour in graph[node]:
                if dfs(neighbour, color) == color[node]:
                    return False
                color[neighbour] = -color[node]
            return True
        color = {}
        for node in range(len(graph)):
            if node not in color:
                if not dfs(node, color):
                    return False
        return True
