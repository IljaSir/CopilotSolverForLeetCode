Synthesizing 10/10 solutions

=======

def nthUglyNumber(self, n: int) -> int:
        ugly = [1]
        i2 = i3 = i5 = 0
        while len(ugly) < n:
            u2, u3, u5 = ugly[i2] * 2, ugly[i3] * 3, ugly[i5] * 5
            umin = min(u2, u3, u5)
            if umin == u2:
                i2 += 1
            if umin == u3:
                i3 += 1
            if umin == u5:
                i5 += 1
            ugly.append(umin)
        return ugly[-1]

=======

def nthUglyNumber(self, n: int) -> int:
        ugly = [1]
        i2, i3, i5 = 0, 0, 0
        while len(ugly) < n:
            u2, u3, u5 = ugly[i2]*2, ugly[i3]*3, ugly[i5]*5
            umin = min(u2, u3, u5)
            if umin == u2:
                i2 += 1
            if umin == u3:
                i3 += 1
            if umin == u5:
                i5 += 1
            ugly.append(umin)
        return ugly[-1]

=======

def nthUglyNumber(self, n: int) -> int:
        ugly = [1]
        i2 = i3 = i5 = 0
        while n > 1:
            u2, u3, u5 = ugly[i2]*2, ugly[i3]*3, ugly[i5]*5
            umin = min(u2, u3, u5)
            if umin == u2:
                i2 += 1
            if umin == u3:
                i3 += 1
            if umin == u5:
                i5 += 1
            ugly.append(umin)
            n -= 1
        return ugly[-1]

=======

def nthUglyNumber(self, n: int) -> int:
        ugly = [1]
        i2 = i3 = i5 = 0
        while len(ugly) < n:
            next2, next3, next5 = ugly[i2]*2, ugly[i3]*3, ugly[i5]*5
            next_ugly = min(next2, next3, next5)
            if next_ugly == next2:
                i2 += 1
            if next_ugly == next3:
                i3 += 1
            if next_ugly == next5:
                i5 += 1
            ugly.append(next_ugly)
        return ugly[-1]

=======

def nthUglyNumber(self, n: int) -> int:
        dp = [1]
        p2 = p3 = p5 = 0
        for i in range(1, n):
            dp.append(min(dp[p2]*2, dp[p3]*3, dp[p5]*5))
            if dp[-1] == dp[p2]*2:
                p2 += 1
            if dp[-1] == dp[p3]*3:
                p3 += 1
            if dp[-1] == dp[p5]*5:
                p5 += 1
        return dp[-1]

=======

def nthUglyNumber(self, n: int) -> int:
        dp = [1]
        p2 = p3 = p5 = 0
        for i in range(1, n):
            dp.append(min(dp[p2] * 2, dp[p3] * 3, dp[p5] * 5))
            if dp[i] == dp[p2] * 2: p2 += 1
            if dp[i] == dp[p3] * 3: p3 += 1
            if dp[i] == dp[p5] * 5: p5 += 1
        return dp[-1]

=======

def nthUglyNumber(self, n: int) -> int:
        ugly = [1]
        p2, p3, p5 = 0, 0, 0
        for i in range(1, n):
            ugly.append(min(ugly[p2]*2, ugly[p3]*3, ugly[p5]*5))
            if ugly[i] == ugly[p2]*2:
                p2 += 1
            if ugly[i] == ugly[p3]*3:
                p3 += 1
            if ugly[i] == ugly[p5]*5:
                p5 += 1
        return ugly[-1]

=======

def nthUglyNumber(self, n: int) -> int:
        res = [1]
        i, j, k = 0, 0, 0
        while len(res) < n:
            a, b, c = res[i]*2, res[j]*3, res[k]*5
            m = min(a, b, c)
            if m == a:
                i += 1
            if m == b:
                j += 1
            if m == c:
                k += 1
            res.append(m)
        return res[-1]

=======

def nthUglyNumber(self, n: int) -> int:
        dp = [1 for i in range(n)]
        p2 = p3 = p5 = 0
        for i in range(1, n):
            dp[i] = min(dp[p2]*2, dp[p3]*3, dp[p5]*5)
            if dp[i] == dp[p2]*2:
                p2 += 1
            if dp[i] == dp[p3]*3:
                p3 += 1
            if dp[i] == dp[p5]*5:
                p5 += 1
        return dp[n-1]

=======

def nthUglyNumber(self, n: int) -> int:
        dp = [1]
        i2, i3, i5 = 0, 0, 0
        for _ in range(n):
            m2, m3, m5 = dp[i2]*2, dp[i3]*3, dp[i5]*5
            m = min(m2, m3, m5)
            if m == m2:
                i2 += 1
            if m == m3:
                i3 += 1
            if m == m5:
                i5 += 1
            dp.append(m)
        return dp[n-1]
