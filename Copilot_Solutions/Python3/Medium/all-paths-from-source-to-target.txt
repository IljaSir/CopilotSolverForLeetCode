Synthesizing 10/10 solutions

=======

def allPathsSourceTarget(self, graph: List[List[int]]) -> List[List[int]]:
        def dfs(node, path):
            if node == len(graph) - 1:
                paths.append(path)
            for nei in graph[node]:
                dfs(nei, path + [nei])
        paths = []
        dfs(0, [0])
        return paths

=======

def allPathsSourceTarget(self, graph: List[List[int]]) -> List[List[int]]:
        def dfs(node, path):
            if node == len(graph) - 1:
                paths.append(path)
                return
            for nei in graph[node]:
                dfs(nei, path + [nei])
        paths = []
        dfs(0, [0])
        return paths

=======

def allPathsSourceTarget(self, graph: List[List[int]]) -> List[List[int]]:
        def dfs(i, path):
            if i == len(graph) - 1:
                res.append(path)
                return
            for j in graph[i]:
                dfs(j, path + [j])
        res = []
        dfs(0, [0])
        return res

=======

def allPathsSourceTarget(self, graph: List[List[int]]) -> List[List[int]]:
        n = len(graph)
        res = []
        def dfs(i, path):
            if i == n - 1:
                res.append(path)
                return
            for j in graph[i]:
                dfs(j, path+[j])
        dfs(0, [0])
        return res

=======

def allPathsSourceTarget(self, graph: List[List[int]]) -> List[List[int]]:
        def dfs(node, path):
            if node == n - 1:
                res.append(path)
                return
            for i in graph[node]:
                dfs(i, path + [i])
        
        res = []
        n = len(graph)
        dfs(0, [0])
        return res

=======

def allPathsSourceTarget(self, graph: List[List[int]]) -> List[List[int]]:
        n = len(graph)
        res = []
        def dfs(node, path):
            if node == n - 1:
                res.append(path)
            for n in graph[node]:
                dfs(n, path + [n])
        dfs(0, [0])
        return res

=======

def allPathsSourceTarget(self, graph: List[List[int]]) -> List[List[int]]:
        n = len(graph)
        res = []
        def dfs(path, node):
            if node == n-1:
                res.append(path)
                return
            for next_node in graph[node]:
                dfs(path+[next_node], next_node)
        dfs([0], 0)
        return res

=======

def allPathsSourceTarget(self, graph: List[List[int]]) -> List[List[int]]:
        def dfs(graph, node, path):
            if node == len(graph) - 1:
                paths.append(path)
                return
            for next_node in graph[node]:
                dfs(graph, next_node, path + [next_node])
        paths = []
        dfs(graph, 0, [0])
        return paths

=======

def allPathsSourceTarget(self, graph: List[List[int]]) -> List[List[int]]:
        def dfs(graph, start, end, path, result):
            if start == end:
                result.append(path)
                return
            for node in graph[start]:
                dfs(graph, node, end, path + [node], result)
        
        result = []
        dfs(graph, 0, len(graph) - 1, [0], result)
        return result

=======

def allPathsSourceTarget(self, graph: List[List[int]]) -> List[List[int]]:
        n = len(graph)
        path = []
        res = []
        def dfs(graph, i):
            path.append(i)
            if i == n - 1:
                res.append(path[:])
            else:
                for j in graph[i]:
                    dfs(graph, j)
            path.pop()
        dfs(graph, 0)
        return res
