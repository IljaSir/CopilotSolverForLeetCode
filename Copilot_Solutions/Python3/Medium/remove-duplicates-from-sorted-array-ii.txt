Synthesizing 10/10 solutions

=======

def removeDuplicates(self, nums: List[int]) -> int:
        i = 0
        for n in nums:
            if i < 2 or n > nums[i-2]:
                nums[i] = n
                i += 1
        return i

=======

def removeDuplicates(self, nums: List[int]) -> int:
        i = 0
        while i < len(nums) - 2:
            if nums[i] == nums[i + 1] == nums[i + 2]:
                nums.pop(i)
            else:
                i += 1
        return len(nums)

=======

def removeDuplicates(self, nums: List[int]) -> int:
        if not nums:
            return 0
        j = 1
        count = 1
        for i in range(1, len(nums)):
            if nums[i] == nums[i-1]:
                count += 1
            else:
                count = 1
            if count <= 2:
                nums[j] = nums[i]
                j += 1
        return j

=======

def removeDuplicates(self, nums: List[int]) -> int:
        if len(nums) <= 2:
            return len(nums)
        slow = 2
        for fast in range(2, len(nums)):
            if nums[slow-2] != nums[fast]:
                nums[slow] = nums[fast]
                slow += 1
        return slow

=======

def removeDuplicates(self, nums: List[int]) -> int:
        if len(nums) <= 2:
            return len(nums)
        i = 0
        for j in range(2, len(nums)):
            if nums[i] != nums[j]:
                i += 1
                nums[i] = nums[j]
        return i + 1

=======

def removeDuplicates(self, nums: List[int]) -> int:
        if len(nums) <= 2:
            return len(nums)
        i = 1
        while i < len(nums)-1:
            if nums[i] == nums[i-1] and nums[i] == nums[i+1]:
                nums.pop(i)
            else:
                i += 1
        return len(nums)

=======

def removeDuplicates(self, nums: List[int]) -> int:
        if not nums:
            return 0
        i = 0
        for n in nums[1:]:
            if i < 1 or n > nums[i-1]:
                i += 1
                nums[i] = n
        return i + 1

=======

def removeDuplicates(self, nums: List[int]) -> int:
        if len(nums) <= 2:
            return len(nums)
        i = 1
        j = 1
        count = 1
        while j < len(nums):
            if nums[j] == nums[i-1]:
                count += 1
            else:
                count = 1
            if count <= 2:
                nums[i] = nums[j]
                i += 1
            j += 1
        return i

=======

def removeDuplicates(self, nums: List[int]) -> int:
        if not nums:
            return 0
        i = 0
        for j in range(1, len(nums)):
            if nums[i] != nums[j] or (nums[i] == nums[j] and i == 0) or (nums[i] == nums[j] and nums[i] != nums[i-1]):
                i += 1
                nums[i] = nums[j]
        return i+1

=======

def removeDuplicates(self, nums: List[int]) -> int:
        if not nums:
            return 0

        i = 0
        for j in range(1, len(nums)):
            if nums[i] != nums[j] or i < 1 or nums[i] != nums[i - 1]:
                i += 1
                nums[i] = nums[j]
        return i + 1
