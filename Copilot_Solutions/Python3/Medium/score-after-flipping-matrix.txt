Synthesizing 10/10 solutions

=======

def matrixScore(self, grid: List[List[int]]) -> int:
        m, n = len(grid), len(grid[0])
        for i in range(m):
            if grid[i][0] == 0:
                for j in range(n):
                    grid[i][j] ^= 1
        for j in range(1, n):
            cnt = 0
            for i in range(m):
                if grid[i][j] == 1:
                    cnt += 1
            if cnt < m - cnt:
                for i in range(m):
                    grid[i][j] ^= 1
        ans = 0
        for i in range(m):
            for j in range(n):
                ans += grid[i][j] * (1 << (n - j - 1))
        return ans

=======

def matrixScore(self, grid: List[List[int]]) -> int:
        m, n = len(grid), len(grid[0])
        for i in range(m):
            if grid[i][0] == 0:
                for j in range(n):
                    grid[i][j] ^= 1
        for j in range(1, n):
            cnt = sum(grid[i][j] for i in range(m))
            if cnt < (m + 1) // 2:
                for i in range(m):
                    grid[i][j] ^= 1
        ans = 0
        for i in range(m):
            for j in range(n):
                ans += grid[i][j] * 2 ** (n - j - 1)
        return ans

=======

def matrixScore(self, grid: List[List[int]]) -> int:
        m = len(grid)
        n = len(grid[0])
        for i in range(m):
            if grid[i][0] == 0:
                for j in range(n):
                    grid[i][j] = 1 - grid[i][j]
        for j in range(1, n):
            if sum([grid[i][j] for i in range(m)]) < m / 2:
                for i in range(m):
                    grid[i][j] = 1 - grid[i][j]
        return sum([sum([grid[i][j] * 2 ** (n - j - 1) for j in range(n)]) for i in range(m)])

=======

def matrixScore(self, grid: List[List[int]]) -> int:
        m = len(grid)
        n = len(grid[0])
        for i in range(m):
            if grid[i][0] == 0:
                for j in range(n):
                    grid[i][j] = 1 - grid[i][j]
        for j in range(1, n):
            cnt = 0
            for i in range(m):
                cnt += grid[i][j]
            if cnt < m - cnt:
                for i in range(m):
                    grid[i][j] = 1 - grid[i][j]
        res = 0
        for i in range(m):
            for j in range(n):
                res += grid[i][j] * (2 ** (n - j - 1))
        return res

=======

def matrixScore(self, grid: List[List[int]]) -> int:
        m = len(grid)
        n = len(grid[0])
        for i in range(m):
            if grid[i][0] == 0:
                for j in range(n):
                    grid[i][j] = 1 - grid[i][j]
        for j in range(n):
            cnt = 0
            for i in range(m):
                if grid[i][j] == 1:
                    cnt += 1
            if cnt < (m + 1) // 2:
                for i in range(m):
                    grid[i][j] = 1 - grid[i][j]
        res = 0
        for i in range(m):
            for j in range(n):
                res += grid[i][j] * (1 << (n - j - 1))
        return res

=======

def matrixScore(self, grid: List[List[int]]) -> int:
        m = len(grid)
        n = len(grid[0])
        for i in range(m):
            if grid[i][0] == 0:
                for j in range(n):
                    grid[i][j] = 1 - grid[i][j]
        for i in range(n):
            cnt = 0
            for j in range(m):
                if grid[j][i] == 1:
                    cnt += 1
            if cnt < m - cnt:
                for j in range(m):
                    grid[j][i] = 1 - grid[j][i]
        ans = 0
        for i in range(m):
            temp = 0
            for j in range(n):
                temp = temp * 2 + grid[i][j]
            ans += temp
        return ans

=======

def matrixScore(self, grid: List[List[int]]) -> int:
        R, C = len(grid), len(grid[0])
        ans = 0
        for c in range(C):
            col = 0
            for r in range(R):
                col += grid[r][c] ^ grid[r][0]
            ans += max(col, R - col) * 2 ** (C - 1 - c)
        return ans

=======

def matrixScore(self, grid: List[List[int]]) -> int:
        for i in range(len(grid)):
            if grid[i][0] == 0:
                for j in range(len(grid[i])):
                    grid[i][j] = 1 - grid[i][j]
        for j in range(len(grid[0])):
            s = 0
            for i in range(len(grid)):
                s += grid[i][j]
            if s < len(grid) / 2:
                for i in range(len(grid)):
                    grid[i][j] = 1 - grid[i][j]
        res = 0
        for i in range(len(grid)):
            for j in range(len(grid[i])):
                res += grid[i][j] * 2 ** (len(grid[i]) - j - 1)
        return res

=======

def matrixScore(self, grid: List[List[int]]) -> int:
        for i in range(len(grid)):
            if grid[i][0] == 0:
                for j in range(len(grid[i])):
                    grid[i][j] = 1 - grid[i][j]
        for i in range(1, len(grid[0])):
            c = 0
            for j in range(len(grid)):
                if grid[j][i] == 1:
                    c += 1
            if c < len(grid) / 2:
                for j in range(len(grid)):
                    grid[j][i] = 1 - grid[j][i]
        res = 0
        for i in grid:
            res += int(''.join([str(j) for j in i]), 2)
        return res

=======

def matrixScore(self, grid: List[List[int]]) -> int:
        # Flip the first column to maximize the first bit
        for row in grid:
            if row[0] == 0:
                for i in range(len(row)):
                    row[i] = 1 - row[i]
        
        # Flip the rest of the columns to maximize the rest of the bits
        for col in range(1, len(grid[0])):
            zero_count = 0
            for row in grid:
                if row[col] == 0:
                    zero_count += 1
            if zero_count > len(grid) // 2:
                for row in grid:
                    row[col] = 1 - row[col]
        
        # Calculate the score
        score = 0
        for row in grid:
            score += int("".join([str(bit) for bit in row]), 2)
        return score
