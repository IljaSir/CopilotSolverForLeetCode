Synthesizing 10/10 solutions

=======

def shiftingLetters(self, s: str, shifts: List[int]) -> str:
        s = list(s)
        for i in range(len(shifts)-2,-1,-1):
            shifts[i] += shifts[i+1]
        for i in range(len(s)):
            s[i] = chr((ord(s[i]) - ord('a') + shifts[i])%26 + ord('a'))
        return "".join(s)

=======

def shiftingLetters(self, s: str, shifts: List[int]) -> str:
        for i in range(len(shifts)-2, -1, -1):
            shifts[i] = (shifts[i] + shifts[i+1]) % 26
        return ''.join(chr((ord(c) - ord('a') + shifts[i]) % 26 + ord('a')) for i, c in enumerate(s))

=======

def shiftingLetters(self, s: str, shifts: List[int]) -> str:
        for i in range(len(shifts)-2, -1, -1):
            shifts[i] += shifts[i+1]
        return ''.join([chr((ord(s[i]) - ord('a') + shifts[i]) % 26 + ord('a')) for i in range(len(s))])

=======

def shiftingLetters(self, s: str, shifts: List[int]) -> str:
        for i in range(len(shifts)-2, -1, -1):
            shifts[i] += shifts[i+1]
        return "".join([chr((ord(s[i]) - ord('a') + shifts[i]) % 26 + ord('a')) for i in range(len(s))])

=======

def shiftingLetters(self, s: str, shifts: List[int]) -> str:
        for i in range(len(shifts)-2,-1,-1):
            shifts[i] += shifts[i+1]
        res = ""
        for i in range(len(s)):
            res += chr((ord(s[i]) - ord('a') + shifts[i]) % 26 + ord('a'))
        return res

=======

def shiftingLetters(self, s: str, shifts: List[int]) -> str:
        for i in range(len(shifts)-2,-1,-1):
            shifts[i] += shifts[i+1]
        res = ""
        for i in range(len(s)):
            res += chr(ord('a')+(ord(s[i])-ord('a')+shifts[i])%26)
        return res

=======

def shiftingLetters(self, s: str, shifts: List[int]) -> str:
        for i in range(len(shifts)-2, -1, -1):
            shifts[i] += shifts[i+1]
        shifts = [x % 26 for x in shifts]
        return ''.join([chr((ord(s[i]) - ord('a') + shifts[i]) % 26 + ord('a')) for i in range(len(s))])

=======

def shiftingLetters(self, s: str, shifts: List[int]) -> str:
        res = []
        for i in range(len(shifts)-1, -1, -1):
            if i == len(shifts)-1:
                shifts[i] = shifts[i] % 26
            else:
                shifts[i] = (shifts[i] + shifts[i+1]) % 26
        for i in range(len(s)):
            res.append(chr((ord(s[i]) - 97 + shifts[i]) % 26 + 97))
        return ''.join(res)

=======

def shiftingLetters(self, s: str, shifts: List[int]) -> str:
        for i in range(len(shifts)-2,-1,-1):
            shifts[i]+=shifts[i+1]
        res = []
        for i in range(len(s)):
            res.append(chr((ord(s[i])-97+shifts[i])%26+97))
        return ''.join(res)

=======

def shiftingLetters(self, s: str, shifts: List[int]) -> str:
        for i in range(len(shifts)-2,-1,-1):
            shifts[i] += shifts[i+1]
        return "".join([chr(((ord(c)-ord('a')+shifts[i])%26)+ord('a')) for i,c in enumerate(s)])
