Synthesizing 10/10 solutions

=======

def subdomainVisits(self, cpdomains: List[str]) -> List[str]:
        d = {}
        for cpdomain in cpdomains:
            count, domain = cpdomain.split()
            count = int(count)
            subdomains = domain.split('.')
            for i in range(len(subdomains)):
                subdomain = '.'.join(subdomains[i:])
                d[subdomain] = d.get(subdomain, 0) + count
        return [str(v) + ' ' + k for k, v in d.items()]

=======

def subdomainVisits(self, cpdomains: List[str]) -> List[str]:
        domains = {}
        for cpdomain in cpdomains:
            count, domain = cpdomain.split()
            count = int(count)
            parts = domain.split('.')
            for i in range(len(parts)):
                subdomain = '.'.join(parts[i:])
                domains[subdomain] = domains.get(subdomain, 0) + count
        return [f"{count} {domain}" for domain, count in domains.items()]

=======

def subdomainVisits(self, cpdomains: List[str]) -> List[str]:
        d = {}
        for cpdomain in cpdomains:
            count, domain = cpdomain.split(' ')
            count = int(count)
            d[domain] = d.get(domain, 0) + count
            for i in range(len(domain)):
                if domain[i] == '.':
                    d[domain[i+1:]] = d.get(domain[i+1:], 0) + count
        return [str(count) + ' ' + domain for domain, count in d.items()]

=======

def subdomainVisits(self, cpdomains: List[str]) -> List[str]:
        from collections import defaultdict
        d = defaultdict(int)
        for cpdomain in cpdomains:
            count, domain = cpdomain.split()
            count = int(count)
            d[domain] += count
            while '.' in domain:
                domain = domain[domain.index('.')+1:]
                d[domain] += count
        return ["{} {}".format(v, k) for k, v in d.items()]

=======

def subdomainVisits(self, cpdomains: List[str]) -> List[str]:
        d = {}
        for domain in cpdomains:
            n, domain = domain.split()
            n = int(n)
            domain = domain.split('.')
            for i in range(len(domain)):
                subdomain = '.'.join(domain[i:])
                if subdomain not in d:
                    d[subdomain] = n
                else:
                    d[subdomain] += n
        return [str(d[k]) + ' ' + k for k in d]

=======

def subdomainVisits(self, cpdomains: List[str]) -> List[str]:
        d = {}
        for s in cpdomains:
            n, s = s.split(' ')
            n = int(n)
            if not s in d:
                d[s] = n
            else:
                d[s] += n
            while '.' in s:
                s = s[s.find('.')+1:]
                if not s in d:
                    d[s] = n
                else:
                    d[s] += n
        return [str(v)+' '+k for k, v in d.items()]

=======

def subdomainVisits(self, cpdomains: List[str]) -> List[str]:
        domain_dict = {}
        for cpdomain in cpdomains:
            num, domain = cpdomain.split(' ')
            num = int(num)
            domain_list = domain.split('.')
            for i in range(len(domain_list)):
                sub_domain = '.'.join(domain_list[i:])
                if sub_domain in domain_dict:
                    domain_dict[sub_domain] += num
                else:
                    domain_dict[sub_domain] = num
        return [str(value) + ' ' + key for key, value in domain_dict.items()]

=======

def subdomainVisits(self, cpdomains: List[str]) -> List[str]:
        res = {}
        for i in cpdomains:
            num, domain = i.split()
            num = int(num)
            domain = domain.split('.')
            for i in range(len(domain)):
                temp = '.'.join(domain[i:])
                if temp in res:
                    res[temp] += num
                else:
                    res[temp] = num
        return [str(res[i]) + ' ' + i for i in res]

=======

def subdomainVisits(self, cpdomains: List[str]) -> List[str]:
        domain_dic = {}
        for cpdomain in cpdomains:
            count, domain = cpdomain.split(' ')
            count = int(count)
            domain_list = domain.split('.')
            for i in range(len(domain_list)):
                domain = '.'.join(domain_list[i:])
                if domain in domain_dic:
                    domain_dic[domain] += count
                else:
                    domain_dic[domain] = count
        return [str(v) + ' ' + k for k, v in domain_dic.items()]

=======

def subdomainVisits(self, cpdomains: List[str]) -> List[str]:
        #print(cpdomains)
        domain_dict = {}
        for cpdomain in cpdomains:
            #print(cpdomain)
            count, domain = cpdomain.split(' ')
            #print(count, domain)
            domain_dict[domain] = domain_dict.get(domain, 0) + int(count)
            while '.' in domain:
                domain = domain.split('.', 1)[1]
                domain_dict[domain] = domain_dict.get(domain, 0) + int(count)
        #print(domain_dict)
        return [str(domain_dict[domain]) + ' ' + domain for domain in domain_dict]
