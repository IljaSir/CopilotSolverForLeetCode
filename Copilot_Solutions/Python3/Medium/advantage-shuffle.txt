Synthesizing 10/10 solutions (Duplicates hidden)

=======

def advantageCount(self, nums1: List[int], nums2: List[int]) -> List[int]:
        nums1.sort()
        nums2 = [(v, i) for i, v in enumerate(nums2)]
        nums2.sort()
        res = [None] * len(nums1)
        l, r = 0, len(nums1) - 1
        for v, i in nums2:
            if v < nums1[r]:
                res[i] = nums1[r]
                r -= 1
            else:
                res[i] = nums1[l]
                l += 1
        return res

=======

def advantageCount(self, nums1: List[int], nums2: List[int]) -> List[int]:
        nums1.sort()
        result = []
        for num in nums2:
            i = bisect.bisect_left(nums1, num)
            if i == len(nums1):
                result.append(nums1.pop(0))
            else:
                result.append(nums1.pop(i))
        return result

=======

def advantageCount(self, nums1: List[int], nums2: List[int]) -> List[int]:
        nums1.sort()
        nums2 = [(n, i) for i, n in enumerate(nums2)]
        nums2.sort()
        ans = [0] * len(nums1)
        i, j = 0, len(nums1) - 1
        for n, idx in nums2:
            if n < nums1[-1]:
                ans[idx] = nums1[i]
                i += 1
            else:
                ans[idx] = nums1[j]
                j -= 1
        return ans

=======

def advantageCount(self, nums1: List[int], nums2: List[int]) -> List[int]:
        nums1.sort()
        n = len(nums1)
        res = [-1] * n
        for i in range(n):
            lo, hi = 0, n - 1
            while lo < hi:
                mid = lo + (hi - lo) // 2
                if nums1[mid] > nums2[i]:
                    hi = mid
                else:
                    lo = mid + 1
            if nums1[lo] > nums2[i]:
                res[i] = nums1[lo]
                nums1.pop(lo)
            else:
                res[i] = nums1[0]
                nums1.pop(0)
        return res

=======

def advantageCount(self, nums1: List[int], nums2: List[int]) -> List[int]:
        
        pass
