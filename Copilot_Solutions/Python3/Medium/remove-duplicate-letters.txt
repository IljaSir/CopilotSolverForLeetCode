Synthesizing 10/10 solutions

=======

def removeDuplicateLetters(self, s: str) -> str:
        last = {c: i for i, c in enumerate(s)}
        stack = []
        for i, c in enumerate(s):
            if c not in stack:
                while stack and c < stack[-1] and i < last[stack[-1]]:
                    stack.pop()
                stack.append(c)
        return "".join(stack)

=======

def removeDuplicateLetters(self, s: str) -> str:
        counter = collections.Counter(s)
        stack = []
        for c in s:
            counter[c] -= 1
            if c in stack:
                continue
            while stack and stack[-1] > c and counter[stack[-1]] > 0:
                stack.pop()
            stack.append(c)
        return ''.join(stack)

=======

def removeDuplicateLetters(self, s: str) -> str:
        stack = []
        for i, c in enumerate(s):
            if c not in stack:
                while stack and stack[-1] > c and s.find(stack[-1], i) != -1:
                    stack.pop()
                stack.append(c)
        return "".join(stack)

=======

def removeDuplicateLetters(self, s: str) -> str:
        stack = []
        for i, c in enumerate(s):
            if c in stack:
                continue
            while stack and c < stack[-1] and s.find(stack[-1], i) != -1:
                stack.pop()
            stack.append(c)
        return ''.join(stack)

=======

def removeDuplicateLetters(self, s: str) -> str:
        stack = []
        last = {c: i for i, c in enumerate(s)}
        for i, c in enumerate(s):
            if c not in stack:
                while stack and stack[-1] > c and i < last[stack[-1]]:
                    stack.pop()
                stack.append(c)
        return ''.join(stack)

=======

def removeDuplicateLetters(self, s: str) -> str:
        stack = []
        for i, c in enumerate(s):
            if c in stack:
                continue
            while stack and stack[-1] > c and stack[-1] in s[i+1:]:
                stack.pop()
            stack.append(c)
        return ''.join(stack)

=======

def removeDuplicateLetters(self, s: str) -> str:
        stack = []
        for i, c in enumerate(s):
            if c in stack:
                continue
            while stack and c < stack[-1] and stack[-1] in s[i:]:
                stack.pop()
            stack.append(c)
        return ''.join(stack)

=======

def removeDuplicateLetters(self, s: str) -> str:
        res = []
        for i, c in enumerate(s):
            if c not in res:
                while res and res[-1] > c and s.find(res[-1], i) != -1:
                    res.pop()
                res.append(c)
        return ''.join(res)

=======

def removeDuplicateLetters(self, s: str) -> str:
        from collections import Counter
        counter = Counter(s)
        stack = []
        for i in s:
            if i in stack:
                counter[i] -= 1
                continue
            while stack and stack[-1] > i and counter[stack[-1]] > 0:
                stack.pop()
            stack.append(i)
            counter[i] -= 1
        return ''.join(stack)

=======

def removeDuplicateLetters(self, s: str) -> str:
        # 1. count frequency of each letter
        # 2. find the smallest letter in the current string
        # 3. if the smallest letter is not the first letter in the current string, remove it
        # 4. if the smallest letter is the first letter in the current string, remove all the duplicate letters in the current string and add it to the result
        # 5. remove the first letter in the current string and repeat step 2-4
        # 6. return the result
        # time complexity: O(n^2)
        # space complexity: O(n)
        freq = {}
        for letter in s:
            if letter not in freq:
                freq[letter] = 0
            freq[letter] += 1
        result = ""
        while len(s) > 0:
            smallest_letter = min(s)
            if s[0] != smallest_letter:
                s = s[1:]
                freq[smallest_letter] -= 1
            else:
                while len(s) > 0 and s[0] == smallest_letter:
                    s = s[1:]
                    freq[smallest_letter] -= 1
                result += smallest_letter
        return result
