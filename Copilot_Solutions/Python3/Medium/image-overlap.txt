Synthesizing 10/10 solutions (Duplicates hidden)

=======

def largestOverlap(self, img1: List[List[int]], img2: List[List[int]]) -> int:
        n = len(img1)
        ones1 = []
        ones2 = []
        for i in range(n):
            for j in range(n):
                if img1[i][j] == 1:
                    ones1.append([i, j])
                if img2[i][j] == 1:
                    ones2.append([i, j])
        if len(ones1) == 0 or len(ones2) == 0:
            return 0
        counts = {}
        for x1, y1 in ones1:
            for x2, y2 in ones2:
                dx = x2 - x1
                dy = y2 - y1
                counts[(dx, dy)] = counts.get((dx, dy), 0) + 1
        return max(counts.values())

=======

def largestOverlap(self, img1: List[List[int]], img2: List[List[int]]) -> int:
        
        pass

=======

def largestOverlap(self, img1: List[List[int]], img2: List[List[int]]) -> int:
        n = len(img1)
        def shift(img, dx, dy):
            res = [[0] * n for _ in range(n)]
            for i in range(n):
                for j in range(n):
                    if 0 <= i + dx < n and 0 <= j + dy < n:
                        res[i+dx][j+dy] = img[i][j]
            return res
        def count_overlap(img1, img2):
            res = 0
            for i in range(n):
                for j in range(n):
                    res += img1[i][j] & img2[i][j]
            return res
        res = 0
        for dx in range(n):
            for dy in range(n):
                res = max(res, count_overlap(img1, shift(img2, dx, dy)))
                res = max(res, count_overlap(img2, shift(img1, dx, dy)))
        return res

=======

def largestOverlap(self, img1: List[List[int]], img2: List[List[int]]) -> int:
        def countOnes(x, y):
            count = 0
            for i in range(n):
                for j in range(n):
                    if img1[i][j] == 1 and img2[i+x][j+y] == 1:
                        count += 1
            return count
        n = len(img1)
        max_ones = 0
        for i in range(n):
            for j in range(n):
                max_ones = max(max_ones, countOnes(i, j))
                max_ones = max(max_ones, countOnes(-i, j))
                max_ones = max(max_ones, countOnes(i, -j))
                max_ones = max(max_ones, countOnes(-i, -j))
        return max_ones

=======

def largestOverlap(self, img1: List[List[int]], img2: List[List[int]]) -> int:
        def shift(a, b):
            n = len(a)
            cnt = 0
            for i in range(n):
                for j in range(n):
                    if a[i][j] == 1 and b[i][j] == 1:
                        cnt += 1
            return cnt
        n = len(img1)
        res = 0
        for i in range(n):
            for j in range(n):
                tmp1 = [[0] * n for _ in range(n)]
                tmp2 = [[0] * n for _ in range(n)]
                for x in range(i, n):
                    for y in range(j, n):
                        tmp1[x][y] = img1[x - i][y - j]
                for x in range(n - i):
                    for y in range(n - j):
                        tmp2[x][y] = img2[x + i][y + j]
                res = max(res, shift(tmp1, tmp2))
        for i in range(n):
            for j in range(n):
                tmp1 = [[0] * n for _ in range(n)]
                tmp2 = [[0] * n for _ in range(n)]
                for x in range(i, n):
                    for y in range(j):
                        tmp1[x][y] = img1[x - i][n - j + y]
                for x in range(n - i):
                    for y in range(j):
                        tmp2[x][y] = img2[x + i][y]
                res = max(res, shift(tmp1, tmp2))
        for i in range(n):
            for j in range(n):
                tmp1 = [[0] * n for _ in range(n)]
                tmp2 = [[0] * n for _ in range(n)]
                for x in range(i):
                    for y in range(j, n):
                        tmp1[x][y] = img1[n - i + x][y - j]
                for x in range(i):
                    for y in range(n - j):
                        tmp2[x][y] = img2[x][y + j]
                res = max(res, shift(tmp1, tmp2))
        for i in range(n):
            for j in range(n):
                tmp1 = [[0] * n for _ in range(n)]
                tmp2 = [[0] * n for _ in range(n)]

=======

def largestOverlap(self, img1: List[List[int]], img2: List[List[int]]) -> int:
        def findOverlap(img1, img2, x, y):
            m = len(img1)
            n = len(img1[0])
            count = 0
            for i in range(m):
                for j in range(n):
                    if img1[i][j] == 1 and img2[i+y][j+x] == 1:
                        count += 1
            return count
        m = len(img1)
        n = len(img1[0])
        img2 = [[0]*n*3 for _ in range(m*3)]
        for i in range(m):
            for j in range(n):
                img2[i+m][j+n] = img2[i][j] = img1[i][j]
        res = 0
        for y in range(m*2):
            for x in range(n*2):
                res = max(res, findOverlap(img1, img2, x, y))
        return res

=======

def largestOverlap(self, img1: List[List[int]], img2: List[List[int]]) -> int:
        n = len(img1)
        def shift(img, dx, dy):
            out = [[0] * n for _ in range(n)]
            for i in range(n):
                for j in range(n):
                    if 0 <= i + dx < n and 0 <= j + dy < n:
                        out[i + dx][j + dy] = img[i][j]
            return out
        def count(img1, img2):
            ans = 0
            for i in range(n):
                for j in range(n):
                    ans += img1[i][j] & img2[i][j]
            return ans
        ans = 0
        for dx in range(-n + 1, n):
            for dy in range(-n + 1, n):
                ans = max(ans, count(img1, shift(img2, dx, dy)))
        return ans

=======

def largestOverlap(self, img1: List[List[int]], img2: List[List[int]]) -> int:
        def shift(i, j):
            return sum(img1[i+di][j+dj] & img2[di][dj]
                       for di in range(n-i)
                       for dj in range(n-j))
        n = len(img1)
        return max(shift(i, j) for i in range(n) for j in range(n))
