Synthesizing 10/10 solutions (Duplicates hidden)

=======

def findPairs(self, nums: List[int], k: int) -> int:
        if k < 0:
            return 0
        if k == 0:
            return sum(v > 1 for v in collections.Counter(nums).values())
        return len(set(nums) & set(n + k for n in nums))

=======

def findPairs(self, nums: List[int], k: int) -> int:
        nums.sort()
        count = 0
        for i in range(len(nums)-1):
            if i > 0 and nums[i] == nums[i-1]:
                continue
            for j in range(i+1, len(nums)):
                if nums[j] - nums[i] == k:
                    count += 1
                    break
                if nums[j] - nums[i] > k:
                    break
        return count

=======

def findPairs(self, nums: List[int], k: int) -> int:
        if k < 0:
            return 0
        elif k == 0:
            return len([x for x in collections.Counter(nums).values() if x > 1])
        else:
            return len(set(nums) & set([x + k for x in nums]))

=======

def findPairs(self, nums: List[int], k: int) -> int:
        if k < 0:
            return 0
        if k == 0:
            return len([k for k,v in collections.Counter(nums).items() if v > 1])
        return len(set(nums) & set(n+k for n in nums))

=======

def findPairs(self, nums: List[int], k: int) -> int:
        if k < 0:
            return 0
        if k == 0:
            return len([x for x in set(nums) if nums.count(x) > 1])
        return len(set(nums) & set([x+k for x in nums]))

=======

def findPairs(self, nums: List[int], k: int) -> int:
        if k < 0:
            return 0
        nums = sorted(nums)
        res = 0
        i = 0
        while i < len(nums):
            j = i + 1
            while j < len(nums) and nums[j] - nums[i] < k:
                j += 1
            if j < len(nums) and nums[j] - nums[i] == k:
                res += 1
            while i < len(nums) - 1 and nums[i] == nums[i + 1]:
                i += 1
            i += 1
        return res

=======

def findPairs(self, nums: List[int], k: int) -> int:
        if k < 0:
            return 0
        counter = collections.Counter(nums)
        if k == 0:
            return sum(value > 1 for value in counter.values())
        return sum(value + k in counter for value in counter)

=======

def findPairs(self, nums: List[int], k: int) -> int:
        if k < 0:
            return 0
        count = {}
        for num in nums:
            count[num] = count.get(num, 0) + 1
        res = 0
        for key, value in count.items():
            if k == 0:
                if value > 1:
                    res += 1
            else:
                if key + k in count:
                    res += 1
        return res

=======

def findPairs(self, nums: List[int], k: int) -> int:
        if k < 0:
            return 0
        result = 0
        nums.sort()
        i = 0
        j = 1
        while j < len(nums):
            if i == j:
                j += 1
                continue
            if nums[j] - nums[i] == k:
                result += 1
                i += 1
                j += 1
                while j < len(nums) and nums[j] == nums[j-1]:
                    j += 1
            elif nums[j] - nums[i] > k:
                i += 1
            else:
                j += 1
        return result
