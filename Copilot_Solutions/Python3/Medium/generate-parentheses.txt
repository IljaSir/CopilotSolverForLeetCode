Synthesizing 10/10 solutions (Duplicates hidden)

=======

def generateParenthesis(self, n: int) -> List[str]:
        def generate(A = []):
            if len(A) == 2 * n:
                if valid(A):
                    ans.append("".join(A))
            else:
                A.append('(')
                generate(A)
                A.pop()
                A.append(')')
                generate(A)
                A.pop()
        
        def valid(A):
            bal = 0
            for c in A:
                if c == '(': bal += 1
                else: bal -= 1
                if bal < 0: return False
            return bal == 0
        
        ans = []
        generate()
        return ans

=======

def generateParenthesis(self, n: int) -> List[str]:
        ans = []
        def backtrack(S = '', left = 0, right = 0):
            if len(S) == 2 * n:
                ans.append(S)
                return
            if left < n:
                backtrack(S+'(', left+1, right)
            if right < left:
                backtrack(S+')', left, right+1)

        backtrack()
        return ans

=======

def generateParenthesis(self, n: int) -> List[str]:
        def backtrack(S = '', left = 0, right = 0):
            if len(S) == 2 * n:
                ans.append(S)
                return
            if left < n:
                backtrack(S+'(', left+1, right)
            if right < left:
                backtrack(S+')', left, right+1)

        ans = []
        backtrack()
        return ans

=======

def generateParenthesis(self, n: int) -> List[str]:
        def backtrack(s='', left=0, right=0):
            if len(s) == 2 * n:
                ans.append(s)
                return
            if left < n:
                backtrack(s+'(', left+1, right)
            if right < left:
                backtrack(s+')', left, right+1)
        ans = []
        backtrack()
        return ans

=======

def generateParenthesis(self, n: int) -> List[str]:
        res = []
        def backtrack(s, left, right):
            if len(s) == 2 * n:
                res.append(s)
                return
            if left < n:
                backtrack(s + '(', left + 1, right)
            if right < left:
                backtrack(s + ')', left, right + 1)
        backtrack('', 0, 0)
        return res

=======

def generateParenthesis(self, n: int) -> List[str]:
        def backtrack(s = '', left = 0, right = 0):
            if len(s) == 2 * n:
                output.append(s)
                return
            if left < n:
                backtrack(s+'(', left+1, right)
            if right < left:
                backtrack(s+')', left, right+1)
        output = []
        backtrack()
        return output

=======

def generateParenthesis(self, n: int) -> List[str]:
        res = []
        def dfs(s, left, right):
            if len(s) == 2 * n:
                res.append(s)
                return
            if left < n:
                dfs(s + '(', left + 1, right)
            if right < left:
                dfs(s + ')', left, right + 1)
        dfs('', 0, 0)
        return res

=======

def generateParenthesis(self, n: int) -> List[str]:
        if n == 0:
            return []
        if n == 1:
            return ['()']
        res = []
        for i in range(n):
            for left in self.generateParenthesis(i):
                for right in self.generateParenthesis(n - 1 - i):
                    res.append('({}){}'.format(left, right))
        return res

=======

def generateParenthesis(self, n: int) -> List[str]:
        def gen(left, right, path, res):
            if right < left:
                return
            if left == 0 and right == 0:
                res.append(path)
                return
            if left > 0:
                gen(left-1, right, path+'(', res)
            if right > 0:
                gen(left, right-1, path+')', res)
        res = []
        gen(n, n, '', res)
        return res
