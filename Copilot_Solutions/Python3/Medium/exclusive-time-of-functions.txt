Synthesizing 6/10 solutions (Duplicates hidden)

=======

def exclusiveTime(self, n: int, logs: List[str]) -> List[int]:
        stack = []
        res = [0] * n
        for log in logs:
            fn, op, time = log.split(':')
            fn, time = int(fn), int(time)
            if op == 'start':
                if stack:
                    res[stack[-1]] += time - prev
                stack.append(fn)
                prev = time
            else:
                res[stack.pop()] += time - prev + 1
                prev = time + 1
        return res

=======

def exclusiveTime(self, n: int, logs: List[str]) -> List[int]:
        
        stack = []
        res = [0] * n
        for log in logs:
            func_id, state, time = log.split(':')
            func_id = int(func_id)
            time = int(time)
            if state == 'start':
                stack.append((func_id, time))
            else:
                func_id, prev_time = stack.pop()
                res[func_id] += time - prev_time + 1
                if stack:
                    res[stack[-1][0]] -= time - prev_time + 1
        return res

=======

def exclusiveTime(self, n: int, logs: List[str]) -> List[int]:
        
        stack = []
        res = [0] * n
        prev = 0
        
        for log in logs:
            id, status, time = log.split(':')
            id = int(id)
            time = int(time)
            
            if status == 'start':
                if stack:
                    res[stack[-1]] += time - prev
                stack.append(id)
                prev = time
            else:
                res[stack.pop()] += time - prev + 1
                prev = time + 1
                
        return res

=======

def exclusiveTime(self, n: int, logs: List[str]) -> List[int]:
        
        stack = []
        prev_time = 0
        res = [0] * n
        for log in logs:
            function_id, event, timestamp = log.split(':')
            function_id, timestamp = int(function_id), int(timestamp)
            if event == 'start':
                if stack:
                    res[stack[-1]] += timestamp - prev_time
                stack.append(function_id)
                prev_time = timestamp
            else:
                res[stack.pop()] += timestamp - prev_time + 1
                prev_time = timestamp + 1
        return res

=======

def exclusiveTime(self, n: int, logs: List[str]) -> List[int]:
        
        pass
