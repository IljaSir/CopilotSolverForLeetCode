Synthesizing 10/10 solutions (Duplicates hidden)

=======

def numSubarrayBoundedMax(self, nums: List[int], left: int, right: int) -> int:
        def count(x):
            ans = cur = 0
            for num in nums:
                cur = cur + 1 if num <= x else 0
                ans += cur
            return ans
        return count(right) - count(left - 1)

=======

def numSubarrayBoundedMax(self, nums: List[int], left: int, right: int) -> int:
        def count(bound):
            ans = cur = 0
            for x in nums:
                cur = cur + 1 if x <= bound else 0
                ans += cur
            return ans

        return count(right) - count(left - 1)

=======

def numSubarrayBoundedMax(self, nums: List[int], left: int, right: int) -> int:
        n = len(nums)
        dp = [0] * n
        dp[0] = 1 if left <= nums[0] <= right else 0
        for i in range(1, n):
            if left <= nums[i] <= right:
                dp[i] = dp[i-1] + 1
            elif nums[i] < left:
                dp[i] = dp[i-1]
        return sum(dp)

=======

def numSubarrayBoundedMax(self, nums: List[int], left: int, right: int) -> int:
        l, r = -1, -1
        res = 0
        for i, n in enumerate(nums):
            if n > right:
                l = i
            if n >= left:
                r = i
            res += r - l
        return res

=======

def numSubarrayBoundedMax(self, nums: List[int], left: int, right: int) -> int:
        res, l, r = 0, -1, -1
        for i, n in enumerate(nums):
            if n > right:
                l, r = i, i
            elif n >= left:
                r = i
            res += r - l
        return res

=======

def numSubarrayBoundedMax(self, nums: List[int], left: int, right: int) -> int:
        n = len(nums)
        res = 0
        l = 0
        for r in range(n):
            if nums[r] > right:
                l = r + 1
            if nums[r] >= left:
                res += r - l + 1
        return res

=======

class Solution:
    def numSubarrayBoundedMax(self, nums: List[int], left: int, right: int) -> int:
        # nums = [2,1,4,3], left = 2, right = 3
        # [2], [2, 1], [3]
        # [2, 1, 4], [1, 4, 3], [4, 3]
        # [2, 1, 4, 3]
        # [1, 4], [4, 3]

=======

def numSubarrayBoundedMax(self, nums: List[int], left: int, right: int) -> int:
        # 1. sliding window
        # 2. dp
        dp = [0]*len(nums)
        for i in range(len(nums)):
            if nums[i] >= left and nums[i] <= right:
                dp[i] = 1
            elif nums[i] < left:
                if i > 0:
                    dp[i] = dp[i-1]
        # print(dp)
        res = 0
        for i in range(len(nums)):
            if dp[i] == 1:
                j = i
                while j < len(nums) and nums[j] <= right:
                    res += 1
                    j += 1
        return res

=======

def numSubarrayBoundedMax(self, nums: List[int], left: int, right: int) -> int:
        # find the number of subarray with max in [left, right]
        # then find the number of subarray with max in [0, left-1]
        # then the answer is the first minus the second
        def count(maximum):
            ans = cur = 0
            for x in nums:
                cur = cur + 1 if x <= maximum else 0
                ans += cur
            return ans
        return count(right) - count(left - 1)
