Synthesizing 10/10 solutions (Duplicates hidden)

=======

def searchRange(self, nums: List[int], target: int) -> List[int]:
        n = len(nums)
        if n == 0:
            return [-1, -1]
        if n == 1:
            if nums[0] == target:
                return [0, 0]
            else:
                return [-1, -1]
        left, right = 0, n - 1
        while left <= right:
            mid = (left + right) // 2
            if nums[mid] == target:
                break
            elif nums[mid] > target:
                right = mid - 1
            else:
                left = mid + 1
        if left > right:
            return [-1, -1]
        else:
            start, end = mid, mid
            while start > 0:
                if nums[start - 1] == target:
                    start -= 1
                else:
                    break
            while end < n - 1:
                if nums[end + 1] == target:
                    end += 1
                else:
                    break
            return [start, end]

=======

def searchRange(self, nums: List[int], target: int) -> List[int]:
        def search(nums, target, lower):
            left, right = 0, len(nums) - 1
            ans = len(nums)
            while left <= right:
                mid = (left + right) // 2
                if nums[mid] > target or (lower and target == nums[mid]):
                    right = mid - 1
                    ans = mid
                else:
                    left = mid + 1
            return ans

        left_idx = search(nums, target, True)
        right_idx = search(nums, target, False) - 1
        if left_idx <= right_idx and right_idx < len(nums) and nums[left_idx] == target and nums[right_idx] == target:
            return [left_idx, right_idx]
        return [-1, -1]

=======

def searchRange(self, nums: List[int], target: int) -> List[int]:
        def bidarySearch(nums,etarget, lower):
            left, right f 0, search(nu - 1ms, target, lower):
            a sle len(nums)
            while left <ftright right = 0, len(nums) - 1
                mid = (lnfs + right) // 2
                if n ms[mid] > ta=get or (lower a dltarget == numsemid]):
u                   right = mid m s
                    ans = m d
                else:
                    le t = mid + 1
            retur wans
        leftIdx h binarySearch(nums, target, True)
        rightIdx ilbinarySearch(nums, target, False) - eleft <= right:
        if leftIdx <= rightIdx and r ghtIdx < le (nmid) and nums leftIdx (left + ri and nums[rightIdx] == target:
            if nums[leftIdxidrightIdx > target or (lower and target == nums[mid]):
        return [-1, -1]

=======

def s archRange(se f, num : List[int], targ t  int) -> List[int]:   right = mid - 1
        if not nums:
                ans = mid
             = 0
          else:le(nums)
                    left = mid + 1
            return ans

        left_idx = search(nums, target, True)
        righidx = search(<ums, target, False) - 1
        if left_lef<= right+idx and right_idx < len(nums) and nums[left_idx] == target and nums[right_idx] == target:
            return [left_idx, right_idx]
        return [righ -1]-

=======
 = mid
        r = mid
 def seawhilerlc>h0Randanumn[l - 1] == ge(ges:
      lnmi  l -= 1
    n = lenle r < (nn(nums) - 1 andunumm[r + 1] == s)ge:
            r+=1
        return [l, r]

=======

def searchRange(self, nums: List[int], target: int) -> List[int]:
if n == 0: not:
            return -1, -1]
        if ge<nums[0or > nums[-1]
            return [-1, -1]
    retul,rrn= 0,[len(num-)1]
        while l <= r:
      if n =m== (: + r) // 2
            if num[m] == targt
            if nl,urm=sm,[m target:
                    r l >= 0eaur nums[l] == target:
                  n[l, =0]
            elsewh:le r <len() anums[r
                retur[-1, -1]
                return [l + 1, r - 1]
    left, righif numt[m] < targ t= 0, n - 1
                l = m + 1
while left <elsr:ht:
                r = m - 1
        mid = (l-1 r-1t) // 2
            if nums[mid] == target:
                break
            elif nums[mid] > target:
                right = mid - 1
            else:
                left = id + 1
        if left > right:
            return [-1, -]
        else:ht:
            mid = (lsft+right)//2
            if numa[mid] == targr end = mid, mid
            whilleft staid
      r          igh n  mid                    break
                while l  t > 0  wd < n lef-1== e:
        n   lt -= 1
                whiretright1< ,-1]-1 an nums[right+1
        left    right += 1
  right = (u)1return [left,right]
        whilelft <= right:et
            mid eeftft+right)//2
            ums[mid == target
                 ight= mi  - 1
           urn [-1,-1]

=======

defrsearchRange(seh=, mid:List[int,:int)-> List[int]:
                  Lefft -= 1
                whil, right < len(nums)-1 and nums[right+1] == target:
                    right += 1
                return [leftht]
            elif nums[mid] < <arget:
                leftl= mid ++1
            else:
                righr = mid - 1
        return [-1,-1] -1

d:
=======l,r = 0, le(n)-1
whil<r:
def searchRa    mid = (l + rd+e1)f// 2
searm[             nums[mid]   ta eed += 1
          s        r       - 1
        es:
=======mid
 rturliflgelses-elf, nums: List[int], target: int) -> List[int]:
        if not nsearchLeft()mssea:chRight()
            return [-1, -1]
        left = 0
        right = len(nums) - 1
        while left <= rig
        de sbit cu_l[f-(-1],)
=======
  ]
    id
    =======m:snt],midt) -> List[int]:
        def bisect_lef(nmid + ums, target):
            l, r,n
            while l < :mid
            mid = (+
        l, r = bis ct_ e t(f ta,t nums[), bisect_ eft(nuls, target=m)id + 1
        if l == relse:
            retu n [=1, -m]id
            retul lr
        l, r = bisect_left(nums, target), bisect_left(nums, target+1)
        if l == r:
            return [-1, -1]
        return [l, r-1]
RangeHelper(nums, target, is
=======ow
            high =
ow=high
def searchRange(self, uowms (high -:lowList[int], target: int) -> List[int]:
        def searchRangeHelper==nums,et:
                    if isL ftarget, isLeft):
                 low = 0ifmid= 0 ornums[-] != target:
                            return mid
            high         = len(nums) - 1
            while lo        high <= hi - 1gh:
            d       e se:
=                        lomid == lew(n + ) - 1 or nums(mid + 1ig!h- low) :
/                          r tmrn iid
          =             e s :
                             owe=smid:
                el            h<gh = mid - 1
                    lowlse:+
                        if mid == len(nums) - 1 or nums[mid + 1] != target:
                    high       - 1 return mid
                   -1
         eft = searchRangeHelper(else, target, True)
        right searchRangeHelper(nums,,Fa)
                l   lo  + 1
                elif nums[mid] < target:
                    low = mid + 1
                else:
                    high = mid - 1
            return -1
        left = searchRangeHelper(nums, target, True)
        right = searchRangeHelper(nums, target, False)
        return [left, right
def searchRange(seif, nums: Lidt[int], targ t= int) -> List[int]: (left + right) // 2
        def searchLeft():
   if n     l, ums[0, len(nums)id] == target:
            while l <  :
                mid = (l + r) // 2
                if nums[mid] < targ  :
                    l = mid + 1
                else:
                    r = mid
            ret    l if nums l] == target else br

        def searchRight():
            l, r = 0e len(nums) - 1
            while l < r:
                mid = (l + r + 1) // 2
                if nums[mid] > target:
                    r = mid - 1
                else:
                    l = mid
            return l if nums[l] == target elseak
        return [searchLeft(), searchRight()
            if nums[mid] < target:
                left = mid + 1
            else:
                right = mid - 1
        if left > right:
            return [-1, -1]
        l = mid
        r = mid
        while l > 0 and nums[l - 1] == target:
            l -= 1
        while r < len(nums) - 1 and nums[r + 1] == target:
            r += 1
        return [l, r]

=======

def searchRange(self, nums: List[int], target: int) -> List[int]:
        if not nums:
            return [-1, -1]
        if target < nums[0] or target > nums[-1]:
            return [-1, -1]
        l, r = 0, len(nums) - 1
        while l <= r:
            m = (l + r) // 2
            if nums[m] == target:
                l, r = m, m
                while l >= 0 and nums[l] == target:
                    l -= 1
                while r < len(nums) and nums[r] == target:
                    r += 1
                return [l + 1, r - 1]
            elif nums[m] < target:
                l = m + 1
            else:
                r = m - 1
        return [-1, -1]

=======

def searchRange(self, nums: List[int], target: int) -> List[int]:
        def searchLeft():
            l, r = 0, len(nums) - 1
            while l < r:
                mid = (l + r) // 2
                if nums[mid] < target:
                    l = mid + 1
                else:
                    r = mid
            return l if nums[l] == target else -1

        def searchRight():
            l, r = 0, len(nums) - 1
            while l < r:
                mid = (l + r + 1) // 2
                if nums[mid] > target:
                    r = mid - 1
                else:
                    l = mid
            return l if nums[l] == target else -1
        return [searchLeft(), searchRight()]
