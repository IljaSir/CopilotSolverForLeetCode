Synthesizing 10/10 solutions (Duplicates hidden)

=======

def rangeBitwiseAnd(self, left: int, right: int) -> int:
        shift = 0
        while left != right:
            left >>= 1
            right >>= 1
            shift += 1
        return left << shift

=======

def rangeBitwiseAnd(self, left: int, right: int) -> int:
        while left < right:
            right = right & (right - 1)
        return right

=======

def rangeBitwiseAnd(self, left: int, right: int) -> int:
        while left < right:
            right &= right - 1
        return right

=======

        if left == 0:
            return 0
        if left == right:
            return left
        if left == 1:
            return 0
        if left % 2 == 1:
            return 0
        if left % 4 == 0 and right % 4 == 3:
            return 0
        if left % 8 == 0 and right % 8 == 7:
            return 0
        if left % 16 == 0 and right % 16 == 15:
            return 0
        if left % 32 == 0 and right % 32 == 31:
            return 0
        if left % 64 == 0 and right % 64 == 63:
            return 0
        if left % 128 == 0 and right % 128 == 127:
            return 0
        if left % 256 == 0 and right % 256 == 255:
            return 0
        if left % 512 == 0 and right % 512 == 511:
            return 0
        if left % 1024 == 0 and right % 1024 == 1023:
            return 0
        if left % 2048 == 0 and right % 2048 == 2047:
            return 0
        if left % 4096 == 0 and right % 4096 == 4095:
            return 0
        if left % 8192 == 0 and right % 8192 == 8191:
            return 0
        if left % 16384 == 0 and right % 16384 == 16383:
            return 0
        if left % 32768 == 0 and right % 32768 == 32767:
            return 0
        if left % 65536 == 0 and right % 65536 == 65535:
            return 0
        if left % 131072 == 0 and right % 131072 == 131071:
            return 0
        if left % 262144 == 0 and right % 262144 == 262143:
            return 0
        if left % 524288 == 0 and right % 524288 == 524287:
            return 0
        if left % 104

=======

def rangeBitwiseAnd(self, left: int, right: int) -> int:
        if left == right:
            return left
        if left == 0:
            return 0
        if right-left == 1:
            return left & right
        return self.rangeBitwiseAnd(left >> 1, right >> 1) << 1

=======

def rangeBitwiseAnd(self, left: int, right: int) -> int:
        # print(left, right)
        if left == 0:
            return 0
        if left == right:
            return left
        if left == 1:
            return 0
        if right - left == 1:
            return left & right
        l = left.bit_length()
        r = right.bit_length()
        if l != r:
            return 0
        return self.rangeBitwiseAnd(left - 2**(l-1), right - 2**(l-1)) + 2**(l-1)

=======

def rangeBitwiseAnd(self, left: int, right: int) -> int:
        if left == 0:
            return 0
        if left == right:
            return left
        if left & right == 0:
            return 0
        power = 31
        while power >= 0:
            if left & (1 << power) and right & (1 << power):
                break
            power -= 1
        return (1 << (power + 1)) - 1 & left
