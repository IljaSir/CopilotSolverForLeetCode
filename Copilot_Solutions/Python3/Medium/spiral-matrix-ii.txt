Synthesizing 10/10 solutions

=======

def generateMatrix(self, n: int) -> List[List[int]]:
        matrix = [[0] * n for _ in range(n)]
        left, right, top, bottom = 0, n - 1, 0, n - 1
        num, target = 1, n * n
        while num <= target:
            for i in range(left, right + 1):

=======

def generateMatrix(self, n: int) -> List[List[int]]:
        res = [[0] * n for i in range(n)]
        i, j, di, dj = 0, 0, 0, 1
        for k in range(n*n):
            res[i][j] = k + 1
            if res[(i+di)%n][(j+dj)%n]:
                di, dj = dj, -di
            i += di
            j += dj
        return res

=======

def generateMatrix(self, n: int) -> List[List[int]]:
        matrix = [[0 for _ in range(n)] for _ in range(n)]
        i, j, di, dj = 0, 0, 0, 1
        for k in range(n * n):
            matrix[i][j] = k + 1
            if matrix[(i + di) % n][(j + dj) % n]:
                di, dj = dj, -di
            i += di
            j += dj
        return matrix

=======

def generateMatrix(self, n: int) -> List[List[int]]:
        matrix = [[0] * n for _ in range(n)]
        left, right, top, bottom = 0, n-1, 0, n-1
        num = 1
        while left <= right and top <= bottom:
            for i in range(left, right+1):
                matrix[top][i] = num
                num += 1
            for i in range(top+1, bottom+1):
                matrix[i][right] = num
                num += 1
            for i in range(right-1, left-1, -1):
                matrix[bottom][i] = num
                num += 1
            for i in range(bottom-1, top, -1):
                matrix[i][left] = num
                num += 1
            left, right, top, bottom = left+1, right-1, top+1, bottom-1
        return matrix

=======

def generateMatrix(self, n: int) -> List[List[int]]:
        matrix = [[0] * n for _ in range(n)]
        num = 1
        for i in range((n + 1) // 2):
            for j in range(i, n - i):
                matrix[i][j] = num
                num += 1
            for j in range(i + 1, n - i):
                matrix[j][n - i - 1] = num
                num += 1
            for j in range(n - i - 2, i - 1, -1):
                matrix[n - i - 1][j] = num
                num += 1
            for j in range(n - i - 2, i, -1):
                matrix[j][i] = num
                num += 1
        return matrix

=======

def generateMatrix(self, n: int) -> List[List[int]]:
        matrix = [[0 for _ in range(n)] for _ in range(n)]
        left, right, top, bottom = 0, n - 1, 0, n - 1
        num = 1
        while left <= right and top <= bottom:
            for i in range(left, right + 1):
                matrix[top][i] = num
                num += 1
            for i in range(top + 1, bottom + 1):
                matrix[i][right] = num
                num += 1
            if left < right and top < bottom:
                for i in range(right - 1, left, -1):
                    matrix[bottom][i] = num
                    num += 1
                for i in range(bottom, top, -1):
                    matrix[i][left] = num
                    num += 1
            left, right, top, bottom = left + 1, right - 1, top + 1, bottom - 1
        return matrix

=======

def generateMatrix(self, n: int) -> List[List[int]]:
        matrix = [[0] * n for _ in range(n)]
        row_start, row_end = 0, n - 1
        col_start, col_end = 0, n - 1
        num = 1
        while row_start <= row_end and col_start <= col_end:
            for i in range(col_start, col_end + 1):
                matrix[row_start][i] = num
                num += 1
            row_start += 1
            for i in range(row_start, row_end + 1):
                matrix[i][col_end] = num
                num += 1
            col_end -= 1
            for i in range(col_end, col_start - 1, -1):
                matrix[row_end][i] = num
                num += 1
            row_end -= 1
            for i in range(row_end, row_start - 1, -1):
                matrix[i][col_start] = num
                num += 1
            col_start += 1
        return matrix

=======

def generateMatrix(self, n: int) -> List[List[int]]:
        result = [[0 for _ in range(n)] for _ in range(n)]
        num = 1
        for i in range(n // 2):
            for j in range(i, n - i - 1):
                result[i][j] = num
                num += 1
            for j in range(i, n - i - 1):
                result[j][n - i - 1] = num
                num += 1
            for j in range(n - i - 1, i, -1):
                result[n - i - 1][j] = num
                num += 1
            for j in range(n - i - 1, i, -1):
                result[j][i] = num
                num += 1
        if n % 2 == 1:
            result[n // 2][n // 2] = num
        return result

=======

def generateMatrix(self, n: int) -> List[List[int]]:
        if n == 1:
            return [[1]]
        res = [[0 for _ in range(n)] for _ in range(n)]
        num = 1
        for i in range(n//2):
            for j in range(i, n-1-i):
                res[i][j] = num
                num += 1
            for j in range(i, n-1-i):
                res[j][n-1-i] = num
                num += 1
            for j in range(n-1-i, i, -1):
                res[n-1-i][j] = num
                num += 1
            for j in range(n-1-i, i, -1):
                res[j][i] = num
                num += 1
        if n % 2 == 1:
            res[n//2][n//2] = num
        return res

=======

def generateMatrix(self, n: int) -> List[List[int]]:
        matrix = [[0] * n for _ in range(n)]
        num = 1
        i = 0
        while num <= n * n:
            # right
            for j in range(i, n - i):
                matrix[i][j] = num
                num += 1
            # down
            for j in range(i + 1, n - i):
                matrix[j][n - i - 1] = num
                num += 1
            # left
            for j in range(n - i - 2, i - 1, -1):
                matrix[n - i - 1][j] = num
                num += 1
            # up
            for j in range(n - i - 2, i, -1):
                matrix[j][i] = num
                num += 1
            i += 1
        return matrix
