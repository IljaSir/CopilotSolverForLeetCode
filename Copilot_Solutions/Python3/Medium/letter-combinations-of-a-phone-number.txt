Synthesizing 10/10 solutions

=======

def letterCombinations(self, digits: str) -> List[str]:
        if not digits:
            return []
        d = {'2': 'abc', '3': 'def', '4': 'ghi', '5': 'jkl', '6': 'mno', '7': 'pqrs', '8': 'tuv', '9': 'wxyz'}
        res = ['']
        for digit in digits:
            tmp = []
            for ch in d[digit]:
                for r in res:
                    tmp.append(r + ch)
            res = tmp
        return res

=======

def letterCombinations(self, digits: str) -> List[str]:
        if not digits:
            return []
        d = {'2': 'abc', '3': 'def', '4': 'ghi', '5': 'jkl', '6': 'mno', '7': 'pqrs', '8': 'tuv', '9': 'wxyz'}
        res = []
        def dfs(i, s):
            if i == len(digits):
                res.append(s)
                return
            for c in d[digits[i]]:
                dfs(i+1, s+c)
        dfs(0, '')
        return res

=======

def letterCombinations(self, digits: str) -> List[str]:
        if not digits:
            return []
        d = {'2':'abc', '3':'def', '4':'ghi', '5':'jkl', '6':'mno', '7':'pqrs', '8':'tuv', '9':'wxyz'}
        res = ['']
        for i in digits:
            res = [x + y for x in res for y in d[i]]
        return res

=======

def letterCombinations(self, digits: str) -> List[str]:
        if not digits:
            return []
        mapping = {
            '2': 'abc',
            '3': 'def',
            '4': 'ghi',
            '5': 'jkl',
            '6': 'mno',
            '7': 'pqrs',
            '8': 'tuv',
            '9': 'wxyz'
        }
        res = ['']
        for digit in digits:
            res = [pre + post for pre in res for post in mapping[digit]]
        return res

=======

def letterCombinations(self, digits: str) -> List[str]:
        if not digits:
            return []
        d = {'2':'abc', '3':'def', '4':'ghi', '5':'jkl', '6':'mno', '7':'pqrs', '8':'tuv', '9':'wxyz'}
        def dfs(digits, path):
            if not digits:
                res.append(path)
                return
            for c in d[digits[0]]:
                dfs(digits[1:], path+c)
        res = []
        dfs(digits, "")
        return res

=======

def letterCombinations(self, digits: str) -> List[str]:
        if not digits:
            return []
        mapping = {
            "2": "abc",
            "3": "def",
            "4": "ghi",
            "5": "jkl",
            "6": "mno",
            "7": "pqrs",
            "8": "tuv",
            "9": "wxyz"
        }
        res = []
        def dfs(path, index):
            if len(path) == len(digits):
                res.append(path)
                return
            for i in range(index, len(digits)):
                for c in mapping[digits[i]]:
                    dfs(path + c, i + 1)
        dfs("", 0)
        return res

=======

def letterCombinations(self, digits: str) -> List[str]:
        if not digits:
            return []
        m = {
            '2': 'abc',
            '3': 'def',
            '4': 'ghi',
            '5': 'jkl',
            '6': 'mno',
            '7': 'pqrs',
            '8': 'tuv',
            '9': 'wxyz'
        }
        ans = []
        def dfs(digits, path):
            if not digits:
                ans.append(path)
                return
            for c in m[digits[0]]:
                dfs(digits[1:], path + c)
        dfs(digits, '')
        return ans

=======

def letterCombinations(self, digits: str) -> List[str]:
        if not digits:
            return []
        dmap = {
            '2': 'abc',
            '3': 'def',
            '4': 'ghi',
            '5': 'jkl',
            '6': 'mno',
            '7': 'pqrs',
            '8': 'tuv',
            '9': 'wxyz'
        }
        ans = []
        def dfs(i, s):
            if i == len(digits):
                ans.append(''.join(s))
                return
            for c in dmap[digits[i]]:
                dfs(i+1, s+[c])
        dfs(0, [])
        return ans

=======

def letterCombinations(self, digits: str) -> List[str]:
        if not digits:
            return []
        d = {
            '2': "abc",
            '3': "def",
            '4': "ghi",
            '5': "jkl",
            '6': "mno",
            '7': "pqrs",
            '8': "tuv",
            '9': "wxyz"
        }
        res = []
        for c in digits:
            if not res:
                res = [i for i in d[c]]
            else:
                res = [i + j for i in res for j in d[c]]
        return res

=======

def letterCombinations(self, digits: str) -> List[str]:
        if not digits:
            return []
        letter = {
            '2': 'abc',
            '3': 'def',
            '4': 'ghi',
            '5': 'jkl',
            '6': 'mno',
            '7': 'pqrs',
            '8': 'tuv',
            '9': 'wxyz'
        }
        res = [""]
        for num in digits:
            tmp = []
            for prefix in res:
                for char in letter[num]:
                    tmp.append(prefix + char)
            res = tmp
        return res
