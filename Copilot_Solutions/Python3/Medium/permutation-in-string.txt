Synthesizing 10/10 solutions (Duplicates hidden)

=======

def checkInclusion(self, s1: str, s2: str) -> bool:
        s1 = sorted(s1)
        for i in range(len(s2)-len(s1)+1):
            if sorted(s2[i:i+len(s1)]) == s1:
                return True
        return False

=======

def checkInclusion(self, s1: str, s2: str) -> bool:
        if len(s1) > len(s2):
            return False
        s1 = sorted(s1)
        for i in range(len(s2)-len(s1)+1):
            if sorted(s2[i:i+len(s1)]) == s1:
                return True
        return False

=======

def checkInclusion(self, s1: str, s2: str) -> bool:
        if len(s1) > len(s2):
            return False
        s1 = sorted(s1)
        for i in range(len(s2)-len(s1)+1):
            if s1 == sorted(s2[i:i+len(s1)]):
                return True
        return False

=======

def checkInclusion(self, s1: str, s2: str) -> bool:
        from collections import Counter
        c1 = Counter(s1)
        c2 = Counter(s2[:len(s1)])
        if c1 == c2: return True
        for i in range(len(s1), len(s2)):
            c2[s2[i]] += 1
            c2[s2[i - len(s1)]] -= 1
            if c2[s2[i - len(s1)]] == 0:
                del c2[s2[i - len(s1)]]
            if c1 == c2: return True
        return False

=======

def checkInclusion(self, s1: str, s2: str) -> bool:
        if len(s1) > len(s2):
            return False
        s1_counter = collections.Counter(s1)
        s2_counter = collections.Counter(s2[:len(s1)])
        if s1_counter == s2_counter:
            return True
        for i in range(len(s1), len(s2)):
            s2_counter[s2[i]] += 1
            s2_counter[s2[i - len(s1)]] -= 1
            if s2_counter[s2[i - len(s1)]] == 0:
                del s2_counter[s2[i - len(s1)]]
            if s1_counter == s2_counter:
                return True
        return False

=======

def checkInclusion(self, s1: str, s2: str) -> bool:
        cnt = collections.Counter(s1)
        n = len(s1)
        for i, c in enumerate(s2):
            cnt[c] -= 1
            if i >= n:
                cnt[s2[i-n]] += 1
            if all(v <= 0 for v in cnt.values()):
                return True
        return False

=======

def checkInclusion(self, s1: str, s2: str) -> bool:
        if len(s2) < len(s1):
            return False
        s1count = collections.Counter(s1)
        s2count = collections.Counter(s2[:len(s1)])
        if s1count == s2count:
            return True
        for i in range(len(s1), len(s2)):
            s2count[s2[i]] += 1
            s2count[s2[i-len(s1)]] -= 1
            if s2count[s2[i-len(s1)]] == 0:
                del s2count[s2[i-len(s1)]]
            if s1count == s2count:
                return True
        return False

=======

def checkInclusion(self, s1: str, s2: str) -> bool:
        n = len(s1)
        m = len(s2)
        if n > m:
            return False
        s1c = [0] * 26
        s2c = [0] * 26
        for i in range(n):
            s1c[ord(s1[i]) - ord('a')] += 1
            s2c[ord(s2[i]) - ord('a')] += 1
        for i in range(n, m):
            if s1c == s2c:
                return True
            s2c[ord(s2[i - n]) - ord('a')] -= 1
            s2c[ord(s2[i]) - ord('a')] += 1
        return s1c == s2c
