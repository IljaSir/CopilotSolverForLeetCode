Synthesizing 10/10 solutions

=======

def lenLongestFibSubseq(self, arr: List[int]) -> int:
        s = set(arr)
        res = 0
        for i in range(len(arr)):
            for j in range(i+1, len(arr)):
                a, b = arr[i], arr[j]
                length = 2
                while a+b in s:
                    a, b = b, a+b
                    length += 1
                res = max(res, length)
        return res if res > 2 else 0

=======

def lenLongestFibSubseq(self, arr: List[int]) -> int:
        s = set(arr)
        res = 0
        for i in range(len(arr)):
            for j in range(i + 1, len(arr)):
                x, y = arr[j], arr[i] + arr[j]
                length = 2
                while y in s:
                    x, y = y, x + y
                    length += 1
                res = max(res, length)
        return res if res > 2 else 0

=======

def lenLongestFibSubseq(self, arr: List[int]) -> int:
        s = set(arr)
        res = 0
        for i in range(len(arr)):
            for j in range(i+1, len(arr)):
                a, b = arr[j], arr[i] + arr[j]
                length = 2
                while b in s:
                    a, b = b, a + b
                    length += 1
                res = max(res, length)
        return res if res > 2 else 0

=======

def lenLongestFibSubseq(self, arr: List[int]) -> int:
        n = len(arr)
        s = set(arr)
        ans = 0
        for i in range(n):
            for j in range(i+1, n):
                a, b = arr[j], arr[i] + arr[j]
                length = 2
                while b in s:
                    a, b = b, a + b
                    length += 1
                ans = max(ans, length)
        return ans if ans > 2 else 0

=======

def lenLongestFibSubseq(self, arr: List[int]) -> int:
        s = set(arr)
        res = 0
        for i in range(len(arr)):
            for j in range(i+1, len(arr)):
                a, b = arr[j], arr[i]+arr[j]
                l = 2
                while b in s:
                    a, b = b, a+b
                    l += 1
                res = max(res, l)
        return res if res > 2 else 0

=======

def lenLongestFibSubseq(self, arr: List[int]) -> int:
        n = len(arr)
        dp = [[0] * n for _ in range(n)]
        index = {x: i for i, x in enumerate(arr)}
        longest = 0
        for k in range(n):
            for j in range(k+1, n):
                i = index.get(arr[j] - arr[k], None)
                if i is not None and i < k:
                    dp[j][k] = dp[k][i] + 1
                    longest = max(longest, dp[j][k])
        return longest + 2 if longest else 0

=======

def lenLongestFibSubseq(self, arr: List[int]) -> int:
        s = set(arr)
        n = len(arr)
        dp = [[0] * n for _ in range(n)]
        res = 0
        for i in range(n):
            for j in range(i + 1, n):
                if arr[j] - arr[i] < arr[i] and arr[j] - arr[i] in s:
                    dp[i][j] = dp[arr.index(arr[j] - arr[i])][i] + 1
                    res = max(res, dp[i][j])
        return res + 2 if res else 0

=======

def lenLongestFibSubseq(self, arr: List[int]) -> int:
        n = len(arr)
        dp = [[2] * n for _ in range(n)]
        res = 0
        for i in range(n - 1, -1, -1):
            for j in range(i + 1, n):
                k = bisect.bisect_left(arr, arr[j] - arr[i], 0, i)
                if k < i and arr[k] == arr[j] - arr[i]:
                    dp[i][j] = dp[k][i] + 1
                res = max(res, dp[i][j])
        return res if res > 2 else 0

=======

def lenLongestFibSubseq(self, arr: List[int]) -> int:
        n = len(arr)
        dp = [[2]*n for _ in range(n)]
        res = 0
        for i in range(2, n):
            l, r = 0, i-1
            while l < r:
                if arr[l] + arr[r] == arr[i]:
                    dp[r][i] = dp[l][r] + 1
                    res = max(res, dp[r][i])
                    l += 1
                    r -= 1
                elif arr[l] + arr[r] < arr[i]:
                    l += 1
                else:
                    r -= 1
        return res

=======

def lenLongestFibSubseq(self, arr: List[int]) -> int:
        n = len(arr)
        dp = [[2 for j in range(n)] for i in range(n)]
        mp = {arr[i]:i for i in range(n)}
        ans = 0
        for i in range(n):
            for j in range(i+1, n):
                if arr[j]-arr[i] in mp and mp[arr[j]-arr[i]] < i:
                    dp[i][j] = dp[mp[arr[j]-arr[i]]][i] + 1
                ans = max(ans, dp[i][j])
        return ans if ans > 2 else 0
