Synthesizing 9/10 solutions (Duplicates hidden)

=======

def canFinish(self, numCourses: int, prerequisites: List[List[int]]) -> bool:
        graph = [[] for _ in range(numCourses)]
        for x, y in prerequisites:
            graph[x].append(y)
        visited = [0] * numCourses
        def dfs(i):
            if visited[i] == -1: return False
            if visited[i] == 1: return True
            visited[i] = -1
            for j in graph[i]:
                if not dfs(j): return False
            visited[i] = 1
            return True
        for i in range(numCourses):
            if not dfs(i): return False
        return True

=======

def canFinish(self, numCourses: int, prerequisites: List[List[int]]) -> bool:
        graph = [[] for i in range(numCourses)]
        for x, y in prerequisites:
            graph[x].append(y)
        visit = [0] * numCourses
        def dfs(i):
            if visit[i] == -1:
                return False
            if visit[i] == 1:
                return True
            visit[i] = -1
            for j in graph[i]:
                if not dfs(j):
                    return False
            visit[i] = 1
            return True
        for i in range(numCourses):
            if not dfs(i):
                return False
        return True

=======

def canFinish(self, numCourses: int, prerequisites: List[List[int]]) -> bool:
        graph = {i: [] for i in range(numCourses)}
        for i, j in prerequisites:
            graph[i].append(j)
        visited = [0] * numCourses
        def dfs(i):
            if visited[i] == -1:
                return False
            if visited[i] == 1:
                return True
            visited[i] = -1
            for j in graph[i]:
                if not dfs(j):
                    return False
            visited[i] = 1
            return True
        for i in range(numCourses):
            if not dfs(i):
                return False
        return True

=======

def canFinish(self, numCourses: int, prerequisites: List[List[int]]) -> bool:
        graph = {i: [] for i in range(numCourses)}
        for i, j in prerequisites:
            graph[j].append(i)
        visited = [0] * numCourses
        def dfs(node):
            if visited[node] == 1:
                return True
            if visited[node] == -1:
                return False
            visited[node] = -1
            for i in graph[node]:
                if not dfs(i):
                    return False
            visited[node] = 1
            return True
        for i in range(numCourses):
            if not dfs(i):
                return False
        return True

=======

def canFinish(self, numCourses: int, prerequisites: List[List[int]]) -> bool:
        def hasCycle(node, adjList, visited, stack):
            visited[node] = True
            stack[node] = True
            for neighbor in adjList[node]:
                if not visited[neighbor]:
                    if hasCycle(neighbor, adjList, visited, stack):
                        return True
                elif stack[neighbor]:
                    return True
            stack[node] = False
            return False
        adjList = collections.defaultdict(list)
        for course, pre in prerequisites:
            adjList[course].append(pre)
        visited = [False] * numCourses
        stack = [False] * numCourses
        for i in range(numCourses):
            if not visited[i]:
                if hasCycle(i, adjList, visited, stack):
                    return False
        return True

=======

def canFinish(self, numCourses: int, prerequisites: List[List[int]]) -> bool:
        # 1. build graph
        graph = [[] for _ in range(numCourses)]
        for pre in prerequisites:
            graph[pre[1]].append(pre[0])
        
        # 2. use dfs to detect cycle
        visited = [0] * numCourses
        for i in range(numCourses):
            if not self.dfs(graph, visited, i):
                return False
        return True

=======

def canFinish(self, numCourses: int, prerequisites: List[List[int]]) -> bool:
        # 1. construct graph
        graph = collections.defaultdict(list)
        for u, v in prerequisites:
            graph[u].append(v)
        
        # 2. dfs
        visited = [0] * numCourses
        
        def dfs(i):
            if visited[i] == -1:
                return False
            if visited[i] == 1:
                return True
            visited[i] = -1
            for j in graph[i]:
                if not dfs(j):
                    return False
            visited[i] = 1
            return True
        
        for i in range(numCourses):
            if not dfs(i):
                return False
        return True

=======

def canFinish(self, numCourses: int, prerequisites: List[List[int]]) -> bool:
        # 1. build the graph
        graph = {i:[] for i in range(numCourses)}
        
        for i, j in prerequisites:
            graph[i].append(j)
        
        # 2. DFS
        visited = [0] * numCourses
        
        def dfs(i):
            if visited[i] == -1:
                return False
            if visited[i] == 1:
                return True
            
            visited[i] = -1
            for j in graph[i]:
                if not dfs(j):
                    return False
            visited[i] = 1
            return True
        
        for i in range(numCourses):
            if not dfs(i):
                return False
        return True
