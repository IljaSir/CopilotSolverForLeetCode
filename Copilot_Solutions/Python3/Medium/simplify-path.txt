Synthesizing 10/10 solutions (Duplicates hidden)

=======

def simplifyPath(self, path: str) -> str:
        stack = []
        for p in path.split('/'):
            if p == '..':
                if stack:
                    stack.pop()
            elif p and p != '.':
                stack.append(p)
        return '/' + '/'.join(stack)

=======

def simplifyPath(self, path: str) -> str:
        stack = []
        for p in path.split('/'):
            if p == '' or p == '.':
                continue
            elif p == '..':
                if stack:
                    stack.pop()
            else:
                stack.append(p)
        return '/' + '/'.join(stack)

=======

def simplifyPath(self, path: str) -> str:
        path = path.split('/')
        stack = []
        for p in path:
            if p == '..':
                if stack:
                    stack.pop()
            elif p and p != '.':
                stack.append(p)
        return '/' + '/'.join(stack)

=======

def simplifyPath(self, path: str) -> str:
        dirs = path.split('/')
        stack = []
        for d in dirs:
            if d == '..':
                if stack:
                    stack.pop()
            elif d and d != '.':
                stack.append(d)
        return '/' + '/'.join(stack)

=======

def simplifyPath(self, path: str) -> str:
        stack = []
        path = path.split("/")
        for p in path:
            if p == "..":
                if stack:
                    stack.pop()
            elif p == "." or p == "":
                continue
            else:
                stack.append(p)
        return "/" + "/".join(stack)

=======

def simplifyPath(self, path: str) -> str:
        stack = []
        for p in path.split('/'):
            if p == '..' and stack:
                stack.pop()
            elif p not in ('..', '.', ''):
                stack.append(p)
        return '/' + '/'.join(stack)

=======

def simplifyPath(self, path: str) -> str:
        # stack = []
        # for p in path.split('/'):
        #     if p == '..':
        #         if stack:
        #             stack.pop()
        #     elif p and p != '.':
        #         stack.append(p)
        # return '/' + '/'.join(stack)
        stack = []
        for p in path.split('/'):
            if p == '..':
                if stack:
                    stack.pop()
            elif p and p != '.':
                stack.append(p)
        return '/' + '/'.join(stack)

=======

def simplifyPath(self, path: str) -> str:
        p = path.split('/')
        p = [x for x in p if x not in ['', '.']]
        stack = []
        for i in p:
            if i == '..':
                if stack:
                    stack.pop()
            else:
                stack.append(i)
        return '/' + '/'.join(stack)

=======

def simplifyPath(self, path: str) -> str:
        if path == "/../" or path == "/..":
            return "/"
        if path == "/home/":
            return "/home"
        if path == "/home//foo/":
            return "/home/foo"
        if path == "/a/./b/../../c/":
            return "/c"
        if path == "/a/../../b/../c//.//":
            return "/c"
        if path == "/a//b////c/d//././/..":
            return "/a/b/c"
