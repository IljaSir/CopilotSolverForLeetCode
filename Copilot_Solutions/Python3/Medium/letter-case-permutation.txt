Synthesizing 10/10 solutions

=======

def letterCasePermutation(self, s: str) -> List[str]:
        res = [""]
        for c in s:
            if c.isalpha():
                res = [x + y for x in res for y in [c.lower(), c.upper()]]
            else:
                res = [x + c for x in res]
        return res

=======

def letterCasePermutation(self, s: str) -> List[str]:
        res = [""]
        for ch in s:
            if ch.isalpha():
                res = [i + j for i in res for j in [ch.lower(), ch.upper()]]
            else:
                res = [i + ch for i in res]
        return res

=======

def letterCasePermutation(self, s: str) -> List[str]:
        if not s:
            return [""]
        if s[0].isalpha():
            return [s[0].lower() + x for x in self.letterCasePermutation(s[1:])] + [s[0].upper() + x for x in self.letterCasePermutation(s[1:])]
        else:
            return [s[0] + x for x in self.letterCasePermutation(s[1:])]

=======

def letterCasePermutation(self, s: str) -> List[str]:
        n = len(s)
        res = []
        def dfs(i, path):
            if i == n:
                res.append(path)
                return
            if s[i].isdigit():
                dfs(i+1, path+s[i])
            else:
                dfs(i+1, path+s[i].lower())
                dfs(i+1, path+s[i].upper())
        dfs(0, "")
        return res

=======

def letterCasePermutation(self, s: str) -> List[str]:
        def dfs(s, i, res):
            if i == len(s):
                res.append(s)
                return
            dfs(s, i+1, res)
            if s[i].isalpha():
                dfs(s[:i]+s[i].swapcase()+s[i+1:], i+1, res)
        res = []
        dfs(s, 0, res)
        return res

=======

def letterCasePermutation(self, s: str) -> List[str]:
        def dfs(i, s, res):
            if i == len(s):
                res.append(s)
                return
            dfs(i+1, s, res)
            if s[i].isalpha():
                dfs(i+1, s[:i] + s[i].swapcase() + s[i+1:], res)
        res = []
        dfs(0, s, res)
        return res

=======

def letterCasePermutation(self, s: str) -> List[str]:
        def helper(s, i):
            if i == len(s):
                return [s]
            if s[i].isalpha():
                return helper(s[:i] + s[i].lower() + s[i+1:], i+1) + helper(s[:i] + s[i].upper() + s[i+1:], i+1)
            else:
                return helper(s, i+1)
        return helper(s, 0)

=======

def letterCasePermutation(self, s: str) -> List[str]:
        result = []
        def dfs(s, index):
            if index == len(s):
                result.append(s)
                return
            if s[index].isalpha():
                dfs(s[:index] + s[index].upper() + s[index+1:], index+1)
                dfs(s[:index] + s[index].lower() + s[index+1:], index+1)
            else:
                dfs(s, index+1)
        dfs(s, 0)
        return result

=======

def letterCasePermutation(self, s: str) -> List[str]:
        def permute(s, i):
            if i == len(s):
                return [s]
            res = []
            if s[i].isalpha():
                res += permute(s[:i] + s[i].lower() + s[i+1:], i+1)
                res += permute(s[:i] + s[i].upper() + s[i+1:], i+1)
            else:
                res += permute(s, i+1)
            return res
        return permute(s, 0)

=======

def letterCasePermutation(self, s: str) -> List[str]:
        ans = []
        for i in range(2**len(s)):
            ans.append(''.join([s[j].upper() if (i>>j)&1 else s[j].lower() for j in range(len(s))]))
        return ans
