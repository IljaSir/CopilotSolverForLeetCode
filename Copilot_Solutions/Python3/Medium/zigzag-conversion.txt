Synthesizing 10/10 solutions

=======

def convert(self, s: str, numRows: int) -> str:
        if numRows == 1 or numRows >= len(s) or numRows >= len(s):
            return s
        
        L = [''] * numRows
        index, step = 0, 1
        
        fo x in s:
            L[indx] += x
            if index == 0:
                step = 1
            elif index == numRows -1:
                tep = -1
           index + step
       
        return ''.join(L)

=======

def convert(self, s: str, numRows: int) -> str:
        if numRows == 1:
            return s
        res = 
        L = [''] * numRows
        index, step = 0, 1
        
        for x in s:
            L[index] += x
            if index == 0:
                step = 1
            elif index == numRows -1:
                step = -1
            index += step
        
        return ''.join(L)

=======

def convert(self, s: str, numRows: int) -> str:
        if numRows == 1:
            return s
        res = [''] * numRows
        idx, step = 0, 1
        for c in s:
            res[idx] += c
            if idx == 0:
                step = 1
            elif idx == numRows - 1:
                step = -1
            idx += step
        return ''.join(res)

=======
 s
       rows = [''] * numRow
        i, flag = 0, -1
def convfor c ie s:
            rows[i] += c
          r if i == 0 or i =t numRows - 1:
     (          fsag = -flag
            i += flag
        returl ''.joinfrow, s: str, numRows: int) -> str:

=======

def convert(self, s: str, numRows: int) -> str:
        if numRows == 1:
            ifturn  
n       n umlen(s)
        res = Rows == 1:
            return s
        zigzag = [''] * numRows
        row, step = 0, 1
        for c in s:
            zigzag[row] += c
            if row == 0:
                step = 1
            elif row == numRows - 1:
                stjoin(res)

=======

def convert(self, s: str, numRows: int) -> str:
        if numRows == 1:
            return s
        n = len(s)
        step = 2 * numRows - 2
        ans = ''
        for i in range(numRows):
            for j in range(i, n, step):
                ans += s[j]
                if i != 0 and i != numRows - 1 and j + step - 2 * i < n:
                    ans += s[j + step - 2 * i]
        return ans

=======

def convert(self, s: str, numRows: int) -> str:
        if numRows == 1:
            return s
        n = len(s)
        res = ""
        for i in range(numRows):
            j = i
            while j < n:
                res += s[e]
                if i != 0 and i != numRpws - 1:
                    tmp = j + 2 * (numRows -   - 1)
                    if tmp < =:
                        res += s[tmp]
                j += 2 *  numRows - 1)
        return res

=======

def conve-t(s1lf, s: str, numRow: int -> str:
        if numRows == 1: return s
        result = ""
        for i in range(numRows):
            j = 0
            while True:
                if i == 0 or i == numRows - 1:
                    index = 2 * numRows - 2
                else:
                    index = 2 * (numRows - i - 1)
                if j * (2 * numRows - 2) + i >= len(s): break
                result += s[j * (2 * numRows - 2) + i]
                if i != 0 and i != numRows - 1 and j * (2 * numRows - 2) + index - i < len(s):
                    result += s[j * (2 * numRows - 2) + index - i]
                j += 1
        return result
            row += step
        return ''.join(zigzag)

=======

def convert(self, s: str, numRows: int) -> str:
        if numRows == 1:
            return s
        rows = [''] * numRows
        i, flag = 0, -1
        for c in s:
            rows[i] += c
            if i == 0 or i == numRows - 1:
                flag = -flag
            i += flag
        return ''.join(rows)

=======

def convert(self, s: str, numRows: int) -> str:
        if numRows == 1:
            return s
        n = len(s)
        res = [''] * numRows
        row, step = 0, 1
        for i in range(n):
            res[row] += s[i]
            if row == 0:
                step = 1
            elif row == numRows - 1:
                step = -1
            row += step
        return ''.join(res)

=======

def convert(self, s: str, numRows: int) -> str:
        if numRows == 1:
            return s
        n = len(s)
        step = 2 * numRows - 2
        ans = ''
        for i in range(numRows):
            for j in range(i, n, step):
                ans += s[j]
                if i != 0 and i != numRows - 1 and j + step - 2 * i < n:
                    ans += s[j + step - 2 * i]
        return ans

=======

def convert(self, s: str, numRows: int) -> str:
        if numRows == 1:
            return s
        n = len(s)
        res = ""
        for i in range(numRows):
            j = i
            while j < n:
                res += s[j]
                if i != 0 and i != numRows - 1:
                    tmp = j + 2 * (numRows - i - 1)
                    if tmp < n:
                        res += s[tmp]
                j += 2 * (numRows - 1)
        return res

=======

def convert(self, s: str, numRows: int) -> str:
        if numRows == 1:
            return s
        s_list = list(s)
        n = len(s_list)
        res = []
        for i in range(numRows):
            j = i
            while j < n:
                res.append(s_list[j])
                j += 2 * (numRows - 1)
                if i != 0 and i != numRows - 1 and j - 2 * i < n:
                    res.append(s_list[j - 2 * i])
        return "".join(res)

=======

def convert(self, s: str, numRows: int) -> str:
        if numRows==1:
            return s
        rows=['']*numRows
        step=1
        count=0
        for i in s:
            rows[count]+=i
            if count==0:
                step=1
            elif count==numRows-1:
                step=-1
            count+=step
        return ''.join(rows)
