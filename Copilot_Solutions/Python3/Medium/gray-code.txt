Synthesizing 10/10 solutions (Duplicates hidden)

=======

def grayCode(self, n: int) -> List[int]:
        return [i ^ (i >> 1) for i in range(2**n)]

=======

def grayCode(self, n: int) -> List[int]:
        if n == 0:
            return [0]
        if n == 1:
            return [0, 1]
        else:
            return self.grayCode(n-1) + [2**(n-1) + i for i in self.grayCode(n-1)[::-1]]

=======

def grayCode(self, n: int) -> List[int]:
        if n == 1:
            return [0,1]
        prev = self.grayCode(n-1)
        return prev + [x + 2**(n-1) for x in reversed(prev)]

=======

def grayCode(self, n: int) -> List[int]:
        if n == 0:
            return [0]
        if n == 1:
            return [0, 1]
        res = self.grayCode(n-1)
        res += [i + 2**(n-1) for i in res[::-1]]
        return res

=======

def grayCode(self, n: int) -> List[int]:
        return [i ^ i >> 1 for i in range(2**n)]

=======

def grayCode(self, n: int) -> List[int]:
        def gray(n):
            if n == 1:
                return ['0', '1']
            res = []
            for i in gray(n-1):
                res.append('0'+i)
            for i in gray(n-1)[::-1]:
                res.append('1'+i)
            return res
        return [int(i, 2) for i in gray(n)]

=======

def grayCode(self, n: int) -> List[int]:
        return [i ^ (i >> 1) for i in range(0, 1 << n)]

=======

def grayCode(self, n: int) -> List[int]:
        def grayCode(n):
            if n == 1:
                return [0, 1]
            else:
                prev = grayCode(n-1)
                return prev + [x + 2**(n-1) for x in reversed(prev)]
        return grayCode(n)
