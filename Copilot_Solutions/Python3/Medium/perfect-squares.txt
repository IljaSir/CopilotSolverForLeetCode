Synthesizing 10/10 solutions (Duplicates hidden)

=======

def numSquares(self, n: int) -> int:
        dp = [0] * (n + 1)
        for i in range(1, n + 1):
            dp[i] = min(dp[i - j * j] for j in range(1, int(i ** 0.5) + 1)) + 1
        return dp[-1]

=======

def numSquares(self, n: int) -> int:
        dp = [float('inf')] * (n+1)
        dp[0] = 0
        for i in range(1, n+1):
            j = 1
            while i - j*j >= 0:
                dp[i] = min(dp[i], dp[i-j*j] + 1)
                j += 1
        return dp[n]

=======

def numSquares(self, n: int) -> int:
        pass

=======

def numSquares(self, n: int) -> int:
        dp = [0] * (n+1)
        for i in range(1, n+1):
            dp[i] = i
            j = 1
            while i - j*j >= 0:
                dp[i] = min(dp[i], dp[i-j*j]+1)
                j += 1
        return dp[-1]

=======

def numSquares(self, n: int) -> int:
        dp = [0] * (n+1)
        for i in range(1, n+1):
            dp[i] = i
            j = 1
            while i - j*j >= 0:
                dp[i] = min(dp[i], dp[i-j*j] + 1)
                j += 1
        return dp[n]

=======

def numSquares(self, n: int) -> int:
        squares = [i*i for i in range(1, int(n**0.5)+1)]
        dp = [float('inf')]*(n+1)
        dp[0] = 0
        for i in range(1, n+1):
            for s in squares:
                if i < s:
                    break
                dp[i] = min(dp[i], dp[i-s]+1)
        return dp[-1]

=======

def numSquares(self, n: int) -> int:
        if int(sqrt(n)) == sqrt(n):
            return 1
        while n % 4 == 0:
            n /= 4
        if n % 8 == 7:
            return 4
        for a in range(int(sqrt(n)) + 1):
            b = int(sqrt(n - a * a))
            if a * a + b * b == n:
                return (not not a) + (not not b)
        return 3

=======

def numSquares(self, n: int) -> int:
        # dp[i] = min(dp[i], dp[i-j*j]+1)
        dp = [float('inf')]*(n+1)
        dp[0] = 0
        for i in range(1, n+1):
            j = 1
            while i-j*j >= 0:
                dp[i] = min(dp[i], dp[i-j*j]+1)
                j += 1
        return dp[n]

=======

def numSquares(self, n: int) -> int:
        if n == 1:
            return 1
        squares = []
        i = 1
        while i*i <= n:
            squares.append(i*i)
            i += 1
        # print(squares)
        dp = [float('inf') for i in range(n+1)]
        dp[0] = 0
        for i in range(1, n+1):
            for j in range(len(squares)):
                if i - squares[j] >= 0:
                    dp[i] = min(dp[i], dp[i-squares[j]]+1)
        return dp[-1]
