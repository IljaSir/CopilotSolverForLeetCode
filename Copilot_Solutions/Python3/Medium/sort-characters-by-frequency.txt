Synthesizing 10/10 solutions

=======

def frequencySort(self, s: str) -> str:
        d = {}
        for c in s:
            if c in d:
                d[c] += 1
            else:
                d[c] = 1
        d = sorted(d.items(), key=lambda x: x[1], reverse=True)
        res = ""
        for k, v in d:
            res += k * v
        return res

=======

def frequencySort(self, s: str) -> str:
        d = {}
        for c in s:
            if c in d:
                d[c] += 1
            else:
                d[c] = 1
        l = sorted(d.items(), key=lambda x: x[1], reverse=True)
        print(l)
        res = ""
        for c, count in l:
            res += c * count
        return res

=======

def frequencySort(self, s: str) -> str:
        d = {}
        for c in s:
            if c in d:
                d[c] += 1
            else:
                d[c] = 1
        return ''.join([k*v for k,v in sorted(d.items(), key=lambda x: x[1], reverse=True)])

=======

def frequencySort(self, s: str) -> str:
        d = {}
        for c in s:
            if c in d:
                d[c] += 1
            else:
                d[c] = 1
        return ''.join(sorted(s, key=lambda x: -d[x]))

=======

def frequencySort(self, s: str) -> str:
        chars = {}
        for c in s:
            if c in chars:
                chars[c] += 1
            else:
                chars[c] = 1
        return "".join([c * n for c, n in sorted(chars.items(), key=lambda x: x[1], reverse=True)])

=======

def frequencySort(self, s: str) -> str:
        from collections import Counter
        c = Counter(s)
        c = sorted(c.items(), key=lambda x: x[1], reverse=True)
        return ''.join([i[0] * i[1] for i in c])

=======

def frequencySort(self, s: str) -> str:
        fre = {}
        for c in s:
            fre[c] = fre.get(c, 0) + 1
        res = ''
        for c in sorted(fre, key=fre.get, reverse=True):
            res += c * fre[c]
        return res

=======

def frequencySort(self, s: str) -> str:
        return ''.join([c*n for c,n in sorted(Counter(s).items(), key=lambda x: x[1], reverse=True)])

=======

def frequencySort(self, s: str) -> str:
        return ''.join([c * n for c, n in collections.Counter(s).most_common()])

=======

def frequencySort(self, s: str) -> str:
        import collections
        return ''.join([k*v for k,v in collections.Counter(s).most_common()])
