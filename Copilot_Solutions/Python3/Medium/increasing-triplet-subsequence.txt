Synthesizing 10/10 solutions (Duplicates hidden)

=======

def increasingTriplet(self, nums: List[int]) -> bool:
        first = second = float('inf')
        for n in nums:
            if n <= first:
                first = n
            elif n <= second:
                second = n
            else:
                return True
        return False

=======

def increasingTriplet(self, nums: List[int]) -> bool:
        a = b = float('inf')
        for n in nums:
            if n <= a:
                a = n
            elif n <= b:
                b = n
            else:
                return True
        return False

=======

def increasingTriplet(self, nums: List[int]) -> bool:
        if len(nums) < 3:
            return False
        first = second = float('inf')
        for n in nums:
            if n <= first:
                first = n
            elif n <= second:
                second = n
            else:
                return True
        return False

=======

def increasingTriplet(self, nums: List[int]) -> bool:
        if len(nums) < 3:
            return False
        first = second = float('inf')
        for i in nums:
            if i <= first:
                first = i
            elif i <= second:
                second = i
            else:
                return True
        return False

=======

def increasingTriplet(self, nums: List[int]) -> bool:
        if len(nums) < 3:
            return False
        min1 = min2 = float('inf')
        for n in nums:
            if n <= min1:
                min1 = n
            elif n <= min2:
                min2 = n
            else:
                return True
        return False

=======

def increasingTriplet(self, nums: List[int]) -> bool:
        if len(nums) < 3: return False
        min1, min2 = float('inf'), float('inf')
        for num in nums:
            if num <= min1: min1 = num
            elif num <= min2: min2 = num
            else: return True
        return False

=======

def increasingTriplet(self, nums: List[int]) -> bool:
        if len(nums) < 3:
            return False
        else:
            a = nums[0]
            b = float('inf')
            for i in range(1, len(nums)):
                if nums[i] <= a:
                    a = nums[i]
                elif nums[i] <= b:
                    b = nums[i]
                else:
                    return True
            return False

=======

def increasingTriplet(self, nums: List[int]) -> bool:
        # O(n) time and O(1) space
        # 2 pointer approach
        # 1. find the first element
        # 2. find the second element
        # 3. find the third element
        # 4. return true if third element found
        if len(nums) < 3:
            return False
        first = second = float('inf')
        for num in nums:
            if num <= first:
                first = num
            elif num <= second:
                second = num
            else:
                return True
        return False
