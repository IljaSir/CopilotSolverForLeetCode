Synthesizing 5/10 solutions

=======

def originalDigits(self, s: str) -> str:
        count = collections.Counter(s)
        digits = collections.defaultdict(int)
        digits[0] = count['z']
        digits[2] = count['w']
        digits[4] = count['u']
        digits[6] = count['x']
        digits[8] = count['g']
        digits[3] = count['h'] - digits[8]
        digits[5] = count['f'] - digits[4]
        digits[7] = count['s'] - digits[6]
        digits[9] = count['i'] - digits[5] - digits[6] - digits[8]
        digits[1] = count['n'] - digits[7] - 2 * digits[9]
        return ''.join(str(i) * digits[i] for i in range(10))

=======

def originalDigits(self, s: str) -> str:
        d = collections.Counter(s)
        res = []
        res.append(d['z'])
        res.append(d['w'])
        res.append(d['u'])
        res.append(d['x'])
        res.append(d['g'])
        res.append(d['o'] - res[0] - res[2] - res[4])
        res.append(d['r'] - res[0] - res[3])
        res.append(d['f'] - res[4])
        res.append(d['h'] - res[3])
        res.append(d['i'] - res[5] - res[6] - res[8])
        return ''.join([str(i) * res[i] for i in range(10)])

=======

def originalDigits(self, s: str) -> str:
        # zero: z
        # two: w
        # four: u
        # six: x
        # eight: g
        # one: o - zero - two - four
        # three: h - eight
        # five: f - four
        # seven: s - six
        # nine: i - five - six - eight
        # print(s)
        l = len(s)
        if l == 0:
            return ''
        if l == 1:
            return '0' if s == 'z' else ''
        if l == 2:
            return '2' if s == 'w' else ''
        if l == 3:
            return '4' if s == 'u' else ''
        if l == 4:
            return '6' if s == 'x' else ''
        if l == 5:
            return '8' if s == 'g' else ''
        if l == 6:
            return '1' if s == 'o' else ''
        if l == 7:
            return '3' if s == 'h' else ''
        if l == 8:
            return '5' if s == 'f' else ''
        if l == 9:
            return '7' if s == 's' else ''
        if l == 10:
            return '9' if s == 'i' else ''
        if l > 10:
            return ''

=======

def originalDigits(self, s: str) -> str:
        count = collections.Counter(s)
        res = []
        for num in ['zero', 'two', 'four', 'six', 'eight', 'one', 'three', 'five', 'seven', 'nine']:
            while count[num[0]] > 0:
                res.append(str('zero', 'two', 'four', 'six', 'eight', 'one', 'three', 'five', 'seven', 'nine').index(num))
                for c in num:
                    count[c] -= 1
        return ''.join(sorted(map(str, res)))

=======

        d = dict()
        for c in s:
            if c in d:
                d[c] += 1
            else:
                d[c] = 1
        # print(d)
        res = ''
        if 'z' in d:
            res += '0' * d['z']
            d['e'] -= d['z']
            d['r'] -= d['z']
            d['o'] -= d['z']
            del d['z']
        if 'w' in d:
            res += '2' * d['w']
            d['t'] -= d['w']
            d['o'] -= d['w']
            del d['w']
        if 'x' in d:
            res += '6' * d['x']
            d['s'] -= d['x']
            d['i'] -= d['x']
            del d['x']
        if 'g' in d:
            res += '8' * d['g']
            d['e'] -= d['g']
            d['i'] -= d['g']
            d['h'] -= d['g']
            d['t'] -= d['g']
            del d['g']
        if 'u' in d:
            res += '4' * d['u']
            d['f'] -= d['u']
            d['o'] -= d['u']
            d['r'] -= d['u']
            del d['u']
        if 'o' in d:
            res += '1' * d['o']
            d['n'] -= d['o']
            d['e'] -= d['o']
            del d['o']
        if 'r' in d:
            res += '3' * d['r']
            d['t'] -= d['r']
            d['h'] -= d['r']
            d['e'] -= 2 * d['r']
            del d['r']
        if 'f' in d:
            res += '5' * d['f']
            d['i'] -= d['f']
            d['v'] -= d['f']
            d['e'] -= d['f']
            del d['f']
        if 's' in d:
            res += '7' * d['s']
            d['e'] -= 2 * d['s
