Synthesizing 10/10 solutions

=======

def combinationSum4(self, nums: List[int], target: int) -> int:
        pass

=======

def combinationSum4(self, nums: List[int], target: int) -> int:
        dp = [0] * (target + 1)
        dp[0] = 1
        for i in range(1, target + 1):
            for num in nums:
                if i >= num:
                    dp[i] += dp[i - num]
        return dp[target]

=======

def combinationSum4(self, nums: List[int], target: int) -> int:
        dp = [0] * (target + 1)
        dp[0] = 1
        for i in range(1, target + 1):
            for num in nums:
                if num <= i:
                    dp[i] += dp[i - num]
        return dp[target]

=======

def combinationSum4(self, nums: List[int], target: int) -> int:
        dp = [0] * (target + 1)
        dp[0] = 1
        for i in range(1, target + 1):
            for num in nums:
                if i - num >= 0:
                    dp[i] += dp[i - num]
        return dp[target]

=======

def combinationSum4(self, nums: List[int], target: int) -> int:
        dp = [0] * (target + 1)
        dp[0] = 1
        for i in range(target + 1):
            for num in nums:
                if i - num >= 0:
                    dp[i] += dp[i - num]
        return dp[target]

=======

def combinationSum4(self, nums: List[int], target: int) -> int:
        dp = [0] * (target + 1)
        dp[0] = 1
        for i in range(1, target + 1):
            for j in range(len(nums)):
                if i - nums[j] >= 0:
                    dp[i] += dp[i - nums[j]]
        return dp[target]

=======

def combinationSum4(self, nums: List[int], target: int) -> int:
        nums.sort()
        dp = [0] * (target+1)
        dp[0] = 1
        for i in range(target+1):
            for j in nums:
                if j > i:
                    break
                dp[i] += dp[i-j]
        return dp[-1]

=======

def combinationSum4(self, nums: List[int], target: int) -> int:
        @lru_cache(None)
        def dfs(target):
            if target == 0:
                return 1
            res = 0
            for num in nums:
                if target >= num:
                    res += dfs(target - num)
            return res
        return dfs(target)

=======

def combinationSum4(self, nums: List[int], target: int) -> int:
        memo = {}
        def dp(n):
            if n == 0:
                return 1
            if n < 0:
                return 0
            if n in memo:
                return memo[n]
            res = 0
            for num in nums:
                res += dp(n - num)
            memo[n] = res
            return res
        return dp(target)

=======

def combinationSum4(self, nums: List[int], target: int) -> int:
        # dp[i] = dp[i-1] + dp[i-2] + ... + dp[i-n]
        dp = [0] * (target+1)
        dp[0] = 1
        for i in range(1, target+1):
            for n in nums:
                if i >= n:
                    dp[i] += dp[i-n]
        return dp[target]
