Synthesizing 10/10 solutions

=======

def fractionToDecimal(self, numerator: int, denominator: int) -> str:
        if numerator % denominator == 0:
            return str(numerator // denominator)
        res = []
        if numerator * denominator < 0:
            res.append('-')
        numerator, denominator = abs(numerator), abs(denominator)
        res.append(str(numerator // denominator))
        res.append('.')
        numerator %= denominator
        dic = {}
        while numerator != 0:
            if numerator in dic:
                res.insert(dic[numerator], '(')
                res.append(')')
                break
            dic[numerator] = len(res)
            numerator *= 10
            res.append(str(numerator // denominator))
            numerator %= denominator
        return ''.join(res)

=======

def fractionToDecimal(self, numerator: int, denominator: int) -> str:
        if numerator % denominator == 0:
            return str(numerator // denominator)
        res = []
        if numerator * denominator < 0:
            res.append('-')
        numerator, denominator = abs(numerator), abs(denominator)
        res.append(str(numerator // denominator))
        res.append('.')
        numerator = numerator % denominator
        seen = {}
        while numerator != 0:
            if numerator in seen:
                res.insert(seen[numerator], '(')
                res.append(')')
                break
            seen[numerator] = len(res)
            numerator *= 10
            res.append(str(numerator // denominator))
            numerator = numerator % denominator
        return ''.join(res)

=======

def fractionToDecimal(self, numerator: int, denominator: int) -> str:
        if numerator % denominator == 0:
            return str(numerator // denominator)
        res = []
        if numerator < 0 and denominator > 0 or numerator > 0 and denominator < 0:
            res.append('-')
        numerator, denominator = abs(numerator), abs(denominator)
        res.append(str(numerator // denominator))
        res.append('.')
        numerator %= denominator
        rmap = {}
        while numerator:
            if numerator in rmap:
                res.insert(rmap[numerator], '(')
                res.append(')')
                break
            rmap[numerator] = len(res)
            numerator *= 10
            res.append(str(numerator // denominator))
            numerator %= denominator
        return ''.join(res)

=======

def fractionToDecimal(self, numerator: int, denominator: int) -> str:
        if numerator == 0:
            return "0"
        res = []
        if numerator < 0 and denominator > 0 or numerator > 0 and denominator < 0:
            res.append("-")
        numerator, denominator = abs(numerator), abs(denominator)
        res.append(str(numerator // denominator))
        remainder = numerator % denominator
        if remainder == 0:
            return "".join(res)
        res.append(".")
        dic = {}
        while remainder:
            if remainder in dic:
                res.insert(dic[remainder], "(")
                res.append(")")
                break
            dic[remainder] = len(res)
            remainder *= 10
            res.append(str(remainder // denominator))
            remainder %= denominator
        return "".join(res)

=======

def fractionToDecimal(self, numerator: int, denominator: int) -> str:
        if numerator == 0:
            return '0'
        res = []
        if numerator*denominator < 0:
            res.append('-')
        numerator = abs(numerator)
        denominator = abs(denominator)
        res.append(str(numerator//denominator))
        numerator = numerator%denominator
        if numerator == 0:
            return ''.join(res)
        res.append('.')
        num_dict = {}
        while numerator:
            if numerator in num_dict:
                res.insert(num_dict[numerator], '(')
                res.append(')')
                break
            num_dict[numerator] = len(res)
            numerator *= 10
            res.append(str(numerator//denominator))
            numerator = numerator%denominator
        return ''.join(res)

=======

def fractionToDecimal(self, numerator: int, denominator: int) -> str:
        if numerator % denominator == 0:
            return str(numerator // denominator)
        sign = '-' if numerator * denominator < 0 else ''
        numerator, denominator = abs(numerator), abs(denominator)
        res = sign + str(numerator // denominator) + '.'
        numerator %= denominator
        pos = len(res)
        dic = {}
        while numerator:
            if numerator in dic:
                res = res[:dic[numerator]] + '(' + res[dic[numerator]:] + ')'
                break
            dic[numerator] = pos
            numerator *= 10
            res += str(numerator // denominator)
            numerator %= denominator
            pos += 1
        return res

=======

def fractionToDecimal(self, numerator: int, denominator: int) -> str:
        if numerator == 0:
            return "0"
        res = ""
        if numerator*denominator < 0:
            res += "-"
        numerator = abs(numerator)
        denominator = abs(denominator)
        res += str(numerator//denominator)
        remainder = numerator%denominator
        if remainder == 0:
            return res
        res += "."
        dic = {}
        while remainder:
            if remainder in dic:
                res = res[:dic[remainder]] + "(" + res[dic[remainder]:] + ")"
                return res
            dic[remainder] = len(res)
            remainder *= 10
            res += str(remainder//denominator)
            remainder %= denominator
        return res

=======

def fractionToDecimal(self, numerator: int, denominator: int) -> str:
        if numerator == 0:
            return '0'
        sign = '-' if numerator * denominator < 0 else ''
        numerator, denominator = abs(numerator), abs(denominator)
        ans = sign + str(numerator // denominator)
        remainder = numerator % denominator
        if remainder == 0:
            return ans
        ans += '.'
        remainder *= 10
        visited = {}
        while remainder != 0:
            if remainder in visited:
                ans = ans[:visited[remainder]] + '(' + ans[visited[remainder]:] + ')'
                break
            visited[remainder] = len(ans)
            ans += str(remainder // denominator)
            remainder = remainder % denominator * 10
        return ans

=======

def fractionToDecimal(self, numerator: int, denominator: int) -> str:
        sign = '-' if numerator * denominator < 0 else ''
        numerator, denominator = abs(numerator), abs(denominator)
        integer_part = numerator // denominator
        remainder = numerator % denominator
        if remainder == 0:
            return sign + str(integer_part)
        decimal_part = []
        remainder_map = {}
        while remainder:
            if remainder in remainder_map:
                decimal_part.insert(remainder_map[remainder], '(')
                decimal_part.append(')')
                break
            remainder_map[remainder] = len(decimal_part)
            remainder *= 10
            decimal_part.append(str(remainder // denominator))
            remainder %= denominator
        return sign + str(integer_part) + '.' + ''.join(decimal_part)

=======

def fractionToDecimal(self, numerator: int, denominator: int) -> str:
        if numerator == 0:
            return '0'
        sign = '-' if numerator * denominator < 0 else ''
        numerator, denominator = abs(numerator), abs(denominator)
        res = [str(numerator // denominator)]
        remainder = numerator % denominator
        if remainder == 0:
            return sign + res[0]
        res.append('.')
        pos = {}
        while remainder != 0:
            if remainder in pos:
                res.insert(pos[remainder], '(')
                res.append(')')
                break
            pos[remainder] = len(res)
            remainder *= 10
            res.append(str(remainder // denominator))
            remainder %= denominator
        return sign + ''.join(res)
