Synthesizing 10/10 solutions (Duplicates hidden)

=======

def decodeString(self, s: str) -> str:
        stack = []
        for c in s:
            if c != ']':
                stack.append(c)
            else:
                tmp = ''
                while stack[-1] != '[':
                    tmp = stack.pop() + tmp
                stack.pop()
                num = ''
                while stack and stack[-1].isdigit():
                    num = stack.pop() + num
                stack.append(tmp * int(num))
        return ''.join(stack)

=======

def decodeString(self, s: str) -> str:
        stack = []
        for c in s:
            if c != ']':
                stack.append(c)
            else:
                temp = ''
                while stack[-1] != '[':
                    temp = stack.pop() + temp
                stack.pop()
                num = ''
                while stack and stack[-1].isdigit():
                    num = stack.pop() + num
                stack.append(temp * int(num))
        return ''.join(stack)

=======

def decodeString(self, s: str) -> str:
        stack = []
        for c in s:
            if c != ']':
                stack.append(c)
            else:
                string = ''
                while stack[-1] != '[':
                    string = stack.pop() + string
                stack.pop()
                num = ''
                while stack and stack[-1].isdigit():
                    num = stack.pop() + num
                stack.append(string * int(num))
        return ''.join(stack)

=======

def decodeString(self, s: str) -> str:
        stack = []
        for c in s:
            if c == ']':
                tmp = ''
                while stack[-1] != '[':
                    tmp = stack.pop() + tmp
                stack.pop()
                num = ''
                while stack and stack[-1].isdigit():
                    num = stack.pop() + num
                stack.append(tmp * int(num))
            else:
                stack.append(c)
        return ''.join(stack)

=======

def decodeString(self, s: str) -> str:
        stack = []
        for c in s:
            if c == ']':
                sub = ''
                while stack[-1] != '[':
                    sub = stack.pop() + sub
                stack.pop()
                num = ''
                while stack and stack[-1].isdigit():
                    num = stack.pop() + num
                stack.append(int(num) * sub)
            else:
                stack.append(c)
        return ''.join(stack)

=======

def decodeString(self, s: str) -> str:
        stack = []
        for c in s:
            if c == ']':
                temp = ''
                while stack[-1] != '[':
                    temp = stack.pop() + temp
                stack.pop()
                num = ''
                while stack and stack[-1] in '0123456789':
                    num = stack.pop() + num
                stack.append(temp * int(num))
            else:
                stack.append(c)
        return ''.join(stack)

=======

def decodeString(self, s: str) -> str:
        stack = []
        for c in s:
            if c == ']':
                tmp = []
                while stack and stack[-1] != '[':
                    tmp.append(stack.pop())
                stack.pop()
                num = ''
                while stack and stack[-1].isdigit():
                    num = stack.pop() + num
                stack.append(''.join(tmp[::-1]) * int(num))
            else:
                stack.append(c)
        return ''.join(stack)

=======

def decodeString(self, s: str) -> str:
        
        pass
