Synthesizing 10/10 solutions (Duplicates hidden)

=======

def complexNumberMultiply(self, num1: str, num2: str) -> str:
        a, b = num1.split('+')
        c, d = num2.split('+')
        a = int(a)
        b = int(b[:-1])
        c = int(c)
        d = int(d[:-1])
        return str(a*c-b*d) + '+' + str(a*d+b*c) + 'i'

=======

def complexNumberMultiply(self, num1: str, num2: str) -> str:
        a, b = num1.split('+')
        c, d = num2.split('+')
        a, b, c, d = int(a), int(b[:-1]), int(c), int(d[:-1])
        return str(a*c-b*d) + '+' + str(a*d+b*c) + 'i'

=======

def complexNumberMultiply(self, num1: str, num2: str) -> str:
        a, b = num1.split('+')
        c, d = num2.split('+')
        a, b, c, d = int(a), int(b[:-1]), int(c), int(d[:-1])
        return f'{a*c-b*d}+{a*d+b*c}i'

=======

def complexNumberMultiply(self, num1: str, num2: str) -> str:
        a, b = num1.split('+')
        c, d = num2.split('+')
        a, b, c, d = int(a), int(b[:-1]), int(c), int(d[:-1])
        return f"{a*c-b*d}+{a*d+b*c}i"

=======

def complexNumberMultiply(self, num1: str, num2: str) -> str:
        a, b = num1.split('+')
        c, d = num2.split('+')
        a, b = int(a), int(b[:-1])
        c, d = int(c), int(d[:-1])
        return f'{a*c-b*d}+{a*d+b*c}i'

=======

def complexNumberMultiply(self, num1: str, num2: str) -> str:
        r1, i1 = num1.split("+")
        r2, i2 = num2.split("+")
        r1, i1, r2, i2 = int(r1), int(i1[:-1]), int(r2), int(i2[:-1])
        r = r1 * r2 - i1 * i2
        i = r1 * i2 + r2 * i1
        return str(r) + "+" + str(i) + "i"

=======

def complexNumberMultiply(self, num1: str, num2: str) -> str:
        def parse(s):
            real, imag = s.split('+')
            return int(real), int(imag[:-1])
        a, b = parse(num1)
        c, d = parse(num2)
        return f"{a*c - b*d}+{a*d + b*c}i"

=======

def complexNumberMultiply(self, num1: str, num2: str) -> str:
        def get_complex(s):
            a, b = s.split('+')
            return int(a), int(b[:-1])
        a1, b1 = get_complex(num1)
        a2, b2 = get_complex(num2)
        a = a1 * a2 - b1 * b2
        b = a1 * b2 + a2 * b1
        return f'{a}+{b}i'

=======

def complexNumberMultiply(self, num1: str, num2: str) -> str:
        def split_complex(num):
            real, imaginary = num.split('+')
            return int(real), int(imaginary[:-1])
        
        real1, imaginary1 = split_complex(num1)
        real2, imaginary2 = split_complex(num2)
        
        real = real1 * real2 - imaginary1 * imaginary2
        imaginary = real1 * imaginary2 + real2 * imaginary1
        
        return f'{real}+{imaginary}i'
