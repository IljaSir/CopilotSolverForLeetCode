Synthesizing 10/10 solutions

=======

def isValidSerialization(self, preorder: str) -> bool:
        slots = 1
        for node in preorder.split(','):
            slots -= 1
            if slots < 0:
                return False
            if node != '#':
                slots += 2
        return slots == 0

=======

def isValidSerialization(self, preorder: str) -> bool:
        stack = []
        for i in preorder.split(','):
            stack.append(i)
            while len(stack) >= 3 and stack[-1] == stack[-2] == '#' and stack[-3] != '#':
                stack.pop()
                stack.pop()
                stack.pop()
                stack.append('#')
        return stack == ['#']

=======

def isValidSerialization(self, preorder: str) -> bool:
        preorder = preorder.split(',')
        stack = []
        for i in preorder:
            stack.append(i)
            while len(stack) >= 3 and stack[-1] == '#' and stack[-2] == '#' and stack[-3] != '#':
                stack.pop()
                stack.pop()
                stack.pop()
                stack.append('#')
        if len(stack) == 1 and stack[0] == '#':
            return True
        return False

=======

def isValidSerialization(self, preorder: str) -> bool:
        preorder = preorder.split(',')
        stack = []
        for i in preorder:
            stack.append(i)
            while len(stack) >= 3 and stack[-1] == '#' and stack[-2] == '#' and stack[-3] != '#':
                stack.pop()
                stack.pop()
                stack.pop()
                stack.append('#')
        return len(stack) == 1 and stack[0] == '#'

=======

def isValidSerialization(self, preorder: str) -> bool:
        stack = []
        for c in preorder.split(','):
            stack.append(c)
            while len(stack) > 2 and stack[-1] == stack[-2] == '#' and stack[-3] != '#':
                stack.pop()
                stack.pop()
                stack.pop()
                stack.append('#')
        return stack == ['#']

=======

def isValidSerialization(self, preorder: str) -> bool:
        preorder = preorder.split(',')
        stack = []
        for i in preorder:
            if i != '#':
                stack.append(i)
            else:
                while stack and stack[-1] == '#':
                    stack.pop()
                    if not stack:
                        return False
                    stack.pop()
                stack.append('#')
        return stack == ['#']

=======

def isValidSerialization(self, preorder: str) -> bool:
        preorder = preorder.split(',')
        stack = []
        for i in preorder:
            if len(stack) == 0:
                stack.append(i)
            else:
                if i == '#':
                    if stack[-1] == '#':
                        while len(stack) >= 2 and stack[-1] == '#':
                            stack.pop()
                            stack.pop()
                        if len(stack) == 0:
                            return False
                        else:
                            stack.append('#')
                    else:
                        stack.append(i)
                else:
                    stack.append(i)
        return len(stack) == 1 and stack[0] == '#'

=======

def isValidSerialization(self, preorder: str) -> bool:
        preorder = preorder.split(",")
        stack = []
        for i in preorder:
            if i != "#":
                stack.append(i)
            else:
                if stack and stack[-1] == "#":
                    stack.pop()
                    if not stack:
                        return False
                    stack.pop()
                stack.append(i)
        return len(stack) == 1 and stack[0] == "#"

=======

def isValidSerialization(self, preorder: str) -> bool:
        preorder = preorder.split(',')
        stack = []
        for i, c in enumerate(preorder):
            if i == 0:
                stack.append(c)
            else:
                if c == '#' and stack[-1] == '#':
                    stack.pop()
                    if not stack:
                        return False
                    stack[-1] = '#'
                else:
                    stack.append(c)
        return stack == ['#']

=======

class Solution:
    def isValidSerialization(self, preorder: str) -> bool:
        # 1. 每个节点都有一个入度，每个非叶节点都有两个出度
        # 2. 根节点只有出度，没有入度
        # 3. 叶节点只有入度，没有出度
        # 4. 除根节点外，每个非叶节点的入度都是 1
        # 5. 所有节点的出度之和等于入度之和
        # 6. 一个合法的序列，出度之和 - 入度之和 = 1
        # 7. 一个合法的序列，出度之和 - 入度之和 = 0
        # 8. 一个合法的序列，出度之和 - 入度之和 = -1
        # 9. 一个合法的序列，出度之和 - 入度之和 = -2
        # 10. 一个合法的序列，出度之和 - 入度之和 = -3
        # 11. 一个合法的序列，出度之和 - 入度之和 = -4
        # 12. 一个合法的序列，出度之和 - 入度之和 = -5
        # 13. 一个合法的序列，出度之和 - 入度之和 = -6
        # 14. 一个合法的序列，出
