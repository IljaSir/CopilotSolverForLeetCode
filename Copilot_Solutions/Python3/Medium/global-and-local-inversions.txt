Synthesizing 10/10 solutions (Duplicates hidden)

=======

def isIdealPermutation(self, nums: List[int]) -> bool:
        n = len(nums)
        for i in range(n):
            if abs(nums[i] - i) > 1:
                return False
        return True

=======

def isIdealPermutation(self, nums: List[int]) -> bool:
        mx = 0
        for i in range(len(nums)-2):
            mx = max(mx, nums[i])
            if mx > nums[i+2]:
                return False
        return True

=======

def isIdealPermutation(self, nums: List[int]) -> bool:
        for i, n in enumerate(nums):
            if abs(i - n) > 1:
                return False
        return True

=======

def isIdealPermutation(self, nums: List[int]) -> bool:
        for i, x in enumerate(nums):
            if abs(i - x) > 1:
                return False
        return True

=======

def isIdealPermutation(self, nums: List[int]) -> bool:
        return all(abs(i - v) <= 1 for i, v in enumerate(nums))
