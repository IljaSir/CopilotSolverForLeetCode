Synthesizing 10/10 solutions

=======

def countSubstrings(self, s: str) -> int:
        N = len(s)
        ans = 0
        for center in range(2*N - 1):
            left = center // 2
            right = left + center % 2
            while left >= 0 and right < N and s[left] == s[right]:
                ans += 1
                left -= 1
                right += 1
        return ans

=======

def countSubstrings(self, s: str) -> int:
        n = len(s)
        dp = [[False] * n for _ in range(n)]
        ans = 0
        for i in range(n):
            dp[i][i] = True
            ans += 1
        for i in range(n - 1):
            if s[i] == s[i + 1]:
                dp[i][i + 1] = True
                ans += 1
        for l in range(3, n + 1):
            for i in range(n - l + 1):
                j = i + l - 1
                if s[i] == s[j] and dp[i + 1][j - 1]:
                    dp[i][j] = True
                    ans += 1
        return ans

=======

def countSubstrings(self, s: str) -> int:
        n = len(s)
        dp = [[False]*n for _ in range(n)]
        ans = 0
        for i in range(n):
            dp[i][i] = True
            ans += 1
        for i in range(n-1):
            if s[i] == s[i+1]:
                dp[i][i+1] = True
                ans += 1
        for l in range(3, n+1):
            for i in range(n-l+1):
                j = i+l-1
                if dp[i+1][j-1] and s[i] == s[j]:
                    dp[i][j] = True
                    ans += 1
        return ans

=======

def countSubstrings(self, s: str) -> int:
        n = len(s)
        dp = [[0]*n for _ in range(n)]
        for i in range(n):
            dp[i][i] = 1
        for i in range(n-1):
            if s[i] == s[i+1]:
                dp[i][i+1] = 1
        for l in range(2,n):
            for i in range(n-l):
                if s[i] == s[i+l] and dp[i+1][i+l-1] == 1:
                    dp[i][i+l] = 1
        return sum([sum(r) for r in dp])

=======

def countSubstrings(self, s: str) -> int:
        n = len(s)
        dp = [[0]*n for _ in range(n)]
        res = 0
        for i in range(n):
            dp[i][i] = 1
            res += 1
        for i in range(n-1):
            if s[i] == s[i+1]:
                dp[i][i+1] = 1
                res += 1
        for k in range(2, n):
            for i in range(n-k):
                j = i+k
                if s[i] == s[j] and dp[i+1][j-1]:
                    dp[i][j] = 1
                    res += 1
        return res

=======

def countSubstrings(self, s: str) -> int:
        n = len(s)
        ans = 0
        for i in range(n):
            for j in range(i+1, n+1):
                if s[i:j] == s[i:j][::-1]:
                    ans += 1
        return ans

=======

def countSubstrings(self, s: str) -> int:
        def count(s, i, j):
            count = 0
            while i >= 0 and j < len(s) and s[i] == s[j]:
                count += 1
                i -= 1
                j += 1
            return count
        res = 0
        for i in range(len(s)):
            res += count(s, i, i)
            res += count(s, i, i+1)
        return res

=======

def countSubstrings(self, s: str) -> int:
        count = 0
        for i in range(len(s)):
            count += 1
            for j in range(i+1, len(s)):
                if s[i:j+1] == s[i:j+1][::-1]:
                    count += 1
        return count

=======

def countSubstrings(self, s: str) -> int:
        def is_palindrome(s):
            return s == s[::-1]
        def count_palindromes(s):
            n = len(s)
            if n == 0:
                return 0
            if n == 1:
                return 1
            if n == 2:
                return 1 + is_palindrome(s)
            return count_palindromes(s[:-1]) + count_palindromes(s[1:]) - count_palindromes(s[1:-1]) + is_palindrome(s)
        return count_palindromes(s)

=======

def countSubstrings(self, s: str) -> int:
        def is_palindrome(s):
            return s == s[::-1]
        # print(is_palindrome('abc'))
        # print(is_palindrome('aba'))
        # print(is_palindrome('abba'))
        n = len(s)
        ans = 0
        for i in range(n):
            for j in range(i, n):
                ans += is_palindrome(s[i:j+1])
        return ans
