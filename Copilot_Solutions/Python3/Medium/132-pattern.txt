Synthesizing 10/10 solutions

=======

def find132pattern(self, nums: List[int]) -> bool:
        stack = []
        s3 = float('-inf')
        for i in range(len(nums)-1, -1, -1):
            if nums[i] < s3:
                return True
            while stack and nums[i] > stack[-1]:
                s3 = stack.pop()
            stack.append(nums[i])
        return False

=======

def find132pattern(self, nums: List[int]) -> bool:
        s3 = -float('inf')
        stack = []
        for i in range(len(nums)-1, -1, -1):
            if nums[i] < s3:
                return True
            while stack and nums[i] > stack[-1]:
                s3 = stack.pop()
            stack.append(nums[i])
        return False

=======

def find132pattern(self, nums: List[int]) -> bool:
        stack = []
        s3 = float('-inf')
        for i in range(len(nums)-1,-1,-1):
            if nums[i] < s3:
                return True
            while stack and stack[-1] < nums[i]:
                s3 = stack.pop()
            stack.append(nums[i])
        return False

=======

def find132pattern(self, nums: List[int]) -> bool:
        n = len(nums)
        if n < 3:
            return False
        left_min = [nums[0]]
        for i in range(1, n):
            left_min.append(min(left_min[-1], nums[i]))
        stack = []
        for j in range(n-1, -1, -1):
            if nums[j] > left_min[j]:
                while stack and stack[-1] <= left_min[j]:
                    stack.pop()
                if stack and stack[-1] < nums[j]:
                    return True
                stack.append(nums[j])
        return False

=======

def find132pattern(self, nums: List[int]) -> bool:
        if len(nums) < 3:
            return False
        stack = []
        s3 = float('-inf')
        for i in range(len(nums)-1, -1, -1):
            if nums[i] < s3:
                return True
            while stack and nums[i] > stack[-1]:
                s3 = stack.pop()
            stack.append(nums[i])
        return False

=======

def find132pattern(self, nums: List[int]) -> bool:
        stack = []
        s3 = -float('inf')
        for n in reversed(nums):
            if n < s3:
                return True
            while stack and n > stack[-1]:
                s3 = stack.pop()
            stack.append(n)
        return False

=======

def find132pattern(self, nums: List[int]) -> bool:
        stack = []
        max_k = -float('inf')
        for i in range(len(nums)-1, -1, -1):
            if nums[i] < max_k:
                return True
            while stack and nums[i] > stack[-1]:
                max_k = stack.pop()
            stack.append(nums[i])
        return False

=======

def find132pattern(self, nums: List[int]) -> bool:
        stack = []
        m = float('-inf')
        for i in range(len(nums) - 1, -1, -1):
            if nums[i] < m:
                return True
            while stack and stack[-1] < nums[i]:
                m = stack.pop()
            stack.append(nums[i])
        return False

=======

def find132pattern(self, nums: List[int]) -> bool:
        if len(nums) < 3:
            return False
        stack = []
        minnum = nums[0]
        for i in range(1, len(nums)):
            if nums[i] > minnum:
                while stack and stack[-1] <= minnum:
                    stack.pop()
                if stack and stack[-1] < nums[i]:
                    return True
                stack.append(nums[i])
            else:
                minnum = nums[i]
        return False

=======

class Solution:
    def find132pattern(self, nums: List[int]) -> bool:
        # 132 pattern is a subsequence of three integers nums[i], nums[j] and nums[k] such that i < j < k and nums[i] < nums[k] < nums[j].
        # 1. find the minimum number from the left
        # 2. find the maximum number from the right
        # 3. check if the minimum number is less than the maximum number
        # 4. check if the number in the middle is greater than the minimum number and less than the maximum number
        # 5. if all of the above is true, return true
        # 6. if not, return false
        # 7. if there is no number in the middle, return false
        # 8. if there is no number that is greater than the minimum number and less than the maximum number, return false
        # 9. if there is no number that is greater than the minimum number, return false
        # 10. if there is no number that is less than the maximum number, return false
        # 11. if there is no number that is less than the minimum number, return false
        # 12. if there is no number that is greater than the maximum number, return false
        # 13. if there is no number that is greater than the minimum number and less than the maximum number, return false
        # 14. if there is no number that
