Synthesizing 10/10 solutions

=======

def findCircleNum(self, isConnected: List[List[int]]) -> int:
        def dfs(i):
            for j in range(n):
                if isConnected[i][j] == 1 and j not in visited:
                    visited.add(j)
                    dfs(j)
        n = len(isConnected)
        visited = set()
        count = 0
        for i in range(n):
            if i not in visited:
                dfs(i)
                count += 1
        return count

=======

def findCircleNum(self, isConnected: List[List[int]]) -> int:
        n = len(isConnected)
        visited = [False]*n
        def dfs(i):
            for j in range(n):
                if isConnected[i][j] and not visited[j]:
                    visited[j] = True
                    dfs(j)
        ans = 0
        for i in range(n):
            if not visited[i]:
                ans += 1
                dfs(i)
        return ans

=======

def findCircleNum(self, isConnected: List[List[int]]) -> int:
        n = len(isConnected)
        visited = [False] * n
        def dfs(i):
            visited[i] = True
            for j in range(n):
                if isConnected[i][j] == 1 and not visited[j]:
                    dfs(j)
        count = 0
        for i in range(n):
            if not visited[i]:
                count += 1
                dfs(i)
        return count

=======

def findCircleNum(self, isConnected: List[List[int]]) -> int:
        n = len(isConnected)
        visited = [False] * n
        def dfs(i):
            visited[i] = True
            for j in range(n):
                if isConnected[i][j] == 1 and not visited[j]:
                    dfs(j)
        ans = 0
        for i in range(n):
            if not visited[i]:
                dfs(i)
                ans += 1
        return ans

=======

def findCircleNum(self, isConnected: List[List[int]]) -> int:
        n = len(isConnected)
        visited = [0]*n
        def dfs(i):
            for j in range(n):
                if isConnected[i][j] and not visited[j]:
                    visited[j] = 1
                    dfs(j)
        ans = 0
        for i in range(n):
            if not visited[i]:
                ans += 1
                visited[i] = 1
                dfs(i)
        return ans

=======

def findCircleNum(self, isConnected: List[List[int]]) -> int:
        def dfs(i):
            for j in range(n):
                if isConnected[i][j] and j not in seen:
                    seen.add(j)
                    dfs(j)
        n = len(isConnected)
        seen = set()
        res = 0
        for i in range(n):
            if i not in seen:
                dfs(i)
                res += 1
        return res

=======

def findCircleNum(self, isConnected: List[List[int]]) -> int:
        n = len(isConnected)
        visited = set()
        res = 0
        def dfs(i):
            for j in range(n):
                if isConnected[i][j] == 1 and j not in visited:
                    visited.add(j)
                    dfs(j)
        for i in range(n):
            if i not in visited:
                dfs(i)
                res += 1
        return res

=======

def findCircleNum(self, isConnected: List[List[int]]) -> int:
        n = len(isConnected)
        visited = [False for _ in range(n)]
        ans = 0
        for i in range(n):
            if not visited[i]:
                ans += 1
                self.dfs(i, isConnected, visited)
        return ans

=======

def findCircleNum(self, isConnected: List[List[int]]) -> int:
        def dfs(i, n, visited):
            for j in range(n):
                if isConnected[i][j] and j not in visited:
                    visited.add(j)
                    dfs(j, n, visited)
        n = len(isConnected)
        visited = set()
        provinces = 0
        for i in range(n):
            if i not in visited:
                provinces += 1
                dfs(i, n, visited)
        return provinces

=======

def findCircleNum(self, isConnected: List[List[int]]) -> int:
        self.n = len(isConnected)
        self.visited = [False] * self.n
        self.isConn = isConnected
        self.cnt = 0
        for i in range(self.n):
            if not self.visited[i]:
                self.dfs(i)
                self.cnt += 1
        return self.cnt
