Synthesizing 10/10 solutions (Duplicates hidden)

=======

def rotatedDigits(self, n: int) -> int:
        count = 0
        for i in range(1, n+1):
            s = str(i)
            if '3' in s or '4' in s or '7' in s:
                continue
            if '2' in s or '5' in s or '6' in s or '9' in s:
                count += 1
        return count

=======

def rotatedDigits(self, n: int) -> int:
        count = 0
        for i in range(1,n+1):
            if '3' in str(i) or '4' in str(i) or '7' in str(i):
                continue
            if '2' in str(i) or '5' in str(i) or '6' in str(i) or '9' in str(i):
                count+=1
        return count

=======

def rotatedDigits(self, n: int) -> int:
        count = 0
        for i in range(1,n+1):
            if '3' in str(i) or '4' in str(i) or '7' in str(i):
                continue
            elif '2' in str(i) or '5' in str(i) or '6' in str(i) or '9' in str(i):
                count += 1
        return count

=======

def rotatedDigits(self, n: int) -> int:
        count = 0
        for i in range(1, n+1):
            if self.isGood(i):
                count += 1
        return count

=======

def rotatedDigits(self, n: int) -> int:
        def isGood(x):
            s = str(x)
            if '3' in s or '4' in s or '7' in s:
                return False
            if '2' in s or '5' in s or '6' in s or '9' in s:
                return True
            return False
        
        return sum([isGood(x) for x in range(1, n+1)])

=======

def rotatedDigits(self, n: int) -> int:
        def check(n):
            s = set(str(n))
            return '3' not in s and '4' not in s and '7' not in s and len(s & {'2', '5', '6', '9'}) > 0
        return sum(check(i) for i in range(1, n + 1))

=======

def rotatedDigits(self, n: int) -> int:
        valid = ['2', '5', '6', '9']
        invalid = ['3', '4', '7']
        count = 0
        for i in range(1, n + 1):
            s = str(i)
            if any(x in s for x in valid) and not any(x in s for x in invalid):
                count += 1
        return count

=======

def rotatedDigits(self, n: int) -> int:
        """O(N) / O(1)"""
        res = 0
        for i in range(1, n+1):
            s = str(i)
            if '3' in s or '4' in s or '7' in s:
                continue
            if '2' in s or '5' in s or '6' in s or '9' in s:
                res += 1
        return res

=======

def rotatedDigits(self, n: int) -> int:
        self.res = 0
        def dfs(num, n):
            if num > n:
                return
            if '3' not in str(num) and '4' not in str(num) and '7' not in str(num):
                if '2' in str(num) or '5' in str(num) or '6' in str(num) or '9' in str(num):
                    self.res += 1
            for i in range(10):
                dfs(num*10+i, n)
        for i in range(1, 10):
            dfs(i, n)
        return self.res
