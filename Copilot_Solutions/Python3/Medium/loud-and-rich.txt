Synthesizing 9/10 solutions (Duplicates hidden)

=======

def loudAndRich(self, richer: List[List[int]], quiet: List[int]) -> List[int]:
        
        pass

=======

def loudAndRich(self, richer: List[List[int]], quiet: List[int]) -> List[int]:
        n = len(quiet)
        graph = [[] for _ in range(n)]
        for x, y in richer:
            graph[y].append(x)
        ans = [None] * n
        def dfs(x):
            if ans[x] is None:
                ans[x] = x
                for y in graph[x]:
                    if quiet[ans[x]] > quiet[dfs(y)]:
                        ans[x] = ans[y]
            return ans[x]
        for i in range(n):
            dfs(i)
        return ans

=======

def loudAndRich(self, richer: List[List[int]], quiet: List[int]) -> List[int]:
        n = len(quiet)
        g = [[] for _ in range(n)]
        for x, y in richer:
            g[y].append(x)
        ans = [None] * n
        def dfs(i):
            if ans[i] is not None:
                return ans[i]
            ans[i] = i
            for j in g[i]:
                if quiet[ans[i]] > quiet[dfs(j)]:
                    ans[i] = ans[j]
            return ans[i]
        for i in range(n):
            dfs(i)
        return ans

=======

def loudAndRich(self, richer: List[List[int]], quiet: List[int]) -> List[int]:
        def dfs(x):
            if x not in d:
                d[x] = x
                for y in g[x]:
                    if quiet[d[x]] > quiet[dfs(y)]:
                        d[x] = d[y]
            return d[x]
        d = {}
        g = collections.defaultdict(list)
        for x, y in richer:
            g[y].append(x)
        return [dfs(x) for x in range(len(quiet))]
