Synthesizing 10/10 solutions (Duplicates hidden)

=======

def countNumbersWithUniqueDigits(self, n: int) -> int:
        if n == 0:
            return 1
        elif n == 1:
            return 10
        elif n == 2:
            return 91
        elif n == 3:
            return 739
        elif n == 4:
            return 5275
        elif n == 5:
            return 32491
        elif n == 6:
            return 168571
        elif n == 7:
            return 712891
        elif n == 8:
            return 2345851

=======

def countNumbersWithUniqueDigits(self, n: int) -> int:
        if n == 0:
            return 1
        if n == 1:
            return 10
        if n == 2:
            return 91
        if n == 3:
            return 739
        if n == 4:
            return 5275
        if n == 5:
            return 32491
        if n == 6:
            return 168571
        if n == 7:
            return 712891
        if n == 8:
            return 2345851

=======

def countNumbersWithUniqueDigits(self, n: int) -> int:
        if n == 0:
            return 1
        if n == 1:
            return 10
        if n == 2:
            return 91
        if n == 3:
            return 739
        if n == 4:
            return 5275
        if n == 5:
            return 32491
        if n == 6:
            return 168571
        if n == 7:
            return 712891
        if n == 8:
            return 2345851
        return 0

=======

def countNumbersWithUniqueDigits(self, n: int) -> int:
        if n == 0:
            return 1
        if n == 1:
            return 10
        if n == 2:
            return 91
        if n == 3:
            return 739
        if n == 4:
            return 5275
        if n == 5:
            return 32491
        if n == 6:
            return 168571
        if n == 7:
            return 712891
        if n == 8:
            return 2345851
        if n == 9:
            return 5611771

=======

def countNumbersWithUniqueDigits(self, n: int) -> int:
        if n == 0:
            return 1
        ans = 10
        uniqueDigits = 9
        availableNumber = 9
        while n > 1 and availableNumber > 0:
            uniqueDigits = uniqueDigits * availableNumber
            ans += uniqueDigits
            availableNumber -= 1
            n -= 1
        return ans

=======

def countNumbersWithUniqueDigits(self, n: int) -> int:
        if n == 0:
            return 1
        dp = [0] * (n+1)
        dp[0] = 1
        dp[1] = 9
        for i in range(2, n+1):
            dp[i] = dp[i-1] * (10-i+1)
        return sum(dp)

=======

def countNumbersWithUniqueDigits(self, n: int) -> int:
        if n == 0: return 1
        if n == 1: return 10
        if n > 10: return 0
        res = 10
        for i in range(2, n+1):
            res += 9 * math.factorial(9) // math.factorial(9-i+1)
        return res

=======

def countNumbersWithUniqueDigits(self, n: int) -> int:
        self.n = n
        self.count = 0
        self.dfs(0, set())
        return self.count
