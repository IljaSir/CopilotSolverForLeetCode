Synthesizing 10/10 solutions

=======

def findUnsortedSubarray(self, nums: List[int]) -> int:
        sorted_nums = sorted(nums)
        start = len(nums)
        end = 0
        for i in range(len(nums)):
            if nums[i] != sorted_nums[i]:
                start = min(start, i)
                end = max(end, i)
        return end - start + 1 if end - start >= 0 else 0

=======

def findUnsortedSubarray(self, nums: List[int]) -> int:
        sorted_nums = sorted(nums)
        start = -1
        end = -1
        for i in range(len(nums)):
            if nums[i] != sorted_nums[i]:
                if start == -1:
                    start = i
                end = i
        return end - start + 1

=======

def findUnsortedSubarray(self, nums: List[int]) -> int:
        snums = sorted(nums)
        i = 0
        while i < len(nums):
            if nums[i] != snums[i]:
                break
            i += 1
        j = len(nums) - 1
        while j > 0:
            if nums[j] != snums[j]:
                break
            j -= 1
        if i >= j:
            return 0
        return j - i + 1

=======

def findUnsortedSubarray(self, nums: List[int]) -> int:
        sorted_nums = sorted(nums)
        if nums == sorted_nums:
            return 0
        i, j = 0, len(nums) - 1
        while i < j:
            if nums[i] == sorted_nums[i]:
                i += 1
            if nums[j] == sorted_nums[j]:
                j -= 1
            if nums[i] != sorted_nums[i] and nums[j] != sorted_nums[j]:
                break
        return j - i + 1

=======

def findUnsortedSubarray(self, nums: List[int]) -> int:
        n = len(nums)
        snums = sorted(nums)
        start = 0
        while start < n and nums[start] == snums[start]:
            start += 1
        end = n - 1
        while end >= 0 and nums[end] == snums[end]:
            end -= 1
        return 0 if end <= start else end - start + 1

=======

def findUnsortedSubarray(self, nums: List[int]) -> int:
        n = len(nums)
        l, r = n-1, 0
        for i in range(n-1):
            for j in range(i+1, n):
                if nums[i] > nums[j]:
                    l, r = min(l, i), max(r, j)
        return r-l+1 if r > l else 0

=======

def findUnsortedSubarray(self, nums: List[int]) -> int:
        n = len(nums)
        maxn = float('-inf')
        r = -1
        for i in range(n):
            if nums[i] < maxn:
                r = i
            else:
                maxn = nums[i]
        
        minn = float('inf')
        l = -1
        for i in range(n-1, -1, -1):
            if nums[i] > minn:
                l = i
            else:
                minn = nums[i]
        
        if r == -1:
            return 0
        else:
            return r - l + 1

=======

def findUnsortedSubarray(self, nums: List[int]) -> int:
        if len(nums) == 1:
            return 0
        start = 0
        end = len(nums) - 1
        while start < len(nums) - 1 and nums[start] <= nums[start + 1]:
            start += 1
        while end > 0 and nums[end] >= nums[end - 1]:
            end -= 1
        if start >= end:
            return 0
        min_val = min(nums[start:end + 1])
        max_val = max(nums[start:end + 1])
        while start >= 0 and nums[start] > min_val:
            start -= 1
        while end < len(nums) and nums[end] < max_val:
            end += 1
        return end - start - 1

=======

def findUnsortedSubarray(self, nums: List[int]) -> int:
        sorted_nums = sorted(nums)
        if nums == sorted_nums:
            return 0
        else:
            start = 0
            end = -1
            for i in range(len(nums)):
                if nums[i] != sorted_nums[i]:
                    start = i
                    break
            for i in range(len(nums)-1, -1, -1):
                if nums[i] != sorted_nums[i]:
                    end = i
                    break
            return end - start + 1

=======

def findUnsortedSubarray(self, nums: List[int]) -> int:
        if len(nums) == 1:
            return 0
        sorted_nums = sorted(nums)
        if nums == sorted_nums:
            return 0
        start = 0
        end = len(nums)-1
        while start < end:
            if nums[start] != sorted_nums[start]:
                break
            start += 1
        while end > start:
            if nums[end] != sorted_nums[end]:
                break
            end -= 1
        return end - start + 1
