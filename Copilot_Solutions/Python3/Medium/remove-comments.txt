Synthesizing 10/10 solutions (Duplicates hidden)

=======

def removeComments(self, source: List[str]) -> List[str]:
        in_block = False
        res = []
        for line in source:
            if not in_block:
                new_line = []
            i = 0
            while i < len(line):
                if not in_block and i + 1 < len(line) and line[i:i + 2] == '/*':
                    in_block = True
                    i += 1
                elif in_block and i + 1 < len(line) and line[i:i + 2] == '*/':
                    in_block = False
                    i += 1
                elif not in_block and i + 1 < len(line) and line[i:i + 2] == '//':
                    break
                elif not in_block:
                    new_line.append(line[i])
                i += 1
            if new_line and not in_block:
                res.append(''.join(new_line))
        return res

=======

def removeComments(self, source: List[str]) -> List[str]:
        in_block = False
        res = []
        for line in source:
            if not in_block:
                newline = []
            i = 0
            while i < len(line):
                if not in_block and i + 1 < len(line) and line[i:i + 2] == '/*':
                    in_block = True
                    i += 1
                elif in_block and i + 1 < len(line) and line[i:i + 2] == '*/':
                    in_block = False
                    i += 1
                elif not in_block and i + 1 < len(line) and line[i:i + 2] == '//':
                    break
                elif not in_block:
                    newline.append(line[i])
                i += 1
            if newline and not in_block:
                res.append(''.join(newline))
        return res

=======

def removeComments(self, source: List[str]) -> List[str]:
        in_block = False
        res = []
        for line in source:
            if not in_block:
                new = []
            i = 0
            while i < len(line):
                if not in_block and i + 1 < len(line) and line[i:i + 2] == '/*':
                    in_block = True
                    i += 1
                elif in_block and i + 1 < len(line) and line[i:i + 2] == '*/':
                    in_block = False
                    i += 1
                elif not in_block and i + 1 < len(line) and line[i:i + 2] == '//':
                    break
                elif not in_block:
                    new.append(line[i])
                i += 1
            if new and not in_block:
                res.append(''.join(new))
        return res

=======

def removeComments(self, source: List[str]) -> List[str]:
        output = []
        in_block = False
        for line in source:
            if not in_block:
                new_line = []
            i = 0
            while i < len(line):
                if not in_block and line[i:i+2] == '/*':
                    in_block = True
                    i += 1
                elif in_block and line[i:i+2] == '*/':
                    in_block = False
                    i += 1
                elif not in_block and line[i:i+2] == '//':
                    break
                elif not in_block:
                    new_line.append(line[i])
                i += 1
            if new_line and not in_block:
                output.append(''.join(new_line))
        return output

=======

def removeComments(self, source: List[str]) -> List[str]:
        result = []
        block = False
        for line in source:
            if not block:
                newline = ''
            i = 0
            while i < len(line):
                if not block and line[i:i+2] == '/*':
                    block = True
                    i += 1
                elif block and line[i:i+2] == '*/':
                    block = False
                    i += 1
                elif not block and line[i:i+2] == '//':
                    break
                elif not block:
                    newline += line[i]
                i += 1
            if newline and not block:
                result.append(newline)
        return result

=======

        code = []
        block = False
        for line in source:
            i = 0
            while i < len(line):
                if not block and i + 1 < len(line) and line[i:i+2] == '//':
                    break
                elif not block and i + 1 < len(line) and line[i:i+2] == '/*':
                    block = True
                    i += 1
                elif block and i + 1 < len(line) and line[i:i+2] == '*/':
                    block = False
                    i += 1
                elif not block:
                    code.append(line[i])
                i += 1
            if not block and code and code[-1] != '

=======

def removeComments(self, source: List[str]) -> List[str]:
        is_block = False
        res = []
        for line in source:
            if not is_block:
                new_line = []
            i = 0
            while i < len(line):
                if not is_block and i + 1 < len(line) and line[i:i + 2] == '//':
                    break
                elif not is_block and i + 1 < len(line) and line[i:i + 2] == '/*':
                    is_block = True
                    i += 1
                elif is_block and i + 1 < len(line) and line[i:i + 2] == '*/':
                    is_block = False
                    i += 1
                elif not is_block:
                    new_line.append(line[i])
                i += 1
            if new_line and not is_block:
                res.append(''.join(new_line))
        return res

=======

        multi = False
        ans = []
        for line in source:
            i = 0
            while i < len(line):
                if multi:
                    if line[i] == '*' and i + 1 < len(line) and line[i + 1] == '/':
                        multi = False
                        i += 1
                else:
                    if line[i] == '/' and i + 1 < len(line) and line[i + 1] == '/':
                        break
                    elif line[i] == '/' and i + 1 < len(line) and line[i + 1] == '*':
                        multi = True
                        i += 1
                    else:
                        ans.append(line[i])
                i += 1
            if not multi and ans and ans[-1] != '

=======

def removeComments(self, source: List[str]) -> List[str]:
        
        pass
