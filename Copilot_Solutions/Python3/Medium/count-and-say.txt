Synthesizing 10/10 solutions

=======

def countAndSay(self, n: int) -> str:
        if n == 1:
            return "1"
        pre = self.countAndSay(n-1)
        res = ""
        count = 1
        for i in range(1, len(pre)):
            if pre[i] == pre[i-1]:
                count += 1
            else:
                res += str(count) + pre[i-1]
                count = 1
        res += str(count) + pre[-1]
        return res

=======

def countAndSay(self, n: int) -> str:
        if n == 1:
            return '1'
        else:
            s = self.countAndSay(n-1)
            count = 1
            res = ''
            for i in range(1, len(s)):
                if s[i] == s[i-1]:
                    count += 1
                else:
                    res += str(count) + s[i-1]
                    count = 1
            return res + str(count) + s[-1]

=======

def countAndSay(self, n: int) -> str:
        if n == 1:
            return '1'
        else:
            s = self.countAndSay(n-1)
            result = ''
            i = 0
            while i < len(s):
                j = i
                while j < len(s) and s[j] == s[i]:
                    j += 1
                result += str(j-i) + s[i]
                i = j
            return result

=======

def countAndSay(self, n: int) -> str:
        if n == 1:
            return '1'
        else:
            s = self.countAndSay(n-1)
            l = len(s)
            i = 0
            ans = ''
            while i < l:
                cnt = 1
                while i+1 < l and s[i] == s[i+1]:
                    cnt += 1
                    i += 1
                ans += str(cnt) + s[i]
                i += 1
            return ans

=======

def countAndSay(self, n: int) -> str:
        if n == 1:
            return '1'
        else:
            s = self.countAndSay(n-1)
            i = 0
            j = 0
            res = ''
            while i < len(s):
                while j < len(s) and s[j] == s[i]:
                    j += 1
                res += str(j-i) + s[i]
                i = j
            return res

=======

def countAndSay(self, n: int) -> str:
        if n == 1:
            return "1"
        prev = self.countAndSay(n-1)
        ans = ""
        i = 0
        while i < len(prev):
            c = prev[i]
            cnt = 1
            while i+1 < len(prev) and prev[i+1] == c:
                cnt += 1
                i += 1
            ans += str(cnt) + c
            i += 1
        return ans

=======

def countAndSay(self, n: int) -> str:
        if n == 1:
            return "1"
        res = "1"
        for i in range(2, n + 1):
            tmp = ""
            cnt = 1
            for j in range(1, len(res)):
                if res[j - 1] == res[j]:
                    cnt += 1
                else:
                    tmp += str(cnt) + res[j - 1]
                    cnt = 1
            tmp += str(cnt) + res[-1]
            res = tmp
        return res

=======

def countAndSay(self, n: int) -> str:
        if n == 1:
            return "1"
        else:
            s = self.countAndSay(n-1)
            ss = ""
            i = 0
            while i < len(s):
                j = i
                while j < len(s) and s[j] == s[i]:
                    j += 1
                ss += str(j-i) + s[i]
                i = j
            return ss

=======

def countAndSay(self, n: int) -> str:
        if n == 1:
            return "1"
        
        prev = self.countAndSay(n-1)
        count = 1
        result = []
        for i in range(1, len(prev)):
            if prev[i] == prev[i-1]:
                count += 1
            else:
                result.append(str(count))
                result.append(prev[i-1])
                count = 1
        result.append(str(count))
        result.append(prev[-1])
        return "".join(result)

=======

def countAndSay(self, n: int) -> str:
        prev = '1'
        for _ in range(n-1):
            prev = self.next(prev)
        return prev
