Synthesizing 10/10 solutions (Duplicates hidden)

=======

def combine(self, n: int, k: int) -> List[List[int]]:
        def backtrack(first = 1, curr = []):
            # if the combination is done
            if len(curr) == k:  
                output.append(curr[:])
            for i in range(first, n + 1):
                # add i into the current combination
                curr.append(i)
                # use next integers to complete the combination
                backtrack(i + 1, curr)
                # backtrack
                curr.pop()
        
        output = []
        backtrack()
        return output

=======

def combine(self, n: int, k: int) -> List[List[int]]:
        if k == 1:
            return [[i] for i in range(1, n+1)]
        elif k == n:
            return [[i for i in range(1, n+1)]]
        else:
            return [[i] + j for i in range(1, n+1) for j in self.combine(i-1, k-1)]

=======

def combine(self, n: int, k: int) -> List[List[int]]:
        if k == 1:
            return [[i] for i in range(1, n+1)]
        elif n == k:
            return [[i for i in range(1, n+1)]]
        else:
            return [ [n] + comb for comb in self.combine(n-1, k-1) ] + self.combine(n-1, k)

=======

def combine(self, n: int, k: int) -> List[List[int]]:
        res = []
        def dfs(path, start):
            if len(path) == k:
                res.append(path[:])
                return
            for i in range(start, n+1):
                path.append(i)
                dfs(path, i+1)
                path.pop()
        dfs([], 1)
        return res

=======

def combine(self, n: int, k: int) -> List[List[int]]:
        def dfs(start, path):
            if len(path) == k:
                res.append(path[:])
                return
            for i in range(start, n + 1):
                path.append(i)
                dfs(i + 1, path)
                path.pop()
        res = []
        dfs(1, [])
        return res

=======

def combine(self, n: int, k: int) -> List[List[int]]:
        def dfs(start, path):
            if len(path) == k:
                res.append(path)
                return
            for i in range(start, n+1):
                dfs(i+1, path+[i])
        res = []
        dfs(1, [])
        return res

=======

def combine(self, n: int, k: int) -> List[List[int]]:
        result = []
        def dfs(start, path):
            if len(path) == k:
                result.append(path[:])
                return
            for i in range(start, n + 1):
                path.append(i)
                dfs(i + 1, path)
                path.pop()
        dfs(1, [])
        return result

=======

def combine(self, n: int, k: int) -> List[List[int]]:
        return list(itertools.combinations(range(1, n+1), k))
