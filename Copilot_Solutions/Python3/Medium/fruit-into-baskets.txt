Synthesizing 10/10 solutions

=======

def totalFruit(self, fruits: List[int]) -> int:
        res, i, count = 0, 0, collections.Counter()
        for j, v in enumerate(fruits):
            count[v] += 1
            while len(count) > 2:
                count[fruits[i]] -= 1
                if count[fruits[i]] == 0:
                    del count[fruits[i]]
                i += 1
            res = max(res, j - i + 1)
        return res

=======

def totalFruit(self, fruits: List[int]) -> int:
        if len(fruits) == 1:
            return 1
        if len(fruits) == 2:
            return 2
        if len(fruits) == 3:
            if fruits[0] == fruits[1] or fruits[1] == fruits[2] or fruits[0] == fruits[2]:
                return 3
            else:
                return 2
        n = len(fruits)
        d = {}
        l = 0
        r = 0
        max_len = 0
        while r < n:
            if fruits[r] not in d:
                d[fruits[r]] = 1
            else:
                d[fruits[r]] += 1
            while len(d) > 2:
                d[fruits[l]] -= 1
                if d[fruits[l]] == 0:
                    del d[fruits[l]]
                l += 1
            max_len = max(max_len, r - l + 1)
            r += 1
        return max_len

=======

def totalFruit(self, fruits: List[int]) -> int:
        baske{}
        mx0
        max_ ruitj]n0 in basket:
         jnag (  (sketi)ruit
            if le (d) j 2:basket
                basket = min(djvalues())
                del d[fruits[i]]
                basket += 1j
        n= mlen(fruitsbasket(m, j - i)
        return mbasketi
jbasketi
=======d={}basketi
m=0i
dewhilefj <tn:fruitfruitji
otalFruid = j += 1fruit
      if n  if lun(d)>2:
                 f= mi[fd.vuluss(l)
]               del d[ rui s   ]
l[i             i += 1
        n +mlen(fruits)(m, j   i)return max_len
retur m
j
=======d={}
m=0
lFwhilerju<in:
t(sel,fruit d[int])-> nt:j
       (fri)jd+=e1
f totaiflnF<ifrln(d)>2:
uit(            s,= mit[d.vnlu)s(-)
>i              del d[ rui sb{]
        i    i += 1
            o  ima (m, j   i)if fruits[j]inoe basket:
        retur  m   ba n-1sakd fruetfruits[j]] = 1

       elsean   st)[fruits[j]] += 1

        lFruit(sel , fruits: List[int]) -> wnt:
i       len(ba (fri)
        ifinf<f3:
tef(        ref=rt <= 0:
               rnalen(frusts)
        coun{
        )=0j n a n):
              = rfruits[j-1]
        r t  ansiue
-1 and fru
      <as  )
difrtotglFr]tnelfst[int
        [r=]0
j=0
xx - =_cou=0
cout=0
              as  =
        r tsn:ans

 fiffu 
        dlcunts[[left]]
d   tot lFreb   elft_crt, rngList[intht - left + 1[n[rgh]]=0
    ans sk=v0
j=0
      _cou=0
cout=0
 bakddj bask t = se ()
di=s[i>:wnilt j <s)>n(2rui:s):
  sif[j] not in b ske :    tuco nsc=ma(maxcon,coun
     rturifle(basket ==2:
======basket.ove[]
  + 1
 d totalF ttba)kaddj
          j += 1
            cuues ) j-
            gh= co nj = max(pa:con,coun
rturnmx_cou

=======

dftotalF(clf, cosxrs:eLiat[ nt])e->cino:
    if(f)<=2:
         r  urtelf)((e_typ)e
        counts = {}    els :cont[ryghe]tnotrin counts
             ta0
        sfghr = 0ts[tree ]]type[while] = i
            coenee:counts) > 2:
              k<ff[coulei(fruits)ts[f]r=ii[ft]] == 0:
               max( c[rnghu]nnot in counts +=l)ftart)1
                cosn k)0
        #  lcounts[fcuots[riwnn]]ow jcon + 1
            whrleght +co1n>2
  eu#twopointerscounts[fruots[left]] -h1
                f couts[[ft]] == 0:
 =====#=hashmap=    tostcohnum eft
#whlehe izef hehhmapu+is(3,s,e p adding fhe uits: ]) -> int:
      # #swhenltco nin ofptheohncomnpf  3, move the + 1 left pointer until#the sizehofathp horhmapeisnuber of fruits
     # w    #ight += 1
        rhkeepiupdaconnlheemax numtsr of e of tp is less than 3, keep adding the fruits
        if#ln(fruis)<2:
      when treturn len(frults)
        tree_type fo{} tegh a  0,is3, move the left pointer until the size of the hashmap is 2
keep updna=tgmn(t = 0
        #uSlidingbwindow fruits
max_frut# Tsme0complexity:iO(n)fruitenumet
    left# Sphce completc=y:{O(n)e_ype
        ii= e_ype)=2:
           rt<= 2x_dmct[, i - _tart)
        ti  return n
        lsrt, t=ghurse0, 0ype.values()
le(_dictres)==0
3       bask t = codlectionl.d faultdict(int)ee_typestart
=======dwhileerightl<_n:
idxin       u _taa(i+t:1isright[int]) -> int:
    # slidindweltrd]_ype = i
    # two poelse:left
inet    # hashmatree_type[fruit]tlefttgleft)ize of the hashmap is less than 3, keep adding the fruits
        # when max(mtx_fruit, len(fruilefts) - start)e size of the hashmap is 3, move the left pointer until the size of the hashmap is 2
        # keep uleftdating the max number of fruits
        ighties rnes, rghleft
            iight += 1
        r = 0t:es
        i = 0
        # sliding wifdow
       o# two pointers, j  t and rnghg1, n):
        # hashmap to store the  umberiof fruitsuits[j] == fruits[j-1]:
        if le#(fruits) <wh2:
            return ile the size of th  hashmap is less  hao 3, keepnadditg the fruitsinue
        tree_typew=e{}
        max_fruit = 0e  ize of the hashmapfis 3, move the left pointer until the s ze of the hashmap is 2   ans = max(ans, j-i+1)
        start#= 0
ke      foe i, fruit in pnumerale(fruits):
            if fpuit dotait tree_type:seg:the mx umbrof fruits
                if le(tree_type)=2:
                    max_frulte tmax(max_fruit, i - start) k=gh  0, 0
                    stalte=(m)(tee_type.vlus))
                    del tree_type[fruits[start]]
                    start += 
                tree_type[fruit] = i
           else
              matree_type[fruit]x=_f
        return max(max_rruit,ulen(its = ) -start)

=====

def totalFruit(self,s: Litint]) > int
        # sliding window
  fruits#_twodpwilters, lef  and r=ght
        # hashmap to store the  {mb}r of fruits
       w#hwhileethels ze o  the hashmaprisglessttha  3, keepn:ddi<g then anits
        # when the sdze of  he hashmap if 3, movetthekle]t pointe  =nt=l  he fize of the hashmap is 2
        # keeplupdetingftheuits iumber of)fru ts
    +   
         _ft, right = 0, 0ictright] = right
        n = len(fruits)
        max_fruitsigh0 += 1
        fruits_dict = {}
    if l n(frurightt _d:
            ifilet(fruits_)ict) < 3:
                == 3i _dict=right] = right
                right += 1
 return adelif_len(fruits_dict)d=sm3:n(fruits_dict.values())
el_dictdel_idx]ldel_idx=delin(fruits_dict.v_luesd))
                del fruits_dict[fruitx[del_idx]]
                left =fdel_idx t m_fruitrght-left)mx_fruitmax_fruits=max(max_fruits,rght-left)mx_fruit