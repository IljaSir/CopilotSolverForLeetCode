Synthesizing 9/10 solutions (Duplicates hidden)

=======

def kthSmallest(self, matrix: List[List[int]], k: int) -> int:
        n = len(matrix)
        l, r = matrix[0][0], matrix[-1][-1]
        while l < r:
            mid = (l + r) // 2
            cnt = 0
            for i in range(n):
                for j in range(n):
                    if matrix[i][j] <= mid:
                        cnt += 1
            if cnt < k:
                l = mid + 1
            else:
                r = mid
        return l

=======

def kthSmallest(self, matrix: List[List[int]], k: int) -> int:
        n = len(matrix)
        lo, hi = matrix[0][0], matrix[n-1][n-1]
        while lo <= hi:
            mid = (lo + hi) // 2
            count = self.count(matrix, mid)
            if count < k:
                lo = mid + 1
            else:
                hi = mid - 1
        return lo

=======

def kthSmallest(self, matrix: List[List[int]], k: int) -> int:
        return sorted([j for i in matrix for j in i])[k-1]

=======

def kthSmallest(self, matrix: List[List[int]], k: int) -> int:
        n = len(matrix)
        if n == 1:
            return matrix[0][0]
        if k == n**2:
            return matrix[-1][-1]
        if k == 1:
            return matrix[0][0]
        if k == n:
            return matrix[0][-1]
        if k == n*(n-1)+1:
            return matrix[-1][0]
        low, high = matrix[0][0], matrix[-1][-1]
        while low < high:
            mid = (low + high) // 2
            count = 0
            for i in range(n):
                for j in range(n):
                    if matrix[i][j] <= mid:
                        count += 1
            if count < k:
                low = mid + 1
            else:
                high = mid
        return low

=======

def kthSmallest(self, matrix: List[List[int]], k: int) -> int:
        return sorted([num for row in matrix for num in row])[k-1]

=======

def kthSmallest(self, matrix: List[List[int]], k: int) -> int:
        return sorted([n for row in matrix for n in row])[k-1]

=======

def kthSmallest(self, matrix: List[List[int]], k: int) -> int:
        return sorted(sum(matrix, []))[k-1]

=======

def kthSmallest(self, matrix: List[List[int]], k: int) -> int:
        # matrix: List[List[int]], k: int) -> int:
        # n = len(matrix)
        # if n == 1:
        #     return matrix[0][0]
        # l = matrix[0][0]
        # r = matrix[n-1][n-1]
        # while l < r:
        #     mid = l + (r-l)//2
        #     count = 0
        #     for i in range(n):
        #         for j in range(n):
        #             if matrix[i][j] <= mid:
        #                 count += 1
        #     if count < k:
        #         l = mid + 1
        #     else:
        #         r = mid
        # return l
        # n = len(matrix)
        # if n == 1:
        #     return matrix[0][0]
        # l = matrix[0][0]
        # r = matrix[n-1][n-1]
        # while l < r:
        #     mid = l + (r-l)//2
        #     count = 0
        #     for i in range(n):
        #         for j in range(n):
        #             if matrix[i][j] <= mid:
        #                 count += 1
        #     if count < k:
        #         l = mid + 1
        #     else:
        #         r = mid
        # return l
        n = len(matrix)
        if n == 1:
            return matrix[0][0]
        l = matrix[0][0]
        r = matrix[n-1][n-1]
        while l < r:
            mid = l + (r-l)//2
            count = 0
            for i in range(n):
                for j in range(n):
                    if matrix[i][j] <= mid:
                        count += 1
            if count < k:
                l = mid + 1
            else:
                r = mid
        return l
