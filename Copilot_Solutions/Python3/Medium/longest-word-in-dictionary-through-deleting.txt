Synthesizing 10/10 solutions (Duplicates hidden)

=======

def findLongestWord(self, s: str, dictionary: List[str]) -> str:
        dictionary.sort(key=lambda x: (-len(x), x))
        for word in dictionary:
            i = 0
            for c in s:
                if i < len(word) and c == word[i]:
                    i += 1
            if i == len(word):
                return word
        return ""

=======

def findLongestWord(self, s: str, dictionary: List[str]) -> str:
        dictionary.sort(key=lambda x: (-len(x), x))
        for word in dictionary:
            i = 0
            for c in s:
                if i < len(word) and c == word[i]:
                    i += 1
            if i == len(word):
                return word
        return ''

=======

def findLongestWord(self, s: str, dictionary: List[str]) -> str:
        dictionary.sort(key=lambda x: (-len(x), x))
        for word in dictionary:
            i = 0
            for ch in s:
                if i < len(word) and ch == word[i]:
                    i += 1
            if i == len(word):
                return word
        return ""

=======

def findLongestWord(self, s: str, dictionary: List[str]) -> str:
        res = ''
        for word in dictionary:
            i = 0
            for c in s:
                if i < len(word) and c == word[i]:
                    i += 1
            if i == len(word) and len(word) >= len(res):
                if len(word) > len(res) or res > word:
                    res = word
        return res

=======

def findLongestWord(self, s: str, dictionary: List[str]) -> str:
        dictionary.sort(key=lambda x:(-len(x),x))
        for word in dictionary:
            i = 0
            for c in s:
                if i < len(word) and word[i] == c:
                    i += 1
            if i == len(word):
                return word
        return ""

=======

def findLongestWord(self, s: str, dictionary: List[str]) -> str:
        res = ""
        for d in dictionary:
            i = 0
            for c in s:
                if i < len(d) and c == d[i]:
                    i += 1
            if i == len(d):
                if len(d) > len(res) or (len(d) == len(res) and d < res):
                    res = d
        return res

=======

def findLongestWord(self, s: str, dictionary: List[str]) -> str:
        dictionary.sort(key=lambda x: (-len(x), x))
        for word in dictionary:
            if self.isSubsequence(word, s):
                return word
        return ""

=======

def findLongestWord(self, s: str, dictionary: List[str]) -> str:
        def is_subseq(s, t):
            i = 0
            j = 0
            while i < len(s) and j < len(t):
                if s[i] == t[j]:
                    i += 1
                j += 1
            return i == len(s)
        dictionary.sort(key=lambda x: (-len(x), x))
        for word in dictionary:
            if is_subseq(word, s):
                return word
        return ""
