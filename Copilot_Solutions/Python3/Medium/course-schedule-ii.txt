Synthesizing 10/10 solutions

=======

def findOrder(self, numCourses: int, prerequisites: List[List[int]]) -> List[int]:
        graph = [[] for _ in range(numCourses)]
        indegree = [0 for _ in range(numCourses)]
        for u, v in prerequisites:
            graph[v].append(u)
            indegree[u] += 1
        queue = collections.deque([u for u in range(numCourses) if indegree[u] == 0])
        order = []
        while queue:
            u = queue.popleft()
            order.append(u)
            for v in graph[u]:
                indegree[v] -= 1
                if indegree[v] == 0:
                    queue.append(v)
        if len(order) == numCourses:
            return order
        return []

=======

def findOrder(self, numCourses: int, prerequisites: List[List[int]]) -> List[int]:
        graph = [[] for _ in range(numCourses)]
        indegree = [0] * numCourses
        for u, v in prerequisites:
            graph[v].append(u)
            indegree[u] += 1
        stack = [i for i in range(numCourses) if indegree[i] == 0]
        res = []
        while stack:
            node = stack.pop()
            res.append(node)
            for v in graph[node]:
                indegree[v] -= 1
                if indegree[v] == 0:
                    stack.append(v)
        if len(res) != numCourses:
            return []
        return res

=======

def findOrder(self, numCourses: int, prerequisites: List[List[int]]) -> List[int]:
        graph = [[] for _ in range(numCourses)]
        for a, b in prerequisites:
            graph[a].append(b)
        visited = [0] * numCourses
        res = []
        for i in range(numCourses):
            if not self.dfs(graph, visited, res, i):
                return []
        return res

=======

def findOrder(self, numCourses: int, prerequisites: List[List[int]]) -> List[int]:
        adj = [[] for _ in range(numCourses)]
        for a, b in prerequisites:
            adj[b].append(a)
        visited = [0] * numCourses
        res = []
        def dfs(i):
            if visited[i] == 1:
                return True
            if visited[i] == 2:
                return False
            visited[i] = 1
            for j in adj[i]:
                if dfs(j):
                    return True
            visited[i] = 2
            res.append(i)
            return False
        for i in range(numCourses):
            if dfs(i):
                return []
        return res

=======

def findOrder(self, numCourses: int, prerequisites: List[List[int]]) -> List[int]:
        graph = [[] for _ in range(numCourses)]
        for i, j in prerequisites:
            graph[i].append(j)
        visited = [False] * numCourses
        res = []
        def dfs(i):
            nonlocal visited
            if visited[i] == -1:
                return False
            if visited[i]:
                return True
            visited[i] = -1
            for j in graph[i]:
                if not dfs(j):
                    return False
            visited[i] = True
            res.append(i)
            return True
        for i in range(numCourses):
            if not dfs(i):
                return []
        return res

=======

def findOrder(self, numCourses: int, prerequisites: List[List[int]]) -> List[int]:
        adjList = [[] for _ in range(numCourses)]
        for pair in prerequisites:
            adjList[pair[0]].append(pair[1])
        
        visited = [0] * numCourses
        stack = []
        def dfs(node):
            if visited[node] == -1:
                return False
            if visited[node] == 1:
                return True
            visited[node] = -1
            for n in adjList[node]:
                if not dfs(n):
                    return False
            visited[node] = 1
            stack.append(node)
            return True
        
        for node in range(numCourses):
            if not dfs(node):
                return []
        return stack

=======

def findOrder(self, numCourses: int, prerequisites: List[List[int]]) -> List[int]:
        # build graph
        graph = {}
        for i in range(numCourses):
            graph[i] = []
        for p in prerequisites:
            graph[p[0]].append(p[1])
        #print(graph)
        
        # build indegree
        indegree = {}
        for i in range(numCourses):
            indegree[i] = 0
        for p in prerequisites:
            indegree[p[1]] += 1
        #print(indegree)
        
        # BFS
        queue = []
        for i in range(numCourses):
            if indegree[i] == 0:
                queue.append(i)
        #print(queue)
        
        res = []
        while queue:
            node = queue.pop(0)
            res.append(node)
            for n in graph[node]:
                indegree[n] -= 1
                if indegree[n] == 0:
                    queue.append(n)
        #print(res)
        
        if len(res) != numCourses:
            return []
        else:
            return res

=======

def findOrder(self, numCourses: int, prerequisites: List[List[int]]) -> List[int]:
        # build graph
        graph = [[] for _ in range(numCourses)]
        for pair in prerequisites:
            graph[pair[1]].append(pair[0])
        # build in-degree
        in_degree = [0 for _ in range(numCourses)]
        for pair in prerequisites:
            in_degree[pair[0]] += 1
        # bfs
        queue = []
        for i in range(numCourses):
            if in_degree[i] == 0:
                queue.append(i)
        res = []
        while queue:
            node = queue.pop(0)
            res.append(node)
            for neighbor in graph[node]:
                in_degree[neighbor] -= 1
                if in_degree[neighbor] == 0:
                    queue.append(neighbor)
        if len(res) == numCourses:
            return res
        else:
            return []

=======

def findOrder(self, numCourses: int, prerequisites: List[List[int]]) -> List[int]:
        # create a graph
        graph = {i:[] for i in range(numCourses)}
        for i in prerequisites:
            graph[i[0]].append(i[1])
        #print(graph)
        # check for cycle
        def dfs(node, visited, stack):
            visited[node] = 1
            for i in graph[node]:
                if visited[i] == 0:
                    if dfs(i, visited, stack):
                        return True
                elif visited[i] == 1:
                    return True
            visited[node] = 2
            stack.append(node)
            return False
        visited = [0 for i in range(numCourses)]
        stack = []
        for i in range(numCourses):
            if visited[i] == 0:
                if dfs(i, visited, stack):
                    return []
        return stack[::-1]

=======

def findOrder(self, numCourses: int, prerequisites: List[List[int]]) -> List[int]:
        # Topological sort
        # Build graph
        graph = defaultdict(list)
        for a, b in prerequisites:
            graph[a].append(b)
        
        # Init status
        status = [0] * numCourses
        # 0: not visited
        # 1: visiting
        # 2: visited
        
        # Init result
        res = []
        
        # DFS
        def dfs(i):
            # If visiting, there is a cycle
            if status[i] == 1:
                return False
            
            # If visited, skip
            if status[i] == 2:
                return True
            
            # Mark visiting
            status[i] = 1
            
            # DFS
            for j in graph[i]:
                if not dfs(j):
                    return False
            
            # Mark visited
            status[i] = 2
            
            # Add to result
            res.append(i)
            
            return True
        
        # Check all courses
        for i in range(numCourses):
            if not dfs(i):
                return []
        
        # Return result
        return res
