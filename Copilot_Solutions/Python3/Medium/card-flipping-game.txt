Synthesizing 9/10 solutions

=======

def flipgame(self, fronts: List[int], backs: List[int]) -> int:
        s = set()
        for i in range(len(fronts)):
            if fronts[i] == backs[i]:
                s.add(fronts[i])
        res = float('inf')
        for i in range(len(fronts)):
            if fronts[i] not in s:
                res = min(res, fronts[i])
            if backs[i] not in s:
                res = min(res, backs[i])
        return res if res != float('inf') else 0

=======

def flipgame(self, fronts: List[int], backs: List[int]) -> int:
        s = set()
        for i in range(len(fronts)):
            if fronts[i] == backs[i]:
                s.add(fronts[i])
        ans = 2001
        for i in range(len(fronts)):
            if fronts[i] not in s:
                ans = min(ans, fronts[i])
            if backs[i] not in s:
                ans = min(ans, backs[i])
        return ans if ans < 2001 else 0

=======

def flipgame(self, fronts: List[int], backs: List[int]) -> int:
        seen = set()
        for i in range(len(fronts)):
            if fronts[i] == backs[i]:
                seen.add(fronts[i])
        res = 2001
        for i in range(len(fronts)):
            if fronts[i] not in seen:
                res = min(res, fronts[i])
            if backs[i] not in seen:
                res = min(res, backs[i])
        return res if res < 2001 else 0

=======

def flipgame(self, fronts: List[int], backs: List[int]) -> int:
        same = set()
        for i in range(len(fronts)):
            if fronts[i] == backs[i]:
                same.add(fronts[i])
        ans = 2001
        for i in range(len(fronts)):
            if fronts[i] not in same:
                ans = min(ans, fronts[i])
            if backs[i] not in same:
                ans = min(ans, backs[i])
        return ans if ans != 2001 else 0

=======

def flipgame(self, fronts: List[int], backs: List[int]) -> int:
        same = set()
        for f, b in zip(fronts, backs):
            if f == b:
                same.add(f)
        return min([x for x in fronts + backs if x not in same] or [0])

=======

def flipgame(self, fronts: List[int], backs: List[int]) -> int:
        same = set([x for x, y in zip(fronts, backs) if x == y])
        return min([x for x in fronts + backs if x not in same] or [0])

=======

def flipgame(self, fronts: List[int], backs: List[int]) -> int:
        forbidden = set()
        for i in range(len(fronts)):
            if fronts[i] == backs[i]:
                forbidden.add(fronts[i])
        ans = float('inf')
        for i in range(len(fronts)):
            if fronts[i] not in forbidden:
                ans = min(ans, fronts[i])
            if backs[i] not in forbidden:
                ans = min(ans, backs[i])
        if ans == float('inf'):
            return 0
        return ans

=======

def flipgame(self, fronts: List[int], backs: List[int]) -> int:
        a = set(fronts)
        b = set(backs)
        c = a.intersection(b)
        for i in c:
            a.remove(i)
        if a:
            return min(a)
        else:
            return 0

=======

class Solution:
    def flipgame(self, fronts: List[int], backs: List[int]) -> int:
        # all cards are different
        # if fronts[i] == backs[i], it's a bad card
        # if fronts[i] != backs[i], it's a good card
        # if fronts[i] == fronts[j] and backs[i] == backs[j], it's a bad card
        # if fronts[i] != fronts[j] and backs[i] != backs[j], it's a good card
        # if fronts[i] == backs[j] and backs[i] == fronts[j], it's a bad card
        # if fronts[i] != backs[j] and backs[i] != fronts[j], it's a good card
        # if fronts[i] == fronts[j] and backs[i] != backs[j], it's a good card
        # if fronts[i] != fronts[j] and backs[i] == backs[j], it's a good card
        # if fronts[i] == backs[j] and backs[i] != fronts[j], it's a good card
        # if fronts[i] != backs[j] and backs[i] == fronts[j], it's a good card
        # if fronts[i] == fronts[j] and backs[i] == backs[j], it's a bad card
        # if fronts[i] != fronts[j] and backs[i] != backs[j], it's a good card
        # if fronts[i] == backs[j] and backs[i] == fronts[j], it's a bad card
        # if fronts[i] != backs[j] and backs[i] != fronts[j], it's a good card
        # if fronts[i] == fronts[j] and backs[i] != backs[j], it's a good card
        # if fronts[i] != fronts[j] and backs[i] == backs[j], it's a good card
        # if fronts[i] == backs[j] and backs[i] != fronts[j], it's a good card
        # if fronts[i] != backs[j] and backs[i] == fronts[j], it's a good card
        # if fronts[i] == fronts[j] and backs[i] == backs[j], it's a bad card
        # if fronts[i] != fronts[j] and backs[i] != backs[j], it's a good card
        # if fronts[i] == backs[j] and backs[i] == fronts[j], it's a bad card
        # if fronts
