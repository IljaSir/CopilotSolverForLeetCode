Synthesizing 10/10 solutions (Duplicates hidden)

=======

def subarraySum(self, nums: List[int], k: int) -> int:
        count = 0
        for i in range(len(nums)):
            sum = 0
            for j in range(i, len(nums)):
                sum += nums[j]
                if sum == k:
                    count += 1
        return count

=======

def subarraySum(self, nums: List[int], k: int) -> int:
        res = 0
        for i in range(len(nums)):
            sum = 0
            for j in range(i, len(nums)):
                sum += nums[j]
                if sum == k:
                    res += 1
        return res

=======

def subarraySum(self, nums: List[int], k: int) -> int:
        ans = 0
        for i in range(len(nums)):
            for j in range(i, len(nums)):
                if sum(nums[i:j+1]) == k:
                    ans += 1
        return ans

=======

def subarraySum(self, nums: List[int], k: int) -> int:
        d = {0: 1}
        s = 0
        res = 0
        for n in nums:
            s += n
            res += d.get(s-k, 0)
            d[s] = d.get(s, 0) + 1
        return res

=======

def subarraySum(self, nums: List[int], k: int) -> int:
        # Time  complexity: O(N)
        # Space complexity: O(N)
        count = collections.Counter()
        count[0] = 1

        ans = su

=======

def subarraySum(self, nums: List[int], k: int) -> int:
        # prefix sum
        # O(n^2)
        # n = len(nums)
        # s = [0]
        # for i in range(n):
        #     s.append(s[-1]+nums[i])
        # ans = 0
        # for i in range(n):
        #     for j in range(i+1, n+1):
        #         if s[j]-s[i] == k:
        #             ans += 1
        # return ans

        # O(n)
        # prefix sum
        # s[i] - s[j] = k
        # s[i] = s[j] + k
        # s[j] = s[i] - k
        # s[j] in seen
        n = len(nums)
        s = 0
        ans = 0
        seen = {0:1}
        for i in range(n):
            s += nums[i]
            if s-k in seen:
                ans += seen[s-k]
            if s in seen:
                seen[s] += 1
            else:
                seen[s] = 1
        return ans

=======

def subarraySum(self, nums: List[int], k: int) -> int:
        # brute force: O(n^2) time
        # cum_sum = [0] * len(nums)
        # for i in range(len(nums)):
        #     cum_sum[i] = cum_sum[i-1] + nums[i]
        # count = 0
        # for i in range(len(nums)):
        #     for j in range(i, len(nums)):
        #         if cum_sum[j] - cum_sum[i-1] == k:
        #             count += 1
        # return count

        # O(n) time, O(n) space
        cum_sum = 0
        count = 0
        cum_sum_dict = {0:1}
        for i in range(len(nums)):
            cum_sum += nums[i]
            if cum_sum - k in cum_sum_dict:
                count += cum_sum_dict[cum_sum - k]
            if cum_sum in cum_sum_dict:
                cum_sum_dict[cum_sum] += 1
            else:
                cum_sum_dict[cum_sum] = 1
        return count

=======

def subarraySum(self, nums: List[int], k: int) -> int:
        # sum[i] = sum(0, i)
        # sum[i] - sum[j] = sum(j, i)
        # sum[i] - k = sum[j]
        # so we need to find sum[j] in sum[0, i]
        # sum[j] = sum[i] - k
        # so we need to find sum[i] - k in sum[0, i]
        # so we need to find sum[i] - k in sum[0, i]
        sum_dict = {0: 1}
        sum_val = 0
        res = 0
        for num in nums:
            sum_val += num
            if sum_val - k in sum_dict:
                res += sum_dict[sum_val - k]
            if sum_val not in sum_dict:
                sum_dict[sum_val] = 1
            else:
                sum_dict[sum_val] += 1
        return res
