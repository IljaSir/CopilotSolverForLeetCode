Synthesizing 10/10 solutions (Duplicates hidden)

=======

def leastBricks(self, wall: List[List[int]]) -> int:
        d = {}
        for row in wall:
            s = 0
            for brick in row[:-1]:
                s += brick
                d[s] = d.get(s, 0) + 1
        return len(wall) - max(d.values()) if d else len(wall)

=======

def leastBricks(self, wall: List[List[int]]) -> int:
        d = collections.defaultdict(int)
        for row in wall:
            s = 0
            for brick in row[:-1]:
                s += brick
                d[s] += 1
        return len(wall) - max(d.values() or [0])

=======

def leastBricks(self, wall: List[List[int]]) -> int:
        d = {}
        for row in wall:
            s = 0
            for i in range(len(row)-1):
                s += row[i]
                d[s] = d.get(s, 0) + 1
        return len(wall) - max(d.values()) if d else len(wall)

=======

def leastBricks(self, wall: List[List[int]]) -> int:
        d = collections.defaultdict(int)
        for row in wall:
            s = 0
            for x in row[:-1]:
                s += x
                d[s] += 1
        return len(wall) - max(d.values() or [0])

=======

def leastBricks(self, wall: List[List[int]]) -> int:
        dic = {}
        for i in range(len(wall)):
            sum = 0
            for j in range(len(wall[i])-1):
                sum += wall[i][j]
                if sum in dic:
                    dic[sum] += 1
                else:
                    dic[sum] = 1
        if len(dic) == 0:
            return len(wall)
        else:
            return len(wall) - max(dic.values())

=======

def leastBricks(self, wall: List[List[int]]) -> int:
        m = {}
        for row in wall:
            s = 0
            for i in range(len(row)-1):
                s += row[i]
                if s not in m:
                    m[s] = 0
                m[s] += 1
        if len(m) == 0:
            return len(wall)
        return len(wall) - max(m.values())

=======

def leastBricks(self, wall: List[List[int]]) -> int:
        n = len(wall)
        d = {}
        for i in range(n):
            m = len(wall[i])
            s = 0
            for j in range(m-1):
                s += wall[i][j]
                d[s] = d.get(s, 0) + 1
        return n - max(d.values()) if d else n

=======

def leastBricks(self, wall: List[List[int]]) -> int:
        dic = {}
        for row in wall:
            n = len(row)
            if n == 1:
                continue
            for i in range(n-1):
                if i == 0:
                    row[i+1] += row[i]
                else:
                    row[i+1] += row[i]
                if row[i+1] not in dic:
                    dic[row[i+1]] = 1
                else:
                    dic[row[i+1]] += 1
        if len(dic) == 0:
            return len(wall)
        return len(wall) - max(dic.values())

=======

def leastBricks(self, wall: List[List[int]]) -> int:
        
        pass
