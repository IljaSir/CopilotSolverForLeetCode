Synthesizing 10/10 solutions

=======

def canVisitAllRooms(self, rooms: List[List[int]]) -> bool:
        visited = set()
        def dfs(i):
            if i in visited:
                return
            visited.add(i)
            for j in rooms[i]:
                dfs(j)
        dfs(0)
        return len(visited) == len(rooms)

=======

def canVisitAllRooms(self, rooms: List[List[int]]) -> bool:
        seen = set()
        stack = [0]
        while stack:
            node = stack.pop()
            seen.add(node)
            for nei in rooms[node]:
                if nei not in seen:
                    stack.append(nei)
        return len(seen) == len(rooms)

=======

def canVisitAllRooms(self, rooms: List[List[int]]) -> bool:
        visited = set()
        def dfs(room):
            if room in visited:
                return
            visited.add(room)
            for key in rooms[room]:
                dfs(key)
        dfs(0)
        return len(visited) == len(rooms)

=======

def canVisitAllRooms(self, rooms: List[List[int]]) -> bool:
        seen = set()
        def dfs(i):
            if i not in seen:
                seen.add(i)
                for j in rooms[i]:
                    dfs(j)
        dfs(0)
        return len(seen) == len(rooms)

=======

def canVisitAllRooms(self, rooms: List[List[int]]) -> bool:
        visited = set()
        stack = [0]
        while stack:
            r = stack.pop()
            if r not in visited:
                visited.add(r)
                stack.extend(rooms[r])
        return len(visited) == len(rooms)

=======

def canVisitAllRooms(self, rooms: List[List[int]]) -> bool:
        n = len(rooms)
        visited = [False] * n
        visited[0] = True
        stack = [0]
        while stack:
            room = stack.pop()
            for key in rooms[room]:
                if not visited[key]:
                    visited[key] = True
                    stack.append(key)
        return all(visited)

=======

def canVisitAllRooms(self, rooms: List[List[int]]) -> bool:
        def dfs(i):
            if i in seen:
                return
            seen.add(i)
            for j in rooms[i]:
                dfs(j)
        seen = set()
        dfs(0)
        return len(seen) == len(rooms)

=======

def canVisitAllRooms(self, rooms: List[List[int]]) -> bool:
        n = len(rooms)
        visited = [0] * n
        def dfs(i):
            visited[i] = 1
            for j in rooms[i]:
                if visited[j] == 0:
                    dfs(j)
        dfs(0)
        return all(visited)

=======

def canVisitAllRooms(self, rooms: List[List[int]]) -> bool:
        n = len(rooms)
        visited = [0] * n
        visited[0] = 1
        def dfs(i):
            for j in rooms[i]:
                if not visited[j]:
                    visited[j] = 1
                    dfs(j)
        dfs(0)
        return all(visited)

=======

def canVisitAllRooms(self, rooms: List[List[int]]) -> bool:
        q = [0]
        visited = set([0])
        while q:
            i = q.pop(0)
            for j in rooms[i]:
                if j not in visited:
                    q.append(j)
                    visited.add(j)
        return len(visited) == len(rooms)
