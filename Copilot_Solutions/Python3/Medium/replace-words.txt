Synthesizing 10/10 solutions (Duplicates hidden)

=======

def replaceWords(self, dictionary: List[str], sentence: str) -> str:
        dictionary.sort(key=len)
        sentence = sentence.split()
        for i, word in enumerate(sentence):
            for root in dictionary:
                if word.startswith(root):
                    sentence[i] = root
                    break
        return ' '.join(sentence)

=======

def replaceWords(self, dictionary: List[str], sentence: str) -> str:
        dictionary = sorted(dictionary, key=len)
        words = sentence.split()
        for i, word in enumerate(words):
            for root in dictionary:
                if word.startswith(root):
                    words[i] = root
                    break
        return ' '.join(words)

=======

def replaceWords(self, dictionary: List[str], sentence: str) -> str:
        dictionary = sorted(dictionary, key=len)
        sentence = sentence.split()
        for i, word in enumerate(sentence):
            for root in dictionary:
                if word.startswith(root):
                    sentence[i] = root
                    break
        return ' '.join(sentence)

=======

def replaceWords(self, dictionary: List[str], sentence: str) -> str:
        d = set(dictionary)
        res = []
        for word in sentence.split():
            for i in range(1, len(word)):
                if word[:i] in d:
                    res.append(word[:i])
                    break
            else:
                res.append(word)
        return ' '.join(res)

=======

def replaceWords(self, dictionary: List[str], sentence: str) -> str:
        dictionary = sorted(dictionary, key=lambda x: len(x))
        words = sentence.split()
        for i, word in enumerate(words):
            for root in dictionary:
                if word.startswith(root):
                    words[i] = root
                    break
        return ' '.join(words)

=======

def replaceWords(self, dictionary: List[str], sentence: str) -> str:
        dictionary.sort(key=lambda x:len(x))
        sentence = sentence.split()
        for i in range(len(sentence)):
            for root in dictionary:
                if sentence[i].startswith(root):
                    sentence[i] = root
                    break
        return ' '.join(sentence)

=======

def replaceWords(self, dictionary: List[str], sentence: str) -> str:
        d = set(dictionary)
        return " ".join([min([w[:i] for i in range(1, len(w)) if w[:i] in d] or [w]) for w in sentence.split()])

=======

def replaceWords(self, dictionary: List[str], sentence: str) -> str:
        
        pass
