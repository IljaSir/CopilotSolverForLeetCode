Synthesizing 10/10 solutions (Duplicates hidden)

=======

def findRadius(self, houses: List[int], heaters: List[int]) -> int:
        houses.sort()
        heaters.sort()
        heaters = [float('-inf')] + heaters + [float('inf')]
        i = 0
        ans = 0
        for house in houses:
            while house > heaters[i+1]:
                i += 1
            ans = max(ans, min(house - heaters[i], heaters[i+1] - house))
        return ans

=======

def findRadius(self, houses: List[int], heaters: List[int]) -> int:
        houses.sort()
        heaters.sort()
        heaters = [float('-inf')] + heaters + [float('inf')]
        i = 0
        r = 0
        for house in houses:
            while house > heaters[i+1]:
                i += 1
            r = max(r, min(house - heaters[i], heaters[i+1] - house))
        return r

=======

def findRadius(self, houses: List[int], heaters: List[int]) -> int:
        houses.sort()
        heaters.sort()
        i = 0
        radius = 0
        for house in houses:
            while i < len(heaters) - 1 and abs(heaters[i + 1] - house) <= abs(heaters[i] - house):
                i += 1
            radius = max(radius, abs(heaters[i] - house))
        return radius

=======

def findRadius(self, houses: List[int], heaters: List[int]) -> int:
        houses.sort()
        heaters.sort()
        i = 0
        ans = 0
        for house in houses:
            while i < len(heaters)-1 and abs(heaters[i]-house) >= abs(heaters[i+1]-house):
                i += 1
            ans = max(ans, abs(heaters[i]-house))
        return ans

=======

def findRadius(self, houses: List[int], heaters: List[int]) -> int:
        houses.sort()
        heaters.sort()
        heaters = [-float('inf')] + heaters + [float('inf')]
        i = 0
        ans = 0
        for house in houses:
            while house > heaters[i+1]:
                i += 1
            ans = max(ans, min(house - heaters[i], heaters[i+1] - house))
        return ans

=======

def findRadius(self, houses: List[int], heaters: List[int]) -> int:
        houses.sort()
        heaters.sort()
        n, m = len(houses), len(heaters)
        ans = 0
        i = 0
        for house in houses:
            while i < m - 1 and heaters[i] + heaters[i + 1] <= house * 2:
                i += 1
            ans = max(ans, abs(heaters[i] - house))
        return ans

=======

def findRadius(self, houses: List[int], heaters: List[int]) -> int:
        houses.sort()
        heaters.sort()
        n = len(houses)
        m = len(heaters)
        i, j = 0, 0
        ans = 0
        while i < n:
            while j + 1 < m and abs(heaters[j + 1] - houses[i]) <= abs(heaters[j] - houses[i]):
                j += 1
            ans = max(ans, abs(heaters[j] - houses[i]))
            i += 1
        return ans

=======

def findRadius(self, houses: List[int], heaters: List[int]) -> int:
        houses.sort()
        heaters.sort()
        i = 0
        res = 0
        for house in houses:
            while i < len(heaters) - 1 and house - heaters[i] >= heaters[i + 1] - house:
                i += 1
            res = max(res, abs(heaters[i] - house))
        return res

=======

def findRadius(self, houses: List[int], heaters: List[int]) -> int:
        houses.sort()
        heaters.sort()
        n = len(houses)
        m = len(heaters)
        i = 0
        j = 0
        res = 0
        while i < n:
            if j < m and houses[i] >= heaters[j]:
                j += 1
            if j == m:
                res = max(res, houses[i] - heaters[j-1])
                break
            if j == 0:
                res = max(res, heaters[j] - houses[i])
            else:
                res = max(res, min(houses[i] - heaters[j-1], heaters[j] - houses[i]))
            i += 1
        return res
