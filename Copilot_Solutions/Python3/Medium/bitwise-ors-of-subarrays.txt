Synthesizing 10/10 solutions (Duplicates hidden)

=======

def subarrayBitwiseORs(self, arr: List[int]) -> int:
        ans = set()
        cur = set()
        for x in arr:
            cur = {x | y for y in cur} | {x}
            ans |= cur
        return len(ans)

=======

def subarrayBitwiseORs(self, arr: List[int]) -> int:
        res = set()
        cur = set()
        for x in arr:
            cur = {x | y for y in cur} | {x}
            res |= cur
        return len(res)

=======

def subarrayBitwiseORs(self, arr: List[int]) -> int:
        res, cur = set(), set()
        for a in arr:
            cur = {a | b for b in cur} | {a}
            res |= cur
        return len(res)

=======

def subarrayBitwiseORs(self, arr: List[int]) -> int:
        res = set()
        cur = set()
        for i in arr:
            cur = {i} | {i | j for j in cur}
            res |= cur
        return len(res)

=======

def subarrayBitwiseORs(self, arr: List[int]) -> int:
        prev, res = set(), set()
        for x in arr:
            prev = {x | y for y in prev} | {x}
            res |= prev
        return len(res)

=======

def subarrayBitwiseORs(self, arr: List[int]) -> int:
        res = set()
        last = set()
        for x in arr:
            res.add(x)
            last = {x | y for y in last} | {x}
            res |= last
        return len(res)

=======

def subarrayBitwiseORs(self, arr: List[int]) -> int:
        
        pass

=======

def subarrayBitwiseORs(self, arr: List[int]) -> int:
        # set of all possible ORs
        res = set()
        # set of ORs of subarrays ending at current position
        cur = set()
        for a in arr:
            # add a itself
            cur = {a | b for b in cur} | {a}
            res |= cur
        return len(res)
