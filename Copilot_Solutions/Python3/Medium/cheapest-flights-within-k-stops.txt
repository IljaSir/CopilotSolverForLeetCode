Synthesizing 10/10 solutions (Duplicates hidden)

=======

def findCheapestPrice(self, n: int, flights: List[List[int]], src: int, dst: int, k: int) -> int:
        graph = collections.defaultdict(list)
        for u, v, w in flights:
            graph[u].append((v, w))
        pq = [(0, src, k)]
        while pq:
            price, u, k = heapq.heappop(pq)
            if u == dst:
                return price
            if k >= 0:
                for v, w in graph[u]:
                    heapq.heappush(pq, (price + w, v, k - 1))
        return -1

=======

def findCheapestPrice(self, n: int, flights: List[List[int]], src: int, dst: int, k: int) -> int:
        from collections import defaultdict
        g = defaultdict(list)
        for u, v, w in flights:
            g[u].append((v, w))
        heap = [(0, src, k+1)]
        while heap:
            cost, u, k = heapq.heappop(heap)
            if u == dst:
                return cost
            if k > 0:
                for v, w in g[u]:
                    heapq.heappush(heap, (cost+w, v, k-1))
        return -1

=======

def findCheapestPrice(self, n: int, flights: List[List[int]], src: int, dst: int, k: int) -> int:
        
        pass

=======

def findCheapestPrice(self, n: int, flights: List[List[int]], src: int, dst: int, k: int) -> int:
        d = collections.defaultdict(list)
        for f in flights:
            d[f[0]].append([f[1], f[2]])
        heap = [(0, src, k+1)]
        while heap:
            price, city, k = heapq.heappop(heap)
            if city == dst:
                return price
            if k > 0:
                for c, p in d[city]:
                    heapq.heappush(heap, (price + p, c, k-1))
        return -1

=======

def findCheapestPrice(self, n: int, flights: List[List[int]], src: int, dst: int, k: int) -> int:
        # Dijkstra's Algorithm
        graph = collections.defaultdict(list)
        for u, v, w in flights:
            graph[u].append((v, w))
        # (price, city, stops)
        pq = [(0, src, k)]
        while pq:
            price, city, stops = heapq.heappop(pq)
            if city == dst:
                return price
            if stops >= 0:
                for nei, w in graph[city]:
                    heapq.heappush(pq, (price + w, nei, stops - 1))
        return -1
