Synthesizing 9/10 solutions (Duplicates hidden)

=======

def minMoves2(self, nums: List[int]) -> int:
        nums.sort()
        i, j = 0, len(nums)-1
        res = 0
        while i < j:
            res += nums[j] - nums[i]
            i += 1
            j -= 1
        return res

=======

def minMoves2(self, nums: List[int]) -> int:
        nums.sort()
        i = 0
        j = len(nums) - 1
        result = 0
        while i < j:
            result += nums[j] - nums[i]
            i += 1
            j -= 1
        return result

=======

def minMoves2(self, nums: List[int]) -> int:
        nums.sort()
        return sum(nums[~i] - nums[i] for i in range(len(nums) // 2))

=======

def minMoves2(self, nums: List[int]) -> int:
        nums.sort()
        median = nums[len(nums) // 2]
        return sum(abs(num - median) for num in nums)

=======

def minMoves2(self, nums: List[int]) -> int:
        nums.sort()
        n = len(nums)
        if n % 2 == 1:
            median = nums[n//2]
        else:
            median = (nums[n//2] + nums[n//2-1]) // 2
        return sum(abs(x-median) for x in nums)

=======

def minMoves2(self, nums: List[int]) -> int:
        nums.sort()
        mid = nums[len(nums)//2]
        return sum(abs(num-mid) for num in nums)

=======

def minMoves2(self, nums: List[int]) -> int:
        nums.sort()
        m = nums[len(nums) // 2]
        return sum(abs(n - m) for n in nums)

=======

def minMoves2(self, nums: List[int]) -> int:
        nums.sort()
        mid = len(nums)//2
        return sum(abs(num - nums[mid]) for num in nums)
