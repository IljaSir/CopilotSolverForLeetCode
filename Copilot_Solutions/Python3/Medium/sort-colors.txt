Synthesizing 8/10 solutions

=======

def sortColors(self, nums: List[int]) -> None:
        """
        Do not return anything, modify nums in-place instead.
        """
        start = 0
        end = len(nums) - 1
        i = 0
        while i <= end:
            if nums[i] == 0:
                nums[start], nums[i] = nums[i], nums[start]
                start += 1
                i += 1
            elif nums[i] == 2:
                nums[end], nums[i] = nums[i], nums[end]
                end -= 1
            else:
                i += 1

=======

def sortColors(self, nums: List[int]) -> None:
        """
        Do not return anything, modify nums in-place instead.
        """
        for i in range(len(nums)):
            for j in range(i+1, len(nums)):
                if nums[i] > nums[j]:
                    nums[i], nums[j] = nums[j], nums[i]

=======

def sortColors(self, nums: List[int]) -> None:
        """
        Do not return anything, modify nums in-place instead.
        """
        i = 0
        j = len(nums) - 1
        k = 0
        while k <= j:
            if nums[k] == 0:
                nums[k], nums[i] = nums[i], nums[k]
                i += 1
                k += 1
            elif nums[k] == 2:
                nums[k], nums[j] = nums[j], nums[k]
                j -= 1
            else:
                k += 1

=======

def sortColors(self, nums: List[int]) -> None:
        """
        Do not return anything, modify nums in-place instead.
        """
        n = len(nums)
        zero = 0
        two = n - 1
        i = 0
        while i <= two:
            if nums[i] == 0:
                nums[i], nums[zero] = nums[zero], nums[i]
                zero += 1
                i += 1
            elif nums[i] == 2:
                nums[i], nums[two] = nums[two], nums[i]
                two -= 1
            else:
                i += 1

=======

def sortColors(self, nums: List[int]) -> None:
        """
        Do not return anything, modify nums in-place instead.
        """
        # red, white, blue = 0, 0, len(nums) - 1
        # while white <= blue:
        #     if nums[white] == 0:
        #         nums[red], nums[white] = nums[white], nums[red]
        #         red += 1
        #         white += 1
        #     elif nums[white] == 1:
        #         white += 1
        #     else:
        #         nums[white], nums[blue] = nums[blue], nums[white]
        #         blue -= 1
        red, white, blue = 0, 0, len(nums) - 1
        while white <= blue:
            if nums[white] == 0:
                nums[red], nums[white] = nums[white], nums[red]
                red += 1
                white += 1
            elif nums[white] == 1:
                white += 1
            else:
                nums[white], nums[blue] = nums[blue], nums[white]
                blue -= 1

=======

def sortColors(self, nums: List[int]) -> None:
        """
        Do not return anything, modify nums in-place instead.
        """

        # Solution 1: one pass
        # left, right = 0, len(nums) - 1
        # i = 0
        # while i <= right:
        #     if nums[i] == 0:
        #         nums[left], nums[i] = nums[i], nums[left]
        #         left += 1
        #         i += 1
        #     elif nums[i] == 2:
        #         nums[right], nums[i] = nums[i], nums[right]
        #         right -= 1
        #     else:
        #         i += 1

        # Solution 2: two pass
        count0 = 0
        count1 = 0
        for n in nums:
            if n == 0:
                count0 += 1
            elif n == 1:
                count1 += 1
        nums[:count0] = [0] * count0
        nums[count0:count0+count1] = [1] * count1
        nums[count0+count1:] = [2] * (len(nums) - count0 - count1)

=======


        """
        # 1. One-pass algorithm using only constant extra space
        # 1.1. Counting sort
        # 0, 1, and 2

=======


"""
