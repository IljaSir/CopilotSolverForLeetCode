Synthesizing 10/10 solutions

=======

def numberOfBoomerangs(self, points: List[List[int]]) -> int:
        def dist(p1, p2):
            return (p1[0] - p2[0]) ** 2 + (p1[1] - p2[1]) ** 2
        res = 0
        for p1 in points:
            count = collections.Counter(dist(p1, p2) for p2 in points)
            for d in count:
                res += count[d] * (count[d] - 1)
        return res

=======

def numberOfBoomerangs(self, points: List[List[int]]) -> int:
        def dist(p1, p2):
            return (p1[0] - p2[0]) ** 2 + (p1[1] - p2[1]) ** 2
        res = 0
        for p1 in points:
            d = {}
            for p2 in points:
                d[dist(p1, p2)] = d.get(dist(p1, p2), 0) + 1
            for k in d:
                res += d[k] * (d[k] - 1)
        return res

=======

def numberOfBoomerangs(self, points: List[List[int]]) -> int:
        def distance(p1, p2):
            return (p1[0] - p2[0]) ** 2 + (p1[1] - p2[1]) ** 2

        res = 0
        for p1 in points:
            d = collections.Counter([distance(p1, p2) for p2 in points])
            for k in d:
                res += d[k] * (d[k] - 1)
        return res

=======

def numberOfBoomerangs(self, points: List[List[int]]) -> int:
        def dist(p1, p2):
            return (p1[0]-p2[0])**2 + (p1[1]-p2[1])**2
        res = 0
        for p in points:
            d = {}
            for q in points:
                d[dist(p, q)] = d.get(dist(p, q), 0) + 1
            for k in d:
                res += d[k] * (d[k] - 1)
        return res

=======

def numberOfBoomerangs(self, points: List[List[int]]) -> int:
        def dist(a, b):
            return (a[0] - b[0]) ** 2 + (a[1] - b[1]) ** 2
        res = 0
        for i in range(len(points)):
            d = {}
            for j in range(len(points)):
                if i == j:
                    continue
                d[dist(points[i], points[j])] = d.get(dist(points[i], points[j]), 0) + 1
            for k in d:
                res += d[k] * (d[k] - 1)
        return res

=======

def numberOfBoomerangs(self, points: List[List[int]]) -> int:
        def get_distance(p1, p2):
            return (p1[0] - p2[0]) ** 2 + (p1[1] - p2[1]) ** 2
        res = 0
        for p in points:
            dist_map = {}
            for q in points:
                if p == q:
                    continue
                dist = get_distance(p, q)
                if dist in dist_map:
                    dist_map[dist] += 1
                else:
                    dist_map[dist] = 1
            for dist in dist_map:
                res += dist_map[dist] * (dist_map[dist] - 1)
        return res

=======

def numberOfBoomerangs(self, points: List[List[int]]) -> int:
        ans = 0
        for x1, y1 in points:
            d = {}
            for x2, y2 in points:
                dx = x1 - x2
                dy = y1 - y2
                dist = dx * dx + dy * dy
                d[dist] = d.get(dist, 0) + 1
            for k in d:
                ans += d[k] * (d[k] - 1)
        return ans

=======

def numberOfBoomerangs(self, points: List[List[int]]) -> int:
        def distance(x1, y1, x2, y2):
            return (x1 - x2) ** 2 + (y1 - y2) ** 2
        ans = 0
        for i in range(len(points)):
            d = {}
            for j in range(len(points)):
                if i != j:
                    d[distance(points[i][0], points[i][1], points[j][0], points[j][1])] = d.get(distance(points[i][0], points[i][1], points[j][0], points[j][1]), 0) + 1
            for k in d:
                ans += d[k] * (d[k] - 1)
        return ans

=======

def numberOfBoomerangs(self, points: List[List[int]]) -> int:
        def dist(a, b):
            return (a[0]-b[0])**2 + (a[1]-b[1])**2
        ans = 0
        for i in range(len(points)):
            d = {}
            for j in range(len(points)):
                if i == j:
                    continue
                d[dist(points[i], points[j])] = d.get(dist(points[i], points[j]), 0) + 1
            for k in d:
                ans += d[k]*(d[k]-1)
        return ans

=======

def numberOfBoomerangs(self, points: List[List[int]]) -> int:
        # 1. Brute Force
        # Time  complexity: O(N^3)
        # Space complexity: O(1)
        # res = 0
        # for i in range(len(points)):
        #     for j in range(len(points)):
        #         if i == j: continue
        #         for k in range(len(points)):
        #             if i == k or j == k: continue
        #             if self.get_distance(points[i], points[j]) == self.get_distance(points[i], points[k]):
        #                 res += 1
        # return res
        
        # 2. Hash Map
        # Time  complexity: O(N^2)
        # Space complexity: O(N)
        res = 0
        for i in range(len(points)):
            d = collections.defaultdict(int)
            for j in range(len(points)):
                if i == j: continue
                d[self.get_distance(points[i], points[j])] += 1
            for v in d.values():
                res += v * (v - 1)
        return res
