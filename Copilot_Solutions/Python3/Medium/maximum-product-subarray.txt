Synthesizing 10/10 solutions

=======

def maxProduct(self, nums: List[int]) -> int:
        maxp = minp = res = nums[0]
        for n in nums[1:]:
            maxp, minp = max(n, maxp*n, minp*n), min(n, maxp*n, minp*n)
            res = max(res, maxp)
        return res

=======

def maxProduct(self, nums: List[int]) -> int:
        if len(nums) == 1:
            return nums[0]
        max_product = nums[0]
        min_product = nums[0]
        result = nums[0]
        for i in range(1, len(nums)):
            temp_max = max(nums[i], max_product*nums[i], min_product*nums[i])
            min_product = min(nums[i], max_product*nums[i], min_product*nums[i])
            max_product = temp_max
            result = max(result, max_product)
        return result

=======

def maxProduct(self, nums: List[int]) -> int:
        n = len(nums)
        dp = [[0]*n for _ in range(n)]
        for i in range(n):
            dp[i][i] = nums[i]
        for i in range(1, n):
            for j in range(n-i):
                dp[j][j+i] = dp[j][j+i-1]*nums[j+i]
        return max([max(row) for row in dp])

=======

def maxProduct(self, nums: List[int]) -> int:
        if not nums:
            return 0
        max_product = nums[0]
        min_product = nums[0]
        result = nums[0]
        for i in range(1, len(nums)):
            if nums[i] < 0:
                max_product, min_product = min_product, max_product
            max_product = max(nums[i], max_product * nums[i])
            min_product = min(nums[i], min_product * nums[i])
            result = max(result, max_product)
        return result

=======

def maxProduct(self, nums: List[int]) -> int:
        if len(nums) == 1:
            return nums[0]
        maxVal = nums[0]
        minVal = nums[0]
        res = nums[0]
        for i in range(1, len(nums)):
            if nums[i] < 0:
                maxVal, minVal = minVal, maxVal
            maxVal = max(nums[i], nums[i] * maxVal)
            minVal = min(nums[i], nums[i] * minVal)
            res = max(res, maxVal)
        return res

=======

def maxProduct(self, nums: List[int]) -> int:
        max_product = nums[0]
        prev_max = nums[0]
        prev_min = nums[0]
        for i in range(1, len(nums)):
            curr_max = max(nums[i], prev_max * nums[i], prev_min * nums[i])
            curr_min = min(nums[i], prev_max * nums[i], prev_min * nums[i])
            max_product = max(max_product, curr_max)
            prev_max = curr_max
            prev_min = curr_min
        return max_product

=======

def maxProduct(self, nums: List[int]) -> int:
        if len(nums) == 0:
            return 0
        mx = nums[0]
        mn = nums[0]
        ans = nums[0]
        for i in range(1,len(nums)):
            mx, mn = max(nums[i], nums[i]*mx, nums[i]*mn), min(nums[i], nums[i]*mx, nums[i]*mn)
            ans = max(ans, mx)
        return ans

=======

def maxProduct(self, nums: List[int]) -> int:
        # max_product = nums[0]
        # for i in range(len(nums)):
        #     for j in range(i+1, len(nums)+1):
        #         product = 1
        #         for k in range(i,j):
        #             product *= nums[k]
        #         max_product = max(max_product, product)
        # return max_product
        max_product = nums[0]
        min_product = nums[0]
        ans = nums[0]
        for i in range(1, len(nums)):
            if nums[i] < 0:
                max_product, min_product = min_product, max_product
            max_product = max(nums[i], max_product*nums[i])
            min_product = min(nums[i], min_product*nums[i])
            ans = max(ans, max_product)
        return ans

=======

def maxProduct(self, nums: List[int]) -> int:
        # DP
        # O(n) time, O(1) space
        # max_product = min_product = ans = nums[0]
        # for i in range(1, len(nums)):
        #     if nums[i] < 0:
        #         max_product, min_product = min_product, max_product
        #     max_product = max(nums[i], max_product * nums[i])
        #     min_product = min(nums[i], min_product * nums[i])
        #     ans = max(ans, max_product)
        # return ans
        
        # DP
        # O(n) time, O(n) space
        dp_max = dp_min = ans = nums[0]
        for i in range(1, len(nums)):
            dp_max, dp_min = max(nums[i], dp_max * nums[i], dp_min * nums[i]), min(nums[i], dp_max * nums[i], dp_min * nums[i])
            ans = max(ans, dp_max)
        return ans

=======

def maxProduct(self, nums: List[int]) -> int:
        # brute force
        # find all subarrays
        # find the max product
        # O(n^3)
        # O(1)
        # subarrays = []
        # n = len(nums)
        # for i in range(n):
        #     for j in range(i, n):
        #         subarrays.append(nums[i:j+1])
        # max_product = -float('inf')
        # for subarray in subarrays:
        #     product = 1
        #     for num in subarray:
        #         product *= num
        #     max_product = max(max_product, product)
        # return max_product
        
        # dp
        # O(n)
        # O(n)
        # max_product = [0] * len(nums)
        # min_product = [0] * len(nums)
        # max_product[0] = nums[0]
        # min_product[0] = nums[0]
        # for i in range(1, len(nums)):
        #     max_product[i] = max(max_product[i-1] * nums[i], min_product[i-1] * nums[i], nums[i])
        #     min_product[i] = min(max_product[i-1] * nums[i], min_product[i-1] * nums[i], nums[i])
        # return max(max_product)
        
        # dp
        # O(n)
        # O(1)
        max_product = nums[0]
        min_product = nums[0]
        ans = nums[0]
        for i in range(1, len(nums)):
            max_product, min_product = max(max_product * nums[i], min_product * nums[i], nums[i]), min(max_product * nums[i], min_product * nums[i], nums[i])
            ans = max(ans, max_product)
        return ans
