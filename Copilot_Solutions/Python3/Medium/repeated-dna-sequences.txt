Synthesizing 10/10 solutions

=======

def findRepeatedDnaSequences(self, s: str) -> List[str]:
        d = {}
        for i in range(len(s)-9):
            if s[i:i+10] not in d:
                d[s[i:i+10]] = 1
            else:
                d[s[i:i+10]] += 1
        return [k for k,v in d.items() if v > 1]

=======

def findRepeatedDnaSequences(self, s: str) -> List[str]:
        seen = set()
        repeated = set()
        for i in range(len(s)-9):
            sub = s[i:i+10]
            if sub in seen:
                repeated.add(sub)
            else:
                seen.add(sub)
        return list(repeated)

=======

def findRepeatedDnaSequences(self, s: str) -> List[str]:
        d = collections.defaultdict(int)
        for i in range(len(s)-9):
            d[s[i:i+10]] += 1
        return [k for k, v in d.items() if v > 1]

=======

def findRepeatedDnaSequences(self, s: str) -> List[str]:
        seen = set()
        repeated = set()
        for i in range(len(s) - 9):
            sub = s[i:i+10]
            if sub in seen:
                repeated.add(sub)
            seen.add(sub)
        return list(repeated)

=======

def findRepeatedDnaSequences(self, s: str) -> List[str]:
        seen = set()
        repeated = set()
        for i in range(len(s) - 9):
            seq = s[i:i+10]
            if seq in seen:
                repeated.add(seq)
            seen.add(seq)
        return list(repeated)

=======

def findRepeatedDnaSequences(self, s: str) -> List[str]:
        res = []
        for i in range(len(s)-9):
            if s[i:i+10] in s[i+1:] and s[i:i+10] not in res:
                res.append(s[i:i+10])
        return res

=======

def findRepeatedDnaSequences(self, s: str) -> List[str]:
        seqs = set()
        repeated = set()
        for i in range(len(s)-9):
            seq = s[i:i+10]
            if seq in seqs:
                repeated.add(seq)
            else:
                seqs.add(seq)
        return list(repeated)

=======

def findRepeatedDnaSequences(self, s: str) -> List[str]:
        seen = set()
        out = set()
        for i in range(len(s)-10+1):
            if s[i:i+10] in seen:
                out.add(s[i:i+10])
            else:
                seen.add(s[i:i+10])
        return list(out)

=======

def findRepeatedDnaSequences(self, s: str) -> List[str]:
        # O(n) time, O(n) space
        seen = set()
        repeated = set()
        for i in range(len(s)-9):
            if s[i:i+10] in seen:
                repeated.add(s[i:i+10])
            else:
                seen.add(s[i:i+10])
        return list(repeated)

=======

def findRepeatedDnaSequences(self, s: str) -> List[str]:
        # print(s)
        res = []
        for i in range(len(s)-9):
            # print(i)
            if s[i:i+10] in s[i+1:]:
                res.append(s[i:i+10])
        return list(set(res))
