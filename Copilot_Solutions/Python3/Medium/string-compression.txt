Synthesizing 10/10 solutions

=======

def compress(self, chars: List[str]) -> int:
        i = 0
        while i < len(chars):
            c = chars[i]
            j = i + 1
            while j < len(chars) and chars[j] == c:
                j += 1
            if j - i > 1:
                l = str(j - i)
                chars[i + 1:i + 1] = l
                i += len(l) + 1
            else:
                i += 1
        return len(chars)

=======

def compress(self, chars: List[str]) -> int:
        i = 0
        while i < len(chars):
            c = chars[i]
            j = i + 1
            while j < len(chars) and chars[j] == c:
                j += 1
            if j - i > 1:
                for k, d in enumerate(str(j - i)):
                    chars[i + k + 1] = d
                del chars[i + k + 2:j]
            i = j
        return len(chars)

=======

def compress(self, chars: List[str]) -> int:
        i = 0
        j = 0
        while j < len(chars):
            k = j
            while k < len(chars) and chars[k] == chars[j]:
                k += 1
            chars[i] = chars[j]
            i += 1
            if k - j > 1:
                for c in str(k - j):
                    chars[i] = c
                    i += 1
            j = k
        return i

=======

def compress(self, chars: List[str]) -> int:
        i = 0
        j = 0
        while i < len(chars):
            c = chars[i]
            count = 0
            while i < len(chars) and chars[i] == c:
                count += 1
                i += 1
            chars[j] = c
            j += 1
            if count > 1:
                for ch in str(count):
                    chars[j] = ch
                    j += 1
        return j

=======

def compress(self, chars: List[str]) -> int:
        if len(chars) == 1:
            return 1
        i = 0
        while i < len(chars):
            j = i
            while j < len(chars) and chars[i] == chars[j]:
                j += 1
            if j - i > 1:
                for c in str(j - i):
                    chars.insert(i + 1, c)
                    i += 1
            i += 1
        return len(chars)

=======

def compress(self, chars: List[str]) -> int:
        i = 0
        j = 0
        while i < len(chars):
            count = 1
            while j < len(chars) - 1 and chars[j] == chars[j+1]:
                count += 1
                j += 1
            if count > 1:
                chars[i+1:i+1] = list(str(count))
                i += len(str(count))
            i += 1
            j += 1
        return len(chars)

=======

def compress(self, chars: List[str]) -> int:
        i, j = 0, 0
        while i < len(chars):
            c = chars[i]
            while j < len(chars) and chars[j] == c:
                j += 1
            if j - i > 1:
                for k in str(j - i):
                    chars[i + 1] = k
                    i += 1
            i += 1
        return i

=======

def compress(self, chars: List[str]) -> int:
        if len(chars) == 1:
            return 1
        i = 0
        while i < len(chars)-1:
            if chars[i] == chars[i+1]:
                count = 1
                j = i+1
                while j < len(chars) and chars[j] == chars[i]:
                    count += 1
                    j += 1
                chars[i+1:j] = str(count)
                i += 2
            else:
                i += 1
        return len(chars)

=======

def compress(self, chars: List[str]) -> int:
        if len(chars) == 1:
            return 1
        i = 0
        j = 0
        while i < len(chars):
            count = 1
            while j < len(chars) - 1 and chars[j] == chars[j + 1]:
                j += 1
                count += 1
            if count > 1:
                for c in str(count):
                    chars.insert(i + 1, c)
                    i += 1
                    j += 1
            i += 1
            j += 1
        return len(chars)

=======

def compress(self, chars: List[str]) -> int:
        n = len(chars)
        if n == 1:
            return 1
        i, j = 0, 1
        while i < n and j < n:
            if chars[i] != chars[j]:
                i += 1
                j += 1
            else:
                k = j
                while k < n and chars[k] == chars[i]:
                    k += 1
                if k - j > 1:
                    chars[i+1:k] = str(k-j)
                    n -= k - j - 1
                    i += 2
                    j = i + 1
                else:
                    i += 1
                    j += 1
        return n
