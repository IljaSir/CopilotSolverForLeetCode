Synthesizing 10/10 solutions (Duplicates hidden)

=======

def sumSubarrayMins(self, arr: List[int]) -> int:
        n = len(arr)
        left, right = [0] * n, [0] * n
        stack = []
        for i in range(n):
            count = 1
            while stack and stack[-1][0] > arr[i]:
                count += stack.pop()[1]
            stack.append([arr[i], count])
            left[i] = count
        stack = []
        for i in range(n - 1, -1, -1):
            count = 1
            while stack and stack[-1][0] >= arr[i]:
                count += stack.pop()[1]
            stack.append([arr[i], count])
            right[i] = count
        return sum(a * l * r for a, l, r in zip(arr, left, right)) % (10 ** 9 + 7)

=======

def sumSubarrayMins(self, arr: List[int]) -> int:
        pass

=======

def sumSubarrayMins(self, arr: List[int]) -> int:
        MOD = 10 ** 9 + 7
        n = len(arr)
        left = [0] * n
        right = [0] * n
        stack = []
        for i in range(n):
            count = 1
            while stack and stack[-1][0] >= arr[i]:
                count += stack.pop()[1]
            left[i] = count
            stack.append((arr[i], count))
        stack = []
        for i in range(n - 1, -1, -1):
            count = 1
            while stack and stack[-1][0] > arr[i]:
                count += stack.pop()[1]
            right[i] = count
            stack.append((arr[i], count))
        ans = 0
        for i in range(n):
            ans += arr[i] * left[i] * right[i]
            ans %= MOD
        return ans

=======

def sumSubarrayMins(self, arr: List[int]) -> int:
        stack = []
        res = 0
        for i, x in enumerate(arr):
            count = 1
            while stack and stack[-1][0] >= x:
                count += stack.pop()[1]
            stack.append((x, count))
            res += x * count
        return res % (10**9 + 7)

=======

def sumSubarrayMins(self, arr: List[int]) -> int:
        MOD = 10**9 + 7
        stack = []
        res = 0
        for i in range(len(arr)):
            count = 1
            while stack and stack[-1][0] > arr[i]:
                count += stack.pop()[1]
            stack.append((arr[i], count))
            res += arr[i] * count
            res %= MOD
        return res

=======

def sumSubarrayMins(self, arr: List[int]) -> int:
        # O(n^2)
        # res = 0
        # for i in range(len(arr)):
        #     for j in range(i, len(arr)):
        #         res += min(arr[i:j+1])
        # return res % (10**9 + 7)
        # O(n)
        res = 0
        stack = []
        for i, a in enumerate(arr):
            while stack and stack[-1][1] > a:
                stack.pop()
            if stack:
                res += a * (i - stack[-1][0]) + stack[-1][2]
            else:
                res += a * (i + 1)
            stack.append([i, a, res])
        return res % (10**9 + 7)

=======

def sumSubarrayMins(self, arr: List[int]) -> int:
        res = 0
        stack = []
        for i in range(len(arr)):
            while stack and arr[stack[-1]] > arr[i]:
                stack.pop()
            if not stack:
                left = i + 1
            else:
                left = i - stack[-1]
            stack.append(i)
            res += arr[i] * left
        stack = []
        for i in range(len(arr) - 1, -1, -1):
            while stack and arr[stack[-1]] >= arr[i]:
                stack.pop()
            if not stack:
                right = len(arr) - i
            else:
                right = stack[-1] - i
            stack.append(i)
            res += arr[i] * right
        return res % (10**9 + 7)

=======

def sumSubarrayMins(self, arr: List[int]) -> int:
        stack = []
        res = 0
        for i, num in enumerate(arr):
            while stack and stack[-1][0] > num:
                res += stack.pop()[0] * i - stack[-1][1]
            stack.append((num, i * stack[-1][0] if stack else 0))
        return (res + sum(i * num for i, num in enumerate(arr, 1))) % (10**9 + 7)
