Synthesizing 10/10 solutions (Duplicates hidden)

=======

def decodeAtIndex(self, s: str, k: int) -> str:
        size = 0
        for c in s:
            if c.isdigit():
                size *= int(c)
            else:
                size += 1
        for c in reversed(s):
            k %= size
            if k == 0 and c.isalpha():
                return c
            if c.isdigit():
                size //= int(c)
            else:
                size -= 1

=======

def decodeAtIndex(self, s: str, k: int) -> str:
        size = 0
        for c in s:
            if c.isdigit():
                size *= int(c)
            else:
                size += 1
        for c in reversed(s):
            k %= size
            if k == 0 and c.isalpha():
                return c
            if c.isdigit():
                size /= int(c)
            else:
                size -= 1

=======

def decodeAtIndex(self, s: str, k: int) -> str:
        size = 0
        for ch in s:
            if ch.isdigit():
                size *= int(ch)
            else:
                size += 1
        for ch in reversed(s):
            k %= size
            if k == 0 and ch.isalpha():
                return ch
            if ch.isdigit():
                size /= int(ch)
            else:
                size -= 1

=======

def decodeAtIndex(self, s: str, k: int) -> str:
        l = 0
        for c in s:
            if c.isdigit():
                l *= int(c)
            else:
                l += 1
        for c in reversed(s):
            k %= l
            if k == 0 and c.isalpha():
                return c
            if c.isdigit():
                l //= int(c)
            else:
                l -= 1

=======

def decodeAtIndex(self, s: str, k: int) -> str:
        n = len(s)
        size = 0
        for i in range(n):
            if s[i].isdigit():
                size *= int(s[i])
            else:
                size += 1
        for i in range(n-1, -1, -1):
            k %= size
            if k == 0 and s[i].isalpha():
                return s[i]
            if s[i].isdigit():
                size //= int(s[i])
            else:
                size -= 1

=======

def decodeAtIndex(self, s: str, k: int) -> str:
        size = 0
        for i in range(len(s)):
            if s[i].isdigit():
                size *= int(s[i])
            else:
                size += 1
        for i in range(len(s)-1, -1, -1):
            k %= size
            if k == 0 and s[i].isalpha():
                return s[i]
            if s[i].isdigit():
                size /= int(s[i])
            else:
                size -= 1

=======

def decodeAtIndex(self, s: str, k: int) -> str:
        n = len(s)
        size = 0
        for i in range(n):
            if s[i].isdigit():
                size *= int(s[i])
            else:
                size += 1
            if size >= k:
                break
        for j in range(i, -1, -1):
            if s[j].isdigit():
                size /= int(s[j])
                k %= size
            else:
                if k == size or k == 0:
                    return s[j]
                size -= 1

=======

def decodeAtIndex(self, s: str, k: int) -> str:
        
        pass
