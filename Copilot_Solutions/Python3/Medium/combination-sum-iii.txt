Synthesizing 10/10 solutions

=======

def combinationSum3(self, k: int, n: int) -> List[List[int]]:
        def dfs(k, n, start, path, res):
            if k == 0 and n == 0:
                res.append(path)
                return
            for i in range(start, 10):
                if i > n:
                    break
                dfs(k - 1, n - i, i + 1, path + [i], res)
        res = []
        dfs(k, n, 1, [], res)
        return res

=======

def combinationSum3(self, k: int, n: int) -> List[List[int]]:
        res = []
        def dfs(k, n, start, path, res):
            if k < 0 or n < 0:
                return
            if k == 0 and n == 0:
                res.append(path)
                return
            for i in range(start, 10):
                dfs(k-1, n-i, i+1, path+[i], res)
        dfs(k, n, 1, [], res)
        return res

=======

def combinationSum3(self, k: int, n: int) -> List[List[int]]:
        def dfs(start, k, n, path, res):
            if k == 0 and n == 0:
                res.append(path)
                return
            if k < 0 or n < 0:
                return
            for i in range(start, 10):
                dfs(i + 1, k - 1, n - i, path + [i], res)
        res = []
        dfs(1, k, n, [], res)
        return res

=======

def combinationSum3(self, k: int, n: int) -> List[List[int]]:
        res = []
        def dfs(start, k, n, path):
            if k == 0 and n == 0:
                res.append(path)
                return
            for i in range(start, 10):
                dfs(i+1, k-1, n-i, path+[i])
        dfs(1, k, n, [])
        return res

=======

def combinationSum3(self, k: int, n: int) -> List[List[int]]:
        def dfs(index, n, k, path, res):
            if n == 0 and k == 0:
                res.append(path)
                return
            if n < 0 or k < 0:
                return
            for i in range(index, 10):
                dfs(i+1, n-i, k-1, path+[i], res)
        res = []
        dfs(1, n, k, [], res)
        return res

=======

def combinationSum3(self, k: int, n: int) -> List[List[int]]:
        def dfs(nums, index, path, res):
            if len(path) == k and sum(path) == n:
                res.append(path)
                return
            for i in range(index, len(nums)):
                dfs(nums, i + 1, path + [nums[i]], res)
        
        res = []
        dfs(list(range(1, 10)), 0, [], res)
        return res

=======

def combinationSum3(self, k: int, n: int) -> List[List[int]]:
        result = []
        def dfs(nums, path, k, n):
            if k == 0 and n == 0:
                result.append(path)
                return
            for i in range(len(nums)):
                if nums[i] > n:
                    break
                dfs(nums[i+1:], path+[nums[i]], k-1, n-nums[i])
        dfs(list(range(1, 10)), [], k, n)
        return result

=======

def combinationSum3(self, k: int, n: int) -> List[List[int]]:
        res = []
        def dfs(i, k, n, path):
            if k == 0 and n == 0:
                res.append(path)
                return
            if i > 9 or k < 0 or n < 0:
                return
            dfs(i+1, k-1, n-i, path+[i])
            dfs(i+1, k, n, path)
        dfs(1, k, n, [])
        return res

=======

def combinationSum3(self, k: int, n: int) -> List[List[int]]:
        def dfs(idx, target, k, path, res):
            if target == 0 and k == 0:
                res.append(path)
                return
            for i in range(idx, 10):
                if i > target:
                    break
                dfs(i+1, target-i, k-1, path+[i], res)
        res = []
        dfs(1, n, k, [], res)
        return res

=======

def combinationSum3(self, k: int, n: int) -> List[List[int]]:
        def backtrack(start, k, n, tmp, res):
            if k == 0 and n == 0:
                res.append(tmp[:])
                return
            if n < 0 or k < 0:
                return
            for i in range(start, 10):
                tmp.append(i)
                backtrack(i + 1, k - 1, n - i, tmp, res)
                tmp.pop()
        res = []
        backtrack(1, k, n, [], res)
        return res
