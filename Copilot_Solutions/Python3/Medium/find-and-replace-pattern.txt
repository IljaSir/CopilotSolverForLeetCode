Synthesizing 10/10 solutions

=======

def findAndReplacePattern(self, words: List[str], pattern: str) -> List[str]:
        def match(word):
            p = {}
            for x, y in zip(word, pattern):
                if x not in p:
                    p[x] = y
                elif p[x] != y:
                    return False
            return len(set(p.values())) == len(p.values())
        return [word for word in words if match(word)]

=======

def findAndReplacePattern(self, words: List[str], pattern: str) -> List[str]:
        def match(word):
            m1 = {}
            m2 = {}
            for w, p in zip(word, pattern):
                if w not in m1:
                    m1[w] = p
                if p not in m2:
                    m2[p] = w
                if m1[w] != p or m2[p] != w:
                    return False
            return True
        return [w for w in words if match(w)]

=======

def findAndReplacePattern(self, words: List[str], pattern: str) -> List[str]:
        def match(word):
            d = {}
            for c1, c2 in zip(word, pattern):
                if c1 in d:
                    if d[c1] != c2:
                        return False
                else:
                    d[c1] = c2
            return len(set(d.values())) == len(d.values())
        return [word for word in words if match(word)]

=======

def findAndReplacePattern(self, words: List[str], pattern: str) -> List[str]:
        def match(word):
            d = {}
            for a, b in zip(pattern, word):
                if a in d:
                    if d[a] != b:
                        return False
                else:
                    d[a] = b
            return len(set(d.values())) == len(d.values())
        return list(filter(match, words))

=======

def findAndReplacePattern(self, words: List[str], pattern: str) -> List[str]:
        def match(w):
            m = {}
            for i in range(len(w)):
                if w[i] in m:
                    if m[w[i]] != pattern[i]:
                        return False
                else:
                    m[w[i]] = pattern[i]
            return len(set(m.values())) == len(set(m.keys()))
        return [w for w in words if match(w)]

=======

def findAndReplacePattern(self, words: List[str], pattern: str) -> List[str]:
        def is_match(word):
            d1 = {}
            d2 = {}
            for i in range(len(word)):
                if word[i] not in d1:
                    d1[word[i]] = pattern[i]
                if pattern[i] not in d2:
                    d2[pattern[i]] = word[i]
                if d1[word[i]] != pattern[i] or d2[pattern[i]] != word[i]:
                    return False
            return True
        return [word for word in words if is_match(word)]

=======

def findAndReplacePattern(self, words: List[str], pattern: str) -> List[str]:
        res = []
        for word in words:
            if len(word) != len(pattern):
                continue
            d1 = {}
            d2 = {}
            flag = True
            for i in range(len(pattern)):
                if pattern[i] not in d1:
                    d1[pattern[i]] = word[i]
                if word[i] not in d2:
                    d2[word[i]] = pattern[i]
                if d1[pattern[i]] != word[i] or d2[word[i]] != pattern[i]:
                    flag = False
                    break
            if flag:
                res.append(word)
        return res

=======

def findAndReplacePattern(self, words: List[str], pattern: str) -> List[str]:
        pattern = self.get_pattern(pattern)
        res = []
        for word in words:
            if pattern == self.get_pattern(word):
                res.append(word)
        return res

=======

def findAndReplacePattern(self, words: List[str], pattern: str) -> List[str]:
        def match(word):
            if len(word) != len(pattern):
                return False
            m = {}
            for i, c in enumerate(word):
                if c not in m:
                    m[c] = pattern[i]
                elif m[c] != pattern[i]:
                    return False
            return len(set(m.values())) == len(set(m.keys()))
        return [word for word in words if match(word)]

=======

def findAndReplacePattern(self, words: List[str], pattern: str) -> List[str]:
        def find_match(word):
            p = {}
            w = {}
            for i in range(len(word)):
                if word[i] in w:
                    if w[word[i]] != pattern[i]:
                        return False
                else:
                    w[word[i]] = pattern[i]
                if pattern[i] in p:
                    if p[pattern[i]] != word[i]:
                        return False
                else:
                    p[pattern[i]] = word[i]
            return True
        return [word for word in words if find_match(word)]
