Synthesizing 10/10 solutions (Duplicates hidden)

=======

def permute(self, nums: List[int]) -> List[List[int]]:
        def backtrack(first = 0):
            # if all integers are used up
            if first == n:  
                output.append(nums[:])
            for i in range(first, n):
                # place i-th integer first 
                # in the current permutation
                nums[first], nums[i] = nums[i], nums[first]
                # use next integers to complete the permutations
                backtrack(first + 1)
                # backtrack
                nums[first], nums[i] = nums[i], nums[first]
        
        n = len(nums)
        output = []
        backtrack()
        return output

=======

def permute(self, nums: List[int]) -> List[List[int]]:
        if len(nums) == 1:
            return [nums]
        res = []
        for i in range(len(nums)):
            for j in self.permute(nums[:i] + nums[i+1:]):
                res.append([nums[i]] + j)
        return res

=======

def permute(self, nums: List[int]) -> List[List[int]]:
        if len(nums) == 1:
            return [nums]
        result = []
        for i in range(len(nums)):
            for j in self.permute(nums[:i] + nums[i+1:]):
                result.append([nums[i]] + j)
        return result

=======

def permute(self, nums: List[int]) -> List[List[int]]:
        if not nums:
            return []
        if len(nums) == 1:
            return [nums]
        res = []
        for i in range(len(nums)):
            for j in self.permute(nums[:i] + nums[i+1:]):
                res.append([nums[i]] + j)
        return res

=======

def permute(self, nums: List[int]) -> List[List[int]]:
        if len(nums) == 0:
            return []
        if len(nums) == 1:
            return [nums]
        res = []
        for i in range(len(nums)):
            for j in self.permute(nums[:i] + nums[i+1:]):
                res.append([nums[i]] + j)
        return res

=======

def permute(self, nums: List[int]) -> List[List[int]]:
        if len(nums) <= 1:
            return [nums]
        result = []
        for i, num in enumerate(nums):
            for perm in self.permute(nums[:i] + nums[i+1:]):
                result.append([num] + perm)
        return result

=======

def permute(self, nums: List[int]) -> List[List[int]]:
        if len(nums) <= 1:
            return [nums]
        else:
            return [ [nums[i]] + p for i in range(len(nums)) for p in self.permute(nums[:i] + nums[i+1:]) ]

=======

def permute(self, nums: List[int]) -> List[List[int]]:
        if len(nums) == 1:
            return [nums]
        else:
            all_permutations = []
            for i in range(len(nums)):
                permutations = self.permute(nums[:i] + nums[i+1:])
                for permutation in permutations:
                    all_permutations.append([nums[i]] + permutation)
            return all_permutations

=======

def permute(self, nums: List[int]) -> List[List[int]]:
        # https://www.geeksforgeeks.org/write-a-c-program-to-print-all-permutations-of-a-given-string/
        # https://www.geeksforgeeks.org/write-a-c-program-to-print-all-permutations-of-a-given-string/
        def permuteUtil(a, l, r):
            if l == r:
                ret.append(a[:])
            else:
                for i in range(l, r + 1):
                    a[l], a[i] = a[i], a[l]
                    permuteUtil(a, l+1, r)
                    a[l], a[i] = a[i], a[l]
