Synthesizing 8/10 solutions

=======

def numMatchingSubseq(self, s: str, words: List[str]) -> int:
        ans = 0
        for word in words:
            i = 0
            for c in s:
                if i < len(word) and c == word[i]:
                    i += 1
            if i == len(word):
                ans += 1
        return ans

=======

def numMatchingSubseq(self, s: str, words: List[str]) -> int:
        res = 0
        for word in words:
            i = 0
            for c in s:
                if i < len(word) and word[i] == c:
                    i += 1
            if i == len(word):
                res += 1
        return res

=======

def numMatchingSubseq(self, s: str, words: List[str]) -> int:
        d = collections.defaultdict(list)
        for i, c in enumerate(s):
            d[c].append(i)
        res = 0
        for w in words:
            i = 0
            for c in w:
                if c not in d:
                    break
                if i == len(d[c]):
                    break
                i = bisect.bisect_right(d[c], i)
            else:
                res += 1
        return res

=======

def numMatchingSubseq(self, s: str, words: List[str]) -> int:
        def isSubseq(s, t):
            i = 0
            for c in t:
                if i < len(s) and s[i] == c:
                    i += 1
            return i == len(s)
        return sum(isSubseq(w, s) for w in words)

=======

def numMatchingSubseq(self, s: str, words: List[str]) -> int:
        def isSubseq(s, t):
            i = 0
            for c in t:
                if i < len(s) and c == s[i]:
                    i += 1
            return i == len(s)
        return sum(isSubseq(w, s) for w in words)

=======

def numMatchingSubseq(self, s: str, words: List[str]) -> int:
        res = 0
        for word in words:
            if self.is_subsequence(s, word):
                res += 1
        return res

=======

def numMatchingSubseq(self, s: str, words: List[str]) -> int:
        def is_subsequence(s, t):
            it = iter(t)
            return all(c in it for c in s)
        
        count = 0
        for w in words:
            if is_subsequence(w, s):
                count += 1
        return count

=======

def numMatchingSubseq(self, s: str, words: List[str]) -> int:
        def isSubseq(s, t):
            i = 0
            for c in s:
                i = t.find(c, i) + 1
                if i == 0:
                    return False
            return True
        return sum(isSubseq(w, s) for w in words)
