Synthesizing 10/10 solutions (Duplicates hidden)

=======

def superPow(self, a: int, b: List[int]) -> int:
        if not b:
            return 1
        last = b.pop()
        part1 = self.myPow(a, last)
        part2 = self.myPow(self.superPow(a, b), 10)
        return (part1 * part2) % 1337

=======

def superPow(self, a: int, b: List[int]) -> int:
        if not b: return 1
        last = b.pop()
        return pow(self.superPow(a, b), 10, 1337) * pow(a, last, 1337) % 1337

=======

def superPow(self, a: int, b: List[int]) -> int:
        a %= 1337
        res = 1
        for i in b:
            res = self.pow(res, 10) * self.pow(a, i) % 1337
        return res

=======

def superPow(self, a: int, b: List[int]) -> int:
        if len(b) == 0:
            return 1
        last = b.pop()
        part1 = self.superPow(a, b)
        part2 = self.myPow(a, last)
        return (part1 * part2) % 1337

=======

def superPow(self, a: int, b: List[int]) -> int:
        def pow(a, b):
            if b == 0:
                return 1
            if b == 1:
                return a
            if b % 2 == 0:
                return pow(a * a % 1337, b // 2)
            else:
                return pow(a * a % 1337, b // 2) * a % 1337
        return pow(a, int("".join(map(str, b))))

=======

def superPow(self, a: int, b: List[int]) -> int:
        def powmod(a, b):
            if b == 0:
                return 1
            elif b == 1:
                return a % 1337
            elif b % 2 == 0:
                return powmod(a * a % 1337, b // 2)
            else:
                return powmod(a * a % 1337, b // 2) * a % 1337
        if not b:
            return 1
        return powmod(a, b.pop()) * powmod(10, len(b)) * self.superPow(powmod(a, 10), b) % 1337

=======

def superPow(self, a: int, b: List[int]) -> int:
        def pow(a, b):
            if b == 0:
                return 1
            if b == 1:
                return a
            if b % 2 == 0:
                return pow(a, b//2) ** 2
            return pow(a, b//2) ** 2 * a
        return pow(a, int(''.join(map(str, b)))) % 1337

=======

def superPow(self, a: int, b: List[int]) -> int:
        # a^b % 1337
        # a^b % 1337 = (a % 1337)^b % 1337
        # a^b % 1337 = ((a % 1337) * (a % 1337))^(b/2) % 1337
        # a^b % 1337 = ((a % 1337) * (a % 1337))^(b/2) * (a % 1337)^(b%2) % 1337
        if len(b) == 1 and b[0] == 0:
            return 1
        if len(b) == 1 and b[0] == 1:
            return a % 1337
        last = b.pop()
        return self.pow(self.superPow(a, b), 10) * self.pow(a, last) % 1337
