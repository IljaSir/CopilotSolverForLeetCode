Synthesizing 10/10 solutions (Duplicates hidden)

=======

def pacificAtlantic(self, heights: List[List[int]]) -> List[List[int]]:
        m, n = len(heights), len(heights[0])
        pacific = set()
        atlantic = set()
        for i in range(m):
            pacific.add((i, 0))
            atlantic.add((i, n - 1))
        for j in range(n):
            pacific.add((0, j))
            atlantic.add((m - 1, j))
        def bfs(sea):
            while sea:
                i, j = sea.pop()
                for x, y in ((i + 1, j), (i - 1, j), (i, j + 1), (i, j - 1)):
                    if 0 <= x < m and 0 <= y < n and (x, y) not in visited and heights[x][y] >= heights[i][j]:
                        visited.add((x, y))
                        sea.add((x, y))
        visited = set()
        bfs(pacific)
        pacific = visited
        visited = set()
        bfs(atlantic)
        atlantic = visited
        return list(pacific & atlantic)

=======

def pacificAtlantic(self, heights: List[List[int]]) -> List[List[int]]:
        if not heights or not heights[0]:
            return []
        m, n = len(heights), len(heights[0])
        pacific = [[False] * n for _ in range(m)]
        atlantic = [[False] * n for _ in range(m)]
        for i in range(m):
            self.dfs(heights, pacific, i, 0, heights[i][0])
            self.dfs(heights, atlantic, i, n - 1, heights[i][n - 1])
        for j in range(n):
            self.dfs(heights, pacific, 0, j, heights[0][j])
            self.dfs(heights, atlantic, m - 1, j, heights[m - 1][j])
        res = []
        for i in range(m):
            for j in range(n):
                if pacific[i][j] and atlantic[i][j]:
                    res.append([i, j])
        return res

=======

def pacificAtlantic(self, heights: List[List[int]]) -> List[List[int]]:
        m, n = len(heights), len(heights[0])
        pacific = [[0] * n for _ in range(m)]
        atlantic = [[0] * n for _ in range(m)]
        for i in range(m):
            self.dfs(heights, pacific, i, 0, heights[i][0])
            self.dfs(heights, atlantic, i, n - 1, heights[i][n - 1])
        for j in range(n):
            self.dfs(heights, pacific, 0, j, heights[0][j])
            self.dfs(heights, atlantic, m - 1, j, heights[m - 1][j])
        res = []
        for i in range(m):
            for j in range(n):
                if pacific[i][j] and atlantic[i][j]:
                    res.append([i, j])
        return res

=======

def pacificAtlantic(self, heights: List[List[int]]) -> List[List[int]]:
        if not heights:
            return []
        m, n = len(heights), len(heights[0])
        pacific = set()
        atlantic = set()
        for i in range(m):
            pacific.add((i, 0))
            atlantic.add((i, n-1))
        for i in range(n):
            pacific.add((0, i))
            atlantic.add((m-1, i))
        def dfs(i, j, visited):
            visited.add((i, j))
            for x, y in ((i+1, j), (i-1, j), (i, j+1), (i, j-1)):
                if 0 <= x < m and 0 <= y < n and (x, y) not in visited and heights[x][y] >= heights[i][j]:
                    dfs(x, y, visited)
        dfs(0, 0, pacific)
        dfs(m-1, n-1, atlantic)
        return pacific & atlantic

=======

        m, n = len(heights), len(heights[0])
        pacific = [[False] * n for _ in range(m)]
        atlantic = [[False] * n for _ in range(m)]
        queue = collections.deque()
        for i in range(m):
            queue.append((i, 0))
            queue.append((i, n - 1))
            pacific[i][0] = True
            pacific[i][n - 1] = True
        for j in range(n):
            queue.append((0, j))
            queue.append((m - 1, j))
            pacific[0][j] = True
            pacific[m - 1][j] = True
        while queue:
            i, j = queue.popleft()
            for di, dj in [(0, 1), (0, -1), (1, 0), (-1, 0)]:
                ni, nj = i + di, j + dj
                if 0 <= ni < m and 0 <= nj < n and not pacific[ni][nj] and heights[ni][nj] >= heights[i][j]:
                    queue.append((ni, nj))
                    pacific[ni][nj] = True
        for i in range(m):
            queue.append((i, 0))
            queue.append((i, n - 1))
            atlantic[i][0] = True
            atlantic[i][n - 1] = True
        for j in range(n):
            queue.append((0, j))
            queue.append((m - 1, j))
            atlantic[0][j] = True
            atlantic[m - 1][j] = True
        while queue:
            i, j = queue.popleft()
            for di, dj in [(0, 1), (0, -1), (1, 0), (-1, 0)]:
                ni, nj = i + di, j + dj
                if 0 <= ni < m and 0 <= nj < n and not atlantic[ni][nj] and heights[ni][nj] >= heights[i][j]:
                    queue.append((ni, nj))
                    atlantic[ni][nj] = True
        ans = []
        for i in range(m):
            for j in range(n):
                if pacific

=======

def pacificAtlantic(self, heights: List[List[int]]) -> List[List[int]]:
        
        pass
