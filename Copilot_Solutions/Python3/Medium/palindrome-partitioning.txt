Synthesizing 10/10 solutions (Duplicates hidden)

=======

def partition(self, s: str) -> List[List[str]]:
        def isPalindrome(s):
            return s == s[::-1]
        def dfs(s, path, res):
            if not s:
                res.append(path)
                return
            for i in range(1, len(s)+1):
                if isPalindrome(s[:i]):
                    dfs(s[i:], path+[s[:i]], res)
        res = []
        dfs(s, [], res)
        return res

=======

def partition(self, s: str) -> List[List[str]]:
        def is_palindrome(s):
            return s == s[::-1]
        def dfs(s, path):
            if not s:
                res.append(path)
                return
            for i in range(1, len(s)+1):
                if is_palindrome(s[:i]):
                    dfs(s[i:], path+[s[:i]])
        res = []
        dfs(s, [])
        return res

=======

def partition(self, s: str) -> List[List[str]]:
        def is_palindrome(s):
            return s == s[::-1]
        
        def dfs(s, path, res):
            if not s:
                res.append(path)
                return
            
            for i in range(1, len(s)+1):
                if is_palindrome(s[:i]):
                    dfs(s[i:], path+[s[:i]], res)
        
        res = []
        dfs(s, [], res)
        return res

=======

def partition(self, s: str) -> List[List[str]]:
        self.res = []
        self.dfs(s, [])
        return self.res

=======

def partition(self, s: str) -> List[List[str]]:
        def is_palindrome(s):
            return s == s[::-1]
        
        def backtrack(s, path):
            if not s:
                res.append(path)
                return
            for i in range(1, len(s) + 1):
                if is_palindrome(s[:i]):
                    backtrack(s[i:], path + [s[:i]])
        
        res = []
        backtrack(s, [])
        return res

=======

def partition(self, s: str) -> List[List[str]]:
        def is_pal(s):
            return s == s[::-1]
        def dfs(s, path, res):
            if not s:
                res.append(path)
                return
            for i in range(1, len(s) + 1):
                if is_pal(s[:i]):
                    dfs(s[i:], path + [s[:i]], res)
        res = []
        dfs(s, [], res)
        return res

=======

def partition(self, s: str) -> List[List[str]]:
        def is_palindrome(s):
            return s == s[::-1]
        
        def dfs(i, path):
            if i == len(s):
                res.append(path)
                return
            for j in range(i, len(s)):
                if is_palindrome(s[i:j+1]):
                    dfs(j+1, path+[s[i:j+1]])
        
        res = []
        dfs(0, [])
        return res
