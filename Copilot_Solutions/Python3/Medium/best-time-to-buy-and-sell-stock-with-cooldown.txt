Synthesizing 10/10 solutions

=======

def maxProfit(self, prices: List[int]) -> int:
        if not prices:
            return 0
        n = len(prices)
        dp = [[0] * 2 for _ in range(n)]
        dp[0][0] = 0
        dp[0][1] = -prices[0]
        dp[1][0] = max(dp[0][0], dp[0][1] + prices[1])
        dp[1][1] = max(dp[0][1], dp[0][0] - prices[1])
        for i in range(2, n):
            dp[i][0] = max(dp[i - 1][0], dp[i - 1][1] + prices[i])
            dp[i][1] = max(dp[i - 1][1], dp[i - 2][0] - prices[i])
        return dp[-1][0]

=======

def maxProfit(self, prices: List[int]) -> int:
        n = len(prices)
        if n < 2:
            return 0
        dp = [[0] * 2 for _ in range(n)]
        dp[0][0] = 0
        dp[0][1] = -prices[0]
        dp[1][0] = max(dp[0][0], dp[0][1] + prices[1])
        dp[1][1] = max(dp[0][1], dp[0][0] - prices[1])
        for i in range(2, n):
            dp[i][0] = max(dp[i - 1][0], dp[i - 1][1] + prices[i])
            dp[i][1] = max(dp[i - 1][1], dp[i - 2][0] - prices[i])
        return dp[n - 1][0]

=======

def maxProfit(self, prices: List[int]) -> int:
        n = len(prices)
        buy = [0]*n
        sell = [0]*n
        buy[0] = -prices[0]
        for i in range(1,n):
            buy[i] = max(buy[i-1], sell[i-2]-prices[i])
            sell[i] = max(sell[i-1], buy[i-1]+prices[i])
        return sell[-1]

=======

def maxProfit(self, prices: List[int]) -> int:
        if not prices:
            return 0
        n = len(prices)
        dp = [[0, 0] for _ in range(n)]
        dp[0][0] = 0
        dp[0][1] = -prices[0]
        for i in range(1, n):
            if i == 1:
                dp[i][0] = max(dp[i-1][0], dp[i-1][1] + prices[i])
            else:
                dp[i][0] = max(dp[i-1][0], dp[i-1][1] + prices[i])
            dp[i][1] = max(dp[i-1][1], dp[i-2][0] - prices[i])
        return dp[n-1][0]

=======

def maxProfit(self, prices: List[int]) -> int:
        if not prices:
            return 0
        n = len(prices)
        dp = [[0, 0, 0] for _ in range(n)]
        dp[0][1] = -prices[0]
        for i in range(1, n):
            dp[i][0] = max(dp[i-1][0], dp[i-1][2])
            dp[i][1] = max(dp[i-1][1], dp[i-1][0] - prices[i])
            dp[i][2] = dp[i-1][1] + prices[i]
        return max(dp[-1][0], dp[-1][2])

=======

def maxProfit(self, prices: List[int]) -> int:
        # buy[i] = max(sell[i-2]-price, buy[i-1])
        # sell[i] = max(buy[i-1]+price, sell[i-1])
        n = len(prices)
        if n <= 1:
            return 0
        buy = [0] * n
        sell = [0] * n
        buy[0] = -prices[0]
        buy[1] = max(-prices[0], -prices[1])
        sell[1] = max(buy[0] + prices[1], sell[0])
        for i in range(2, n):
            buy[i] = max(sell[i-2]-prices[i], buy[i-1])
            sell[i] = max(buy[i-1]+prices[i], sell[i-1])
        return sell[-1]

=======

def maxProfit(self, prices: List[int]) -> int:
        # dp[i][0] = max(dp[i-1][0], dp[i-1][2])
        # dp[i][1] = max(dp[i-1][1], dp[i-1][0] - prices[i])
        # dp[i][2] = dp[i-1][1] + prices[i]
        n = len(prices)
        dp = [[0] * 3 for _ in range(n)]
        dp[0][0] = 0
        dp[0][1] = -prices[0]
        dp[0][2] = 0
        for i in range(1, n):
            dp[i][0] = max(dp[i-1][0], dp[i-1][2])
            dp[i][1] = max(dp[i-1][1], dp[i-1][0] - prices[i])
            dp[i][2] = dp[i-1][1] + prices[i]
        return max(dp[n-1][0], dp[n-1][2])

=======

def maxProfit(self, prices: List[int]) -> int:
        # buy[i] = max(buy[i-1], sell[i-2] - prices[i])
        # sell[i] = max(sell[i-1], buy[i-1] + prices[i])
        if not prices:
            return 0
        buy = [0] * len(prices)
        sell = [0] * len(prices)
        buy[0] = -prices[0]
        sell[0] = 0
        for i in range(1, len(prices)):
            if i == 1:
                buy[i] = max(buy[i-1], -prices[i])
            else:
                buy[i] = max(buy[i-1], sell[i-2] - prices[i])
            sell[i] = max(sell[i-1], buy[i-1] + prices[i])
        return sell[-1]

=======

def maxProfit(self, prices: List[int]) -> int:
        if not prices:
            return 0
        # dp[i][0] = max(dp[i-1][0], dp[i-1][1] + prices[i])
        # dp[i][1] = max(dp[i-1][1], dp[i-2][0] - prices[i])
        n = len(prices)
        dp = [[0] * 2 for _ in range(n)]
        dp[0][0] = 0
        dp[0][1] = -prices[0]
        dp[1][0] = max(dp[0][0], dp[0][1] + prices[1])
        dp[1][1] = max(dp[0][1], -prices[1])
        for i in range(2, n):
            dp[i][0] = max(dp[i-1][0], dp[i-1][1] + prices[i])
            dp[i][1] = max(dp[i-1][1], dp[i-2][0] - prices[i])
        return dp[n-1][0]

=======

def maxProfit(self, prices: List[int]) -> int:
        if len(prices) < 2:
            return 0
        buy = [0] * len(prices)
        sell = [0] * len(prices)
        for i in range(len(prices)):
            if i == 0:
                buy[i] = -prices[i]
                sell[i] = 0
            elif i == 1:
                buy[i] = max(buy[i-1], -prices[i])
                sell[i] = max(sell[i-1], prices[i] + buy[i-1])
            else:
                buy[i] = max(buy[i-1], sell[i-2] - prices[i])
                sell[i] = max(sell[i-1], prices[i] + buy[i-1])
        return sell[-1]
