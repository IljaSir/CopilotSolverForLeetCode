Synthesizing 10/10 solutions (Duplicates hidden)

=======

def isNStraightHand(self, hand: List[int], groupSize: int) -> bool:
        if len(hand) % groupSize != 0:
            return False
        hand.sort()
        while hand:
            start = hand[0]
            for i in range(groupSize):
                if start + i not in hand:
                    return False
                hand.remove(start + i)
        return True

=======

def isNStraightHand(self, hand: List[int], groupSize: int) -> bool:
        if len(hand) % groupSize != 0:
            return False
        hand.sort()
        while hand:
            first = hand.pop(0)
            for i in range(1, groupSize):
                if first + i not in hand:
                    return False
                hand.remove(first + i)
        return True

=======

def isNStraightHand(self, hand: List[int], groupSize: int) -> bool:
        if len(hand) % groupSize != 0:
            return False
        hand.sort()
        while hand:
            first = hand.pop(0)
            for i in range(1, groupSize):
                try:
                    hand.remove(first + i)
                except ValueError:
                    return False
        return True

=======

def isNStraightHand(self, hand: List[int], groupSize: int) -> bool:
        if len(hand) % groupSize != 0:
            return False
        hand = sorted(hand)
        while hand:
            first = hand[0]
            for i in range(groupSize):
                if first + i not in hand:
                    return False
                hand.remove(first + i)
        return True

=======

def isNStraightHand(self, hand: List[int], groupSize: int) -> bool:
        if len(hand) % groupSize != 0:
            return False
        hand.sort()
        while hand:
            first = hand.pop(0)
            for i in range(groupSize - 1):
                if first + i + 1 not in hand:
                    return False
                hand.remove(first + i + 1)
        return True

=======

def isNStraightHand(self, hand: List[int], groupSize: int) -> bool:
        if len(hand) % groupSize != 0:
            return False
        if groupSize == 1:
            return True
        hand.sort()
        d = {}
        for i in hand:
            if i in d:
                d[i] += 1
            else:
                d[i] = 1
        for i in hand:
            if d[i] > 0:
                for j in range(i, i + groupSize):
                    if j not in d or d[j] == 0:
                        return False
                    d[j] -= 1
        return True

=======

def isNStraightHand(self, hand: List[int], groupSize: int) -> bool:
        
        if len(hand) % groupSize != 0:
            return False
        
        hand.sort()
        groups = {}
        for card in hand:
            if card not in groups:
                groups[card] = 1
            else:
                groups[card] += 1
        
        for card in hand:
            if groups[card] > 0:
                for i in range(groupSize):
                    if card + i not in groups or groups[card + i] == 0:
                        return False
                    else:
                        groups[card + i] -= 1
        return True

=======

def isNStraightHand(self, hand: List[int], groupSize: int) -> bool:
        if len(hand) % groupSize != 0:
            return False
        hand.sort()
        while len(hand) > 0:
            if hand[0] == hand[groupSize-1]:
                hand = hand[groupSize:]
            else:
                return False
        return True

=======

def isNStraightHand(self, hand: List[int], groupSize: int) -> bool:
        hand.sort()
        if len(hand) % groupSize != 0:
            return False
        while hand:
            i = 1
            while i < groupSize:
                if hand[i] == hand[0] + i:
                    i += 1
                else:
                    return False
            hand = hand[groupSize:]
        return True
