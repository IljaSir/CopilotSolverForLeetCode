Synthesizing 10/10 solutions (Duplicates hidden)

=======

def nthSuperUglyNumber(self, n: int, primes: List[int]) -> int:
        ugly = [1] * n
        p = [0] * len(primes)
        for i in range(1, n):
            ugly[i] = min(ugly[p[j]] * primes[j] for j in range(len(primes)))
            for j in range(len(primes)):
                if ugly[i] == ugly[p[j]] * primes[j]:
                    p[j] += 1
        return ugly[-1]

=======

def nthSuperUglyNumber(self, n: int, primes: List[int]) -> int:
        ugly = [1]
        idx = [0] * len(primes)
        while len(ugly) < n:
            ugly.append(min(ugly[idx[i]] * primes[i] for i in range(len(primes))))
            for i in range(len(primes)):
                if ugly[-1] == ugly[idx[i]] * primes[i]:
                    idx[i] += 1
        return ugly[-1]

=======

def nthSuperUglyNumber(self, n: int, primes: List[int]) -> int:
        dp = [1] * n
        idx = [0] * len(primes)
        for i in range(1, n):
            dp[i] = min([primes[j] * dp[idx[j]] for j in range(len(primes))])
            for j in range(len(primes)):
                if dp[i] == primes[j] * dp[idx[j]]:
                    idx[j] += 1
        return dp[-1]

=======

def nthSuperUglyNumber(self, n: int, primes: List[int]) -> int:
        dp = [1]
        idx = [0] * len(primes)
        while len(dp) < n:
            dp.append(min(dp[idx[i]] * primes[i] for i in range(len(primes))))
            for i in range(len(primes)):
                if dp[-1] == dp[idx[i]] * primes[i]:
                    idx[i] += 1
        return dp[-1]

=======

def nthSuperUglyNumber(self, n: int, primes: List[int]) -> int:
        ugly = [1]
        idx = [0] * len(primes)
        while n > 1:
            ugly.append(min(ugly[idx[i]] * primes[i] for i in range(len(primes))))
            for i in range(len(primes)):
                if ugly[-1] == ugly[idx[i]] * primes[i]:
                    idx[i] += 1
            n -= 1
        return ugly[-1]

=======

def nthSuperUglyNumber(self, n: int, primes: List[int]) -> int:
        dp = [1]
        idx = [0] * len(primes)
        for i in range(1, n):
            dp.append(min(dp[idx[j]] * primes[j] for j in range(len(primes))))
            for j in range(len(primes)):
                if dp[i] == dp[idx[j]] * primes[j]:
                    idx[j] += 1
        return dp[-1]

=======

def nthSuperUglyNumber(self, n: int, primes: List[int]) -> int:
        dp = [1]
        idx = [0] * len(primes)
        while len(dp) < n:
            dp.append(min([dp[idx[i]] * primes[i] for i in range(len(primes))]))
            for i in range(len(primes)):
                if dp[-1] == dp[idx[i]] * primes[i]:
                    idx[i] += 1
        return dp[-1]

=======

def nthSuperUglyNumber(self, n: int, primes: List[int]) -> int:
        dp = [1]
        pointers = [0]*len(primes)
        while len(dp) < n:
            next_ugly = min(dp[pointers[i]]*primes[i] for i in range(len(primes)))
            dp.append(next_ugly)
            for i in range(len(primes)):
                if next_ugly == dp[pointers[i]]*primes[i]:
                    pointers[i] += 1
        return dp[-1]

=======

def nthSuperUglyNumber(self, n: int, primes: List[int]) -> int:
        n -= 1
        if n == 0:
            return 1
        l = len(primes)
        ugly = [1]
        idx = [0] * l
        while n:
            n -= 1
            ugly.append(min([primes[i] * ugly[idx[i]] for i in range(l)]))
            for i in range(l):
                if ugly[-1] == primes[i] * ugly[idx[i]]:
                    idx[i] += 1
        return ugly[-1]
