Synthesizing 8/10 solutions

=======

def majorityElement(self, nums: List[int]) -> List[int]:
        count1, count2, candidate1, candidate2 = 0, 0, 0, 1
        for num in nums:
            if num == candidate1:
                count1 += 1
            elif num == candidate2:
                count2 += 1
            elif count1 == 0:
                candidate1, count1 = num, 1
            elif count2 == 0:
                candidate2, count2 = num, 1
            else:
                count1, count2 = count1 - 1, count2 - 1
        return [n for n in (candidate1, candidate2) if nums.count(n) > len(nums) // 3]

=======

def majorityElement(self, nums: List[int]) -> List[int]:
        n = len(nums)
        if n == 1:
            return nums
        elif n == 2:
            if nums[0] == nums[1]:
                return [nums[0]]
            else:
                return nums
        else:
            nums.sort()
            i = 0
            count = 1
            res = []
            while i < n - 1:
                if nums[i] == nums[i+1]:
                    count += 1
                    if count > n/3 and nums[i] not in res:
                        res.append(nums[i])
                else:
                    count = 1
                i += 1
            return res

=======

def majorityElement(self, nums: List[int]) -> List[int]:
        n = len(nums)
        if n < 2:
            return nums
        count1, count2, candidate1, candidate2 = 0, 0, 0, 1
        for num in nums:
            if num == candidate1:
                count1 += 1
            elif num == candidate2:
                count2 += 1
            elif count1 == 0:
                candidate1, count1 = num, 1
            elif count2 == 0:
                candidate2, count2 = num, 1
            else:
                count1, count2 = count1 - 1, count2 - 1
        return [n for n in (candidate1, candidate2) if nums.count(n) > n // 3]

=======

def majorityElement(self, nums: List[int]) -> List[int]:
        dic = {}
        res = []
        for num in nums:
            if num in dic:
                dic[num] += 1
            else:
                dic[num] = 1
        for key in dic:
            if dic[key] > len(nums) // 3:
                res.append(key)
        return res

=======

def majorityElement(self, nums: List[int]) -> List[int]:
        if len(nums) == 1:
            return nums
        nums.sort()
        count = 1
        res = []
        for i in range(len(nums)-1):
            if nums[i] == nums[i+1]:
                count += 1
            else:
                if count > len(nums)/3:
                    res.append(nums[i])
                count = 1
        if count > len(nums)/3:
            res.append(nums[-1])
        return res

=======

def majorityElement(self, nums: List[int]) -> List[int]:
        n = len(nums)
        if n == 0:
            return []
        if n == 1:
            return nums
        m1 = nums[0]
        m2 = nums[0]
        c1 = 0
        c2 = 0
        for i in range(n):
            if nums[i] == m1:
                c1 += 1
            elif nums[i] == m2:
                c2 += 1
            elif c1 == 0:
                m1 = nums[i]
                c1 += 1
            elif c2 == 0:
                m2 = nums[i]
                c2 += 1
            else:
                c1 -= 1
                c2 -= 1
        c1 = 0
        c2 = 0
        for i in range(n):
            if nums[i] == m1:
                c1 += 1
            elif nums[i] == m2:
                c2 += 1
        res = []
        if c1 > n//3:
            res.append(m1)
        if c2 > n//3:
            res.append(m2)
        return res

=======

class Solution:
    def majorityElement(self, nums: List[int]) -> List[int]:
        # Moore's Voting Algorithm
        # https://en.wikipedia.org/wiki/Boyer%E2%80%93Moore_majority_vote_algorithm
        # https://www.geeksforgeeks.org/majority-element/
        # https://www.geeksforgeeks.org/n3-repeated-number-array-o1-space/
        # https://www.geeksforgeeks.org/majority-element-set-2/
        # https://www.geeksforgeeks.org/majority-element-set-3-using-bit-magic/
        # https://www.geeksforgeeks.org/find-the-two-numbers-with-odd-occurrences-in-an-unsorted-array/
        # https://www.geeksforgeeks.org/find-the-two-numbers-with-odd-occurrences-in-an-unsorted-array-set-2/
        # https://www.geeksforgeeks.org/find-the-two-numbers-with-odd-occurrences-in-an-unsorted-array-set-3/
        # https://www.geeksforgeeks.org/find-the-two-numbers-with-odd-occurrences-in-an-unsorted-array-set-4/
        # https://www.geeksforgeeks.org/find-the-two-numbers-with-odd-occurrences-in-an-unsorted-array-set-5/
        # https://www.geeksforgeeks.org/find-the-two-numbers-with-odd-occurrences-in-an-unsorted-array-set-6/
        # https://www.geeksforgeeks.org/find-the-two-numbers-with-odd-occurrences-in-an-unsorted-array-set-7/
        # https://www.geeksforgeeks.org/find-the-two-numbers-with-odd-occurrences-in-an-unsorted-array-set-8/
        # https://www.geeksforgeeks.org/find-the-two-numbers-with-odd-occurrences-in-an-unsorted-array-set-9/
        # https://www.geeksforgeeks.org/find-the-two-numbers-with-odd-occurrences-in-an-unsorted-array-set-10/
        # https://www.geeksforgeeks.org/find-the-two-numbers-with-odd-occurrences-in-an-unsorted-array-set-11/
        # https://www.geeksforgeeks.org/find-the-two-numbers-with-odd-occurrences-in-an-unsorted-array-set-12/
        # https://www.geeksforgeeks.org/find-the-two-numbers-with-odd-occurrences-in-an-unsorted-array-set-13/
        # https://www.ge

=======

class Solution:
    def majorityElement(self, nums: List[int]) -> List[int]:
        # 1. Boyer-Moore voting algorithm
        # 2. Hash table
        # 3. Sorting
        # 4. Divide and Conquer
        # 5. Randomization
        # 6. Bit Manipulation
        # 7. Pythonic
        # 8. Math
        # 9. Linear Time Majority Vote Algorithm
        # 10. Moore Voting Algorithm
        # 11. Moore Voting Algorithm with Counting
        # 12. Moore Voting Algorithm with Counting and Swapping
        # 13. Moore Voting Algorithm with Counting and Swapping
        # 14. Moore Voting Algorithm with Counting and Swapping
        # 15. Moore Voting Algorithm with Counting and Swapping
        # 16. Moore Voting Algorithm with Counting and Swapping
        # 17. Moore Voting Algorithm with Counting and Swapping
        # 18. Moore Voting Algorithm with Counting and Swapping
        # 19. Moore Voting Algorithm with Counting and Swapping
        # 20. Moore Voting Algorithm with Counting and Swapping
        # 21. Moore Voting Algorithm with Counting and Swapping
        # 22. Moore Voting Algorithm with Counting and Swapping
        # 23. Moore Voting Algorithm with Counting and Swapping
        # 24. Moore Voting Algorithm with Counting and Swapping
        # 25. Moore Voting Algorithm with Counting and Swapping
        # 26. Moore Voting Algorithm with Counting and Swapping
        # 27. Moore Voting Algorithm with Counting and Swapping
        # 28. Moore Voting Algorithm with Counting and Swapping
        # 29. Moore Voting Algorithm with Counting and Swapping
        # 30. Moore Voting Algorithm with Counting and Swapping
        # 31. Moore Voting Algorithm with Counting and Swapping
        # 32. Moore Voting Algorithm with Counting and Swapping
        # 33. Moore Voting Algorithm with Counting and Swapping
        # 34. Moore Voting Algorithm with Counting and Swapping
        # 35. Moore Voting Algorithm with Counting and Swapping
        # 36. Moore Voting Algorithm with Counting and Swapping
        # 37. Moore Voting Algorithm with Counting and Swapping
        # 38. Moore Voting
