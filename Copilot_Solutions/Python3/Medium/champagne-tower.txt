Synthesizing 3/10 solutions

=======

def champagneTower(self, poured: int, query_row: int, query_glass: int) -> float:
        A = [[0] * k for k in range(1, 102)]
        A[0][0] = poured
        for r in range(query_row + 1):
            for c in range(r + 1):
                q = (A[r][c] - 1.0) / 2.0
                if q > 0:
                    A[r+1][c] += q
                    A[r+1][c+1] += q
        return min(1, A[query_row][query_glass])

=======

def champagneTower(self, poured: int, query_row: int, query_glass: int) -> float:
        tower = [[0] * (i + 1) for i in range(100)]
        tower[0][0] = poured
        for i in range(query_row):
            for j in range(i + 1):
                if tower[i][j] > 1:
                    tower[i + 1][j] += (tower[i][j] - 1) / 2
                    tower[i + 1][j + 1] += (tower[i][j] - 1) / 2
                    tower[i][j] = 1
        return min(1, tower[query_row][query_glass])

=======

def champagneTower(self, poured: int, query_row: int, query_glass: int) -> float:
        # DP
        # dp[i][j] = (dp[i-1][j-1] - 1) / 2 + (dp[i-1][j] - 1) / 2
        # dp[i][j] = min(dp[i-1][j-1], dp[i-1][j])
        dp = [[0] * (i+1) for i in range(query_row+1)]
        dp[0][0] = poured
        for i in range(1, query_row+1):
            for j in range(i+1):
                if j == 0:
                    dp[i][j] = max(dp[i-1][j] - 1, 0) / 2
                elif j == i:
                    dp[i][j] = max(dp[i-1][j-1] - 1, 0) / 2
                else:
                    dp[i][j] = (max(dp[i-1][j-1] - 1, 0) + max(dp[i-1][j] - 1, 0)) / 2
        return min(dp[query_row][query_glass], 1)
