Synthesizing 10/10 solutions (Duplicates hidden)

=======

def canPartition(self, nums: List[int]) -> bool:
        total = sum(nums)
        if total % 2 != 0:
            return False
        target = total // 2
        dp = [False] * (target + 1)
        dp[0] = True
        for num in nums:
            for i in range(target, num - 1, -1):
                dp[i] = dp[i] or dp[i - num]
        return dp[target]

=======

def canPartition(self, nums: List[int]) -> bool:
        s = sum(nums)
        if s % 2 == 1:
            return False
        s //= 2
        dp = [False] * (s + 1)
        dp[0] = True
        for num in nums:
            for i in range(s, num - 1, -1):
                dp[i] = dp[i] or dp[i - num]
        return dp[s]

=======

def canPartition(self, nums: List[int]) -> bool:
        total = sum(nums)
        if total % 2 != 0:
            return False
        total = total // 2
        dp = [False] * (total + 1)
        dp[0] = True
        for num in nums:
            for i in range(total, 0, -1):
                if i >= num:
                    dp[i] = dp[i] or dp[i - num]
        return dp[total]

=======

def canPartition(self, nums: List[int]) -> bool:
        total = sum(nums)
        if total % 2 != 0:
            return False
        total = total // 2
        dp = [False] * (total + 1)
        dp[0] = True
        for num in nums:
            for j in range(total, num - 1, -1):
                dp[j] = dp[j] or dp[j - num]
        return dp[total]

=======

def canPartition(self, nums: List[int]) -> bool:
        total = sum(nums)
        if total % 2 == 1:
            return False
        total = total // 2
        dp = [False] * (total + 1)
        dp[0] = True
        for i in range(len(nums)):
            for j in range(total, nums[i] - 1, -1):
                dp[j] = dp[j] or dp[j - nums[i]]
        return dp[-1]

=======

def canPartition(self, nums: List[int]) -> bool:
        total = sum(nums)
        if total % 2 != 0:
            return False
        target = total // 2
        dp = [0] * (target + 1)
        for num in nums:
            for i in range(target, num - 1, -1):
                dp[i] = max(dp[i], dp[i - num] + num)
            if dp[target] == target:
                return True
        return False

=======

def canPartition(self, nums: List[int]) -> bool:
        total = sum(nums)
        if total % 2:
            return False
        target = total // 2
        n = len(nums)
        dp = [[False] * (target + 1) for _ in range(n)]
        dp[0][0] = True
        for i in range(1, n):
            dp[i][0] = True
        for j in range(1, target + 1):
            dp[0][j] = nums[0] == j
        for i in range(1, n):
            for j in range(1, target + 1):
                dp[i][j] = dp[i - 1][j]
                if nums[i] <= j:
                    dp[i][j] = dp[i][j] or dp[i - 1][j - nums[i]]
        return dp[n - 1][target]

=======

def canPartition(self, nums: List[int]) -> bool:
        total = sum(nums)
        if total % 2 == 1:
            return False
        total = total // 2
        dp = [True] + [False] * total
        for n in nums:
            for i in range(total, n-1, -1):
                dp[i] = dp[i] or dp[i-n]
        return dp[total]

=======

def canPartition(self, nums: List[int]) -> bool:
        sum_ = sum(nums)
        if sum_ & 1:
            return False
        target = sum_ >> 1
        dp = [False] * (target + 1)
        dp[0] = True
        for num in nums:
            for j in range(target, num - 1, -1):
                dp[j] = dp[j] or dp[j - num]
        return dp[target]
