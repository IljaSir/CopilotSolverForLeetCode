Synthesizing 10/10 solutions

=======

def insert(self, intervals: List[List[int]], newInterval: List[int]) -> List[List[int]]:
        intervals.append(newInterval)
        intervals.sort(key=lambda x: x[0])
        merged = []
        for interval in intervals:
            if not merged or merged[-1][1] < interval[0]:
                merged.append(interval)
            else:
                merged[-1][1] = max(merged[-1][1], interval[1])
        return merged

=======

def insert(self, intervals: List[List[int]], newInterval: List[int]) -> List[List[int]]:
        i = 0
        while i < len(intervals):
            if intervals[i][0] > newInterval[1]:
                intervals.insert(i, newInterval)
                return intervals
            elif intervals[i][1] < newInterval[0]:
                i += 1
                continue
            else:
                newInterval[0] = min(newInterval[0], intervals[i][0])
                newInterval[1] = max(newInterval[1], intervals[i][1])
                intervals.pop(i)
        intervals.append(newInterval)
        return intervals

=======

def insert(self, intervals: List[List[int]], newInterval: List[int]) -> List[List[int]]:
        intervals.append(newInterval)
        intervals.sort()
        i = 0
        while i < len(intervals) - 1:
            if intervals[i][1] >= intervals[i+1][0]:
                intervals[i][1] = max(intervals[i][1], intervals[i+1][1])
                intervals.pop(i+1)
            else:
                i += 1
        return intervals

=======

def insert(self, intervals: List[List[int]], newInterval: List[int]) -> List[List[int]]:
        intervals.append(newInterval)
        intervals.sort()
        res = [intervals[0]]
        for i in range(1, len(intervals)):
            if res[-1][1] >= intervals[i][0]:
                res[-1][1] = max(res[-1][1], intervals[i][1])
            else:
                res.append(intervals[i])
        return res

=======

def insert(self, intervals: List[List[int]], newInterval: List[int]) -> List[List[int]]:
        intervals.append(newInterval)
        intervals.sort()
        i = 1
        while i < len(intervals):
            if intervals[i][0] <= intervals[i-1][1]:
                intervals[i-1] = [min(intervals[i-1][0], intervals[i][0]), max(intervals[i-1][1], intervals[i][1])]
                intervals.pop(i)
            else:
                i += 1
        return intervals

=======

def insert(self, intervals: List[List[int]], newInterval: List[int]) -> List[List[int]]:
        if not intervals:
            return [newInterval]
        if not newInterval:
            return intervals
        if newInterval[0] > intervals[-1][1]:
            intervals.append(newInterval)
            return intervals
        if newInterval[1] < intervals[0][0]:
            intervals.insert(0, newInterval)
            return intervals
        i = 0
        while i < len(intervals):
            if newInterval[0] >= intervals[i][0] and newInterval[0] <= intervals[i][1]:
                break
            i += 1
        j = i
        while j < len(intervals):
            if newInterval[1] >= intervals[j][0] and newInterval[1] <= intervals[j][1]:
                break
            j += 1
        if i == j:
            intervals.insert(i, newInterval)
        else:
            intervals[i][0] = min(intervals[i][0], newInterval[0])
            intervals[j][1] = max(intervals[j][1], newInterval[1])
            intervals = intervals[:i+1] + intervals[j+1:]
        return intervals

=======

def insert(self, intervals: List[List[int]], newInterval: List[int]) -> List[List[int]]:
        intervals.append(newInterval)
        intervals.sort()
        stack = [intervals[0]]
        for i in range(1, len(intervals)):
            if stack[-1][1] >= intervals[i][0]:
                stack[-1][1] = max(stack[-1][1], intervals[i][1])
            else:
                stack.append(intervals[i])
        return stack

=======

def insert(self, intervals: List[List[int]], newInterval: List[int]) -> List[List[int]]:
        if not intervals:
            return [newInterval]
        if not newInterval:
            return intervals
        start, end = newInterval
        left = [i for i in intervals if i[1] < start]
        right = [i for i in intervals if i[0] > end]
        if len(left) + len(right) < len(intervals):
            start = min(start, intervals[len(left)][0])
            end = max(end, intervals[~len(right)][1])
        return left + [[start, end]] + right

=======

def insert(self, intervals: List[List[int]], newInterval: List[int]) -> List[List[int]]:
        intervals.append(newInterval)
        intervals.sort(key=lambda x: x[0])
        if len(intervals) == 1:
            return intervals
        else:
            i = 1
            while i < len(intervals):
                if intervals[i-1][1] >= intervals[i][0]:
                    intervals[i-1] = [min(intervals[i-1][0], intervals[i][0]), max(intervals[i-1][1], intervals[i][1])]
                    intervals.pop(i)
                else:
                    i += 1
            return intervals

=======

def insert(self, intervals: List[List[int]], newInterval: List[int]) -> List[List[int]]:
        # find the index of the first interval that is greater than newInterval
        # if no such interval is found, then append newInterval to the end of intervals
        i = 0
        while i < len(intervals):
            if intervals[i][0] > newInterval[0]:
                break
            i += 1
        intervals.insert(i, newInterval)
        # merge intervals
        i = 0
        while i < len(intervals) - 1:
            if intervals[i][1] >= intervals[i+1][0]:
                intervals[i][1] = max(intervals[i][1], intervals[i+1][1])
                intervals.pop(i+1)
            else:
                i += 1
        return intervals
