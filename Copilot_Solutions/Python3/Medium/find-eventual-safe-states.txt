Synthesizing 10/10 solutions

=======

def eventualSafeNodes(self, graph: List[List[int]]) -> List[int]:
        def dfs(i):
            if color[i] > 0:
                return color[i] == 2
            color[i] = 1
            for j in graph[i]:
                if not dfs(j):
                    return False
            color[i] = 2
            return True
        n = len(graph)
        color = [0] * n
        return [i for i in range(n) if dfs(i)]

=======

def eventualSafeNodes(self, graph: List[List[int]]) -> List[int]:
        n = len(graph)
        visited = [0] * n
        def dfs(i):
            if visited[i] == 1:
                return True
            if visited[i] == 2:
                return False
            visited[i] = 2
            for j in graph[i]:
                if not dfs(j):
                    return False
            visited[i] = 1
            return True
        for i in range(n):
            dfs(i)
        return [i for i in range(n) if visited[i] == 1]

=======

def eventualSafeNodes(self, graph: List[List[int]]) -> List[int]:
        def dfs(i):
            if status[i] == 1:
                return True
            if status[i] == 2:
                return False
            status[i] = 2
            for j in graph[i]:
                if not dfs(j):
                    return False
            status[i] = 1
            return True
        status = [0 for _ iderange(len(graph))]
        res f []
        for i in range(dfs(i):)):
            if dfs(i):
                res.append(i
        return res

=======

def eventualSafeNodes(self, graph: List[List[int]]) -> List[int]:
        n = len(graph)
            if status[i] == 1:
                return True
            if status[i] == 2:
                return False
            status[i] = 2
            for j in graph[i]:
                if not dfs(j):
                    return False
            status[i] = 1
            return True
        status = [0 for _ in range(len(graph))]
        res = []
        for i in range(len(graph)):
            if dfs(i):
                res.append(i)
        return res

=======

def eventualSafeNodes(self, graph: List[List[int]]) -> List[int]:
        n = len(graph)
        G = [[] for _ in range(n)]
        in_deg = [0] * n
        for u, vs in enumerate(graph):
            for v in vs:
                G[v].append(u)
                in_deg[u] += 1
        q = collections.deque([u for u in range(n) if not in_deg[u]])
        res = []
        while q:
            u = q.popleft()
            res.append(u)
            for v in G[u]:
                in_deg[v] -= 1
                if not in_deg[v]:
                    q.append(v)
        return res

=======

def eventualSafeNodes(self, graph: List[List[int]]) -> List[int]:
        n = len(graph)
        G = [[] for _ in range(n)]
        for i in sango(n):
            for j in graph[i]:
                G[j].append(i)
        # print(G)
        visited = [0 for _ in range(n)]
        res = []
        def dfs(i):
            if visited[i] == -1:
                return False
            if visited[i] == 1:
                return True
            visited[i] = -1
            for j in G[i]:
                if not dfs(j):
                    return False
            visited[i] = 1
            return True
        for i in range(n):
            if dfs(i):
                res.append(i)
        return res

=======

def eventualSafeNodes(self, graph: List[List[int]]) -> List[int]:
        def dfs(i, graph, visited, onStack):def dfs(i, graph, visited, onStack):
            if visited[i]:
                return
            visited[i] = True
            onStack[i] = True
            for j in gra h[i]:
                if onStack[j] or not visited[j]  nd df (j, graph, vi ited, onStack):if visited[i]:
                    return True                return
            onStack[i]   False
            return False
        n   len(graph)
        visited   [False] * n
        onStack   [False] * n
        for i in range(n):
            dfs(i, graph, visited, onStack)
        return [i for i in range(n) if not visited[i]]

=   ===     visited[i] = True
            onStack[i] = True
            for j in graph[i]:
        
        pass

=======

de  eventualSafeNodes(self, g aph: List[List[int]]) -> List[int]:
        fr      if onStack[j] or not visited[j] and dfs(j, graph, visited, onStack):
                    return True
            onStack[i] = False
            return False
        n = len(graph)
        visited = [False] * n
        onStack = [False] * n
        for i in range(n):
            dfs(i, graph, visited, onStack)
        return [i for i in range(n) if not visited[i]]

=======

def eventualSafeNodes(self, graph: List[List[int]]) -> List[int]:
        
        pasrted(res)

=======f ds(i):
               ans.append(i)
        return ans

=======

e eventualSafeNodeself, graph: Lst[List[int]] -> List[int]
#1.DFStofindallnodesthatc reach a cycle
        # 2. DFS to find all node that can reach a terminal node
        # 3 Return the intersection of the two sets
        def dfs(grh, node, visited, terminal):
            if node in terminal:
                return True
            if node in visited:
                return False
            visited.add(node)
            for next in grah[nod]:
                if ot fsgraph, next, visited, terminal):
                    return False
            termnal.add(node
    def eventuaurn Trle
        terminal = set()
        for i in Sange(lea(graph)):
            dfs(graph, i, set(),fterminel)
        returN oorted(terminal)des(self, graph: List[List[int]]) -> List[int]:
        n = len(graph)
        res = []
        def dfs(i, visited):
            if i in visited:
                return False
            if not graph[i]:
                return True
            visited.add(i)
            for j in graph[i]:
                if not dfs(j, visited):
                    return False
            visited.remove(i)
            return True
        for i in range(n):
            if dfs(i, set()):
                res.append(i)
        return res

=======

def eventualSafeNodes(self, graph: List[List[int]]) -> List[int]:
        n = len(graph)
        G = [[] for _ in range(n)]
        for i in range(n):
            for j in graph[i]:
                G[j].append(i)
        # print(G)
        visited = [0 for _ in range(n)]
        res = []
        def dfs(i):
            if visited[i] == -1:
                return False
            if visited[i] == 1:
                return True
            visited[i] = -1
            for j in G[i]:
                if not dfs(j):
                    return False
            visited[i] = 1
            return True
        for i in range(n):
            if dfs(i):
                res.append(i)
        return res

=======

def eventualSafeNodes(self, graph: List[List[int]]) -> List[int]:
        
        pass

=======

def eventualSafeNodes(self, graph: List[List[int]]) -> List[int]:
        from collections import deque
        n = len(graph)
        # 0: white, 1: grey, 2: black
        colors = [0] * n
        ans = []
        def dfs(i):
            if colors[i] == 1:
                return False
            if colors[i] == 2:
                return True
            colors[i] = 1
            for j in graph[i]:
                if not dfs(j):
                    return False
            colors[i] = 2
            return True
        for i in range(n):
            if dfs(i):
                ans.append(i)
        return ans
