Synthesizing 10/10 solutions

=======

def rob(self, nums: List[int]) -> int:
        if not nums:
            return 0
        if len(nums) == 1:
            return nums[0]
        if len(nums) == 2:
            return max(nums[0], nums[1])
        return max(self.robRange(nums, 0, len(nums)-2), self.robRange(nums, 1, len(nums)-1))

=======

def rob(self, nums: List[int]) -> int:
        if len(nums) == 1:
            return nums[0]
        return max(self.robRange(nums, 0, len(nums) - 2), self.robRange(nums, 1, len(nums) - 1))

=======

def rob(self, nums: List[int]) -> int:
        def rob_range(nums, start, end):
            first, second = nums[start], max(nums[start], nums[start + 1])
            for i in range(start + 2, end + 1):
                first, second = second, max(first + nums[i], second)
            return second
        
        n = len(nums)
        if n == 1:
            return nums[0]
        return max(rob_range(nums, 0, n - 2), rob_range(nums, 1, n - 1))

=======

def rob(self, nums: List[int]) -> int:
        if len(nums) == 1:
            return nums[0]
        if len(nums) == 2:
            return max(nums)
        return max(self.rob1(nums[1:]), self.rob1(nums[:-1]))

=======

def rob(self, nums: List[int]) -> int:
        if not nums:
            return 0
        if len(nums) == 1:
            return nums[0]
        return max(self.robRange(nums, 0, len(nums) - 1), self.robRange(nums, 1, len(nums)))

=======

def rob(self, nums: List[int]) -> int:
        if len(nums) == 1:
            return nums[0]
        if len(nums) == 2:
            return max(nums)
        if len(nums) == 3:
            return max(nums[0], nums[1], nums[0] + nums[2])
        return max(self.rob1(nums[1:]), self.rob1(nums[:-1]))

=======

def rob(self, nums: List[int]) -> int:
        def rob_range(start: int, end: int) -> int:
            first = second = 0
            for i in range(start, end):
                first, second = second, max(first + nums[i], second)
            return second

        n = len(nums)
        if n == 1:
            return nums[0]
        return max(rob_range(0, n - 1), rob_range(1, n))

=======

def rob(self, nums: List[int]) -> int:
        def robRange(start: int, end: int) -> int:
            first = second = 0
            for i in range(start, end):
                first, second = second, max(first + nums[i], second)
            return second
        n = len(nums)
        if n == 1:
            return nums[0]
        return max(robRange(0, n - 1), robRange(1, n))

=======

def rob(self, nums: List[int]) -> int:
        if len(nums) == 1:
            return nums[0]
        return max(self.rob_line(nums[1:]), self.rob_line(nums[:-1]))

=======

def rob(self, nums: List[int]) -> int:
        if not nums:
            return 0
        if len(nums) == 1:
            return nums[0]
        def rob(nums):
            dp = [0] * len(nums)
            dp[0] = nums[0]
            dp[1] = max(nums[0], nums[1])
            for i in range(2, len(nums)):
                dp[i] = max(dp[i-1], dp[i-2] + nums[i])
            return dp[-1]
        return max(rob(nums[:-1]), rob(nums[1:]))
