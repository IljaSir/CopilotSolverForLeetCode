Synthesizing 10/10 solutions (Duplicates hidden)

=======

def findLongestChain(self, pairs: List[List[int]]) -> int:
        pairs.sort(key=lambda x: x[1])
        count = 1
        last = pairs[0][1]
        for i in range(1, len(pairs)):
            if pairs[i][0] > last:
                count += 1
                last = pairs[i][1]
        return count

=======

def findLongestChain(self, pairs: List[List[int]]) -> int:
        pairs.sort(key=lambda x: x[1])
        res = 1
        last = pairs[0][1]
        for i in range(1, len(pairs)):
            if pairs[i][0] > last:
                res += 1
                last = pairs[i][1]
        return res

=======

def findLongestChain(self, pairs: List[List[int]]) -> int:
        pairs.sort(key=lambda x: x[1])
        res = 1
        cur = pairs[0][1]
        for i in range(1, len(pairs)):
            if pairs[i][0] > cur:
                res += 1
                cur = pairs[i][1]
        return res

=======

def findLongestChain(self, pairs: List[List[int]]) -> int:
        pairs.sort(key=lambda x: x[1])
        n = len(pairs)
        dp = [1 for _ in range(n)]
        for i in range(1, n):
            for j in range(i):
                if pairs[j][1] < pairs[i][0]:
                    dp[i] = max(dp[i], dp[j]+1)
        return max(dp)

=======

def findLongestChain(self, pairs: List[List[int]]) -> int:
        pairs.sort(key=lambda x: x[1])
        ans, last = 0, float('-inf')
        for p in pairs:
            if p[0] > last:
                ans += 1
                last = p[1]
        return ans

=======

def findLongestChain(self, pairs: List[List[int]]) -> int:
        pairs.sort(key=lambda x: x[1])
        curr = pairs[0][1]
        res = 1
        for p in pairs[1:]:
            if curr < p[0]:
                curr = p[1]
                res += 1
        return res

=======

def findLongestChain(self, pairs: List[List[int]]) -> int:
        pairs.sort(key=lambda x: x[1])
        res = 0
        curr = -float('inf')
        for a, b in pairs:
            if a > curr:
                res += 1
                curr = b
        return res

=======

def findLongestChain(self, pairs: List[List[int]]) -> int:
        pairs.sort(key=lambda x: x[1])
        prev = -1001
        ans = 0
        for pair in pairs:
            if pair[0] > prev:
                prev = pair[1]
                ans += 1
        return ans

=======

def findLongestChain(self, pairs: List[List[int]]) -> int:
        
        pass
