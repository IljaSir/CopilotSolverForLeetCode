Synthesizing 10/10 solutions

=======

def escapeGhosts(self, ghosts: List[List[int]], target: List[int]) -> bool:
        return all(abs(target[0] - g[0]) + abs(target[1] - g[1]) > abs(target[0]) + abs(target[1]) for g in ghosts)

=======

def escapeGhosts(self, ghosts: List[List[int]], target: List[int]) -> bool:
        def dist(x, y):
            return abs(x[0] - y[0]) + abs(x[1] - y[1])
        return all(dist(ghost, target) > dist([0, 0], target) for ghost in ghosts)

=======

def escapeGhosts(self, ghosts: List[List[int]], target: List[int]) -> bool:
        return all(abs(target[0]-ghost[0])+abs(target[1]-ghost[1]) > abs(target[0])+abs(target[1]) for ghost in ghosts)

=======

def escapeGhosts(self, ghosts: List[List[int]], target: List[int]) -> bool:
        return all(abs(x-target[0])+abs(y-target[1]) > abs(target[0])+abs(target[1]) for x, y in ghosts)

=======

def escapeGhosts(self, ghosts: List[List[int]], target: List[int]) -> bool:
        def dist(x, y):
            return abs(x[0] - y[0]) + abs(x[1] - y[1])
        d = dist([0, 0], target)
        return all(dist(g, target) > d for g in ghosts)

=======

def escapeGhosts(self, ghosts: List[List[int]], target: List[int]) -> bool:
        def distance(p1,p2):
            return abs(p1[0]-p2[0])+abs(p1[1]-p2[1])
        return all(distance(ghost,target)>=distance([0,0],target) for ghost in ghosts)

=======

def escapeGhosts(self, ghosts: List[List[int]], target: List[int]) -> bool:
        def distance(x,y):
            return abs(x[0]-y[0])+abs(x[1]-y[1])
        d = distance([0,0],target)
        for g in ghosts:
            if d>=distance(g,target):
                return False
        return True

=======

def escapeGhosts(self, ghosts: List[List[int]], target: List[int]) -> bool:
        def get_dis(pos):
            return abs(pos[0] - target[0]) + abs(pos[1] - target[1])
        dis = get_dis([0, 0])
        for g in ghosts:
            if get_dis(g) <= dis:
                return False
        return True

=======

def escapeGhosts(self, ghosts: List[List[int]], target: List[int]) -> bool:
        def dist(x,y):
            return abs(x-target[0])+abs(y-target[1])
        return all(dist(x,y)<=dist(0,0) for x,y in ghosts)

=======

def escapeGhosts(self, ghosts: List[List[int]], target: List[int]) -> bool:
        def dist(pt):
            return abs(pt[0]-target[0])+abs(pt[1]-target[1])
        return dist([0, 0]) < min(dist(pt) for pt in ghosts)
