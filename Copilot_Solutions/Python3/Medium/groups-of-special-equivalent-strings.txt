Synthesizing 10/10 solutions (Duplicates hidden)

=======

def numSpecialEquivGroups(self, words: List[str]) -> int:
        return len({tuple(sorted(word[0::2]) + sorted(word[1::2])) for word in words})

=======

def numSpecialEquivGroups(self, words: List[str]) -> int:
        return len({(''.join(sorted(w[::2])) + ''.join(sorted(w[1::2]))) for w in words})

=======

def numSpecialEquivGroups(self, words: List[str]) -> int:
        return len({(''.join(sorted(w[0::2])),''.join(sorted(w[1::2]))) for w in words})

=======

def numSpecialEquivGroups(self, words: List[str]) -> int:
        return len({(tuple(sorted(w[0::2])), tuple(sorted(w[1::2]))) for w in words})

=======

def numSpecialEquivGroups(self, words: List[str]) -> int:
        return len({tuple(sorted(s[::2]) + sorted(s[1::2])) for s in words})

=======

def numSpecialEquivGroups(self, words: List[str]) -> int:
        def key(word):
            return tuple(sorted(word[::2])) + tuple(sorted(word[1::2]))
        return len({key(word) for word in words})

=======

def numSpecialEquivGroups(self, words: List[str]) -> int:
        def f(s):
            return (tuple(sorted(s[::2])), tuple(sorted(s[1::2])))
        return len({f(w) for w in words})

=======

def numSpecialEquivGroups(self, words: List[str]) -> int:
        def get_key(s):
            even = sorted(s[::2])
            odd = sorted(s[1::2])
            return ''.join(even+odd)
        return len({get_key(w) for w in words})

=======

def numSpecialEquivGroups(self, words: List[str]) -> int:
        def f(s):
            return ("".join(sorted(s[::2])),"".join(sorted(s[1::2])))
        return len(set(f(s) for s in words))
