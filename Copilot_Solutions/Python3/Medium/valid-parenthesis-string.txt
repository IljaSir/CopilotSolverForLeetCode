Synthesizing 10/10 solutions

=======

def checkValidString(self, s: str) -> bool:
        lo, hi = 0, 0
        for c in s:
            lo += 1 if c == '(' else -1
            hi += 1 if c != ')' else -1
            if hi < 0:
                break
            lo = max(lo, 0)
        return lo == 0

=======

def checkValidString(self, s: str) -> bool:
        left = right = 0
        for c in s:
            left += 1 if c == '(' else -1
            right += 1 if c != ')' else -1
            if right < 0:
                break
            left = max(left, 0)
        return left == 0

=======

def checkValidString(self, s: str) -> bool:
        stack = []
        star = []
        for i, c in enumerate(s):
            if c == '(':
                stack.append(i)
            elif c == '*':
                star.append(i)
            else:
                if stack:
                    stack.pop()
                elif star:
                    star.pop()
                else:
                    return False
        while stack:
            if star and stack[-1] < star[-1]:
                stack.pop()
                star.pop()
            else:
                return False
        return True

=======

def checkValidString(self, s: str) -> bool:
        min_open = 0
        max_open = 0
        for c in s:
            if c == '(':
                min_open += 1
                max_open += 1
            elif c == ')':
                min_open = max(0, min_open - 1)
                max_open = max(0, max_open - 1)
            elif c == '*':
                min_open = max(0, min_open - 1)
                max_open += 1
            if max_open == 0:
                return False
        return min_open == 0

=======

def checkValidString(self, s: str) -> bool:
        stack = []
        star = []
        for i in range(len(s)):
            if s[i] == '(':
                stack.append(i)
            elif s[i] == '*':
                star.append(i)
            elif s[i] == ')':
                if stack:
                    stack.pop()
                elif star:
                    star.pop()
                else:
                    return False
        while stack and star:
            if stack[-1] > star[-1]:
                return False
            stack.pop()
            star.pop()
        return not stack

=======

def checkValidString(self, s: str) -> bool:
        left = []
        star = []
        for i in range(len(s)):
            if s[i] == "(":
                left.append(i)
            elif s[i] == "*":
                star.append(i)
            else:
                if len(left) > 0:
                    left.pop()
                elif len(star) > 0:
                    star.pop()
                else:
                    return False
        while len(left) > 0 and len(star) > 0:
            if left[-1] > star[-1]:
                return False
            left.pop()
            star.pop()
        return len(left) == 0

=======

def checkValidString(self, s: str) -> bool:
        # greedy
        min_count = 0
        max_count = 0
        for c in s:
            if c == '(':
                min_count += 1
                max_count += 1
            elif c == ')':
                min_count = max(0, min_count - 1)
                max_count -= 1
            else:
                min_count = max(0, min_count - 1)
                max_count += 1
            if max_count < 0:
                return False
        return min_count == 0

=======

def checkValidString(self, s: str) -> bool:
        stack = []
        for i in s:
            if i == "(":
                stack.append(i)
            elif i == "*":
                stack.append(i)
            else:
                if not stack:
                    return False
                if stack[-1] == "(":
                    stack.pop()
                elif stack[-1] == "*":
                    stack.pop()
                else:
                    return False
        if not stack:
            return True
        stack = []
        for i in s[::-1]:
            if i == ")":
                stack.append(i)
            elif i == "*":
                stack.append(i)
            else:
                if not stack:
                    return False
                if stack[-1] == ")":
                    stack.pop()
                elif stack[-1] == "*":
                    stack.pop()
                else:
                    return False
        return True

=======

class Solution:
    def checkValidString(self, s: str) -> bool:
        # (, (, *, ), )
        # (, (, ), *, )
        # (, (, *, ), )

=======

class Solution:
    def checkValidString(self, s: str) -> bool:
        # Idea: https://www.youtube.com/watch?v=0nXgYDzLbHg
        # The idea is to keep track of the number of open parenthesis and close parenthesis we have seen so far.
        # We can do this by keeping track of the lower and upper bounds of the number of open parenthesis.
        # If we see a (, then the lower bound of open parenthesis increases by 1, and the upper bound of open parenthesis increases by 1.
        # If we see a ), then the lower bound of open parenthesis decreases by 1, and the upper bound of open parenthesis decreases by 1.
        # If we see a *, then the lower bound of open parenthesis decreases by 1, and the upper bound of open parenthesis increases by 1.
        # If the upper bound of open parenthesis becomes negative, that means we have more close parenthesis than open parenthesis.
        # If the lower bound of open parenthesis becomes negative, that means we have more close parenthesis than open parenthesis.
        # If the lower bound of open parenthesis becomes 0, that means we have no open parenthesis.
        # If the upper bound of open parenthesis becomes 0, that means we have no open parenthesis.
        # If the lower bound of open parenthesis is negative, then we have more close parenthesis than open parenthesis.
        # If the upper bound of open parenthesis is negative, then we have more close parenthesis than open parenthesis.
        # If the lower bound of open parenthesis is 0, then we have no open parenthesis.
        # If the upper bound of open parenthesis is 0, then we have no open parenthesis.
        # If the lower bound of open parenthesis is positive, then we have open parenthesis.
        # If the upper bound of open parenthesis is positive, then we have open parenthesis.
        # If the lower bound of open parenthesis is positive, then we have open parenthesis.
        # If the upper bound of open parenthesis is positive, then we have open parenthesis.
        # If the lower bound of open parenthesis is positive, then we have open parenthesis.
        # If the upper bound of open parenthesis is positive, then we have open parenthesis.
        # If the lower bound of open parenthesis is positive, then we have open parenthesis.
        # If the upper bound of open parenthesis is positive, then we have open parenthesis.
        # If the lower bound of open parenthesis is positive, then we have open parenthesis.
        #
