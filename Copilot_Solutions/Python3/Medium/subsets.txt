Synthesizing 8/10 solutions (Duplicates hidden)

=======

def subsets(self, nums: List[int]) -> List[List[int]]:
        def backtrack(first = 0, curr = []):
            # if the combination is done
            if len(curr) == k:  
                output.append(curr[:])
            for i in range(first, n):
                # add nums[i] into the current combination
                curr.append(nums[i])
                # use next integers to complete the combination
                backtrack(i + 1, curr)
                # backtrack
                curr.pop()
        
        output = []
        n = len(nums)
        for k in range(n + 1):
            backtrack()
        return output

=======

def subsets(self, nums: List[int]) -> List[List[int]]:
        res = [[]]
        for num in nums:
            res += [item + [num] for item in res]
        return res

=======

def subsets(self, nums: List[int]) -> List[List[int]]:
        def dfs(nums, idx, path, res):
            res.append(path)
            for i in range(idx, len(nums)):
                dfs(nums, i+1, path+[nums[i]], res)
        res = []
        dfs(nums, 0, [], res)
        return res

=======

def subsets(self, nums: List[int]) -> List[List[int]]:
        n = len(nums)
        res = []
        def backtrack(i, tmp):
            res.append(tmp)
            for j in range(i, n):
                backtrack(j + 1, tmp + [nums[j]])
        backtrack(0, [])
        return res

=======

def subsets(self, nums: List[int]) -> List[List[int]]:
        res = []
        self.dfs(nums, 0, [], res)
        return res

=======

def subsets(self, nums: List[int]) -> List[List[int]]:
        res = [[]]
        for i in range(len(nums)):
            res += [j + [nums[i]] for j in res]
        return res
