Synthesizing 10/10 solutions

=======

def constructArray(self, n: int, k: int) -> List[int]:
        res = list(range(1, n-k))
        for i in range(k+1):
            if i % 2 == 0:
                res.append(n-k+i//2)
            else:
                res.append(n-i//2)
        return res

=======

def constructArray(self, n: int, k: int) -> List[int]:
        answer = list(range(1, n - k))
        for i in range(k + 1):
            if i % 2 == 0:
                answer.append(n - k + i // 2)
            else:
                answer.append(n - i // 2)
        return answer

=======

def constructArray(self, n: int, k: int) -> List[int]:
        ans = list(range(1, n - k))
        for i in range(k + 1):
            ans.append(n - k + i // 2 if i % 2 == 0 else n - i // 2)
        return ans

=======

def constructArray(self, n: int, k: int) -> List[int]:
        a = list(range(1, n-k))
        for i in range(k+1):
            if i % 2 == 0:
                a.append(n-k + i//2)
            else:
                a.append(n - i//2)
        return a

=======

def constructArray(self, n: int, k: int) -> List[int]:
        i, j = 1, n
        ans = []
        while i <= j:
            if k > 1:
                if k % 2 == 1:
                    ans.append(i)
                    i += 1
                else:
                    ans.append(j)
                    j -= 1
                k -= 1
            else:
                ans.append(i)
                i += 1
        return ans

=======

def constructArray(self, n: int, k: int) -> List[int]:
        res = []
        for i in range(1, n-k):
            res.append(i)
        for i in range(k+1):
            if i % 2 == 0:
                res.append(n-k+i//2)
            else:
                res.append(n-i//2)
        return res

=======

def constructArray(self, n: int, k: int) -> List[int]:
        res = [i for i in range(1, n - k)]
        for i in range(k + 1):
            res.append(res[-1] + (-1)**i * (k - i + 1))
        return res

=======

def constructArray(self, n: int, k: int) -> List[int]:
        res = []
        l = 1
        r = n
        while l <= r:
            if k > 1:
                if k % 2 == 0:
                    res.append(r)
                    r -= 1
                else:
                    res.append(l)
                    l += 1
                k -= 1
            else:
                res.append(l)
                l += 1
        return res

=======

def constructArray(self, n: int, k: int) -> List[int]:
        arr = [i for i in range(1, n+1)]
        for i in range(1, k):
            arr[i:] = arr[:i-1:-1]
        return arr

=======

def constructArray(self, n: int, k: int) -> List[int]:
        res = [1]
        for i in range(k):
            res.append(res[-1] + (-1)**i * (k - i))
        return res + list(range(k + 2, n + 1))
