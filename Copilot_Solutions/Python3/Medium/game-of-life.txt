Synthesizing 10/10 solutions

=======

def gameOfLife(self, board: List[List[int]]) -> None:
        """
        Do not return anything, modify board in-place instead.
        """
        m = len(board)
        n = len(board[0])
        for i in range(m):
            for j in range(n):
                lives = 0
                for x in range(max(i-1, 0), min(i+2, m)):
                    for y in range(max(j-1, 0), min(j+2, n)):
                        lives += board[x][y] & 1
                if lives == 3 or lives - board[i][j] == 3:
                    board[i][j] |= 2
        for i in range(m):
            for j in range(n):
                board[i][j] >>= 1

=======

def gameOfLife(self, board: List[List[int]]) -> None:
        """
        Do not return anything, modify board in-place instead.
        """
        m, n = len(board), len(board[0])
        for i in range(m):
            for j in range(n):
                cnt = 0
                for x in range(max(0, i-1), min(m, i+2)):
                    for y in range(max(0, j-1), min(n, j+2)):
                        cnt += board[x][y] & 1
                if cnt == 3 or cnt - board[i][j] == 3:
                    board[i][j] |= 2
        for i in range(m):
            for j in range(n):
                board[i][j] >>= 1

=======

def gameOfLife(self, board: List[List[int]]) -> None:
        """
        Do not return anything, modify board in-place instead.
        """
        m = len(board)
        n = len(board[0])
        for i in range(m):
            for j in range(n):
                count = 0
                for x in range(max(0, i - 1), min(m, i + 2)):
                    for y in range(max(0, j - 1), min(n, j + 2)):
                        if x == i and y == j:
                            continue
                        if board[x][y] == 1 or board[x][y] == 2:
                            count += 1
                if board[i][j] == 1 and (count < 2 or count > 3):
                    board[i][j] = 2
                if board[i][j] == 0 and count == 3:
                    board[i][j] = 3
        for i in range(m):
            for j in range(n):
                if board[i][j] == 2:
                    board[i][j] = 0
                if board[i][j] == 3:
                    board[i][j] = 1

=======

def gameOfLife(self, board: List[List[int]]) -> None:
        """
        Do not return anything, modify board in-place instead.
        """
        m = len(board)
        n = len(board[0])
        for i in range(m):
            for j in range(n):
                live = 0
                for x in range(max(0, i-1), min(m, i+2)):
                    for y in range(max(0, j-1), min(n, j+2)):
                        if x == i and y == j:
                            continue
                        if board[x][y] == 1 or board[x][y] == 2:
                            live += 1
                if board[i][j] == 1 and (live < 2 or live > 3):
                    board[i][j] = 2
                elif board[i][j] == 0 and live == 3:
                    board[i][j] = 3
        for i in range(m):
            for j in range(n):
                if board[i][j] == 2:
                    board[i][j] = 0
                elif board[i][j] == 3:
                    board[i][j] = 1

=======

def gameOfLife(self, board: List[List[int]]) -> None:
        """
        Do not return anything, modify board in-place instead.
        """
        m = len(board)
        n = len(board[0])
        for i in range(m):
            for j in range(n):
                live = 0
                for x in range(max(0,i-1), min(m,i+2)):
                    for y in range(max(0,j-1), min(n,j+2)):
                        live += board[x][y] & 1
                if live == 3 or live - board[i][j] == 3:
                    board[i][j] |= 2
        for i in range(m):
            for j in range(n):
                board[i][j] >>= 1

=======

def gameOfLife(self, board: List[List[int]]) -> None:
        """
        Do not return anything, modify board in-place instead.
        """
        n = len(board)
        m = len(board[0])
        def neighbors(x, y):
            for i in range(x - 1, x + 2):
                for j in range(y - 1, y + 2):
                    if 0 <= i < n and 0 <= j < m and (i != x or j != y):
                        yield i, j
        for i in range(n):
            for j in range(m):
                count = 0
                for x, y in neighbors(i, j):
                    if board[x][y] & 1:
                        count += 1
                if board[i][j] & 1:
                    if count < 2 or count > 3:
                        board[i][j] = 1
                    else:
                        board[i][j] = 3
                else:
                    if count == 3:
                        board[i][j] = 2
        for i in range(n):
            for j in range(m):
                board[i][j] >>= 1

=======

def gameOfLife(self, board: List[List[int]]) -> None:
        """
        Do not return anything, modify board in-place instead.
        """
        def count(i, j):
            cnt = 0
            for x in range(i-1, i+2):
                for y in range(j-1, j+2):
                    if x == i and y == j:
                        continue
                    if x < 0 or y < 0 or x >= m or y >= n:
                        continue
                    if board[x][y] == 1 or board[x][y] == 2:
                        cnt += 1
            return cnt
        m, n = len(board), len(board[0])
        for i in range(m):
            for j in range(n):
                cnt = count(i, j)
                if board[i][j] == 1:
                    if cnt < 2 or cnt > 3:
                        board[i][j] = 2
                else:
                    if cnt == 3:
                        board[i][j] = 3
        for i in range(m):
            for j in range(n):
                if board[i][j] == 3:
                    board[i][j] = 1
                elif board[i][j] == 2:
                    board[i][j] = 0

=======

def gameOfLife(self, board: List[List[int]]) -> None:
        """
        Do not return anything, modify board in-place instead.
        """
        def get_neighbors(i, j):
            for x in range(max(0, i - 1), min(i + 2, len(board))):
                for y in range(max(0, j - 1), min(j + 2, len(board[0]))):
                    yield x, y
        
        def get_live_neighbors(i, j):
            for x, y in get_neighbors(i, j):
                if x == i and y == j:
                    continue
                yield x, y
        
        def count_live_neighbors(i, j):
            count = 0
            for x, y in get_live_neighbors(i, j):
                count += board[x][y] & 1
            return count
        
        for i in range(len(board)):
            for j in range(len(board[0])):
                count = count_live_neighbors(i, j)
                if board[i][j] == 0:
                    if count == 3:
                        board[i][j] = 2
                else:
                    if count < 2 or count > 3:
                        board[i][j] = 1
        
        for i in range(len(board)):
            for j in range(len(board[0])):
                board[i][j] >>= 1

=======

def gameOfLife(self, board: List[List[int]]) -> None:
        """
        Do not return anything, modify board in-place instead.
        """
        def check_live(i, j):
            count = 0
            for x in range(i-1, i+2):
                for y in range(j-1, j+2):
                    if x == i and y == j:
                        continue
                    if 0 <= x < len(board) and 0 <= y < len(board[0]):
                        if board[x][y] == 1 or board[x][y] == -1:
                            count += 1
            return count
        
        for i in range(len(board)):
            for j in range(len(board[0])):
                count = check_live(i, j)
                if board[i][j] == 1 and (count < 2 or count > 3):
                    board[i][j] = -1
                if board[i][j] == 0 and count == 3:
                    board[i][j] = 2
        for i in range(len(board)):
            for j in range(len(board[0])):
                if board[i][j] == 2:
                    board[i][j] = 1
                if board[i][j] == -1:
                    board[i][j] = 0

=======

def gameOfLife(self, board: List[List[int]]) -> None:
        """
        Do not return anything, modify board in-place instead.
        """
        # Get the number of rows and columns
        rows = len(board)
        cols = len(board[0])
        
        # Iterate through the board
        for i in range(rows):
            for j in range(cols):
                # Get the number of live neighbors
                live_neighbors = 0
                for x in range(i-1, i+2):
                    for y in range(j-1, j+2):
                        if (x >= 0 and x < rows and y >= 0 and y < cols and (x != i or y != j) and abs(board[x][y]) == 1):
                            live_neighbors += 1
                
                # Rule 1 or 3
                if (board[i][j] == 1 and (live_neighbors < 2 or live_neighbors > 3)):
                    # -1 represents the cell is now dead but originally was live.
                    board[i][j] = -1
                # Rule 4
                if (board[i][j] == 0 and live_neighbors == 3):
                    # 2 represents the cell is now live but was originally dead.
                    board[i][j] = 2
        
        # Get the final representation for the newly updated board.
        for i in range(rows):
            for j in range(cols):
                if (board[i][j] > 0):
                    board[i][j] = 1
                else:
                    board[i][j] = 0
