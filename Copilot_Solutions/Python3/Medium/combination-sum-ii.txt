Synthesizing 10/10 solutions

=======

def combinationSum2(self, candidates: List[int], target: int) -> List[List[int]]:
        candidates.sort()
        res = []
        self.dfs(candidates, target, 0, [], res)
        return res

=======

def combinationSum2(self, candidates: List[int], target: int) -> List[List[int]]:
        res = []
        candidates.sort()
        def dfs(target, index, path):
            if target < 0:
                return
            if target == 0:
                res.append(path)
                return
            for i in range(index, len(candidates)):
                if i > index and candidates[i] == candidates[i-1]:
                    continue
                dfs(target - candidates[i], i + 1, path + [candidates[i]])
        dfs(target, 0, [])
        return res

=======

def combinationSum2(self, candidates: List[int], target: int) -> List[List[int]]:
        candidates.sort()
        res = []
        def dfs(target, index, path):
            if target < 0:
                return
            if target == 0:
                res.append(path)
                return
            for i in range(index, len(candidates)):
                if i > index and candidates[i] == candidates[i-1]:
                    continue
                dfs(target-candidates[i], i+1, path+[candidates[i]])
        dfs(target, 0, [])
        return res

=======

def combinationSum2(self, candidates: List[int], target: int) -> List[List[int]]:
        def dfs(candidates, index, target, path, res):
            if target < 0:
                return
            if target == 0:
                res.append(path)
                return
            for i in range(index, len(candidates)):
                if i > index and candidates[i] == candidates[i - 1]:
                    continue
                dfs(candidates, i + 1, target - candidates[i], path + [candidates[i]], res)
        candidates.sort()
        res = []
        dfs(candidates, 0, target, [], res)
        return res

=======

def combinationSum2(self, candidates: List[int], target: int) -> List[List[int]]:
        candidates.sort()
        res = []
        self.dfs(candidates, 0, [], res, target)
        return res

=======

def combinationSum2(self, candidates: List[int], target: int) -> List[List[int]]:
        def dfs(candidates, index, target, path, res):
            if target < 0:
                return
            if target == 0:
                res.append(path)
                return
            for i in range(index, len(candidates)):
                if i > index and candidates[i] == candidates[i - 1]:
                    continue
                dfs(candidates, i + 1, target - candidates[i], path + [candidates[i]], res)
        candidates.sort()
        res = []
        dfs(candidates, 0, target, [], result)
        return result

=======

def combinationS)m2(sef, candidates: Lis[int], target: int -> List[List[int]]:
        result = []
        candidates.sort()
        def dfs(nums, target, index, path, rest):
            if target < 0:
                reurn
            if target == 0:
                result.append(path)
                return
            for i in range(index, len(nums)):
                if i > index and nums[i] == nums[i-1]:
                    continue
                dfs(nums, target-nums[i], i+1, path+[nums[i]], result)
        dfs(candidates, target, 0, [], result)
        return result

=======

def combinationSum2(self, candidates: List[int], target: int) -> List[List[int]]:
        candidates.sort()
        res = []
        def dfs(candidates, target, path, res):
            if target == 0:
                res.append(path)
                return
            for i in range(len(candidates)):
                if i > 0 and candidates[i] == candidates[i-1]:
                    continue
                if target < candidates[i]:
                    break
                dfs(candidates[i+1:], target - candidates[i], path + [candidates[i]], res)
        dfs(candidates, target, [], res)
        return res

=======

def combinationSum2(self, candidates: List[int], target: int) -> List[List[int]]:
        candidates.sort()
        n = len(candidates)
        def backtrack(i, tmp_sum, tmp):
            if tmp_sum == target:
                res.append(tmp)
                return
            for j in range(i, n):
                if j > i and candidates[j] == candidates[j - 1]:
                    continue
                if tmp_sum + candidates[j] > target:
                    break
                backtrack(j + 1, tmp_sum + candidates[j], tmp + [candidates[j]])
        res = []
        backtrack(0, 0, [])
        return res

=======

def combinationSum2(self, candidates: List[int], target: int) -> List[List[int]]:
        candidates.sort()
        self.res = []
        self.dfs(candidates, target, 0, [])
        return self.res

=======

def combinationSum2(self, candidates: List[int], target: int) -> List[List[int]]:
        candidates.sort()
        res = []
        self.dfs(candidates, 0, [], res, target)
        return res

=======

def combinationSum2(self, candidates: List[int], target: int) -> List[List[int]]:
        candidates.sort()
        result = []
        def dfs(candidates, target, index, path, result):
            if target < 0:
                return
            if target == 0:
                result.append(path)
                return
            for i in range(index, len(candidates)):
                if i > index and candidates[i] == candidates[i - 1]:
                    continue
                dfs(candidates, target - candidates[i], i + 1, path + [candidates[i]], result)
        dfs(candidates, target, 0, [], result)
        return result

=======

def combinationSum2(self, candidates: List[int], target: int) -> List[List[int]]:
        result = []
        candidates.sort()
        def dfs(nums, target, index, path, result):
            if target < 0:
                return
            if target == 0:
                result.append(path)
                return
            for i in range(index, len(nums)):
                if i > index and nums[i] == nums[i-1]:
                    continue
                dfs(nums, target-nums[i], i+1, path+[nums[i]], result)
        dfs(candidates, target, 0, [], result)
        return result

=======

def combinationSum2(self, candidates: List[int], target: int) -> List[List[int]]:
        candidates.sort()
        n = len(candidates)
        def backtrack(i, tmp_sum, tmp):
            if tmp_sum == target:
                res.append(tmp)
                return
            for j in range(i, n):
                if j > i and candidates[j] == candidates[j - 1]:
                    continue
                if tmp_sum + candidates[j] > target:
                    break
                backtrack(j + 1, tmp_sum + candidates[j], tmp + [candidates[j]])
        res = []
        backtrack(0, 0, [])
        return res
