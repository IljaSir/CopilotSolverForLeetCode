Synthesizing 10/10 solutions (Duplicates hidden)

=======

def canCompleteCircuit(self, gas: List[int], cost: List[int]) -> int:
        tank = 0
        start = 0
        total = 0
        for i in range(len(gas)):
            tank += gas[i] - cost[i]
            if tank < 0:
                start = i + 1
                total += tank
                tank = 0
        return start if total + tank >= 0 else -1

=======

def canCompleteCircuit(self, gas: List[int], cost: List[int]) -> int:
        n = len(gas)
        for i in range(n):
            if gas[i] >= cost[i]:
                tank = gas[i] - cost[i]
                j = (i + 1) % n
                while j != i:
                    tank += gas[j] - cost[j]
                    if tank < 0:
                        break
                    j = (j + 1) % n
                if j == i:
                    return i
        return -1

=======

def canCompleteCircuit(self, gas: List[int], cost: List[int]) -> int:
        n, start, tank = len(gas), 0, 0
        for i in range(n):
            tank += gas[i] - cost[i]
            if tank < 0:
                start = i + 1
                tank = 0
        if start == n:
            return -1
        for i in range(start):
            tank += gas[i] - cost[i]
            if tank < 0:
                return -1
        return start

=======

def canCompleteCircuit(self, gas: List[int], cost: List[int]) -> int:
        n = len(gas)
        for i in range(n):
            if gas[i] < cost[i]:
                continue
            tank = gas[i] - cost[i]
            j = (i + 1) % n
            while j != i:
                tank += gas[j] - cost[j]
                if tank < 0:
                    break
                j = (j + 1) % n
            if j == i:
                return i
        return -1

=======

def canCompleteCircuit(self, gas: List[int], cost: List[int]) -> int:
        n = len(gas)
        for i in range(n):
            if gas[i] >= cost[i]:
                j = i
                tank = 0
                while tank >= 0:
                    tank += gas[j] - cost[j]
                    j = (j + 1) % n
                    if j == i:
                        return i
        return -1

=======

def canCompleteCircuit(self, gas: List[int], cost: List[int]) -> int:
        n = len(gas)
        for i in range(n):
            if gas[i] >= cost[i]:
                tank = gas[i] - cost[i]
                for j in range(1,n):
                    k = (i+j)%n
                    tank += gas[k] - cost[k]
                    if tank < 0:
                        break
                if tank >= 0:
                    return i
        return -1

=======

def canCompleteCircuit(self, gas: List[int], cost: List[int]) -> int:
        # if sum(gas) < sum(cost):
        #     return -1
        # for i in range(len(gas)):
        #     if gas[i] < cost[i]:
        #         continue
        #     gas_left = gas[i]
        #     for j in range(len(gas)):
        #         gas_left -= cost[(j+i)%len(gas)]
        #         if gas_left < 0:
        #             break
        #         gas_left += gas[(j+i+1)%len(gas)]
        #     if gas_left >= 0:
        #         return i
        # return -1
        n = len(gas)
        for i in range(n):
            if gas[i] < cost[i]:
                continue
            gas_left = gas[i]
            for j in range(n):
                gas_left -= cost[(j+i)%n]
                if gas_left < 0:
                    break
                gas_left += gas[(j+i+1)%n]
            if gas_left >= 0:
                return i
        return -1
