Synthesizing 10/10 solutions

=======

def singleNumber(self, nums: List[int]) -> List[int]:
        xor = 0
        for n in nums:
            xor ^= n
        mask = xor & -xor
        a, b = 0, 0
        for n in nums:
            if n & mask:
                a ^= n
            else:
                b ^= n
        return [a, b]

=======

def singleNumber(self, nums: List[int]) -> List[int]:
        xor = 0
        for num in nums:
            xor ^= num
        mask = xor & (-xor)
        res = [0, 0]
        for num in nums:
            if num & mask:
                res[0] ^= num
            else:
                res[1] ^= num
        return res

=======

def singleNumber(self, nums: List[int]) -> List[int]:
        res = []
        for i in nums:
            if i not in res:
                res.append(i)
            else:
                res.remove(i)
        return res

=======

def singleNumber(self, nums: List[int]) -> List[int]:
        a = b = 0
        for n in nums:
            ab = a & b
            a = (a ^ n) & ~ab
            b = (b ^ n) & ~ab
        return [a, b]

=======

def singleNumber(self, nums: List[int]) -> List[int]:
        a = 0
        for n in nums:
            a ^= n
        b = 1
        while a & b == 0:
            b <<= 1
        c = 0
        d = 0
        for n in nums:
            if n & b == 0:
                c ^= n
            else:
                d ^= n
        return [c, d]

=======

def singleNumber(self, nums: List[int]) -> List[int]:
        xor = 0
        for num in nums:
            xor ^= num
        mask = 1
        while (mask & xor) == 0:
            mask <<= 1
        a = b = 0
        for num in nums:
            if num & mask == 0:
                a ^= num
            else:
                b ^= num
        return [a, b]

=======

def singleNumber(self, nums: List[int]) -> List[int]:
        # return list(set(nums) - set([x for x in nums if nums.count(x) == 2]))
        d = {}
        for x in nums:
            if x not in d:
                d[x] = 1
            else:
                d[x] += 1
        return [k for k, v in d.items() if v == 1]

=======

class Solution:
    def singleNumber(self, nums: List[int]) -> List[int]:
        # 1 2 1 3 2 5
        # 1 1 2 2 3 5
        # 1 0 1 0 1 1
        # 1 1 1 0 0 1
        # 1 0 0 0 1 0
        # 1 0 0 1 1 0
        # 1 0 0 1 0 1
        # 1 0 0 1 1 1
        # 1 0 0 1 1 1
        # 1 0 0 1 1 0
        # 1 0 0 1 0 0
        # 1 0 0 1 0 0
        # 1 0 0 0 0 0
        # 1 0 0 0 0 1
        # 1 0 0 0 1 1
        # 1 0 0 1 1 1
        # 1 0 0 1 1 0
        # 1 0 0 1 0 0
        # 1 0 0 1 0 0
        # 1 0 0 0 0 0
        # 1 0 0 0 0 1
        # 1 0 0 0 1 1
        # 1 0 0 1 1 1
        # 1 0 0 1 1 0
        # 1 0 0 1 0 0
        # 1 0 0 1 0 0
        # 1 0 0 0 0 0
        # 1 0 0 0 0 1
        # 1 0 0 0 1 1
        # 1 0 0 1 1 1
        # 1 0 0 1 1 0
        # 1 0 0 1 0 0
        # 1 0 0 1 0 0
        # 1

=======

class Solution:
    def singleNumber(self, nums: List[int]) -> List[int]:
        # bit manipulation
        # a ^ a = 0
        # a ^ 0 = a
        # a ^ b ^ a = a ^ a ^ b = 0 ^ b = b
        # a ^ b ^ c = (a ^ b) ^ c
        # a ^ b ^ c = a ^ (b ^ c)
        # a ^ b ^ c = a ^ c ^ b
        # a ^ b ^ c = c ^ b ^ a
        # a ^ a = 0
        # a ^ 0 = a
        # a ^ b ^ a = a ^ a ^ b = 0 ^ b = b
        # a ^ b ^ c = (a ^ b) ^ c
        # a ^ b ^ c = a ^ (b ^ c)
        # a ^ b ^ c = a ^ c ^ b
        # a ^ b ^ c = c ^ b ^ a
        # a ^ b ^ c = c ^ a ^ b
        # a ^ b ^ c = b ^ c ^ a
        # a ^ b ^ c = b ^ a ^ c
        # a ^ b ^ c = b ^ c ^ a
        # a ^ b ^ c = c ^ b ^ a
        # a ^ b ^ c = c ^ a ^ b
        # a ^ b ^ c = b ^ c ^ a
        # a ^ b ^ c = b ^ a ^ c
        # a ^ b ^ c = b ^ c ^ a
        # a ^ b ^ c = c ^ b ^ a
        # a ^ b ^ c = c ^ a ^ b
        # a ^ b ^ c = b ^ c ^ a
        # a ^ b ^ c = b ^ a ^ c
        # a ^ b ^ c = b ^ c ^ a
        # a ^ b ^ c = c ^ b ^ a
        # a ^ b ^ c = c ^ a ^ b
        # a ^ b ^ c = b ^ c ^ a
        # a ^ b ^ c = b ^ a ^ c
        # a ^ b ^ c = b ^ c ^ a
        # a ^ b ^ c = c ^ b ^ a
        # a ^ b ^ c = c ^ a ^ b
        # a ^

=======

def singleNumber(self, nums: List[int]) -> List[int]:
        # find the xor of the two numbers
        xor = 0
        for num in nums:
            xor ^= num
        # find the first bit that is 1
        mask = 1
        while (xor & mask) == 0:
            mask <<= 1
        a, b = 0, 0
        for num in nums:
            if (num & mask) != 0:
                a ^= num
            else:
                b ^= num
        return [a, b]
