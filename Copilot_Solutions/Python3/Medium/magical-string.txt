Synthesizing 8/10 solutions (Duplicates hidden)

=======

def magicalString(self, n: int) -> int:
        s = [1, 2, 2]
        i = 2
        while len(s) < n:
            s += [3 - s[-1]] * s[i]
            i += 1
        return s[:n].count(1)

=======

def magicalString(self, n: int) -> int:
        s = '122'
        i = 2
        while len(s) < n:
            s += str(3 - int(s[-1])) * int(s[i])
            i += 1
        return s[:n].count('1')

=======

def magicalString(self, n: int) -> int:
        if n == 0:
            return 0
        if n <= 3:
            return 1
        s = [1, 2, 2]
        i = 2
        while len(s) < n:
            s += s[-1] ^ 3, s[i]
            i += 1
        return s[:n].count(1)

=======

def magicalString(self, n: int) -> int:
        s = [1, 2, 2]
        i, j = 2, 2
        while len(s) < n:
            s += [3 - s[-1]] * s[j]
            j += 1
        return s[:n].count(1)
