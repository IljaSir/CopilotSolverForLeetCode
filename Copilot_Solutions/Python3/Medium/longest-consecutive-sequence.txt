Synthesizing 10/10 solutions

=======

def longestConsecutive(self, nums: List[int]) -> int:
        nums = set(nums)
        count = 0
        for i in nums:
            if i-1 not in nums:
                j = i
                while j in nums:
                    j += 1
                count = max(count, j-i)
        return count

=======

def longestConsecutive(self, nums: List[int]) -> int:
        nums = set(nums)
        res = 0
        for n in nums:
            if n-1 not in nums:
                curr = 1
                while n+1 in nums:
                    n += 1
                    curr += 1
                res = max(res, curr)
        return res

=======

def longestConsecutive(self, nums: List[int]) -> int:
        if not nums:
            return 0
        nums.sort()
        count = 1
        max_count = 1
        for i in range(1, len(nums)):
            if nums[i] == nums[i-1]:
                continue
            if nums[i] == nums[i-1] + 1:
                count += 1
                max_count = max(max_count, count)
            else:
                count = 1
        return max_count

=======

def longestConsecutive(self, nums: List[int]) -> int:
        if not nums:
            return 0
        nums = set(nums)
        res = 1
        for n in nums:
            if n-1 not in nums:
                m = n + 1
                while m in nums:
                    m += 1
                res = max(res, m-n)
        return res

=======

def longestConsecutive(self, nums: List[int]) -> int:
        nums = set(nums)
        max_len = 0
        for n in nums:
            if n-1 not in nums:
                curr = n
                while curr in nums:
                    curr += 1
                max_len = max(max_len, curr - n)
        return max_len

=======

def longestConsecutive(self, nums: List[int]) -> int:
        if not nums:
            return 0
        nums = set(nums)
        ans = 1
        for num in nums:
            if num-1 not in nums:
                cur = num
                while cur+1 in nums:
                    cur += 1
                ans = max(ans, cur-num+1)
        return ans

=======

def longestConsecutive(self, nums: List[int]) -> int:
        if not nums:
            return 0
        nums = set(nums)
        ans = 1
        for num in nums:
            if num-1 not in nums:
                curr = 1
                while num+1 in nums:
                    num += 1
                    curr += 1
                ans = max(ans, curr)
        return ans

=======

def longestConsecutive(self, nums: List[int]) -> int:
        if not nums:
            return 0
        nums = set(nums)
        max_len = 1
        for num in nums:
            if num - 1 not in nums:
                curr = num
                curr_len = 1
                while curr + 1 in nums:
                    curr += 1
                    curr_len += 1
                max_len = max(max_len, curr_len)
        return max_len

=======

def longestConsecutive(self, nums: List[int]) -> int:
        nums = set(nums)
        longest = 0
        for n in nums:
            if n-1 not in nums:
                current = n
                current_length = 1
                while current + 1 in nums:
                    current += 1
                    current_length += 1
                longest = max(longest, current_length)
        return longest

=======

def longestConsecutive(self, nums: List[int]) -> int:
        if len(nums) <= 1:
            return len(nums)
        nums = set(nums)
        longest = 0
        for num in nums:
            if num - 1 not in nums:
                current = num
                current_length = 1
                while current + 1 in nums:
                    current += 1
                    current_length += 1
                longest = max(longest, current_length)
        return longest
