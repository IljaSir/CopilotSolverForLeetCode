Synthesizing 10/10 solutions

=======

def countArrangement(self, n: int) -> int:
        def dfs(nums, pos):
            if pos == 1:
                return 1
            res = 0
            for i in range(len(nums)):
                if nums[i] % pos == 0 or pos % nums[i] == 0:
                    res += dfs(nums[:i] + nums[i+1:], pos-1)
            return res
        return dfs(list(range(1, n+1)), n)

=======

def countArrangement(self, n: int) -> int:
        def dfs(index, nums):
            if index == 1:
                return 1
            count = 0
            for i in range(len(nums)):
                if nums[i] % index == 0 or index % nums[i] == 0:
                    count += dfs(index - 1, nums[:i] + nums[i + 1:])
            return count
        return dfs(n, list(range(1, n + 1)))

=======

def countArrangement(self, n: int) -> int:
        def dfs(pos, used):
            if pos == n + 1:
                return 1
            ans = 0
            for i in range(1, n + 1):
                if not used[i] and (pos % i == 0 or i % pos == 0):
                    used[i] = True
                    ans += dfs(pos + 1, used)
                    used[i] = False
            return ans
        used = [False] * (n + 1)
        return dfs(1, used)

=======

def countArrangement(self, n: int) -> int:
        def dfs(nums, i):
            if i == 1:
                return 1
            return sum(dfs(nums[:j] + nums[j+1:], i-1) for j, num in enumerate(nums) if num % i == 0 or i % num == 0)
        return dfs(tuple(range(1, n+1)), n)

=======

def countArrangement(self, n: int) -> int:
        def dfs(cur, used):
            if cur > n:
                return 1
            ans = 0
            for i in range(1, n + 1):
                if not used[i] and (i % cur == 0 or cur % i == 0):
                    used[i] = True
                    ans += dfs(cur + 1, used)
                    used[i] = False
            return ans
        used = [False] * (n + 1)
        return dfs(1, used)

=======

def countArrangement(self, n: int) -> int:
        def backtrack(i, n, used):
            if i > n:
                return 1
            res = 0
            for j in range(1, n+1):
                if j not in used and (j % i == 0 or i % j == 0):
                    used.add(j)
                    res += backtrack(i+1, n, used)
                    used.remove(j)
            return res
        return backtrack(1, n, set())

=======

def countArrangement(self, n: int) -> int:
        self.n = n
        self.ans = 0
        self.visited = [False] * (n+1)
        self.dfs(1)
        return self.ans

=======

def countArrangement(self, n: int) -> int:
        def backtrack(i, n, visited):
            if i > n:
                return 1
            count = 0
            for j in range(1, n+1):
                if visited[j] == 0 and (i % j == 0 or j % i == 0):
                    visited[j] = 1
                    count += backtrack(i+1, n, visited)
                    visited[j] = 0
            return count
        return backtrack(1, n, [0]*(n+1))

=======

def countArrangement(self, n: int) -> int:
        self.count = 0
        def backtrack(perm, i):
            if i == n:
                self.count += 1
                return
            for j in range(i, n):
                perm[i], perm[j] = perm[j], perm[i]
                if perm[i] % (i+1) == 0 or (i+1) % perm[i] == 0:
                    backtrack(perm, i+1)
                perm[i], perm[j] = perm[j], perm[i]
        backtrack([i for i in range(1, n+1)], 0)
        return self.count

=======

def countArrangement(self, n: int) -> int:
        self.res = 0
        self.dfs(n, 1, [0]*(n+1))
        return self.res
