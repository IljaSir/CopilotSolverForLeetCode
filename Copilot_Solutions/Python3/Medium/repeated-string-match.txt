Synthesizing 10/10 solutions (Duplicates hidden)

=======

def repeatedStringMatch(self, a: str, b: str) -> int:
        if b in a:
            return 1
        elif b in a*2:
            return 2
        elif b in a*3:
            return 3
        else:
            return -1

=======

def repeatedStringMatch(self, a: str, b: str) -> int:
        if b in a:
            return 1
        elif b in a+a:
            return 2
        elif b in a+a+a:
            return 3
        else:
            return -1

=======

def repeatedStringMatch(self, a: str, b: str) -> int:
        for i in range(1, len(b) // len(a) + 3):
            if b in a * i:
                return i
        return -1

=======

def repeatedStringMatch(self, a: str, b: str) -> int:
        if b in a:
            return 1
        elif b in a*2:
            return 2
        elif b in a*3:
            return 3
        return -1

=======

def repeatedStringMatch(self, a: str, b: str) -> int:
        if b in a:
            return 1
        if b in a+a:
            return 2
        if b in a+a+a:
            return 3
        return -1

=======

def repeatedStringMatch(self, a: str, b: str) -> int:
        if b in a:
            return 1
        if len(b) > len(a):
            if b in a*2:
                return 2
            if b in a*3:
                return 3
            return -1
        if len(b) == len(a):
            if b in a*2:
                return 2
            return -1
        if len(b) < len(a):
            if b in a:
                return 1
            if b in a*2:
                return 2
            if b in a*3:
                return 3
            return -1

=======

def repeatedStringMatch(self, a: str, b: str) -> int:
        i = 0
        while i < len(b):
            j = 0
            while i < len(b) and j < len(a) and a[j] == b[i]:
                i += 1
                j += 1
            if j == len(a):
                if i < len(b):
                    i -= j
                else:
                    return (len(b) + len(a) - 1) // len(a)
            i -= j
            i += 1
        return -1

=======

def repeatedStringMatch(self, a: str, b: str) -> int:
        if b in a:
            return 1
        if len(a) > len(b):
            if b in a + a:
                return 2
            else:
                return -1
        else:
            if b in (a * 2):
                return 2
            if b in (a * 3):
                return 3
            if b in (a * 4):
                return 4
            return -1
