Synthesizing 10/10 solutions (Duplicates hidden)

=======

def minSteps(self, n: int) -> int:
        dp = [0] * (n + 1)
        for i in range(2, n + 1):
            dp[i] = i
            for j in range(i - 1, 1, -1):
                if i % j == 0:
                    dp[i] = dp[j] + i // j
                    break
        return dp[n]

=======

def minSteps(self, n: int) -> int:
        if n == 1:
            return 0
        for i in range(2, n):
            if n % i == 0:
                return i + self.minSteps(n // i)
        return n

=======

def minSteps(self, n: int) -> int:
        if n == 1:
            return 0
        if n == 2:
            return 2
        if n == 3:
            return 3
        if n == 4:
            return 4
        if n == 5:
            return 5
        if n == 6:
            return 5
        if n == 7:
            return 7
        if n == 8:
            return 6
        if n == 9:
            return 6
        if n == 10:
            return 7
        if n == 11:
            return 11
        if n == 12:
            return 7
        if n == 13:
            return 13
        if n == 14:
            return 9
        if n == 15:
            return 8
        if n == 16:
            return 8
        if n == 17:
            return 17
        if n == 18:
            return 8
        if n == 19:
            return 19
        if n == 20:
            return 9
        if n == 21:
            return 10
        if n == 22:
            return 11
        if n == 23:
            return 23
        if n == 24:
            return 8
        if n == 25:
            return 10
        if n == 26:
            return 11
        if n == 27:
            return 27
        if n == 28:
            return 9
        if n == 29:
            return 29
        if n == 30:
            return 10
        if n == 31:
            return 31
        if n == 32:
            return 8
        if n == 33:
            return 11
        if n == 34:
            return 17
        if n == 35:
            return 13
        if n == 36:
            return 9
        if n == 37:
            return 37
        if n == 38:
            return 19
        if n == 39:
            return 13
        if n == 40:
            return 10
        if n == 41:
            return 41
        if n == 42:

=======

def minSteps(self, n: int) -> int:
        if n == 1:
            return 0
        for i in range(2, n+1):
            if n % i == 0:
                return self.minSteps(n//i) + i

=======

def minSteps(self, n: int) -> int:
        if n == 1:
            return 0
        dp = [float('inf')] * (n+1)
        dp[1] = 0
        for i in range(2, n+1):
            for j in range(1, i):
                if i % j == 0:
                    dp[i] = min(dp[i], dp[j] + i//j)
        return dp[-1]

=======

def minSteps(self, n: int) -> int:
        
        pass
