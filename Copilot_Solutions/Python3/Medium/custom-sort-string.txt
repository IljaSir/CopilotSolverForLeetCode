Synthesizing 10/10 solutions (Duplicates hidden)

=======

def customSortString(self, order: str, s: str) -> str:
        d = {c: i for i, c in enumerate(order)}
        return ''.join(sorted(s, key=lambda x: d.get(x, 0)))

=======

def customSortString(self, order: str, s: str) -> str:
        from collections import Counter
        count = Counter(s)
        res = ""
        for c in order:
            if c in count:
                res += c * count[c]
                del count[c]
        for c in count:
            res += c * count[c]
        return res

=======

def customSortString(self, order: str, s: str) -> str:
        order = {c: i for i, c in enumerate(order)}
        return ''.join(sorted(s, key=lambda c: order.get(c, 0)))

=======

def customSortString(self, order: str, s: str) -> str:
        order = {c: i for i, c in enumerate(order)}
        return ''.join(sorted(s, key=lambda x: order.get(x, 0)))

=======

def customSortString(self, order: str, s: str) -> str:
        order = list(order)
        s = list(s)
        s.sort(key=lambda x: order.index(x) if x in order else 100)
        return ''.join(s)

=======

def customSortString(self, order: str, s: str) -> str:
        order = order[::-1]
        for c in order:
            s = s.replace(c, '')
        return s + order

=======

def customSortString(self, order: str, s: str) -> str:
        # print(order, s)
        order = list(order)
        s = list(s)
        # print(order, s)
        d = {}
        for i, c in enumerate(order):
            d[c] = i
        s.sort(key = lambda x: d.get(x, 26))
        return ''.join(s)

=======

def customSortString(self, order: str, s: str) -> str:
        # sort the string s based on the order of characters in the string order
        # return the sorted string
        # for each character in order, find it in s
        # if it is in s, add it to the new string
        # remove it from s
        # add the remaining characters in s to the new string
        new = ""
        for c in order:
            if c in s:
                new += c * s.count(c)
                s = s.replace(c, "")
        new += s
        return new
