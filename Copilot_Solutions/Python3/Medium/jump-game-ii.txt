Synthesizing 10/10 solutions

=======

def jump(self, nums: List[int]) -> int:
        n = len(nums)
        dp = [n] * n
        dp[0] = 0
        for i in range(n):
            for j in range(1, nums[i] + 1):
                if i + j < n:
                    dp[i + j] = min(dp[i + j], dp[i] + 1)
        return dp[-1]

=======

def jump(self, nums: List[int]) -> int:
        n = len(nums)
        dp = [0] * n
        for i in range(n):
            for j in range(1, nums[i] + 1):
                if i + j < n:
                    dp[i + j] = min(dp[i + j], dp[i] + 1) if dp[i + j] else dp[i] + 1
                else:
                    break
        return dp[-1]

=======

def jump(self, nums: List[int]) -> int:
        n = len(nums)
        if n == 1:
            return 0
        if nums[0] >= n-1:
            return 1
        if nums[0] == 0:
            return -1
        maxReach = nums[0]
        steps = nums[0]
        jumps = 1
        for i in range(1, n):
            if i == n-1:
                return jumps
            maxReach = max(maxReach, i+nums[i])
            steps -= 1
            if steps == 0:
                jumps += 1
                if i >= maxReach:
                    return -1
                steps = maxReach - i
        return -1

=======

def jump(self, nums: List[int]) -> int:
        n = len(nums)
        if n == 1:
            return 0
        step = 0
        max_pos = 0
        end = 0
        for i in range(n-1):
            max_pos = max(max_pos, i+nums[i])
            if i == end:
                step += 1
                end = max_pos
        return step

=======

def jump(self, nums: List[int]) -> int:
        n = len(nums)
        if n == 1:
            return 0
        if nums[0] >= n - 1:
            return 1
        if nums[0] == 0:
            return float("inf")
        min_jump = float("inf")
        for i in range(1, nums[0] + 1):
            min_jump = min(min_jump, 1 + self.jump(nums[i:]))
        return min_jump

=======

def jump(self, nums: List[int]) -> int:
        n = len(nums)
        if n == 1:
            return 0
        jumps = [0] * n
        for i in range(n-2, -1, -1):
            if i + nums[i] >= n-1:
                jumps[i] = 1
            else:
                min_jumps = float('inf')
                for j in range(1, nums[i]+1):
                    if min_jumps > jumps[i+j]:
                        min_jumps = jumps[i+j]
                jumps[i] = min_jumps + 1
        return jumps[0]

=======

def jump(self, nums: List[int]) -> int:
        n = len(nums)
        if n <= 1:
            return 0
        step = 0
        cur_max = 0
        cur_rch = 0
        for i in range(n):
            if cur_rch < i:
                step += 1
                cur_rch = cur_max
            cur_max = max(cur_max, nums[i] + i)
        return step

=======

def jump(self, nums: List[int]) -> int:
        """
        :type nums: List[int]
        :rtype: int
        """
        n = len(nums)
        if n == 1:
            return 0
        ans = 0
        cur = 0
        next = 0
        for i in range(n):
            next = max(next, i + nums[i])
            if i == cur:
                ans += 1
                cur = next
            if cur >= n - 1:
                return ans
        return ans

=======

def jump(self, nums: List[int]) -> int:
        n = len(nums)
        if n == 1: return 0
        max_reach = nums[0]
        jumps = 1
        end = nums[0]
        for i in range(1, n):
            if i == n - 1: return jumps
            max_reach = max(max_reach, i + nums[i])
            if i == end:
                jumps += 1
                end = max_reach

=======

def jump(self, nums: List[int]) -> int:
        n = len(nums)
        if n == 1:
            return 0
        if nums[0] >= n - 1:
            return 1
        # dp[i] = min(dp[i - j]) + 1 for all j <= nums[i - 1]
        dp = [n] * n
        dp[0] = 0
        for i in range(1, n):
            for j in range(1, nums[i - 1] + 1):
                if i - j < 0:
                    break
                dp[i] = min(dp[i], dp[i - j] + 1)
        return dp[-1]
