Synthesizing 10/10 solutions (Duplicates hidden)

=======

def lastRemaining(self, n: int) -> int:
        return 1 if n == 1 else 2 * (1 + n // 2 - self.lastRemaining(n // 2))

=======

def lastRemaining(self, n: int) -> int:
        return 1 if n == 1 else 2 * (n // 2 + 1 - self.lastRemaining(n // 2))

=======

def lastRemaining(self, n: int) -> int:
        if n == 1:
            return 1
        if n % 2 == 0:
            return 2 * self.lastRemaining(n // 2)
        else:
            return 2 * self.lastRemaining(n // 2) - 1

=======

def lastRemaining(self, n: int) -> int:
        if n == 1:
            return 1
        return 2 * (1 + n // 2 - self.lastRemaining(n // 2))
