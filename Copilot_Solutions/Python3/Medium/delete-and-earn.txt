Synthesizing 10/10 solutions

=======

def deleteAndEarn(self, nums: List[int]) -> int:
        n = max(nums)
        dp = [0]*(n+1)
        for num in nums:
            dp[num] += num
        for i in range(2, n+1):
            dp[i] = max(dp[i-1], dp[i-2]+dp[i])
        return dp[n]

=======

def deleteAndEarn(self, nums: List[int]) -> int:
        if not nums:
            return 0
        max_val = max(nums)
        dp = [0] * (max_val + 1)
        for num in nums:
            dp[num] += num
        for i in range(2, max_val + 1):
            dp[i] = max(dp[i - 1], dp[i - 2] + dp[i])
        return dp[max_val]

=======

def deleteAndEarn(self, nums: List[int]) -> int:
        if not nums:
            return 0
        if len(nums) == 1:
            return nums[0]
        dp = [0] * (max(nums) + 1)
        for num in nums:
            dp[num] += num
        for i in range(2, len(dp)):
            dp[i] = max(dp[i-1], dp[i-2] + dp[i])
        return dp[-1]

=======

def deleteAndEarn(self, nums: List[int]) -> int:
        if not nums:
            return 0
        nums.sort()
        dp = [0] * len(nums)
        dp[0] = nums[0]
        for i in range(1, len(nums)):
            if nums[i] == nums[i-1]:
                dp[i] = dp[i-1] + nums[i]
            elif nums[i] == nums[i-1] + 1:
                dp[i] = max(dp[i-1], dp[i-2] + nums[i])
            else:
                dp[i] = dp[i-1] + nums[i]
        return dp[-1]

=======

def deleteAndEarn(self, nums: List[int]) -> int:
        max_num = max(nums)
        count = [0] * (max_num + 1)
        for n in nums:
            count[n] += 1
        dp = [0] * (max_num + 1)
        dp[1] = count[1]
        for i in range(2, max_num + 1):
            dp[i] = max(dp[i - 1], dp[i - 2] + i * count[i])
        return dp[-1]

=======

def deleteAndEarn(self, nums: List[int]) -> int:
        nums.sort()
        i = 0
        while i < len(nums):
            j = i + 1
            while j < len(nums) and nums[j] == nums[i]:
                j += 1
            nums[i] = (nums[i], j - i)
            i = j
        dp = [0] * (len(nums) + 1)
        dp[1] = nums[0][0] * nums[0][1]
        for i in range(2, len(nums) + 1):
            if nums[i - 1][0] - 1 == nums[i - 2][0]:
                dp[i] = max(dp[i - 1], dp[i - 2] + nums[i - 1][0] * nums[i - 1][1])
            else:
                dp[i] = dp[i - 1] + nums[i - 1][0] * nums[i - 1][1]
        return dp[-1]

=======

def deleteAndEarn(self, nums: List[int]) -> int:
        cnt = Counter(nums)
        dp = [0] * 10001
        dp[1] = cnt[1]
        for i in range(2, 10001):
            dp[i] = max(dp[i-1], dp[i-2] + cnt[i] * i)
        return dp[-1]

=======

def deleteAndEarn(self, nums: List[int]) -> int:
        if len(nums) == 0:
            return 0
        if len(nums) == 1:
            return nums[0]
        nums.sort()
        dp = [0] * (nums[-1] + 1)
        for i in range(len(nums)):
            dp[nums[i]] += nums[i]
        dp[1] = max(dp[0], dp[1])
        for i in range(2, len(dp)):
            dp[i] = max(dp[i - 1], dp[i - 2] + dp[i])
        return dp[-1]

=======

def deleteAndEarn(self, nums: List[int]) -> int:
        max_val = max(nums)
        sum_val = [0] * (max_val + 1)
        for num in nums:
            sum_val[num] += num
        take, skip = 0, 0
        for i in range(max_val + 1):
            take, skip = skip + sum_val[i], max(take, skip)
        return max(take, skip)

=======

def deleteAndEarn(self, nums: List[int]) -> int:
        c = collections.Counter(nums)
        d = {}
        for num in c:
            d[num] = num * c[num]
        keys = sorted(d.keys())
        dp = {}
        for i, num in enumerate(keys):
            dp[i] = d[num]
            if i - 1 >= 0:
                dp[i] = max(dp[i], dp[i - 1])
            if i - 2 >= 0:
                dp[i] = max(dp[i], dp[i - 2] + d[num])
        return dp[len(keys) - 1]
