Synthesizing 10/10 solutions

=======

def judgeSquareSum(self, c: int) -> bool:
        i = 0
        while i * i <= c:
            j = int(math.sqrt(c - i * i))
            if i * i + j * j == c:
                return True
            i += 1
        return False

=======

def judgeSquareSum(self, c: int) -> bool:
        for i in range(int(c**0.5)+1):
            if (c-i**2)**0.5 == int((c-i**2)**0.5):
                return True
        return False

=======

def judgeSquareSum(self, c: int) -> bool:
        for i in range(int(c**0.5)+1):
            if int((c-i**2)**0.5)**2 == c-i**2:
                return True
        return False

=======

def judgeSquareSum(self, c: int) -> bool:
        for i in range(int(c**0.5)+1):
            if int((c-i*i)**0.5)**2 == c-i*i:
                return True
        return False

=======

def judgeSquareSum(self, c: int) -> bool:
        for i in range(int(c**0.5)+1):
            j = (c-i**2)**0.5
            if j == int(j):
                return True
        return False

=======

def judgeSquareSum(self, c: int) -> bool:
        for i in range(int(c**0.5)+1):
            if int((c-i**2)**0.5)**2+i**2 == c:
                return True
        return False

=======

def judgeSquareSum(self, c: int) -> bool:
        for i in range(int(c**0.5)+1):
            if int((c-i*i)**0.5)**2+i*i==c:
                return True
        return False

=======

def judgeSquareSum(self, c: int) -> bool:
        i = 0
        j = int(c**0.5)
        while i<=j:
            if i*i + j*j == c:
                return True
            elif i*i + j*j < c:
                i +=1
            else:
                j -=1
        return False

=======

def judgeSquareSum(self, c: int) -> bool:
        for i in range(int(math.sqrt(c))+1):
            j = math.sqrt(c - i**2)
            if j == int(j):
                return True
        return False

=======

def judgeSquareSum(self, c: int) -> bool:
        if c == 0:
            return True
        for i in range(1, int(c ** 0.5) + 1):
            if c - i ** 2 >= 0 and int((c - i ** 2) ** 0.5) ** 2 == c - i ** 2:
                return True
        return False
