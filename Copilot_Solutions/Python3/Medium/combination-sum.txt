Synthesizing 9/10 solutions (Duplicates hidden)

=======

def combinationSum(self, candidates: List[int], target: int) -> List[List[int]]:
        def dfs(candidates, target, index, path, res):
            if target < 0:
                return
            if target == 0:
                res.append(path)
                return
            for i in range(index, len(candidates)):
                dfs(candidates, target - candidates[i], i, path + [candidates[i]], res)
        res = []
        dfs(candidates, target, 0, [], res)
        return res

=======

def combinationSum(self, candidates: List[int], target: int) -> List[List[int]]:
        def dfs(candidates, target, path, res):
            if target < 0:
                return
            if target == 0:
                res.append(path)
                return
            for i in range(len(candidates)):
                dfs(candidates[i:], target - candidates[i], path + [candidates[i]], res)
        res = []
        dfs(candidates, target, [], res)
        return res

=======

def combinationSum(self, candidates: List[int], target: int) -> List[List[int]]:
        res = []
        candidates.sort()
        def dfs(candidates, target, index, path, res):
            if target < 0:
                return
            if target == 0:
                res.append(path)
                return
            for i in range(index, len(candidates)):
                dfs(candidates, target - candidates[i], i, path + [candidates[i]], res)
        dfs(candidates, target, 0, [], res)
        return res

=======

def combinationSum(self, candidates: List[int], target: int) -> List[List[int]]:
        candidates.sort()
        def dfs(remain, comb, idx):
            if remain == 0:
                res.append(comb)
                return
            for i in range(idx, len(candidates)):
                if candidates[i] > remain: break
                dfs(remain - candidates[i], comb + [candidates[i]], i)
        res = []
        dfs(target, [], 0)
        return res

=======

def combinationSum(self, candidates: List[int], target: int) -> List[List[int]]:
        def backtrack(candidates, target, start, path):
            if target < 0:
                return
            if target == 0:
                res.append(path)
                return
            for i in range(start, len(candidates)):
                backtrack(candidates, target - candidates[i], i, path + [candidates[i]])
        res = []
        backtrack(candidates, target, 0, [])
        return res

=======

def combinationSum(self, candidates: List[int], target: int) -> List[List[int]]:
        ans = []
        def dfs(candidates, target, path, ans):
            if target == 0:
                ans.append(path)
                return
            if target < 0:
                return
            for i in range(len(candidates)):
                dfs(candidates[i:], target-candidates[i], path+[candidates[i]], ans)
        dfs(candidates, target, [], ans)
        return ans

=======

def combinationSum(self, candidates: List[int], target: int) -> List[List[int]]:
        n = len(candidates)
        candidates.sort()
        res = []
        def dfs(i, target, path):
            if target < 0:
                return
            if target == 0:
                res.append(path)
                return
            for j in range(i, n):
                dfs(j, target - candidates[j], path + [candidates[j]])
        dfs(0, target, [])
        return res

=======

def combinationSum(self, candidates: List[int], target: int) -> List[List[int]]:
        if not candidates:
            return []
        res = []
        def dfs(candidates, target, path):
            if target == 0:
                res.append(path)
            for i in range(len(candidates)):
                if candidates[i] > target:
                    break
                dfs(candidates[i:], target - candidates[i], path + [candidates[i]])
        dfs(candidates, target, [])
        return res
