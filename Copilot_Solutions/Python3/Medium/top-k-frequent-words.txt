Synthesizing 10/10 solutions

=======

def topKFrequent(self, words: List[str], k: int) -> List[str]:
        word_dict = {}
        for word in words:
            if word not in word_dict:
                word_dict[word] = 1
            else:
                word_dict[word] += 1
        word_dict = sorted(word_dict.items(), key=lambda x: (-x[1], x[0]))
        return [word_dict[i][0] for i in range(k)]

=======

def topKFrequent(self, words: List[str], k: int) -> List[str]:
        word_count = {}
        for word in words:
            if word not in word_count:
                word_count[word] = 1
            else:
                word_count[word] += 1
        word_count = sorted(word_count.items(), key=lambda x: (-x[1], x[0]))
        return [word_count[i][0] for i in range(k)]

=======

def topKFrequent(self, words: List[str], k: int) -> List[str]:
        word_count = {}
        for word in words:
            if word not in word_count:
                word_count[word] = 1
            else:
                word_count[word] += 1
        word_count = sorted(word_count.items(), key=lambda x: (-x[1], x[0]))
        return [word[0] for word in word_count[:k]]

=======

def topKFrequent(self, words: List[str], k: int) -> List[str]:
        d = {}
        for w in words:
            d[w] = d.get(w, 0) + 1
        return [w for w, _ in sorted(d.items(), key=lambda x: (-x[1], x[0]))][:k]

=======

def topKFrequent(self, words: List[str], k: int) -> List[str]:
        word_dict = {}
        for word in words:
            if word not in word_dict:
                word_dict[word] = 1
            else:
                word_dict[word] += 1
        word_list = []
        for word, count in word_dict.items():
            word_list.append((word, count))
        word_list.sort(key=lambda x: (-x[1], x[0]))
        return [word for word, count in word_list[:k]]

=======

def topKFrequent(self, words: List[str], k: int) -> List[str]:
        import heapq
        from collections import Counter
        heap = []
        for word, count in Counter(words).items():
            heapq.heappush(heap, (-count, word))
        return [heapq.heappop(heap)[1] for _ in range(k)]

=======

def topKFrequent(self, words: List[str], k: int) -> List[str]:
        d = {}
        for w in words:
            if w in d:
                d[w] += 1
            else:
                d[w] = 1
        res = []
        for w in d:
            if len(res) < k:
                res.append((w, d[w]))
            else:
                res.sort(key=lambda x: (-x[1], x[0]))
                if res[k-1][1] < d[w]:
                    res[k-1] = (w, d[w])
                elif res[k-1][1] == d[w]:
                    if res[k-1][0] > w:
                        res[k-1] = (w, d[w])
        res.sort(key=lambda x: (-x[1], x[0]))
        return [x[0] for x in res]

=======

def topKFrequent(self, words: List[str], k: int) -> List[str]:
        from collections import Counter
        counter = Counter(words)
        return sorted(counter, key=lambda x: (-counter[x], x))[:k]

=======

def topKFrequent(self, words: List[str], k: int) -> List[str]:
        from collections import Counter
        return [w[0] for w in Counter(words).most_common(k)]

=======

def topKFrequent(self, words: List[str], k: int) -> List[str]:
        # Time  complexity: O(N log N)
        # Space complexity: O(N)
        return [w for w, _ in Counter(words).most_common(k)]
