Synthesizing 10/10 solutions (Duplicates hidden)

=======

def nextGreaterElement(self, n: int) -> int:
        s = list(str(n))
        i = len(s) - 2
        while i >= 0 and s[i] >= s[i + 1]:
            i -= 1
        if i < 0:
            return -1
        j = len(s) - 1
        while s[j] <= s[i]:
            j -= 1
        s[i], s[j] = s[j], s[i]
        s[i + 1:] = s[i + 1:][::-1]
        res = int(''.join(s))
        return res if res <= 2 ** 31 - 1 else -1

=======

def nextGreaterElement(self, n: int) -> int:
        s = list(str(n))
        i = len(s) - 2
        while i >= 0 and s[i] >= s[i+1]:
            i -= 1
        if i < 0:
            return -1
        j = len(s) - 1
        while s[j] <= s[i]:
            j -= 1
        s[i], s[j] = s[j], s[i]
        s[i+1:] = s[i+1:][::-1]
        res = int(''.join(s))
        return res if res < 2**31 else -1

=======

def nextGreaterElement(self, n: int) -> int:
        s = list(str(n))
        i = j = len(s)-1
        while i > 0 and s[i-1] >= s[i]:
            i -= 1
        if i == 0:
            return -1
        k = i - 1
        while s[j] <= s[k]:
            j -= 1
        s[k], s[j] = s[j], s[k]
        l, r = k+1, len(s)-1
        while l < r:
            s[l], s[r] = s[r], s[l]
            l, r = l+1, r-1
        res = int(''.join(s))
        return res if res < 2**31 else -1

=======

def nextGreaterElement(self, n: int) -> int:
        s = list(str(n))
        i = len(s) - 1
        while i > 0 and s[i-1] >= s[i]:
            i -= 1
        if i == 0:
            return -1
        j = i
        while j < len(s) and s[j] > s[i-1]:
            j += 1
        s[i-1], s[j-1] = s[j-1], s[i-1]
        s[i:] = s[i:][::-1]
        res = int("".join(s))
        return res if res < 2**31 else -1

=======

def nextGreaterElement(self, n: int) -> int:
        n = list(str(n))
        i = len(n) - 2
        while i >= 0 and n[i] >= n[i + 1]:
            i -= 1
        if i < 0:
            return -1
        j = len(n) - 1
        while n[j] <= n[i]:
            j -= 1
        n[i], n[j] = n[j], n[i]
        n[i + 1:] = n[i + 1:][::-1]
        n = int(''.join(n))
        return n if n < (1 << 31) else -1

=======

def nextGreaterElement(self, n: int) -> int:
        s = list(str(n))
        i = len(s) - 1
        while i > 0 and s[i] <= s[i-1]:
            i -= 1
        if i == 0:
            return -1
        j = len(s) - 1
        while s[j] <= s[i-1]:
            j -= 1
        s[i-1], s[j] = s[j], s[i-1]
        s[i:] = s[i:][::-1]
        res = int(''.join(s))
        return res if res < 2**31 else -1

=======

def nextGreaterElement(self, n: int) -> int:
        n = list(str(n))
        i = len(n) - 2
        while i >= 0 and n[i] >= n[i+1]:
            i -= 1
        if i < 0:
            return -1
        j = len(n) - 1
        while j >= 0 and n[j] <= n[i]:
            j -= 1
        n[i], n[j] = n[j], n[i]
        n[i+1:] = n[i+1:][::-1]
        n = int(''.join(n))
        if n > 2**31 - 1:
            return -1
        return n

=======

def nextGreaterElement(self, n: int) -> int:
        if n < 10:
            return -1
        n = list(str(n))
        i = len(n) - 2
        while i >= 0 and n[i] >= n[i+1]:
            i -= 1
        if i == -1:
            return -1
        j = i+1
        while j < len(n) and n[j] > n[i]:
            j += 1
        n[i], n[j-1] = n[j-1], n[i]
        n[i+1:] = reversed(n[i+1:])
        res = int(''.join(n))
        return res if res < 2**31 else -1

=======

def nextGreaterElement(self, n: int) -> int:
        # find the first decreasing digit
        s = list(str(n))
        i = len(s) - 2
        while i >= 0 and s[i] >= s[i+1]:
            i -= 1
        if i < 0:
            return -1
        # find the first digit that is larger than s[i]
        j = len(s) - 1
        while j > i and s[j] <= s[i]:
            j -= 1
        # swap s[i] and s[j]
        s[i], s[j] = s[j], s[i]
        # reverse s[i+1:]
        s[i+1:] = reversed(s[i+1:])
        res = int(''.join(s))
        return res if res < 2**31 else -1
