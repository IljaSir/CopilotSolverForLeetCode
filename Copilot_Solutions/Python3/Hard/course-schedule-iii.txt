Synthesizing 10/10 solutions (Duplicates hidden)

=======

def scheduleCourse(self, courses: List[List[int]]) -> int:
        courses.sort(key=lambda x: x[1])
        pq = []
        time = 0
        for t, end in courses:
            if time + t <= end:
                heapq.heappush(pq, -t)
                time += t
            elif pq and -pq[0] > t:
                time += heapq.heappushpop(pq, -t) + t
        return len(pq)

=======

def scheduleCourse(self, courses: List[List[int]]) -> int:
        courses.sort(key=lambda x: x[1])
        heap = []
        time = 0
        for t, end in courses:
            if time + t <= end:
                time += t
                heapq.heappush(heap, -t)
            elif heap and -heap[0] > t:
                time += t + heapq.heappop(heap)
                heapq.heappush(heap, -t)
        return len(heap)

=======

def scheduleCourse(self, courses: List[List[int]]) -> int:
        courses.sort(key=lambda x: x[1])
        heap = []
        time = 0
        for t, end in courses:
            if time + t <= end:
                time += t
                heapq.heappush(heap, -t)
            elif heap and -heap[0] > t:
                time += heap[0] + t
                heapq.heappushpop(heap, -t)
        return len(heap)

=======

def scheduleCourse(self, courses: List[List[int]]) -> int:
        courses.sort(key=lambda x: x[1])
        heap = []
        time = 0
        for duration, lastDay in courses:
            if time + duration <= lastDay:
                heapq.heappush(heap, -duration)
                time += duration
            elif heap and -heap[0] > duration:
                time += heapq.heappushpop(heap, -duration) + duration
        return len(heap)

=======

def scheduleCourse(self, courses: List[List[int]]) -> int:
        courses.sort(key=lambda x: x[1])
        pq = []
        t = 0
        for dur, end in courses:
            t += dur
            heapq.heappush(pq, -dur)
            if t > end:
                t += heapq.heappop(pq)
        return len(pq)

=======

def scheduleCourse(self, courses: List[List[int]]) -> int:
        courses.sort(key=lambda x: x[1])
        time = 0
        heap = []
        for duration, lastDay in courses:
            if time + duration <= lastDay:
                heapq.heappush(heap, -duration)
                time += duration
            elif heap and -heap[0] > duration:
                time += heapq.heappop(heap) + duration
                heapq.heappush(heap, -duration)
        return len(heap)

=======

def scheduleCourse(self, courses: List[List[int]]) -> int:
        courses.sort(key=lambda x:x[1])
        time, heap = 0, []
        for t, e in courses:
            heappush(heap, -t)
            time += t
            if time > e:
                time += heappop(heap)
        return len(heap)

=======

def scheduleCourse(self, courses: List[List[int]]) -> int:
        
        pass

=======

def scheduleCourse(self, courses: List[List[int]]) -> int:
        # sort by lastDay
        courses.sort(key=lambda x: x[1])
        #print(courses)
        # max heap
        heap = []
        # start from day 1
        day = 1
        for duration, lastDay in courses:
            #print(day, duration, lastDay, heap)
            # if day + duration <= lastDay, we can take the course
            if day + duration <= lastDay:
                # take the course
                heapq.heappush(heap, -duration)
                day += duration
            # if day + duration > lastDay, we need to check if we can take the course
            elif heap and -heap[0] > duration:
                # take the course
                day += duration + heapq.heappop(heap)
                heapq.heappush(heap, -duration)
        #print(heap)
        return len(heap)
