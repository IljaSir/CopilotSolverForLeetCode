Synthesizing 10/10 solutions (Duplicates hidden)

=======

def numDistinct(self, s: str, t: str) -> int:
        m, n = len(s), len(t)
        dp = [[0] * (n + 1) for _ in range(m + 1)]
        for i in range(m + 1):
            dp[i][0] = 1
        for i in range(1, m + 1):
            for j in range(1, n + 1):
                if s[i - 1] == t[j - 1]:
                    dp[i][j] = dp[i - 1][j - 1] + dp[i - 1][j]
                else:
                    dp[i][j] = dp[i - 1][j]
        return dp[m][n]

=======

def numDistinct(self, s: str, t: str) -> int:
        m, n = len(s), len(t)
        dp = [[0] * (m + 1) for _ in range(n + 1)]
        for i in range(m + 1):
            dp[0][i] = 1
        for i in range(1, n + 1):
            for j in range(1, m + 1):
                if s[j - 1] == t[i - 1]:
                    dp[i][j] = dp[i - 1][j - 1] + dp[i][j - 1]
                else:
                    dp[i][j] = dp[i][j - 1]
        return dp[-1][-1]

=======

def numDistinct(self, s: str, t: str) -> int:
        dp = [[0]*(len(s)+1) for _ in range(len(t)+1)]
        for i in range(len(s)+1):
            dp[0][i] = 1
        for i in range(1, len(t)+1):
            for j in range(1, len(s)+1):
                if t[i-1] == s[j-1]:
                    dp[i][j] = dp[i-1][j-1] + dp[i][j-1]
                else:
                    dp[i][j] = dp[i][j-1]
        return dp[-1][-1]

=======

def numDistinct(self, s: str, t: str) -> int:
        len_s = len(s)
        len_t = len(t)
        dp = [[0] * (len_s + 1) for _ in range(len_t + 1)]
        for i in range(len_s + 1):
            dp[0][i] = 1
        for i in range(1, len_t + 1):
            for j in range(1, len_s + 1):
                dp[i][j] = dp[i][j - 1]
                if s[j - 1] == t[i - 1]:
                    dp[i][j] += dp[i - 1][j - 1]
        return dp[-1][-1]

=======

def numDistinct(self, s: str, t: str) -> int:
        N, M = len(s), len(t)
        dp = [[0]*(M+1) for _ in range(N+1)]
        for i in range(N+1):
            dp[i][0] = 1
        for i in range(1, N+1):
            for j in range(1, M+1):
                if s[i-1] == t[j-1]:
                    dp[i][j] = dp[i-1][j-1] + dp[i-1][j]
                else:
                    dp[i][j] = dp[i-1][j]
        return dp[-1][-1]

=======

def numDistinct(self, s: str, t: str) -> int:
        ls, lt = len(s), len(t)
        if ls < lt:
            return 0
        if ls == lt:
            if s == t:
                return 1
            else:
                return 0
        dp = [[0 for _ in range(lt)] for _ in range(ls)]
        if s[0] == t[0]:
            dp[0][0] = 1
        for i in range(1, ls):
            dp[i][0] = dp[i-1][0]
            if s[i] == t[0]:
                dp[i][0] += 1
        for i in range(1, ls):
            for j in range(1, lt):
                dp[i][j] = dp[i-1][j]
                if s[i] == t[j]:
                    dp[i][j] += dp[i-1][j-1]
        return dp[-1][-1]

=======

def numDistinct(self, s: str, t: str) -> int:
        # dp[i][j] = dp[i-1][j-1] + dp[i-1][j] if s[i-1] == t[j-1] else dp[i-1][j]
        dp = [[0]*(len(t)+1) for _ in range(len(s)+1)]
        for i in range(len(s)+1):
            dp[i][0] = 1
        for i in range(1, len(s)+1):
            for j in range(1, len(t)+1):
                if s[i-1] == t[j-1]:
                    dp[i][j] = dp[i-1][j-1] + dp[i-1][j]
                else:
                    dp[i][j] = dp[i-1][j]
        return dp[-1][-1]

=======

def numDistinct(self, s: str, t: str) -> int:
        if not s and not t:
            return 1
        if not s:
            return 0
        if not t:
            return 1
        dp = [[0 for _ in range(len(t)+1)] for _ in range(len(s)+1)]
        for i in range(len(s)+1):
            dp[i][0] = 1
        for i in range(1, len(s)+1):
            for j in range(1, len(t)+1):
                if s[i-1] == t[j-1]:
                    dp[i][j] = dp[i-1][j-1] + dp[i-1][j]
                else:
                    dp[i][j] = dp[i-1][j]
        return dp[-1][-1]

=======

def numDistinct(self, s: str, t: str) -> int:
        # dp[i][j] = dp[i-1][j-1] + dp[i-1][j] if s[i] == t[j] else dp[i-1][j]
        dp = [[0 for _ in range(len(t)+1)] for _ in range(len(s)+1)]
        for i in range(len(s)+1):
            dp[i][0] = 1
        for i in range(1, len(s)+1):
            for j in range(1, len(t)+1):
                dp[i][j] = dp[i-1][j-1] + dp[i-1][j] if s[i-1] == t[j-1] else dp[i-1][j]
        return dp[-1][-1]
