Synthesizing 10/10 solutions

=======

def countDigitOne(self, n: int) -> int:
        pass

=======

def countDigitOne(self, n: int) -> int:
        if n <= 0:
            return 0
        if n < 10:
            return 1
        if n < 100:
            return 10
        if n < 1000:
            return 100
        if n < 10000:
            return 1000
        if n < 100000:
            return 10000
        if n < 1000000:
            return 100000
        if n < 10000000:
            return 1000000
        if n < 100000000:
            return 10000000
        if n < 1000000000:
            return 100000000
        return 1000000000

=======

def countDigitOne(self, n: int) -> int:
        if n <= 0:
            return 0
        s = str(n)
        l = len(s)
        if l == 1:
            return 1
        return self.countDigitOne(int(s[1:])) + self.countDigitOne(int(s[0])) * 10 ** (l - 1) + int(s[1:]) + 1 if int(s[0]) > 1 else self.countDigitOne(int(s[1:])) + int(s[1:]) + 1

=======

def countDigitOne(self, n: int) -> int:
        if n <= 0:
            return 0
        m = 1
        cnt = 0
        while m <= n:
            cnt += (n // m + 8) // 10 * m + (n // m % 10 == 1) * (n % m + 1)
            m *= 10
        return cnt

=======

class Solution:
    def countDigitOne(self, n: int) -> int:
        # 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000
        # 1,  9,  90,   900,   9000,   90000,   900000,    9000000,    90000000,    900000000
        # 1,  19,  289,  3889,  48889,  588889,  6888889,   78888889,   888888889,   9888888889
        # 1,  20,  300,  4000,  50000,  600000,  7000000,   80000000,   900000000,   10000000000
        # 1,  10,  100,  1000,  10000,  100000,  1000000,   10000000,   100000000,   1000000000
        # 1,  11,  111,  1111,  11111,  111111,  1111111,   11111111,   111111111,   1111111111
        # 1,  12,  122,  1332,  14432,  155432,  1665432,   17765432,   188765432,   1998765432
        # 1,  13,  133,  1443,  15543,  166543,  1776543,   18876543,   199876543,   2009876543
        # 1,  14,  144,  1554,  16654,  177654,  1887654,   19987654,   200987654,   2110987654
        # 1,  15,  155,  1665,  17765,  188765,  1998765,

=======

def countDigitOne(self, n: int) -> int:
        if n < 1:
            return 0
        if n < 10:
            return 1
        div = 1
        while n // div >= 10:
            div *= 10
        high = n // div
        low = n % div
        if high == 1:
            return self.countDigitOne(div - 1) + self.countDigitOne(low) + low + 1
        else:
            return self.countDigitOne(div - 1) * high + self.countDigitOne(low) + div

=======

def countDigitOne(self, n: int) -> int:
        if n <= 0:
            return 0
        if n < 10:
            return 1
        digits = len(str(n))
        first = int(str(n)[0])
        if digits == 2:
            if first == 1:
                return 1 + n - 10 + 1
            else:
                return 10
        if digits == 3:
            if first == 1:
                return 1 + 99 + self.countDigitOne(n - 100 + 1)
            else:
                return 100 + 10 * (first - 1) + self.countDigitOne(n - 100 * first)
        if digits == 4:
            if first == 1:
                return 1 + 999 + self.countDigitOne(n - 1000 + 1)
            else:
                return 1000 + 100 * (first - 1) + self.countDigitOne(n - 1000 * first)
        if digits == 5:
            if first == 1:
                return 1 + 9999 + self.countDigitOne(n - 10000 + 1)
            else:
                return 10000 + 1000 * (first - 1) + self.countDigitOne(n - 10000 * first)
        if digits == 6:
            if first == 1:
                return 1 + 99999 + self.countDigitOne(n - 100000 + 1)
            else:
                return 100000 + 10000 * (first - 1) + self.countDigitOne(n - 100000 * first)
        if digits == 7:
            if first == 1:
                return 1 + 999999 + self.countDigitOne(n - 1000000 + 1)
            else:
                return 1000000 + 100000 * (first - 1) + self.countDigitOne(n - 1000000 * first)
        if digits == 8:
            if first == 1:
                return 1 + 9999999 + self.countDigitOne(n - 10000000 + 1)
            else:
                return 10000000 + 1000000 * (first - 1) + self.countDigitOne(n - 10000000 * first)
        if digits == 9:
            if first == 1:

=======

def countDigitOne(self, n: int) -> int:
        if n <= 0:
            return 0
        if n < 10:
            return 1
        d = len(str(n))
        # print(d)
        p = 10**(d-1)
        # print(p)
        first = n // p
        # print(first)
        firstOne = 0
        if first > 1:
            firstOne = p
        elif first == 1:
            firstOne = n - p + 1
        otherOne = first * (d - 1) * (p // 10)
        # print(first, firstOne, otherOne)
        return firstOne + otherOne + self.countDigitOne(n % p)

=======

def countDigitOne(self, n: int) -> int:
        if n <= 0:
            return 0
        # get the number of digits
        digit = 0
        num = n
        while num > 0:
            num //= 10
            digit += 1
        # get the first digit
        first_digit = n // 10 ** (digit - 1)
        # get the number of 1s in the first digit
        if first_digit > 1:
            num_first_digit = 10 ** (digit - 1)
        elif first_digit == 1:
            num_first_digit = n % (10 ** (digit - 1)) + 1
        else:
            num_first_digit = 0
        # get the number of 1s in other digits
        num_other_digits = first_digit * (digit - 1) * (10 ** (digit - 2))
        return num_first_digit + num_other_digits + self.countDigitOne(n % (10 ** (digit - 1)))

=======

def countDigitOne(self, n: int) -> int:
        if n <= 0:
            return 0
        
        def count(n):
            if n <= 0:
                return 0
            elif n < 10:
                return 1
            else:
                m = 10
                while m <= n:
                    m *= 10
                m //= 10
                if n // m == 1:
                    return n % m + 1 + count(m - 1) + count(n % m)
                else:
                    return m + count(n % m) + count(m - 1) * (n // m)
        
        return count(n)
