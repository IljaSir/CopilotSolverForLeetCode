Synthesizing 10/10 solutions (Duplicates hidden)

=======

def findMinMoves(self, machines: List[int]) -> int:
        total = sum(machines)
        n = len(machines)
        if total % n != 0:
            return -1
        avg = total // n
        ans = 0
        s = 0
        for m in machines:
            m -= avg
            s += m
            ans = max(ans, abs(s), m)
        return ans

=======

def findMinMoves(self, machines: List[int]) -> int:
        s = sum(machines)
        if s % len(machines) != 0:
            return -1
        avg = s // len(machines)
        res = 0
        cur = 0
        for machine in machines:
            cur += machine - avg
            res = max(res, abs(cur), machine - avg)
        return res

=======

def findMinMoves(self, machines: List[int]) -> int:
        s = sum(machines)
        if s % len(machines) != 0: return -1
        target = s // len(machines)
        res = 0
        cur = 0
        for m in machines:
            m -= target
            cur += m
            res = max(res, abs(cur), m)
        return res

=======

def findMinMoves(self, machines: List[int]) -> int:
        
        pass
