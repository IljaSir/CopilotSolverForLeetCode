Synthesizing 10/10 solutions

=======

def longestIncreasingPath(self, matrix: List[List[int]]) -> int:
        def dfs(i, j):
            if not dp[i][j]:
                val = matrix[i][j]
                dp[i][j] = 1 + max(
                    dfs(i-1, j) if i and val > matrix[i-1][j] else 0,
                    dfs(i+1, j) if i < m-1 and val > matrix[i+1][j] else 0,
                    dfs(i, j-1) if j and val > matrix[i][j-1] else 0,
                    dfs(i, j+1) if j < n-1 and val > matrix[i][j+1] else 0)
            return dp[i][j]
        if not matrix or not matrix[0]:
            return 0
        m, n = len(matrix), len(matrix[0])
        dp = [[0] * n for _ in range(m)]
        return max(dfs(x, y) for x in range(m) for y in range(n))

=======

def longestIncreasingPath(self, matrix: List[List[int]]) -> int:
        def dfs(i, j):
            if not dp[i][j]:
                val = matrix[i][j]
                dp[i][j] = 1 + max(
                    dfs(i+1, j) if i < m-1 and val > matrix[i+1][j] else 0,
                    dfs(i-1, j) if i > 0 and val > matrix[i-1][j] else 0,
                    dfs(i, j+1) if j < n-1 and val > matrix[i][j+1] else 0,
                    dfs(i, j-1) if j > 0 and val > matrix[i][j-1] else 0)
            return dp[i][j]
        if not matrix or not matrix[0]:
            return 0
        m, n = len(matrix), len(matrix[0])
        dp = [[0]*n for _ in range(m)]
        return max(dfs(x, y) for x in range(m) for y in range(n))

=======

def longestIncreasingPath(self, matrix: List[List[int]]) -> int:
        m, n = len(matrix), len(matrix[0])
        dp = [[0] * n for _ in range(m)]
        def dfs(i, j):
            if dp[i][j]:
                return dp[i][j]
            for x, y in [[i+1, j], [i-1, j], [i, j+1], [i, j-1]]:
                if 0 <= x < m and 0 <= y < n and matrix[x][y] > matrix[i][j]:
                    dp[i][j] = max(dp[i][j], dfs(x, y))
            dp[i][j] += 1
            return dp[i][j]
        return max(dfs(i, j) for i in range(m) for j in range(n))

=======

def longestIncreasingPath(self, matrix: List[List[int]]) -> int:
        if not matrix:
            return 0
        m, n = len(matrix), len(matrix[0])
        dp = [[0] * n for _ in range(m)]
        def dfs(i, j):
            if dp[i][j] > 0:
                return dp[i][j]
            for x, y in [[i-1, j], [i+1, j], [i, j-1], [i, j+1]]:
                if 0 <= x < m and 0 <= y < n and matrix[x][y] > matrix[i][j]:
                    dp[i][j] = max(dp[i][j], dfs(x, y))
            dp[i][j] += 1
            return dp[i][j]
        return max(dfs(i, j) for i in range(m) for j in range(n))

=======

def longestIncreasingPath(self, matrix: List[List[int]]) -> int:
        if not matrix: return 0
        m, n = len(matrix), len(matrix[0])
        dp = [[0] * n for _ in range(m)]
        def dfs(i, j):
            if dp[i][j] != 0: return dp[i][j]
            dp[i][j] = 1
            for r, c in ((i+1, j), (i-1, j), (i, j+1), (i, j-1)):
                if 0 <= r < m and 0 <= c < n and matrix[r][c] > matrix[i][j]:
                    dp[i][j] = max(dp[i][j], dfs(r, c) + 1)
            return dp[i][j]
        return max(dfs(i, j) for i in range(m) for j in range(n))

=======

def longestIncreasingPath(self, matrix: List[List[int]]) -> int:
        if not matrix or not matrix[0]:
            return 0
        m, n = len(matrix), len(matrix[0])
        memo = [[0] * n for _ in range(m)]
        def dfs(i, j):
            if memo[i][j] == 0:
                memo[i][j] = 1 + max(
                    dfs(i - 1, j) if i > 0 and matrix[i - 1][j] > matrix[i][j] else 0,
                    dfs(i + 1, j) if i < m - 1 and matrix[i + 1][j] > matrix[i][j] else 0,
                    dfs(i, j - 1) if j > 0 and matrix[i][j - 1] > matrix[i][j] else 0,
                    dfs(i, j + 1) if j < n - 1 and matrix[i][j + 1] > matrix[i][j] else 0)
            return memo[i][j]
        return max(dfs(i, j) for i in range(m) for j in range(n))

=======

def longestIncreasingPath(self, matrix: List[List[int]]) -> int:
        if not matrix:
            return 0
        m, n = len(matrix), len(matrix[0])
        dp = [[0] * n for _ in range(m)]
        def dfs(i, j):
            if not dp[i][j]:
                val = matrix[i][j]
                dp[i][j] = 1 + max(
                    dfs(i-1, j) if i and val > matrix[i-1][j] else 0,
                    dfs(i+1, j) if i < m-1 and val > matrix[i+1][j] else 0,
                    dfs(i, j-1) if j and val > matrix[i][j-1] else 0,
                    dfs(i, j+1) if j < n-1 and val > matrix[i][j+1] else 0
                )
            return dp[i][j]
        return max(dfs(x, y) for x in range(m) for y in range(n))

=======

def longestIncreasingPath(self, matrix: List[List[int]]) -> int:
        if not matrix:
            return 0
        m, n = len(matrix), len(matrix[0])
        dp = [[0 for _ in range(n)] for _ in range(m)]
        res = 0
        for i in range(m):
            for j in range(n):
                res = max(res, self.dfs(matrix, i, j, dp))
        return res

=======

def longestIncreasingPath(self, matrix: List[List[int]]) -> int:
        m, n = len(matrix), len(matrix[0])
        dp = [[0] * n for _ in range(m)]
        
        def dfs(i, j):
            if dp[i][j] != 0: return dp[i][j]
            for di, dj in [[0, 1], [0, -1], [1, 0], [-1, 0]]:
                if 0 <= i + di < m and 0 <= j + dj < n and matrix[i + di][j + dj] > matrix[i][j]:
                    dp[i][j] = max(dp[i][j], dfs(i + di, j + dj))
            dp[i][j] += 1
            return dp[i][j]
        
        return max(dfs(i, j) for i in range(m) for j in range(n))

=======

def longestIncreasingPath(self, matrix: List[List[int]]) -> int:
        if len(matrix) == 0:
            return 0
        m = len(matrix)
        n = len(matrix[0])
        dp = [[0 for _ in range(n)] for _ in range(m)]
        def dfs(i, j):
            if dp[i][j] > 0:
                return dp[i][j]
            dp[i][j] = 1
            for x, y in [(i+1, j), (i-1, j), (i, j+1), (i, j-1)]:
                if 0 <= x < m and 0 <= y < n and matrix[x][y] > matrix[i][j]:
                    dp[i][j] = max(dp[i][j], dfs(x, y)+1)
            return dp[i][j]
        res = 0
        for i in range(m):
            for j in range(n):
                res = max(res, dfs(i, j))
        return res
