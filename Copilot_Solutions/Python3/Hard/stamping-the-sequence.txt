Synthesizing 9/10 solutions

=======

def movesToStamp(self, stamp: str, target: str) -> List[int]:
        def match(stamp, target, i):
            for j in range(len(stamp)):
                if target[i+j] != '?' and stamp[j] != target[i+j]:
                    return False
            return True
        def replace(stamp, target, i):
            for j in range(len(stamp)):
                target[i+j] = stamp[j]
        n, m = len(stamp), len(target)
        target = list(target)
        ans = []
        changed = True
        while changed:
            changed = False
            for i in range(m-n+1):
                if match(stamp, target, i):
                    replace(stamp, target, i)
                    ans.append(i)
                    changed = True
        return ans[::-1] if all(x == '?' for x in target) else []

=======

def movesToStamp(self, stamp: str, target: str) -> List[int]:
        def match(i):
            for j in range(len(stamp)):
                if target[i+j] == '?':
                    continue
                if target[i+j] != stamp[j]:
                    return False
            return True
        
        def replace(i):
            for j in range(len(stamp)):
                target[i+j] = '?'
        
        target = list(target)
        ans = []
        while True:
            found = False
            for i in range(len(target)-len(stamp)+1):
                if match(i):
                    replace(i)
                    ans.append(i)
                    found = True
            if not found:
                break
        return ans[::-1] if all(x == '?' for x in target) else []

=======

def movesToStamp(self, stamp: str, target: str) -> List[int]:
        def replace(s, t):
            i = 0
            while True:
                i = s.find(t, i)
                if i == -1:
                    break
                s = s[:i] + '?' * len(t) + s[i + len(t):]
                yield i
                i += 1
        def check(s):
            return all(c == '?' for c in s)
        res = []
        while True:
            flag = False
            for i in replace(target, stamp):
                res.append(i)
                flag = True
            if not flag:
                break
        return res[::-1] if check(target) else []

=======

def movesToStamp(self, stamp: str, target: str) -> List[int]:
        n, m = len(stamp), len(target)
        star = '*' * n
        target = list(target)
        ans = []
        def check(i):
            for j in range(n):
                if stamp[j] != target[i+j] and target[i+j] != '*':
                    return False
            return True
        
        def update(i):
            for j in range(n):
                target[i+j] = '*'
        
        while True:
            found = False
            for i in range(m-n+1):
                if check(i):
                    update(i)
                    found = True
                    ans.append(i)
            if not found:
                break
        if ''.join(target) != star:
            return []
        return ans[::-1]

=======

def movesToStamp(self, stamp: str, target: str) -> List[int]:
        M, N = len(stamp), len(target)
        ans = []
        done = [False] * N
        def change(i, j, k):
            if all(done[j+k] or target[j+k] == stamp[k] for k in range(M)):
                for k in range(M):
                    done[j+k] = True
                ans.append(i)
                return True
            return False
        changed = True
        while changed:
            changed = False
            for i in range(N-M+1):
                if not done[i]:
                    changed |= change(i, i, 0)
            for i in range(N-M, -1, -1):
                if not done[i]:
                    changed |= change(i, i, 0)
        return ans[::-1] if all(done) else []

=======

def movesToStamp(self, stamp: str, target: str) -> List[int]:
        # replace target with ?
        target = list(target)
        n = len(target)
        # replace target with ?
        for i in range(n):
            if target[i] == stamp[0]:
                target[i] = '?'
        # print(target)
        d make a dict of stamp
       estamp_fict = {}
        for i in range(len(stamp)):
            i  stamp[i] not in stamp_dict:
                stamp_dict[stamp[i]] = [i]
            else:
                stamp_dict[stamp[i]].append(i)
        # print(rtamp_dict)
  e     # start from the first index of stamp
        # if the char is ?, then find the index of the char in stamp
        # replace the char at the index with ?
        # if the char is not ?, then find the index of the char in stamp
        # replace the char at the index with ?
        # if the char is not ?, then find the index of the char in stamp
        # replace the char at the index with ?
        # if the char is not ?, then find the index of the char in stamp
        # replace the char at the index with ?
        # if the char is not ?, then find the index of the char in stamp
        # replace the char at the index with ?
        # if the char is not ?, then find the index of the char in stamp
        # replace the char at the index with ?
        # print(target)
        # print(stamp)
        # print(stamp_dict)
        result = []
        def dfs(target, stamp, stamp_dict, index, result):
            # print(target)
            # print(stamp)
            # print(stamp_dict)
            # print(index)
            # print(result)
            # print()
            if index == len(stamp):
                return True
            if target[index] == '?':
                # print('here')
                # print(target)
                # print(stamp)
                # print(stamp_dict)
                # print(index)
                # print(result)
                # print()
                if stamp[index] in stamp_dict:
                    # print('here')
                    # print(target)
                    # print(stamp)
                    # print(stamp_dict)
                    # print(index)
                    # print(result)
                    # print()
                    for i in stamp_dict[stamp[index]]:
                        # print('here')
                        # print(target)
                        # print(stamp)
                        # print(stamp_dict

=======

def movesToStamp(self, stamp: str, target: str) -> List[int]:
        # dfs place(s, t):
            i = 0
            while True:
                i = s.find(t, i)
                if i == -1:
                    break
                s = s[:i] + '?' * len(t) + s[i + len(t):]
                yield i
                i += 1
        def check(s):
            return all(c == '?' for c in s)
        res = []
        while True:
            flag = False
            for i in replace(target, stamp):
                res.append(i)
                flag = True
            if not flag:
                break
        return res[::-1] if check(target) else []

=======

def movesToStamp(self, stamp: str, target: str) -> List[int]:
        # replace target with ?
        target = list(target)
        n = len(target)
        # replace target with ?
        for i in range(n):
            if target[i] == stamp[0]:
                target[i] = '?'
        # print(target)
        # make a dict of stamp
        stamp_dict = {}
        for i in range(len(stamp)):
            if stamp[i] not in stamp_dict:
                stamp_dict[stamp[i]] = [i]
            else:
                stamp_dict[stamp[i]].append(i)
        # print(stamp_dict)
        # start from the first index of stamp
        # if the char is ?, then find the index of the char in stamp
        # replace the char at the index with ?
        # if the char is not ?, then find the index of the char in stamp
        # replace the char at the index with ?
        # if the char is not ?, then find the index of the char in stamp
        # replace the char at the index with ?
        # if the char is not ?, then find the index of the char in stamp
        # replace the char at the index with ?
        # if the char is not ?, then find the index of the char in stamp
        # replace the char at the index with ?
        # if the char is not ?, then find the index of the char in stamp
        # replace the char at the index with ?
        # print(target)
        # print(stamp)
        # print(stamp_dict)
        result = []
        def dfs(target, stamp, stamp_dict, index, result):
            # print(target)
            # print(stamp)
            # print(stamp_dict)
            # print(index)
            # print(result)
            # print()
            if index == len(stamp):
                return True
            if target[index] == '?':
                # print('here')
                # print(target)
                # print(stamp)
                # print(stamp_dict)
                # print(index)
                # print(result)
                # print()
                if stamp[index] in stamp_dict:
                    # print('here')
                    # print(target)
                    # print(stamp)
                    # print(stamp_dict)
                    # print(index)
                    # print(result)
                    # print()
                    for i in stamp_dict[stamp[index]]:
                        # print('here')
                        # print(target)
                        # print(stamp)e last movis

=======

cs Soluion:
    defesToStamp(self, stamp: str, target: str) -> List[int]:
        # The idea is to replace the target with '?'s when we can
        # and keep track of the index of the left-most letter
        # that is stamped. We can do this by replacing the target
        # with '?'s and then checking if thtarget s equal to
        # the tamp after each replacement.
        # We can also check if the target is equal to the stamp
        # before we begin replacing the target with '?'s. If it
        # is, then we can return immediately.
        # We can also check if the target is equal to the stamp
        # after we replace the target with '?'s. If it is, then
        # we can return immediately.
        # We can also check if the target is equal to the stamp
        # after we replace the target with '?'s. If it is not,
        # then we can return immediately.
        # We can also check if the target is equal to the stamp
        # after we replace the target with '?'s. If it is not,
        # then we can return immediately.
        # We can also check if the target is equal to the stamp
        # after we replace the target with '?'s. If it is not,
        # then we can return immediately.
        # We can also check if the target is equal to the stamp
        # after we replace the target with '?'s. If it is not,
        # then we can return immediately.
        # We can also check if the target is equal to the stamp
        # after we replace the target with '?'s. If it is not,
        #
                        # print(stamp_dict

=======

def movesToStamp(self, stamp: str, target: str) -> List[int]:
        # dfs + backtracking
        # Time  complexity: O((N - M) * M * M)
        # Space complexity: O(N + M)
        # N, M = len(target), len(stamp)
        # stars = [c == '*' for c in target]
        # stamp = tuple(stamp)
        # def dfs(i):
        #     if all(stars):
        #         return True
        #     if i == N:
        #         return False
        #     if stars[i]:
        #         return dfs(i + 1)
        #     for j in range(M):
        #         if target[i + j] != stamp[j] and target[i + j] != '*':
        #             break
        #     else:
        #         for j in range(M):
        #             if not stars[i + j]:
        #                 stars[i + j] = True
        #                 if dfs(i + 1):
        #                     return True
        #                 stars[i + j] = False
        #     return False
        # if not dfs(0):
        #     return []
        # ans = []
        # for i in range(N):
        #     if stars[i]:
        #         for j in range(M):
        #             if target[i + j] != '*':
        #                 ans.append(i)
        #                 break
        # return ans[::-1]

        # greedy
        # Time  complexity: O(N * M)
        # Space complexity: O(N + M)
        N, M = len(target), len(stamp)
        stars = [c == '*' for c in target]
        stamp = tuple(stamp)
        def dfs(i):
            if all(stars):
                return True
            if i == N:
                return False
            if stars[i]:
                return dfs(i + 1)
            for j in range(M):
                if target[i + j] != stamp[j] and target[i + j] != '*':
                    break
            else:
                for j in range(M):
                    stars[i + j] = True
                return True
            return False
        if not dfs(0):
            return []
        ans = []
        for i in range(N - M + 1):
            if not stars[i]:
                continue
            for j in range(M):
                if target[i + j] != '*':

=======

class Solution:
    def movesToStamp(self, stamp: str, target: str) -> List[int]:
        # find the first match
        # find the last match
        # if the first match is not at 0, then the first match is the first move
        # if the last match is not at the end, then the last match is the last move
        # if the first match is at 0, then the first move is the first match
        # if the last match is at the end, then the last move is the last match
        # if the first match is at 0 and the last match is at the end, then the first move is the first match and the last move is the last match
        # if the first match is not at 0 and the last match is not at the end, then the first move is the first match and the last move is the last match
        # if the first match is not at 0 and the last match is at the end, then the first move is the first match and the last move is the last match
        # if the first match is at 0 and the last match is not at the end, then the first move is the first match and the last move is the last match
        # if the first match is at 0 and the last match is at the end, then the first move is the first match and the last move is the last match
        # if the first match is not at 0 and the last match is not at the end, then the first move is the first match and the last move is the last match
        # if the first match is not at 0 and the last match is at the end, then the first move is the first match and the last move is the last match
        # if the first match is at 0 and the last match is not at the end, then the first move is the first match and the last move is the last match
        # if the first match is at 0 and the last match is at the end, then the first move is the first match and the last move is the last match
        # if the first match is not at 0 and the last match is not at the end, then the first move is the first match and the last move is the last match
        # if the first match is not at 0 and the last match is at the end, then the first move is the first match and the last move is

=======

def movesToStamp(self, stamp: str, target: str) -> List[int]:
        # dfs + backtracking
        # Time  complexity: O((N - M) * M * M)
        # Space complexity: O(N + M)
        # N, M = len(target), len(stamp)
        # stars = [c == '*' for c in target]
        # stamp = tuple(stamp)
        # def dfs(i):
        #     if all(stars):
        #         return True
        #     if i == N:
        #         return False
        #     if stars[i]:
        #         return dfs(i + 1)
        #     for j in range(M):
        #         if target[i + j] != stamp[j] and target[i + j] != '*':
        #             break
        #     else:
        #         for j in range(M):
        #             if not stars[i + j]:
        #                 stars[i + j] = True
        #                 if dfs(i + 1):
        #                     return True
        #                 stars[i + j] = False
        #     return False
        # if not dfs(0):
        #     return []
        # ans = []
        # for i in range(N):
        #     if stars[i]:
        #         for j in range(M):
        #             if target[i + j] != '*':
        #                 ans.append(i)
        #                 break
        # return ans[::-1]

        # greedy
        # Time  complexity: O(N * M)
        # Space complexity: O(N + M)
        N, M = len(target), len(stamp)
        stars = [c == '*' for c in target]
        stamp = tuple(stamp)
        def dfs(i):
            if all(stars):
                return True
            if i == N:
                return False
            if stars[i]:
                return dfs(i + 1)
            for j in range(M):
                if target[i + j] != stamp[j] and target[i + j] != '*':
                    break
            else:
                for j in range(M):
                    stars[i + j] = True
                return True
            return False
        if not dfs(0):
            return []
        ans = []
        for i in range(N - M + 1):
            if not stars[i]:
                continue
            for j in range(M):
                if target[i + j] != '*':

=======

class Solution:
    def movesToStamp(self, stamp: str, target: str) -> List[int]:
        # find the first match
        # find the last match
        # if the first match is not at 0, then the first match is the first move
        # if the last match is not at the end, then the last match is the last move
        # if the first match is at 0, then the first move is the first match
        # if the last match is at the end, then the last move is the last match
        # if the first match is at 0 and the last match is at the end, then the first move is the first match and the last move is the last match
        # if the first match is not at 0 and the last match is not at the end, then the first move is the first match and the last move is the last match
        # if the first match is not at 0 and the last match is at the end, then the first move is the first match and the last move is the last match
        # if the first match is at 0 and the last match is not at the end, then the first move is the first match and the last move is the last match
        # if the first match is at 0 and the last match is at the end, then the first move is the first match and the last move is the last match
        # if the first match is not at 0 and the last match is not at the end, then the first move is the first match and the last move is the last match
        # if the first match is not at 0 and the last match is at the end, then the first move is the first match and the last move is the last match
        # if the first match is at 0 and the last match is not at the end, then the first move is the first match and the last move is the last match
        # if the first match is at 0 and the last match is at the end, then the first move is the first match and the last move is the last match
        # if the first match is not at 0 and the last match is not at the end, then the first move is the first match and the last move is the last match
        # if the first match is not at 0 and the last match is at the end, then the first move is the first match and the last move is
