Synthesizing 10/10 solutions

=======

def minSwapsCouples(self, row: List[int]) -> int:
        N = len(row)
        pos = [0] * N
        for i, x in enumerate(row):
            pos[x] = i
        ans = 0
        for i in range(0, N, 2):
            x = row[i]
            if row[i + 1] == (x ^ 1):
                continue
            ans += 1
            y = x ^ 1
            j = pos[y]
            row[i + 1], row[j] = row[j], row[i + 1]
            pos[row[i + 1]], pos[row[j]] = i + 1, j
        return ans

=======

def minSwapsCouples(self, row: List[int]) -> int:
        n = len(row)
        pos = [0] * n
        for i, v in enumerate(row):
            pos[v] = i
        res = 0
        for i in range(0, n, 2):
            if row[i] % 2 == 0:
                j = pos[row[i] + 1]
            else:
                j = pos[row[i] - 1]
            if i + 1 != j:
                row[i + 1], row[j] = row[j], row[i + 1]
                pos[row[i + 1]], pos[row[j]] = i + 1, j
                res += 1
        return res

=======

def minSwapsCouples(self, row: List[int]) -> int:
        def find(x):
            if x != p[x]:
                p[x] = find(p[x])
            return p[x]
        def union(x, y):
            px, py = find(x), find(y)
            if px != py:
                p[px] = py
        n = len(row)
        p = list(range(n))
        for i in range(0, n, 2):
            union(row[i] // 2, row[i + 1] // 2)
        return len(set(find(i) for i in range(n))) - 1

=======

def minSwapsCouples(self, row: List[int]) -> int:
        def find(x):
            if x != p[x]:
                p[x] = find(p[x])
            return p[x]
        def union(x, y):
            x, y = find(x), find(y)
            if x != y:
                p[y] = x
        n = len(row)
        p = [i for i in range(n)]
        for i in range(0, n, 2):
            union(row[i] // 2, row[i + 1] // 2)
        return n // 2 - len(set(find(x) for x in range(n)))

=======

def minSwapsCouples(self, row: List[int]) -> int:
        def find(x):
            if x != parent[x]:
                parent[x] = find(parent[x])
            return parent[x]
        
        def union(x, y):
            parent[find(x)] = find(y)
        
        n = len(row)
        parent = list(range(n))
        for i in range(0, n, 2):
            union(row[i] // 2, row[i + 1] // 2)
        return n // 2 - len(set(find(x) for x in range(n)))

=======

def minSwapsCouples(self, row: List[int]) -> int:
        def find(x):
            if x != p[x]:
                p[x] = find(p[x])
            return p[x]
        
        def union(x, y):
            x, y = find(x), find(y)
            if x != y:
                p[x] = y
                return 1
            return 0
        
        n = len(row)
        p = list(range(n))
        for i in range(0, n, 2):
            x, y = row[i] // 2, row[i + 1] // 2
            union(x, y)
        return n // 2 - len({find(x) for x in range(n // 2)})

=======

def minSwapsCouples(self, row: List[int]) -> int:
        n = len(row) // 2
        pairs = {}
        for i in range(n):
            pairs[row[2*i]] = row[2*i+1]
            pairs[row[2*i+1]] = row[2*i]
        swaps = 0
        seen = set()
        for i in range(n):
            if row[2*i] not in seen:
                seen.add(row[2*i])
                seen.add(pairs[row[2*i]])
                j = pairs[row[2*i]]
                while j != row[2*i]:
                    seen.add(j)
                    seen.add(pairs[j])
                    j = pairs[j]
                    swaps += 1
        return swaps

=======

def minSwapsCouples(self, row: List[int]) -> int:
        def find(x):
            if x != parent[x]:
                parent[x] = find(parent[x])
            return parent[x]
        def union(x, y):
            parent[find(x)] = find(y)
        n = len(row)
        parent = [i for i in range(n)]
        for i in range(0, n, 2):
            union(row[i], row[i + 1])
        res = 0
        for i in range(0, n, 2):
            if find(i) != find(i + 1):
                res += 1
                union(i, i + 1)
        return res

=======

def minSwapsCouples(self, row: List[int]) -> int:
        N = len(row)
        row = [x//2 for x in row]
        ans = 0
        for i in range(0, N, 2):
            if row[i] == row[i+1]:
                continue
            for j in range(i+1, N):
                if row[i] == row[j]:
                    row[i+1], row[j] = row[j], row[i+1]
                    ans += 1
                    break
        return ans

=======

def minSwapsCouples(self, row: List[int]) -> int:
        n = len(row)
        couples = [None] * n
        for i in range(0, n, 2):
            couples[row[i]] = i
            couples[row[i+1]] = i+1
        ans = 0
        for i in range(0, n, 2):
            if couples[i] == i+1:
                continue
            j = couples[i+1]
            couples[row[j]] = couples[i]
            row[couples[i]] = row[j]
            ans += 1
        return ans
