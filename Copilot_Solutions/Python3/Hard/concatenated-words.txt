Synthesizing 10/10 solutions

=======

def findAllConcatenatedWordsInADict(self, words: List[str]) -> List[str]:
        words = set(words)
        def dfs(word):
            for i in range(1, len(word)):
                if word[:i] in words and (word[i:] in words or dfs(word[i:])):
                    return True
            return False
        return [word for word in words if dfs(word)]

=======

def findAllConcatenatedWordsInADict(self, words: List[str]) -> List[str]:
        words = set(words)
        def dfs(word):
            for i in range(1, len(word)):
                prefix = word[:i]
                suffix = word[i:]
                if prefix in words and suffix in words:
                    return True
                if prefix in words and dfs(suffix):
                    return True
            return False
        return [word for word in words if dfs(word)]

=======

def findAllConcatenatedWordsInADict(self, words: List[str]) -> List[str]:
        words = set(words)
        def isConcatenated(word):
            if word in words:
                return True
            for i in range(1, len(word)):
                if word[:i] in words and isConcatenated(word[i:]):
                    return True
            return False
        return [w for w in words if isConcatenated(w)]

=======

def findAllConcatenatedWordsInADict(self, words: List[str]) -> List[str]:
        def dfs(word, i, count):
            if i == len(word):
                return count > 1
            for j in range(i, len(word)):
                if word[i:j+1] in word_set:
                    if dfs(word, j+1, count+1):
                        return True
            return False

        word_set = set(words)
        res = []
        for word in words:
            if dfs(word, 0, 0):
                res.append(word)
        return res

=======

def findAllConcatenatedWordsInADict(self, words: List[str]) -> List[str]:
        
        def isConcatenated(word, wordset):
            if word in wordset:
                return True
            for i in range(1, len(word)):
                if word[:i] in wordset and isConcatenated(word[i:], wordset):
                    return True
            return False
        
        wordset = set(words)
        res = []
        for word in words:
            wordset.remove(word)
            if isConcatenated(word, wordset):
                res.append(word)
            wordset.add(word)
        return res

=======

def findAllConcatenatedWordsInADict(self, words: List[str]) -> List[str]:
        def isConcatenated(word, words, cache):
            if word in cache:
                return cache[word]
            for i in range(1, len(word)):
                prefix = word[:i]
                suffix = word[i:]
                if prefix in words and suffix in words:
                    cache[word] = True
                    return True
                if prefix in words and isConcatenated(suffix, words, cache):
                    cache[word] = True
                    return True
                if suffix in words and isConcatenated(prefix, words, cache):
                    cache[word] = True
                    return True
            cache[word] = False
            return False
        
        words = set(words)
        cache = {}
        res = []
        for word in words:
            if isConcatenated(word, words, cache):
                res.append(word)
        return res

=======

def findAllConcatenatedWordsInADict(self, words: List[str]) -> List[str]:
        def dfs(word, word_dict, memo):
            if word in memo:
                return memo[word]
            if word in word_dict:
                memo[word] = True
                return True
            for i in range(1, len(word)):
                prefix = word[:i]
                suffix = word[i:]
                if prefix in word_dict and dfs(suffix, word_dict, memo):
                    memo[word] = True
                    return True
            memo[word] = False
            return False
        word_dict = set(words)
        memo = {}
        result = []
        for word in words:
            if dfs(word, word_dict, memo):
                result.append(word)
        return result

=======

def findAllConcatenatedWordsInADict(self, words: List[str]) -> List[str]:
        words = sorted(words, key = len)
        ans = []
        for i in range(2, len(words)):
            for j in range(i):
                if words[j] in words[i]:
                    ans.append(words[i])
                    break
        return ans

=======

def findAllConcatenatedWordsInADict(self, words: List[str]) -> List[str]:
        def search(word, i, j, count):
            if count > 1 and j == len(word):
                return True
            if i == len(word):
                return False
            for k in range(i, len(word)):
                if word[i:k+1] in word_set:
                    if search(word, k+1, j+1, count+1):
                        return True
            return False
        word_set = set(words)
        result = []
        for word in words:
            if search(word, 0, 0, 0):
                result.append(word)
        return result

=======

def findAllConcatenatedWordsInADict(self, words: List[str]) -> List[str]:
        
        pass
