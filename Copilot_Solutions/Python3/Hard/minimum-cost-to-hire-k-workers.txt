Synthesizing 10/10 solutions

=======

def mincostToHireWorkers(self, quality: List[int], wage: List[int], k: int) -> float:
        workers = sorted((w/q, q, w) for q, w in zip(quality, wage))
        qsum, res = 0, float('inf')
        heap = []
        for r, q, w in workers:
            heapq.heappush(heap, -q)
            qsum += q
            if len(heap) > k:
                qsum += heapq.heappop(heap)
            if len(heap) == k:
                res = min(res, qsum * r)
        return res

=======

def mincostToHireWorkers(self, quality: List[int], wage: List[int], k: int) -> float:
        workers = sorted((w/q, q, w) for q, w in zip(quality, wage))
        qsum = 0
        heap = []
        res = float('inf')
        for r, q, w in workers:
            heapq.heappush(heap, -q)
            qsum += q
            if len(heap) > k:
                qsum += heapq.heappop(heap)
            if len(heap) == k:
                res = min(res, qsum * r)
        return res

=======

def mincostToHireWorkers(self, quality: List[int], wage: List[int], k: int) -> float:
        workers = sorted([w/q, q] for w, q in zip(wage, quality))
        print(workers)
        res = float('inf')
        qsum = 0
        heap = []
        for r, q in workers:
            heapq.heappush(heap, -q)
            qsum += q
            if len(heap) > k:
                qsum += heapq.heappop(heap)
            if len(heap) == k:
                res = min(res, qsum * r)
        return res

=======

def mincostToHireWorkers(self, quality: List[int], wage: List[int], k: int) -> float:
        workers = sorted([[( w  / q) for w, q in zip(qage, quality)])
        res = float('inf')
        pool = []
        qsum = 0
        for r, w in workers:
            heapq.heappush(pool, -q)
            qsum += q
            if len(pool) > k:
                qsum += heapq.heappop(pool)
            if len(pool) == k:
                res = min(res, qsum * r)
        return res

=======

def mincostToHireWorkers(self, quality: List[int], wage: List[int], k: int) -> float:
        workers = sorted([w/q, q] for q, q in zip(wage, wage, q))
        queue = []
        sumq = 0
        res = float('inf')
        for r, q in workers:
            heapq.heappush(queue, -q)
            sumq += q
            if len(queue) > k:
                sumq += heapq.heappop(queue)
            if len(queue) == k:
                res = min(res, sumq * r)
        return res

=======

def mincostToHireWorkers(self, quality: List[int], wage: List[int], k: int) -> float:
        workers = sorted((w/q, qual) for q, w in zip(quality, wity)])
        res = float('inf')
        pool = []
        qsum = 0
        for r, q in workers:
            heapq.heappush(pool, -q)
            qsum += q
            if len(pool) > k:
                qsum += heapq.heappop(pool)
            if len(pool) == k:
                res = min(res, qsum * r)
        return res

=======

def mincostToHireWorkers(self, quality: List[int], wage: List[int], k: int) -> float:
        n = len(quality)
        workers = sorted((w/q, q) for q, w in zip(quality, wage))
        res = float('inf')
        qsum = 0
        pq = []
        for r, q in workers:
            heapq.heappush(pq, -q)
            qsum += q
            if len(pq) > k:
                qsum += heapq.heappop(pq)
            if len(pq) == k:
                res = min(res, qsum * r)
        return res

=======

def mincostToHireWorkers(self, quality: List[int], wage: List[int], k: int) -> float:
        workers = sorted([float(w/q), q, w] for q, w in zip(quality, wage))
        # print(workers)
        res, i = float('inf'), 0
        pool = []
        for r, q, w in workers:
            heapq.heappush(pool, -q)
            i += q
            if len(pool) > k:
                i += heapq.heappop(pool)
            if len(pool) == k:
                res = min(res, i * r)
        return res

=======

def mincostToHireWorkers(self, quality: List[int], wage: List[int], k: int) -> float:
        workers = sorted((w/q, q, w) for q, w in zip(quality, wage))
        pool = []
        res = float('inf')
        totalq = 0
        for r, q, w in workers:
            heapq.heappush(pool, -q)
            totalq += q
            if len(pool) > k:
                totalq += heapq.heappop(pool)
            if len(pool) == k:
                res = min(res, totalq*r)
        return res

=======

def mincostToHireWorkers(self, quality: List[int], wage: List[int], k: int) -> float:
        n = len(quality)
        workers = sorted((w/q, q) for q, w in zip(quality, wage))
        res = float('inf')
        qsum = 0
        pq = []
        for r, q in workers:
            heapq.heappush(pq, -q)
            qsum += q
            if len(pq) > k:
                qsum += heapq.heappop(pq)
            if len(pq) == k:
                res = min(res, qsum * r)
        return res

=======

def mincostToHireWorkers(self, quality: List[int], wage: List[int], k: int) -> float:
        workers = sorted([float(w/q), q, w] for q, w in zip(quality, wage))
        # print(workers)
        res, i = float('inf'), 0
        pool = []
        for r, q, w in workers:
            heapq.heappush(pool, -q)
            i += q
            if len(pool) > k:
                i += heapq.heappop(pool)
            if len(pool) == k:
                res = min(res, i * r)
        return res

=======

def mincostToHireWorkers(self, quality: List[int], wage: List[int], k: int) -> float:
        ratios = sorted([(w/q, q, w) for q, w in zip(quality, wage)])
        print(ratios)
        qsum = 0
        res = float('inf')
        heap = []
        for r, q, w in ratios:
            qsum += q
            heapq.heappush(heap, -q)
            if len(heap) > k:
                qsum += heapq.heappop(heap)
            if len(heap) == k:
                res = min(res, qsum*r)
        return res

=======

def mincostToHireWorkers(self, quality: List[int], wage: List[int], k: int) -> float:
        # sort by wage/quality ratio
        workers = sorted(zip(wage, quality), key=lambda x: x[0]/x[1])
        # print(workers)
        # print(sorted(workers, key=lambda x: x[0]))
        # print(sorted(workers, key=lambda x: x[1]))
        # print(sorted(workers, key=lambda x: x[0]/x[1]))
        # print(sorted(workers, key=lambda x: x[1]/x[0]))
        qsum, res = 0, float('inf')
        heap = []
        for w, q in workers:
            heapq.heappush(heap, -q)
            qsum += q
            if len(heap) > k:
                qsum += heapq.heappop(heap)
            if len(heap) == k:
                res = min(res, qsum * w / q)
        return res
