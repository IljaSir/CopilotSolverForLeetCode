Synthesizing 10/10 solutions

=======

def shortestSubarray(self, nums: List[int], k: int) -> int:
        n = len(nums)
        prefix = [0] * (n + 1)
        for i in range(n):
            prefix[i + 1] = prefix[i] + nums[i]
        ans = n + 1
        deque = collections.deque()
        for y, py in enumerate(prefix):
            while deque and py <= prefix[deque[-1]]:
                deque.pop()
            while deque and py - prefix[deque[0]] >= k:
                ans = min(ans, y - deque.popleft())
            deque.append(y)
        return ans if ans < n + 1 else -1

=======

def shortestSubarray(self, nums: List[int], k: int) -> int:
        n = len(nums)
        res = n + 1
        presum = [0]
        for i in range(n):
            presum.append(presum[-1] + nums[i])
        q = collections.deque()
        for i in range(n + 1):
            while q and presum[i] - presum[q[0]] >= k:
                res = min(res, i - q.popleft())
            while q and presum[i] <= presum[q[-1]]:
                q.pop()
            q.append(i)
        return res if res <= n else -1

=======

def shortestSubarray(self, nums: List[int], k: int) -> int:
        n = len(nums)
        res = n + 1
        q = collections.deque()
        psum = [0] * (n + 1)
        for i in range(n):
            psum[i+1] = psum[i] + nums[i]
        for i in range(n + 1):
            while q and psum[i] <= psum[q[-1]]:
                q.pop()
            while q and psum[i] - psum[q[0]] >= k:
                res = min(res, i - q.popleft())
            q.append(i)
        return res if res <= n else -1

=======

def shortestSubarray(self, nums: List[int], k: int) -> int:
        q = collections.deque()
        res = float('inf')
        sums = [0]
        for i, n in enumerate(nums):
            sums.append(sums[-1] + n)
        for i, s in enumerate(sums):
            while q and s <= sums[q[-1]]:
                q.pop()
            while q and s - sums[q[0]] >= k:
                res = min(res, i - q.popleft())
            q.append(i)
        return res if res < float('inf') else -1

=======

def shortestSubarray(self, nums: List[int], k: int) -> int:
        
        pass

=======

class Solution:
    def shortestSubarray(self, nums: List[int], k: int) -> int:
        # [2,-1,2]
        # [2,-1,2,3]
        # [-1,2,3]
        # [2,3,-2,4]
        # [3,-2,4,-5]
        # [-2,4,-5,1]
        # [4,-5,1,2]
        # [-5,1,2,2]
        # [1,2,2,3]
        # [2,2,3,1]
        # [2,3,1,2]
        # [3,1,2,2]
        # [1,2,2,2]
        # [2,2,2,3]
        # [2,2,3,1]
        # [2,3,1,2]
        # [3,1,2,2]
        # [1,2,2,2]
        # [2,2,2,3]
        # [2,2,3,1]
        # [2,3,1,2]
        # [3,1,2,2]
        # [1,2,2,2]
        # [2,2,2,3]
        # [2,2,3,1]
        # [2,3,1,2]
        # [3,1,2,2]
        # [1,2,2,2]
        # [2,2,2,3]
        # [2,2,3,1]
        # [2,3,1,2]
        # [3,1,2,2]
        # [1,2,2,2]
        # [2,2,2,3]
        # [2,2,3,1]
        # [2,3,1,2]
        # [3,1,2,2]
        # [1,2,2,2]
        # [2,2,2,3]
        # [2,2,3,1]
        # [2,3,1,2]
        # [3,1,2,2]
        # [1,2,2,2]
        # [2,2,2,3]
        # [2,2,3,1]
        # [2,3,1

=======

def shortestSubarray(self, nums: List[int], k: int) -> int:
        # 1st solution: brute force, O(n^2)
        # 2nd solution: sliding window, O(n)
        # 3rd solution: monotonic queue, O(n)
        # 4th solution: prefix sum, O(nlogn)
        # 5th solution: binary search, O(nlogn)
        # 6th solution: prefix sum + monotonic queue, O(n)
        # 7th solution: prefix sum + binary search, O(nlogn)
        # 8th solution: prefix sum + monotonic queue + binary search, O(nlogn)
        
        # 8th solution: prefix sum + monotonic queue + binary search, O(nlogn)
        # https://leetcode.com/problems/shortest-subarray-with-sum-at-least-k/discuss/1419763/Python-3-8-solutions-from-O(n2)-to-O(nlogn)-with-explanation
        n = len(nums)
        ps = [0] * (n + 1)
        for i in range(1, n + 1):
            ps[i] = ps[i - 1] + nums[i - 1]
        q = collections.deque()
        res = n + 1
        for i, p in enumerate(ps):
            while q and p <= ps[q[-1]]:
                q.pop()
            while q and p - ps[q[0]] >= k:
                res = min(res, i - q.popleft())
            q.append(i)
        return res if res <= n else -1

=======

def shortestSubarray(self, nums: List[int], k: int) -> int:
        # Solved using monotonic queue
        # https://leetcode.com/problems/shortest-subarray-with-sum-at-least-k/discuss/1411093/Python-Monotonic-Queue-Explanation
        q = collections.deque()
        res = len(nums) + 1
        psum = [0]
        for n in nums:
            psum.append(psum[-1] + n)
        for i, n in enumerate(psum):
            while q and n - psum[q[0]] >= k:
                res = min(res, i - q.popleft())
            while q and n <= psum[q[-1]]:
                q.pop()
            q.append(i)
        return res if res <= len(nums) else -1

=======

class Solution:
    def shortestSubarray(self, nums: List[int], k: int) -> int:
        # sliding window
        # min size of window
        # window = [i,j]
        # i = start of window
        # j = end of window
        # sum of window
        # min window size = j - i
        # if sum < k, j += 1
        # if sum > k, i += 1
        # if sum == k, return min window size
        # if sum > k, i += 1
        # if sum < k, j += 1
        # if sum == k, return min window size
        # if sum < k, j += 1
        # if sum > k, i += 1
        # if sum == k, return min window size
        # if sum > k, i += 1
        # if sum < k, j += 1
        # if sum == k, return min window size
        # if sum < k, j += 1
        # if sum > k, i += 1
        # if sum == k, return min window size
        # if sum > k, i += 1
        # if sum < k, j += 1
        # if sum == k, return min window size
        # if sum < k, j += 1
        # if sum > k, i += 1
        # if sum == k, return min window size
        # if sum > k, i += 1
        # if sum < k, j += 1
        # if sum == k, return min window size
        # if sum < k, j += 1
        # if sum > k, i += 1
        # if sum == k, return min window size
        # if sum > k, i += 1
        # if sum < k, j += 1
        # if sum == k, return min window size
        # if sum < k, j += 1
        # if sum > k, i += 1
        # if sum == k, return min window size
        # if sum > k, i += 1
        # if sum < k, j += 1
        # if sum == k, return min window size
        # if sum < k, j += 1
        # if

=======

class Solution:
    def shortestSubarray(self, nums: List[int], k: int) -> int:
        # https://www.youtube.com/watch?v=8W2zGnHmJ1k
        # https://leetcode.com/problems/shortest-subarray-with-sum-at-least-k/discuss/1133214/Python-O(n)-solution-explained-with-images
        # https://leetcode.com/problems/shortest-subarray-with-sum-at-least-k/discuss/1133214/Python-O(n)-solution-explained-with-images/975598
        # https://leetcode.com/problems/shortest-subarray-with-sum-at-least-k/discuss/1133214/Python-O(n)-solution-explained-with-images/975598
        # https://leetcode.com/problems/shortest-subarray-with-sum-at-least-k/discuss/1133214/Python-O(n)-solution-explained-with-images/975598
        # https://leetcode.com/problems/shortest-subarray-with-sum-at-least-k/discuss/1133214/Python-O(n)-solution-explained-with-images/975598
        # https://leetcode.com/problems/shortest-subarray-with-sum-at-least-k/discuss/1133214/Python-O(n)-solution-explained-with-images/975598
        # https://leetcode.com/problems/shortest-subarray-with-sum-at-least-k/discuss/1133214/Python-O(n)-solution-explained-with-images/975598
        # https://leetcode.com/problems/shortest-subarray-with-sum-at-least-k/discuss/1133214/Python-O(n)-solution-explained-with-images/975598
        # https://leetcode.com/problems/shortest-subarray-with-sum-at-least-k/discuss/1133214/Python-O(n)-solution-explained-with-images/975598
        # https://leetcode.com/problems/shortest-subarray-with-sum-at-least-k/discuss/1133214/Python-O(n)-solution-explained-with-images/975598
        # https://leetcode.com/problems/shortest-subarray-with-sum-at-least-k/discuss/1133214/Python-O(n)-solution-explained-with-images/975598
        # https://leetcode.com/problems/shortest-subarray-with-sum-at-least-k/discuss/1133214/Python-O(n)-solution-explained-with-images/975598
        # https://leetcode.com/problems/shortest-subarray
