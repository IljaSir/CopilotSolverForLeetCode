Synthesizing 9/10 solutions

=======

def findKthNumber(self, n: int, k: int) -> int:
        cur = 1
        k -= 1
        while k > 0:
            steps = self.getSteps(n, cur, cur+1)
            if steps <= k:
                cur += 1
                k -= steps
            else:
                cur *= 10
                k -= 1
        return cur

=======

def findKthNumber(self, n: int, k: int) -> int:
        pass

=======

def findKthNumber(self, n: int, k: int) -> int:
        def count(n, prefix):
            cur = prefix
            next = prefix + 1
            count = 0
            while cur <= n:
                count += min(n + 1, next) - cur
                cur *= 10
                next *= 10
            return count
        prefix = 1
        k -= 1
        while k > 0:
            steps = count(n, prefix)
            if steps <= k:
                prefix += 1
                k -= steps
            else:
                prefix *= 10
                k -= 1
        return prefix

=======

def findKthNumber(self, n: int, k: int) -> int:
        def count_prefix(n, prefix):
            cur, next = prefix, prefix + 1
            count = 0
            while cur <= n:
                count += min(n + 1, next) - cur
                cur *= 10
                next *= 10
            return count
        prefix = 1
        k -= 1
        while k > 0:
            count = count_prefix(n, prefix)
            if count <= k:
                prefix += 1
                k -= count
            else:
                prefix *= 10
                k -= 1
        return prefix

=======

def findKthNumber(self, n: int, k: int) -> int:
        def getPrefixCount(prefix, n):
            curr = prefix
            next = prefix + 1
            count = 0
            while curr <= n:
                count += min(n + 1, next) - curr
                curr *= 10
                next *= 10
            return count
        prefix = 1
        k -= 1
        while k > 0:
            count = getPrefixCount(prefix, n)
            if k >= count:
                prefix += 1
                k -= count
            else:
                prefix *= 10
                k -= 1
        return prefix

=======

def findKthNumber(self, n: int, k: int) -> int:
        def count(n, prefix):
            c, a, b = 0, prefix, prefix + 1
            while a <= n:
                c += min(n + 1, b) - a
                a *= 10
                b *= 10
            return c
        prefix = 1
        k -= 1
        while k > 0:
            c = count(n, prefix)
            if k >= c:
                k -= c
                prefix += 1
            else:
                k -= 1
                prefix *= 10
        return prefix

=======

def findKthNumber(self, n: int, k: int) -> int:
        def count(prefix, n):
            c = 0
            while prefix <= n:
                c += min(n + 1, prefix + 10) - prefix
                prefix *= 10
            return c
        prefix = 1
        k -= 1
        while k > 0:
            c = count(prefix, n)
            if c <= k:
                prefix += 1
                k -= c
            else:
                prefix *= 10
                k -= 1
        return prefix

=======

def findKthNumber(self, n: int, k: int) -> int:
        def count(n, prefix):
            cur, next = prefix, prefix + 1
            cnt = 0
            while cur <= n:
                cnt += min(next, n+1) - cur
                cur *= 10
                next *= 10
            return cnt
        prefix = 1
        k -= 1
        while k > 0:
            cnt = count(n, prefix)
            if cnt <= k:
                prefix += 1
                k -= cnt
            else:
                prefix *= 10
                k -= 1
        return prefix

=======

def findKthNumber(self, n: int, k: int) -> int:
        #print(n, k)
        if k == 1:
            return 1
        if n < 10:
            return k
        if n < 20:
            if k <= 10:
                return k
            else:
                return k-10+1
        if k == 2:
            return 10
        if k == 3:
            return 11
        if k == 4:
            return 12
        if k == 5:
            return 13
        if k == 6:
            return 14
        if k == 7:
            return 15
        if k == 8:
            return 16
        if k == 9:
            return 17
        if k == 10:
            return 18
        if k == 11:
            return 19
        if k == 12:
            return 20
        if k == 13:
            return 21
        if k == 14:
            return 22
        if k == 15:
            return 23
        if k == 16:
            return 24
        if k == 17:
            return 25
        if k == 18:
            return 26
        if k == 19:
            return 27
        if k == 20:
            return 28
        if k == 21:
            return 29
        if k == 22:
            return 30
        if k == 23:
            return 31
        if k == 24:
            return 32
        if k == 25:
            return 33
        if k == 26:
            return 34
        if k == 27:
            return 35
        if k == 28:
            return 36
        if k == 29:
            return 37
        if k == 30:
            return 38
        if k == 31:
            return 39
        if k == 32:
            return 40
        if k == 33:
            return 41
        if k == 34:
            return 42
        if k == 35:
            return 43
        if k == 36:
            return 44
        if k == 37:
            return 45
        if k == 38:
