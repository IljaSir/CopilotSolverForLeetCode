Synthesizing 10/10 solutions (Duplicates hidden)

=======

def kInversePairs(self, n: int, k: int) -> int:
        if k > n * (n - 1) // 2 or k < 0:
            return 0
        if k == 0 or k == n * (n - 1) // 2:
            return 1
        dp = [[0] * (k + 1) for _ in range(n + 1)]
        dp[2][0] = 1
        dp[2][1] = 1
        for i in range(3, n + 1):
            dp[i][0] = 1
            for j in range(1, min(k, i * (i - 1) // 2) + 1):
                dp[i][j] = dp[i][j - 1] + dp[i - 1][j]
                if j >= i:
                    dp[i][j] -= dp[i - 1][j - i]
                dp[i][j] %= 10 ** 9 + 7
        return dp[n][k]

=======

def kInversePairs(self, n: int, k: int) -> int:
        dp = [[0] * (k + 1) for _ in range(n + 1)]
        dp[0][0] = 1
        for i in range(1, n + 1):
            for j in range(k + 1):
                dp[i][j] = dp[i - 1][j]
                if j >= i:
                    dp[i][j] -= dp[i - 1][j - i]
                if j > 0:
                    dp[i][j] += dp[i][j - 1]
                dp[i][j] %= 10 ** 9 + 7
        return dp[-1][-1]

=======

def kInversePairs(self, n: int, k: int) -> int:
        if k == 0:
            return 1
        if k > n * (n - 1) // 2:
            return 0
        dp = [[0] * (k + 1) for _ in range(n + 1)]
        for i in range(1, n + 1):
            dp[i][0] = 1
        for i in range(1, n + 1):
            for j in range(1, k + 1):
                dp[i][j] = dp[i - 1][j] + dp[i][j - 1]
                if j >= i:
                    dp[i][j] -= dp[i - 1][j - i]
        return dp[n][k] % (10 ** 9 + 7)

=======

def kInversePairs(self, n: int, k: int) -> int:
        
        pass

=======

def kInversePairs(self, n: int, k: int) -> int:
        # dp[i][j]: the number of arrays of length i with exactly j inverse pairs
        dp = [[0] * (k+1) for _ in range(n+1)]
        dp[1][0] = 1
        MOD = 10**9 + 7
        for i in range(2, n+1):
            dp[i][0] = 1
            for j in range(1, k+1):
                dp[i][j] = dp[i-1][j] + dp[i][j-1]
                if j >= i:
                    dp[i][j] -= dp[i-1][j-i]
                dp[i][j] %= MOD
        return dp[n][k]
