Synthesizing 8/10 solutions (Duplicates hidden)

=======

def racecar(self, target: int) -> int:
        
        pass

=======

def racecar(self, target: int) -> int:
        # BFS
        # dp[target] = min(dp[target], dp[j] + i + 1 + dp[target - j - (1 << i)])
        dp = [float('inf')] * (target + 1)
        dp[0] = 0
        for t in range(1, target + 1):
            k = t.bit_length()
            if t == (1 << k) - 1:
                dp[t] = k
                continue
            for j in range(k - 1):
                dp[t] = min(dp[t], dp[t - (1 << (k - 1)) + (1 << j)] + k - 1 + j + 2)
            if (1 << k) - 1 - t < t:
                dp[t] = min(dp[t], dp[(1 << k) - 1 - t] + k + 1)
        return dp[target]
