Synthesizing 10/10 solutions (Duplicates hidden)

=======

def superEggDrop(self, k: int, n: int) -> int:
        dp = [[0 for _ in range(k+1)] for _ in range(n+1)]
        for i in range(1, n+1):
            for j in range(1, k+1):
                dp[i][j] = dp[i-1][j-1] + dp[i-1][j] + 1
                if dp[i][j] >= n:
                    return i
        return n

=======

def superEggDrop(self, k: int, n: int) -> int:
        
        pass

=======

def superEggDrop(self, k: int, n: int) -> int:
        # dp[k][m] = n 表示，k个鸡蛋，扔m次，最多可以测试n层
        dp = [[0] * (n + 1) for _ in range(k + 1)]
        m = 0
        while dp[k][m] < n:
            m += 1
            for i in range(1, k + 1):
                dp[i][m] = dp[i - 1][m - 1] + dp[i][m - 1] + 1
        return m
