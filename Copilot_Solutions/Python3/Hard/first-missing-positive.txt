Synthesizing 10/10 solutions (Duplicates hidden)

=======

def firstMissingPositive(self, nums: List[int]) -> int:
        n = len(nums)
        for i in range(n):
            while 1 <= nums[i] <= n and nums[i] != nums[nums[i] - 1]:
                nums[nums[i] - 1], nums[i] = nums[i], nums[nums[i] - 1]
        for i in range(n):
            if nums[i] != i + 1:
                return i + 1
        return n + 1

=======

def firstMissingPositive(self, nums: List[int]) -> int:
        n = len(nums)
        for i in range(n):
            while 0 < nums[i] <= n and nums[i] != nums[nums[i] - 1]:
                nums[nums[i] - 1], nums[i] = nums[i], nums[nums[i] - 1]
        for i in range(n):
            if nums[i] != i + 1:
                return i + 1
        return n + 1

=======

def firstMissingPositive(self, nums: List[int]) -> int:
        n = len(nums)
        for i in range(n):
            while 0 < nums[i] <= n and nums[nums[i]-1] != nums[i]:
                nums[nums[i]-1], nums[i] = nums[i], nums[nums[i]-1]
        for i in range(n):
            if nums[i] != i+1:
                return i+1
        return n+1

=======

def firstMissingPositive(self, nums: List[int]) -> int:
        n = len(nums)
        for i in range(n):
            if nums[i] <= 0:
                nums[i] = n+1
        for i in range(n):
            if abs(nums[i]) <= n:
                nums[abs(nums[i])-1] = -abs(nums[abs(nums[i])-1])
        for i in range(n):
            if nums[i] > 0:
                return i+1
        return n+1

=======

def firstMissingPositive(self, nums: List[int]) -> int:
        if not nums:
            return 1
        nums.sort()
        if nums[-1] < 0:
            return 1
        if nums[0] > 1:
            return 1
        for i in range(len(nums)-1):
            if nums[i] > 0 and nums[i+1] - nums[i] > 1:
                return nums[i] + 1
        return nums[-1] + 1

=======

def firstMissingPositive(self, nums: List[int]) -> int:
        if len(nums) == 0:
            return 1
        nums = sorted(nums)
        if nums[-1] < 0:
            return 1
        if nums[0] > 1:
            return 1
        for i in range(len(nums)-1):
            if nums[i] > 0 and nums[i+1] - nums[i] > 1:
                return nums[i]+1
        return nums[-1]+1

=======

def firstMissingPositive(self, nums: List[int]) -> int:
        nums = set(nums)
        for i in range(1, 10**5+1):
            if i not in nums:
                return i

=======

def firstMissingPositive(self, nums: List[int]) -> int:
        if not nums:
            return 1
        nums = sorted(nums)
        if nums[-1] < 0:
            return 1
        if nums[0] > 1:
            return 1
        for i in range(len(nums)-1):
            if nums[i] > 0 and nums[i+1] - nums[i] > 1:
                return nums[i]+1
        return nums[-1]+1

=======

def firstMissingPositive(self, nums: List[int]) -> int:
        nums.sort()
        for i in range(1, len(nums)+2):
            if i not in nums:
                return i
