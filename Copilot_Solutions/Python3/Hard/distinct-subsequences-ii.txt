Synthesizing 10/10 solutions (Duplicates hidden)

=======

def distinctSubseqII(self, s: str) -> int:
        pass

=======

def distinctSubseqII(self, s: str) -> int:
        dp = [0] * 26
        for c in s:
            dp[ord(c) - ord('a')] = sum(dp) + 1
        return sum(dp) % (10**9 + 7)

=======

def distinctSubseqII(self, s: str) -> int:
        MOD = 10**9 + 7
        dp = [0] * 26
        for c in s:
            dp[ord(c) - ord('a')] = sum(dp) + 1
        return sum(dp) % MOD

=======

def distinctSubseqII(self, s: str) -> int:
        MOD = 10**9 + 7
        dp = [1]
        last = {}
        for i, c in enumerate(s):
            dp.append((dp[-1] * 2) % MOD)
            if c in last:
                dp[-1] -= dp[last[c]]
            last[c] = i
        return (dp[-1] - 1) % MOD

=======

def distinctSubseqII(self, s: str) -> int:
        dp = [0] * 26
        for c in s:
            dp[ord(c) - ord("a")] = sum(dp) + 1
        return sum(dp) % (10**9 + 7)

=======

def distinctSubseqII(self, s: str) -> int:
        MOD = 10**9+7
        dp = [1]
        last = {}
        for i, c in enumerate(s):
            dp.append(dp[-1]*2)
            if c in last:
                dp[-1] -= dp[last[c]]
            last[c] = i
        return (dp[-1]-1)%MOD

=======

def distinctSubseqII(self, s: str) -> int:
        MOD = 10**9 + 7
        dp = [0] * 26
        for c in s:
            i = ord(c) - ord('a')
            dp[i] = sum(dp) % MOD + 1
        return sum(dp) % MOD

=======

def distinctSubseqII(self, s: str) -> int:
        dp = [0] * 27
        for c in s:
            dp[ord(c) - ord('a')] = sum(dp) + 1
        return sum(dp) % (10**9 + 7)

=======

def distinctSubseqII(self, s: str) -> int:
        mod = 10**9 + 7
        dp = [1] * 26
        for c in s:
            dp[ord(c) - ord('a')] = sum(dp) + 1
        return sum(dp) % mod
