Synthesizing 10/10 solutions (Duplicates hidden)

=======

def countOfAtoms(self, formula: str) -> str:
        
        pass

=======

def countOfAtoms(self, formula: str) -> str:
        # The idea is to use a stack to store the counts of the elements.
        # When we see a left parenthesis, we push the current count to the stack.
        # When we see a right parenthesis, we pop the top of the stack and multiply the current count by the popped value.
        # When we see an uppercase letter, we add a new entry to the dictionary with the current count.
        # When we see a lowercase letter, we add it to the last element in the dictionary.
        # When we see a digit, we multiply the current count by the digit.
        # In the end, we sort the dictionary and return the result.
        stack = []
        count = 0
        current = ''
        result = {}
        for c in formula:
            if c == '(':
                stack.append(count)
                count = 0
            elif c == ')':
                count = stack.pop() * count if count > 0 else stack.pop()
            elif c.isupper():
                if current:
                    result[current] = count if count > 0 else 1
                count = 0
                current = c
            elif c.islower():
                current += c
            elif c.isdigit():
                count = count * 10 + int(c)
        if current:
            result[current] = count if count > 0 else 1
        return ''.join([k + (str(v) if v > 1 else '') for k, v in sorted(result.items())])
