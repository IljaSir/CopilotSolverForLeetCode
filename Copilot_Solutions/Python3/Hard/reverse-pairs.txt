Synthesizing 9/10 solutions

=======

def reversePairs(self, nums: List[int]) -> int:
        def merge_sort(nums, start, end):
            if start >= end:
                return 0
            mid = (start + end) // 2
            count = merge_sort(nums, start, mid) + merge_sort(nums, mid + 1, end)
            p, q = start, mid + 1
            while p <= mid:
                while q <= end and nums[p] > 2 * nums[q]:
                    q += 1
                count += q - mid - 1
                p += 1
            nums[start:end + 1] = sorted(nums[start:end + 1])
            return count
        return merge_sort(nums, 0, len(nums) - 1)

=======

def reversePairs(self, nums: List[int]) -> int:
        def merge_sort(l, r):
            if l >= r:
                return 0
            mid = (l + r) // 2
            res = merge_sort(l, mid) + merge_sort(mid + 1, r)
            i = l
            for j in range(mid + 1, r + 1):
                while i <= mid and nums[i] <= 2 * nums[j]:
                    i += 1
                res += mid - i + 1
            nums[l:r + 1] = sorted(nums[l:r + 1])
            return res
        return merge_sort(0, len(nums) - 1)

=======

def reversePairs(self, nums: List[int]) -> int:
        def merge_sort(arr):
            if len(arr) <= 1:
                return arr
            mid = len(arr) // 2
            left = merge_sort(arr[:mid])
            right = merge_sort(arr[mid:])
            return merge(left, right)
        
        def merge(left, right):
            i, j = 0, 0
            res = []
            while i < len(left) and j < len(right):
                if left[i] <= right[j]:
                    res.append(left[i])
                    i += 1
                else:
                    res.append(right[j])
                    j += 1
            res += left[i:]
            res += right[j:]
            return res
        
        arr = merge_sort(nums)
        count = 0
        for i in range(len(arr)):
            for j in range(i+1, len(arr)):
                if arr[i] > 2 * arr[j]:
                    count += 1
        return count

=======

def reversePairs(self, nums: List[int]) -> int:
        def merge_sort(arr):
            if len(arr) <= 1:
                return arr
            mid = len(arr) // 2
            left = merge_sort(arr[:mid])
            right = merge_sort(arr[mid:])
            return merge(left, right)
        def merge(left, right):
            res = []
            i, j = 0, 0
            while i < len(left) and j < len(right):
                if left[i] <= right[j]:
                    res.append(left[i])
                    i += 1
                else:
                    res.append(right[j])
                    j += 1
            res.extend(left[i:])
            res.extend(right[j:])
            return res
        return merge_sort(nums)

=======

def reversePairs(self, nums: List[int]) -> int:
        def merge_sort(lo, hi):
            if lo >= hi:
                return 0
            mid = (lo + hi) // 2
            cnt = merge_sort(lo, mid) + merge_sort(mid + 1, hi)
            i = j = mid + 1
            for left in nums[lo:mid + 1]:
                while i <= hi and left > 2 * nums[i]:
                    i += 1
                while j <= hi and left >= nums[j]:
                    j += 1
                cnt += j - (mid + 1)
            nums[lo:hi + 1] = sorted(nums[lo:hi + 1])
            return cnt
        return merge_sort(0, len(nums) - 1)

=======

def reversePairs(self, nums: List[int]) -> int:
        def merge_sort(arr):
            if len(arr) <= 1:
                return arr
            mid = len(arr) // 2
            left = merge_sort(arr[:mid])
            right = merge_sort(arr[mid:])
            i, j = 0, 0
            res = []
            while i < len(left) and j < len(right):
                if left[i] <= right[j]:
                    res.append(left[i])
                    i += 1
                else:
                    res.append(right[j])
                    j += 1
            res += left[i:]
            res += right[j:]
            return res
        arr = merge_sort(nums)
        print(arr)

=======

def reversePairs(self, nums: List[int]) -> int:
        def merge_sort(arr):
            if len(arr) <= 1:
                return arr, 0
            mid = len(arr) // 2
            left, l_count = merge_sort(arr[:mid])
            right, r_count = merge_sort(arr[mid:])
            count = l_count + r_count
            i = j = 0
            while i < len(left) and j < len(right):
                if left[i] <= 2 * right[j]:
                    i += 1
                else:
                    count += len(left) - i
                    j += 1
            arr = sorted(left + right)
            return arr, count
        arr, count = merge_sort(nums)
        return count

=======

def reversePairs(self, nums: List[int]) -> int:
        def merge(nums, l, m, r):
            i = j = 0
            res = 0
            while i < len(l) or j < len(r):
                if j == len(r) or (i < len(l) and l[i] <= r[j]):
                    nums[i+j] = l[i]
                    i += 1
                else:
                    nums[i+j] = r[j]
                    j += 1
                    res += len(l) - i
            return res

        def merge_sort(nums):
            if len(nums) <= 1:
                return 0
            m = len(nums) // 2
            l = nums[:m]
            r = nums[m:]
            res = merge_sort(l) + merge_sort(r)
            res += merge(nums, l, r)
            return res

        return merge_sort(nums)

=======

def reversePairs(self, nums: List[int]) -> int:
        # merge sort
        def merge(nums, start, mid, end):
            # count reverse pairs in a sorted array
            count = 0
            j = mid + 1
            for i in range(start, mid+1):
                while j <= end and nums[i] > 2 * nums[j]:
                    j += 1
                count += j - (mid + 1)
            nums[start:end+1] = sorted(nums[start:end+1])
            return count
        def mergeSort(nums, start, end):
            # return the number of reverse pairs
            if start >= end:
                return 0
            mid = (start + end) // 2
            count = mergeSort(nums, start, mid) + mergeSort(nums, mid+1, end)
            return count + merge(nums, start, mid, end)
        return mergeSort(nums, 0, len(nums)-1)
