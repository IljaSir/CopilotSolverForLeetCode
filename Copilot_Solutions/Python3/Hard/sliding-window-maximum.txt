Synthesizing 10/10 solutions (Duplicates hidden)

=======

def maxSlidingWindow(self, nums: List[int], k: int) -> List[int]:
        if not nums:
            return []
        res = []
        for i in range(len(nums)-k+1):
            res.append(max(nums[i:i+k]))
        return res

=======

def maxSlidingWindow(self, nums: List[int], k: int) -> List[int]:
        if not nums:
            return []
        q = collections.deque()
        res = []
        for i in range(k):
            while q and nums[i] >= nums[q[-1]]:
                q.pop()
            q.append(i)
        for i in range(k, len(nums)):
            res.append(nums[q[0]])
            while q and q[0] <= i - k:
                q.popleft()
            while q and nums[i] >= nums[q[-1]]:
                q.pop()
            q.append(i)
        res.append(nums[q[0]])
        return res

=======

def maxSlidingWindow(self, nums: List[int], k: int) -> List[int]:
        if k == 1:
            return nums
        if k == len(nums):
            return [max(nums)]
        ans = []
        for i in range(len(nums)-k+1):
            ans.append(max(nums[i:i+k]))
        return ans

=======

def maxSlidingWindow(self, nums: List[int], k: int) -> List[int]:
        if not nums:
            return []
        if k == 1:
            return nums
        if k == len(nums):
            return [max(nums)]
        res = []
        for i in range(len(nums) - k + 1):
            res.append(max(nums[i: i + k]))
        return res

=======

def maxSlidingWindow(self, nums: List[int], k: int) -> List[int]:
        if not nums:
            return nums
        res = []
        for i in range(len(nums)-k+1):
            res.append(max(nums[i:i+k]))
        return res

=======

def maxSlidingWindow(self, nums: List[int], k: int) -> List[int]:
        if k == 1:
            return nums
        return [max(nums[i:i+k]) for i in range(len(nums)-k+1)]

=======

def maxSlidingWindow(self, nums: List[int], k: int) -> List[int]:
        if not nums: return []
        if k == 1: return nums
        from collections import deque
        q = deque()
        res = []
        for i in range(len(nums)):
            while q and nums[q[-1]] <= nums[i]:
                q.pop()
            q.append(i)
            if q[0] <= i-k:
                q.popleft()
            if i >= k-1:
                res.append(nums[q[0]])
        return res

=======

def maxSlidingWindow(self, nums: List[int], k: int) -> List[int]:
        if not nums:
            return []
        if k == 1:
            return nums
        if k == len(nums):
            return [max(nums)]
        n = len(nums)
        result = []
        for i in range(n-k+1):
            result.append(max(nums[i:i+k]))
        return result
