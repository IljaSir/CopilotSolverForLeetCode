Synthesizing 10/10 solutions (Duplicates hidden)

=======

def numDecodings(self, s: str) -> int:
        if s[0] == '0':
            return 0
        dp = [0] * (len(s) + 1)
        dp[0] = 1
        dp[1] = 9 if s[0] == '*' else 1
        for i in range(1, len(s)):
            if s[i] == '*':
                dp[i + 1] += 9 * dp[i]
                if s[i - 1] == '1':
                    dp[i + 1] += 9 * dp[i - 1]
                elif s[i - 1] == '2':
                    dp[i + 1] += 6 * dp[i - 1]
                elif s[i - 1] == '*':
                    dp[i + 1] += 15 * dp[i - 1]
            else:
                if s[i] != '0':
                    dp[i + 1] += dp[i]
                if s[i - 1] == '1':
                    dp[i + 1] += dp[i - 1]
                elif s[i - 1] == '2' and s[i] <= '6':
                    dp[i + 1] += dp[i - 1]
                elif s[i - 1] == '*':
                    dp[i + 1] += (2 if s[i] <= '6' else 1) * dp[i - 1]
            dp[i + 1] %= 1000000007
        return dp[-1]

=======

def numDecodings(self, s: str) -> int:
        MOD = 10**9+7
        n = len(s)
        dp = [0]*(n+1)
        dp[0] = 1
        for i in range(n):
            if s[i] == '0':
                if i == 0:
                    return 0
                elif s[i-1] == '1' or s[i-1] == '2':
                    dp[i] = dp[i-2]
                elif s[i-1] == '*':
                    dp[i] = dp[i-2]*2
                else:
                    return 0
            elif s[i] == '*':
                dp[i] = dp[i-1]*9
                if i > 0:
                    if s[i-1] == '1':
                        dp[i] += dp[i-2]*9
                    elif s[i-1] == '2':
                        dp[i] += dp[i-2]*6
                    elif s[i-1] == '*':
                        dp[i] += dp[i-2]*15
            else:
                dp[i] = dp[i-1]
                if i > 0:
                    if s[i-1] == '1' or (s[i-1] == '2' and s[i] <= '6'):
                        dp[i] += dp[i-2]
                    elif s[i-1] == '*':
                        dp[i] += dp[i-2]*(2 if s[i] <= '6' else 1)
            dp[i] %= MOD
        return dp[n-1]

=======

def numDecodings(self, s: str) -> int:
        pass

=======

def numDecodings(self, s: str) -> int:
        # dp[i] = num of ways to decode s[:i]
        # dp[i] = dp[i-1] * (1 if s[i-1] in '123456789' else 9) + dp[i-2] * (9 if s[i-2] == '1' else 6 if s[i-2] == '2' else 15 if s[i-2] == '*' else 0)
        # dp[0] = 1
        # dp[1] = 9 if s[0] == '*' else 1 if s[0] in '123456789' else 0
        MOD = 10**9 + 7
        dp = [0] * (len(s) + 1)
        dp[0] = 1
        dp[1] = 9 if s[0] == '*' else 1 if s[0] in '123456789' else 0
        for i in range(2, len(s) + 1):
            if s[i-1] in '123456789':
                dp[i] += dp[i-1]
            else:
                dp[i] += dp[i-1] * 9
            if s[i-2] == '1':
                dp[i] += dp[i-2]
            elif s[i-2] == '2':
                dp[i] += dp[i-2] * 6
            elif s[i-2] == '*':
                dp[i] += dp[i-2] * 15
            dp[i] %= MOD
        return dp[-1]
