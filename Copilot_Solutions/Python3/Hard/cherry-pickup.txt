Synthesizing 6/10 solutions

=======

def cherryPickup(self, grid: List[List[int]]) -> int:
        n = len(grid)
        dp = [[[0] * n for _ in range(n)] for _ in range(n)]
        dp[0][0][0] = grid[0][0]
        for t in range(1, 2 * n - 1):
            for i in range(n):
                for j in range(n):
                    if grid[i][t-i] == -1 or grid[j][t-j] == -1:
                        dp[i][j][t] = -1
                        continue
                    if i > 0:
                        dp[i][j][t] = max(dp[i][j][t], dp[i-1][j][t-1])
                    if j > 0:
                        dp[i][j][t] = max(dp[i][j][t], dp[i][j-1][t-1])
                    if i > 0 and j > 0:
                        dp[i][j][t] = max(dp[i][j][t], dp[i-1][j-1][t-1])
                    if dp[i][j][t] >= 0:
                        dp[i][j][t] += grid[i][t-i] + (i != j) * grid[j][t-j]
        return max(0, dp[n-1][n-1][2*n-2])

=======

def cherryPickup(self, grid: List[List[int]]) -> int:
        n = len(grid)
        dp = [[0] * n for _ in range(n)]
        dp[0][0] = grid[0][0]
        for t in range(1, 2 * n - 1):
            dp2 = [[0] * n for _ in range(n)]
            for i in range(n):
                for p in range(n):
                    j, q = t - i, t - p
                    if j < 0 or j >= n or q < 0 or q >= n or grid[i][j] < 0 or grid[p][q] < 0:
                        continue
                    val = grid[i][j]
                    if i != p:
                        val += grid[p][q]
                    val += max(dp[i][p], dp[i][p - 1], dp[i - 1][p], dp[i - 1][p - 1])
                    dp2[i][p] = val
            dp = dp2
        return max(0, dp[n - 1][n - 1])

=======

def cherryPickup(self, grid: List[List[int]]) -> int:
        n = len(grid)
        dp = [[[0] * n for _ in range(n)] for _ in range(2)]
        dp[0][0][0] = grid[0][0]
        for t in range(1, 2 * n - 1):
            dp[t % 2] = [[0] * n for _ in range(n)]
            for i in range(max(0, t - n + 1), min(n - 1, t) + 1):
                for j in range(max(0, t - n + 1), min(n - 1, t) + 1):
                    if grid[i][t - i] == -1 or grid[j][t - j] == -1:
                        dp[t % 2][i][j] = -1
                        continue
                    cur = max(dp[(t - 1) % 2][i][j], dp[(t - 1) % 2][i][j - 1], dp[(t - 1) % 2][i - 1][j], dp[(t - 1) % 2][i - 1][j - 1])
                    if cur >= 0:
                        dp[t % 2][i][j] = cur + grid[i][t - i] + (i != j) * grid[j][t - j]
        return max(0, dp[(2 * n - 2) % 2][n - 1][n - 1])

=======

def cherryPickup(self, grid: List[List[int]]) -> int:
        n = len(grid)
        dp = [[[0 for _ in range(n)] for _ in range(n)] for _ in range(n)]
        dp[0][0][0] = grid[0][0]
        for t in range(1, 2*n-1):
            for i in range(min(n, t+1)):
                for j in range(min(n, t+1)):
                    if grid[i][t-i] == -1 or grid[j][t-j] == -1:
                        dp[i][j][t] = float('-inf')
                        continue
                    if i > 0:
                        dp[i][j][t] = max(dp[i][j][t], dp[i-1][j][t-1])
                    if j > 0:
                        dp[i][j][t] = max(dp[i][j][t], dp[i][j-1][t-1])
                    if i > 0 and j > 0:
                        dp[i][j][t] = max(dp[i][j][t], dp[i-1][j-1][t-1])
                    dp[i][j][t] += grid[i][t-i] + (i != j) * grid[j][t-j]
        return max(0, dp[n-1][n-1][2*n-2])

=======

def cherryPickup(self, grid: List[List[int]]) -> int:
        n = len(grid)
        dp = [[0]*n for _ in range(n)]
        dp[0][0] = grid[0][0]
        for t in range(1, 2*n-1):
            dp2 = [[0]*n for _ in range(n)]
            for i in range(n):
                for p in range(n):
                    j, q = t-i, t-p
                    if j<0 or j>=n or q<0 or q>=n or grid[i][j]<0 or grid[p][q]<0:
                        dp2[i][p] = -1
                        continue
                    if i > 0:
                        dp2[i][p] = max(dp2[i][p], dp[i-1][p])
                    if p > 0:
                        dp2[i][p] = max(dp2[i][p], dp[i][p-1])
                    if i > 0 and p > 0:
                        dp2[i][p] = max(dp2[i][p], dp[i-1][p-1])
                    if dp2[i][p] >= 0:
                        dp2[i][p] += grid[i][j]
                        if i != p:
                            dp2[i][p] += grid[p][q]
            dp = dp2
        return max(0, dp[n-1][n-1])

=======

def cherryPickup(self, grid: List[List[int]]) -> int:
        n = len(grid)
        dp = [[0] * (n + 1) for _ in range(n + 1)]
        for i in range(1, n + 1):
            for j in range(1, n + 1):
                if grid[i - 1][j - 1] == -1:
                    dp[i][j] = -1
        for i in range(1, n + 1):
            for j in range(1, n + 1):
                if dp[i][j] == -1:
                    continue
                if i == 1 and j == 1:
                    dp[i][j] = grid[i - 1][j - 1]
                else:
                    dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])
                    if dp[i][j] != -1:
                        dp[i][j] += grid[i - 1][j - 1]
        if dp[n][n] == -1:
            return 0
        for i in range(n - 1, 0, -1):
            for j in range(n - 1, 0, -1):
                if dp[i][j] == -1:
                    continue
                if i == n and j == n:
                    dp[i][j] = grid[i - 1][j - 1]
                else:
                    dp[i][j] = max(dp[i + 1][j], dp[i][j + 1])
                    if dp[i][j] != -1:
                        dp[i][j] += grid[i - 1][j - 1]
        if dp[1][1] == -1:
            return 0
        return dp[1][1]
