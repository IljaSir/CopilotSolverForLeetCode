Synthesizing 7/10 solutions

=======

def solveSudoku(self, board: List[List[str]]) -> None:
        """
        Do not return anything, modify board in-place instead.
        """
        def possible(y, x, n):
            for i in range(9):
                if board[y][i] == n:
                    return False
            for i in range(9):
                if board[i][x] == n:
                    return False
            x0 = (x//3)*3
            y0 = (y//3)*3
            for i in range(3):
                for j in range(3):
                    if board[y0+i][x0+j] == n:
                        return False
            return True
        
        def solve():
            for y in range(9):
                for x in range(9):
                    if board[y][x] == '.':
                        for n in range(1, 10):
                            if possible(y, x, str(n)):
                                board[y][x] = str(n)
                                solve()
                                board[y][x] = '.'
                        return
            nonlocal solved
            solved = True
        
        solved = False
        solve()

=======

def solveSudoku(self, board: List[List[str]]) -> None:
        """
        Do not return anything, modify board in-place instead.
        """

        def isValid(board, row, col, num):
            for i in range(9):
                if board[row][i] == num:
                    return False
                if board[i][col] == num:
                    return False
                if board[row//3*3 + i//3][col//3*3 + i%3] == num:
                    return False
            return True

        def solve(board):
            for row in range(9):
                for col in range(9):
                    if board[row][col] == '.':
                        for num in range(1, 10):
                            if isValid(board, row, col, str(num)):
                                board[row][col] = str(num)
                                if solve(board):
                                    return True
                                else:
                                    board[row][col] = '.'
                        return False
            return True

        solve(board)

=======

def solveSudoku(self, board: List[List[str]]) -> None:
        """
        Do not return anything, modify board in-place instead.
        """

        def isValid(board, row, col, num):
            for i in range(9):
                if board[row][i] == num:
                    return False
                if board[i][col] == num:
                    return False
                if board[3 * (row // 3) + i // 3][3 * (col // 3) + i % 3] == num:
                    return False
            return True

        def solve(board):
            for row in range(9):
                for col in range(9):
                    if board[row][col] == '.':
                        for num in '123456789':
                            if isValid(board, row, col, num):
                                board[row][col] = num
                                if solve(board):
                                    return True
                                else:
                                    board[row][col] = '.'
                        return False
            return True
        solve(board)

=======

def solveSudoku(self, board: List[List[str]]) -> None:
        """
        Do not return anything, modify board in-place instead.
        """
        def solve(board):
            for i in range(9):
                for j in range(9):
                    if board[i][j] == '.':
                        for k in range(1,10):
                            if isValid(board, i, j, str(k)):
                                board[i][j] = str(k)
                                if solve(board):
                                    return True
                                else:
                                    board[i][j] = '.'
                        return False
            return True
        def isValid(board, row, col, num):
            for i in range(9):
                if board[row][i] == num:
                    return False
                if board[i][col] == num:
                    return False
                if board[row//3*3+i//3][col//3*3+i%3] == num:
                    return False
            return True
        solve(board)

=======

def solveSudoku(self, board: List[List[str]]) -> None:
        """
        Do not return anything, modify board in-place instead.
        """

        def check_row(row, num):
            for i in range(9):
                if board[row][i] == num:
                    return False
            return True

        def check_col(col, num):
            for i in range(9):
                if board[i][col] == num:
                    return False
            return True

        def check_square(row, col, num):
            for i in range(3):
                for j in range(3):
                    if board[i+row][j+col] == num:
                        return False
            return True

        def is_valid(row, col, num):
            return check_row(row, num) and check_col(col, num) and check_square(row - row % 3, col - col % 3, num)

        def solve():
            for row in range(9):
                for col in range(9):
                    if board[row][col] == '.':
                        for num in range(1, 10):
                            num = str(num)
                            if is_valid(row, col, num):
                                board[row][col] = num
                                if solve():
                                    return True
                                else:
                                    board[row][col] = '.'
                        return False
            return True

        solve()

=======

def solveSudoku(self, board: List[List[str]]) -> None:
        """
        Do not return anything, modify board in-place instead.
        """
        def check(i, j, k):
            for x in range(9):
                if board[i][x] == k or board[x][j] == k or board[i // 3 * 3 + x // 3][j // 3 * 3 + x % 3] == k:
                    return False
            return True

        def solve():
            for i in range(9):
                for j in range(9):
                    if board[i][j] == '.':
                        for k in range(1, 10):
                            if check(i, j, str(k)):
                                board[i][j] = str(k)
                                if solve():
                                    return True
                                board[i][j] = '.'
                        return False
            return True

        solve()

=======

def solveSudoku(self, board: List[List[str]]) -> None:
        """
        Do not return anything, modify board in-place instead.
        """

        def canPlace(board, row, col, num):
            for i in range(9):
                if board[row][i] == num:
                    return False
                if board[i][col] == num:
                    return False
                if board[(row//3)*3 + i//3][(col//3)*3 + i%3] == num:
                    return False
            return True

        def solve(board):
            for i in range(9):
                for j in range(9):
                    if board[i][j] == '.':
                        for num in range(1, 10):
                            if canPlace(board, i, j, str(num)):
                                board[i][j] = str(num)
                                if solve(board):
                                    return True
                                board[i][j] = '.'
                        return False
            return True

        solve(board)
