Synthesizing 10/10 solutions (Duplicates hidden)

=======

def largestIsland(self, grid: List[List[int]]) -> int:
        n = len(grid)
        def dfs(i, j, index):
            if 0 <= i < n and 0 <= j < n and grid[i][j] == 1:
                grid[i][j] = index
                return 1 + dfs(i + 1, j, index) + dfs(i - 1, j, index) + dfs(i, j + 1, index) + dfs(i, j - 1, index)
            return 0
        index = 2
        area = {}
        for i in range(n):
            for j in range(n):
                if grid[i][j] == 1:
                    area[index] = dfs(i, j, index)
                    index += 1
        ans = max(area.values() or [0])
        for i in range(n):
            for j in range(n):
                if grid[i][j] == 0:
                    seen = {grid[x][y] for x, y in ((i + 1, j), (i - 1, j), (i, j + 1), (i, j - 1)) if 0 <= x < n and 0 <= y < n}
                    ans = max(ans, 1 + sum(area[i] for i in seen))
        return ans

=======

def largestIsland(self, grid: List[List[int]]) -> int:
        n = len(grid)
        def dfs(i, j, index):
            if 0 <= i < n and 0 <= j < n and grid[i][j] == 1:
                grid[i][j] = index
                return 1 + dfs(i+1, j, index) + dfs(i-1, j, index) + dfs(i, j+1, index) + dfs(i, j-1, index)
            return 0
        index = 2
        area = {0:0}
        for i in range(n):
            for j in range(n):
                if grid[i][j] == 1:
                    area[index] = dfs(i, j, index)
                    index += 1
        res = max(area.values())
        for i in range(n):
            for j in range(n):
                if grid[i][j] == 0:
                    seen = {grid[i+1][j], grid[i-1][j], grid[i][j+1], grid[i][j-1]}
                    res = max(res, 1 + sum(area[i] for i in seen if i > 1))
        return res

=======

def largestIsland(self, grid: List[List[int]]) -> int:
        n = len(grid)
        def dfs(i, j, index):
            if 0 <= i < n and 0 <= j < n and grid[i][j] == 1:
                grid[i][j] = index
                return 1 + dfs(i+1, j, index) + dfs(i-1, j, index) + dfs(i, j+1, index) + dfs(i, j-1, index)
            return 0
        index = 2
        areas = {0:0}
        for i in range(n):
            for j in range(n):
                if grid[i][j] == 1:
                    areas[index] = dfs(i, j, index)
                    index += 1
        res = max(areas.values())
        for i in range(n):
            for j in range(n):
                if grid[i][j] == 0:
                    res = max(res, 1+areas.get(grid[i+1][j], 0)+areas.get(grid[i-1][j], 0)+areas.get(grid[i][j+1], 0)+areas.get(grid[i][j-1], 0))
        return res

=======

def largestIsland(self, grid: List[List[int]]) -> int:
        n = len(grid)
        def dfs(i, j, idx):
            if 0 <= i < n and 0 <= j < n and grid[i][j] == 1:
                grid[i][j] = idx
                return 1 + dfs(i+1, j, idx) + dfs(i-1, j, idx) + dfs(i, j+1, idx) + dfs(i, j-1, idx)
            return 0
        idx = 2
        area = collections.defaultdict(int)
        for i in range(n):
            for j in range(n):
                if grid[i][j] == 1:
                    area[idx] = dfs(i, j, idx)
                    idx += 1
        ans = max(area.values() or [0])
        for i in range(n):
            for j in range(n):
                if grid[i][j] == 0:
                    seen = {grid[i+1][j], grid[i-1][j], grid[i][j+1], grid[i][j-1]} - {0}
                    ans = max(ans, 1 + sum(area[idx] for idx in seen))
        return ans

=======

def largestIsland(self, grid: List[List[int]]) -> int:
        def dfs(i, j, index):
            if 0 <= i < n and 0 <= j < n and grid[i][j] == 1:
                grid[i][j] = index
                area[index] += 1
                return 1 + dfs(i+1, j, index) + dfs(i-1, j, index) + dfs(i, j+1, index) + dfs(i, j-1, index)
            return 0
        
        n = len(grid)
        area = [0]
        index = 2
        for i in range(n):
            for j in range(n):
                if grid[i][j] == 1:
                    area.append(dfs(i, j, index))
                    index += 1
        
        res = max(area)
        for i in range(n):
            for j in range(n):
                if grid[i][j] == 0:
                    seen = set()
                    for x, y in [(i+1, j), (i-1, j), (i, j+1), (i, j-1)]:
                        if 0 <= x < n and 0 <= y < n:
                            seen.add(grid[x][y])
                    res = max(res, 1 + sum(area[idx] for idx in seen))
        return res

=======

def largestIsland(self, grid: List[List[int]]) -> int:
        def dfs(x, y, index):
            if x < 0 or x >= n or y < 0 or y >= n or grid[x][y] != 1:
                return 0
            grid[x][y] = index
            return 1 + dfs(x + 1, y, index) + dfs(x - 1, y, index) + dfs(x, y + 1, index) + dfs(x, y - 1, index)
        n = len(grid)
        index = 2
        area = collections.defaultdict(int)
        for i in range(n):
            for j in range(n):
                if grid[i][j] == 1:
                    area[index] = dfs(i, j, index)
                    index += 1
        res = max(area.values() or [0])
        for i in range(n):
            for j in range(n):
                if grid[i][j] == 0:
                    cur = 1
                    seen = set()
                    for x, y in ((i + 1, j), (i - 1, j), (i, j + 1), (i, j - 1)):
                        if 0 <= x < n and 0 <= y < n and grid[x][y] not in seen:
                            seen.add(grid[x][y])
                            cur += area[grid[x][y]]
                    res = max(res, cur)
        return res

=======

def largestIsland(self, grid: List[List[int]]) -> int:
        n = len(grid)
        def dfs(i, j, idx):
            if i < 0 or i >= n or j < 0 or j >= n or grid[i][j] != 1:
                return 0
            grid[i][j] = idx
            return 1 + dfs(i + 1, j, idx) + dfs(i - 1, j, idx) + dfs(i, j + 1, idx) + dfs(i, j - 1, idx)
        
        idx = 2
        areas = {0: 0}
        for i in range(n):
            for j in range(n):
                if grid[i][j] == 1:
                    areas[idx] = dfs(i, j, idx)
                    idx += 1
        ans = max(areas.values())
        for i in range(n):
            for j in range(n):
                if grid[i][j] == 0:
                    seen = {grid[i + 1][j], grid[i - 1][j], grid[i][j + 1], grid[i][j - 1]}
                    ans = max(ans, 1 + sum(areas[i] for i in seen))
        return ans

=======

def largestIsland(self, grid: List[List[int]]) -> int:
        N, M = len(grid), len(grid[0])
        def dfs(i, j, count):
            if 0 <= i < N and 0 <= j < M and grid[i][j] == 1:
                grid[i][j] = count
                return 1 + dfs(i+1, j, count) + dfs(i-1, j, count) + dfs(i, j+1, count) + dfs(i, j-1, count)
            return 0

        count = 2
        area = collections.defaultdict(int)
        for i in range(N):
            for j in range(M):
                if grid[i][j] == 1:
                    area[count] = dfs(i, j, count)
                    count += 1
        ans = max(area.values() or [0])
        for i in range(N):
            for j in range(M):
                if grid[i][j] == 0:
                    ans = max(ans, 1 + sum(area[grid[x][y]] for x, y in ((i+1, j), (i-1, j), (i, j+1), (i, j-1)) if 0 <= x < N and 0 <= y < M and grid[x][y] > 1))
        return ans

=======

def largestIsland(self, grid: List[List[int]]) -> int:
        
        pass
