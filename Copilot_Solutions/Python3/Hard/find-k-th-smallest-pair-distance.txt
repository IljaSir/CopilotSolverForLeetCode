Synthesizing 9/10 solutions (Duplicates hidden)

=======

def smallestDistancePair(self, nums: List[int], k: int) -> int:
        nums.sort()
        def possible(guess):
            # Is there k or more pairs with distance <= guess?
            count = left = 0
            for right, x in enumerate(nums):
                while x - nums[left] > guess:
                    left += 1
                count += right - left
            return count >= k

        lo = 0
        hi = nums[-1] - nums[0]
        while lo < hi:
            mi = (lo + hi) / 2
            if possible(mi):
                hi = mi
            else:
                lo = mi + 1

        return lo

=======

def smallestDistancePair(self, nums: List[int], k: int) -> int:
        nums.sort()
        n = len(nums)
        left, right = 0, nums[-1] - nums[0]
        while left < right:
            mid = (left + right) // 2
            count = 0
            j = 0
            for i in range(n):
                while j < n and nums[j] - nums[i] <= mid:
                    j += 1
                count += j - i - 1
            if count >= k:
                right = mid
            else:
                left = mid + 1
        return left

=======

def smallestDistancePair(self, nums: List[int], k: int) -> int:
        nums.sort()
        n = len(nums)
        left, right = 0, nums[-1] - nums[0]
        while left < right:
            mid = left + (right - left) // 2
            count = 0
            j = 0
            for i in range(n):
                while j < n and nums[j] - nums[i] <= mid:
                    j += 1
                count += j - i - 1
            if count >= k:
                right = mid
            else:
                left = mid + 1
        return left

=======

def smallestDistancePair(self, nums: List[int], k: int) -> int:
        nums.sort()
        n = len(nums)
        lo, hi = 0, nums[-1] - nums[0]
        while lo < hi:
            mi = (lo + hi) // 2
            count = 0
            for i in range(n):
                j = i
                while j < n and nums[j] - nums[i] <= mi:
                    j += 1
                count += j - i - 1
            if count >= k:
                hi = mi
            else:
                lo = mi + 1
        return lo

=======

def smallestDistancePair(self, nums: List[int], k: int) -> int:
        nums.sort()
        l, r = 0, nums[-1] - nums[0]
        while l < r:
            m = (l + r) // 2
            cnt = 0
            for i in range(len(nums)):
                j = i
                while j < len(nums) and nums[j] - nums[i] <= m:
                    j += 1
                cnt += j - i - 1
            if cnt < k:
                l = m + 1
            else:
                r = m
        return l

=======

def smallestDistancePair(self, nums: List[int], k: int) -> int:
        nums.sort()
        def check(mid):
            i, cnt = 0, 0
            for j in range(len(nums)):
                while nums[j] - nums[i] > mid:
                    i += 1
                cnt += j - i
            return cnt >= k
        l, r = 0, nums[-1] - nums[0]
        while l < r:
            mid = (l + r) // 2
            if check(mid):
                r = mid
            else:
                l = mid + 1
        return l

=======

def smallestDistancePair(self, nums: List[int], k: int) -> int:
        nums.sort()
        def check(x):
            count = 0
            for i in range(len(nums)):
                j = i
                while j < len(nums) and nums[j] - nums[i] <= x:
                    j += 1
                count += j - i - 1
            return count >= k
        left, right = 0, nums[-1] - nums[0]
        while left < right:
            mid = (left + right) // 2
            if check(mid):
                right = mid
            else:
                left = mid + 1
        return left

=======

def smallestDistancePair(self, nums: List[int], k: int) -> int:
        
        pass
