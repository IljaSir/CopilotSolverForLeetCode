Synthesizing 10/10 solutions (Duplicates hidden)

=======

def maxNumber(self, nums1: List[int], nums2: List[int], k: int) -> List[int]:
        def pick_max(nums, k):
            drop = len(nums) - k
            stack = []
            for num in nums:
                while drop and stack and stack[-1] < num:
                    stack.pop()
                    drop -= 1
                stack.append(num)
            return stack[:k]
        
        def merge(A, B):
            return [max(A, B).pop(0) for _ in A+B]
        
        return max(merge(pick_max(nums1, i), pick_max(nums2, k-i)) for i in range(k+1) if i <= len(nums1) and k-i <= len(nums2))

=======

def maxNumber(self, nums1: List[int], nums2: List[int], k: int) -> List[int]:
        def pick_max(nums, k):
            drop = len(nums) - k
            stack = []
            for num in nums:
                while drop and stack and stack[-1] < num:
                    stack.pop()
                    drop -= 1
                stack.append(num)
            return stack[:k]
        
        def merge(a, b):
            return [max(a, b).pop(0) for _ in a+b]
        
        return max(merge(pick_max(nums1, i), pick_max(nums2, k-i)) for i in range(k+1) if i <= len(nums1) and k-i <= len(nums2))

=======

def maxNumber(self, nums1: List[int], nums2: List[int], k: int) -> List[int]:
        def pick_max(nums, k):
            stack = []
            drop = len(nums) - k
            for num in nums:
                while drop and stack and stack[-1] < num:
                    stack.pop()
                    drop -= 1
                stack.append(num)
            return stack[:k]
        
        def merge(a, b):
            return [max(a, b).pop(0) for _ in a + b]
        
        return max(merge(pick_max(nums1, i), pick_max(nums2, k-i)) for i in range(k+1) if i <= len(nums1) and k-i <= len(nums2))

=======

def maxNumber(self, nums1: List[int], nums2: List[int], k: int) -> List[int]:
        def get_max(nums, k):
            stack = []
            for i in range(len(nums)):
                while stack and nums[i] > stack[-1] and len(stack) - 1 + len(nums) - i >= k:
                    stack.pop()
                if len(stack) < k:
                    stack.append(nums[i])
            return stack
        def merge(nums1, nums2):
            return [max(nums1, nums2).pop(0) for _ in nums1 + nums2]
        return max(merge(get_max(nums1, i), get_max(nums2, k - i)) for i in range(k + 1) if i <= len(nums1) and k - i <= len(nums2))

=======

def maxNumber(self, nums1: List[int], nums2: List[int], k: int) -> List[int]:
        def maxSubArray(nums, k):
            stack = []
            for i, num in enumerate(nums):
                while stack and stack[-1] < num and len(stack) + len(nums) - i > k:
                    stack.pop()
                if len(stack) < k:
                    stack.append(num)
            return stack
        
        def merge(nums1, nums2):
            return [max(nums1, nums2).pop(0) for _ in nums1 + nums2]
        
        return max(merge(maxSubArray(nums1, i), maxSubArray(nums2, k-i)) for i in range(k+1) if i <= len(nums1) and k-i <= len(nums2))

=======

def maxNumber(self, nums1: List[int], nums2: List[int], k: int) -> List[int]:
        def select_max(nums, k):
            stack = []
            n = len(nums)
            for i, x in enumerate(nums):
                while stack and stack[-1] < x and n - i > k - len(stack):
                    stack.pop()
                if len(stack) < k:
                    stack.append(x)
            return stack
        def merge(a, b):
            return [max(a, b).pop(0) for _ in a+b]
        return max(merge(select_max(nums1, i), select_max(nums2, k-i)) for i in range(k+1) if i <= len(nums1) and k-i <= len(nums2))

=======

def maxNumber(self, nums1: List[int], nums2: List[int], k: int) -> List[int]:
        def get_max_subsequence(nums, k):
            stack = []
            n = len(nums)
            for i in range(n):
                while stack and stack[-1] < nums[i] and n - i + len(stack) > k:
                    stack.pop()
                if len(stack) < k:
                    stack.append(nums[i])
            return stack

        def merge(nums1, nums2):
            res = []
            while nums1 or nums2:
                if nums1 > nums2:
                    res.append(nums1.pop(0))
                else:
                    res.append(nums2.pop(0))
            return res

        res = []
        for i in range(k + 1):
            if i <= len(nums1) and k - i <= len(nums2):
                res = max(res, merge(get_max_subsequence(nums1, i), get_max_subsequence(nums2, k - i)))
        return res

=======

def maxNumber(self, nums1: List[int], nums2: List[int], k: int) -> List[int]:
        def max_seq(nums, k):
            stack = []
            n = len(nums)
            for i in range(n):
                while stack and stack[-1] < nums[i] and len(stack) + n - i > k:
                    stack.pop()
                if len(stack) < k:
                    stack.append(nums[i])
            return stack
        def merge(nums1, nums2):
            return [max(nums1, nums2).pop(0) for _ in nums1 + nums2]
        return max(merge(max_seq(nums1, i), max_seq(nums2, k-i)) for i in range(k+1) if i <= len(nums1) and k-i <= len(nums2))

=======

def maxNumber(self, nums1: List[int], nums2: List[int], k: int) -> List[int]:
        
        pass
