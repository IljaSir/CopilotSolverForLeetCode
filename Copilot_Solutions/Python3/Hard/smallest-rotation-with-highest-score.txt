Synthesizing 10/10 solutions (Duplicates hidden)

=======

def bestRotation(self, nums: List[int]) -> int:
        N = len(nums)
        bad = [0] * N
        for i, x in enumerate(nums):
            left = (i - x + 1 + N) % N
            right = (i + 1) % N
            bad[left] -= 1
            bad[right] += 1
            if left > right:
                bad[0] -= 1
        best = -N
        ans = cur = 0
        for i, x in enumerate(bad):
            cur += x
            if cur > best:
                best = cur
                ans = i
        return ans

=======

def bestRotation(self, nums: List[int]) -> int:
        n = len(nums)
        change = [0] * n
        for i, x in enumerate(nums):
            change[(i - x + 1) % n] -= 1
        for i in range(1, n):
            change[i] += change[i - 1] + 1
        return change.index(max(change))

=======

def bestRotation(self, nums: List[int]) -> int:
        n = len(nums)
        change = [0] * n
        for i, num in enumerate(nums):
            change[(i - num + 1) % n] -= 1
        for i in range(1, n):
            change[i] += change[i - 1] + 1
        return change.index(max(change))

=======

def bestRotation(self, nums: List[int]) -> int:
        n = len(nums)
        changes = [0] * n
        for i, num in enumerate(nums):
            changes[(i - num + 1) % n] -= 1
        for i in range(1, n):
            changes[i] += changes[i - 1] + 1
        return changes.index(max(changes))

=======

def bestRotation(self, nums: List[int]) -> int:
        n = len(nums)
        diff = [0] * n
        for i, num in enumerate(nums):
            left = (i - num + 1 + n) % n
            right = (i + 1) % n
            diff[left] -= 1
            diff[right] += 1
            if left > right:
                diff[0] -= 1
        best = -n
        ans = cur = 0
        for i, d in enumerate(diff):
            cur += d
            if cur > best:
                best = cur
                ans = i
        return ans

=======

def bestRotation(self, nums: List[int]) -> int:
        n = len(nums)
        change = [0] * n
        for i, x in enumerate(nums):
            change[(i - x + 1) % n] -= 1
        best = cur = -n
        res = 0
        for i, x in enumerate(change):
            cur += x
            if cur > best:
                best = cur
                res = i
        return res

=======

def bestRotation(self, nums: List[int]) -> int:
        N = len(nums)
        change = [1] * N
        for i, x in enumerate(nums):
            change[(i - x + 1) % N] -= 1
        best = -N
        ans = cur = 0
        for i, x in enumerate(change):
            cur += x
            if cur > best:
                best = cur
                ans = i
        return ans

=======

def bestRotation(self, nums: List[int]) -> int:
        n = len(nums)
        change = [1] * n
        for i, x in enumerate(nums):
            change[(i-x+1)%n] -= 1
            change[(i+1)%n] += 1
        best = cur = 0
        for i in range(n):
            cur += change[i]
            if cur > best:
                best = cur
                ans = i
        return ans
