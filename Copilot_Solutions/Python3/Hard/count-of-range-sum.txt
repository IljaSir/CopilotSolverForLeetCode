Synthesizing 10/10 solutions

=======

def countRangeSum(self, nums: List[int], lower: int, upper: int) -> int:
        sums = [0]
        for num in nums:
            sums.append(sums[-1] + num)
        return self.countWhileMergeSort(sums, 0, len(sums), lower, upper)

=======

def countRangeSum(self, nums: List[int], lower: int, upper: int) -> int:
        n = len(nums)
        pre = [0] * (n + 1)
        for i in range(n):
            pre[i + 1] = pre[i] + nums[i]
        def merge_sort(lo, hi):
            mid = (lo + hi) // 2
            if mid == lo:
                return 0
            count = merge_sort(lo, mid) + merge_sort(mid, hi)
            i = j = mid
            for left in pre[lo:mid]:
                while i < hi and pre[i] - left < lower: i += 1
                while j < hi and pre[j] - left <= upper: j += 1
                count += j - i
            pre[lo:hi] = sorted(pre[lo:hi])
            return count
        return merge_sort(0, n + 1)

=======

def countRangeSum(self, nums: List[int], lower: int, upper: int) -> int:
        n = len(nums)
        prefix = [0] * (n + 1)
        for i in range(n):
            prefix[i + 1] = prefix[i] + nums[i]
        def merge_sort(l, r):
            if l == r:
                return 0
            m = (l + r) >> 1
            ret = merge_sort(l, m) + merge_sort(m + 1, r)
            i = j = m + 1
            for left in prefix[l:m + 1]:
                while i <= r and prefix[i] - left < lower:
                    i += 1
                while j <= r and prefix[j] - left <= upper:
                    j += 1
                ret += j - i
            prefix[l:r + 1] = sorted(prefix[l:r + 1])
            return ret
        return merge_sort(0, n)

=======

def countRangeSum(self, nums: List[int], lower: int, upper: int) -> int:
        if not nums:
            return 0

        n = len(nums)
        prefix_sum = [0] * (n + 1)
        for i in range(n):
            prefix_sum[i + 1] = prefix_sum[i] + nums[i]

        def merge_sort(lo, hi):
            mid = (lo + hi) // 2
            if mid == lo:
                return int(lower <= prefix_sum[lo] <= upper)

            count = merge_sort(lo, mid) + merge_sort(mid, hi)

            i = j = mid
            for left in prefix_sum[lo:mid]:
                while i <= hi and prefix_sum[i] - left < lower:
                    i += 1
                while j <= hi and prefix_sum[j] - left <= upper:
                    j += 1
                count += j - i
            prefix_sum[lo:hi] = sorted(prefix_sum[lo:hi])
            return count

        return merge_sort(0, n)

=======

def countRangeSum(self, nums: List[int], lower: int, upper: int) -> int:
        if not nums:
            return 0
        sums = [0]
        for num in nums:
            sums.append(sums[-1] + num)
        def merge_sort(sums, l, r):
            if l >= r:
                return 0
            m = (l + r) // 2
            res = merge_sort(sums, l, m) + merge_sort(sums, m+1, r)
            i, j, k = l, m+1, m+1
            for left in sums[l:m+1]:
                while k <= r and sums[k] - left < lower:
                    k += 1
                while j <= r and sums[j] - left <= upper:
                    j += 1
                res += j - k
            sums[l:r+1] = sorted(sums[l:r+1])
            return res
        return merge_sort(sums, 0, len(sums)-1)

=======

class Solution:
    def countRangeSum(self, nums: List[int], lower: int, upper: int) -> int:
        # TLE
        # n = len(nums)
        # sums = [0]
        # for num in nums:
        #     sums.append(sums[-1] + num)
        # ans = 0
        # for i in range(n):
        #     for j in range(i, n):
        #         if sums[j+1] - sums[i] >= lower and sums[j+1] - sums[i] <= upper:
        #             ans += 1
        # return ans

        # TLE
        # n = len(nums)
        # sums = [0]
        # for num in nums:
        #     sums.append(sums[-1] + num)
        # ans = 0
        # for i in range(n):
        #     for j in range(i, n):
        #         if sums[j+1] - sums[i] >= lower and sums[j+1] - sums[i] <= upper:
        #             ans += 1
        # return ans

        # TLE
        # n = len(nums)
        # sums = [0]
        # for num in nums:
        #     sums.append(sums[-1] + num)
        # ans = 0
        # for i in range(n):
        #     for j in range(i, n):
        #         if sums[j+1] - sums[i] >= lower and sums[j+1] - sums[i] <= upper:
        #             ans += 1
        # return ans

        # TLE
        # n = len(nums)
        # sums = [0]
        # for num in nums:
        #     sums.append(sums[-1] + num)
        # ans = 0
        # for i in range(n):
        #     for j in range(i, n):
        #         if sums[j+1] - sums[i] >= lower and sums[j+1] - sums[i] <= upper:
        #             ans += 1
        # return ans

        # TLE
        # n = len(nums)
        # sums = [0]
        # for num in nums:
        #     sums.append(sums[-1] + num)
        # ans = 0
        # for i in range(n):
        #     for j in range(i, n):
        #         if sums[j+1] -

=======

def countRangeSum(self, nums: List[int], lower: int, upper: int) -> int:
        # Solution 1 - Brute Force
        # Time  complexity: O(n^2)
        # Space complexity: O(1)
        # res = 0
        # for i in range(len(nums)):
        #     s = 0
        #     for j in range(i, len(nums)):
        #         s += nums[j]
        #         if lower <= s <= upper:
        #             res += 1
        # return res

        # Solution 2 - Binary Search
        # Time  complexity: O(nlogn)
        # Space complexity: O(n)
        # res = 0
        # s = 0
        # sums = [0]
        # for num in nums:
        #     s += num
        #     i = bisect.bisect_left(sums, s - upper)
        #     j = bisect.bisect_right(sums, s - lower)
        #     res += j - i
        #     bisect.insort(sums, s)
        # return res

        # Solution 3 - Merge Sort
        # Time  complexity: O(nlogn)
        # Space complexity: O(n)
        def sort(lower, upper):
            if len(sums) <= 1: return 0
            mid = len(sums) // 2
            l, r = sort(lower, upper), sort(lower, upper)
            i = j = k = 0
            while i < mid:
                while j < len(sums) and sums[j] - sums[i] < lower: j += 1
                while k < len(sums) and sums[k] - sums[i] <= upper: k += 1
                l += k - j
                i += 1
            sums[mid:] = sorted(sums[mid:])
            return l + r
        sums = [0]
        for num in nums:
            sums.append(sums[-1] + num)
        return sort(lower, upper)

=======

def countRangeSum(self, nums: List[int], lower: int, upper: int) -> int:
        N = len(nums)
        if N == 0:
            return 0
        # prefix sum
        prefix = [0] * (N + 1)
        for i in range(N):
            prefix[i + 1] = prefix[i] + nums[i]
        # merge sort
        def merge_sort(lo, hi):
            if lo == hi:
                return 0
            mid = (lo + hi) // 2
            ans = merge_sort(lo, mid) + merge_sort(mid + 1, hi)
            # merge
            i, l, r = lo, mid + 1, mid + 1
            while i <= mid:
                while l <= hi and prefix[l] - prefix[i] < lower:
                    l += 1
                while r <= hi and prefix[r] - prefix[i] <= upper:
                    r += 1
                ans += r - l
                i += 1
            # sort
            prefix[lo:hi + 1] = sorted(prefix[lo:hi + 1])
            return ans
        return merge_sort(0, N)

=======

class Solution:
    def countRangeSum(self, nums: List[int], lower: int, upper: int) -> int:
        # 1. merge sort
        # 2. binary search
        # 3. divide and conquer
        # 4. prefix sum
        # 5. segment tree
        # 6. BIT
        # 7. BIT
        # 8. BIT
        # 9. BIT
        # 10. BIT
        # 11. BIT
        # 12. BIT
        # 13. BIT
        # 14. BIT
        # 15. BIT
        # 16. BIT
        # 17. BIT
        # 18. BIT
        # 19. BIT
        # 20. BIT
        # 21. BIT
        # 22. BIT
        # 23. BIT
        # 24. BIT
        # 25. BIT
        # 26. BIT
        # 27. BIT
        # 28. BIT
        # 29. BIT
        # 30. BIT
        # 31. BIT
        # 32. BIT
        # 33. BIT
        # 34. BIT
        # 35. BIT
        # 36. BIT
        # 37. BIT
        # 38. BIT
        # 39. BIT
        # 40. BIT
        # 41. BIT
        # 42. BIT
        # 43. BIT
        # 44. BIT
        # 45. BIT
        # 46. BIT
        # 47. BIT
        # 48. BIT
        # 49. BIT
        # 50. BIT
        # 51. BIT
        # 52. BIT
        # 53. BIT
        # 54. BIT
        # 55. BIT
        # 56. BIT
        # 57. BIT
        # 58. BIT
        # 59. BIT
        # 60. BIT
        # 61. BIT
        # 62. BIT
        # 63. BIT
        # 64. BIT
        # 65. BIT
        # 66. BIT
        # 67. BIT
        # 68. BIT
        # 69. BIT
        # 70. BIT
        #

=======

def countRangeSum(self, nums: List[int], lower: int, upper: int) -> int:
        # divide and conquer
        # the idea is to divide the array into two halves, and then count the number of range sum in the left half and right half
        # and also count the number of range sum that cross the middle point
        # the idea is similar to merge sort, we need to merge the two sorted halves into one sorted array
        # and we can use two pointers to count the number of range sum that cross the middle point
        # time complexity: O(nlogn)
        # space complexity: O(n)
        def mergeSort(sums, lower, upper):
            n = len(sums)
            if n <= 1:
                return 0
            mid = n // 2
            count = mergeSort(sums[:mid], lower, upper) + mergeSort(sums[mid:], lower, upper)
            # count the number of range sum that cross the middle point
            # use two pointers to count the number of range sum that cross the middle point
            i = j = k = mid
            for left in sums[:mid]:
                while i < n and sums[i] - left < lower:
                    i += 1
                while j < n and sums[j] - left <= upper:
                    j += 1
                count += j - i
            # merge the two sorted halves into one sorted array
            sums[:k] = sorted(sums[:k] + sums[k:])
            return count
        n = len(nums)
        if n == 0:
            return 0
        sums = [0] * (n + 1)
        for i in range(n):
            sums[i + 1] = sums[i] + nums[i]
        return mergeSort(sums, lower, upper)
