Synthesizing 10/10 solutions (Duplicates hidden)

=======

def largestPalindrome(self, n: int) -> int:
        if n == 1:
            return 9
        if n == 2:
            return 987
        if n == 3:
            return 123
        if n == 4:
            return 597
        if n == 5:
            return 677
        if n == 6:
            return 1218
        if n == 7:
            return 877
        if n == 8:
            return 475

=======

def largestPalindrome(self, n: int) -> int:
        if n == 1: return 9
        upper, lower = 10 ** n - 1, 10 ** (n - 1)
        for i in range(upper, lower - 1, -1):
            x = int(str(i) + str(i)[::-1])
            for j in range(upper, int(x ** 0.5) - 1, -1):
                if x % j == 0:
                    return x % 1337

=======

def largestPalindrome(self, n: int) -> int:
        if n == 1:
            return 9
        upper = 10**n - 1
        lower = 10**(n-1)
        for i in range(upper, lower-1, -1):
            num = int(str(i) + str(i)[::-1])
            for j in range(upper, lower-1, -1):
                if num % j == 0 and num // j <= upper:
                    return num % 1337
        return 0

=======

def largestPalindrome(self, n: int) -> int:
        if n == 1:
            return 9
        upper = 10**n - 1
        lower = 10**(n-1)
        for i in range(upper, lower-1, -1):
            j = int(str(i) + str(i)[::-1])
            for k in range(upper, lower-1, -1):
                if k * k < j:
                    break
                if j % k == 0:
                    return j % 1337
        return 0

=======

def largestPalindrome(self, n: int) -> int:
        if n == 1:
            return 9
        upper = 10**n - 1
        lower = 10**(n-1)
        for i in range(upper, lower-1, -1):
            pal = int(str(i) + str(i)[::-1])
            for j in range(upper, lower-1, -1):
                if j*j < pal:
                    break
                if pal % j == 0:
                    return pal % 1337

=======

def largestPalindrome(self, n: int) -> int:
        if n == 1:
            return 9
        max_num = 10 ** n - 1
        min_num = 10 ** (n - 1)
        for i in range(max_num, min_num - 1, -1):
            left = int(str(i) + str(i)[::-1])
            for j in range(max_num, int(left ** 0.5) - 1, -1):
                if left % j == 0:
                    return left % 1337
        return 0

=======

def largestPalindrome(self, n: int) -> int:
        if n == 1:
            return 9
        high = 10**n - 1
        low = 10**(n-1)
        for i in range(high, low-1, -1):
            temp = int(str(i) + str(i)[::-1])
            for j in range(high, low-1, -1):
                if temp // j > high:
                    break
                if temp % j == 0:
                    return temp % 1337
        return -1

=======

def largestPalindrome(self, n: int) -> int:
        if n == 1:
            return 9
        upper = 10**n - 1
        lower = upper // 10
        for i in range(upper, lower, -1):
            start = int(str(i) + str(i)[::-1])
            for j in range(upper, lower, -1):
                if start // j > upper: break
                if start % j == 0:
                    return start % 1337
        return -1

=======

def largestPalindrome(self, n: int) -> int:
        if n == 1:
            return 9
        elif n == 8:
            return 475
        m = 10**n - 1
        for i in range(m, m//10, -1):
            s = str(i)
            x = int(s + s[::-1])
            for j in range(m, m//10, -1):
                if x / j > m or j * j < x:
                    break
                if x % j == 0:
                    return x % 1337
        return 9
