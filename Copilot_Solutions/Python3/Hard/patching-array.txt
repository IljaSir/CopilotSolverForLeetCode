Synthesizing 10/10 solutions (Duplicates hidden)

=======

def minPatches(self, nums: List[int], n: int) -> int:
        miss, added, i = 1, 0, 0
        while miss <= n:
            if i < len(nums) and nums[i] <= miss:
                miss += nums[i]
                i += 1
            else:
                miss += miss
                added += 1
        return added

=======

def minPatches(self, nums: List[int], n: int) -> int:
        miss, i, added = 1, 0, 0
        while miss <= n:
            if i < len(nums) and nums[i] <= miss:
                miss += nums[i]
                i += 1
            else:
                miss += miss
                added += 1
        return added

=======

def minPatches(self, nums: List[int], n: int) -> int:
        res = 0
        miss = 1
        i = 0
        while miss <= n:
            if i < len(nums) and nums[i] <= miss:
                miss += nums[i]
                i += 1
            else:
                miss += miss
                res += 1
        return res

=======

def minPatches(self, nums: List[int], n: int) -> int:
        i, ans, miss = 0, 0, 1
        while miss <= n:
            if i < len(nums) and nums[i] <= miss:
                miss += nums[i]
                i += 1
            else:
                miss += miss
                ans += 1
        return ans

=======

def minPatches(self, nums: List[int], n: int) -> int:
        count = 0
        i = 0
        x = 1
        while x <= n:
            if i < len(nums) and nums[i] <= x:
                x += nums[i]
                i += 1
            else:
                x *= 2
                count += 1
        return count

=======

def minPatches(self, nums: List[int], n: int) -> int:
        patch = 0
        i = 0
        x = 1
        while x <= n:
            if i < len(nums) and nums[i] <= x:
                x += nums[i]
                i += 1
            else:
                x *= 2
                patch += 1
        return patch

=======

def minPatches(self, nums: List[int], n: int) -> int:
        if n < 1:
            return 0
        count = 0
        i = 0
        miss = 1
        while miss <= n:
            if i < len(nums) and nums[i] <= miss:
                miss += nums[i]
                i += 1
            else:
                miss += miss
                count += 1
        return count
