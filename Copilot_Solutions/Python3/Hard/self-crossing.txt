Synthesizing 10/10 solutions (Duplicates hidden)

=======

def isSelfCrossing(self, distance: List[int]) -> bool:
        if len(distance) < 4:
            return False
        for i in range(3, len(distance)):
            if distance[i] >= distance[i-2] and distance[i-1] <= distance[i-3]:
                return True
            if i >= 4:
                if distance[i-1] == distance[i-3] and distance[i] + distance[i-4] >= distance[i-2]:
                    return True
            if i >= 5:
                if distance[i-2] >= distance[i-4] and distance[i-1] <= distance[i-3] and distance[i-1] >= distance[i-3] - distance[i-5] and distance[i] >= distance[i-2] - distance[i-4]:
                    return True
        return False

=======

def isSelfCrossing(self, distance: List[int]) -> bool:
        if len(distance) < 4:
            return False
        for i in range(3, len(distance)):
            if distance[i] >= distance[i-2] and distance[i-1] <= distance[i-3]:
                return True
            if i >= 4:
                if distance[i-1] == distance[i-3] and distance[i] >= distance[i-2]-distance[i-4]:
                    return True
            if i >= 5:
                if distance[i-2] >= distance[i-4] and distance[i-3] >= distance[i-1] and distance[i] >= distance[i-2]-distance[i-4] and distance[i-1] >= distance[i-3]-distance[i-5]:
                    return True
        return False

=======

def isSelfCrossing(self, distance: List[int]) -> bool:
        if len(distance) <= 3:
            return False
        for i in range(3, len(distance)):
            if distance[i] >= distance[i-2] and distance[i-1] <= distance[i-3]:
                return True
            if i >= 4 and distance[i-1] == distance[i-3] and distance[i] + distance[i-4] >= distance[i-2]:
                return True
            if i >= 5 and distance[i-2] >= distance[i-4] and distance[i-3] >= distance[i-1] and distance[i] + distance[i-4] >= distance[i-2] and distance[i-1] + distance[i-5] >= distance[i-3]:
                return True
        return False

=======

def isSelfCrossing(self, distance: List[int]) -> bool:
        if len(distance) <= 3:
            return False
        for i in range(3, len(distance)):
            if distance[i] >= distance[i - 2] and distance[i - 1] <= distance[i - 3]:
                return True
            elif i >= 4 and distance[i - 1] == distance[i - 3] and distance[i] + distance[i - 4] >= distance[i - 2]:
                return True
            elif i >= 5 and distance[i - 2] >= distance[i - 4] and distance[i] + distance[i - 4] >= distance[i - 2] and distance[i - 1] <= distance[i - 3] and distance[i - 1] + distance[i - 5] >= distance[i - 3]:
                return True
        return False

=======

def isSelfCrossing(self, distance: List[int]) -> bool:
        x, y = 0, 0
        dx, dy = 0, 1
        for d in distance:
            x, y = x + dx * d, y + dy * d
            if dx == 0:
                if dy == 1:
                    if x < 0:
                        dx, dy = -1, 0
                    elif x > 0:
                        dx, dy = 1, 0
                else:
                    if x < 0:
                        dx, dy = 1, 0
                    elif x > 0:
                        dx, dy = -1, 0
            else:
                if dx == 1:
                    if y < 0:
                        dx, dy = 0, -1
                    elif y > 0:
                        dx, dy = 0, 1
                else:
                    if y < 0:
                        dx, dy = 0, 1
                    elif y > 0:
                        dx, dy = 0, -1
        return x == 0 and y == 0

=======

def isSelfCrossing(self, distance: List[int]) -> bool:
        
        pass

=======

def isSelfCrossing(self, distance: List[int]) -> bool:
        # 1st approach: geometry
        # Time: O(n)
        # Space: O(1)
        for i in range(3, len(distance)):
            if distance[i] >= distance[i-2] and distance[i-1] <= distance[i-3]:
                return True
            if i >= 4 and distance[i-1] == distance[i-3] and distance[i] + distance[i-4] >= distance[i-2]:
                return True
            if i >= 5 and distance[i-2] >= distance[i-4] and distance[i-3] >= distance[i-1] and distance[i] + distance[i-4] >= distance[i-2] and distance[i-1] + distance[i-5] >= distance[i-3]:
                return True
        return False

=======

class Solution:
    def isSelfCrossing(self, distance: List[int]) -> bool:
        # https://www.geeksforgeeks.org/check-if-a-given-array-of-distances-can-represent-self-crossing/
        # https://www.cnblogs.com/grandyang/p/5877482.html
        # https://leetcode.com/problems/self-crossing/discuss/79130/Java-Oms-with-explanation
        # https://leetcode.com/problems/self-crossing/discuss/79130/Java-Oms-with-explanation/81939
        # https://leetcode.com/problems/self-crossing/discuss/79130/Java-Oms-with-explanation/81934
        # https://leetcode.com/problems/self-crossing/discuss/79130/Java-Oms-with-explanation/81943
        # https://leetcode.com/problems/self-crossing/discuss/79130/Java-Oms-with-explanation/81947
        # https://leetcode.com/problems/self-crossing/discuss/79130/Java-Oms-with-explanation/81952
        # https://leetcode.com/problems/self-crossing/discuss/79130/Java-Oms-with-explanation/81955
        # https://leetcode.com/problems/self-crossing/discuss/79130/Java-Oms-with-explanation/81959
        # https://leetcode.com/problems/self-crossing/discuss/79130/Java-Oms-with-explanation/81961
        # https://leetcode.com/problems/self-crossing/discuss/79130/Java-Oms-with-explanation/81963
        # https://leetcode.com/problems/self-crossing/discuss/79130/Java-Oms-with-explanation/81967
        # https://leetcode.com/problems/self-crossing/discuss/79130/Java-Oms-with-explanation/81969
        # https://leetcode.com/problems/self-crossing/discuss/79130/Java-Oms-with-explanation/81971
        # https://leetcode.com/problems/self-crossing/discuss/79130/Java-Oms-with-explanation/81976
        # https://leetcode.com/problems/self-crossing/discuss/79130/Java-Oms-with-explanation/81980
        # https://leetcode.com/problems/self-crossing/discuss/79130/Java-Oms-with-explanation/81982
        # https://leetcode.com/problems/self-crossing/discuss/79130/Java-Oms-with-explanation/81984
        # https://leetcode.com/problems/self-crossing/discuss/79130/

=======

class Solution:
    def isSelfCrossing(self, distance: List[int]) -> bool:
        # 1. determine the direction
        # 2. determine the location
        # 3. determine the path
        # 4. determine the crossing
        # 5. determine the path length
        # 6. determine the path length
        # 7. determine the path length
        # 8. determine the path length
        # 9. determine the path length
        # 10. determine the path length
        # 11. determine the path length
        # 12. determine the path length
        # 13. determine the path length
        # 14. determine the path length
        # 15. determine the path length
        # 16. determine the path length
        # 17. determine the path length
        # 18. determine the path length
        # 19. determine the path length
        # 20. determine the path length
        # 21. determine the path length
        # 22. determine the path length
        # 23. determine the path length
        # 24. determine the path length
        # 25. determine the path length
        # 26. determine the path length
        # 27. determine the path length
        # 28. determine the path length
        # 29. determine the path length
        # 30. determine the path length
        # 31. determine the path length
        # 32. determine the path length
        # 33. determine the path length
        # 34. determine the path length
        # 35. determine the path length
        # 36. determine the path length
        # 37. determine the path length
        # 38. determine the path length
        # 39. determine the path length
        # 40. determine the path length
        # 41. determine the path length
        # 42. determine the path length
        # 43. determine the path length
        # 44. determine the path length
        # 45. determine the path length
        # 46. determine the path length
        # 47. determine the path length
        # 48. determine the path length
        # 49. determine the path length
        # 50. determine the path length
        #
