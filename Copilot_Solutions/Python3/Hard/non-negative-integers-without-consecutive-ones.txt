Synthesizing 10/10 solutions (Duplicates hidden)

=======

def findIntegers(self, n: int) -> int:
        pass

=======

def findIntegers(self, n: int) -> int:
        dp = [0, 1]
        for i in range(2, 32):
            dp.append(dp[-1] + dp[-2])
        res, pre_bit = 0, 0
        for i in range(30, -1, -1):
            if n & (1 << i):
                res += dp[i + 1]
                if pre_bit:
                    return res
                pre_bit = 1
            else:
                pre_bit = 0
        return res + 1

=======

def findIntegers(self, n: int) -> int:
        # dp[i][0] = dp[i-1][0]+dp[i-1][1]
        # dp[i][1] = dp[i-1][0]
        dp = [[0,0] for _ in range(32)]
        dp[0][0] = 1
        for i in range(1,32):
            dp[i][0] = dp[i-1][0]+dp[i-1][1]
            dp[i][1] = dp[i-1][0]
        res = 0
        pre = 0
        for i in range(31,-1,-1):
            if n&(1<<i):
                res += dp[i][0]+dp[i][1]
                if pre == 1:
                    res -= dp[i][1]
                    break
                pre = 1
            else:
                pre = 0
        return res+1

=======

def findIntegers(self, n: int) -> int:
        a, b = 1, 2
        for i in range(2, 31):
            a, b = b, a + b
        res = a + b
        pre = 0
        for i in range(29, -1, -1):
            if n & (1 << i):
                res += a
                if pre:
                    res -= 1
                    break
                pre = 1
            else:
                pre = 0
            if i:
                a, b = b - a, a
        return res

=======

def findIntegers(self, n: int) -> int:
        # dp[i] = dp[i-1] + dp[i-2]
        # dp[0] = 1
        # dp[1] = 2
        dp = [1, 2]
        for i in range(2, 31):
            dp.append(dp[i-1] + dp[i-2])
        ans = 0
        prev_bit = 0
        for i in range(29, -1, -1):
            if n & (1 << i):
                ans += dp[i]
                if prev_bit:
                    return ans
                prev_bit = 1
            else:
                prev_bit = 0
        return ans + 1

=======

def findIntegers(self, n: int) -> int:
        def count(n):
            a, b = 1, 2
            for _ in range(n):
                a, b = a + b, a
            return a
        n = bin(n)[2:]
        res = 0
        for i in range(len(n)):
            if n[i] == '0':
                continue
            res += count(len(n) - i - 1)
            if i > 0 and n[i - 1] == '1':
                return res
        return res + 1

=======

class Solution:
    def findIntegers(self, n: int) -> int:
        # 0 1 2 3 4 5 6 7 8 9 10
        # 0 1 1 2 1 2 3 5 8 13
        # 0 1 1 11 1 11 111 1111 11111 111111
        # 0 1 1 2 1 2 3 5 8 13 21 34 55 89
        # 0 1 1 3 1 3 7 15 31 63 127 255 511 1023
        # 0 1 1 3 1 3 7 15 31 63 127 255 511 1023 2047
        # 0 1 1 3 1 3 7 15 31 63 127 255 511 1023 2047 4095
        # 0 1 1 3 1 3 7 15 31 63 127 255 511 1023 2047 4095 8191
        # 0 1 1 3 1 3 7 15 31 63 127 255 511 1023 2047 4095 8191 16383
        # 0 1 1 3 1 3 7 15 31 63 127 255 511 1023 2047 4095 8191 16383 32767
        # 0 1 1 3 1 3 7 15 31 63 127 255 511 1023 2047 4095 8191 16383 32767 65535
        # 0 1 1 3 1 3 7 15 31 63 127 255 511 1023 2047 4095 8191 16383 32767 65535 131071
        # 0 1 1 3 1 3 7 15 31 63 127 255 511 1023 2047 4095 8191 16383 32767 65535 131071 262

=======

class Solution:
    def findIntegers(self, n: int) -> int:
        # dp[i] = dp[i-1] + dp[i-2]
        # dp[i] = number of integers whose binary representation has i digits and does not contain consecutive ones
        # dp[0] = 1
        # dp[1] = 2
        # dp[2] = 3
        # dp[3] = 5
        # dp[4] = 8
        # dp[5] = 13
        # dp[6] = 21
        # dp[7] = 34
        # dp[8] = 55
        # dp[9] = 89
        # dp[10] = 144
        # dp[11] = 233
        # dp[12] = 377
        # dp[13] = 610
        # dp[14] = 987
        # dp[15] = 1597
        # dp[16] = 2584
        # dp[17] = 4181
        # dp[18] = 6765
        # dp[19] = 10946
        # dp[20] = 17711
        # dp[21] = 28657
        # dp[22] = 46368
        # dp[23] = 75025
        # dp[24] = 121393
        # dp[25] = 196418
        # dp[26] = 317811
        # dp[27] = 514229
        # dp[28] = 832040
        # dp[29] = 1346269
        # dp[30] = 2178309
        # dp[31] = 3524578
        # dp[32] = 5702887
        # dp[33] = 9227465
        # dp[34] = 14930352
        # dp[35] = 24157817
        # dp[36] = 39088169
        # dp[37] = 63245986
        # dp[38] = 102334155
        # dp[39] = 165580141
        # dp[40] = 267914296
        # dp[41] = 433494437
