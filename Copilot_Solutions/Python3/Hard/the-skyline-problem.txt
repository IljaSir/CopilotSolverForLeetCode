Synthesizing 10/10 solutions

=======

def getSkyline(self, buildings: List[List[int]]) -> List[List[int]]:
        if not buildings:
            return []
        if len(buildings) == 1:
            return [[buildings[0][0], buildings[0][2]], [buildings[0][1], 0]]
        
        mid = len(buildings) // 2
        left = self.getSkyline(buildings[:mid])
        right = self.getSkyline(buildings[mid:])
        
        return self.merge(left, right)

=======

def getSkyline(self, buildings: List[List[int]]) -> List[List[int]]:
        if not buildings:
            return []
        if len(buildings) == 1:
            return [[buildings[0][0], buildings[0][2]], [buildings[0][1], 0]]
        
        mid = len(buildings) // 2
        left = self.getSkyline(buildings[:mid])
        right = self.getSkyline(buildings[mid:])
        
        return self.merge(left, right)

=======

def getSkyline(self, buildings: List[List[int]]) -> List[List[int]]:
        points = []
        for left, right, height in buildings:
            points.append((left, -height))
            points.append((right, height))
        points.sort()
        res = [[0, 0]]
        heap = [(0, float('inf'))]
        for x, height in points:
            while x >= heap[0][1]:
                heapq.heappop(heap)
            if height < 0:
                heapq.heappush(heap, (height, x - height))
            if res[-1][1] != -heap[0][0]:
                res.append([x, -heap[0][0]])
        return res[1:]

=======

def getSkyline(self, buildings: List[List[int]]) -> List[List[int]]:
        # Time  complexity: O(NlogN)
        # Space complexity: O(N)
        # N = len(buildings)
        events = []ctive[0][0]])
        return res[1:]

=======

def getSkyline(self, buildings: List[List[int]]) -> List[List[int]]:
        import heapq
        heap = []
        res = []
        for i, b in enumerate(buildings):
            while heap and heap[0][1] <= b[0]:
                heapq.heappop(heap)
            if heap:
                if heap[0][0] < b[2]:
                    if res and res[-1][0] == b[0]:
                        res[-1][1] = max(res[-1][1], b[2])
                    else:
                        res.append([b[0], b[2]])
            else:
                res.append([b[0], b[2]])
            heapq.heappush(heap, (b[2], b[1]))
        while heap:
            h, e = heapq.heappop(heap)
            while heap and heap[0][1] <= e:
                heapq.heappop(heap)
            if heap:
                if heap[0][0] < h:
                    res.append([e, heap[0][0]])
            else:
                res.append([e, 0])
        return res

=======

class Solution:
    class Solution:
    def getSkyline(sandlf, buildings: List[List[int]]) -> List[List[int]]:
        # 1. Divide and Conquenn
        # Time  complexity: O(nlogn)
        # # Sp ctSplexit:sOl()buldins
        ## de d f updaup_xuyput(x, y):
        ##        # if skyli e cha geiis top vrutical - add      ewuppintx, y])
        ##   #i   if soe:upuoouput[-1][0] != x:
      # #      opu.ppe([x,])
        ##   dfeg   if, kyl=ne   angcu sev_ trcalh- updaty eatoi
        ##    tu=else
#   otu[-1][1]=y

        ##    de wmerge_skyhinis(lele,n or p)r:
        ##        nil wn_rre atn(le t),  en(right)nd of left list or current x is bigger than right's
        ##         _ i pp_r = 0     x, left_y = left[p_l]
        ##             y_=+left_y = 1_y = 0
      # #         out ut#el[]e if we'fe at the ond of right lisr or c rle,t x is bigger than left's

        ##        weslp_l< _lrp_r < _r:
        ##         g       w 'r= tten of lftlisr crren x is b gger  han#gigh('s
te      #  #          if  yt == nhr o  (p_l <i _c andrr_y [p_l][0] <=!rxght[p_r][0])::
  #     #         #           eft_ycurr_y = _max_y
#       p_l +=#1
       u#n#elseifwe'reattheed f righliscrren is bigger than left's
 def ge#        #    i :
  #     #r        #       n = ight_y i_
      # #                #p_r += 1
      ex##maxheight(.e.y)beweenbhskylines
        ##         # two sy = max(lveotyright_
       #        re#sif m[x heigh0 is bigg,r 0]an curr]nt y,updteadcurr y
    acti#        for , hveur_y!=mx_y:
   ixte#                update_heapq.(ctimax_v)
        #          f:crr_y=mx_y

       #         return output

       i#f r-c=======_s
def gnert heapq
        # ]       ir == 0
        #for (l       rweuhna[]] <= b[0]:
        #         if n  = 1:p[0][0] < b[2]:
        #  f           _start  x_ sd, y = bu  dngs
        #             return [[x_start, y], [x_end, 0]]

   s    #         # split tre in.[  bnto]twosubapay.]))
        #while hemd = , //pq.heappop(heap)
            while heap and heap[0][1] <= e:
                heapq.heappop(heap)
            if heap:
                if heap[0][0] < h:
                    res.append([e, heap[0][0]])
            else:
                res.append([e, 0])
        return res

=======

def getSkyline(self, buildings: List[List[int]]) -> List[List[int]]:
        # 1. Divide & Conquer
        # Time  complexity: O(NlogN)
        # Space complexity: O(N)
        def merge_skylines(left, right):
            """
            Merge two skylines together.
            """
            nL, nR = len(left), len(right)
            # the final output array
            output = []
            # current position in left and right lists
            pl = pr = 0
            # current height of left and right skylines
            Hl = Hr = 0
            # current x-position
            curr_x = 0
            # while we're in the region where both skylines are present
            while pl < nL and pr < nR:
                # pick up the smallest x
                if left[pl][0] < right[pr][0]:
                    curr_x, Hl = left[pl]
                    pl += 1
                else:
                    curr_x, Hr = right[pr]
                    pr += 1
                # max height (i.e. y) between both skylines
                max_H = max(Hl, Hr)
                # if the skyline has changed, update the output
                if not output or output[-1][1] != max_H:
                    update_output(curr_x, max_H)

            # there is only left skyline
            while pl < nL:
                curr_x, Hl = left[pl]
                pl += 1
                max_H = max(Hl, Hr)
                if not output or output[-1][1] != max_H:
                    update_output(curr_x, max_H)

            # there is only right skyline
            while pr < nR:
                curr_x, Hr = right[pr]
                pr += 1
                max_H = max(Hl, Hr)
                if not output or output[-1][1] != max_H:
                    update_output(curr_x, max_H)

            return output

        def update_output(x, y):
            """
            Update the final output with the new element.
            """
            # if skyline change is not vertical - add the new point
            if not output or output[-1][0] != x:
                output.append([x, y])
            # if skyline change is vertical - update the last point
            else:
                output[-1][1] = y

=======

def getSkyline(self, buildings: List[List[int]]) -> List[List[int]]:
        # Time  complexity: O(NlogN)
        # Space complexity: O(N)
        # N = len(buildings)
        events = []
        for l, r, h in buildings:
            events.append((l, -h, r))
            events.append((r, 0, 0))
        events.sort()
        
        res = [[0, 0]]
        active = [(0, float('inf'))]
        for x, h, r in events:
            while x >= active[0][1]:
                heapq.heappop(active)
            if h:
                heapq.heappush(active, (h, r))
            if res[-1][1] != -active[0][0]:
                res.append([x, -active[0][0]])
        return res[1:]

=======

def getSkyline(self, buildings: List[List[int]]) -> List[List[int]]:
        # 1. Divide & Conquer
        # Time  complexity: O(NlogN)
        # Space complexity: O(N)
        def merge_skylines(left, right):
            """
            Merge two skylines together.
            """
            nL, nR = len(left), len(right)
            # the final output array
            output = []
            # current position in left and right lists
            pl = pr = 0
            # current height of left and right skylines
            Hl = Hr = 0
            # current x-position
            curr_x = 0
            # while we're in the region where both skylines are present
            while pl < nL and pr < nR:
                # pick up the smallest x
                if left[pl][0] < right[pr][0]:
                    curr_x, Hl = left[pl]
                    pl += 1
                else:
                    curr_x, Hr = right[pr]
                    pr += 1
                # max height (i.e. y) between both skylines
                max_H = max(Hl, Hr)
                # if the skyline has changed, update the output
                if not output or output[-1][1] != max_H:
                    update_output(curr_x, max_H)

            # there is only left skyline
            while pl < nL:
                curr_x, Hl = left[pl]
                pl += 1
                max_H = max(Hl, Hr)
                if not output or output[-1][1] != max_H:
                    update_output(curr_x, max_H)

            # there is only right skyline
            while pr < nR:
                curr_x, Hr = right[pr]
                pr += 1
                max_H = max(Hl, Hr)
                if not output or output[-1][1] != max_H:
                    update_output(curr_x, max_H)

            return output

        def update_output(x, y):
            """
            Update the final output with the new element.
            """
            # if skyline change is not vertical - add the new point
            if not output or output[-1][0] != x:
                output.append([x, y])
            # if skyline change is vertical - update the last point
            else:
                output[-1][1] = y

=======

def getSkyline(self, buildings: List[List[int]]) -> List[List[int]]:
        # sort the buildings by x
        buildings.sort(key=lambda x: x[0])
        # init the heap
        heap = [[0, float('inf')]]
        return #esult

=======

def g iSkyline(self, bnildings: List[List[int]]) -> List[List[int]]:
        # 1. create a list of all the points and their heights
        # 2. sort the list by the x coordinate
        # 3. create a max heap to store the heights
        # 4. cieate at empty list to store the theult
        # 5. iterate thro gh the rise:
        #    if the height is negative, add it to the heap
        #    if the height is positive, remove it from the heap
        #    if the current max height is different from the previous one, add the point to the result
        # return the result
        points = []
        for building in buildings:
            points.append([building[0], -building[2]])
            points.append([building[1], building[2]])
        points.sort()
        heap = [(0, float('inf'))]
        res = []
        for point in points:
            if point[1] < 0:
                heapq.heappush(heap, (point[1], point[0]))
            else:
                heap.remove((-point[1], point[0]))
                heapq.heapify(heap)
            if res and res[-1][1] == -heap[0][0]:
                continue
            res.append([point[0], -heap[0][0]])
        return ressult
        result = [[0, 0]]
        # loop over the buildings
        for l, r, h in buildings:
            # remove the buildings that are no longer in the skyline
            while l >= heap[0][1]:
                heappop(heap)
            # if the current building is higher than the highest building in the heap
            # we know that the skyline will be changed
            if h > -heap[0][0]:
                # if the current building starts at the same x as the last point in the result
                # we know that we can just update the last point in the result
                if l == result[-1][0]:
                    result[-1][1] = h
                # otherwise, we know that we need to add a new point to the result
                else:
                    result.append([l, h])
            # add the current building into the heap
            heappush(heap, [-h, r])
        # remove the buildings that are no longer in the skyline
        while heap[0][1] < float('inf'):
            heappop(heap)
            # if the current building is higher than the highest building in the heap
            # we know that the skyline will be changed
            if -heap[0][0] != result[-1][1]:
                # add a new point to the result
                result.append([heap[0][1], -heap[0][0]])
        # return the result
        return result

=======

def getSkyline(self, buildings: List[List[int]]) -> List[List[int]]:
        # 1. get all the critical points
        # 2. sort all the critical points
        # 3. get the skyline
        def getCriticalPoints(buildings):
            criticalPoints = []
            for building in buildings:
                criticalPoints.append((building[0], building[2], 1))
                criticalPoints.append((building[1], building[2], -1))
            return criticalPoints
        
        def sortCriticalPoints(criticalPoints):
            criticalPoints.sort(key=lambda x: (x[0], -x[1] * x[2]))
            return criticalPoints
        
        def getSkyline(criticalPoints):
            skyline = []
            height = 0
            heap = []
            for criticalPoint in criticalPoints:
                if criticalPoint[2] == 1:
                    if criticalPoint[1] > height:
                        skyline.append([criticalPoint[0], criticalPoint[1]])
                        height = criticalPoint[1]
                    heapq.heappush(heap, -criticalPoint[1])
                else:
                    heap.remove(-criticalPoint[1])
                    heapq.heapify(heap)
                    if len(heap) > 0:
                        maxHeight = -heap[0]
                    else:
                        maxHeight = 0
                    if maxHeight < height:
                        skyline.append([criticalPoint[0], maxHeight])
                        height = maxHeight
            return skyline
        
        criticalPoints = getCriticalPoints(buildings)
        criticalPoints = sortCriticalPoints(criticalPoints)
        skyline = getSkyline(criticalPoints)
        return skyline

=======

def getSkyline(self, buildings: List[List[int]]) -> List[List[int]]:
        # 1. find all the critical points
        # 2. for each critical point, find the highest building
        # 3. if the height is different from the last height, add it to the result
        # 4. return the result
        critical_points = set()
        for building in buildings:
            critical_points.add(building[0])
            critical_points.add(building[1])
        critical_points = sorted(critical_points)
        result = []
        for critical_point in critical_points:
            height = 0
            for building in buildings:
                if building[0] <= critical_point and critical_point < building[1]:
                    height = max(height, building[2])
            if not result or height != result[-1][1]:
                result.append([critical_point, height])
        return result
