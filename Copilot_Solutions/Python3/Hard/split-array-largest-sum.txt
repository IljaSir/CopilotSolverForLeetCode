Synthesizing 10/10 solutions

=======

def splitArray(self, nums: List[int], k: int) -> int:
        def check(mid):
            count = 1
            total = 0
            for num in nums:
                if total + num > mid:
                    count += 1
                    total = num
                else:
                    total += num
            return count <= k
        left, right = max(nums), sum(nums)
        while left < right:
            mid = (left + right) // 2
            if check(mid):
                right = mid
            else:
                left = mid + 1
        return left

=======

def splitArray(self, nums: List[int], k: int) -> int:
        def check(mid):
            total = 0
            count = 1
            for num in nums:
                total += num
                if total > mid:
                    total = num
                    count += 1
                    if count > k:
                        return False
            return True

        low = max(nums)
        high = sum(nums)
        while low < high:
            mid = low + (high - low) // 2
            if check(mid):
                high = mid
            else:
                low = mid + 1
        return low

=======

def splitArray(self, nums: List[int], k: int) -> int:
        def check(mid):
            count = 1
            cur_sum = 0
            for num in nums:
                cur_sum += num
                if cur_sum > mid:
                    cur_sum = num
                    count += 1
            return count <= k
        l, r = max(nums), sum(nums)
        while l < r:
            mid = (l+r)//2
            if check(mid):
                r = mid
            else:
                l = mid + 1
        return l

=======

def splitArray(self, nums: List[int], k: int) -> int:
        def check(x):
            cnt = 1
            s = 0
            for n in nums:
                if s + n > x:
                    cnt += 1
                    s = n
                else:
                    s += n
            return cnt <= k
        left, right = max(nums), sum(nums)
        while left < right:
            mid = (left + right) // 2
            if check(mid):
                right = mid
            else:
                left = mid + 1
        return left

=======

def splitArray(self, nums: List[int], k: int) -> int:
        def valid(mid):
            cnt, s = 1, 0
            for n in nums:
                s += n
                if s > mid:
                    cnt += 1
                    s = n
            return cnt <= k
        l, r = max(nums), sum(nums)
        while l < r:
            mid = (l + r) // 2
            if valid(mid):
                r = mid
            else:
                l = mid + 1
        return l

=======

def splitArray(self, nums: List[int], k: int) -> int:
        def check(mid):
            count = 0
            s = 0
            for num in nums:
                s += num
                if s > mid:
                    s = num
                    count += 1
            return count + 1 <= k
        l, r = max(nums), sum(nums)
        while l < r:
            mid = (l + r) // 2
            if check(mid):
                r = mid
            else:
                l = mid + 1
        return l

=======

def splitArray(self, nums: List[int], k: int) -> int:
        def check(mid):
            cnt = 0
            tmp = 0
            for num in nums:
                tmp += num
                if tmp > mid:
                    tmp = num
                    cnt += 1
            return cnt + 1 <= k
        l = max(nums)
        r = sum(nums)
        while l < r:
            mid = (l + r) // 2
            if check(mid):
                r = mid
            else:
                l = mid + 1
        return l

=======

def splitArray(self, nums: List[int], k: int) -> int:
        def can_split(target):
            count = 1
            current_sum = 0
            for num in nums:
                current_sum += num
                if current_sum > target:
                    count += 1
                    current_sum = num
            return count <= k

        l = max(nums)
        r = sum(nums)
        while l < r:
            mid = (l + r) // 2
            if can_split(mid):
                r = mid
            else:
                l = mid + 1
        return l

=======

def splitArray(self, nums: List[int], k: int) -> int:
        def can_split(m):
            cnt, cur = 1, 0
            for n in nums:
                cur += n
                if cur > m:
                    cur = n
                    cnt += 1
            return cnt <= k
        
        left, right = max(nums), sum(nums)
        while left < right:
            mid = (left + right) // 2
            if can_split(mid):
                right = mid
            else:
                left = mid + 1
        return left

=======

def splitArray(self, nums: List[int], k: int) -> int:
        def split(nums, largest):
            n = 1
            s = 0
            for num in nums:
                s += num
                if s > largest:
                    s = num
                    n += 1
            return n
        
        lo = max(nums)
        hi = sum(nums)
        while lo < hi:
            mid = (lo + hi) // 2
            n = split(nums, mid)
            if n > k:
                lo = mid + 1
            else:
                hi = mid
        return lo
