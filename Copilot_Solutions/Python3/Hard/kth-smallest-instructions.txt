Synthesizing 10/10 solutions

=======

def kthSmallestPath(self, destination: List[int], k: int) -> str:
        row, col = destination
        dp = [[1] * (col + 1) for _ in range(row + 1)]
        for i in range(1, row + 1):
            for j in range(1, col + 1):
                dp[i][j] = dp[i - 1][j] + dp[i][j - 1]
        def dfs(row, col, k):
            if row == 0:
                return 'V' * col
            if col == 0:
                return 'H' * row
            if k <= dp[row - 1][col]:
                return 'H' + dfs(row - 1, col, k)
            else:
                return 'V' + dfs(row, col - 1, k - dp[row - 1][col])
        return dfs(row, col, k)

=======

def kthSmallestPath(self, destination: List[int], k: int) -> str:
        row, col = destination
        dp = [[1] * (col + 1) for _ in range(row + 1)]
        for i in range(1, row + 1):
            for j in range(1, col + 1):
                dp[i][j] = dp[i - 1][j] + dp[i][j - 1]
        path = ""
        while row > 0 or col > 0:
            if row > 0 and k > dp[row - 1][col]:
                path += "V"
                k -= dp[row - 1][col]
                row -= 1
            else:
                path += "H"
                col -= 1
        return path

=======

def kthSmallestPath(self, destination: List[int], k: int) -> str:
        row, col = destination
        dp = [[0]*(col+1) for _ in range(row+1)]
        dp[0][0] = 1
        for i in range(row+1):
            for j in range(col+1):
                if i == 0 and j == 0:
                    continue
                if i == 0:
                    dp[i][j] = dp[i][j-1]
                elif j == 0:
                    dp[i][j] = dp[i-1][j]
                else:
                    dp[i][j] = dp[i-1][j] + dp[i][j-1]
        path = ''
        while row > 0 or col > 0:
            if row == 0:
                path += 'H'
                col -= 1
            elif col == 0:
                path += 'V'
                row -= 1
            else:
                if dp[row][col-1] >= k:
                    path += 'H'
                    col -= 1
                else:
                    path += 'V'
                    k -= dp[row][col-1]
                    row -= 1
        return path

=======

def kthSmallestPath(self, destination: List[int], k: int) -> str:
        r, c = destination
        dp = [[0] * (c + 1) for _ in range(r + 1)]
        for i in range(r + 1):
            dp[i][0] = 1
        for j in range(c + 1):
            dp[0][j] = 1
        for i in range(1, r + 1):
            for j in range(1, c + 1):
                dp[i][j] = dp[i - 1][j] + dp[i][j - 1]
        res = []
        while r or c:
            if r and k <= dp[r - 1][c]:
                res.append('H')
                r -= 1
            else:
                res.append('V')
                k -= dp[r][c - 1]
                c -= 1
        return ''.join(res)

=======

def kthSmallestPath(self, destination: List[int], k: int) -> str:
        row = destination[0]
        col = destination[1]
        dp = [[0 for _ in range(col+1)] for _ in range(row+1)]
        dp[0][0] = 1
        for i in range(row+1):
            for j in range(col+1):
                if i == 0 and j == 0:
                    continue
                if i == 0:
                    dp[i][j] = dp[i][j-1]
                elif j == 0:
                    dp[i][j] = dp[i-1][j]
                else:
                    dp[i][j] = dp[i-1][j] + dp[i][j-1]
        res = ""
        while row > 0 and col > 0:
            if dp[row-1][col] >= k:
                res += "H"
                row -= 1
            else:
                res += "V"
                k -= dp[row-1][col]
                col -= 1
        while row > 0:
            res += "H"
            row -= 1
        while col > 0:
            res += "V"
            col -= 1
        return res

=======

def kthSmallestPath(self, destination: List[int], k: int) -> str:
        row, col = destination
        n = row + col
        dp = [[1] * (n + 1) for _ in range(n + 1)]
        for i in range(1, n + 1):
            for j in range(1, n + 1):
                dp[i][j] = dp[i - 1][j] + dp[i][j - 1]
        ans = []
        i, j = 0, 0
        while i < row or j < col:
            if i < row and j < col:
                if dp[i + 1][j] >= k:
                    ans.append('H')
                    j += 1
                else:
                    ans.append('V')
                    k -= dp[i + 1][j]
                    i += 1
            elif i < row:
                ans.append('V')
                i += 1
            else:
                ans.append('H')
                j += 1
        return ''.join(ans)

=======

def kthSmallestPath(self, destination: List[int], k: int) -> str:
        def comb(n, k):
            if k == 0:
                return 1
            return comb(n, k - 1) * (n - k + 1) // k
        row, col = destination
        ans = ""
        for i in range(row + col):
            if col == 0:
                ans += "H"
                continue
            if row == 0:
                ans += "V"
                continue
            if k <= comb(row + col - 1, col):
                ans += "H"
                col -= 1
            else:
                ans += "V"
                k -= comb(row + col - 1, col)
                row -= 1
        return ans

=======

def kthSmallestPath(self, destination: List[int], k: int) -> str:
        def nCr(n, r):
            f = math.factorial
            return f(n) // f(r) // f(n-r)
        
        def helper(m, n, k):
            if m == 0:
                return "V" * n
            if n == 0:
                return "H" * m
            if k <= nCr(m+n-1, n-1):
                return "H" + helper(m-1, n, k)
            else:
                return "V" + helper(m, n-1, k-nCr(m+n-1, n-1))
        return helper(destination[1], destination[0], k)

=======

def kthSmallestPath(self, destination: List[int], k: int) -> str:
        
        pass

=======

def kthSmallestPath(self, destination: List[int], k: int) -> str:
        def nCr(n, r):
            f = math.factorial
            return f(n) // f(r) // f(n - r)
        def count_path(x, y):
            if x == 0 or y == 0:
                return 1
            if (x, y) in memo:
                return memo[(x, y)]
            memo[(x, y)] = count_path(x - 1, y) + count_path(x, y - 1)
            return memo[(x, y)]
        memo = {}
        res = ''
        x, y = destination
        while x > 0 and y > 0:
            left = count_path(x - 1, y)
            if k <= left:
                res += 'H'
                x -= 1
            else:
                res += 'V'
                y -= 1
                k -= left
        res += 'H' * x
        res += 'V' * y
        return res
