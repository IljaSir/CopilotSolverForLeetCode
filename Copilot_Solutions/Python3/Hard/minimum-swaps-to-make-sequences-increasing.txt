Synthesizing 10/10 solutions

=======

def minSwap(self, nums1: List[int], nums2: List[int]) -> int:
        n = len(nums1)
        dp = [[n, n] for _ in range(n)]
        dp[0] = [0, 1]
        for i in range(1, n):
            if nums1[i] > nums1[i-1] and nums2[i] > nums2[i-1]:
                dp[i][0] = dp[i-1][0]
                dp[i][1] = dp[i-1][1] + 1
            if nums1[i] > nums2[i-1] and nums2[i] > nums1[i-1]:
                dp[i][0] = min(dp[i][0], dp[i-1][1])
                dp[i][1] = min(dp[i][1], dp[i-1][0] + 1)
        return min(dp[-1])

=======

def minSwap(self, nums1: List[int], nums2: List[int]) -> int:
        n = len(nums1)
        dp = [[n, n] for _ in range(n)]
        dp[0] = [0, 1]
        for i in range(1, n):
            if nums1[i] > nums1[i-1] and nums2[i] > nums2[i-1]:
                dp[i][0] = min(dp[i][0], dp[i-1][0])
                dp[i][1] = min(dp[i][1], dp[i-1][1] + 1)
            if nums1[i] > nums2[i-1] and nums2[i] > nums1[i-1]:
                dp[i][0] = min(dp[i][0], dp[i-1][1])
                dp[i][1] = min(dp[i][1], dp[i-1][0] + 1)
        return min(dp[-1])

=======

def minSwap(self, nums1: List[int], nums2: List[int]) -> int:
        n = len(nums1)
        dp = [[float('inf'), float('inf')] for _ in range(n)]
        dp[0] = [0, 1]
        for i in range(1, n):
            if nums1[i] > nums1[i-1] and nums2[i] > nums2[i-1]:
                dp[i][0] = dp[i-1][0]
                dp[i][1] = dp[i-1][1] + 1
            if nums1[i] > nums2[i-1] and nums2[i] > nums1[i-1]:
                dp[i][0] = min(dp[i][0], dp[i-1][1])
                dp[i][1] = min(dp[i][1], dp[i-1][0] + 1)
        return min(dp[-1][0], dp[-1][1])

=======

def minSwap(self, nums1: List[int], nums2: List[int]) -> int:
        n = len(nums1)
        dp = [[float('inf'), float('inf')] for _ in range(n)]
        dp[0] = [0, 1]
        for i in range(1, n):
            if nums1[i] > nums1[i - 1] and nums2[i] > nums2[i - 1]:
                dp[i][0] = min(dp[i][0], dp[i - 1][0])
                dp[i][1] = min(dp[i][1], dp[i - 1][1] + 1)
            if nums1[i] > nums2[i - 1] and nums2[i] > nums1[i - 1]:
                dp[i][0] = min(dp[i][0], dp[i - 1][1])
                dp[i][1] = min(dp[i][1], dp[i - 1][0] + 1)
        return min(dp[-1])

=======

def minSwap(self, nums1: List[int], nums2: List[int]) -> int:
        n = len(nums1)
        dp = [[n, n] for _ in range(n)]
        dp[0] = [0, 1]
        for i in range(1, n):
            if nums1[i-1] < nums1[i] and nums2[i-1] < nums2[i]:
                dp[i][0] = dp[i-1][0]
                dp[i][1] = dp[i-1][1] + 1
            if nums1[i-1] < nums2[i] and nums2[i-1] < nums1[i]:
                dp[i][0] = min(dp[i][0], dp[i-1][1])
                dp[i][1] = min(dp[i][1], dp[i-1][0] + 1)
        return min(dp[-1])

=======

def minSwap(self, nums1: List[int], nums2: List[int]) -> int:
        n = len(nums1)
        dp = [[float('inf'), float('inf')] for _ in range(n)]
        dp[0][0], dp[0][1] = 0, 1
        for i in range(1, n):
            if nums1[i] > nums1[i-1] and nums2[i] > nums2[i-1]:
                dp[i][0] = dp[i-1][0]
                dp[i][1] = dp[i-1][1] + 1
            if nums1[i] > nums2[i-1] and nums2[i] > nums1[i-1]:
                dp[i][0] = min(dp[i][0], dp[i-1][1])
                dp[i][1] = min(dp[i][1], dp[i-1][0] + 1)
        return min(dp[-1])

=======

def minSwap(self, nums1: List[int], nums2: List[int]) -> int:
        N = len(nums1)
        swap = [N] * N
        keep = [N] * N
        keep[0] = 0
        swap[0] = 1
        for i in range(1, N):
            if nums1[i] > nums1[i-1] and nums2[i] > nums2[i-1]:
                keep[i] = keep[i-1]
                swap[i] = swap[i-1] + 1
            if nums2[i] > nums1[i-1] and nums1[i] > nums2[i-1]:
                keep[i] = min(keep[i], swap[i-1])
                swap[i] = min(swap[i], keep[i-1] + 1)
        return min(keep[N-1], swap[N-1])

=======

def minSwap(self, nums1: List[int], nums2: List[int]) -> int:
        n = len(nums1)
        dp = [[float('inf') for _ in range(2)] for _ in range(n)]
        dp[0][0], dp[0][1] = 0, 1
        for i in range(1, n):
            if nums1[i-1] < nums1[i] and nums2[i-1] < nums2[i]:
                dp[i][0] = dp[i-1][0]
                dp[i][1] = dp[i-1][1] + 1
            if nums1[i-1] < nums2[i] and nums2[i-1] < nums1[i]:
                dp[i][0] = min(dp[i][0], dp[i-1][1])
                dp[i][1] = min(dp[i][1], dp[i-1][0] + 1)
        return min(dp[-1][0], dp[-1][1])

=======

def minSwap(self, nums1: List[int], nums2: List[int]) -> int:
        n = len(nums1)
        swap = [float('inf') for _ in range(n)]
        not_swap = [float('inf') for _ in range(n)]
        swap[0] = 1
        not_swap[0] = 0
        for i in range(1, n):
            if nums1[i] > nums1[i-1] and nums2[i] > nums2[i-1]:
                not_swap[i] = not_swap[i-1]
                swap[i] = swap[i-1] + 1
            if nums1[i] > nums2[i-1] and nums2[i] > nums1[i-1]:
                swap[i] = min(swap[i], not_swap[i-1] + 1)
                not_swap[i] = min(not_swap[i], swap[i-1])
        return min(swap[n-1], not_swap[n-1])

=======

def minSwap(self, nums1: List[int], nums2: List[int]) -> int:
        n = len(nums1)
        # dp[i][0] = min swaps to make nums1[:i+1] and nums2[:i+1] strictly increasing
        # if we swap nums1[i] and nums2[i]
        # dp[i][1] = min swaps to make nums1[:i+1] and nums2[:i+1] strictly increasing
        # if we don't swap nums1[i] and nums2[i]
        dp = [[n, n] for _ in range(n)]
        dp[0] = [0, 1]
        for i in range(1, n):
            if nums1[i] > nums1[i-1] and nums2[i] > nums2[i-1]:
                dp[i][0] = min(dp[i][0], dp[i-1][0]+1)
                dp[i][1] = min(dp[i][1], dp[i-1][1])
            if nums1[i] > nums2[i-1] and nums2[i] > nums1[i-1]:
                dp[i][0] = min(dp[i][0], dp[i-1][1]+1)
                dp[i][1] = min(dp[i][1], dp[i-1][0])
        return min(dp[-1])
