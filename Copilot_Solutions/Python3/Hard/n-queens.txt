Synthesizing 10/10 solutions

=======

def solveNQueens(self, n: int) -> List[List[str]]:
        def dfs(queens, xy_dif, xy_sum):
            p = len(queens)
            if p==n:
                result.append(queens)
                return None
            for q in range(n):
                if q not in queens and p-q not in xy_dif and p+q not in xy_sum:
                    dfs(queens+[q], xy_dif+[p-q], xy_sum+[p+q])
        result = []
        dfs([],[],[])
        return [["."*i + "Q" + "."*(n-i-1) for i in sol] for sol in result]

=======

def solveNQueens(self, n: int) -> List[List[str]]:
        def dfs(queens, xy_dif, xy_sum):
            p = len(queens)
            if p==n:
                result.append(queens)
                return None
            for q in range(n):
                if q not in queens and p-q not in xy_dif and p+q not in xy_sum:
                    dfs(queens+[q], xy_dif+[p-q], xy_sum+[p+q])
        result = []
        dfs([],[],[])
        return [['.'*i + 'Q' + '.'*(n-i-1) for i in sol] for sol in result]

=======

def solveNQueens(self, n: int) -> List[List[str]]:
        def dfs(queens, xy_diff, xy_sum):
            p = len(queens)
            if p==n:
                result.append(queens)
                return None
            for q in range(n):
                if q not in queens and p-q not in xy_diff and p+q not in xy_sum:
                    dfs(queens+[q], xy_diff+[p-q], xy_sum+[p+q])
        result = []
        dfs([],[],[])
        return [["."*i + "Q" + "."*(n-i-1) for i in sol] for sol in result]

=======

def solveNQueens(self, n: int) -> List[List[str]]:
        def can_place(row, col):
            return not (cols[col] + hill_diagonals[row - col] + dale_diagonals[row + col])
        
        def place_queen(row, col):
            queens.add((row, col))
            cols[col] = 1
            hill_diagonals[row - col] = 1
            dale_diagonals[row + col] = 1
        
        def remove_queen(row, col):
            queens.remove((row, col))
            cols[col] = 0
            hill_diagonals[row - col] = 0
            dale_diagonals[row + col] = 0
        
        def add_solution():
            solution = []
            for _, col in sorted(queens):
                solution.append('.' * col + 'Q' + '.' * (n - col - 1))
            output.append(solution)
        
        def backtrack(row = 0):
            for col in range(n):
                if can_place(row, col):
                    place_queen(row, col)
                    if row + 1 == n:
                        add_solution()
                    else:
                        backtrack(row + 1)
                    remove_queen(row, col)
        
        cols = [0] * n
        hill_diagonals = [0] * (2 * n - 1)
        dale_diagonals = [0] * (2 * n - 1)
        queens = set()
        output = []
        backtrack()
        return output

=======

def solveNQueens(self, n: int) -> List[List[str]]:
        def check(k, j):
            for i in range(k):
                if board[i] == j or abs(board[i] - j) == abs(i - k):
                    return False
            return True
        def dfs(depth, valuelist):
            if depth == n:
                res.append(valuelist)
                return None
            for i in range(n):
                if check(depth, i):
                    s = '.' * n
                    board[depth] = i
                    dfs(depth + 1, valuelist + [s[:i] + 'Q' + s[i + 1:]])
        board = [-1 for _ in range(n)]
        res = []
        dfs(0, [])
        return res

=======

def solveNQueens(self, n: int) -> List[List[str]]:
        def check(row, col):
            for i in range(row):
                if board[i][col] == 'Q':
                    return False
            i, j = row - 1, col - 1
            while i >= 0 and j >= 0:
                if board[i][j] == 'Q':
                    return False
                i -= 1
                j -= 1
            i, j = row - 1, col + 1
            while i >= 0 and j < n:
                if board[i][j] == 'Q':
                    return False
                i -= 1
                j += 1
            return True
        
        def dfs(row):
            if row == n:
                res.append([''.join(row) for row in board])
                return
            for col in range(n):
                if not check(row, col):
                    continue
                board[row][col] = 'Q'
                dfs(row + 1)
                board[row][col] = '.'
        
        board = [['.' for _ in range(n)] for _ in range(n)]
        res = []
        dfs(0)
        return res

=======

def solveNQueens(self, n: int) -> List[List[str]]:
        def check(row, col):
            for i in range(row):
                if board[i] == col or abs(row - i) == abs(col - board[i]):
                    return False
            return True
        
        def dfs(row):
            if row == n:
                res.append([''.join('.'*i + 'Q' + '.'*(n-i-1) for i in board)])
                return
            for col in range(n):
                if check(row, col):
                    board[row] = col
                    dfs(row+1)
        
        board = [-1] * n
        res = []
        dfs(0)
        return res

=======

def solveNQueens(self, n: int) -> List[List[str]]:
        def is_valid(row, col):
            for i in range(row):
                if board[i][col] == 'Q':
                    return False
            i, j = row - 1, col - 1
            while i >= 0 and j >= 0:
                if board[i][j] == 'Q':
                    return False
                i -= 1
                j -= 1
            i, j = row - 1, col + 1
            while i >= 0 and j < n:
                if board[i][j] == 'Q':
                    return False
                i -= 1
                j += 1
            return True
        
        def backtrack(row):
            if row == n:
                solutions.append([''.join(row) for row in board])
                return
            for col in range(n):
                if not is_valid(row, col):
                    continue
                board[row][col] = 'Q'
                backtrack(row + 1)
                board[row][col] = '.'
        
        board = [['.'] * n for _ in range(n)]
        solutions = []
        backtrack(0)
        return solutions

=======

def solveNQueens(self, n: int) -> List[List[str]]:
        res = []
        def isvalid(board, row, col):
            for i in range(row):
                if board[i][col] == 'Q':
                    return False
            i, j = row-1, col-1
            while i >= 0 and j >= 0:
                if board[i][j] == 'Q':
                    return False
                i -= 1
                j -= 1
            i, j = row-1, col+1
            while i >= 0 and j < n:
                if board[i][j] == 'Q':
                    return False
                i -= 1
                j += 1
            return True
        def dfs(board, row):
            if row == n:
                res.append([''.join(x) for x in board])
                return
            for col in range(n):
                if isvalid(board, row, col):
                    board[row][col] = 'Q'
                    dfs(board, row+1)
                    board[row][col] = '.'
        dfs([['.' for _ in range(n)] for _ in range(n)], 0)
        return res

=======

def solveNQueens(self, n: int) -> List[List[str]]:
        self.ans = []
        self.n = n
        self.board = [['.'] * n for _ in range(n)]
        self.backtrack(0)
        return self.ans
