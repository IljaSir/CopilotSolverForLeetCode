Synthesizing 6/10 solutions (Duplicates hidden)

=======

class Solution:
    def smallestRange(self, nums: List[List[int]]) -> List[int]:
        # nums = [[4,10,15,24,26],[0,9,12,20],[5,18,22,30]]
        # nums = [[1,2,3],[1,2,3],[1,2,3]]
        # nums = [[1,2,3,4,5],[1,2,3,4,5],[1,2,3,4,5]]
        # nums = [[1,2,3,4,5],[2,3,4,5,6],[3,4,5,6,7]]
        # nums = [[1,2,3,4,5],[1,2,3,4,5],[1,2,3,4,5]]
        # nums = [[1,2,3,4,5],[1,2,3,4,5],[1,2,3,4,5]]
        # nums = [[1,2,3,4,5],[1,2,3,4,5],[1,2,3,4,5]]
        # nums = [[1,2,3,4,5],[1,2,3,4,5],[1,2,3,4,5]]
        # nums = [[1,2,3,4,5],[1,2,3,4,5],[1,2,3,4,5]]
        # nums = [[1,2,3,4,5],[1,2,3,4,5],[1,2,3,4,5]]
        # nums = [[1,2,3,4,5],[1,2,3,4,5],[1,2,3,4,5]]
        # nums = [[1,2,3,4,5],[1,2,3,4,5],[1,2,3,4,5]]
        # nums = [[1,2,3,4,5],[1,2,3,4,5],[1,2,3,4,5]]
        # nums = [[1,2,3,4,5],[1,2,3,4,5],[1,2,3,4,5]]
        # nums = [[1,2,3,4,5],[1,2,3,4,5],[

=======

def smallestRange(self, nums: List[List[int]]) -> List[int]:
        # print(nums)
        n = len(nums)
        if n == 1:
            return [nums[0][0], nums[0][0]]
        # print(n)
        index = [0] * n
        # print(index)
        min_val = 10**5
        max_val = -10**5
        for i in range(n):
            min_val = min(min_val, nums[i][0])
            max_val = max(max_val, nums[i][0])
        # print(min_val, max_val)
        res = [min_val, max_val]
        while True:
            min_index = 0
            min_val = 10**5
            max_val = -10**5
            for i in range(n):
                if index[i] + 1 < len(nums[i]):
                    if nums[i][index[i] + 1] < min_val:
                        min_val = nums[i][index[i] + 1]
                        min_index = i
            index[min_index] += 1
            for i in range(n):
                max_val = max(max_val, nums[i][index[i]])
            if max_val - min_val < res[1] - res[0]:
                res = [min_val, max_val]
            flag = True
            for i in range(n):
                if index[i] + 1 < len(nums[i]):
                    flag = False
                    break
            if flag:
                break
        return res

=======

def smallestRange(self, nums: List[List[int]]) -> List[int]:
        def add_to_heap(heap, i, j, k):
            heapq.heappush(heap, (nums[i][j], i, j))
            if j == 0:
                return True
            return False
        
        def pop_from_heap(heap, i, j, k):
            _, i, j = heapq.heappop(heap)
            if j == k - 1:
                return True
            return False
        
        k = len(nums)
        heap = []
        for i in range(k):
            add_to_heap(heap, i, 0, len(nums[i]))
        min_range = [float('-inf'), float('inf')]
        while heap:
            min_val, i, j = heapq.heappop(heap)
            if min_val - nums[i][0] < min_range[1] - min_range[0]:
                min_range = [nums[i][0], min_val]
            if pop_from_heap(heap, i, j, len(nums[i])):
                break
            add_to_heap(heap, i, j + 1, len(nums[i]))
        return min_range

=======

def smallestRange(self, nums: List[List[int]]) -> List[int]:
        
        pass
