Synthesizing 10/10 solutions (Duplicates hidden)

=======

def orderlyQueue(self, s: str, k: int) -> str:
        if k == 1:
            return min(s[i:] + s[:i] for i in range(len(s)))
        else:
            return ''.join(sorted(s))

=======

def orderlyQueue(self, s: str, k: int) -> str:
        if k == 1:
            return min(s[i:]+s[:i] for i in range(len(s)))
        else:
            return "".join(sorted(s))

=======

def orderlyQueue(self, s: str, k: int) -> str:
        if k == 1:
            return min(s[i:] + s[:i] for i in range(len(s)))
        return ''.join(sorted(s))

=======

def orderlyQueue(self, s: str, k: int) -> str:
        
        pass

=======

def orderlyQueue(self, s: str, k: int) -> str:
        # if k == 1:
        #     return min(s[i:]+s[:i] for i in range(len(s)))
        # else:
        #     return ''.join(sorted(s))
        return ''.join(sorted(s)) if k > 1 else min(s[i:]+s[:i] for i in range(len(s)))

=======

def orderlyQueue(self, s: str, k: int) -> str:
        # if k > 1, we can reorder the string, so just sort it
        if k > 1:
            return ''.join(sorted(s))
        # else, we can only move the first character to the end
        # so we try all possible moves to find the lexicographically smallest string
        return min(s[i:]+s[:i] for i in range(len(s)))
