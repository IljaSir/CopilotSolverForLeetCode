Synthesizing 10/10 solutions

=======

def totalNQueens(self, n: int) -> int:
        if n < 1: return []
        self.count = 0
        self.DFS(n, 0, 0, 0, 0)
        return self.count

=======

def totalNQueens(self, n: int) -> int:
        def dfs(queens, xy_dif, xy_sum):
            p = len(queens)
            if p == n:
                self.count += 1
                return None
            for q in range(n):
                if q not in queens and p-q not in xy_dif and p+q not in xy_sum:
                    dfs(queens+[q], xy_dif+[p-q], xy_sum+[p+q])
        self.count = 0
        dfs([], [], [])
        return self.count

=======

def totalNQueens(self, n: int) -> int:
        def dfs(queens, xy_sum, xy_diff):
            p = len(queens)
            if p == n:
                self.count += 1
                return None
            for q in range(n):
                if q not in queens and p+q not in xy_sum and p-q not in xy_diff:
                    dfs(queens+[q], xy_sum+[p+q], xy_diff+[p-q])
        self.count = 0
        dfs([], [], [])
        return self.count

=======

def totalNQueens(self, n: int) -> int:
        self.count = 0
        self.dfs([-1]*n, 0)
        return self.count

=======

def totalNQueens(self, n: int) -> int:
        def backtrack(queens: List[int], xy_diff: List[int], xy_sum: List[int]) -> int:
            p = len(queens)
            if p == n:
                return 1
            count = 0
            for q in range(n):
                if q not in queens and p - q not in xy_diff and p + q not in xy_sum:
                    count += backtrack(queens + [q], xy_diff + [p - q], xy_sum + [p + q])
            return count
        return backtrack([], [], [])

=======

def totalNQueens(self, n: int) -> int:
        def dfs(col, xy_dif, xy_sum):
            p = len(col)
            if p == n:
                self.res += 1
                return
            for q in range(n):
                if q not in col and p - q not in xy_dif and p + q not in xy_sum:
                    dfs(col + [q], xy_dif + [p - q], xy_sum + [p + q])
        self.res = 0
        dfs([], [], [])
        return self.res

=======

def totalNQueens(self, n: int) -> int:
        def backtrack(row):
            if row == n:
                self.count += 1
                return
            for col in range(n):
                if col in cols or row - col in diag1 or row + col in diag2:
                    continue
                cols.add(col)
                diag1.add(row - col)
                diag2.add(row + col)
                backtrack(row + 1)
                cols.remove(col)
                diag1.remove(row - col)
                diag2.remove(row + col)
        self.count = 0
        cols, diag1, diag2 = set(), set(), set()
        backtrack(0)
        return self.count

=======

def totalNQueens(self, n: int) -> int:
        self.cnt = 0
        self.dfs([-1] * n, 0)
        return self.cnt

=======

def totalNQueens(self, n: int) -> int:
        self.n = n
        self.ans = 0
        self.dfs([], [], [])
        return self.ans

=======

def totalNQueens(self, n: int) -> int:
        return self.solve(n)
