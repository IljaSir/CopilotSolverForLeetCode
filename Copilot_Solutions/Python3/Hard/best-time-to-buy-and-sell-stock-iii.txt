Synthesizing 10/10 solutions

=======

def maxProfit(self, prices: List[int]) -> int:
        n = len(prices)
        if n < 2:
            return 0
        buy1 = -prices[0]
        buy2 = -prices[0]
        sell1 = 0
        sell2 = 0
        for i in range(1, n):
            buy1 = max(buy1, -prices[i])
            sell1 = max(sell1, buy1 + prices[i])
            buy2 = max(buy2, sell1 - prices[i])
            sell2 = max(sell2, buy2 + prices[i])
        return sell2

=======

def maxProfit(self, prices: List[int]) -> int:
        n = len(prices)
        if n < 2:
            return 0
        left = [0] * n
        right = [0] * n
        min_price = prices[0]
        for i in range(1, n):
            min_price = min(min_price, prices[i])
            left[i] = max(left[i - 1], prices[i] - min_price)
        max_price = prices[-1]
        for i in range(n - 2, -1, -1):
            max_price = max(max_price, prices[i])
            right[i] = max(right[i + 1], max_price - prices[i])
        ans = right[0]
        for i in range(1, n):
            ans = max(ans, left[i - 1] + right[i])
        return ans

=======

def maxProfit(self, prices: List[int]) -> int:
        n = len(prices)
        if n < 2:
            return 0
        dp = [[0] * 4 for _ in range(n)]
        dp[0][1] = -prices[0]
        dp[0][3] = -prices[0]
        for i in range(1, n):
            dp[i][0] = dp[i-1][0]
            dp[i][1] = max(dp[i-1][1], dp[i-1][0] - prices[i])
            dp[i][2] = max(dp[i-1][2], dp[i-1][1] + prices[i])
            dp[i][3] = max(dp[i-1][3], dp[i-1][2] - prices[i])
        return max(dp[n-1][0], dp[n-1][2], dp[n-1][3])

=======

def maxProfit(self, prices: List[int]) -> int:
        n = len(prices)
        if n <= 1:
            return 0
        f = [0] * n
        g = [0] * n
        min_price = prices[0]
        for i in range(1, n):
            min_price = min(min_price, prices[i])
            f[i] = max(f[i - 1], prices[i] - min_price)
        max_price = prices[n - 1]
        for i in range(n - 2, -1, -1):
            max_price = max(max_price, prices[i])
            g[i] = max(g[i + 1], max_price - prices[i])
        ans = 0
        for i in range(n):
            ans = max(ans, f[i] + g[i])
        return ans

=======

def maxProfit(self, prices: List[int]) -> int:
        n = len(prices)
        if n == 0:
            return 0
        dp = [[0 for i in range(5)] for j in range(n)]
        dp[0][0] = 0
        dp[0][1] = -prices[0]
        dp[0][2] = 0
        dp[0][3] = -prices[0]
        dp[0][4] = 0
        for i in range(1, n):
            dp[i][0] = 0
            dp[i][1] = max(dp[i-1][1], dp[i-1][0]-prices[i])
            dp[i][2] = max(dp[i-1][2], dp[i-1][1]+prices[i])
            dp[i][3] = max(dp[i-1][3], dp[i-1][2]-prices[i])
            dp[i][4] = max(dp[i-1][4], dp[i-1][3]+prices[i])
        return dp[n-1][4]

=======

def maxProfit(self, prices: List[int]) -> int:
        n = len(prices)
        if n <= 1:
            return 0
        dp = [[0]*n for _ in range(3)]
        for k in range(1, 3):
            for i in range(1, n):
                dp[k][i] = max(dp[k][i-1], prices[i] - prices[0])
                for j in range(1, i):
                    dp[k][i] = max(dp[k][i], dp[k-1][j-1] + prices[i] - prices[j])
        return dp[2][n-1]

=======

def maxProfit(self, prices: List[int]) -> int:
        if len(prices) < 2:
            return 0
        dp = [[0, -prices[0]] for _ in range(3)]
        for price in prices:
            for i in range(1, 3):
                dp[i][1] = max(dp[i][1], dp[i-1][0] - price)
                dp[i][0] = max(dp[i][0], dp[i][1] + price)
        return dp[2][0]

=======

def maxProfit(self, prices: List[int]) -> int:
        # return self.maxProfit1(prices)
        return self.maxProfit2(prices)

=======

def maxProfit(self, prices: List[int]) -> int:
        if len(prices) < 2:
            return 0
        # 1st transaction
        min_price = prices[0]
        # 2nd transaction
        min_price_2 = prices[0]
        # 1st transaction profit
        max_profit = 0
        # 2nd transaction profit
        max_profit_2 = 0
        # 1st transaction profit + 2nd transaction profit
        max_profit_3 = 0
        for i in range(1, len(prices)):
            # 1st transaction
            min_price = min(min_price, prices[i])
            max_profit = max(max_profit, prices[i] - min_price)
            # 2nd transaction
            min_price_2 = min(min_price_2, prices[i] - max_profit)
            max_profit_2 = max(max_profit_2, prices[i] - min_price_2)
            # 1st transaction profit + 2nd transaction profit
            max_profit_3 = max(max_profit_3, max_profit + max_profit_2)
        return max_profit_3

=======

class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        # 1. find the first peak and the first valley
        # 2. find the second peak and the second valley
        # 3. sum up the profit
        # 4. return the maximum profit
        # 5. O(n) time and O(1) space
        # 6. 
        # 7. 
        # 8. 
        # 9. 
        # 10. 
        # 11. 
        # 12. 
        # 13. 
        # 14. 
        # 15. 
        # 16. 
        # 17. 
        # 18. 
        # 19. 
        # 20. 
        # 21. 
        # 22. 
        # 23. 
        # 24. 
        # 25. 
        # 26. 
        # 27. 
        # 28. 
        # 29. 
        # 30. 
        # 31. 
        # 32. 
        # 33. 
        # 34. 
        # 35. 
        # 36. 
        # 37. 
        # 38. 
        # 39. 
        # 40. 
        # 41. 
        # 42. 
        # 43. 
        # 44. 
        # 45. 
        # 46. 
        # 47. 
        # 48. 
        # 49. 
        # 50. 
        # 51. 
        # 52. 
        # 53. 
        # 54. 
        # 55. 
        # 56. 
        # 57. 
        # 58. 
        # 59. 
        # 60. 
        # 61. 
        # 62. 
        # 63. 
        # 64. 
        # 65. 
        # 66. 
        # 67. 
        # 68. 
        # 69. 
        # 70. 
        # 71. 
        # 72. 
        # 73. 
        # 74. 
        # 75. 
        # 76. 
        # 77. 
        #
