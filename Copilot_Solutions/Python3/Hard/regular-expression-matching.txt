Synthesizing 10/10 solutions

=======

def isMatch(self, s: str, p: str) -> bool:
        m, n = len(s), len(p)
        dp = [[False] * (n + 1) for _ in range(m + 1)]
        dp[0][0] = True
        for i in range(m + 1):
            for j in range(1, n + 1):
                if p[j - 1] == '*':
                    dp[i][j] = dp[i][j - 2]
                    if matches(s, p, i, j - 1):
                        dp[i][j] = dp[i][j] or dp[i - 1][j]
                else:
                    if matches(s, p, i, j):
                        dp[i][j] = dp[i - 1][j - 1]
        return dp[m][n]

=======

def isMatch(self, s: str, p: str) -> bool:
        if not p:
            return not s
        first_match = bool(s) and p[0] in {s[0], '.'}
        if len(p) >= 2 and p[1] == '*':
            return self.isMatch(s, p[2:]) or (first_match and self.isMatch(s[1:], p))
        else:
            return first_match and self.isMatch(s[1:], p[1:])

=======

def isMatch(self, s: str, p: str) -> bool:
        m, n = len(s), len(p)
        dp = [[False] * (n + 1) for _ in range(m + 1)]
        dp[0][0] = True
        for i in range(2, n + 1):
            dp[0][i] = dp[0][i - 2] and p[i - 1] == '*'
        for i in range(1, m + 1):
            for j in range(1, n + 1):
                if p[j - 1] == '*':
                    dp[i][j] = dp[i][j - 2] or (dp[i - 1][j] and (s[i - 1] == p[j - 2] or p[j - 2] == '.'))
                else:
                    dp[i][j] = dp[i - 1][j - 1] and (s[i - 1] == p[j - 1] or p[j - 1] == '.')
        return dp[m][n]

=======

def isMatch(self, s: str, p: str) -> bool:
        pass

=======

def isMatch(self, s: str, p: str) -> bool:
        # print(s, p)
        if not p:
            return not s
        if len(p) == 1:
            return len(s) == 1 and (s[0] == p[0] or p[0] == '.')
        if p[1] != '*':
            if not s:
                return False
            return (s[0] == p[0] or p[0] == '.') and self.isMatch(s[1:], p[1:])
        while s and (s[0] == p[0] or p[0] == '.'):
            if self.isMatch(s, p[2:]):
                return True
            s = s[1:]
        return self.isMatch(s, p[2:])

=======

def isMatch(self, s: str, p: str) -> bool:
        # dp[i][j] represents if s[:i] matches p[:j]
        dp = [[False] * (len(p) + 1) for _ in range(len(s) + 1)]
        dp[0][0] = True
        for i in range(len(p)):
            if p[i] == '*':
                dp[0][i + 1] = dp[0][i - 1]
        for i in range(len(s)):
            for j in range(len(p)):
                if p[j] == '.' or s[i] == p[j]:
                    dp[i + 1][j + 1] = dp[i][j]
                elif p[j] == '*':
                    if p[j - 1] != s[i] and p[j - 1] != '.':
                        dp[i + 1][j + 1] = dp[i + 1][j - 1]
                    else:
                        dp[i + 1][j + 1] = dp[i + 1][j - 1] or dp[i + 1][j] or dp[i][j + 1]
        return dp[-1][-1]

=======

def isMatch(self, s: str, p: str) -> bool:
        # dp[i][j] = dp[i-1][j-1] if s[i] == p[j] or p[j] == '.'
        # dp[i][j] = dp[i][j-2] if p[j-1] != s[i] and p[j-1] != '.'
        # dp[i][j] = dp[i][j-2] or dp[i-1][j] if p[j-1] == s[i] or p[j-1] == '.'
        m, n = len(s), len(p)
        dp = [[False] * (n + 1) for _ in range(m + 1)]
        dp[0][0] = True
        for i in range(m + 1):
            for j in range(1, n + 1):
                if p[j - 1] != '*':
                    dp[i][j] = i > 0 and dp[i - 1][j - 1] and (s[i - 1] == p[j - 1] or p[j - 1] == '.')
                else:
                    dp[i][j] = dp[i][j - 2] or (i > 0 and dp[i - 1][j] and (s[i - 1] == p[j - 2] or p[j - 2] == '.'))
        return dp[-1][-1]

=======

def isMatch(self, s: str, p: str) -> bool:
        # print(s, p)
        if len(p) == 0:
            return len(s) == 0
        is_first_match = len(s) > 0 and (s[0] == p[0] or p[0] == '.')
        if len(p) > 1 and p[1] == '*':
            return self.isMatch(s, p[2:]) or (is_first_match and self.isMatch(s[1:], p))
        else:
            return is_first_match and self.isMatch(s[1:], p[1:])

=======

def isMatch(self, s: str, p: str) -> bool:
        # dp[i][j] = dp[i-1][j-1] if p[j] == s[i] or p[j] == '.'
        # dp[i][j] = dp[i-1][j] or dp[i][j-2] if p[j] == '*'
        # dp[i][j] = dp[i][j-2] if p[j] == '*' and p[j-1] != s[i]
        n, m = len(s), len(p)
        dp = [[False] * (m + 1) for _ in range(n + 1)]
        dp[0][0] = True
        for j in range(2, m + 1):
            dp[0][j] = dp[0][j - 2] and p[j - 1] == '*'
        for i in range(1, n + 1):
            for j in range(1, m + 1):
                if p[j - 1] == s[i - 1] or p[j - 1] == '.':
                    dp[i][j] = dp[i - 1][j - 1]
                elif p[j - 1] == '*':
                    if p[j - 2] == s[i - 1] or p[j - 2] == '.':
                        dp[i][j] = dp[i - 1][j] or dp[i][j - 2]
                    else:
                        dp[i][j] = dp[i][j - 2]
        return dp[n][m]

=======

def isMatch(self, s: str, p: str) -> bool:
        if p == ".*":
            return True
        if not s:
            return not p
        if not p:
            return not s
        if p[0] == ".":
            return self.isMatch(s[1:], p[1:])
        if len(p) > 1 and p[1] == "*":
            return self.isMatch(s, p[2:]) or (s[0] == p[0] and self.isMatch(s[1:], p))
        return s[0] == p[0] and self.isMatch(s[1:], p[1:])
