Synthesizing 10/10 solutions

=======

def consecutiveNumbersSum(self, n: int) -> int:
        i = 1
        res = 0
        while i * (i + 1) // 2 <= n:
            if (n - i * (i + 1) // 2) % (i + 1) == 0:
                res += 1
            i += 1
        return res

=======

def consecutiveNumbersSum(self, n: int) -> int:
        res = 0
        for i in range(1, int(n**0.5)+1):
            if (n-i*(i-1)/2) % i == 0:
                res += 1
        return res

=======

def consecutiveNumbersSum(self, n: int) -> int:
        ans = 0
        for k in range(1, int(n**0.5) + 1):
            if (n - k * (k - 1) // 2) % k == 0:
                ans += 1
        return ans

=======

def consecutiveNumbersSum(self, n: int) -> int:
        ans = 0
        for i in range(1, int(n**0.5)+1):
            if (n - i*(i-1)/2) % i == 0:
                ans += 1
        return ans

=======

def consecutiveNumbersSum(self, n: int) -> int:
        count = 0
        for k in range(1, n + 1):
            if (n - k * (k - 1) / 2) % k == 0 and (n - k * (k - 1) / 2) / k > 0:
                count += 1
        return count

=======

def consecutiveNumbersSum(self, n: int) -> int:
        count = 0
        for i in range(1, n+1):
            if (2*n - i*(i-1)) % (2*i) == 0:
                count += 1
        return count

=======

def consecutiveNumbersSum(self, n: int) -> int:
        count = 0
        for i in range(1, n+1):
            if n % i == 0:
                if i % 2 == 1 and n // i >= i // 2:
                    count += 1
                elif i % 2 == 0 and n // i >= i // 2 + 1:
                    count += 1
        return count

=======

def consecutiveNumbersSum(self, n: int) -> int:
        res = 1
        for i in range(2, int((2*n)**0.5)+1):
            if (i-1)*i/2 <= n and (n - (i-1)*i/2) % i == 0:
                res += 1
        return res

=======

def consecutiveNumbersSum(self, n: int) -> int:
        if n == 1:
            return 1
        i = 2
        ans = 0
        while n // i >= i // 2:
            if (n - i * (i - 1) // 2) % i == 0:
                ans += 1
            i += 1
        return ans

=======

def consecutiveNumbersSum(self, n: int) -> int:
        # Solution 1 - Brute Force
        # Time  complexity: O(N^1/2)
        # Space complexity: O(1)
        # count = 0
        # for i in range(1, n+1):
        #     sum = 0
        #     for j in range(i, n+1):
        #         sum += j
        #         if sum == n:
        #             count += 1
        #             break
        #         elif sum > n:
        #             break
        # return count
        
        # Solution 2 - Math
        # Time  complexity: O(N^1/2)
        # Space complexity: O(1)
        count = 0
        for i in range(1, n+1):
            if (n - (i * (i-1) / 2)) / i > 0 and (n - (i * (i-1) / 2)) % i == 0:
                count += 1
        return count
