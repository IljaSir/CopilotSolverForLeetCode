Synthesizing 10/10 solutions (Duplicates hidden)

=======

def candy(self, ratings: List[int]) -> int:
        n = len(ratings)
        left = [1] * n
        for i in range(1, n):
            if ratings[i] > ratings[i - 1]:
                left[i] = left[i - 1] + 1
        
        right = ret = 0
        for i in range(n - 1, -1, -1):
            if i < n - 1 and ratings[i] > ratings[i + 1]:
                right += 1
            else:
                right = 1
            ret += max(left[i], right)
        return ret

=======

def candy(self, ratings: List[int]) -> int:
        n = len(ratings)
        left = [1] * n
        right = [1] * n
        for i in range(1, n):
            if ratings[i] > ratings[i - 1]:
                left[i] = left[i - 1] + 1
        for i in range(n - 2, -1, -1):
            if ratings[i] > ratings[i + 1]:
                right[i] = right[i + 1] + 1
        return sum(max(left[i], right[i]) for i in range(n))

=======

def candy(self, ratings: List[int]) -> int:
        n = len(ratings)
        if n == 1:
            return 1
        candies = [1] * n
        for i in range(1, n):
            if ratings[i] > ratings[i - 1]:
                candies[i] = candies[i - 1] + 1
        for i in range(n - 2, -1, -1):
            if ratings[i] > ratings[i + 1]:
                candies[i] = max(candies[i], candies[i + 1] + 1)
        return sum(candies)

=======

def candy(self, ratings: List[int]) -> int:
        n = len(ratings)
        if n <= 1:
            return n
        candies = [1] * n
        for i in range(1, n):
            if ratings[i] > ratings[i - 1]:
                candies[i] = candies[i - 1] + 1
        for i in range(n - 2, -1, -1):
            if ratings[i] > ratings[i + 1]:
                candies[i] = max(candies[i], candies[i + 1] + 1)
        return sum(candies)

=======

def candy(self, ratings: List[int]) -> int:
        n = len(ratings)
        if n == 1:
            return 1
        candy = [1] * n
        for i in range(1, n):
            if ratings[i] > ratings[i - 1]:
                candy[i] = candy[i - 1] + 1
        for i in range(n - 2, -1, -1):
            if ratings[i] > ratings[i + 1]:
                candy[i] = max(candy[i], candy[i + 1] + 1)
        return sum(candy)

=======

def candy(self, ratings: List[int]) -> int:
        # n = len(ratings)
        # if n == 0:
        #     return 0
        # if n == 1:
        #     return 1
        # if n == 2:
        #     return 3 if ratings[0] == ratings[1] else 4
        # res = 0
        # if ratings[0] < ratings[1]:
        #     res = 2
        #     prev = 2
        #     for i in range(2, n):
        #         if ratings[i] > ratings[i-1]:
        #             prev += 1
        #         else:
        #             prev = 1
        #         res += prev
        #     return res
        # else:
        #     res = 1
        #     prev = 1
        #     for i in range(2, n):
        #         if ratings[i] > ratings[i-1]:
        #             prev += 1
        #         else:
        #             prev = 1
        #         res += prev
        #     return res
        n = len(ratings)
        if n == 0:
            return 0
        if n == 1:
            return 1
        if n == 2:
            return 3 if ratings[0] == ratings[1] else 4
        res = 0
        if ratings[0] < ratings[1]:
            res = 2
            prev = 2
            for i in range(2, n):
                if ratings[i] > ratings[i-1]:
                    prev += 1
                else:
                    prev = 1
                res += prev
            return res
        else:
            res = 1
            prev = 1
            for i in range(2, n):
                if ratings[i] > ratings[i-1]:
                    prev += 1
                else:
                    prev = 1
                res += prev
            return res
