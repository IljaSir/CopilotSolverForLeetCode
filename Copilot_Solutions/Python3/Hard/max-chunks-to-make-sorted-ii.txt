Synthesizing 10/10 solutions (Duplicates hidden)

=======

def maxChunksToSorted(self, arr: List[int]) -> int:
        n = len(arr)
        mx = 0
        res = 0
        for i in range(n):
            mx = max(mx, arr[i])
            if mx == i:
                res += 1
        return res

=======

def maxChunksToSorted(self, arr: List[int]) -> int:
        count = 0
        max_num = 0
        for i, num in enumerate(arr):
            max_num = max(max_num, num)
            if max_num == i:
                count += 1
        return count

=======

def maxChunksToSorted(self, arr: List[int]) -> int:
        res = 0
        max_num = 0
        for i, a in enumerate(arr):
            max_num = max(max_num, a)
            if max_num == i:
                res += 1
        return res

=======

def maxChunksToSorted(self, arr: List[int]) -> int:
        max_seen = 0
        ans = 0
        for i, x in enumerate(arr):
            max_seen = max(max_seen, x)
            if max_seen == i:
                ans += 1
        return ans

=======

def maxChunksToSorted(self, arr: List[int]) -> int:
        
        pass

=======

def maxChunksToSorted(self, arr: List[int]) -> int:
        n = len(arr)
        if n == 1:
            return 1
        left = [0] * n
        right = [0] * n
        left[0] = arr[0]
        for i in range(1, n):
            left[i] = max(left[i-1], arr[i])
        right[-1] = arr[-1]
        for i in range(n-2, -1, -1):
            right[i] = min(right[i+1], arr[i])
        res = 1
        for i in range(1, n):
            if left[i-1] <= right[i]:
                res += 1
        return res

=======

def maxChunksToSorted(self, arr: List[int]) -> int:
        pre, res = 0, 0
        for i, v in enumerate(arr):
            pre = max(pre, v)
            if pre == i:
                res += 1
        return res
