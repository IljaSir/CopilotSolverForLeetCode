Synthesizing 10/10 solutions (Duplicates hidden)

=======

def findKthNumber(self, m: int, n: int, k: int) -> int:
        def enough(x):
            return sum(min(x // i, n) for i in range(1, m + 1)) >= k

        lo, hi = 1, m * n
        while lo < hi:
            mi = (lo + hi) // 2
            if not enough(mi):
                lo = mi + 1
            else:
                hi = mi
        return lo

=======

def findKthNumber(self, m: int, n: int, k: int) -> int:
        def enough(x):
            return sum(min(x // i, n) for i in range(1, m + 1)) >= k
        lo, hi = 1, m * n
        while lo < hi:
            mi = (lo + hi) // 2
            if enough(mi):
                hi = mi
            else:
                lo = mi + 1
        return lo

=======

def findKthNumber(self, m: int, n: int, k: int) -> int:
        def enough(x):
            return sum(min(x // i, n) for i in range(1, m + 1)) >= k
        l, r = 1, m * n
        while l < r:
            mid = (l + r) // 2
            if enough(mid):
                r = mid
            else:
                l = mid + 1
        return l

=======

def findKthNumber(self, m: int, n: int, k: int) -> int:
        def enough(x):
            cnt = 0
            for i in range(1, m+1):
                cnt += min(x//i, n)
            return cnt >= k
        lo, hi = 1, m*n
        while lo < hi:
            mi = (lo + hi) // 2
            if enough(mi):
                hi = mi
            else:
                lo = mi + 1
        return lo

=======

def findKthNumber(self, m: int, n: int, k: int) -> int:
        
        pass
