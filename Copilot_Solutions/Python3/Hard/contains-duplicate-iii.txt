Synthesizing 10/10 solutions (Duplicates hidden)

=======

def containsNearbyAlmostDuplicate(self, nums: List[int], indexDiff: int, valueDiff: int) -> bool:
        for i in range(len(nums)):
            for j in range(i + 1, i + indexDiff + 1):
                if j >= len(nums):
                    break
                if abs(nums[i] - nums[j]) <= valueDiff:
                    return True
        return False

=======

def containsNearbyAlmostDuplicate(self, nums: List[int], indexDiff: int, valueDiff: int) -> bool:
        for i in range(len(nums)):
            for j in range(i+1, len(nums)):
                if abs(i-j) <= indexDiff and abs(nums[i]-nums[j]) <= valueDiff:
                    return True
        return False

=======

def containsNearbyAlmostDuplicate(self, nums: List[int], indexDiff: int, valueDiff: int) -> bool:
        if valueDiff == 0:
            return len(set(nums)) != len(nums)
        for i in range(len(nums)):
            for j in range(i + 1, min(i + indexDiff + 1, len(nums))):
                if abs(nums[i] - nums[j]) <= valueDiff:
                    return True
        return False

=======

def containsNearbyAlmostDuplicate(self, nums: List[int], indexDiff: int, valueDiff: int) -> bool:
        if valueDiff == 0:
            return len(set(nums)) != len(nums)
        for i in range(len(nums)):
            for j in range(i+1, i+indexDiff+1):
                if j >= len(nums):
                    break
                if abs(nums[i] - nums[j]) <= valueDiff:
                    return True
        return False

=======

def containsNearbyAlmostDuplicate(self, nums: List[int], indexDiff: int, valueDiff: int) -> bool:
        if len(nums) <= 1:
            return False
        if indexDiff == 0:
            return len(nums) == len(set(nums))
        for i in range(len(nums)):
            for j in range(i+1, min(i+indexDiff+1, len(nums))):
                if abs(nums[i] - nums[j]) <= valueDiff:
                    return True
        return False

=======

def containsNearbyAlmostDuplicate(self, nums: List[int], indexDiff: int, valueDiff: int) -> bool:
        if len(nums) == 0:
            return False
        if indexDiff == 0:
            return len(nums) == len(set(nums))
        for i in range(len(nums)):
            for j in range(i+1, min(i+indexDiff+1, len(nums))):
                if abs(nums[i]-nums[j]) <= valueDiff:
                    return True
        return False

=======

def containsNearbyAlmostDuplicate(self, nums: List[int], indexDiff: int, valueDiff: int) -> bool:
        
        pass
