Synthesizing 10/10 solutions (Duplicates hidden)

=======

def sumSubseqWidths(self, nums: List[int]) -> int:
        nums.sort()
        n = len(nums)
        res = 0
        for i in range(n):
            res = (res + nums[i] * pow(2, i, 10**9+7) - nums[i] * pow(2, n-1-i, 10**9+7)) % (10**9+7)
        return res

=======

def sumSubseqWidths(self, nums: List[int]) -> int:
        nums.sort()
        n = len(nums)
        res = 0
        for i in range(n):
            res += (pow(2, i, 10**9+7) - pow(2, n-i-1, 10**9+7)) * nums[i]
        return res % (10**9+7)

=======

def sumSubseqWidths(self, nums: List[int]) -> int:
        nums.sort()
        result = 0
        for i in range(len(nums)):
            result += nums[i] * pow(2, i, 10**9+7)
            result -= nums[i] * pow(2, len(nums)-i-1, 10**9+7)
        return result % (10**9+7)

=======

def sumSubseqWidths(self, nums: List[int]) -> int:
        nums.sort()
        n = len(nums)
        res = 0
        mod = 10**9 + 7
        for i in range(n):
            res = (res + (nums[i] - nums[n-1-i]) * (2**i - 2**(n-1-i))) % mod
        return res

=======

def sumSubseqWidths(self, nums: List[int]) -> int:
        nums.sort()
        n = len(nums)
        res = 0
        mod = 10**9 + 7
        for i in range(n):
            res += (nums[i] - nums[n - i - 1]) * pow(2, i, mod)
            res %= mod
        return res

=======

def sumSubseqWidths(self, nums: List[int]) -> int:
        nums.sort()
        n = len(nums)
        total = 0
        for i in range(n):
            total += nums[i] * pow(2, i, 10**9+7) - nums[i] * pow(2, n-1-i, 10**9+7)
        return total % (10**9+7)

=======

def sumSubseqWidths(self, nums: List[int]) -> int:
        MOD = 10**9 + 7
        nums.sort()
        n = len(nums)
        ans = 0
        for i in range(n):
            ans = (ans + (nums[i] - nums[n-1-i]) * pow(2, i, MOD) * pow(2, n-1-i, MOD)) % MOD
        return ans

=======

def sumSubseqWidths(self, nums: List[int]) -> int:
        nums.sort()
        n = len(nums)
        p = [1]
        for i in range(1, n):
            p.append(p[-1]*2 % (10**9 + 7))
        s = 0
        for i in range(n):
            s += (nums[i] - nums[n-1-i]) * (p[i] - p[n-1-i])
        return s % (10**9 + 7)

=======

def sumSubseqWidths(self, nums: List[int]) -> int:
        
        pass
