Synthesizing 10/10 solutions (Duplicates hidden)

=======

def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:
        nums = sorted(nums1 + nums2)
        if len(nums) % 2 == 0:
            return (nums[len(nums) // 2] + nums[len(nums) // 2 - 1]) / 2
        else:
            return nums[len(nums) // 2]

=======

def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:
        nums = nums1 + nums2
        nums.sort()
        if len(nums) % 2 == 0:
            return (nums[len(nums)//2] + nums[len(nums)//2 - 1]) / 2
        else:
            return nums[len(nums)//2]

=======

def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:
        nums = nums1 + nums2
        nums.sort()
        if len(nums) % 2 == 0:
            return (nums[len(nums)//2-1] + nums[len(nums)//2])/2
        else:
            return nums[len(nums)//2]

=======

def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:
        nums = sorted(nums1 + nums2)
        if len(nums) % 2 == 0:
            return (nums[len(nums)//2-1] + nums[len(nums)//2])/2
        else:
            return nums[len(nums)//2]

=======

def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:
        nums1.extend(nums2)
        nums1.sort()
        l = len(nums1)
        if l % 2 == 0:
            return (nums1[l//2-1] + nums1[l//2]) / 2
        else:
            return nums1[l//2]

=======

def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:
        nums = nums1 + nums2
        nums.sort()
        length = len(nums)
        if length % 2 == 0:
            return (nums[length//2-1] + nums[length//2])/2
        else:
            return nums[length//2]

=======

def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:
        nums = nums1 + nums2
        nums.sort()
        if len(nums) % 2 == 0:
            return (nums[int(len(nums)/2)] + nums[int(len(nums)/2 - 1)]) / 2
        else:
            return nums[int(len(nums)/2)]

=======

def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:
        a = nums1 + nums2
        a.sort()
        if len(a) % 2 == 0:
            return (a[len(a)//2] + a[len(a)//2 - 1]) / 2
        else:
            return a[len(a)//2]

=======

def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:
        nums = nums1 + nums2
        nums.sort()
        l = len(nums)
        if l % 2 == 1:
            return nums[(l-1)//2]
        else:
            return (nums[l//2] + nums[l//2-1])/2
